uint64_t local::QuickHull::buildHull(int8x8_t *this, double a2, __n128 a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  float v9;
  float *v11;
  char *v12;
  int8x8_t *v13;
  __n128 *v14;
  float *v15;
  char *v16;
  int8x8_t *v17;
  __n128 *v18;
  int8x8_t *v19;
  float *v20;
  int8x8_t *v21;
  __n128 *v22;
  float *v23;
  int8x8_t *v24;
  __n128 *v25;
  int8x8_t *v26;
  char *v27;
  float *v28;
  char *v29;
  __int128 v30;
  int8x8_t *v31;
  uint64_t v32;
  int8x8_t v33;
  __int128 *v34;
  int8x8_t *v35;
  __int128 v36;
  __int128 v37;
  float v38;
  float v39;
  uint64_t v40;
  __n128 *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  _DWORD *v48;
  int8x8_t *v49;
  __n128 *v50;
  float v51;
  __n128 v52;
  float v53;
  int8x8_t *v54;
  float *v55;
  int8x8_t *v56;
  __n128 *v57;
  unsigned __int32 v58;
  float v59;
  int8x8_t *v60;
  _DWORD *v61;
  char *v62;
  float *v63;
  __n128 v64;
  float v65;
  float32x2_t v66;
  float32x2_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  float v72;
  float v73;
  int8x8_t *v74;
  float32x2_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  __int128 v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v99;
  float v100;
  float v101;
  float v102;
  float *v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  BOOL v110;
  uint64_t i;
  float v113;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *Triangle;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t j;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int8x8_t v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v159;
  uint64_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float *v165;
  float v166;
  uint64_t v167;
  float *v168;
  uint64_t v169;
  int8x8_t v170;
  uint64_t v171;
  int8x8_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  float v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  __int32 v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t k;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int8x8_t v204;
  int8x8_t v205;
  float v206;
  float *v207;
  uint64_t v208;
  float **v209;
  unint64_t v210;
  float v211;
  float *v212;
  float v213;
  float v214;
  float v215;
  float v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t m;
  unint64_t v220;
  unint64_t n;
  __int32 v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char v230;
  float *v231;
  __n128 *v232;
  int8x8_t *v233;
  char *v234;
  float *v235;
  int8x8_t *v236;
  unsigned int v237;
  int8x8_t *v238;
  uint64_t v239;
  float v240;
  __int128 v241;
  __int32 v242;
  _DWORD v243[2];
  float v244;
  __int128 v245;
  __int32 v246;
  _DWORD v247[3];
  __int128 v248;
  int v249;
  _DWORD v250[3];
  __int128 v251;
  int v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;

  v11 = (float *)&this[18];
  v12 = (char *)&this[18] + 4;
  v13 = this + 19;
  v255 = *MEMORY[0x24BDAC8D0];
  v14 = (__n128 *)((char *)&this[19] + 4);
  v15 = (float *)&this[30];
  v16 = (char *)&this[30] + 4;
  v17 = this + 31;
  v18 = (__n128 *)((char *)&this[31] + 4);
  v19 = this + 22;
  v20 = (float *)&this[22] + 1;
  v21 = this + 23;
  v22 = (__n128 *)((char *)&this[23] + 4);
  v23 = (float *)&this[34] + 1;
  v24 = this + 35;
  v25 = (__n128 *)((char *)&this[35] + 4);
  v26 = this + 26;
  v27 = (char *)&this[26] + 4;
  v28 = (float *)&this[27];
  v29 = (char *)&this[27] + 4;
  v30 = 0uLL;
  v238 = this + 15;
  v236 = this + 49;
  v31 = this + 47;
  v234 = v12;
  v235 = v11;
  v232 = v14;
  v233 = v13;
  v231 = v15;
LABEL_2:
  if (!this[17].i8[4])
  {
    v32 = 0;
    v33 = this[6];
    v34 = (__int128 *)(*(_QWORD *)&v33 + 12);
    do
    {
      v35 = &this[v32];
      v35[18] = **(int8x8_t **)&v33;
      v35[19].i32[0] = *(_DWORD *)(*(_QWORD *)&v33 + 8);
      v36 = *v34;
      v35[21].i32[1] = *(_DWORD *)(*(_QWORD *)&v33 + 28);
      *(_OWORD *)&v35[19].u8[4] = v36;
      v35[30] = **(int8x8_t **)&v33;
      v35[31].i32[0] = *(_DWORD *)(*(_QWORD *)&v33 + 8);
      v37 = *v34;
      v35[33].i32[1] = *(_DWORD *)(*(_QWORD *)&v33 + 28);
      *(_OWORD *)&v35[31].u8[4] = v37;
      v32 += 4;
    }
    while (v32 != 12);
    v38 = *(float *)v33.i32[0];
    a3.n128_u32[0] = *(_DWORD *)(*(_QWORD *)&v33 + 4);
    v39 = *(float *)(*(_QWORD *)&v33 + 8);
    v40 = this[4].u32[0];
    if (v40 >= 2)
    {
      v41 = (__n128 *)(*(_QWORD *)&v33 + 44);
      v42 = v40 - 1;
      v43 = v38;
      v44 = a3.n128_f32[0];
      v45 = v39;
      while (1)
      {
        v46 = v41[-1].n128_f32[1];
        if (v46 <= v43)
        {
          v47 = v11;
          v48 = v12;
          v49 = v13;
          v50 = v14;
          v51 = v41[-1].n128_f32[1];
          if (v46 >= v38)
            goto LABEL_11;
        }
        else
        {
          v47 = v15;
          v48 = v16;
          v49 = v17;
          v50 = v18;
          v43 = v41[-1].n128_f32[1];
          v51 = v38;
        }
        *v47 = v46;
        *v48 = v41[-1].n128_u32[2];
        v49->i32[0] = v41[-1].n128_i32[3];
        v52 = *v41;
        v50[1].n128_u32[0] = v41[1].n128_u32[0];
        *v50 = v52;
        v38 = v51;
LABEL_11:
        v53 = v41[-1].n128_f32[2];
        if (v53 <= v44)
        {
          v54 = v19;
          v55 = v20;
          v56 = v21;
          v57 = v22;
          v58 = v41[-1].n128_u32[2];
          if (v53 >= a3.n128_f32[0])
            goto LABEL_15;
        }
        else
        {
          v54 = this + 34;
          v55 = v23;
          v56 = v24;
          v57 = v25;
          v44 = v41[-1].n128_f32[2];
          v58 = a3.n128_u32[0];
        }
        v54->i32[0] = v41[-1].n128_i32[1];
        *v55 = v53;
        v56->i32[0] = v41[-1].n128_i32[3];
        a3 = *v41;
        v57[1].n128_u32[0] = v41[1].n128_u32[0];
        *v57 = a3;
        a3.n128_u32[0] = v58;
LABEL_15:
        v59 = v41[-1].n128_f32[3];
        if (v59 > v45)
        {
          v61 = (_DWORD *)&this[38] + 1;
          v60 = this + 38;
          v62 = (char *)&this[39] + 4;
          v63 = (float *)&this[39];
          v45 = v41[-1].n128_f32[3];
          a9 = v39;
LABEL_18:
          v60->i32[0] = v41[-1].n128_i32[1];
          *v61 = v41[-1].n128_u32[2];
          *v63 = v59;
          v64 = *v41;
          *((_DWORD *)v62 + 4) = v41[1].n128_u32[0];
          *(__n128 *)v62 = v64;
          v39 = a9;
          goto LABEL_19;
        }
        v60 = v26;
        v61 = v27;
        v63 = v28;
        v62 = v29;
        a9 = v41[-1].n128_f32[3];
        if (v59 < v39)
          goto LABEL_18;
LABEL_19:
        v41 += 2;
        if (!--v42)
          goto LABEL_22;
      }
    }
    v45 = *(float *)(*(_QWORD *)&v33 + 8);
    v44 = *(float *)(*(_QWORD *)&v33 + 4);
    v43 = *(float *)v33.i32[0];
LABEL_22:
    v65 = (float)((float)(v45 + (float)((float)(v44 + (float)(v43 - v38)) - a3.n128_f32[0])) - v39) * 0.5;
    a3.n128_u32[0] = 884998144;
    v66.i32[0] = vdup_lane_s32((int32x2_t)a3.n128_u64[0], 0).u32[0];
    v66.i32[1] = *(_DWORD *)(*(_QWORD *)this + 4);
    v67 = vmul_n_f32(v66, v65);
    this[42] = vbsl_s8((int8x8_t)vcgt_f32(v67, v66), (int8x8_t)v67, (int8x8_t)v66);
  }
  v68 = 0;
  v69 = 0;
  LODWORD(v70) = 0;
  v71 = 0.0;
  do
  {
    v72 = v15[v69] - v15[v69 - 24];
    if (v72 <= v71)
      v70 = v70;
    else
      v70 = v68;
    if (v72 > v71)
      v71 = v15[v69] - v15[v69 - 24];
    v69 += 9;
    ++v68;
  }
  while (v69 != 27);
  v73 = *(float *)this[42].i32;
  if (v71 <= v73)
  {
    v227 = physx::shdfnd::Foundation::mInstance;
    v228 = "QuickHullConvexHullLib::findSimplex: Simplex input points appers to be almost at the same place";
    v229 = 877;
LABEL_193:
    physx::shdfnd::Foundation::error(v227, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", v229, v228, (uint64_t)v20, (uint64_t)v21, (uint64_t)v22, v230);
    return 4;
  }
  v74 = &this[4 * v70];
  v239 = (uint64_t)v74[30];
  v75 = (float32x2_t)v239;
  v76 = *(float *)v74[31].i32;
  v241 = *(_OWORD *)&v74[31].u8[4];
  v242 = v74[33].i32[1];
  v77 = *(float *)v74[18].i32;
  v78 = *(float *)&v74[18].i32[1];
  v240 = v76;
  *(float *)v243 = v77;
  v79 = *(float *)v74[19].i32;
  *(float *)&v243[1] = v78;
  v244 = v79;
  v80 = *(_OWORD *)&v74[19].u8[4];
  v245 = v80;
  v246 = v74[21].i32[1];
  v81 = v77 - *(float *)&v239;
  v82 = *((float *)&v239 + 1);
  v83 = v78 - *((float *)&v239 + 1);
  v84 = v79 - v76;
  v85 = sqrtf((float)((float)(v83 * v83) + (float)(v81 * v81)) + (float)(v84 * v84));
  if (v85 > 0.0)
  {
    v85 = 1.0 / v85;
    v81 = v81 * v85;
    v83 = v83 * v85;
    v84 = v84 * v85;
  }
  v86 = this[4].u32[0];
  if ((_DWORD)v86)
  {
    v87 = -v81;
    v88 = -v83;
    v89 = *(_QWORD *)&this[6] + 12;
    v90 = 0.0;
    v91 = this[4].u32[0];
    do
    {
      v92 = *(float *)(v89 - 12);
      v93 = *(float *)(v89 - 8);
      v94 = *(float *)(v89 - 4);
      v95 = (float)((float)(v93 - *((float *)&v239 + 1)) * (float)-v84) + (float)(v83 * (float)(v94 - v76));
      v96 = (float)((float)(v94 - v76) * v87) + (float)(v84 * (float)(v92 - *(float *)&v239));
      v97 = (float)((float)(v92 - *(float *)&v239) * v88) + (float)(v81 * (float)(v93 - *((float *)&v239 + 1)));
      if ((float)((float)((float)(v96 * v96) + (float)(v95 * v95)) + (float)(v97 * v97)) > v90
        && *(_DWORD *)v89 != (_DWORD)v241
        && *(_DWORD *)v89 != (_DWORD)v245)
      {
        v248 = *(_OWORD *)v89;
        *(float *)&v80 = v94;
        a9 = v93;
        v9 = v92;
        v249 = *(_DWORD *)(v89 + 16);
        v85 = (float)((float)(v93 - *((float *)&v239 + 1)) * (float)-v84) + (float)(v83 * (float)(v94 - v76));
        v79 = (float)((float)(v94 - v76) * v87) + (float)(v84 * (float)(v92 - *(float *)&v239));
        v78 = (float)((float)(v92 - *(float *)&v239) * v88) + (float)(v81 * (float)(v93 - *((float *)&v239 + 1)));
        v90 = (float)((float)(v96 * v96) + (float)(v95 * v95)) + (float)(v97 * v97);
      }
      v89 += 32;
      --v91;
    }
    while (v91);
    *(float *)v247 = v9;
    *(float *)&v247[1] = a9;
    v247[2] = v80;
  }
  else
  {
    v90 = 0.0;
  }
  if (sqrtf(v90) <= v73)
  {
    v227 = physx::shdfnd::Foundation::mInstance;
    v228 = "QuickHullConvexHullLib::findSimplex: Simplex input points appers to be colinear.";
    v229 = 912;
    goto LABEL_193;
  }
  v99 = sqrtf((float)((float)(v79 * v79) + (float)(v85 * v85)) + (float)(v78 * v78));
  if (v99 > 0.0)
  {
    v100 = 1.0 / v99;
    v85 = v85 * v100;
    v79 = v79 * v100;
    v78 = v78 * v100;
  }
  v101 = (float)(a9 * v79) + (float)(v9 * v85);
  v102 = v101 + (float)(*(float *)&v80 * v78);
  if ((_DWORD)v86)
  {
    v103 = (float *)(*(_QWORD *)&this[6] + 12);
    v104 = 0.0;
    do
    {
      v105 = *(v103 - 3);
      v106 = *(v103 - 2);
      v107 = *(v103 - 1);
      v108 = vabds_f32((float)((float)(v79 * v106) + (float)(v105 * v85)) + (float)(v107 * v78), v102);
      if (v108 > v104)
      {
        v109 = *v103;
        v110 = *(_DWORD *)v103 == (_DWORD)v241 || LODWORD(v109) == (_DWORD)v245;
        if (!v110 && LODWORD(v109) != (_DWORD)v248)
        {
          v251 = *(_OWORD *)v103;
          v252 = *((_DWORD *)v103 + 4);
          v101 = v107;
          v9 = v106;
          v82 = v105;
          v104 = v108;
        }
      }
      v103 += 8;
      --v86;
    }
    while (v86);
    *(float *)v250 = v82;
    *(float *)&v250[1] = v9;
    *(float *)&v250[2] = v101;
  }
  else
  {
    v104 = 0.0;
  }
  if (fabsf(v104) <= v73)
  {
    v227 = physx::shdfnd::Foundation::mInstance;
    v228 = "QuickHullConvexHullLib::findSimplex: Simplex input points appers to be coplanar.";
    v229 = 935;
    goto LABEL_193;
  }
  for (i = 0; i != 24; i += 8)
  {
    v75 = vadd_f32(v75, *(float32x2_t *)&v243[i]);
    v76 = v76 + *(float *)((char *)&v244 + i * 4);
  }
  v113 = (float)((float)((float)(v79 * v9) + (float)(v82 * v85)) + (float)(v101 * v78)) - v102;
  __asm { FMOV            V3.2S, #0.25 }
  this[2] = (int8x8_t)vmul_f32(v75, _D3);
  *(float *)this[3].i32 = v76 * 0.25;
  v253 = v30;
  v254 = v30;
  if (v113 >= 0.0)
  {
    Triangle = (uint64_t *)local::QuickHull::createTriangle((uint64_t)this, (uint64_t)&v239, (uint64_t)v247, (uint64_t)v243);
    *(_QWORD *)&v253 = Triangle;
    *((_QWORD *)&v253 + 1) = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)&v239, (uint64_t)v243);
    *(_QWORD *)&v254 = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v243, (uint64_t)v247);
    v133 = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v247, (uint64_t)&v239);
    v134 = 0;
    *((_QWORD *)&v254 + 1) = v133;
    v135 = -3;
    do
    {
      v136 = v134 + 1;
      v137 = (uint64_t *)*((_QWORD *)&v253 + v134 + 1);
      v138 = *v137;
      v139 = v134 + 2;
      if (v134 == 2)
        v139 = 1;
      v140 = *(_QWORD *)(**((_QWORD **)&v253 + v139) + 40);
      *(_QWORD *)(v138 + 48) = v140;
      *(_QWORD *)(v140 + 48) = v138;
      v141 = *(_QWORD *)(*(_QWORD *)(*v137 + 40) + 40);
      v142 = *Triangle;
      if (v134)
      {
        v143 = v135;
        do
        {
          v142 = *(_QWORD *)(v142 + 40);
          _CF = __CFADD__(v143++, 1);
        }
        while (!_CF);
      }
      *(_QWORD *)(v141 + 48) = v142;
      *(_QWORD *)(v142 + 48) = v141;
      ++v135;
      v134 = v136;
    }
    while (v136 != 3);
  }
  else
  {
    v118 = (uint64_t *)local::QuickHull::createTriangle((uint64_t)this, (uint64_t)&v239, (uint64_t)v243, (uint64_t)v247);
    *(_QWORD *)&v253 = v118;
    v119 = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v243, (uint64_t)&v239);
    *((_QWORD *)&v253 + 1) = v119;
    v120 = (uint64_t *)local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v247, (uint64_t)v243);
    *(_QWORD *)&v254 = v120;
    *((_QWORD *)&v254 + 1) = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)&v239, (uint64_t)v247);
    v121 = *(_QWORD *)(*(_QWORD *)v119 + 40);
    v122 = *v120;
    *(_QWORD *)(v121 + 48) = *v120;
    *(_QWORD *)(v122 + 48) = v121;
    v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v119 + 40) + 40);
    v124 = *v118;
    v125 = -1;
    v126 = 1;
    do
    {
      v127 = v125;
      do
      {
        v124 = *(_QWORD *)(v124 + 40);
        _CF = __CFADD__(v127++, 1);
      }
      while (!_CF);
      *(_QWORD *)(v123 + 48) = v124;
      *(_QWORD *)(v124 + 48) = v123;
      v128 = v126 + 2;
      ++v126;
      v129 = *((_QWORD *)&v253 + v126);
      v130 = *(_QWORD *)(*(_QWORD *)v129 + 40);
      --v125;
      if (v126 == 3)
        v128 = 1;
      v131 = **((_QWORD **)&v253 + v128);
      *(_QWORD *)(v130 + 48) = v131;
      *(_QWORD *)(v131 + 48) = v130;
      v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v129 + 40) + 40);
      v124 = *v118;
    }
    while (v126 != 3);
    *(_QWORD *)(v123 + 48) = v124;
    *(_QWORD *)(v124 + 48) = v123;
  }
  for (j = 0; j != 32; j += 8)
  {
    v145 = (_QWORD *)((char *)&v253 + j);
    v146 = this[16].u32[0];
    if ((this[16].i32[1] & 0x7FFFFFFFu) <= v146)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)v238, v145);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)&this[15] + 8 * v146) = *v145;
      this[16].i32[0] = v146 + 1;
    }
  }
  this[17].i32[0] = 4;
  v147 = this[4].u32[0];
  if ((_DWORD)v147)
  {
    v148 = 0;
    v149 = this[6];
    v150 = v241;
    v151 = v245;
    v152 = v248;
    v153 = v251;
    do
    {
      v154 = *(_QWORD *)&v149 + 32 * v148;
      v155 = *(_DWORD *)(v154 + 12);
      if (v155 != v150 && v155 != v151 && v155 != v152 && v155 != v153)
      {
        v159 = 0;
        v160 = 0;
        v161 = *(float *)this[42].i32;
        v162 = *(float *)v154;
        v163 = *(float *)(v154 + 4);
        v164 = *(float *)(v154 + 8);
        do
        {
          v165 = *(float **)((char *)&v253 + v159);
          v166 = v165[13];
          if ((float)((float)((float)((float)(v163 * v165[7]) + (float)(v165[6] * v162)) + (float)(v165[8] * v164))
                     - v166) > v161)
          {
            v161 = (float)((float)((float)(v163 * v165[7]) + (float)(v165[6] * v162)) + (float)(v165[8] * v164)) - v166;
            v160 = *(_QWORD *)((char *)&v253 + v159);
          }
          v159 += 8;
        }
        while (v159 != 32);
        if (v160)
        {
          v167 = *(_QWORD *)&v149 + 32 * v148;
          *(float *)(v167 + 16) = v161;
          v168 = (float *)(v167 + 16);
          v169 = *(_QWORD *)(v160 + 16);
          if (v169)
          {
            if (*(float *)(v169 + 16) <= v161)
            {
              *(_QWORD *)(*(_QWORD *)&v149 + 32 * v148 + 24) = v169;
              *(_QWORD *)(v160 + 16) = v154;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)&v149 + 32 * v148 + 24) = *(_QWORD *)(v169 + 24);
              *(_QWORD *)(v169 + 24) = v154;
            }
          }
          else
          {
            *(_QWORD *)(v160 + 16) = v154;
            *v168 = v161;
            *(_QWORD *)(*(_QWORD *)&v149 + 32 * v148 + 24) = 0;
          }
        }
      }
      ++v148;
    }
    while (v148 != v147);
  }
  v170 = this[1];
  v171 = this[16].u32[0];
  if ((*(_WORD *)(*(_QWORD *)&v170 + 72) & 4) == 0)
  {
LABEL_114:
    if (this[16].i32[0])
    {
      v174 = 4;
      while (1)
      {
        v175 = 0;
        v176 = 0;
        v177 = *(float *)&this[42].i32[1];
        v178 = (uint64_t *)this[15];
        do
        {
          v179 = *v178;
          if (!*(_DWORD *)(*v178 + 60))
          {
            v180 = *(_QWORD *)(v179 + 16);
            if (v180)
            {
              if (v177 < *(float *)(v180 + 16))
              {
                v176 = *(_QWORD *)(v179 + 16);
                v175 = *v178;
                v177 = *(float *)(v180 + 16);
              }
            }
          }
          ++v178;
          --v171;
        }
        while (v171);
        v170 = this[1];
        if (!v176
          || *(_DWORD *)(v176 + 12) == this[5].i32[0]
          || (*(_WORD *)(*(_QWORD *)&v170 + 72) & 0x20) != 0 && v174 >= *(unsigned __int16 *)(*(_QWORD *)&v170 + 74))
        {
          goto LABEL_189;
        }
        *(_QWORD *)(v175 + 16) = *(_QWORD *)(*(_QWORD *)(v175 + 16) + 24);
        local::QuickHull::calculateHorizon((uint64_t)this, (float *)v176, 0, v175, (uint64_t)&this[45], (uint64_t)v236);
        v181 = this[17].i32[0];
        if ((this[46].i32[0] + v181) >= 0x100)
        {
          v223 = this[50].i32[0];
          if (v223)
          {
            v224 = (uint64_t *)*v236;
            v225 = this[50].u32[0];
            do
            {
              v226 = *v224++;
              *(_DWORD *)(v226 + 60) = 0;
              --v225;
            }
            while (v225);
          }
          this[17].i32[0] = v223 + v181;
          this[4].i32[1] = v174;
          return 3;
        }
        v237 = v174;
        v182 = 0;
        v183 = 0;
        v184 = 0;
        do
        {
          v185 = *(_QWORD *)(*(_QWORD *)&this[45] + 8 * v182);
          v186 = local::QuickHull::createTriangle((uint64_t)this, v176, *(_QWORD *)(v185 + 48), v185);
          v187 = v186;
          v239 = v186;
          v188 = this[16].u32[0];
          if ((this[16].i32[1] & 0x7FFFFFFFu) <= v188)
          {
            physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)v238, &v239);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)&this[15] + 8 * v188) = v186;
            this[16].i32[0] = v188 + 1;
          }
          ++this[17].i32[0];
          v189 = *(_QWORD *)v187;
          v190 = *(_QWORD *)(*(_QWORD *)v187 + 40);
          v191 = *(_QWORD *)(v190 + 40);
          v192 = *(_QWORD *)(v185 + 48);
          *(_QWORD *)(v191 + 48) = v192;
          *(_QWORD *)(v192 + 48) = v191;
          v193 = v189;
          if (v183)
          {
            *(_QWORD *)(v190 + 48) = v183;
            *(_QWORD *)(v183 + 48) = v190;
            v193 = v184;
          }
          v194 = this[48].u32[0];
          if ((this[48].i32[1] & 0x7FFFFFFFu) <= v194)
          {
            physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)&this[47], &v239);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)&this[47] + 8 * v194) = v187;
            this[48].i32[0] = v194 + 1;
          }
          ++v182;
          v183 = v189;
          v184 = v193;
        }
        while (v182 < this[46].u32[0]);
        v195 = *(_QWORD *)(v193 + 40);
        *(_QWORD *)(v195 + 48) = v189;
        *(_QWORD *)(v189 + 48) = v195;
        LOBYTE(v239) = 0;
        v196 = this[48].u32[0];
        if ((_DWORD)v196)
        {
          v197 = 0;
          v198 = v237;
          do
          {
            v199 = *(_QWORD *)(*(_QWORD *)v31 + 8 * v197);
            if (!*(_DWORD *)(v199 + 60))
            {
              while ((local::QuickHull::doAdjacentMerge((uint64_t)this, v199, 1, &v239) & 1) != 0)
                ;
              v196 = this[48].u32[0];
            }
            ++v197;
          }
          while (v197 < v196);
          if ((_BYTE)v239)
            goto LABEL_172;
          if (v196)
          {
            for (k = 0; k < v196; ++k)
            {
              v201 = *(_QWORD *)(*(_QWORD *)v31 + 8 * k);
              if (*(_DWORD *)(v201 + 60) == 2)
              {
                *(_DWORD *)(v201 + 60) = 0;
                while ((local::QuickHull::doAdjacentMerge((uint64_t)this, v201, 0, &v239) & 1) != 0)
                  ;
                v196 = this[48].u32[0];
              }
            }
            if ((_BYTE)v239)
            {
LABEL_172:
              this[5].i32[0] = *(_DWORD *)(v176 + 12);
              v218 = this[10].u32[0];
              v24 = this + 35;
              v23 = (float *)&this[34] + 1;
              v26 = this + 26;
              v25 = (__n128 *)((char *)&this[35] + 4);
              if ((_DWORD)v218)
              {
                for (m = 0; m < v218; ++m)
                {
                  if (*(_QWORD *)(*(_QWORD *)&this[9] + 8 * m))
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
                    v218 = this[10].u32[0];
                  }
                }
              }
              this[10].i32[0] = 0;
              this[7].i32[1] = 0;
              this[8].i32[0] = 0;
              local::MemBlock<local::QuickHullHalfEdge,false>::init((uint64_t)&this[7], this[7].u32[0]);
              v220 = this[14].u32[0];
              if ((_DWORD)v220)
              {
                for (n = 0; n < v220; ++n)
                {
                  if (*(_QWORD *)(*(_QWORD *)&this[13] + 8 * n))
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
                    v220 = this[14].u32[0];
                  }
                }
              }
              this[14].i32[0] = 0;
              this[11].i32[1] = 0;
              this[12].i32[0] = 0;
              local::MemBlock<local::QuickHullFace,true>::init((unsigned int *)&this[11], this[11].u32[0]);
              this[16].i32[0] = 0;
              this[17].i32[0] = 0;
              this[44].i32[0] = 0;
              this[46].i32[0] = 0;
              this[48].i32[0] = 0;
              this[50].i32[0] = 0;
              this[52].i32[0] = 0;
              v12 = v234;
              v11 = v235;
              v14 = v232;
              v13 = v233;
              v16 = (char *)&this[30] + 4;
              v15 = v231;
              v18 = (__n128 *)((char *)&this[31] + 4);
              v17 = this + 31;
              v20 = (float *)&this[22] + 1;
              v19 = this + 22;
              v22 = (__n128 *)((char *)&this[23] + 4);
              v21 = this + 23;
              v28 = (float *)&this[27];
              v27 = (char *)&this[26] + 4;
              v29 = (char *)&this[27] + 4;
              v30 = 0uLL;
              goto LABEL_2;
            }
          }
        }
        else
        {
          v196 = 0;
          v198 = v237;
        }
        v202 = this[44].u32[0];
        if ((_DWORD)v202)
        {
          v203 = 0;
          v204 = this[47];
          v205 = this[43];
          v206 = *(float *)this[42].i32;
          do
          {
            if (v196)
            {
              v207 = 0;
              v208 = *(_QWORD *)(*(_QWORD *)&v205 + 8 * v203);
              v209 = (float **)v204;
              v210 = v196;
              v211 = v206;
              do
              {
                v212 = *v209;
                if (!*((_DWORD *)*v209 + 15))
                {
                  v213 = *(float *)(v208 + 8);
                  v214 = v212[6];
                  v215 = v212[7];
                  v216 = v212[13];
                  if ((float)((float)((float)((float)(*(float *)(v208 + 4) * v215) + (float)(v214 * *(float *)v208))
                                     + (float)(v212[8] * v213))
                             - v216) > v211)
                  {
                    v211 = (float)((float)((float)(*(float *)(v208 + 4) * v215) + (float)(v214 * *(float *)v208))
                                 + (float)(v212[8] * v213))
                         - v216;
                    v207 = *v209;
                  }
                }
                ++v209;
                --v210;
              }
              while (v210);
              if (v207)
              {
                *(float *)(v208 + 16) = v211;
                v217 = *((_QWORD *)v207 + 2);
                if (v217)
                {
                  if (*(float *)(v217 + 16) <= v211)
                  {
                    *(_QWORD *)(v208 + 24) = v217;
                    *((_QWORD *)v207 + 2) = v208;
                  }
                  else
                  {
                    *(_QWORD *)(v208 + 24) = *(_QWORD *)(v217 + 24);
                    *(_QWORD *)(v217 + 24) = v208;
                  }
                }
                else
                {
                  *((_QWORD *)v207 + 2) = v208;
                  *(float *)(v208 + 16) = v211;
                  *(_QWORD *)(v208 + 24) = 0;
                }
              }
            }
            ++v203;
          }
          while (v203 != v202);
        }
        this[44].i32[0] = 0;
        this[46].i32[0] = 0;
        this[48].i32[0] = 0;
        this[50].i32[0] = 0;
        v174 = v198 + 1;
        v171 = this[16].u32[0];
        if (!(_DWORD)v171)
        {
          v170 = this[1];
          goto LABEL_189;
        }
      }
    }
LABEL_188:
    v174 = 4;
LABEL_189:
    this[4].i32[1] = v174;
    return 2 * (v174 > *(unsigned __int16 *)(*(_QWORD *)&v170 + 74));
  }
  if (!this[16].i32[0])
    goto LABEL_188;
  v172 = *v238;
  v173 = this[16].u32[0];
  while (*(float *)(**(_QWORD **)&v172 + 36) >= (float)(*(float *)this->i32[0] + *(float *)this->i32[0]))
  {
    *(_QWORD *)&v172 += 8;
    if (!--v173)
      goto LABEL_114;
  }
  return 1;
}

uint64_t local::QuickHull::calculateHorizon(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = local::QuickHull::deleteFacePoints(a1, a4, 0);
  *(_DWORD *)(a4 + 60) = 1;
  v17 = a4;
  v13 = *(unsigned int *)(a6 + 8);
  if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v13)
  {
    result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a6, &v17);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v13) = a4;
    *(_DWORD *)(a6 + 8) = v13 + 1;
  }
  --*(_DWORD *)(a1 + 136);
  if (a3)
  {
    v14 = *(_QWORD *)(a3 + 40);
  }
  else
  {
    v14 = *(_QWORD *)a4;
    a3 = v14;
  }
  v17 = v14;
  do
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 56);
    if (!*(_DWORD *)(v15 + 60))
    {
      if ((float)((float)((float)((float)(a2[1] * *(float *)(v15 + 28)) + (float)(*(float *)(v15 + 24) * *a2))
                         + (float)(*(float *)(v15 + 32) * a2[2]))
                 - *(float *)(v15 + 52)) <= *(float *)(a1 + 336))
      {
        v16 = *(unsigned int *)(a5 + 8);
        if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v16)
        {
          result = physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack(a5, &v17);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a5 + 8 * v16) = v14;
          *(_DWORD *)(a5 + 8) = v16 + 1;
        }
      }
      else
      {
        result = local::QuickHull::calculateHorizon(a1, a2);
      }
    }
    v14 = *(_QWORD *)(v14 + 40);
    v17 = v14;
  }
  while (v14 != a3);
  return result;
}

uint64_t local::QuickHull::doAdjacentMerge(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  _QWORD *v7;
  float v8;
  char v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t result;
  int v18;
  unint64_t v19;

  v7 = *(_QWORD **)a2;
  *a4 = 0;
  v8 = *(float *)(a2 + 36);
  v9 = 1;
  while (1)
  {
    v10 = v7[6];
    v11 = *(float **)(v10 + 56);
    if (!a3)
      break;
    if (v8 <= v11[9])
    {
      v12 = -*(float *)(a1 + 336);
      if ((float)((float)((float)((float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 44) * v11[7])
                                 + (float)(v11[6] * *(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 40)))
                         + (float)(v11[8] * *(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 48)))
                 - v11[13]) > v12)
        goto LABEL_16;
      v16 = (float *)v7[7];
      v13 = (float)((float)(v11[11] * v16[7]) + (float)(v16[6] * v11[10])) + (float)(v16[8] * v11[12]);
      v14 = v16[13];
    }
    else
    {
      v12 = -*(float *)(a1 + 336);
      if ((float)((float)((float)((float)(v11[11] * *(float *)(v7[7] + 28))
                                 + (float)(*(float *)(v7[7] + 24) * v11[10]))
                         + (float)(*(float *)(v7[7] + 32) * v11[12]))
                 - *(float *)(v7[7] + 52)) > v12)
        goto LABEL_16;
      v13 = (float)((float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 44) * v11[7])
                  + (float)(v11[6] * *(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 40)))
          + (float)(v11[8] * *(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 48));
      v14 = v11[13];
    }
    if ((float)(v13 - v14) > v12)
      v9 = 0;
LABEL_13:
    v7 = (_QWORD *)v7[5];
    if (v7 == *(_QWORD **)a2)
    {
      result = 0;
      if ((v9 & 1) == 0)
        *(_DWORD *)(a2 + 60) = 2;
      return result;
    }
  }
  v15 = -*(float *)(a1 + 336);
  if ((float)((float)((float)((float)(v11[11] * *(float *)(v7[7] + 28)) + (float)(*(float *)(v7[7] + 24) * v11[10]))
                     + (float)(*(float *)(v7[7] + 32) * v11[12]))
             - *(float *)(v7[7] + 52)) <= v15
    && (float)((float)((float)((float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 44) * v11[7])
                             + (float)(v11[6] * *(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 40)))
                     + (float)(v11[8] * *(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 56) + 48)))
             - v11[13]) <= v15)
  {
    goto LABEL_13;
  }
LABEL_16:
  *(_DWORD *)(a1 + 416) = 0;
  if ((local::QuickHullFace::mergeAdjacentFace((uint64_t *)a2, v7, a1 + 408, v8) & 1) != 0)
  {
    v18 = *(_DWORD *)(a1 + 416);
    *(_DWORD *)(a1 + 136) -= v18;
    if (v18)
    {
      v19 = 0;
      do
        local::QuickHull::deleteFacePoints(a1, *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v19++), a2);
      while (v19 < *(unsigned int *)(a1 + 416));
    }
    return 1;
  }
  else
  {
    result = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t local::QuickHull::deleteFacePoints(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v6 = result;
    v7 = result + 344;
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v8 = v3;
            v12 = v3;
            v3 = *(_QWORD *)(v3 + 24);
            *(_QWORD *)(v8 + 24) = 0;
            if (a3)
            {
              v9 = (float)((float)((float)(*(float *)(v8 + 4) * *(float *)(a3 + 28))
                                 + (float)(*(float *)(a3 + 24) * *(float *)v8))
                         + (float)(*(float *)(a3 + 32) * *(float *)(v8 + 8)))
                 - *(float *)(a3 + 52);
              if (v9 > *(float *)(v6 + 336))
                break;
            }
            v11 = *(unsigned int *)(v6 + 352);
            if ((*(_DWORD *)(v6 + 356) & 0x7FFFFFFFu) <= v11)
            {
              result = physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::growAndPushBack(v7, &v12);
              if (!v3)
                goto LABEL_17;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v6 + 344) + 8 * v11) = v8;
              *(_DWORD *)(v6 + 352) = v11 + 1;
              if (!v3)
                goto LABEL_17;
            }
          }
          *(float *)(v8 + 16) = v9;
          v10 = *(_QWORD *)(a3 + 16);
          if (v10)
            break;
          *(_QWORD *)(a3 + 16) = v8;
          *(float *)(v8 + 16) = v9;
          *(_QWORD *)(v8 + 24) = 0;
          if (!v3)
            goto LABEL_17;
        }
        if (*(float *)(v10 + 16) <= v9)
          break;
        *(_QWORD *)(v8 + 24) = *(_QWORD *)(v10 + 24);
        *(_QWORD *)(v10 + 24) = v8;
        if (!v3)
          goto LABEL_17;
      }
      *(_QWORD *)(v8 + 24) = v10;
      *(_QWORD *)(a3 + 16) = v8;
    }
    while (v3);
LABEL_17:
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

BOOL local::QuickHull::canMergeFaces(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float *v42;
  float v43;
  float *v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned __int16 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  uint64_t v90;
  float *v91;
  unsigned __int16 v92;
  uint64_t v93;
  unint64_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char v103;
  _BYTE v104[16];
  uint64_t v105;

  v2 = a2;
  v105 = *MEMORY[0x24BDAC8D0];
  v4 = a2[7];
  v5 = *(uint64_t **)(a2[6] + 56);
  v6 = *(unsigned __int16 *)(v4 + 8);
  v7 = *((unsigned __int16 *)v5 + 4);
  v8 = v7 + v6;
  v104[8] = v7 + v6 > 0xE;
  if (v7 + v6 < 0xF)
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (uint64_t *)((char *)&v90 - v10);
    bzero((char *)&v90 - v10, v11);
  }
  else
  {
    v9 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v91, 72 * (v7 + v6), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 1447);
    v6 = *(unsigned __int16 *)(v4 + 8);
    v7 = *((unsigned __int16 *)v5 + 4);
  }
  bzero(v9, 72 * (v6 + (unint64_t)v7));
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v92 = 0;
  v93 = 0;
  v96 = 0.0;
  v100 = 0xFF7FFFFF00000000;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v91 = (float *)v9;
  v15 = *(_QWORD **)v4;
  if (*(_QWORD **)v4 == v2)
    v15 = (_QWORD *)v2[5];
  v16 = v15;
  do
  {
    v17 = &v9[9 * v14];
    v17[7] = &v91;
    *v17 = *v16;
    *((_DWORD *)v17 + 2) = *((_DWORD *)v16 + 2);
    v18 = *(_OWORD *)((char *)v16 + 12);
    *((_DWORD *)v17 + 7) = *((_DWORD *)v16 + 7);
    *(_OWORD *)((char *)v17 + 12) = v18;
    if (v16 == v2)
    {
      v12 = &v9[9 * v14];
      v13 = (_QWORD *)v2[6];
    }
    v19 = v14;
    if (!v14)
      v19 = *(unsigned __int16 *)(v4 + 8);
    v20 = v14++;
    v21 = v19 - 1;
    if ((_QWORD *)v16[5] == v15)
      v22 = 0;
    else
      v22 = v14;
    v23 = &v9[9 * v20];
    v23[4] = &v9[9 * v21];
    v23[5] = &v9[9 * v22];
    v16 = (_QWORD *)v16[5];
  }
  while (v16 != v15);
  v24 = *v5;
  do
  {
    v25 = &v9[9 * v14];
    v25[7] = &v91;
    *v25 = *(_QWORD *)v24;
    *((_DWORD *)v25 + 2) = *(_DWORD *)(v24 + 8);
    v26 = *(_OWORD *)(v24 + 12);
    *((_DWORD *)v25 + 7) = *(_DWORD *)(v24 + 28);
    *(_OWORD *)((char *)v25 + 12) = v26;
    if (v13 == (_QWORD *)v24)
      v13 = &v9[9 * v14];
    v27 = *v5;
    if (*(_QWORD *)(v24 + 40) == *v5)
    {
      v29 = *(unsigned __int16 *)(v4 + 8);
      v28 = v29;
    }
    else
    {
      v28 = v14 + 1;
      v29 = *(unsigned __int16 *)(v4 + 8);
    }
    v30 = v14;
    if (v14 == v29)
      v30 = v14 + *((unsigned __int16 *)v5 + 4);
    v31 = &v9[9 * v14];
    v31[4] = &v9[9 * v30 - 9];
    v31[5] = &v9[9 * v28];
    ++v14;
    v24 = *(_QWORD *)(v24 + 40);
  }
  while (v24 != v27);
  v32 = 0;
  v34 = v12[4];
  v33 = v12[5];
  v36 = v13[4];
  v35 = v13[5];
  *(_QWORD *)(v36 + 40) = v33;
  *(_QWORD *)(v33 + 32) = v36;
  *(_QWORD *)(v34 + 40) = v35;
  *(_QWORD *)(v35 + 32) = v34;
  v94 = 0;
  v95 = 0.0;
  v37 = v91;
  v39 = *v91;
  v38 = v91[1];
  v40 = 0.0;
  v41 = 3;
  v42 = v91;
  v43 = v91[2];
  do
  {
    v44 = (float *)*((_QWORD *)v42 + 5);
    v45 = (float)((float)((float)(v38 - v44[1]) * (float)(v38 - v44[1]))
                + (float)((float)(v39 - *v44) * (float)(v39 - *v44)))
        + (float)((float)(v43 - v44[2]) * (float)(v43 - v44[2]));
    if (v45 > v40)
      v32 = v42;
    v43 = v44[2];
    if (v45 > v40)
      v40 = v45;
    v38 = v44[1];
    v39 = *v44;
    v42 = (float *)*((_QWORD *)v42 + 5);
    --v41;
  }
  while (v41);
  v46 = *((_QWORD *)v32 + 5);
  v48 = *v32;
  v47 = v32[1];
  v49 = *(float *)v46 - *v32;
  v50 = *(float *)(v46 + 4) - v47;
  v51 = v32[2];
  v52 = *(float *)(v46 + 8) - v51;
  v97 = *v32;
  v98 = v47;
  v99 = v51;
  v53 = 1;
  v54 = 0.0;
  v55 = 0.0;
  v56 = 0.0;
  do
  {
    ++v53;
    v48 = v48 + *(float *)v46;
    v97 = v48;
    v47 = v47 + *(float *)(v46 + 4);
    v98 = v47;
    v51 = v51 + *(float *)(v46 + 8);
    v99 = v51;
    v46 = *(_QWORD *)(v46 + 40);
    v57 = *(float *)v46 - *v32;
    v58 = *(float *)(v46 + 4) - v32[1];
    v59 = *(float *)(v46 + 8) - v32[2];
    v56 = v56 + (float)((float)(v58 * (float)-v52) + (float)(v50 * v59));
    v55 = v55 + (float)((float)(v59 * (float)-v49) + (float)(v52 * v57));
    v94 = __PAIR64__(LODWORD(v55), LODWORD(v56));
    v54 = v54 + (float)((float)(v57 * (float)-v50) + (float)(v49 * v58));
    v95 = v54;
  }
  while ((float *)v46 != v32);
  v92 = v53;
  v60 = sqrtf((float)((float)(v55 * v55) + (float)(v56 * v56)) + (float)(v54 * v54));
  if (v60 > 0.0)
  {
    v56 = v56 * (float)(1.0 / v60);
    v55 = v55 * (float)(1.0 / v60);
    v94 = __PAIR64__(LODWORD(v55), LODWORD(v56));
    v54 = v54 * (float)(1.0 / v60);
    v95 = v54;
  }
  v61 = 1.0 / (float)v53;
  v62 = v61 * v48;
  v96 = v60;
  v97 = v62;
  v63 = v61 * v47;
  v64 = v61 * v51;
  v98 = v63;
  v99 = v64;
  v65 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v65)
  {
    v66 = (float)((float)(v63 * v55) + (float)(v56 * v62)) + (float)(v54 * v64);
    v67 = (float *)(*(_QWORD *)(a1 + 48) + 8);
    while ((float)((float)((float)((float)(v55 * *(v67 - 1)) + (float)(v56 * *(v67 - 2))) + (float)(v54 * *v67)) - v66) <= *(float *)(a1 + 340))
    {
      v67 += 8;
      if (!--v65)
        goto LABEL_38;
    }
  }
  else
  {
LABEL_38:
    v69 = *v91;
    v68 = v91[1];
    v70 = v91[2];
LABEL_39:
    v37 = (float *)*((_QWORD *)v37 + 5);
    v71 = *v37 - v69;
    v72 = v37[1] - v68;
    v73 = v37[2] - v70;
    v74 = sqrtf((float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73));
    if (v74 > 0.0)
    {
      v75 = 1.0 / v74;
      v71 = v71 * v75;
      v72 = v72 * v75;
      v73 = v73 * v75;
    }
    v76 = v73 * (float)-v56;
    v77 = v71 * (float)-v55;
    v78 = -(float)((float)(v72 * (float)-v54) + (float)(v55 * v73));
    v79 = -(float)(v76 + (float)(v54 * v71));
    v80 = -(float)(v77 + (float)(v56 * v72));
    v81 = v37;
    while ((float)((float)((float)((float)(v81[1] - v68) * v79) + (float)((float)(*v81 - v69) * v78))
                  + (float)((float)(v81[2] - v70) * v80)) <= *(float *)(a1 + 336))
    {
      v81 = (float *)*((_QWORD *)v81 + 5);
      if (v81 == v37)
      {
        v70 = v37[2];
        v68 = v37[1];
        v69 = *v37;
        if (v37 != v91)
          goto LABEL_39;
        v83 = v2[5];
        v82 = (_QWORD *)v2[6];
        v84 = v82[7];
        v85 = v82[4];
        do
        {
          v82 = (_QWORD *)v82[5];
          v2 = (_QWORD *)v2[4];
          v86 = *(_QWORD *)(v2[6] + 56);
        }
        while (v86 == v84);
        while (1)
        {
          v87 = *(_QWORD *)(*(_QWORD *)(v83 + 48) + 56);
          if (v87 != v84)
            break;
          v85 = *(_QWORD *)(v85 + 32);
          v83 = *(_QWORD *)(v83 + 40);
        }
        if (*(_QWORD *)(*(_QWORD *)(v85 + 48) + 56) != v87)
        {
          v88 = v86 != *(_QWORD *)(v82[6] + 56);
          goto LABEL_53;
        }
        break;
      }
    }
  }
  v88 = 0;
LABEL_53:
  if (v8 >= 0xF)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v104, (char *)v9);
  return v88;
}

_DWORD *local::addExpandPoint(_DWORD *result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)a2;
    v4 = v2 - 1;
    while (1)
    {
      v5 = v4;
      if (*(_DWORD *)(v3 + 60 * v4 + 48) == result[12]
        && *(_DWORD *)(v3 + 60 * v4 + 52) == result[13]
        && *(_DWORD *)(v3 + 60 * v4 + 56) == result[14])
      {
        break;
      }
      --v4;
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v2)
    {
      return (_DWORD *)physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::growAndPushBack(a2, (uint64_t)result);
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)a2 + 60 * v2;
      do
      {
        *(_OWORD *)(v8 + v6 * 4) = *(_OWORD *)&result[v6];
        v6 += 4;
      }
      while (v6 != 12);
      v9 = v7 + 60 * v2;
      v10 = *((_QWORD *)result + 6);
      *(_DWORD *)(v9 + 56) = result[14];
      *(_QWORD *)(v9 + 48) = v10;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t physx::QuickHullConvexHullLib::QuickHullConvexHullLib(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24ED92BF8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHull>::getName() [T = local::QuickHull]";
  else
    v7 = "<allocation names disabled>";
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 424, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 1810);
  *(_QWORD *)v8 = a3;
  *(_QWORD *)(v8 + 8) = a2;
  *(_QWORD *)(v8 + 36) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 96) = 0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_QWORD *)(v8 + 133) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v8 + 336) = _D0;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_QWORD *)(a1 + 56) = v8;
  local::QuickHull::preallocate((local::QuickHull *)v8, *(_DWORD *)(a2 + 16));
  return a1;
}

void physx::QuickHullConvexHullLib::~QuickHullConvexHullLib(physx::QuickHullConvexHullLib *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  int v9;

  *(_QWORD *)this = off_24ED92BF8;
  v2 = *((_QWORD *)this + 7);
  if (!*(_QWORD *)(v2 + 48))
  {
    *(_DWORD *)(v2 + 128) = 0;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *((_QWORD *)this + 7);
  *(_DWORD *)(v2 + 128) = 0;
  v2 = v3;
  if (v3)
  {
LABEL_5:
    local::QuickHull::~QuickHull((local::QuickHull *)v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v4 + 32) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v7 = *(_DWORD *)(v4 + 28);
    if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v4 + 16) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(_DWORD *)(v4 + 12);
    if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *(_QWORD *)v4 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  if (*((_QWORD *)this + 9))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = off_24ED92BC0;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

{
  uint64_t v2;

  physx::QuickHullConvexHullLib::~QuickHullConvexHullLib(this);
  if (v2)
    (*(void (**)(uint64_t, physx::QuickHullConvexHullLib *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::QuickHullConvexHullLib::createConvexHull(float32x2_t *this)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  physx *v8;
  uint64_t v9;
  float32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float *v15;
  float v16;
  float v17;
  int v18;
  float32x2_t v19;
  uint64_t v20;
  float *v21;
  float32_t v22;
  float32x2_t *v23;
  int32x2_t v24;
  __n128 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  char *v44;
  float *v45;
  float *v46;
  uint64_t *v47;
  float v48;
  float v49;
  char *v50;
  float *v51;
  float *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float32x2_t v60;
  float v61;
  float v62;
  int8x8_t v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  double v74;
  uint64_t v75;
  unsigned int v76;
  float v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  _BOOL4 v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  unsigned int v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  uint64_t v105;
  float v106;
  float v107;
  float v108;
  int8x8_t *v109;
  uint64_t v110;
  _DWORD *v111;
  _DWORD *v112;
  unsigned __int32 v113;
  unint64_t i;
  int8x8_t *v115;
  __int32 v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  float *v123;
  float v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  float32x2_t v130;
  float32x2_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v136;
  float32x2_t v137;
  float32x2_t v138;
  uint64_t *v139;
  uint64_t v140;
  _BYTE v141[32];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[32];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE v150[32];

  *(_QWORD *)&v150[24] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(*(_QWORD *)&this[1] + 16);
  if (v2 <= 8)
    v2 = 8;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 1846);
  v136 = 0;
  v4 = (unsigned int *)this[1];
  v5 = v4[4];
  v6 = *((_QWORD *)v4 + 1);
  v7 = *v4;
  if ((v4[18] & 0x100) != 0)
  {
    if ((_DWORD)v5)
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullLib.cpp", 137);
      v10 = (float32x2_t *)v12;
      this[6] = (float32x2_t)v12;
      v13 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
      v14 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
      v15 = (float *)(v6 + 8);
      v16 = 8.5071e37;
      v17 = -8.5071e37;
      v18 = v5;
      do
      {
        if (v16 >= *v15)
          v16 = *v15;
        v19 = *(float32x2_t *)(v15 - 2);
        v14 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v14), (int8x8_t)v14, (int8x8_t)v19);
        v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v19), (int8x8_t)v13, (int8x8_t)v19);
        if (v17 <= *v15)
          v17 = *v15;
        v15 = (float *)((char *)v15 + v7);
        --v18;
      }
      while (v18);
      v20 = 0;
      this[4] = vmul_f32(vadd_f32(v14, v13), (float32x2_t)0x3F0000003F000000);
      this[5].f32[0] = (float)(v16 + v17) * 0.5;
      v21 = (float *)(v6 + 8);
      do
      {
        v22 = *v21 - this[5].f32[0];
        v23 = (float32x2_t *)(v12 + v20);
        *v23 = vsub_f32(*(float32x2_t *)(v21 - 2), this[4]);
        v23[1].f32[0] = v22;
        v20 += 12;
        v21 = (float *)((char *)v21 + v7);
      }
      while (12 * v5 != v20);
    }
    else
    {
      v10 = 0;
      this[6] = 0;
      this[4] = 0;
      this[5].i32[0] = 0;
    }
    v8 = (physx *)this;
    v9 = v5;
    v11 = 12;
  }
  else
  {
    v8 = (physx *)this;
    v9 = v4[4];
    v10 = (float32x2_t *)*((_QWORD *)v4 + 1);
    v11 = *v4;
  }
  if ((physx::ConvexHullLib::cleanupVertices(v8, v9, v10, v11, &v136, v3, &v138, &v137) & 1) != 0)
  {
    v30 = 0;
    v31 = v136;
    v33 = *(float *)v3;
    v32 = *(float *)(v3 + 4);
    v24.i32[0] = *(_DWORD *)(v3 + 8);
    do
    {
      v34 = (float *)&v146[v30];
      *v34 = v33;
      v34[1] = v32;
      v34[2] = *(float *)v24.i32;
      v34[3] = 0.0;
      v35 = (float *)&v141[v30];
      *v35 = v33;
      v35[1] = v32;
      v35[2] = *(float *)v24.i32;
      v30 += 32;
      v35[3] = 0.0;
    }
    while (v30 != 96);
    if (v31 < 2)
    {
      v40 = v33;
      v39 = v32;
      v38 = *(float *)v24.i32;
LABEL_44:
      v55 = 0;
      v56 = 0;
      v57 = 0;
      LODWORD(v58) = 0;
      v59 = (float)((float)(*(float *)v24.i32 + (float)((float)((float)(v33 - v40) + v32) - v39)) - v38) * 0.5;
      v24.i32[0] = 884998144;
      v60.i32[0] = vdup_lane_s32(v24, 0).u32[0];
      v60.i32[1] = *(_DWORD *)(*(_QWORD *)&this[2] + 4);
      v25.n128_u64[0] = (unint64_t)vmul_n_f32(v60, v59);
      v61 = 0.0;
      do
      {
        v62 = *(float *)&v141[v55] - *(float *)&v146[v55];
        if (v62 <= v61)
          v58 = v58;
        else
          v58 = v56;
        if (v62 > v61)
          v61 = *(float *)&v141[v55] - *(float *)&v146[v55];
        v57 += 32;
        ++v56;
        v55 += 36;
      }
      while (v57 != 96);
      v63 = (int8x8_t)vcgt_f32((float32x2_t)v25.n128_u64[0], v60);
      v64 = (float *)&v141[32 * v58];
      v65 = *v64;
      v66 = v64[1];
      v67 = v64[2];
      v68 = (float *)&v146[32 * v58];
      v69 = v68[1];
      v70 = v68[2];
      v71 = *v68 - *v64;
      v72 = v69 - v66;
      v73 = v70 - v67;
      *(float *)&v26 = sqrtf((float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73));
      if (*(float *)&v26 > 0.0)
      {
        v69 = 1.0;
        *(float *)&v26 = 1.0 / *(float *)&v26;
        v71 = v71 * *(float *)&v26;
        v72 = v72 * *(float *)&v26;
        v73 = v73 * *(float *)&v26;
      }
      v74 = COERCE_DOUBLE(vbsl_s8(v63, (int8x8_t)v25.n128_u64[0], (int8x8_t)v60));
      if ((_DWORD)v31)
      {
        v75 = 0;
        v76 = 0;
        v77 = -v72;
        v78 = (float *)(v3 + 8);
        v79 = 0.0;
        do
        {
          v80 = *(v78 - 2);
          v81 = *(v78 - 1);
          v82 = *v78 - v67;
          v83 = (float)((float)(v81 - v66) * (float)-v73) + (float)(v72 * v82);
          v84 = (float)(v82 * (float)-v71) + (float)(v73 * (float)(v80 - v65));
          v85 = (float)((float)(v80 - v65) * v77) + (float)(v71 * (float)(v81 - v66));
          if ((float)((float)((float)(v84 * v84) + (float)(v83 * v83)) + (float)(v85 * v85)) > v79)
          {
            v25.n128_f32[0] = v83;
            *(float *)v63.i32 = v84;
            *(float *)&v26 = (float)((float)(v80 - v65) * v77) + (float)(v71 * (float)(v81 - v66));
            v69 = *(v78 - 2);
            *(float *)&v29 = *(v78 - 1);
            v70 = *v78;
            v79 = (float)((float)(v84 * v84) + (float)(v83 * v83)) + (float)(v85 * v85);
            v76 = v75;
          }
          ++v75;
          v78 += 3;
        }
        while (v31 != v75);
      }
      else
      {
        v76 = 0;
        v79 = 0.0;
      }
      v86 = sqrtf(v79);
      v87 = v86 >= *(float *)&v74;
      if (v86 < *(float *)&v74)
      {
        v88 = v69 - v65;
        v89 = *(float *)&v29 - v66;
        v90 = v70 - v67;
        v91 = (float)((float)((float)(v72 * v89) + (float)(v88 * v71)) + (float)(v90 * v73))
            / (float)((float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73));
        v92 = v88 - (float)(v71 * v91);
        v93 = v89 - (float)(v72 * v91);
        v94 = v90 - (float)(v73 * v91);
        v95 = sqrtf((float)((float)(v93 * v93) + (float)(v92 * v92)) + (float)(v94 * v94));
        if (v95 > 0.0)
        {
          v96 = 1.0 / v95;
          v92 = v92 * v96;
          v93 = v93 * v96;
          v94 = v94 * v96;
        }
        v69 = v69 + (float)(*(float *)&v74 * v92);
        *(float *)&v29 = *(float *)&v29 + (float)(*(float *)&v74 * v93);
        v70 = v70 + (float)(*(float *)&v74 * v94);
        v97 = v3 + 12 * v76;
        *(float *)v97 = v69;
        *(_DWORD *)(v97 + 4) = LODWORD(v29);
        *(float *)(v97 + 8) = v70;
      }
      v98 = sqrtf((float)((float)(*(float *)v63.i32 * *(float *)v63.i32) + (float)(v25.n128_f32[0] * v25.n128_f32[0]))+ (float)(*(float *)&v26 * *(float *)&v26));
      if (v98 > 0.0)
      {
        v98 = 1.0 / v98;
        v25.n128_f32[0] = v25.n128_f32[0] * v98;
        *(float *)v63.i32 = *(float *)v63.i32 * v98;
        *(float *)&v26 = *(float *)&v26 * v98;
      }
      *(float *)&v29 = *(float *)&v29 * *(float *)v63.i32;
      *(float *)&v27 = (float)(*(float *)&v29 + (float)(v69 * v25.n128_f32[0])) + (float)(v70 * *(float *)&v26);
      if ((_DWORD)v31)
      {
        v99 = 0;
        v100 = 0;
        v101 = (float *)(v3 + 8);
        v102 = 0.0;
        do
        {
          v103 = (float)(*(float *)v63.i32 * *(v101 - 1)) + (float)(*(v101 - 2) * v25.n128_f32[0]);
          v104 = *v101;
          v101 += 3;
          v98 = v104;
          *(float *)&v29 = vabds_f32(v103 + (float)(v104 * *(float *)&v26), *(float *)&v27);
          if (*(float *)&v29 > v102)
          {
            v102 = *(float *)&v29;
            v100 = v99;
          }
          ++v99;
        }
        while (v31 != v99);
      }
      else
      {
        v100 = 0;
        v102 = 0.0;
      }
      *(float *)&v28 = fabsf(v102);
      if (*(float *)&v28 < *(float *)&v74)
      {
        v105 = v3 + 12 * v100;
        LODWORD(v28) = *(_DWORD *)(v105 + 4);
        v98 = *(float *)v105;
        LODWORD(v29) = *(_DWORD *)(v105 + 8);
        *(float *)&v27 = (float)((float)((float)(*(float *)v63.i32 * *(float *)&v28)
                                       + (float)(*(float *)v105 * v25.n128_f32[0]))
                               + (float)(*(float *)&v29 * *(float *)&v26))
                       - *(float *)&v27;
        v106 = *(float *)&v74 * v25.n128_f32[0];
        v107 = *(float *)&v74 * *(float *)v63.i32;
        v108 = *(float *)&v74 * *(float *)&v26;
        if (*(float *)&v27 <= 0.0)
        {
          v25.n128_f32[0] = v98 - v106;
          *(float *)v63.i32 = *(float *)&v28 - v107;
          *(float *)&v26 = *(float *)&v29 - v108;
        }
        else
        {
          v25.n128_f32[0] = v106 + v98;
          *(float *)v63.i32 = v107 + *(float *)&v28;
          *(float *)&v26 = v108 + *(float *)&v29;
        }
        v87 = 0;
        *(_DWORD *)v105 = v25.n128_u32[0];
        *(_DWORD *)(v105 + 4) = v63.i32[0];
        *(_DWORD *)(v105 + 8) = LODWORD(v26);
      }
      v109 = (int8x8_t *)this[7];
      v109[4].i32[0] = v31;
      if ((_DWORD)v31)
      {
        v110 = 0;
        v111 = (_DWORD *)(*(_QWORD *)&v109[6] + 12);
        v112 = (_DWORD *)(v3 + 8);
        do
        {
          v25.n128_u64[0] = *((_QWORD *)v112 - 1);
          *(_QWORD *)(v111 - 3) = v25.n128_u64[0];
          v113 = *v112;
          v112 += 3;
          v25.n128_u32[0] = v113;
          *(v111 - 1) = v113;
          *v111 = v110;
          v111 += 8;
          ++v110;
        }
        while (v31 != v110);
      }
      if (v87)
      {
        for (i = 0; i != 96; i += 32)
        {
          v115 = &v109[i / 8];
          v115[18] = *(int8x8_t *)&v146[i];
          v115[19].i32[0] = *(_DWORD *)&v146[i + 8];
          *(_OWORD *)&v115[19].u8[4] = *(_OWORD *)&v146[i + 12];
          v115[21].i32[1] = *(_DWORD *)&v146[i + 28];
          v115[30] = *(int8x8_t *)&v141[i];
          v115[31].i32[0] = *(_DWORD *)&v141[i + 8];
          v25 = *(__n128 *)&v141[i + 12];
          *(__n128 *)&v115[31].u8[4] = v25;
          v116 = *(_DWORD *)&v141[i + 28];
          v115[33].i32[1] = v116;
        }
        *(double *)&v109[42] = v74;
        v109[17].i8[4] = 1;
        v109 = (int8x8_t *)this[7];
      }
      switch(local::QuickHull::buildHull(v109, v74, v25, *(double *)&v63, v26, v27, v28, v29, v98))
      {
        case 0u:
          v117 = (uint64_t)this[7];
          v118 = *(unsigned int *)(v117 + 128);
          if (!(_DWORD)v118)
            goto LABEL_110;
          v119 = 0;
          break;
        case 1u:
          v54 = 1;
          goto LABEL_117;
        case 2u:
          if ((*(_WORD *)(*(_QWORD *)&this[1] + 72) & 0x20) != 0)
          {
            v54 = physx::QuickHullConvexHullLib::expandHull((physx::QuickHullConvexHullLib *)this);
          }
          else
          {
            physx::QuickHullConvexHullLib::expandHullOBB((physx::QuickHullConvexHullLib *)this);
LABEL_110:
            v54 = 0;
          }
          goto LABEL_117;
        case 3u:
          v130 = this[1];
          if (*(_DWORD *)(*(_QWORD *)&this[7] + 36) > *(unsigned __int16 *)(*(_QWORD *)&v130 + 74))
          {
            if ((*(_WORD *)(*(_QWORD *)&v130 + 72) & 0x20) != 0)
              physx::QuickHullConvexHullLib::expandHull((physx::QuickHullConvexHullLib *)this);
            else
              physx::QuickHullConvexHullLib::expandHullOBB((physx::QuickHullConvexHullLib *)this);
          }
          v54 = 2;
          goto LABEL_117;
        default:
          v54 = 3;
LABEL_117:
          if ((*(_WORD *)(*(_QWORD *)&this[1] + 72) & 0x80) != 0 && !*(_QWORD *)&this[8] && !(_DWORD)v54)
          {
            v131 = this[7];
            v132 = *(unsigned int *)(*(_QWORD *)&v131 + 128);
            if ((_DWORD)v132)
            {
              v133 = 0;
              v134 = *(_QWORD *)(*(_QWORD *)&v131 + 120);
              do
              {
                if (!*(_DWORD *)(*(_QWORD *)v134 + 60) && v133 <= *(unsigned __int16 *)(*(_QWORD *)v134 + 8))
                  v133 = *(unsigned __int16 *)(*(_QWORD *)v134 + 8);
                v134 += 8;
                --v132;
              }
              while (v132);
              if (v133 >= 0x21)
                physx::QuickHullConvexHullLib::expandHullOBB((physx::QuickHullConvexHullLib *)this);
            }
            v54 = 0;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
          return v54;
      }
      while (1)
      {
        v120 = *(_QWORD *)(*(_QWORD *)(v117 + 120) + 8 * v119);
        if (!*(_DWORD *)(v120 + 60))
          break;
LABEL_104:
        if (++v119 >= v118)
          goto LABEL_110;
      }
LABEL_89:
      v121 = *(_QWORD *)v120;
      v122 = *(_QWORD **)v120;
      while (1)
      {
        v123 = *(float **)(v122[6] + 56);
        if ((float)((float)((float)(*(float *)(v120 + 28) * v123[7]) + (float)(*(float *)(v120 + 24) * v123[6]))
                   + (float)(*(float *)(v120 + 32) * v123[8])) > 0.99863
          && *(float *)(v120 + 36) >= v123[9])
        {
          if (local::QuickHull::canMergeFaces(v117, v122))
          {
            v139 = 0;
            v140 = 0;
            local::QuickHullFace::mergeAdjacentFace((uint64_t *)v120, v122, (uint64_t)&v139, v124);
            v125 = v140;
            *(_DWORD *)(v117 + 136) -= v140;
            v126 = v139;
            v127 = v139;
            if ((_DWORD)v125)
            {
              do
              {
                v128 = *v127++;
                local::QuickHull::deleteFacePoints(v117, v128, v120);
                --v125;
              }
              while (v125);
            }
            if ((v140 & 0x8000000000000000) == 0 && (v140 & 0x7FFFFFFF00000000) != 0 && v126 != 0)
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v126);
            goto LABEL_89;
          }
          v121 = *(_QWORD *)v120;
        }
        v122 = (_QWORD *)v122[5];
        if (v122 == (_QWORD *)v121)
        {
          v118 = *(unsigned int *)(v117 + 128);
          goto LABEL_104;
        }
      }
    }
    v36 = (float *)(v3 + 20);
    v37 = 1;
    v38 = *(float *)v24.i32;
    v39 = v32;
    v40 = v33;
    while (1)
    {
      *(float *)&v29 = *(v36 - 2);
      if (*(float *)&v29 > v33)
        break;
      if (*(float *)&v29 < v40)
      {
        v41 = (float *)v146;
        v40 = *(v36 - 2);
        goto LABEL_26;
      }
      v42 = *(v36 - 1);
LABEL_28:
      if (v42 > v32)
      {
        v32 = v42;
        v44 = (char *)&v143 + 4;
        v45 = (float *)&v143;
        v46 = (float *)&v142 + 1;
        v47 = &v142;
LABEL_32:
        *(_DWORD *)v47 = LODWORD(v29);
        *v46 = v42;
        v48 = *v36;
        *v45 = *v36;
        *(_DWORD *)v44 = v37;
        goto LABEL_34;
      }
      if (v42 < v39)
      {
        v39 = v42;
        v44 = (char *)&v148 + 4;
        v45 = (float *)&v148;
        v46 = (float *)&v147 + 1;
        v47 = &v147;
        goto LABEL_32;
      }
      v48 = *v36;
LABEL_34:
      if (v48 > *(float *)v24.i32)
      {
        v49 = v38;
        *(float *)v24.i32 = v48;
        v50 = (char *)&v145 + 4;
        v51 = (float *)&v145;
        v52 = (float *)&v144 + 1;
        v53 = &v144;
LABEL_37:
        *(_DWORD *)v53 = LODWORD(v29);
        *v52 = v42;
        *v51 = v48;
        v38 = v49;
        *(_DWORD *)v50 = v37;
        goto LABEL_38;
      }
      v49 = v48;
      v50 = &v150[4];
      v51 = (float *)v150;
      v52 = (float *)&v149 + 1;
      v53 = &v149;
      if (v48 < v38)
        goto LABEL_37;
LABEL_38:
      ++v37;
      v36 += 3;
      if (v31 == v37)
        goto LABEL_44;
    }
    v41 = (float *)v141;
    v33 = *(v36 - 2);
LABEL_26:
    v42 = *(v36 - 1);
    v43 = *v36;
    *v41 = *(float *)&v29;
    v41[1] = v42;
    v41[2] = v43;
    *((_DWORD *)v41 + 3) = v37;
    goto LABEL_28;
  }
  if (v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
  return 3;
}

uint64_t physx::QuickHullConvexHullLib::expandHull(physx::QuickHullConvexHullLib *this)
{
  physx::QuickHullConvexHullLib *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float **v17;
  uint64_t v18;
  float *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  int v30;
  float v31;
  uint64_t v32;
  float *v33;
  int v34;
  size_t v35;
  float *v36;
  float *v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x2_t v48;
  float v49;
  float v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  float32x2_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  _QWORD *v66;
  double v72;
  __n128 v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  float v79;
  uint64_t v80;
  _DWORD *v81;
  double *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  _DWORD v89[12];
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v1 = this;
  v95 = *MEMORY[0x24BDAC8D0];
  v93 = 0;
  v94 = 0;
  v2 = *((_QWORD *)this + 7);
  v3 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v3)
  {
    this = (physx::QuickHullConvexHullLib *)physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::recreate(&v93, v3);
    v2 = *((_QWORD *)v1 + 7);
  }
  LODWORD(v4) = *(_DWORD *)(v2 + 128);
  if ((_DWORD)v4)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 120) + 8 * v5);
      if (!*(_DWORD *)(v6 + 60))
      {
        v7 = *(_QWORD **)v6;
        do
        {
          v8 = *(_DWORD *)(v7[7] + 72);
          v9 = v7[5];
          v10 = *(_DWORD *)(*(_QWORD *)(v7[6] + 56) + 72);
          if (v10 >= v8)
            v11 = *(_DWORD *)(v7[7] + 72);
          else
            v11 = *(_DWORD *)(*(_QWORD *)(v7[6] + 56) + 72);
          if (v10 <= v8)
            v10 = *(_DWORD *)(v7[7] + 72);
          v90 = v11;
          v91 = v10;
          v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 56) + 72);
          if (v12 >= v11)
          {
            v13 = (int *)&v92;
            if (v12 < v10)
            {
              v92 = v10;
              v13 = (int *)&v91;
            }
          }
          else
          {
            v91 = v11;
            v92 = v10;
            v13 = (int *)&v90;
          }
          *v13 = v12;
          this = (physx::QuickHullConvexHullLib *)local::addExpandPoint(v89, (uint64_t)&v93);
          v7 = (_QWORD *)v7[5];
        }
        while (v7 != *(_QWORD **)v6);
        v2 = *((_QWORD *)v1 + 7);
      }
      ++v5;
      v4 = *(unsigned int *)(v2 + 128);
    }
    while (v5 < v4);
  }
  v14 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_QWORD *)(v2 + 48);
    do
    {
      if ((_DWORD)v4)
      {
        v17 = *(float ***)(v2 + 120);
        v18 = v4;
        do
        {
          v19 = *v17;
          this = (physx::QuickHullConvexHullLib *)*((unsigned int *)*v17 + 15);
          if (!(_DWORD)this)
          {
            v20 = (float)((float)((float)(*(float *)(v16 + 32 * v15 + 4) * v19[7])
                                + (float)(v19[6] * *(float *)(v16 + 32 * v15)))
                        + (float)(v19[8] * *(float *)(v16 + 32 * v15 + 8)))
                - v19[13];
            if (v20 > 0.0 && v20 > v19[14])
              v19[14] = v20;
          }
          ++v17;
          --v18;
        }
        while (v18);
      }
      ++v15;
    }
    while (v15 != v14);
  }
  v21 = v94;
  if (!(_DWORD)v94)
    goto LABEL_37;
  v22 = 0;
  v23 = *(_DWORD *)(v2 + 88);
  v24 = *(_QWORD *)(v2 + 104);
  v25 = v93 + 48;
  v26 = (float *)(v93 + 12);
  do
  {
    v27 = 0;
    v28 = v26;
    do
    {
      v29 = *(_QWORD *)(v24 + 8 * (*(_DWORD *)(v25 + v27) / v23)) + 80 * (*(_DWORD *)(v25 + v27) % v23);
      v30 = *(_DWORD *)(v29 + 32);
      v31 = (float)-*(float *)(v29 + 52) - fmaxf(*(float *)(v29 + 56), 0.0);
      *(_QWORD *)(v28 - 3) = *(_QWORD *)(v29 + 24);
      *((_DWORD *)v28 - 1) = v30;
      *v28 = v31;
      v27 += 4;
      v28 += 4;
    }
    while (v27 != 12);
    ++v22;
    v25 += 60;
    v26 += 15;
  }
  while (v22 != v21);
  v32 = (12 * v21);
  if (v32 > 0x400)
  {
    v33 = (float *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)((char *)&v88 + 7), v32, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2170);
    v34 = 1;
    if (!(_DWORD)v21)
      goto LABEL_43;
  }
  else
  {
LABEL_37:
    MEMORY[0x24BDAC7A8](this);
    v33 = (float *)((char *)&v89[-2] - ((v35 + 15) & 0x1FFFFFFF0));
    bzero(v33, v35);
    v34 = 0;
    if (!(_DWORD)v21)
      goto LABEL_43;
  }
  v36 = v33 + 2;
  v37 = (float *)(v93 + 24);
  v38 = v21;
  do
  {
    v39 = *(v37 - 6);
    v40 = *(v37 - 5);
    v41 = *(v37 - 4);
    v42 = *(v37 - 2);
    v43 = *(v37 - 1);
    v44 = *v37;
    v45 = v37[2];
    v46 = v37[3];
    v47 = v37[4];
    v48.f32[0] = (float)(v40 * *v37) - (float)(v43 * v41);
    v49 = (float)((float)(v42 * (float)((float)(v46 * v41) - (float)(v40 * v47)))
                + (float)(v39 * (float)((float)(v43 * v47) - (float)(v46 * *v37))))
        + (float)(v45 * v48.f32[0]);
    if (v49 == 0.0)
    {
      v58 = 0;
      v54 = 0.0;
      v57 = 0.0;
      v53 = (float32x2_t)1065353216;
      v56 = (float32x2_t)0x3F80000000000000;
      v59 = 1.0;
    }
    else
    {
      v50 = -v40;
      v51 = 1.0 / v49;
      v52.f32[0] = (float)(v43 * v47) - (float)(v44 * v46);
      v52.f32[1] = -(float)((float)(v42 * v47) - (float)(v44 * v45));
      v53 = vmul_n_f32(v52, v51);
      v54 = (float)((float)(v42 * v46) - (float)(v45 * v43)) * v51;
      v55.f32[0] = -(float)((float)(v41 * (float)-v46) + (float)(v40 * v47));
      v55.f32[1] = (float)(v39 * v47) - (float)(v45 * v41);
      v56 = vmul_n_f32(v55, v51);
      v57 = -(float)((float)((float)(v39 * v46) - (float)(v45 * v40)) * v51);
      v48.f32[1] = -(float)((float)(v39 * v44) - (float)(v42 * v41));
      v58 = vmul_n_f32(v48, v51);
      v59 = (float)((float)(v42 * v50) + (float)(v39 * v43)) * v51;
    }
    v60 = *(v37 - 3);
    v61 = v37[1];
    v62 = v37[5];
    *((float32x2_t *)v36 - 1) = vneg_f32(vadd_f32(vadd_f32(vmul_n_f32(v53, v60), vmul_n_f32(v56, v61)), vmul_n_f32(v58, v62)));
    *v36 = -(float)((float)((float)(v54 * v60) + (float)(v57 * v61)) + (float)(v59 * v62));
    v36 += 3;
    v37 += 15;
    --v38;
  }
  while (v38);
LABEL_43:
  v63 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v64 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHull>::getName() [T = local::QuickHull]";
  else
    v64 = "<allocation names disabled>";
  v65 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v63 + 24) + 16))(v63 + 24, 424, v64, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2178);
  *(_OWORD *)v65 = *(_OWORD *)*((_QWORD *)v1 + 7);
  *(_QWORD *)(v65 + 36) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v65 + 48) = 0;
  v66 = (_QWORD *)(v65 + 48);
  *(_QWORD *)(v65 + 56) = 0;
  *(_DWORD *)(v65 + 64) = 0;
  *(_QWORD *)(v65 + 80) = 0;
  *(_QWORD *)(v65 + 88) = 0;
  *(_QWORD *)(v65 + 72) = 0;
  *(_DWORD *)(v65 + 96) = 0;
  *(_OWORD *)(v65 + 104) = 0u;
  *(_OWORD *)(v65 + 120) = 0u;
  *(_QWORD *)(v65 + 133) = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(v65 + 336) = _D1;
  *(_OWORD *)(v65 + 344) = 0u;
  *(_OWORD *)(v65 + 360) = 0u;
  *(_OWORD *)(v65 + 376) = 0u;
  *(_OWORD *)(v65 + 392) = 0u;
  *(_OWORD *)(v65 + 408) = 0u;
  local::QuickHull::preallocate((local::QuickHull *)v65, v21);
  *(_DWORD *)(v65 + 32) = v21;
  if ((_DWORD)v21)
  {
    v80 = 0;
    v81 = (_DWORD *)(*v66 + 12);
    v82 = (double *)(v33 + 2);
    do
    {
      v72 = *(v82 - 1);
      *(double *)(v81 - 3) = v72;
      v83 = *(_DWORD *)v82;
      v82 = (double *)((char *)v82 + 12);
      LODWORD(v72) = v83;
      *(v81 - 1) = v83;
      *v81 = v80;
      v81 += 8;
      ++v80;
    }
    while (v21 != v80);
  }
  switch(local::QuickHull::buildHull((int8x8_t *)v65, v72, v73, v74, v75, v76, v77, v78, v79))
  {
    case 0u:
    case 2u:
    case 3u:
      v84 = *((_QWORD *)v1 + 7);
      if (*(_QWORD *)(v84 + 48))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *(_QWORD *)(v84 + 48) = 0;
        v85 = *((_QWORD *)v1 + 7);
        *(_DWORD *)(v84 + 128) = 0;
        v84 = v85;
        if (!v85)
        {
LABEL_55:
          v86 = 0;
          *((_QWORD *)v1 + 7) = v65;
          if (v34)
            goto LABEL_66;
          goto LABEL_67;
        }
      }
      else
      {
        *(_DWORD *)(v84 + 128) = 0;
      }
      local::QuickHull::~QuickHull((local::QuickHull *)v84);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v84);
      goto LABEL_55;
    case 1u:
      if (*v66)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *v66 = 0;
      }
      *(_DWORD *)(v65 + 128) = 0;
      local::QuickHull::~QuickHull((local::QuickHull *)v65);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v65);
      v86 = 1;
      if (v34)
        goto LABEL_66;
      goto LABEL_67;
    case 4u:
      if (*v66)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *v66 = 0;
      }
      *(_DWORD *)(v65 + 128) = 0;
      local::QuickHull::~QuickHull((local::QuickHull *)v65);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v65);
      v86 = 3;
      if (v34)
        goto LABEL_66;
      goto LABEL_67;
    default:
      v86 = 0;
      if (v34)
LABEL_66:
        physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v89, (char *)v33);
LABEL_67:
      if ((v94 & 0x8000000000000000) == 0 && (v94 & 0x7FFFFFFF00000000) != 0 && v93)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      return v86;
  }
}

void physx::QuickHullConvexHullLib::expandHullOBB(physx::QuickHullConvexHullLib *this)
{
  float v1;
  float32x2_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  float v12;
  float v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  double v17;
  double v18;
  double v19;
  float32x4_t v20;
  __int16 v21;
  _OWORD *v22;
  uint64_t v23;
  float *v24;
  float32x2_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  unsigned int v68;
  float *v69;
  float32x2_t v70;
  float v71;
  __float2 v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t *v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  int8x8_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  _QWORD *v120;
  int v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  float v143;
  uint64_t v144;
  unsigned int v145;
  float v146;
  uint64_t v147;
  unsigned int v148;
  float v149;
  uint64_t v150;
  unsigned int v151;
  int v152;
  float v153;
  float *v154;
  unsigned int v155;
  float v156;
  uint64_t v157;
  unsigned int v158;
  float v159;
  uint64_t v160;
  unsigned int v161;
  float v162;
  uint64_t v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  uint64_t v184;
  uint64_t v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  uint64_t v206;
  uint64_t v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  uint64_t v217;
  uint64_t v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  float v255;
  float v256;
  float v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  float v263;
  float v264;
  float v265;
  float *v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float *v271;
  uint64_t v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  uint64_t v278;
  uint64_t v279;
  float *v280;
  uint64_t v281;
  float *v282;
  float v283;
  float v284;
  float *v285;
  float v286;
  float v287;
  float v288;
  uint64_t v289;
  unsigned __int8 *v290;
  float *v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  char v295;
  float *v296;
  float v297;
  float v298;
  float v299;
  uint64_t v300;
  float v301;
  float *v302;
  char *v303;
  float v304;
  int v305;
  char v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  unint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  __int16 *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  unsigned __int8 *v331;
  unsigned int v332;
  int v333;
  uint64_t v334;
  _BYTE *v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  _BYTE *v345;
  uint64_t v346;
  float *v347;
  float *v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float32x2_t v358;
  float v359;
  float v360;
  float v361;
  float32x2_t v362;
  float32x2_t v363;
  float v364;
  float32x2_t v365;
  float32x2_t v366;
  float v367;
  float32x2_t v368;
  float v369;
  uint64_t v370;
  float *v371;
  float *v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float32x2_t v382;
  float v383;
  float v384;
  float v385;
  float32x2_t v386;
  float32x2_t v387;
  float v388;
  float32x2_t v389;
  float32x2_t v390;
  float v391;
  float32x2_t v392;
  float v393;
  uint64_t v394;
  _QWORD *v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  int v401;
  uint64_t v402;
  float v403;
  float v404;
  float v405;
  float32x2_t v406;
  int v407;
  float32x2_t *v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  float v412;
  float v413;
  float v414;
  float32x2_t v415;
  int v416;
  float32x2_t *v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  _BYTE *v423;
  _BYTE *v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  _BYTE *v428;
  char *v429;
  unsigned int v430;
  char v431;
  unsigned __int16 v432;
  int v433;
  uint64_t v434;
  unsigned int v435;
  int v436;
  uint64_t v437;
  char *v438;
  unsigned int v439;
  int v440;
  unsigned int v441;
  uint64_t v442;
  const char *v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  unsigned int v448;
  float *v449;
  unsigned int v450;
  unsigned int v451;
  int v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  unsigned int v461;
  char *v462;
  int v463;
  char *v464;
  uint64_t v465;
  char *v466;
  uint64_t v467;
  char v468;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  unsigned int v477;
  int v478;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unsigned __int8 *v483;
  int v484;
  int v485;
  float *v486;
  float *v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float v492;
  float v493;
  float v494;
  uint64_t v496;
  unsigned int v497;
  uint64_t v498;
  float *v499;
  float v500;
  float v501;
  float v502;
  float *v503;
  float v504;
  float v505;
  float v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  float v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  uint64_t v519;
  int v520;
  int v521;
  unsigned int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v528;
  int v529;
  int v531;
  int v532;
  int v533;
  _QWORD *v534;
  unsigned int v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int v540;
  unint64_t v541;
  uint64_t v542;
  float *v543;
  float *v544;
  int32x4_t v545;
  uint64_t v546;
  float32x4_t v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  unsigned int v551;
  int v552;
  uint64_t v553;
  unsigned int v554;
  int v555;
  uint64_t v556;
  unsigned int v557;
  __int16 v558;
  int v559;
  uint64_t v560;
  float v561;
  float cosval;
  uint64_t v563;
  __int32 v564;
  uint64_t v565;
  uint64_t v566;
  __int128 v567;
  float32x2_t v568;
  uint64_t v569;
  _OWORD v570[128];
  float __src[2];
  _OWORD *v572;
  float v573;
  float v574;
  float v575[2];
  uint64_t v576;
  unsigned int v577;
  int v578;
  uint64_t v579;
  int v580;
  int v581;
  __int16 v582;
  _BYTE v583[20];
  float v584;
  uint64_t v585;
  float v586;
  uint64_t v587;
  float v588;
  uint64_t v589;
  float v590;
  uint64_t v591;
  float v592;
  uint64_t v593;
  float v594;
  uint64_t v595;
  float v596;
  float v597;
  float v598;
  float v599;
  float v600;
  float32x2_t v601;
  float v602;
  float v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  uint64_t v609;

  MEMORY[0x24BDAC7A8](this);
  v4 = v3;
  v609 = *MEMORY[0x24BDAC8D0];
  v565 = 0;
  v566 = 0;
  v5 = *(_DWORD *)(v3[7] + 128);
  if (v5)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::recreate((uint64_t)&v565, v5);
    v6 = v4[7];
    if (*(_DWORD *)(v6 + 128))
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v7);
        if (!*(_DWORD *)(v8 + 60))
        {
          v9 = *(_DWORD *)(v8 + 24);
          v10 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)v583 = v9;
          *(_DWORD *)&v583[4] = v10;
          v11 = *(_DWORD *)(v8 + 32);
          v12 = *(float *)(v8 + 56);
          v13 = -*(float *)(v8 + 52);
          *(_DWORD *)&v583[8] = v11;
          *(float *)&v583[12] = v13;
          if (v12 > 0.0)
          {
            v13 = v13 - v12;
            *(float *)&v583[12] = v13;
          }
          v14 = v566;
          if ((HIDWORD(v566) & 0x7FFFFFFFu) <= v566)
          {
            physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack((uint64_t)&v565, v583);
            v6 = v4[7];
          }
          else
          {
            v15 = v565 + 16 * v566;
            *(_DWORD *)v15 = v9;
            *(_DWORD *)(v15 + 4) = v10;
            *(_DWORD *)(v15 + 8) = v11;
            *(float *)(v15 + 12) = v13;
            LODWORD(v566) = v14 + 1;
          }
        }
        ++v7;
      }
      while (v7 < *(unsigned int *)(v6 + 128));
    }
  }
  v549 = 0;
  v550 = 0;
  v551 = 0;
  v552 = 0;
  v553 = 0;
  v554 = 0;
  v555 = 0;
  v556 = 0;
  v557 = 0;
  v559 = 16711935;
  physx::QuickHullConvexHullLib::fillConvexMeshDescFromQuickHull(v4, (uint64_t)&v549);
  v534 = v4;
  v21 = *(_WORD *)(v4[1] + 72);
  v558 = v21;
  v22 = (_OWORD *)v550;
  v23 = v551;
  if (v551)
  {
    v24 = (float *)(v550 + 8);
    v25 = 0;
    v26 = 0.0;
    v27 = v551;
    do
    {
      v17 = *((double *)v24 - 1);
      v25 = vadd_f32(v25, *(float32x2_t *)&v17);
      v28 = *v24;
      v24 += 3;
      v26 = v26 + v28;
      --v27;
    }
    while (v27);
  }
  else
  {
    v25 = 0;
    v26 = 0.0;
  }
  v29 = v556;
  v30 = v553;
  LODWORD(v18) = 1.0;
  *(float *)&v17 = 1.0 / (float)v551;
  v31 = vmul_n_f32(v25, *(float *)&v17);
  v568 = v31;
  *(float *)&v16 = *(float *)&v17 * v26;
  LODWORD(v569) = v16;
  v32 = v557;
  if (v557)
  {
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v557, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 844);
    v34 = v33;
    v35 = 0;
    do
    {
      *(_BYTE *)(v33 + v35) = *(_DWORD *)(v29 + 4 * v35);
      ++v35;
    }
    while (v32 != v35);
  }
  else
  {
    v34 = 0;
  }
  v36 = v554;
  if (v554)
  {
    v37 = 20 * v554;
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v37, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 850);
    v39 = v38;
    v40 = 0;
    do
    {
      v41 = v38 + v40;
      v16 = *(_OWORD *)(v30 + v40);
      *(_OWORD *)v41 = v16;
      *(_BYTE *)(v41 + 18) = *(_BYTE *)(v30 + v40 + 16);
      *(_WORD *)(v41 + 16) = *(_WORD *)(v30 + v40 + 18);
      v40 += 20;
    }
    while (v37 != v40);
  }
  else
  {
    v39 = 0;
  }
  __src[0] = 0.0;
  v582 = 255;
  v572 = v22;
  v575[0] = 0.0;
  v573 = *(float *)&v23;
  v576 = v39;
  v578 = 0;
  v577 = v36;
  v579 = v34;
  v581 = 16711680;
  v580 = v32;
  if ((v21 & 0x40) != 0)
    v42.n128_f64[0] = physx::computeVolumeIntegralsEberlySIMD((uint64_t)__src, (uint64_t)v583, (uint64_t)&v568, *(double *)&v16, *(double *)&v31, v17, v18, v19, v20);
  else
    physx::computeVolumeIntegralsEberly((uint64_t)__src, (uint64_t)v583, (float *)&v568);
  if ((_DWORD)v23)
  {
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v23, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 873, v42);
    v44 = (float32x4_t *)v43;
    v45 = 0;
    do
    {
      v46 = *v22;
      v22 = (_OWORD *)((char *)v22 + 12);
      *(_OWORD *)(v43 + v45) = v46;
      v45 += 16;
    }
    while (16 * v23 != v45);
  }
  else
  {
    v44 = 0;
  }
  v47 = 0;
  v48 = v570;
  v49 = 24;
  do
  {
    v50 = 0;
    v51 = v49;
    do
    {
      v52 = *(double *)&v583[v51];
      *(float *)((char *)v48 + v50) = v52;
      v50 += 4;
      v51 += 24;
    }
    while (v50 != 12);
    ++v47;
    v48 = (_OWORD *)((char *)v48 + 12);
    v49 += 8;
  }
  while (v47 != 3);
  physx::PxDiagonalize((float *)v570, &v597, (float *)&v601);
  v53 = 0;
  v54 = v597;
  v55 = v598;
  v56 = v599;
  v57 = v55 + v55;
  v58 = v56 + v56;
  v59 = v55 * (float)(v55 + v55);
  v60 = v56 * (float)(v56 + v56);
  v61 = (float)(v54 + v54) * v598;
  v62 = (float)(v54 + v54) * v599;
  v63 = (float)(v54 + v54) * v600;
  v64 = v57 * v599;
  v65 = v57 * v600;
  v601.f32[0] = (float)(1.0 - v59) - v60;
  v601.f32[1] = v61 + (float)(v58 * v600);
  v66 = 1.0 - (float)(v54 * (float)(v54 + v54));
  v602 = v62 - v65;
  v603 = v61 - (float)(v58 * v600);
  v604 = v66 - v60;
  v605 = v64 + v63;
  v606 = v62 + v65;
  v607 = v64 - v63;
  v608 = v66 - v59;
  v67 = *(float *)"(knN";
  v545 = vdupq_n_s32(0x7F7FFFFFu);
  v547 = *(float32x4_t *)v583;
  do
  {
    v68 = 0;
    v69 = (float *)&v601 + 3 * v53;
    v70 = *(float32x2_t *)v69;
    v71 = v69[2];
    do
    {
      v72 = __sincosf_stret((float)((float)v68 * 0.31416) * 0.5);
      *(float32x2_t *)v73.i8 = vmul_n_f32(v70, v72.__sinval);
      v74 = v73;
      *(float *)&v74.i32[2] = v71 * v72.__sinval;
      v75 = (float32x4_t)v74;
      v75.i32[3] = LODWORD(v72.__cosval);
      if ((_DWORD)v23)
      {
        v76 = v75;
        v76.i32[3] = 0;
        v77 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3);
        LODWORD(v78) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32).u32[0];
        v79 = (float32x2_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
        v80 = (float32x2_t)vext_s8(*(int8x8_t *)v73.i8, (int8x8_t)v79, 4uLL);
        v81 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
        v82.i64[0] = 0x80000000800000;
        v82.i64[1] = 0x80000000800000;
        v83 = v44;
        v84 = v23;
        v85 = v547;
        do
        {
          v86 = *v83++;
          v87 = vsubq_f32(v86, v547);
          v88 = v87;
          v88.i32[3] = 0;
          v89 = vmulq_n_f32(v88, v78);
          v90 = (float32x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
          v91 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v73.i8, (float32x2_t)vext_s8(*(int8x8_t *)v87.f32, (int8x8_t)v90, 4uLL)), v80, *(float32x2_t *)v87.f32);
          *(int8x8_t *)v87.f32 = vext_s8(v91, (int8x8_t)vmls_f32(vmul_f32(v79, *(float32x2_t *)v87.f32), *(float32x2_t *)v73.i8, v90), 4uLL);
          v89.i32[3] = 0;
          v87.i64[1] = v91.u32[0];
          v92 = vmlsq_f32(v89, v77, v87);
          v92.i64[1] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
          v93 = vmulq_f32(v76, v88);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          v94 = vmlaq_n_f32(v92, v76, vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32).f32[0]);
          v95 = vaddq_f32(v94, v94);
          v95.i32[3] = 0;
          v81 = vminq_f32(v81, v95);
          v82 = vmaxq_f32(v82, v95);
          --v84;
        }
        while (v84);
      }
      else
      {
        v82.i64[0] = 0x80000000800000;
        v82.i64[1] = 0x80000000800000;
        v81 = (float32x4_t)v545;
        v85 = v547;
      }
      v96 = vsubq_f32(v82, v81);
      v97 = vmuls_lane_f32(vmulq_lane_f32(v96, *(float32x2_t *)v96.f32, 1).f32[0], v96, 2);
      if (v97 <= v67)
      {
        v1 = v96.f32[2];
        v98.i64[0] = 0xBF000000BF000000;
        v98.i64[1] = 0xBF000000BF000000;
        v99 = vaddq_f32(v82, vmulq_f32(v96, v98));
        v100 = (float32x2_t)vdup_laneq_s32(v74, 2);
        v101 = vaddq_f32(v75, v75);
        v102 = vmul_n_f32(v100, v101.f32[0]);
        v103 = (float32x2_t)vdup_laneq_s32((int32x4_t)v75, 3);
        v104 = vmul_lane_f32(v103, *(float32x2_t *)v101.f32, 1);
        v105 = vmul_lane_f32(v100, *(float32x2_t *)v101.f32, 1);
        v106 = vmul_n_f32(v103, v101.f32[0]);
        *(int8x8_t *)v107.f32 = vext_s8((int8x8_t)vadd_f32(v102, v104), (int8x8_t)vsub_f32(v105, v106), 4uLL);
        __asm { FMOV            V23.2S, #1.0 }
        v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1);
        v112 = vsub_f32(_D23, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v101.f32), 0));
        v113 = vmul_lane_f32(v111, *(float32x2_t *)v101.f32, 1);
        *(float32x2_t *)&v107.u32[2] = vsub_f32(v112, v113);
        v114 = vmul_n_f32(v111, v101.f32[0]);
        v115 = vmul_laneq_f32(v103, v101, 2);
        v116 = vmul_laneq_f32(v100, v101, 2);
        *(int8x8_t *)v117.f32 = vext_s8((int8x8_t)vsub_f32(v114, v115), (int8x8_t)vsub_f32(v112, v116), 4uLL);
        *(float32x2_t *)&v117.u32[2] = vadd_f32(v105, v106);
        *(int8x8_t *)v118.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D23, v113), v116), (int8x8_t)vadd_f32(v114, v115), 4uLL);
        *(float32x2_t *)&v118.u32[2] = vsub_f32(v102, v104);
        v560 = v73.i64[0];
        v119 = vaddq_f32(vmulq_laneq_f32(v107, v99, 2), vaddq_f32(vmulq_lane_f32(v117, *(float32x2_t *)v99.f32, 1), vaddq_f32(v85, vmulq_n_f32(v118, v99.f32[0]))));
        v561 = v71 * v72.__sinval;
        cosval = v72.__cosval;
        v563 = v119.i64[0];
        v564 = v119.i32[2];
        v67 = v97;
        v2 = *(float32x2_t *)v96.f32;
      }
      ++v68;
    }
    while (v68 != 20);
    ++v53;
  }
  while (v53 != 3);
  if (v44)
    (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v44);
  v120 = v534;
  if (v34)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v34);
  if (v39)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v39);
  if (v534[9])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v534[9] = 0;
  v534[10] = 0;
  v121 = v566;
  if (v566 >= 0x100)
    v121 = 256;
  v536 = v121;
  v122 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v123 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull>::getName() [T = physx::ConvexHull]";
  else
    v123 = "<allocation names disabled>";
  v124 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v122 + 24) + 16))(v122 + 24, 56, v123, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2255);
  v601 = vmul_f32(v2, (float32x2_t)0x3F0000003F000000);
  v602 = v1 * 0.5;
  *(_OWORD *)(v124 + 16) = 0u;
  v125 = v124 + 16;
  *(_OWORD *)(v124 + 32) = 0u;
  v126 = v124 + 32;
  *(_OWORD *)v124 = 0u;
  *(_QWORD *)(v124 + 48) = &v565;
  v127 = *(float *)&v560;
  v128 = v561;
  v129 = v128 + v128;
  v130 = *((float *)&v560 + 1) * (float)(*((float *)&v560 + 1) + *((float *)&v560 + 1));
  v131 = v128 * (float)(v128 + v128);
  v132 = (float)(v127 + v127) * *((float *)&v560 + 1);
  v133 = (float)(v127 + v127) * v561;
  v134 = (float)(v127 + v127) * cosval;
  v135 = (float)(*((float *)&v560 + 1) + *((float *)&v560 + 1)) * v561;
  v136 = (float)(*((float *)&v560 + 1) + *((float *)&v560 + 1)) * cosval;
  __src[0] = (float)(1.0 - v130) - v131;
  __src[1] = v132 + (float)(v129 * cosval);
  v137 = 1.0 - (float)(v127 * (float)(v127 + v127));
  *(float *)&v572 = v133 - v136;
  *((float *)&v572 + 1) = v132 - (float)(v129 * cosval);
  v573 = v137 - v131;
  v574 = v135 + v134;
  v575[0] = v133 + v136;
  v575[1] = v135 - v134;
  *(float *)&v576 = v137 - v130;
  physx::Gu::computeOBBPoints((float *)v583, (float *)&v563, (float *)&v601, __src, (float *)&v572 + 1, v575);
  v138 = *(_DWORD *)&v583[8];
  *(_QWORD *)&v570[0] = *(_QWORD *)v583;
  DWORD2(v570[0]) = *(_DWORD *)&v583[8];
  v139 = *(_DWORD *)(v124 + 8);
  v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  if (v140 <= v139)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
    v142 = *(_DWORD *)(v124 + 8);
    v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    v141 = *(_QWORD *)v124 + 12 * v139;
    *(_QWORD *)v141 = *(_QWORD *)v583;
    *(_DWORD *)(v141 + 8) = v138;
    v142 = v139 + 1;
    *(_DWORD *)(v124 + 8) = v142;
  }
  v143 = v590;
  *(_QWORD *)&v570[0] = v589;
  *((float *)v570 + 2) = v590;
  if (v140 <= v142)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
    v145 = *(_DWORD *)(v124 + 8);
    v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    v144 = *(_QWORD *)v124 + 12 * v142;
    *(_QWORD *)v144 = v589;
    *(float *)(v144 + 8) = v143;
    v145 = v142 + 1;
    *(_DWORD *)(v124 + 8) = v145;
  }
  v146 = v588;
  *(_QWORD *)&v570[0] = v587;
  *((float *)v570 + 2) = v588;
  if (v140 <= v145)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
    v148 = *(_DWORD *)(v124 + 8);
    v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    v147 = *(_QWORD *)v124 + 12 * v145;
    *(_QWORD *)v147 = v587;
    *(float *)(v147 + 8) = v146;
    v148 = v145 + 1;
    *(_DWORD *)(v124 + 8) = v148;
  }
  v149 = v596;
  *(_QWORD *)&v570[0] = v595;
  *((float *)v570 + 2) = v596;
  if (v140 <= v148)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
    v151 = *(_DWORD *)(v124 + 8);
    v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    v150 = *(_QWORD *)v124 + 12 * v148;
    *(_QWORD *)v150 = v595;
    *(float *)(v150 + 8) = v149;
    v151 = v148 + 1;
    *(_DWORD *)(v124 + 8) = v151;
  }
  v152 = *(_DWORD *)&v583[16];
  v153 = v584;
  *(_QWORD *)&v570[0] = *(_QWORD *)&v583[12];
  *((float *)v570 + 2) = v584;
  if (v140 <= v151)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
    v155 = *(_DWORD *)(v124 + 8);
    v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    v154 = (float *)(*(_QWORD *)v124 + 12 * v151);
    *v154 = *(float *)&v583[12];
    *((_DWORD *)v154 + 1) = v152;
    v154[2] = v153;
    v155 = v151 + 1;
    *(_DWORD *)(v124 + 8) = v155;
  }
  v156 = v592;
  *(_QWORD *)&v570[0] = v591;
  *((float *)v570 + 2) = v592;
  if (v140 <= v155)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
    v158 = *(_DWORD *)(v124 + 8);
    v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    v157 = *(_QWORD *)v124 + 12 * v155;
    *(_QWORD *)v157 = v591;
    *(float *)(v157 + 8) = v156;
    v158 = v155 + 1;
    *(_DWORD *)(v124 + 8) = v158;
  }
  v159 = v586;
  *(_QWORD *)&v570[0] = v585;
  *((float *)v570 + 2) = v586;
  if (v140 <= v158)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
    v161 = *(_DWORD *)(v124 + 8);
    v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    v160 = *(_QWORD *)v124 + 12 * v158;
    *(_QWORD *)v160 = v585;
    *(float *)(v160 + 8) = v159;
    v161 = v158 + 1;
    *(_DWORD *)(v124 + 8) = v161;
  }
  v162 = v594;
  *(_QWORD *)&v570[0] = v593;
  *((float *)v570 + 2) = v594;
  if (v140 <= v161)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, (uint64_t)v570);
  }
  else
  {
    v163 = *(_QWORD *)v124 + 12 * v161;
    *(_QWORD *)v163 = v593;
    *(float *)(v163 + 8) = v162;
    *(_DWORD *)(v124 + 8) = v161 + 1;
  }
  v164 = (float)((float)(*((float *)&v589 + 1) - *(float *)&v583[4]) * (float)(v596 - *(float *)&v583[8]))
       - (float)((float)(v590 - *(float *)&v583[8]) * (float)(*((float *)&v595 + 1) - *(float *)&v583[4]));
  v165 = (float)((float)(v590 - *(float *)&v583[8]) * (float)(*(float *)&v595 - *(float *)v583))
       - (float)((float)(*(float *)&v589 - *(float *)v583) * (float)(v596 - *(float *)&v583[8]));
  v166 = (float)((float)(*(float *)&v589 - *(float *)v583) * (float)(*((float *)&v595 + 1) - *(float *)&v583[4]))
       - (float)((float)(*((float *)&v589 + 1) - *(float *)&v583[4]) * (float)(*(float *)&v595 - *(float *)v583));
  v167 = (float)((float)(v165 * v165) + (float)(v164 * v164)) + (float)(v166 * v166);
  v168 = 0.0;
  v169 = 0.0;
  v170 = 0.0;
  if (v167 > 0.0)
  {
    v171 = 1.0 / sqrtf(v167);
    v168 = v164 * v171;
    v169 = v165 * v171;
    v170 = v166 * v171;
  }
  v172 = -(float)((float)((float)(*(float *)&v583[4] * v169) + (float)(*(float *)v583 * v168))
                + (float)(*(float *)&v583[8] * v170));
  *(_QWORD *)&v570[0] = __PAIR64__(LODWORD(v169), LODWORD(v168));
  *((float *)v570 + 2) = v170;
  *((float *)v570 + 3) = v172;
  v173 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v173)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    v174 = *(_QWORD *)(v124 + 32) + 16 * v173;
    *(float *)v174 = v168;
    *(float *)(v174 + 4) = v169;
    *(float *)(v174 + 8) = v170;
    *(float *)(v174 + 12) = v172;
    *(_DWORD *)(v124 + 40) = v173 + 1;
  }
  v175 = (float)((float)(*((float *)&v593 + 1) - *((float *)&v585 + 1)) * (float)(v592 - v586))
       - (float)((float)(v594 - v586) * (float)(*((float *)&v591 + 1) - *((float *)&v585 + 1)));
  v176 = (float)((float)(v594 - v586) * (float)(*(float *)&v591 - *(float *)&v585))
       - (float)((float)(*(float *)&v593 - *(float *)&v585) * (float)(v592 - v586));
  v177 = (float)((float)(*(float *)&v593 - *(float *)&v585) * (float)(*((float *)&v591 + 1) - *((float *)&v585 + 1)))
       - (float)((float)(*((float *)&v593 + 1) - *((float *)&v585 + 1)) * (float)(*(float *)&v591 - *(float *)&v585));
  v178 = (float)((float)(v176 * v176) + (float)(v175 * v175)) + (float)(v177 * v177);
  v179 = 0.0;
  v180 = 0.0;
  v181 = 0.0;
  if (v178 > 0.0)
  {
    v182 = 1.0 / sqrtf(v178);
    v179 = v175 * v182;
    v180 = v176 * v182;
    v181 = v177 * v182;
  }
  v183 = -(float)((float)((float)(*((float *)&v585 + 1) * v180) + (float)(*(float *)&v585 * v179)) + (float)(v586 * v181));
  *(_QWORD *)&v570[0] = __PAIR64__(LODWORD(v180), LODWORD(v179));
  *((float *)v570 + 2) = v181;
  *((float *)v570 + 3) = v183;
  v184 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v184)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    v185 = *(_QWORD *)(v124 + 32) + 16 * v184;
    *(float *)v185 = v179;
    *(float *)(v185 + 4) = v180;
    *(float *)(v185 + 8) = v181;
    *(float *)(v185 + 12) = v183;
    *(_DWORD *)(v124 + 40) = v184 + 1;
  }
  v186 = (float)((float)(*(float *)&v583[16] - *(float *)&v583[4]) * (float)(v592 - *(float *)&v583[8]))
       - (float)((float)(v584 - *(float *)&v583[8]) * (float)(*((float *)&v591 + 1) - *(float *)&v583[4]));
  v187 = (float)((float)(v584 - *(float *)&v583[8]) * (float)(*(float *)&v591 - *(float *)v583))
       - (float)((float)(*(float *)&v583[12] - *(float *)v583) * (float)(v592 - *(float *)&v583[8]));
  v188 = (float)((float)(*(float *)&v583[12] - *(float *)v583) * (float)(*((float *)&v591 + 1) - *(float *)&v583[4]))
       - (float)((float)(*(float *)&v583[16] - *(float *)&v583[4]) * (float)(*(float *)&v591 - *(float *)v583));
  v189 = (float)((float)(v187 * v187) + (float)(v186 * v186)) + (float)(v188 * v188);
  v190 = 0.0;
  v191 = 0.0;
  v192 = 0.0;
  if (v189 > 0.0)
  {
    v193 = 1.0 / sqrtf(v189);
    v190 = v186 * v193;
    v191 = v187 * v193;
    v192 = v188 * v193;
  }
  v194 = -(float)((float)((float)(*(float *)&v583[4] * v191) + (float)(*(float *)v583 * v190))
                + (float)(*(float *)&v583[8] * v192));
  *(_QWORD *)&v570[0] = __PAIR64__(LODWORD(v191), LODWORD(v190));
  *((float *)v570 + 2) = v192;
  *((float *)v570 + 3) = v194;
  v195 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v195)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    v196 = *(_QWORD *)(v124 + 32) + 16 * v195;
    *(float *)v196 = v190;
    *(float *)(v196 + 4) = v191;
    *(float *)(v196 + 8) = v192;
    *(float *)(v196 + 12) = v194;
    *(_DWORD *)(v124 + 40) = v195 + 1;
  }
  v197 = (float)((float)(*((float *)&v593 + 1) - *((float *)&v595 + 1)) * (float)(v586 - v596))
       - (float)((float)(v594 - v596) * (float)(*((float *)&v585 + 1) - *((float *)&v595 + 1)));
  v198 = (float)((float)(v594 - v596) * (float)(*(float *)&v585 - *(float *)&v595))
       - (float)((float)(*(float *)&v593 - *(float *)&v595) * (float)(v586 - v596));
  v199 = (float)((float)(*(float *)&v593 - *(float *)&v595) * (float)(*((float *)&v585 + 1) - *((float *)&v595 + 1)))
       - (float)((float)(*((float *)&v593 + 1) - *((float *)&v595 + 1)) * (float)(*(float *)&v585 - *(float *)&v595));
  v200 = (float)((float)(v198 * v198) + (float)(v197 * v197)) + (float)(v199 * v199);
  v201 = 0.0;
  v202 = 0.0;
  v203 = 0.0;
  if (v200 > 0.0)
  {
    v204 = 1.0 / sqrtf(v200);
    v201 = v197 * v204;
    v202 = v198 * v204;
    v203 = v199 * v204;
  }
  v205 = -(float)((float)((float)(*((float *)&v595 + 1) * v202) + (float)(*(float *)&v595 * v201)) + (float)(v596 * v203));
  *(_QWORD *)&v570[0] = __PAIR64__(LODWORD(v202), LODWORD(v201));
  *((float *)v570 + 2) = v203;
  *((float *)v570 + 3) = v205;
  v206 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v206)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    v207 = *(_QWORD *)(v124 + 32) + 16 * v206;
    *(float *)v207 = v201;
    *(float *)(v207 + 4) = v202;
    *(float *)(v207 + 8) = v203;
    *(float *)(v207 + 12) = v205;
    *(_DWORD *)(v124 + 40) = v206 + 1;
  }
  v208 = (float)((float)(*((float *)&v587 + 1) - *(float *)&v583[4]) * (float)(v586 - *(float *)&v583[8]))
       - (float)((float)(v588 - *(float *)&v583[8]) * (float)(*((float *)&v585 + 1) - *(float *)&v583[4]));
  v209 = (float)((float)(v588 - *(float *)&v583[8]) * (float)(*(float *)&v585 - *(float *)v583))
       - (float)((float)(*(float *)&v587 - *(float *)v583) * (float)(v586 - *(float *)&v583[8]));
  v210 = (float)((float)(*(float *)&v587 - *(float *)v583) * (float)(*((float *)&v585 + 1) - *(float *)&v583[4]))
       - (float)((float)(*((float *)&v587 + 1) - *(float *)&v583[4]) * (float)(*(float *)&v585 - *(float *)v583));
  v211 = (float)((float)(v209 * v209) + (float)(v208 * v208)) + (float)(v210 * v210);
  v212 = 0.0;
  v213 = 0.0;
  v214 = 0.0;
  if (v211 > 0.0)
  {
    v215 = 1.0 / sqrtf(v211);
    v212 = v208 * v215;
    v213 = v209 * v215;
    v214 = v210 * v215;
  }
  v216 = -(float)((float)((float)(*(float *)&v583[4] * v213) + (float)(*(float *)v583 * v212))
                + (float)(*(float *)&v583[8] * v214));
  *(_QWORD *)&v570[0] = __PAIR64__(LODWORD(v213), LODWORD(v212));
  *((float *)v570 + 2) = v214;
  *((float *)v570 + 3) = v216;
  v217 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v217)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    v218 = *(_QWORD *)(v124 + 32) + 16 * v217;
    *(float *)v218 = v212;
    *(float *)(v218 + 4) = v213;
    *(float *)(v218 + 8) = v214;
    *(float *)(v218 + 12) = v216;
    *(_DWORD *)(v124 + 40) = v217 + 1;
  }
  v219 = (float)((float)(*((float *)&v591 + 1) - *((float *)&v589 + 1)) * (float)(v594 - v590))
       - (float)((float)(v592 - v590) * (float)(*((float *)&v593 + 1) - *((float *)&v589 + 1)));
  v220 = (float)((float)(v592 - v590) * (float)(*(float *)&v593 - *(float *)&v589))
       - (float)((float)(*(float *)&v591 - *(float *)&v589) * (float)(v594 - v590));
  v221 = (float)((float)(*(float *)&v591 - *(float *)&v589) * (float)(*((float *)&v593 + 1) - *((float *)&v589 + 1)))
       - (float)((float)(*((float *)&v591 + 1) - *((float *)&v589 + 1)) * (float)(*(float *)&v593 - *(float *)&v589));
  v222 = (float)((float)(v220 * v220) + (float)(v219 * v219)) + (float)(v221 * v221);
  v223 = 0.0;
  v224 = 0.0;
  v225 = 0.0;
  if (v222 > 0.0)
  {
    v226 = 1.0 / sqrtf(v222);
    v223 = v219 * v226;
    v224 = v220 * v226;
    v225 = v221 * v226;
  }
  v227 = -(float)((float)((float)(*((float *)&v589 + 1) * v224) + (float)(*(float *)&v589 * v223)) + (float)(v590 * v225));
  *(_QWORD *)&v570[0] = __PAIR64__(LODWORD(v224), LODWORD(v223));
  *((float *)v570 + 2) = v225;
  *((float *)v570 + 3) = v227;
  v228 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v228)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    v229 = *(_QWORD *)(v124 + 32) + 16 * v228;
    *(float *)v229 = v223;
    *(float *)(v229 + 4) = v224;
    *(float *)(v229 + 8) = v225;
    *(float *)(v229 + 12) = v227;
    *(_DWORD *)(v124 + 40) = v228 + 1;
  }
  LODWORD(v570[0]) = 11;
  v230 = *(unsigned int *)(v124 + 24);
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v230)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v231 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v230) = v570[0];
    v231 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v231;
  }
  LODWORD(v570[0]) = 65559;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v231)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v232 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v231) = v570[0];
    v232 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v232;
  }
  LODWORD(v570[0]) = 196623;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v232)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v233 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v232) = v570[0];
    v233 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v233;
  }
  LODWORD(v570[0]) = 131088;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v233)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v234 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v233) = v570[0];
    v234 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v234;
  }
  LODWORD(v570[0]) = 17170445;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v234)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v235 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v234) = v570[0];
    v235 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v235;
  }
  LODWORD(v570[0]) = 17235989;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v235)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v236 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v235) = v570[0];
    v236 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v236;
  }
  LODWORD(v570[0]) = 17104905;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v236)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v237 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v236) = v570[0];
    v237 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v237;
  }
  LODWORD(v570[0]) = 17039378;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v237)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v238 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v237) = v570[0];
    v238 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v238;
  }
  LODWORD(v570[0]) = 33554451;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v238)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v239 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v238) = v570[0];
    v239 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v239;
  }
  LODWORD(v570[0]) = 33816582;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v239)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v240 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v239) = v570[0];
    v240 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v240;
  }
  LODWORD(v570[0]) = 33882132;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v240)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v241 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v240) = v570[0];
    v241 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v241;
  }
  LODWORD(v570[0]) = 33619968;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v241)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v242 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v241) = v570[0];
    v242 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v242;
  }
  LODWORD(v570[0]) = 50528278;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v242)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v243 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v242) = v570[0];
    v243 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v243;
  }
  LODWORD(v570[0]) = 50790404;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v243)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v244 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v243) = v570[0];
    v244 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v244;
  }
  LODWORD(v570[0]) = 50724881;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v244)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v245 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v244) = v570[0];
    v245 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v245;
  }
  LODWORD(v570[0]) = 50462722;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v245)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v246 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v245) = v570[0];
    v246 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v246;
  }
  LODWORD(v570[0]) = 67108867;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v246)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v247 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v246) = v570[0];
    v247 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v247;
  }
  LODWORD(v570[0]) = 67239950;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v247)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v248 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v247) = v570[0];
    v248 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v248;
  }
  LODWORD(v570[0]) = 67502087;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v248)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v249 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v248) = v570[0];
    v249 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v249;
  }
  LODWORD(v570[0]) = 67371016;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v249)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v250 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v249) = v570[0];
    v250 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v250;
  }
  LODWORD(v570[0]) = 83951626;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v250)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v251 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v250) = v570[0];
    v251 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v251;
  }
  LODWORD(v570[0]) = 84213765;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v251)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v252 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v251) = v570[0];
    v252 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v252;
  }
  LODWORD(v570[0]) = 84344844;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v252)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    v253 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v252) = v570[0];
    v253 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v253;
  }
  LODWORD(v570[0]) = 84082689;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v253)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v253) = v570[0];
    ++*(_DWORD *)(v124 + 24);
  }
  if (!v536)
    goto LABEL_451;
  v254 = v534[7];
  v255 = *(float *)(v254 + 340);
  v256 = *(float *)(v254 + 336);
  v257 = -v255;
  v258 = "allbackILi1ELb0EE";
  do
  {
    v548 = v124;
    v259 = *(_QWORD *)(v124 + 48);
    v260 = *(unsigned int *)(v259 + 8);
    if ((_DWORD)v260)
    {
      v261 = 0;
      v262 = -1;
      v263 = 0.0;
      while (1)
      {
        v264 = 0.0;
        v265 = 0.0;
        if (*(_DWORD *)(v124 + 8))
        {
          v266 = (float *)(*(_QWORD *)v259 + 16 * v261);
          v267 = *v266;
          v268 = v266[1];
          v269 = v266[2];
          v270 = v266[3];
          v271 = (float *)(*(_QWORD *)v124 + 8);
          v272 = *(unsigned int *)(v124 + 8);
          do
          {
            v273 = (float)(v268 * *(v271 - 1)) + (float)(*(v271 - 2) * v267);
            v274 = *v271;
            v271 += 3;
            v275 = v270 + (float)(v273 + (float)(v274 * v269));
            if (v264 <= v275)
              v264 = v275;
            if (v265 >= v275)
              v265 = v275;
            --v272;
          }
          while (v272);
        }
        v276 = v264 - v265;
        if (v276 < v255)
          v276 = 1.0;
        v277 = v264 / v276;
        if (v277 > v263)
        {
          v278 = *(unsigned int *)(v124 + 40);
          if ((_DWORD)v278)
          {
            v279 = 0;
            v280 = (float *)(*(_QWORD *)v259 + 16 * v261);
            v281 = *(_QWORD *)(v124 + 32);
            v282 = v280 + 3;
            v283 = *v280;
            v284 = v280[1];
            while (1)
            {
              v285 = (float *)(v281 + 16 * v279);
              v286 = v285[1];
              if (v283 != *v285)
                break;
              v287 = v280[2];
              if (v284 != v286)
                goto LABEL_210;
              if (v287 != v285[2])
                goto LABEL_210;
              v288 = 0.0;
              if (*v282 != *(float *)(v281 + 16 * v279 + 12))
                goto LABEL_210;
LABEL_217:
              ++v279;
              v277 = v288;
              if (v279 == v278)
                goto LABEL_221;
            }
            v287 = v280[2];
LABEL_210:
            if ((float)((float)((float)(v284 * v286) + (float)(v283 * *v285)) + (float)(v287 * v285[2])) > *((float *)v258 + 788)
              && (v289 = *(unsigned int *)(v124 + 24), (_DWORD)v289))
            {
              v290 = (unsigned __int8 *)(*(_QWORD *)(v124 + 16) + 3);
              while (1)
              {
                if (v279 == *v290)
                {
                  v291 = (float *)(*(_QWORD *)v124 + 12 * *(v290 - 1));
                  if ((float)(*v282
                             + (float)((float)((float)(v284 * v291[1]) + (float)(*v291 * v283)) + (float)(v291[2] * v287))) < 0.0)
                    break;
                }
                v290 += 4;
                if (!--v289)
                  goto LABEL_216;
              }
              v288 = 0.0;
            }
            else
            {
LABEL_216:
              v288 = v277;
            }
            goto LABEL_217;
          }
          v288 = v277;
LABEL_221:
          if (v288 > v263)
          {
            v262 = v261;
            v263 = v288;
          }
        }
        if (++v261 == v260)
          goto LABEL_226;
      }
    }
    v262 = -1;
    v263 = 0.0;
LABEL_226:
    if (v263 <= v256)
      v292 = 0xFFFFFFFFLL;
    else
      v292 = v262;
    if ((v292 & 0x80000000) != 0)
    {
LABEL_450:
      v124 = v548;
      break;
    }
    v568 = 0;
    v569 = 0;
    v293 = *(unsigned int *)(v124 + 8);
    if (!(_DWORD)v293)
      goto LABEL_245;
    v294 = 0;
    v295 = 0;
    v296 = (float *)(v565 + 16 * v292);
    v297 = *v296;
    v298 = v296[1];
    v299 = v296[2];
    v300 = v565 + 16 * v292;
    v301 = *(float *)(v300 + 12);
    v543 = (float *)(v300 + 12);
    v544 = v296;
    v302 = (float *)(*(_QWORD *)v124 + 8);
    v303 = (char *)&v597 + 1;
    do
    {
      v304 = v301 + (float)((float)((float)(v298 * *(v302 - 1)) + (float)(*(v302 - 2) * v297)) + (float)(*v302 * v299));
      v305 = v304 < v257;
      if (v304 > v255)
        v305 = 2;
      if (v305)
        _ZF = v305 == 2;
      else
        _ZF = 1;
      if (_ZF)
      {
        v307 = -1;
      }
      else
      {
        if (v305 != 1)
          goto LABEL_243;
        v307 = v294++;
      }
      *v303 = v307;
      v303[1] = -1;
LABEL_243:
      *(v303 - 1) = v305;
      v295 |= v305;
      v302 += 3;
      v303 += 3;
      --v293;
    }
    while (v293);
    if ((v295 & 2) == 0)
    {
LABEL_245:
      v308 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v309 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull>::getName() [T = physx::ConvexHull]";
      else
        v309 = "<allocation names disabled>";
      v124 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v308 + 24)
                                                                                              + 16))(v308 + 24, 56, v309, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 473);
      *(_OWORD *)v124 = 0u;
      *(_OWORD *)(v124 + 32) = 0u;
      *(_OWORD *)(v124 + 16) = 0u;
      v310 = v548;
      *(_QWORD *)(v124 + 48) = *(_QWORD *)(v548 + 48);
      physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::resize(v124, *(_DWORD *)(v548 + 8), (uint64_t)v583);
      physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::resize(v124 + 16, *(_DWORD *)(v548 + 24), v583);
      physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::resize(v124 + 32, *(_DWORD *)(v548 + 40), v583);
      memcpy(*(void **)v124, *(const void **)v310, (12 * *(_DWORD *)(v310 + 8)));
      v120 = v534;
      memcpy(*(void **)(v124 + 16), *(const void **)(v310 + 16), (4 * *(_DWORD *)(v310 + 24)));
      memcpy(*(void **)(v124 + 32), *(const void **)(v310 + 32), (16 * *(_DWORD *)(v310 + 40)));
      goto LABEL_362;
    }
    if (!*(_DWORD *)(v124 + 40))
    {
      LOWORD(v314) = 0;
      LOWORD(v312) = 0;
      v430 = 0;
      v431 = 1;
      v433 = -1;
      goto LABEL_324;
    }
    v311 = 0;
    v537 = 0;
    v312 = 0;
    LODWORD(v313) = 0;
    v314 = 0;
    do
    {
      v315 = 0;
      v316 = v313;
      v317 = 255;
      v313 = 0xFFFFFFFFLL;
      LODWORD(v318) = v316;
      v319 = 255;
      v320 = 255;
      v546 = v316;
      v541 = v311;
      v542 = v314;
      v540 = v316;
      do
      {
        v321 = v318;
        v318 = (v318 + 1);
        v322 = *(_QWORD *)(v548 + 16);
        if (v318 < *(_DWORD *)(v548 + 24)
          && v311 == *(unsigned __int8 *)(v322 + 4 * v318 + 3))
        {
          v323 = v318;
        }
        else
        {
          v323 = v546;
          v313 = v318;
          LODWORD(v318) = v316;
        }
        v324 = (__int16 *)(v322 + 4 * v321);
        v325 = *v324;
        v326 = *v324;
        v327 = *((unsigned __int8 *)v324 + 2);
        v328 = *((unsigned __int8 *)&v597 + 3 * v327);
        v329 = v322 + 4 * v323;
        v332 = *(unsigned __int8 *)(v329 + 2);
        v331 = (unsigned __int8 *)(v329 + 2);
        v330 = v332;
        v333 = *((unsigned __int8 *)&v597 + 3 * v332);
        if (v328 == 1)
        {
          v334 = v317;
          v601.i16[v321] = v312;
          v335 = &v583[4 * (unsigned __int16)v312];
          v335[2] = *((_BYTE *)&v597 + 3 * v327 + 1);
          v335[3] = v314;
          if (v333 == 1)
          {
            if (v321 > v325)
            {
              v336 = v601.i16[(__int16)v325];
              *(_WORD *)&v583[4 * (unsigned __int16)v312] = v336;
              *(_WORD *)&v583[4 * v336] = v312;
            }
            ++v312;
            v317 = v334;
          }
          else
          {
            if (v321 <= v325)
            {
              if (v333)
              {
                v370 = *(_QWORD *)(v548 + 32);
                v371 = (float *)(v370 + 16 * *(unsigned __int8 *)(v322 + 4 * v321 + 3));
                v372 = (float *)(v370 + 16 * *(unsigned __int8 *)(v322 + 4 * v325 + 3));
                v373 = *v371;
                v374 = v371[1];
                v375 = v371[2];
                v376 = *v372;
                v377 = v372[1];
                v378 = v372[2];
                v379 = *v544;
                v380 = v544[1];
                v381 = v544[2];
                v382.f32[0] = (float)(v374 * v378) - (float)(v377 * v375);
                v383 = (float)((float)(*v372 * (float)((float)(v380 * v375) - (float)(v374 * v381)))
                             + (float)(*v371 * (float)((float)(v377 * v381) - (float)(v380 * v378))))
                     + (float)(*v544 * v382.f32[0]);
                if (v383 == 0.0)
                {
                  v392 = 0;
                  v393 = 1.0;
                  v388 = 0.0;
                  v387 = (float32x2_t)1065353216;
                  v390 = (float32x2_t)0x3F80000000000000;
                  v391 = 0.0;
                }
                else
                {
                  v384 = -v374;
                  v385 = 1.0 / v383;
                  v386.f32[0] = (float)(v377 * v381) - (float)(v378 * v380);
                  v386.f32[1] = -(float)((float)(v376 * v381) - (float)(v378 * v379));
                  v387 = vmul_n_f32(v386, v385);
                  v388 = (float)((float)(v376 * v380) - (float)(v379 * v377)) * v385;
                  v389.f32[0] = -(float)((float)(v375 * (float)-v380) + (float)(v374 * v381));
                  v389.f32[1] = (float)(v373 * v381) - (float)(v379 * v375);
                  v390 = vmul_n_f32(v389, v385);
                  v391 = -(float)((float)((float)(v373 * v380) - (float)(v379 * v374)) * v385);
                  v382.f32[1] = -(float)((float)(v373 * v378) - (float)(v376 * v375));
                  v392 = vmul_n_f32(v382, v385);
                  v393 = (float)((float)(v376 * v384) + (float)(v373 * v377)) * v385;
                }
                v412 = v371[3];
                v413 = v372[3];
                v414 = (float)((float)(v388 * v412) + (float)(v391 * v413)) + (float)(v393 * *v543);
                v415 = vneg_f32(vadd_f32(vadd_f32(vmul_n_f32(v387, v412), vmul_n_f32(v390, v413)), vmul_n_f32(v392, *v543)));
                *(float32x2_t *)&v567 = v415;
                *((float *)&v567 + 2) = -v414;
                v416 = v569;
                if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
                {
                  v418 = v320;
                  v419 = v294;
                  v420 = v313;
                  physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)&v568, (uint64_t)&v567);
                  v320 = v418;
                  v316 = v540;
                  v313 = v420;
                  v311 = v541;
                  v314 = v542;
                  v294 = v419;
                }
                else
                {
                  v417 = (float32x2_t *)(*(_QWORD *)&v568 + 12 * v569);
                  *v417 = v415;
                  v417[1].f32[0] = -v414;
                  LODWORD(v569) = v416 + 1;
                }
                v317 = v294++;
              }
              else
              {
                v317 = *((unsigned __int8 *)&v597 + 3 * v330 + 1);
                if ((_DWORD)v317 == 255)
                {
                  v398 = v320;
                  v399 = *(_QWORD *)v548;
                  v400 = (_QWORD *)(*(_QWORD *)v548 + 12 * v330);
                  v401 = v569;
                  if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
                  {
                    v426 = v294;
                    v427 = v313;
                    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)&v568, (uint64_t)v400);
                    v316 = v540;
                    v313 = v427;
                    v311 = v541;
                    v314 = v542;
                    v294 = v426;
                    v330 = *v331;
                  }
                  else
                  {
                    v402 = *(_QWORD *)&v568 + 12 * v569;
                    *(_QWORD *)v402 = *v400;
                    *(_DWORD *)(v402 + 8) = *(_DWORD *)(v399 + 12 * v330 + 8);
                    LODWORD(v569) = v401 + 1;
                  }
                  v317 = v294;
                  *((_BYTE *)&v597 + 3 * v330 + 1) = v294++;
                  v320 = v398;
                }
              }
            }
            else
            {
              v344 = v601.i16[v326];
              *(_WORD *)&v583[4 * (unsigned __int16)v312] = v344;
              v345 = &v583[4 * v344];
              *(_WORD *)v345 = v312;
              v317 = v345[2];
            }
            if (v319 == 255 || v319 == (_DWORD)v317)
            {
              ++v312;
            }
            else
            {
              v428 = &v583[4 * (unsigned __int16)(v312 + 1)];
              v428[2] = v317;
              v320 = (unsigned __int16)(v312 + 1);
              v428[3] = v314;
              *(_WORD *)v428 = 255;
              v312 += 2;
            }
          }
        }
        else if (v333 == 1)
        {
          if (v321 <= v325)
          {
            if (*((_BYTE *)&v597 + 3 * v327))
            {
              v346 = *(_QWORD *)(v548 + 32);
              v347 = (float *)(v346 + 16 * *(unsigned __int8 *)(v322 + 4 * v321 + 3));
              v348 = (float *)(v346 + 16 * *(unsigned __int8 *)(v322 + 4 * v325 + 3));
              v349 = *v347;
              v350 = v347[1];
              v351 = v347[2];
              v352 = *v348;
              v353 = v348[1];
              v354 = v348[2];
              v355 = *v544;
              v356 = v544[1];
              v357 = v544[2];
              v358.f32[0] = (float)(v350 * v354) - (float)(v353 * v351);
              v359 = (float)((float)(*v348 * (float)((float)(v356 * v351) - (float)(v350 * v357)))
                           + (float)(*v347 * (float)((float)(v353 * v357) - (float)(v356 * v354))))
                   + (float)(*v544 * v358.f32[0]);
              if (v359 == 0.0)
              {
                v366 = (float32x2_t)0x3F80000000000000;
                v363 = (float32x2_t)1065353216;
                v368 = 0;
                v369 = 1.0;
                v364 = 0.0;
                v367 = 0.0;
              }
              else
              {
                v360 = -v350;
                v361 = 1.0 / v359;
                v362.f32[0] = (float)(v353 * v357) - (float)(v354 * v356);
                v362.f32[1] = -(float)((float)(v352 * v357) - (float)(v354 * v355));
                v363 = vmul_n_f32(v362, v361);
                v364 = (float)((float)(v352 * v356) - (float)(v355 * v353)) * v361;
                v365.f32[0] = -(float)((float)(v351 * (float)-v356) + (float)(v350 * v357));
                v365.f32[1] = (float)(v349 * v357) - (float)(v355 * v351);
                v366 = vmul_n_f32(v365, v361);
                v367 = -(float)((float)((float)(v349 * v356) - (float)(v355 * v350)) * v361);
                v358.f32[1] = -(float)((float)(v349 * v354) - (float)(v352 * v351));
                v368 = vmul_n_f32(v358, v361);
                v369 = (float)((float)(v352 * v360) + (float)(v349 * v353)) * v361;
              }
              v403 = v347[3];
              v404 = v348[3];
              v405 = (float)((float)(v364 * v403) + (float)(v367 * v404)) + (float)(v369 * *v543);
              v406 = vneg_f32(vadd_f32(vadd_f32(vmul_n_f32(v363, v403), vmul_n_f32(v366, v404)), vmul_n_f32(v368, *v543)));
              *(float32x2_t *)&v567 = v406;
              *((float *)&v567 + 2) = -v405;
              v407 = v569;
              if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
              {
                v539 = v320;
                v409 = v294;
                v410 = v313;
                v411 = v317;
                physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)&v568, (uint64_t)&v567);
                v317 = v411;
                v320 = v539;
                v316 = v540;
                v313 = v410;
                v311 = v541;
                v314 = v542;
                v294 = v409;
              }
              else
              {
                v408 = (float32x2_t *)(*(_QWORD *)&v568 + 12 * v569);
                *v408 = v406;
                v408[1].f32[0] = -v405;
                LODWORD(v569) = v407 + 1;
              }
              v319 = v294++;
            }
            else
            {
              v319 = *((unsigned __int8 *)&v597 + 3 * v327 + 1);
              if (v319 == 255)
              {
                v538 = v320;
                v394 = *(_QWORD *)v548;
                v395 = (_QWORD *)(*(_QWORD *)v548 + 12 * *((unsigned __int8 *)v324 + 2));
                v396 = v569;
                if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
                {
                  v421 = v294;
                  v535 = v313;
                  v422 = v317;
                  physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)&v568, (uint64_t)v395);
                  v317 = v422;
                  v316 = v540;
                  v313 = v535;
                  v311 = v541;
                  v314 = v542;
                  v294 = v421;
                  v327 = *((unsigned __int8 *)v324 + 2);
                }
                else
                {
                  v397 = *(_QWORD *)&v568 + 12 * v569;
                  *(_QWORD *)v397 = *v395;
                  *(_DWORD *)(v397 + 8) = *(_DWORD *)(v394 + 12 * v327 + 8);
                  LODWORD(v569) = v396 + 1;
                }
                v319 = v294;
                *((_BYTE *)&v597 + 3 * v327 + 1) = v294++;
                v320 = v538;
              }
            }
          }
          else
          {
            v337 = v601.i16[v326];
            v338 = v601.i16[v326] + 1;
            v339 = v583[4 * v601.i16[v326] + 3];
            if ((int)v338 >= (unsigned __int16)v312 || v583[4 * v338 + 3] != v339)
            {
              if (v337 >= 1)
                v340 = 1;
              else
                v340 = v601.i16[v326];
              v341 = v340 - 1;
              v342 = v337 + 4294967294;
              while (v337 >= 2)
              {
                v343 = v583[4 * v342-- + 3];
                --v337;
                if (v343 != v339)
                  goto LABEL_281;
              }
              v337 = v341;
LABEL_281:
              v338 = v337;
            }
            v319 = v583[4 * v338 + 2];
          }
          if ((_DWORD)v317 != 255 && v319 != (_DWORD)v317)
          {
            v423 = &v583[4 * (unsigned __int16)v312];
            v423[2] = v317;
            v320 = (unsigned __int16)v312;
            v423[3] = v314;
            *(_WORD *)v423 = 255;
            ++v312;
          }
          v424 = &v583[4 * (unsigned __int16)v312];
          v424[2] = v319;
          v424[3] = v314;
          v601.i16[v321] = v312;
          if (v321 > *v324)
          {
            v425 = v601.i16[*v324];
            *(_WORD *)&v583[4 * (unsigned __int16)v312] = v425;
            *(_WORD *)&v583[4 * v425] = v312;
          }
          ++v312;
        }
        v315 |= v328;
      }
      while ((_DWORD)v318 != v316);
      if ((v315 & 1) != 0)
      {
        *(_OWORD *)&__src[4 * (unsigned __int16)v314] = *(_OWORD *)(*(_QWORD *)(v548 + 32) + 16 * v311);
        v314 = (v314 + 1);
      }
      v258 = "16RayRTreeCallbackILi1ELb0EE" + 11;
      if ((_DWORD)v320 != 255)
      {
        v429 = (char *)v570 + 4 * v537;
        *(_WORD *)v429 = v320;
        v429[2] = v319;
        v429[3] = v317;
        ++v537;
      }
      ++v311;
    }
    while (v311 < *(unsigned int *)(v548 + 40));
    v430 = v537;
    if (!v537)
    {
      v431 = 1;
      v433 = -1;
      goto LABEL_324;
    }
    v431 = 0;
    v432 = v314 + 1;
    *(_OWORD *)&__src[4 * (unsigned __int16)v314] = *(_OWORD *)v544;
    v433 = v537 - 1;
    if (v537 != 1)
    {
      LOWORD(v314) = v314 + 1;
      v258 = "16RayRTreeCallbackILi1ELb0EE" + 11;
LABEL_324:
      v434 = 0;
      v435 = 2;
      while (1)
      {
        v436 = *((unsigned __int8 *)v570 + 4 * v434 + 3);
        v437 = v434 + 1;
        if (v436 != *((unsigned __int8 *)v570 + 4 * v434 + 6))
        {
          if ((int)v434 + 2 >= v430)
          {
LABEL_347:
            v124 = 0;
            v120 = v534;
            goto LABEL_362;
          }
          v438 = (char *)v570 + 4 * v435;
          v439 = v430;
          while (v436 != v438[2])
          {
            v438 += 4;
            if (v435 == --v439)
              goto LABEL_347;
          }
          v440 = *((_DWORD *)v570 + v437);
          *((_DWORD *)v570 + v437) = *(_DWORD *)v438;
          *(_DWORD *)v438 = v440;
        }
        ++v435;
        v434 = v437;
        if (v437 == v433)
        {
          v432 = v314;
          break;
        }
      }
    }
    if (v294)
    {
      v441 = v294;
      v442 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v443 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull>::getName() [T = physx::ConvexHull]";
      else
        v443 = "<allocation names disabled>";
      v124 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v442 + 24)
                                                                                              + 16))(v442 + 24, 56, v443, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 787);
      v444 = *(_QWORD *)(v548 + 48);
      *(_OWORD *)v124 = 0u;
      *(_OWORD *)(v124 + 16) = 0u;
      *(_OWORD *)(v124 + 32) = 0u;
      *(_QWORD *)(v124 + 48) = v444;
      v445 = *(unsigned int *)(v548 + 8);
      if ((_DWORD)v445)
      {
        v446 = 0;
        v447 = 0;
        v448 = 0;
        v449 = &v597;
        v450 = v441;
        v451 = v430;
        do
        {
          v452 = *(unsigned __int8 *)v449;
          v449 = (float *)((char *)v449 + 3);
          if (v452 == 1)
          {
            v453 = *(_QWORD *)v548 + v446;
            v454 = *(_DWORD *)(v124 + 8);
            if ((*(_DWORD *)(v124 + 12) & 0x7FFFFFFFu) <= v454)
            {
              physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, v453);
              v451 = v430;
              v450 = v441;
            }
            else
            {
              v455 = *(_QWORD *)v124 + 12 * v454;
              *(_QWORD *)v455 = *(_QWORD *)v453;
              *(_DWORD *)(v455 + 8) = *(_DWORD *)(v453 + 8);
              *(_DWORD *)(v124 + 8) = v454 + 1;
            }
            ++v448;
            v445 = *(unsigned int *)(v548 + 8);
          }
          ++v447;
          v446 += 12;
        }
        while (v447 < v445);
      }
      else
      {
        v448 = 0;
        v450 = v441;
        v451 = v430;
      }
      _CF = v450 >= v448;
      v456 = v450 - v448;
      if ((_DWORD)v456 != 0 && _CF)
      {
        v457 = 0;
        do
        {
          v458 = *(_QWORD *)&v568 + v457;
          v459 = *(_DWORD *)(v124 + 8);
          if ((*(_DWORD *)(v124 + 12) & 0x7FFFFFFFu) <= v459)
          {
            physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)v124, v458);
            v451 = v430;
          }
          else
          {
            v460 = *(_QWORD *)v124 + 12 * v459;
            *(_QWORD *)v460 = *(_QWORD *)v458;
            *(_DWORD *)(v460 + 8) = *(_DWORD *)(v458 + 8);
            *(_DWORD *)(v124 + 8) = v459 + 1;
          }
          v457 += 12;
          --v456;
        }
        while (v456);
      }
      v461 = v451;
      physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::resize(v124 + 16, v451 + (unsigned __int16)v312, &v567);
      physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::resize(v124 + 32, v432, &v567);
      v462 = *(char **)(v124 + 16);
      if ((v431 & 1) == 0)
      {
        v463 = (unsigned __int16)v312;
        v464 = (char *)v570 + 2;
        v465 = v461;
        do
        {
          v466 = &v462[4 * v463];
          v466[3] = v432 - 1;
          v467 = *((unsigned __int16 *)v464 - 1);
          *(_WORD *)v466 = v467;
          *(_WORD *)&v583[4 * v467] = v463;
          v468 = *v464;
          v464 += 4;
          v466[2] = v468;
          ++v463;
          --v465;
        }
        while (v465);
      }
      memcpy(v462, v583, 4 * (unsigned __int16)v312);
      memcpy(*(void **)(v124 + 32), __src, 16 * v432);
      v120 = v534;
    }
    else
    {
      v124 = 0;
      v120 = v534;
    }
    v258 = "16RayRTreeCallbackILi1ELb0EE" + 11;
LABEL_362:
    if ((v569 & 0x8000000000000000) == 0 && (v569 & 0x7FFFFFFF00000000) != 0 && *(_QWORD *)&v568 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (!v124)
      goto LABEL_450;
    v470 = 0;
    LODWORD(v471) = 0;
    --v536;
    v472 = *(unsigned int *)(v124 + 24);
    v473 = 3;
    while (v472 != v470)
    {
      v474 = *(_QWORD *)(v124 + 16);
      v475 = v474 + v473;
      v476 = *(unsigned __int8 *)(v474 + v473);
      if (*(unsigned __int8 *)(v474 + 4 * v471 + 3) != v476)
        LODWORD(v471) = v470;
      v477 = v471;
      if (v470 + 1 < v472)
      {
        if (*(unsigned __int8 *)(v475 + 4) == v476)
          v477 = v470 + 1;
        else
          v477 = v471;
      }
      v478 = *(unsigned __int16 *)(v475 - 3);
      if (v478 != 255 && v478 != 0xFFFF)
      {
        v473 += 4;
        ++v470;
        if (*(unsigned __int8 *)(v474 + 4 * (__int16)v478 + 2) == *(unsigned __int8 *)(v474 + 4 * v477 + 2))
          continue;
      }
      v481 = *(_QWORD *)(v124 + 32);
      goto LABEL_435;
    }
    if ((_DWORD)v472)
    {
      v480 = 0;
      v474 = *(_QWORD *)(v124 + 16);
      v481 = *(_QWORD *)(v124 + 32);
      v482 = *(_QWORD *)v124;
      v483 = (unsigned __int8 *)(v474 + 3);
      v484 = 1;
      while (1)
      {
        v485 = *v483;
        v486 = (float *)(v481 + 16 * *v483);
        v487 = (float *)(v482 + 12 * *(v483 - 1));
        v488 = *v487;
        v489 = v487[1];
        v490 = *v486;
        v491 = v486[1];
        v492 = v487[2];
        v493 = v486[2];
        v494 = (float)((float)((float)(v489 * v491) + (float)(*v487 * *v486)) + (float)(v492 * v493)) + v486[3];
        if (v494 > v255 || v494 < v257)
          break;
        if (*(unsigned __int8 *)(v474 + 4 * v471 + 3) == v485)
          v471 = v471;
        else
          v471 = (v484 - 1);
        v496 = v480 + 1;
        if (v480 + 1 >= v472 || (v497 = v484, v483[4] != v485))
          v497 = v471;
        v498 = v497 + 1;
        if (v498 >= v472
          || *(unsigned __int8 *)(v474 + 4 * v498 + 3) != v485)
        {
          v498 = v471;
        }
        if (v480 != v498)
        {
          v499 = (float *)(v482 + 12 * *(unsigned __int8 *)(v474 + 4 * v497 + 2));
          v500 = v499[1];
          v501 = *v499 - v488;
          v502 = v500 - v489;
          v503 = (float *)(v482 + 12 * *(unsigned __int8 *)(v474 + 4 * v498 + 2));
          v504 = *v503 - *v499;
          v505 = v499[2];
          v506 = v505 - v492;
          v507 = v503[1] - v500;
          v508 = v503[2] - v505;
          v509 = (float)(v502 * v508) - (float)(v506 * v507);
          v510 = (float)(v506 * v504) - (float)(v501 * v508);
          v511 = (float)(v501 * v507) - (float)(v502 * v504);
          v512 = sqrtf((float)((float)(v510 * v510) + (float)(v509 * v509)) + (float)(v511 * v511));
          if (v512 == 0.0)
            v513 = 1.0;
          else
            v513 = v509;
          if (v512 == 0.0)
          {
            v510 = 0.0;
            v511 = 0.0;
          }
          if ((float)((float)((float)(v491 * (float)((float)(1.0 / v512) * v510))
                             + (float)((float)((float)(1.0 / v512) * v513) * v490))
                     + (float)((float)((float)(1.0 / v512) * v511) * v493)) <= 0.0)
            break;
        }
        ++v484;
        v483 += 4;
        v480 = v496;
        if (v496 == v472)
          goto LABEL_406;
      }
LABEL_435:
      v526 = *(_DWORD *)(v124 + 44);
      if ((v526 & 0x80000000) == 0 && (v526 & 0x7FFFFFFF) != 0 && v481 != 0)
      {
LABEL_440:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v481);
        v474 = *(_QWORD *)(v124 + 16);
      }
LABEL_441:
      v528 = *(_DWORD *)(v124 + 28);
      if ((v528 & 0x80000000) == 0 && (v528 & 0x7FFFFFFF) != 0 && v474)
LABEL_444:
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_445:
      v529 = *(_DWORD *)(v124 + 12);
      if ((v529 & 0x80000000) == 0 && (v529 & 0x7FFFFFFF) != 0 && *(_QWORD *)v124)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v124);
      goto LABEL_450;
    }
LABEL_406:
    v514 = v120[1];
    if (*(_DWORD *)(v124 + 8) > *(unsigned __int16 *)(v514 + 74))
    {
      v531 = *(_DWORD *)(v124 + 44);
      if ((v531 & 0x80000000) == 0 && (v531 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v124 + 32))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v532 = *(_DWORD *)(v124 + 28);
      if ((v532 & 0x80000000) == 0 && (v532 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v124 + 16))
        goto LABEL_444;
      goto LABEL_445;
    }
    if ((_DWORD)v472 && (*(_WORD *)(v514 + 72) & 0x80) != 0)
    {
      v515 = 0;
      v516 = 0;
      v517 = 0;
      v518 = 0;
      v474 = *(_QWORD *)(v124 + 16);
      v519 = 3;
      do
      {
        v520 = *(unsigned __int8 *)(v474 + 4 * v516 + 3);
        v521 = *(unsigned __int8 *)(v474 + v519);
        if (v517 > v518)
          v522 = v517 + 1;
        else
          v522 = v518;
        if (v520 == v521)
        {
          ++v517;
        }
        else
        {
          v518 = v522;
          v517 = 0;
        }
        if (v520 != v521)
          v516 = v515;
        ++v515;
        v519 += 4;
      }
      while (v472 != v515);
      if (v518 >= 0x21)
      {
        v533 = *(_DWORD *)(v124 + 44);
        if ((v533 & 0x80000000) == 0 && (v533 & 0x7FFFFFFF) != 0)
        {
          v481 = *(_QWORD *)(v124 + 32);
          if (v481)
            goto LABEL_440;
        }
        goto LABEL_441;
      }
    }
    v523 = *(_DWORD *)(v548 + 44);
    if ((v523 & 0x80000000) == 0 && (v523 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v548 + 32))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v524 = *(_DWORD *)(v548 + 28);
    if ((v524 & 0x80000000) == 0 && (v524 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v548 + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v525 = *(_DWORD *)(v548 + 12);
    if ((v525 & 0x80000000) == 0 && (v525 & 0x7FFFFFFF) != 0 && *(_QWORD *)v548)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v548);
  }
  while (v536);
LABEL_451:
  v120[8] = v124;
  if ((v566 & 0x8000000000000000) == 0 && (v566 & 0x7FFFFFFF00000000) != 0 && v565 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

void *physx::QuickHullConvexHullLib::fillConvexMeshDescFromQuickHull(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  void *result;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int16 v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  float v44;
  __int16 v45;
  uint64_t v46;

  v4 = a1[7];
  v5 = *(unsigned int *)(v4 + 128);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(v4 + 120);
    do
    {
      v11 = *(_QWORD *)(v10 + 8 * v6);
      if (!*(_DWORD *)(v11 + 60))
      {
        ++v8;
        v12 = *(unsigned __int16 *)(v11 + 8);
        v7 += v12;
        if (v12 > *(unsigned __int16 *)(*(_QWORD *)(v10 + 8 * v9) + 8))
          v9 = v6;
      }
      ++v6;
    }
    while (v5 != v6);
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  v13 = *(_DWORD *)(v4 + 32);
  v14 = 12 * v13 + 12;
  v15 = 20 * v8;
  v16 = 2 * v8;
  v17 = 22 * v8 + 4 * v7 + 4 * v13;
  if (v17 + v14)
  {
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v17 + v14, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2411);
    v15 = 20 * v8;
    v16 = 2 * v8;
    v19 = v18;
    v13 = *(_DWORD *)(a1[7] + 32);
  }
  else
  {
    v19 = 0;
  }
  v20 = v19 + (4 * v7);
  v21 = v20 + v14;
  v22 = v21 + v15;
  a1[9] = v19;
  a1[10] = v22;
  v23 = (unsigned int *)(v22 + v16);
  result = memset(v23, 255, (4 * v13));
  if ((_DWORD)v5)
  {
    v25 = 0;
    v26 = 0;
    v27 = *(_QWORD *)(a1[7] + 120);
    do
    {
      v28 = *(uint64_t **)(v27 + 8 * v25);
      if (!*((_DWORD *)v28 + 15))
      {
        v29 = *v28;
        v30 = *(unsigned int *)(v29 + 12);
        if (v23[v30] == -1)
        {
          v31 = v20 + 12 * v26;
          *(_QWORD *)v31 = *(_QWORD *)v29;
          *(_DWORD *)(v31 + 8) = *(_DWORD *)(v29 + 8);
          v23[v30] = v26++;
        }
        for (i = *(_QWORD *)(v29 + 40); i != v29; i = *(_QWORD *)(i + 40))
        {
          v33 = *(unsigned int *)(i + 12);
          if (v23[v33] == -1)
          {
            v34 = v20 + 12 * v26;
            *(_QWORD *)v34 = *(_QWORD *)i;
            *(_DWORD *)(v34 + 8) = *(_DWORD *)(i + 8);
            v23[v33] = v26++;
          }
        }
      }
      ++v25;
    }
    while (v25 != v5);
  }
  else
  {
    v26 = 0;
  }
  *(_DWORD *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 8) = v20;
  *(_DWORD *)a2 = 12;
  *(_DWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 56) = v19;
  *(_DWORD *)(a2 + 48) = 4;
  *(_DWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 24) = 20;
  if ((_DWORD)v5)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    do
    {
      if (v36 == v9)
        v38 = 0;
      else
        v38 = v36;
      if (!v36)
        v38 = v9;
      v39 = *(uint64_t **)(*(_QWORD *)(a1[7] + 120) + 8 * v38);
      if (!*((_DWORD *)v39 + 15))
      {
        v40 = *v39;
        *(_DWORD *)(v40 + 64) = -1;
        *(_DWORD *)(v19 + 4 * v37) = v23[*(unsigned int *)(v40 + 12)];
        v41 = *(_QWORD *)(v40 + 40);
        if (v41 != v40)
        {
          v42 = v37 + 1;
          do
          {
            result = (void *)v23[*(unsigned int *)(v41 + 12)];
            *(_DWORD *)(v19 + 4 * v42) = (_DWORD)result;
            *(_DWORD *)(v41 + 64) = -1;
            v41 = *(_QWORD *)(v41 + 40);
            ++v42;
          }
          while (v41 != v40);
        }
        v43 = *((_DWORD *)v39 + 8);
        v44 = -*((float *)v39 + 13);
        v45 = *((_WORD *)v39 + 4);
        v46 = v21 + 20 * v35;
        *(_WORD *)(v46 + 18) = v37;
        v37 += v45;
        *(_QWORD *)v46 = v39[3];
        *(_DWORD *)(v46 + 8) = v43;
        *(float *)(v46 + 12) = v44;
        *(_WORD *)(v46 + 16) = v45;
        *(_WORD *)(a1[10] + 2 * v35) = v38;
        *((_BYTE *)v39 + 76) = v35++;
      }
      ++v36;
    }
    while (v36 != (_DWORD)v5);
  }
  return result;
}

BOOL physx::QuickHullConvexHullLib::createEdgeList(physx::QuickHullConvexHullLib *this, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 **a4, unsigned __int16 **a5, unsigned __int16 **a6)
{
  uint64_t v6;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  char *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned __int16 v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v6 = *((_QWORD *)this + 8);
  if (!v6)
  {
    if (a2)
    {
      v13 = physx::shdfnd::Foundation::mInstance;
      v14 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]"
          : "<allocation names disabled>";
      v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD, char *, const char *, uint64_t))(*(_QWORD *)(v13 + 24) + 16))(v13 + 24, a2, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2319);
      v16 = 2 * a2;
      v17 = physx::shdfnd::Foundation::mInstance;
      v18 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]"
          : "<allocation names disabled>";
      v19 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v17 + 24) + 16))(v17 + 24, v16, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2320);
      v20 = physx::shdfnd::Foundation::mInstance;
      v21 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]"
          : "<allocation names disabled>";
      v22 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v20 + 24) + 16))(v20 + 24, v16, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2321);
    }
    else
    {
      v19 = 0;
      v15 = 0;
      v22 = 0;
    }
    *a4 = v15;
    *a6 = v19;
    *a5 = v22;
    v23 = *((_QWORD *)this + 7);
    if (*(_DWORD *)(v23 + 136))
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = *(uint64_t **)(*(_QWORD *)(v23 + 120) + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * v24));
        v29 = *v28;
        v30 = *v28;
        do
        {
          v31 = *(_DWORD *)(v30 + 64);
          if (v31 == -1)
          {
            v19[2 * v26] = a3[v27];
            if (*(_QWORD *)(v30 + 40) == v29)
              v32 = v25;
            else
              v32 = v27 + 1;
            v33 = (2 * v26) | 1;
            v19[v33] = a3[v32];
            v15[2 * v26] = *(_BYTE *)(*(_QWORD *)(v30 + 56) + 76);
            v15[v33] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 48) + 56) + 76);
            v22[v27++] = v26;
            *(_DWORD *)(v30 + 64) = v26;
            v30 = *(_QWORD *)(v30 + 40);
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 48) + 32) + 64) = v26++;
            v29 = *v28;
          }
          else
          {
            v22[v27] = v31;
            v30 = *(_QWORD *)(v30 + 40);
            ++v27;
          }
        }
        while (v30 != v29);
        ++v24;
        v23 = *((_QWORD *)this + 7);
        v25 = v27;
      }
      while (v24 < *(unsigned int *)(v23 + 136));
    }
  }
  return v6 == 0;
}

uint64_t physx::QuickHullConvexHullLib::fillConvexMeshDesc(float32x2_t *a1, uint64_t a2)
{
  float32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  float32x2_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t i;
  unsigned int v28;
  __int128 v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  const void *v37;
  unsigned __int16 *v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  float *v42;
  float v43;
  uint64_t v44;
  float *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;

  v4 = a1[8];
  if (v4)
  {
    v5 = *(unsigned int *)(*(_QWORD *)&v4 + 24);
    v6 = *(unsigned int *)(*(_QWORD *)&v4 + 40);
    v7 = *(_DWORD *)(*(_QWORD *)&v4 + 8);
    v8 = (4 * v5);
    v9 = v8 + 20 * v6 + 12 * v7;
    if (v9 == -12)
    {
      v10 = 0;
    }
    else
    {
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, (v9 + 12), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2528);
      v4 = a1[8];
    }
    a1[9] = (float32x2_t)v10;
    v12 = v10 + v8;
    v13 = (void *)(v12 + (20 * v6));
    result = (uint64_t)memcpy(v13, **(const void ***)&v4, (12 * v7));
    v14 = a1[8];
    v15 = *(_DWORD *)(*(_QWORD *)&v14 + 24);
    if (v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)&v14 + 32);
      do
      {
        if (v17 + 1 >= v15)
        {
          v19 = 1;
        }
        else
        {
          result = v17 - v15;
          v19 = 1;
          while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v14 + 16) + 4 * v17 + 3) == *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v14 + 16) + 4 * (v17 + v19) + 3))
          {
            ++v19;
            if (!((_DWORD)result + v19))
            {
              v19 = v15 - v17;
              break;
            }
          }
        }
        v20 = v16;
        v21 = (_DWORD *)(v12 + 20 * v16);
        v22 = v12 + 20 * v20;
        *(_WORD *)(v22 + 16) = v19;
        *(_WORD *)(v22 + 18) = v17;
        v23 = (_DWORD *)(v18 + 16 * v20);
        *v21 = *v23;
        v21[1] = v23[1];
        v21[2] = v23[2];
        v21[3] = v23[3];
        if (v19)
        {
          v24 = *(_QWORD *)(*(_QWORD *)&v14 + 16);
          do
          {
            *(_DWORD *)(v10 + 4 * v17) = *(unsigned __int8 *)(v24 + 4 * v17 + 2);
            ++v17;
            --v19;
          }
          while (v19);
          v15 = *(_DWORD *)(*(_QWORD *)&v14 + 24);
        }
        v16 = v20 + 1;
      }
      while (v17 < v15);
    }
    *(_DWORD *)(a2 + 64) = v5;
    *(_DWORD *)(a2 + 48) = 4;
    *(_QWORD *)(a2 + 56) = v10;
    *(_DWORD *)(a2 + 16) = v7;
    *(_DWORD *)a2 = 12;
    *(_QWORD *)(a2 + 8) = v13;
    *(_DWORD *)(a2 + 40) = v6;
    *(_DWORD *)(a2 + 24) = 20;
    *(_QWORD *)(a2 + 32) = v12;
    if (v6 >= 2)
    {
      LODWORD(v25) = 0;
      v26 = (unsigned __int16 *)(v8 + v10 + 36);
      for (i = 1; i != v6; ++i)
      {
        v28 = *v26;
        v26 += 10;
        if (*(unsigned __int16 *)(v12 + 20 * v25 + 16) >= v28)
          v25 = v25;
        else
          v25 = i;
      }
      if ((_DWORD)v25)
      {
        if ((_DWORD)v5)
          result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullLib.cpp", 313);
        else
          result = 0;
        a1[3] = (float32x2_t)result;
        v29 = *(_OWORD *)v12;
        v30 = *(_WORD *)(v12 + 16);
        v31 = *(unsigned __int16 *)(v12 + 18);
        v32 = v12 + 20 * v25;
        v47 = v30;
        v48 = *(unsigned __int16 *)(v32 + 16);
        v33 = *(unsigned __int16 *)(v32 + 18);
        *(_OWORD *)v12 = *(_OWORD *)v32;
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v32 + 16);
        *(_OWORD *)v32 = v29;
        *(_WORD *)(v32 + 16) = v30;
        *(_WORD *)(v32 + 18) = v31;
        if (*(_DWORD *)(a2 + 40))
        {
          v34 = 0;
          v35 = (4 * v5);
          v36 = 0;
          v46 = (const void *)(v10 + 4 * v31);
          v37 = (const void *)(v10 + 4 * v33);
          v38 = (unsigned __int16 *)(v35 + v10 + 18);
          do
          {
            if (v34)
            {
              v39 = (void *)(*(_QWORD *)&a1[3] + 4 * v36);
              if (v25 == v34)
              {
                result = (uint64_t)memcpy(v39, v46, 4 * v47);
                *(_WORD *)(v12 + 20 * v25 + 18) = v36;
                v40 = v47;
              }
              else
              {
                result = (uint64_t)memcpy(v39, (const void *)(v10 + 4 * *v38), 4 * *(v38 - 1));
                *v38 = v36;
                v40 = *(v38 - 1);
              }
            }
            else
            {
              result = (uint64_t)memcpy(*(void **)&a1[3], v37, 4 * v48);
              *(_WORD *)(v12 + 18) = v36;
              v40 = v48;
            }
            v36 += v40;
            ++v34;
            v38 += 10;
          }
          while (v34 < *(unsigned int *)(a2 + 40));
        }
        *(float32x2_t *)(a2 + 56) = a1[3];
      }
    }
  }
  else
  {
    result = (uint64_t)physx::QuickHullConvexHullLib::fillConvexMeshDescFromQuickHull(a1, a2);
  }
  if ((*(_WORD *)(*(_QWORD *)&a1[1] + 72) & 0x100) != 0)
  {
    v41 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v41)
    {
      v42 = (float *)(*(_QWORD *)(a2 + 8) + 8);
      do
      {
        v43 = *v42 + a1[5].f32[0];
        *((float32x2_t *)v42 - 1) = vadd_f32(*(float32x2_t *)(v42 - 2), a1[4]);
        *v42 = v43;
        v42 += 3;
        --v41;
      }
      while (v41);
    }
    v44 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v44)
    {
      v45 = (float *)(*(_QWORD *)(a2 + 32) + 12);
      do
      {
        *v45 = *v45
             - (float)((float)((float)(*(v45 - 2) * a1[4].f32[1]) + (float)(*(v45 - 3) * a1[4].f32[0]))
                     + (float)(*(v45 - 1) * a1[5].f32[0]));
        v45 += 5;
        --v44;
      }
      while (v44);
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::recreate(result, a2);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 12 * a2;
    v8 = *(_QWORD *)v5 + 12 * v6;
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      v8 += 12;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

BOOL TestDuplicateTriangles(unsigned int *a1, uint64_t a2, int a3)
{
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  _DWORD *v12;
  int *v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = 1;
  if (a2)
  {
    v5 = *a1;
    if ((_DWORD)v5)
    {
      MEMORY[0x24BDAC7A8](a1);
      bzero((char *)&v16 - ((12 * v5 + 15) & 0x1FFFFFFFF0), 12 * v5);
      v8 = 0;
      do
      {
        v9 = (char *)&v16 + v8 - ((12 * v5 + 15) & 0x1FFFFFFFF0);
        *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + v8 + 8);
        v8 += 12;
      }
      while (12 * v5 != v8);
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v20 = (char *)&v16 - ((12 * v5 + 15) & 0x1FFFFFFFF0);
      v19 = v5;
      physx::ReducedVertexCloud::Reduce(&v19, (uint64_t)&v17);
      v10 = v18;
      v3 = v18 >= *a1;
      if (v18 < *a1)
      {
        if (a3)
        {
          *a1 = v18;
          if (v10)
          {
            v11 = 0;
            v12 = (_DWORD *)(a2 + 8);
            v13 = (int *)(v17 + 8);
            do
            {
              *(v12 - 2) = *(v13 - 2);
              *(v12 - 1) = *(v13 - 1);
              v14 = *v13;
              v13 += 3;
              *v12 = v14;
              v12 += 3;
              ++v11;
            }
            while (v11 < *a1);
          }
        }
      }
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v23 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return v3;
}

uint64_t TestUnifiedNormals(int a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t result;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  float *v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  char v36;

  LODWORD(v5) = a1;
  result = 0;
  if ((_DWORD)v5 && a2 && a3 && a4)
  {
    v7 = 1.0 / (float)v5;
    v5 = v5;
    v8 = (float *)(a2 + 8);
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v9 = v9 + (float)(*(v8 - 2) * v7);
      v10 = v10 + (float)(*(v8 - 1) * v7);
      v12 = *v8;
      v8 += 3;
      v11 = v11 + (float)(v12 * v7);
      --v5;
    }
    while (v5);
    v13 = (unsigned int *)(a4 + 8);
    LOBYTE(result) = 1;
    v14 = a3;
    do
    {
      v15 = *(v13 - 1);
      v16 = (float *)(a2 + 12 * *(v13 - 2));
      v17 = (float *)(a2 + 12 * v15);
      v18 = (float *)(a2 + 12 * *v13);
      v19 = v16[1];
      v20 = *v17 - *v16;
      v21 = v17[1] - v19;
      v22 = v16[2];
      v23 = v17[2] - v22;
      v24 = *v18 - *v16;
      v25 = v18[1] - v19;
      v26 = v18[2] - v22;
      v27 = (float)(v21 * v26) - (float)(v23 * v25);
      v28 = (float)(v23 * v24) - (float)(v20 * v26);
      v29 = (float)(v20 * v25) - (float)(v21 * v24);
      v30 = (float)((float)(v28 * v28) + (float)(v27 * v27)) + (float)(v29 * v29);
      v31 = 0.0;
      v32 = 0.0;
      v33 = 0.0;
      if (v30 > 0.0)
      {
        v34 = 1.0 / sqrtf(v30);
        v31 = v27 * v34;
        v32 = v28 * v34;
        v33 = v29 * v34;
      }
      v35 = (float)((float)((float)(v10 * v32) + (float)(v9 * v31)) + (float)(v11 * v33))
          - (float)((float)((float)(v19 * v32) + (float)(*v16 * v31)) + (float)(v22 * v33));
      if (v35 <= 0.0)
        v36 = 1;
      else
        v36 = a5 ^ 1;
      if ((v36 & 1) != 0)
      {
        result = (v35 <= 0.0) & result;
      }
      else
      {
        result = 0;
        *(v13 - 1) = *v13;
        *v13 = v15;
      }
      v13 += 3;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  unsigned int v12;

  v12 = a3;
  if (!*(_BYTE *)(a4 + a3))
  {
    v6 = result;
    v7 = a3;
    *(_BYTE *)(a4 + a3) = 1;
    v8 = *(unsigned int *)(result + 8);
    if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) <= v8)
    {
      result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result, &v12);
      v7 = v12;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v8) = a3;
      ++*(_DWORD *)(result + 8);
    }
    v9 = (_DWORD *)(a2 + 12 * v7);
    if ((*v9 & 0x20000000) == 0)
      result = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(v6, a2, *v9 & 0x1FFFFFFF, a4);
    v10 = v9[1];
    if ((v10 & 0x20000000) == 0)
      result = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(v6, a2, v10 & 0x1FFFFFFF, a4);
    v11 = v9[2];
    if ((v11 & 0x20000000) == 0)
      return extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(v6, a2, v11 & 0x1FFFFFFF, a4);
  }
  return result;
}

void checkRedundantVertices(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  size_t v9;
  size_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  int *v49;
  unsigned int v50;
  int *v51;
  unsigned int v52;
  int *v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t i;
  int v59;
  uint64_t v60;
  unint64_t j;
  uint64_t v62;
  unsigned int v63;
  unsigned int *v64;
  unint64_t v65;
  int *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  _DWORD *v70;
  unint64_t v71;
  int *v72;
  int v73;
  int v74;
  _BYTE v77[12];
  int v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int *v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v79 = a4;
  v92 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  MEMORY[0x24BDAC7A8](a1);
  v81 = &v77[-((v9 + 15) & 0x1FFFFFFF0)];
  bzero(v81, v9);
  v10 = *((unsigned int *)a5 + 2);
  MEMORY[0x24BDAC7A8](v11);
  v12 = &v77[-((v10 + 15) & 0x1FFFFFFF0)];
  bzero(v12, v10);
  v90 = 0;
  v91 = 0;
  if (!(_DWORD)v10)
    goto LABEL_123;
  v13 = 0;
  while (2)
  {
    v78 = v13;
    v14 = v9;
    while (1)
    {
      v10 = (v10 - 1);
      LODWORD(v91) = 0;
      v15 = *(unsigned int **)a2;
      LODWORD(v88) = 0;
      if (v14)
        break;
LABEL_25:
      if (!(_DWORD)v10)
      {
        if ((v78 & 1) == 0)
          goto LABEL_123;
        goto LABEL_34;
      }
    }
    v16 = 0;
    v17 = 0;
    do
    {
      LODWORD(v86) = 0;
      v20 = *v15;
      v19 = (int *)(v15 + 1);
      v18 = v20;
      LODWORD(v86) = v20;
      if (v20)
      {
        v21 = v18;
        v22 = v19;
        while (1)
        {
          v23 = *v22++;
          if (*(_DWORD *)(*a5 + 4 * v10) == v23)
            break;
          if (!--v21)
            goto LABEL_19;
        }
        if ((HIDWORD(v91) & 0x7FFFFFFFu) <= v91)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v90, &v88);
          v24 = v91;
        }
        else
        {
          *(_DWORD *)(v90 + 4 * v91) = v17;
          v24 = v91 + 1;
          LODWORD(v91) = v91 + 1;
        }
        if ((HIDWORD(v91) & 0x7FFFFFFFu) <= v24)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v90, &v86);
        }
        else
        {
          *(_DWORD *)(v90 + 4 * v24) = (_DWORD)v86;
          LODWORD(v91) = v91 + 1;
        }
        ++v16;
        v18 = v86;
        v17 = v88;
        LODWORD(v9) = *a1;
      }
      else
      {
        v18 = 0;
      }
LABEL_19:
      v15 = (unsigned int *)&v19[v18];
      LODWORD(v88) = ++v17;
    }
    while (v17 < v9);
    if (!v16)
      goto LABEL_24;
    v25 = 0;
    v26 = 0;
    v27 = v90;
    do
    {
      v26 |= *(_DWORD *)(v90 + 4 * (v25 & 0xFFFFFFFE) + 4) == 3;
      v25 += 2;
    }
    while (2 * v16 != v25);
    if ((v26 & 1) == 0)
    {
LABEL_24:
      v14 = v9;
      goto LABEL_25;
    }
    v28 = 0;
    v12[v10] = 1;
    do
    {
      if (*(_DWORD *)(v27 + 4 * (v28 + 1)) != 3)
        v81[*(unsigned int *)(v27 + 4 * v28)] = 1;
      v28 += 2;
    }
    while (2 * v16 != v28);
    v13 = 1;
    if ((_DWORD)v10)
      continue;
    break;
  }
LABEL_34:
  v29 = *((unsigned int *)a5 + 2);
  if ((_DWORD)v29)
  {
    v30 = *a5;
    v31 = *a5 + 4 * v29;
    v32 = v29 - 1;
    LODWORD(v33) = *((_DWORD *)a5 + 2);
    do
    {
      v34 = v29 - 1;
      if (v12[(v29 - 1)])
      {
        if (v29 < v33)
        {
          v35 = 0;
          do
          {
            *(_DWORD *)(v30 + 4 * v32 + 4 * v35) = *(_DWORD *)(v31 + 4 * v35);
            v33 = *((unsigned int *)a5 + 2);
            ++v35;
          }
          while (v29 + v35 < v33);
        }
        LODWORD(v33) = v33 - 1;
        *((_DWORD *)a5 + 2) = v33;
      }
      v31 -= 4;
      --v32;
      --v29;
    }
    while (v34);
    LODWORD(v9) = *a1;
  }
  v88 = 0;
  v89 = 0;
  v86 = 0;
  v87 = 0;
  if ((_DWORD)v9)
  {
    v36 = 0;
    v37 = 0;
    v38 = *(unsigned int **)v79;
    v39 = *(unsigned int **)a2;
    v80 = a2;
    do
    {
      v42 = *v39;
      v41 = v39 + 1;
      v40 = v42;
      v85 = v42;
      v45 = *v38;
      v44 = v38 + 1;
      v43 = v45;
      v84 = v45;
      if (v81[v36])
      {
        if (v43)
        {
          v46 = 0;
          do
          {
            v47 = v44[v46];
            v82 = 3;
            v83 = v47;
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v89)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, &v82);
              v48 = v89;
            }
            else
            {
              v88[v89] = 3;
              v48 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
            v49 = (int *)(a3 + 4 * (3 * v83));
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v48)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, v49);
              v50 = v89;
            }
            else
            {
              v88[v48] = *v49;
              v50 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
            v51 = (int *)(a3 + 4 * (3 * v83 + 1));
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v50)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, v51);
              v52 = v89;
            }
            else
            {
              v88[v50] = *v51;
              v52 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
            v53 = (int *)(a3 + 4 * (3 * v83 + 2));
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v52)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, v53);
            }
            else
            {
              v88[v52] = *v53;
              LODWORD(v89) = v89 + 1;
            }
            v82 = 1;
            if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v87)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v82);
              v54 = v87;
            }
            else
            {
              v86[v87] = 1;
              v54 = v87 + 1;
              LODWORD(v87) = v87 + 1;
            }
            if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v54)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v83);
            }
            else
            {
              v86[v54] = v83;
              LODWORD(v87) = v87 + 1;
            }
            ++v46;
            v55 = v84;
          }
          while (v46 < v84);
          v37 += v46;
        }
        else
        {
          v55 = 0;
        }
      }
      else
      {
        v56 = v37;
        if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v89)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, &v85);
        }
        else
        {
          v88[v89] = v40;
          LODWORD(v89) = v89 + 1;
        }
        if (v85)
        {
          v57 = 0;
          for (i = 0; i < v85; ++i)
          {
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v89)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, &v41[v57]);
            }
            else
            {
              v88[v89] = v41[i];
              LODWORD(v89) = v89 + 1;
            }
            ++v57;
          }
        }
        if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v87)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v84);
        }
        else
        {
          v86[v87] = v84;
          LODWORD(v87) = v87 + 1;
        }
        v37 = v56 + 1;
        if (v84)
        {
          v59 = v56 + 1;
          v60 = 0;
          for (j = 0; j < v84; ++j)
          {
            if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v87)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v44[v60]);
            }
            else
            {
              v86[v87] = v44[j];
              LODWORD(v87) = v87 + 1;
            }
            v55 = v84;
            ++v60;
          }
          v37 = v59;
        }
        else
        {
          v55 = 0;
        }
        a2 = v80;
      }
      v39 = &v41[v85];
      v38 = &v44[v55];
      ++v36;
    }
    while (v36 < *a1);
  }
  else
  {
    v37 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  v62 = v79;
  *(_DWORD *)(v79 + 8) = 0;
  if (&v88 != (int **)a2)
  {
    *(_DWORD *)(a2 + 8) = 0;
    v63 = v89;
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) < v89)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a2, v89);
      v63 = v89;
    }
    if (v63)
    {
      v64 = *(unsigned int **)a2;
      v65 = *(_QWORD *)a2 + 4 * v63;
      v66 = v88;
      do
      {
        v67 = *v66++;
        *v64++ = v67;
      }
      while ((unint64_t)v64 < v65);
      v68 = v89;
    }
    else
    {
      v68 = 0;
    }
    *(_DWORD *)(a2 + 8) = v68;
  }
  if (&v86 != (int **)v62)
  {
    *(_DWORD *)(v62 + 8) = 0;
    v69 = v87;
    if ((*(_DWORD *)(v62 + 12) & 0x7FFFFFFFu) < v87)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v62, v87);
      v69 = v87;
    }
    if (v69)
    {
      v70 = *(_DWORD **)v62;
      v71 = *(_QWORD *)v62 + 4 * v69;
      v72 = v86;
      do
      {
        v73 = *v72++;
        *v70++ = v73;
      }
      while ((unint64_t)v70 < v71);
      v74 = v87;
    }
    else
    {
      v74 = 0;
    }
    *(_DWORD *)(v62 + 8) = v74;
  }
  *a1 = v37;
  if ((v87 & 0x8000000000000000) == 0 && (v87 & 0x7FFFFFFF00000000) != 0 && v86 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v89 & 0x8000000000000000) == 0 && (v89 & 0x7FFFFFFF00000000) != 0 && v88 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_123:
  if ((v91 & 0x8000000000000000) == 0 && (v91 & 0x7FFFFFFF00000000) != 0)
  {
    if (v90)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(unsigned int a1, int a2, uint64_t a3, uint64_t a4, int *a5, unsigned int *a6)
{
  char v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v21;
  unsigned int v22;
  int v23;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v6 = 1;
  v7 = a1;
  v8 = a1;
  while (1)
  {
LABEL_2:
    v9 = *(_DWORD *)(a4 + 12 * v8);
    v10 = *(_DWORD *)(a4 + 4 * (3 * v8 + 1));
    v25[0] = 0x200000001;
    if (v9 == a2)
    {
      v11 = 0;
      v25[0] = 0x100000000;
      v12 = 1;
    }
    else if (v10 == a2)
    {
      v11 = 0;
      LODWORD(v25[0]) = 0;
      v12 = 2;
    }
    else
    {
      v12 = 2;
      v11 = 1;
    }
    v13 = a3 + 12 * v8;
    v14 = *(_DWORD *)(v13 + 4 * v11);
    v15 = *(_DWORD *)(v13 + 4 * v12);
    if ((v14 & 0x20000000) != 0)
    {
      v16 = *(_DWORD *)(v13 + 4 * v12);
      if ((v15 & 0x20000000) != 0)
        return 0;
    }
    else
    {
      v16 = v14;
      v14 = v15;
      if ((v15 & 0x20000000) == 0)
      {
        if (v8 != a1)
        {
          v17 = 0;
          v18 = 0;
          while (1)
          {
            v19 = *(_DWORD *)(v13 + 4 * *((unsigned int *)v25 + v18)) & 0x1FFFFFFF;
            if (v19 == a1 && v7 != a1)
              break;
            v21 = v17 | (v19 != v7);
            v17 = 1;
            v18 = 1;
            if ((v21 & 1) != 0)
            {
              if (v19 != v7)
              {
                v7 = v8;
                v8 = v19;
              }
              goto LABEL_2;
            }
          }
        }
        return 0;
      }
    }
    if ((v6 & 1) == 0)
      break;
    if ((v16 & 0x1FFFFFFF) == a1)
      v22 = v7;
    else
      v22 = v8;
    if ((v16 & 0x1FFFFFFF) == a1)
      v23 = v8;
    else
      v23 = v16 & 0x1FFFFFFF;
    v6 = 0;
    if ((v16 & 0x20000000) == 0)
    {
      v7 = v22;
      v8 = v23;
    }
  }
  *a5 = v14 & 0x1FFFFFFF;
  *a6 = v8;
  return 1;
}

uint64_t physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<Pair>::getName() [T = Pair]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

unint64_t physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::copy<physx::shdfnd::ReflectionAllocator<Pair>>(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    *(_DWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 12) = v3;
    v5 = 8 * v3;
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<Pair>::getName() [T = Pair]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    *(_QWORD *)v2 = result;
    v8 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v8)
    {
      v9 = result + 8 * v8;
      v10 = *(uint64_t **)a2;
      do
      {
        v11 = *v10++;
        *(_QWORD *)result = v11;
        result += 8;
      }
      while (result < v9);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem(unsigned int *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  v3 = *a1;
  if (v2 >= v3)
  {
    if ((_DWORD)v3)
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 72 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 138);
    else
      v6 = 0;
    v9 = v6;
    v7 = a1[1] + 1;
    a1[1] = v7;
    v8 = a1[6];
    if ((a1[7] & 0x7FFFFFFF) <= v8)
    {
      physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack((uint64_t)(a1 + 4), &v9);
      v7 = a1[1];
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v8) = v6;
      a1[6] = v8 + 1;
    }
    result = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v7);
    a1[2] = 1;
  }
  else
  {
    v4 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * a1[1]);
    a1[2] = v2 + 1;
    return v4 + 72 * v2;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;

  v4 = 4 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>::getName() [T = physx::Conve"
         "xHull::HalfEdge]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(int **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 4 * v9;
    v12 = (_DWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(int **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxPlane>::getName() [T = physx::PxPlane]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  v11 = *(__int128 **)v3;
  if ((_DWORD)v9)
  {
    v12 = *(__int128 **)v3;
    v13 = v8;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v11)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>::getName() [T = physx::Con"
           "vexHull::HalfEdge]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_DWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(int **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>::getName() [T = local::QuickHullFace *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>::getName() [T = local::QuickHullFace *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>::getName() [T = local::QuickHullVertex *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>::getName() [T = local::QuickHullHalfEdge *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>::getName() [T = local::QuickHullVertex *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>::getName() [T = local::Quic"
           "kHullHalfEdge *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::ExpandPoint>::getName() [T = local::ExpandPoint]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 60 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 60 * v9;
    v11 = *(_QWORD *)v3;
    v12 = v8;
    do
    {
      for (i = 0; i != 48; i += 16)
        *(_OWORD *)(v12 + i) = *(_OWORD *)(v11 + i);
      v14 = *(_QWORD *)(v11 + 48);
      *(_DWORD *)(v12 + 56) = *(_DWORD *)(v11 + 56);
      *(_QWORD *)(v12 + 48) = v14;
      v12 += 60;
      v11 += 60;
    }
    while (v12 < v10);
    v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v15 = 0;
  }
  for (j = 0; j != 48; j += 16)
    *(_OWORD *)(v8 + 60 * v15 + j) = *(_OWORD *)(a2 + j);
  v17 = v8 + 60 * v15;
  v18 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v17 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(v17 + 48) = v18;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;

  v2 = a2;
  v4 = 60 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<local::ExpandPoint>::getName() [T = local::ExpandPoint]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = result + 60 * v9;
    v12 = result;
    do
    {
      for (i = 0; i != 48; i += 16)
        *(_OWORD *)(v12 + i) = *(_OWORD *)(v10 + i);
      v14 = *(_QWORD *)(v10 + 48);
      *(_DWORD *)(v12 + 56) = *(_DWORD *)(v10 + 56);
      *(_QWORD *)(v12 + 48) = v14;
      v12 += 60;
      v10 += 60;
    }
    while (v12 < v11);
    v10 = *a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;

  v4 = 16 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxPlane>::getName() [T = physx::PxPlane]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 16 * v9;
    v12 = *(__int128 **)a1;
    v13 = (_OWORD *)result;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Foundation::Foundation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  pthread_mutex_t *v19;
  pthread_mutex_t *v20;
  pthread_mutex_t *v21;

  *(_QWORD *)a1 = off_24ED92C78;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 168) = a1 + 32;
  *(_QWORD *)(a1 + 176) = 0x1000000000;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = &off_24ED92D18;
  *(_QWORD *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 192) = a2;
  *(_BYTE *)(a1 + 336) = 1;
  *(_QWORD *)(a1 + 208) = a2;
  *(_QWORD *)(a1 + 344) = a1 + 208;
  *(_QWORD *)(a1 + 352) = 0x1000000001;
  *(_QWORD *)(a1 + 200) = &off_24ED92DA8;
  v4 = physx::shdfnd::Foundation::mInstance + 24;
  v5 = *(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 364) = -1;
  v6 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(v5 + 16))(v4, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 368) = v6;
  physx::shdfnd::MutexImpl::MutexImpl(v6);
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = -3233808384;
  *(_QWORD *)(a1 + 424) = 0;
  v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 1216, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  v8 = v7;
  v9 = v7 + 16;
  *(_QWORD *)&v10 = -1;
  *((_QWORD *)&v10 + 1) = -1;
  *v7 = v10;
  v7[1] = v10;
  v11 = v7 + 28;
  v7[2] = v10;
  v7[3] = v10;
  v7[4] = v10;
  v7[5] = v10;
  v7[6] = v10;
  v7[7] = v10;
  v7[8] = v10;
  v7[9] = v10;
  v7[10] = v10;
  v7[11] = v10;
  v7[12] = v10;
  v7[13] = v10;
  v7[14] = v10;
  v7[15] = v10;
  if (*(_DWORD *)(a1 + 428))
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 384);
    do
    {
      v14 = *(_OWORD *)(v13 + 16 * v12);
      v15 = ~(*(_QWORD *)(v13 + 16 * v12) << 32) + *(_QWORD *)(v13 + 16 * v12);
      v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
      v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
      v18 = (((v17 + ~(v17 << 27)) >> 31) ^ (v17 - 1)) & 0x3F;
      *((_DWORD *)v9 + v12) = *((_DWORD *)v7 + v18);
      v9[v12 + 12] = v14;
      *((_DWORD *)v7 + v18) = v12++;
    }
    while (v12 < *(unsigned int *)(a1 + 428));
  }
  if (*(_QWORD *)(a1 + 376))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 392) = v9;
  *(_QWORD *)(a1 + 400) = v8;
  *(_QWORD *)(a1 + 376) = v8;
  *(_QWORD *)(a1 + 384) = v11;
  *(_QWORD *)(a1 + 408) = 0x4000000030;
  if (*(_DWORD *)(a1 + 420) == -1)
    *(_DWORD *)(a1 + 420) = 0;
  v19 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 432) = v19;
  physx::shdfnd::MutexImpl::MutexImpl(v19);
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  v20 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 456) = v20;
  physx::shdfnd::MutexImpl::MutexImpl(v20);
  v21 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 464) = v21;
  physx::shdfnd::MutexImpl::MutexImpl(v21);
  return a1;
}

void physx::shdfnd::Foundation::~Foundation(physx::shdfnd::Foundation *this)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = off_24ED92C78;
  v2 = (_QWORD *)((char *)this + 440);
  v3 = *((unsigned int *)this + 112);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD **)(*v2 + 8 * i);
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          v5 = v6;
        }
        while (v6);
        v3 = *((unsigned int *)this + 112);
      }
    }
  }
  v8 = 0;
  physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::resize((uint64_t)v2, 0, &v8);
  physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::recreate((uint64_t)v2, *((_DWORD *)this + 112));
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 58);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 57);
  v7 = *((_DWORD *)this + 113);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 55))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 54);
  if (*((_QWORD *)this + 47))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 46);
  *((_QWORD *)this + 25) = &off_24ED92DA8;
  *((_DWORD *)this + 88) = 0;
  physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast((uint64_t)this + 200);
  *((_QWORD *)this + 3) = &off_24ED92D18;
  *((_DWORD *)this + 44) = 0;
  physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast((uint64_t)this + 24);
}

{
  uint64_t v2;

  physx::shdfnd::Foundation::~Foundation(this);
  if (v2)
    (*(void (**)(uint64_t, physx::shdfnd::Foundation *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void physx::shdfnd::BroadcastingErrorCallback::~BroadcastingErrorCallback(uint64_t this)
{
  *(_QWORD *)this = &off_24ED92DA8;
  *(_DWORD *)(this + 152) = 0;
  physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast(this);
}

void physx::shdfnd::BroadcastingAllocator::~BroadcastingAllocator(uint64_t this)
{
  *(_QWORD *)this = &off_24ED92D18;
  *(_DWORD *)(this + 152) = 0;
  physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast(this);
}

uint64_t physx::shdfnd::Foundation::error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::shdfnd::Foundation::errorImpl(a1, a2, a3, a4, a5, &a9);
}

uint64_t physx::shdfnd::Foundation::errorImpl(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char *__format, va_list a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char __str[1024];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(result + 364) & a2) != 0)
  {
    v11 = result;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(*(pthread_mutex_t **)(result + 368));
    result = vsnprintf(__str, 0x400uLL, __format, a6);
    if (*(_DWORD *)(v11 + 352))
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v11 + 344) + 8 * v12);
        result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, __str, a3, a4);
        ++v12;
      }
      while (v12 < *(unsigned int *)(v11 + 352));
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 368));
  }
  return result;
}

uint64_t physx::shdfnd::BroadcastingErrorCallback::reportError(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(result + 152))
  {
    v9 = result;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 8 * v10);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2, a3, a4, a5);
      ++v10;
    }
    while (v10 < *(unsigned int *)(v9 + 152));
  }
  return result;
}

uint64_t physx::shdfnd::Foundation::createInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  physx::shdfnd *v5;
  const char *v6;
  uint64_t v9;
  int v10;

  if ((_DWORD)a1 != 67174656)
  {
    v5 = (physx::shdfnd *)operator new[]();
    physx::shdfnd::snprintf(v5, (char *)0x100, "Wrong version: physics version is 0x%08x, tried to create 0x%08x", v6, 67174656, a1);
    (*(void (**)(uint64_t, uint64_t, physx::shdfnd *, const char *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 132);
    return 0;
  }
  if (physx::shdfnd::Foundation::mInstance)
  {
    (*(void (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 8, "Foundation object exists already. Only one instance per process can be created.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 165);
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a3 + 16))(a3, 472, "Foundation", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 141);
  physx::shdfnd::Foundation::mInstance = v9;
  if (!v9)
  {
    (*(void (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 32, "Memory allocation for foundation object failed.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 158);
    return 0;
  }
  physx::shdfnd::Foundation::Foundation(v9, a2, a3);
  physx::shdfnd::Foundation::mRefCount = 1;
  v10 = physx::shdfnd::Foundation::mWarnOnceTimestap + 1;
  if (physx::shdfnd::Foundation::mWarnOnceTimestap == -1)
    v10 = 1;
  physx::shdfnd::Foundation::mWarnOnceTimestap = v10;
  return physx::shdfnd::Foundation::mInstance;
}

uint64_t physx::shdfnd::snprintf(physx::shdfnd *this, char *a2, const char *a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  return vsnprintf((char *)this, (size_t)a2, a3, va);
}

uint64_t physx::shdfnd::Foundation::incRefCount(physx::shdfnd::Foundation *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if (!physx::shdfnd::Foundation::mRefCount)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 201, "Foundation: Invalid registration detected.", a6, a7, a8, a9);
  ++physx::shdfnd::Foundation::mRefCount;
  return result;
}

uint64_t physx::shdfnd::Foundation::decRefCount(physx::shdfnd::Foundation *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if (!physx::shdfnd::Foundation::mRefCount)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 216, "Foundation: Invalid deregistration detected.", a6, a7, a8, a9);
  --physx::shdfnd::Foundation::mRefCount;
  return result;
}

uint64_t physx::shdfnd::Foundation::release(physx::shdfnd::Foundation *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t result;

  if (physx::shdfnd::Foundation::mRefCount != 1)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 185, "Foundation destruction failed due to pending module references. Close/release all depending modules first.", a6, a7, a8, a9);
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 32))();
  (*(void (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 56))(physx::shdfnd::Foundation::mInstance);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, physx::shdfnd::Foundation::mInstance);
  physx::shdfnd::Foundation::mInstance = 0;
  physx::shdfnd::Foundation::mRefCount = 0;
  return result;
}

float physx::PxShortestRotation@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float result;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  v7 = a1[2];
  v8 = a2[2];
  v9 = (float)((float)(v4 * v6) + (float)(*a1 * *a2)) + (float)(v7 * v8);
  v10 = -v4;
  if (v9 <= -1.0)
  {
    v14 = fabsf(v3);
    v13 = 0.0;
    v15 = v14 < 0.1;
    v12 = 0.0;
    if (!v15)
    {
      v10 = 0.0;
      v7 = -*a1;
      v12 = a1[1];
    }
  }
  else
  {
    v10 = (float)(v5 * v10) + (float)(v3 * v6);
    v11 = -(float)(v7 * v6);
    v7 = (float)(v8 * (float)-*a1) + (float)(v7 * v5);
    v12 = v11 + (float)(v4 * v8);
    v13 = v9 + 1.0;
  }
  v16 = sqrtf((float)((float)((float)(v7 * v7) + (float)(v12 * v12)) + (float)(v10 * v10)) + (float)(v13 * v13));
  result = v10 / v16;
  *a3 = v12 / v16;
  a3[1] = v7 / v16;
  a3[2] = result;
  a3[3] = v13 / v16;
  return result;
}

unint64_t physx::PxDiagonalize@<X0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  unsigned int v49;
  BOOL v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unint64_t result;
  _DWORD *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  _DWORD v77[9];
  uint64_t v78;
  float v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v75 = a1[1];
  v76 = *a1;
  v3 = a1[3];
  v74 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = 0.0;
  v10 = 24;
  v11 = 1.0;
  v12 = 0.0;
  v13 = 0.0;
  do
  {
    v14 = v12 * (float)(v12 + v12);
    v15 = v9 * (float)(v9 + v9);
    v16 = v12 * (float)(v13 + v13);
    v17 = v9 * (float)(v13 + v13);
    v18 = v11 * (float)(v13 + v13);
    v19 = v9 * (float)(v12 + v12);
    v20 = v11 * (float)(v12 + v12);
    v21 = v11 * (float)(v9 + v9);
    v22 = (float)(1.0 - v14) - v15;
    v23 = v21 + v16;
    v24 = v17 - v20;
    v25 = v16 - v21;
    v26 = 1.0 - (float)(v13 * (float)(v13 + v13));
    v27 = v26 - v15;
    v28 = v19 + v18;
    v29 = v20 + v17;
    v30 = v19 - v18;
    v31 = v26 - v14;
    v32 = (float)(v76 * (float)(v20 + v17)) + (float)(v75 * (float)(v19 - v18));
    v33 = (float)(v74 * v24) + (float)((float)(v76 * v22) + (float)(v75 * v23));
    v34 = (float)(v74 * (float)(v19 + v18)) + (float)((float)(v76 * v25) + (float)(v75 * v27));
    v35 = v32 + (float)(v74 * v31);
    v36 = (float)(v5 * v24) + (float)((float)(v3 * v22) + (float)(v4 * v23));
    v37 = (float)(v5 * v28) + (float)((float)(v3 * v25) + (float)(v4 * v27));
    v38 = (float)((float)(v3 * v29) + (float)(v4 * v30)) + (float)(v5 * v31);
    v39 = (float)(v8 * v24) + (float)((float)(v6 * v22) + (float)(v7 * v23));
    v40 = (float)(v8 * v28) + (float)((float)(v6 * v25) + (float)(v7 * v27));
    v41 = (float)((float)(v6 * v29) + (float)(v7 * v30)) + (float)(v8 * v31);
    v42 = (float)(v24 * v39) + (float)((float)(v22 * v33) + (float)(v23 * v36));
    v43 = (float)(v24 * v40) + (float)((float)(v22 * v34) + (float)(v23 * v37));
    v44 = (float)(v24 * v41) + (float)((float)(v22 * v35) + (float)(v23 * v38));
    v45 = (float)(v28 * v41) + (float)((float)(v25 * v35) + (float)(v27 * v38));
    v46 = fabsf(v45);
    v47 = fabsf(v44);
    v48 = fabsf(v43);
    if (v47 > v48)
      v49 = 1;
    else
      v49 = 2;
    v50 = v46 <= v48 || v46 <= v47;
    v51 = (float)(v28 * v39) + (float)((float)(v25 * v33) + (float)(v27 * v36));
    v52 = (float)(v28 * v40) + (float)((float)(v25 * v34) + (float)(v27 * v37));
    v53 = (float)(v31 * v39) + (float)((float)(v29 * v33) + (float)(v30 * v36));
    v54 = (float)(v31 * v40) + (float)((float)(v29 * v34) + (float)(v30 * v37));
    v55 = (float)(v31 * v41) + (float)((float)(v29 * v35) + (float)(v30 * v38));
    *(float *)&v77[1] = v43;
    *(float *)&v77[2] = v44;
    *(float *)&v77[3] = v51;
    *(float *)&v77[4] = v52;
    *(float *)&v77[5] = v45;
    *(float *)&v77[6] = v53;
    *(float *)v77 = v42;
    *(float *)&v77[7] = v54;
    *(float *)&v77[8] = v55;
    if (!v50)
      v49 = 0;
    result = ((_BYTE)v49 + (v49 >> 1) + 1) & 3;
    v57 = &v77[3 * result];
    v58 = *(float *)&v57[((_BYTE)v49
                        + (v49 >> 1)
                        + 1
                        + (((v49 + (v49 >> 1) + 1) & 3) >> 1)
                        + 1) & 3];
    if (v58 == 0.0)
      break;
    v59 = *(float *)&v57[result];
    result = (unint64_t)&v77[3
                                  * (((_BYTE)v49
                                    + (v49 >> 1)
                                    + 1
                                    + (((v49 + (v49 >> 1) + 1) & 3) >> 1)
                                    + 1) & 3)];
    v60 = *(float *)(result
                   + 4
                   * (((_BYTE)v49
                     + (v49 >> 1)
                     + 1
                     + (((v49 + (v49 >> 1) + 1) & 3) >> 1)
                     + 1) & 3));
    v61 = v58 + v58;
    if (vabds_f32(v59, v60) > (float)(fabsf(v61) * 2000000.0))
      break;
    v62 = (float)(v59 - v60) / v61;
    v63 = fabsf(v62);
    if (v63 <= 1000.0)
    {
      v66 = sqrtf((float)(v62 * v62) + 1.0);
      v67 = 1.0 / sqrtf((float)((float)(1.0 / (float)(v63 + v66)) * (float)(1.0 / (float)(v63 + v66))) + 1.0);
      v68 = sqrtf((float)(1.0 - v67) * 0.5);
      if (v62 < 0.0)
        v68 = -v68;
      v65 = sqrtf((float)(v67 + 1.0) * 0.5);
      v79 = 0.0;
      v78 = 0;
      *((float *)&v78 + v49) = v68;
    }
    else
    {
      v64 = v62 * 4.0;
      v65 = 1.0;
      v79 = 0.0;
      v78 = 0;
      *((float *)&v78 + v49) = 1.0 / v64;
    }
    v69 = (float)((float)((float)(v13 * v65) + (float)(v11 * *(float *)&v78)) + (float)(v12 * v79))
        - (float)(*((float *)&v78 + 1) * v9);
    v70 = (float)((float)((float)(v12 * v65) + (float)(v11 * *((float *)&v78 + 1))) + (float)(v9 * *(float *)&v78))
        - (float)(v79 * v13);
    v71 = (float)((float)((float)(v9 * v65) + (float)(v11 * v79)) + (float)(v13 * *((float *)&v78 + 1)))
        - (float)(*(float *)&v78 * v12);
    v72 = (float)((float)((float)(v11 * v65) - (float)(v13 * *(float *)&v78)) - (float)(v12 * *((float *)&v78 + 1)))
        - (float)(v9 * v79);
    v73 = sqrtf((float)((float)((float)(v70 * v70) + (float)(v69 * v69)) + (float)(v71 * v71)) + (float)(v72 * v72));
    v13 = v69 / v73;
    v12 = v70 / v73;
    v9 = v71 / v73;
    v11 = v72 / v73;
    --v10;
  }
  while (v10);
  *a2 = v13;
  a2[1] = v12;
  a2[2] = v9;
  a2[3] = v11;
  *a3 = v42;
  a3[1] = v52;
  a3[2] = v55;
  return result;
}

float *physx::shdfnd::optimizeBoundingBox@<X0>(float *result@<X0>, float *a2@<X8>)
{
  float v2;
  float v3;
  float v4;
  _BOOL4 v5;
  int v6;
  unsigned int v7;
  float v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float32x2_t *v16;
  float32_t v17;
  float32_t v18;
  float32_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t *v25;
  float *v26;
  float *v27;
  float v28;
  float v29;
  float32x2_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  v2 = (float)((float)(result[1] * result[1]) + (float)(*result * *result)) + (float)(result[2] * result[2]);
  v3 = (float)((float)(result[4] * result[4]) + (float)(result[3] * result[3])) + (float)(result[5] * result[5]);
  v4 = (float)((float)(result[7] * result[7]) + (float)(result[6] * result[6])) + (float)(result[8] * result[8]);
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  v5 = v3 > v2;
  if (v3 <= v2)
    v6 = 3;
  else
    v6 = 2;
  if (v4 <= a2[v3 <= v2])
    v7 = v3 <= v2;
  else
    v7 = 2;
  v8 = a2[v3 > v2];
  v9 = a2[v7];
  if (v8 >= v9)
    v10 = v7;
  else
    v10 = v5;
  if (v8 >= v9)
    v11 = v5;
  else
    v11 = v7;
  v12 = v6 - v7;
  v13 = a2[v11];
  v14 = 1.0 / sqrtf(v13);
  v15 = v13 * v14;
  v16 = (float32x2_t *)&result[3 * v11];
  v17 = v16->f32[0] * v14;
  v18 = v14 * v16->f32[1];
  v16->f32[0] = v17;
  v16->f32[1] = v18;
  v19 = v14 * v16[1].f32[0];
  v16[1].f32[0] = v19;
  v20 = &result[3 * v10];
  v21 = *v20;
  v22 = v20[1];
  v23 = v20[2];
  v24 = (float)((float)(v18 * v22) + (float)(v17 * *v20)) + (float)(v19 * v23);
  v25 = (float32x2_t *)&result[3 * v12];
  v26 = (float *)v25 + 1;
  v27 = (float *)&v25[1];
  v28 = (float)((float)(v18 * v25->f32[1]) + (float)(v17 * v25->f32[0])) + (float)(v19 * v25[1].f32[0]);
  a2[v11] = v15 + (float)(fabsf(v24) + fabsf(v28));
  *v20 = v21 - (float)(v17 * v24);
  v20[1] = v22 - (float)(v18 * v24);
  v20[2] = v23 - (float)(v19 * v24);
  v29 = v28 * v16[1].f32[0];
  v30 = vsub_f32(*v25, vmul_n_f32(*v16, v28));
  *v25 = v30;
  v31 = v25[1].f32[0] - v29;
  v25[1].f32[0] = v31;
  v32 = *v20;
  v33 = v20[1];
  v34 = v20[2];
  v35 = sqrtf((float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v34 * v34));
  if (v35 <= 0.0)
  {
    v36 = v30.f32[1];
  }
  else
  {
    v32 = v32 * (float)(1.0 / v35);
    *v20 = v32;
    v33 = v33 * (float)(1.0 / v35);
    v20[1] = v33;
    v34 = v34 * (float)(1.0 / v35);
    v20[2] = v34;
    v30.i32[0] = v25->i32[0];
    v36 = *v26;
    v31 = *v27;
  }
  v37 = (float)((float)(v36 * v33) + (float)(v32 * v30.f32[0])) + (float)(v34 * v31);
  a2[v10] = v35 + fabsf(v37);
  v38 = v33 * v37;
  v39 = v30.f32[0] - (float)(v32 * v37);
  v25->f32[0] = v39;
  v40 = v36 - v38;
  *v26 = v40;
  v41 = v31 - (float)(v34 * v37);
  *v27 = v41;
  v42 = sqrtf((float)((float)(v40 * v40) + (float)(v39 * v39)) + (float)(v41 * v41));
  if (v42 > 0.0)
  {
    v25->f32[0] = v39 * (float)(1.0 / v42);
    *v26 = v40 * (float)(1.0 / v42);
    *v27 = v41 * (float)(1.0 / v42);
  }
  a2[v12] = v42;
  return result;
}

void physx::shdfnd::slerp(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>, float a4@<S0>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;

  v6 = *a1;
  v7 = a1[1];
  v8 = a2[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = a2[2];
  v12 = a2[3];
  v13 = (float)((float)((float)(v7 * v8) + (float)(*a1 * *a2)) + (float)(v9 * v11)) + (float)(v10 * v12);
  if (v13 >= 0.0)
    v14 = (float)((float)((float)(v7 * v8) + (float)(*a1 * *a2)) + (float)(v9 * v11)) + (float)(v10 * v12);
  else
    v14 = -v13;
  v15 = 1.0 - (float)(v14 * v14);
  if (v15 >= 1.0e-16)
  {
    v16 = sqrtf(v15);
    v24 = *a2;
    v25 = a2[1];
    v26 = a2[2];
    v23 = atan2f(v16, v14);
    v17 = 1.0 / v16;
    v18 = sinf((float)(1.0 - a4) * v23);
    v19 = a4;
    v20 = v17 * v18;
    v21 = v17 * sinf(v23 * v19);
    v22 = -v21;
    if (v13 >= 0.0)
      v22 = v21;
    v6 = (float)(v6 * v20) + (float)(v24 * v22);
    v7 = (float)(v7 * v20) + (float)(v25 * v22);
    v9 = (float)(v9 * v20) + (float)(v26 * v22);
    v10 = (float)(v10 * v20) + (float)(v12 * v22);
  }
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v9;
  a3[3] = v10;
}

uint64_t physx::shdfnd::Foundation::getErrorCallback(physx::shdfnd::Foundation *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t physx::shdfnd::Foundation::setErrorLevel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 364) = a2;
  return result;
}

uint64_t physx::shdfnd::Foundation::getErrorLevel(physx::shdfnd::Foundation *this)
{
  return *((unsigned int *)this + 91);
}

uint64_t physx::shdfnd::Foundation::getAllocatorCallback(physx::shdfnd::Foundation *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t physx::shdfnd::Foundation::getReportAllocationNames(physx::shdfnd::Foundation *this)
{
  return *((unsigned __int8 *)this + 360);
}

uint64_t physx::shdfnd::Foundation::setReportAllocationNames(uint64_t this, char a2)
{
  *(_BYTE *)(this + 360) = a2;
  return this;
}

void physx::shdfnd::BroadcastingAllocator::~BroadcastingAllocator(physx::shdfnd::BroadcastingAllocator *this)
{
  *(_QWORD *)this = &off_24ED92D18;
  *((_DWORD *)this + 38) = 0;
  physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t physx::shdfnd::BroadcastingAllocator::allocate(physx::shdfnd::BroadcastingAllocator *this, uint64_t a2, const char *a3, const char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (***v13)(_QWORD, uint64_t, const char *, const char *, uint64_t, uint64_t);

  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
  v11 = v10;
  if (v10)
  {
    if ((v10 & 0xF) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, const char *, const char *, uint64_t))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21), 64, "Allocations must be 16-byte aligned.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsBroadcast.h", 205);
      return 0;
    }
    else if (*((_DWORD *)this + 38))
    {
      v12 = 0;
      do
      {
        v13 = *(void (****)(_QWORD, uint64_t, const char *, const char *, uint64_t, uint64_t))(*((_QWORD *)this + 18) + 8 * v12);
        (**v13)(v13, a2, a3, a4, a5, v11);
        ++v12;
      }
      while (v12 < *((unsigned int *)this + 38));
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, const char *, const char *, uint64_t))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21), 64, "User allocator returned NULL.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsBroadcast.h", 199);
  }
  return v11;
}

uint64_t physx::shdfnd::BroadcastingAllocator::deallocate(physx::shdfnd::BroadcastingAllocator *this, void *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (*((_DWORD *)this + 38))
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * v4);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v5 + 8))(v5, a2);
      ++v4;
    }
    while (v4 < *((unsigned int *)this + 38));
  }
  return (*(uint64_t (**)(_QWORD, void *))(**((_QWORD **)this + 20) + 24))(*((_QWORD *)this + 20), a2);
}

void physx::shdfnd::BroadcastingErrorCallback::~BroadcastingErrorCallback(physx::shdfnd::BroadcastingErrorCallback *this)
{
  *(_QWORD *)this = &off_24ED92DA8;
  *((_DWORD *)this + 38) = 0;
  physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24ED92E10;
  v2 = *(_DWORD *)(a1 + 156);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3 == a1 + 8)
    {
      *(_BYTE *)(a1 + 136) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return a1;
}

uint64_t physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24ED92D78;
  v2 = *(_DWORD *)(a1 + 156);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3 == a1 + 8)
    {
      *(_BYTE *)(a1 + 136) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return a1;
}

uint64_t physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = result;
  if (a2)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a2, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v4 = (_QWORD *)result;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(uint64_t **)v3;
  if ((_DWORD)v5)
  {
    v7 = (unint64_t)&v4[v5];
    v8 = v4;
    do
    {
      v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

pthread_mutex_t *physx::shdfnd::MutexImpl::MutexImpl(pthread_mutex_t *this)
{
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutexattr_setprotocol(&v3, 1);
  pthread_mutex_init(this, &v3);
  pthread_mutexattr_destroy(&v3);
  return this;
}

physx::shdfnd::ReadWriteLock *physx::shdfnd::ReadWriteLock::ReadWriteLock(physx::shdfnd::ReadWriteLock *this)
{
  pthread_mutex_t **v2;
  uint64_t v3;
  const char *v4;
  pthread_mutex_t *v5;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    v2 = (pthread_mutex_t **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/unix/PsUnixMutex.cpp", 202);
    *(_QWORD *)this = v2;
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    else
      v4 = "<allocation names disabled>";
    v5 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24) + 16))(v3 + 24, 72, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *v2 = v5;
    physx::shdfnd::MutexImpl::MutexImpl(v5);
    *(_DWORD *)(*(_QWORD *)this + 8) = 0;
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void physx::shdfnd::ReadWriteLock::~ReadWriteLock(pthread_mutex_t ***this)
{
  pthread_mutex_t **v2;

  v2 = *this;
  if (v2)
  {
    physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(v2);
    if (*this)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

pthread_mutex_t ***physx::shdfnd::ReadWriteLock::lockReader(pthread_mutex_t ***this, int a2)
{
  pthread_mutex_t **v2;
  pthread_mutex_t ***v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *this;
  if (*this)
  {
    if (a2)
    {
      v3 = this;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        this = (pthread_mutex_t ***)pthread_mutex_lock(*v2);
        v2 = *v3;
      }
      v4 = (unsigned int *)(v2 + 1);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return (pthread_mutex_t ***)pthread_mutex_unlock(**v3);
    }
    else
    {
      v6 = (unsigned int *)(v2 + 1);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  return this;
}

uint64_t *physx::shdfnd::ReadWriteLock::lockWriter(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *this;
  if (*this)
  {
    v2 = this;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      this = (uint64_t *)pthread_mutex_lock(*(pthread_mutex_t **)v1);
      v1 = *v2;
    }
    while (*(_DWORD *)(v1 + 8))
      ;
  }
  return this;
}

_QWORD *physx::shdfnd::SListImpl::pop(physx::shdfnd::SListImpl *this)
{
  pthread_mutex_t *v2;
  _QWORD *v3;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this)
    *(_QWORD *)this = *v3;
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t physx::shdfnd::SyncImpl::set(physx::shdfnd::SyncImpl *this)
{
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (!*((_BYTE *)this + 116))
  {
    *((_BYTE *)this + 116) = 1;
    ++*((_DWORD *)this + 28);
    pthread_cond_broadcast((pthread_cond_t *)((char *)this + 64));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

BOOL physx::shdfnd::SyncImpl::wait(physx::shdfnd::SyncImpl *this, unsigned int a2)
{
  int v4;
  _BOOL8 v5;
  unsigned int v6;
  timeval v8;
  timespec v9;

  pthread_mutex_lock((pthread_mutex_t *)this);
  v4 = *((_DWORD *)this + 28);
  if (!*((_BYTE *)this + 116))
  {
    if (a2 == -1)
    {
      while (!*((_BYTE *)this + 116)
           && v4 == *((_DWORD *)this + 28)
           && !pthread_cond_wait((pthread_cond_t *)((char *)this + 64), (pthread_mutex_t *)this))
        ;
    }
    else
    {
      gettimeofday(&v8, 0);
      v6 = v8.tv_usec + 1000 * (a2 % 0x3E8);
      v9.tv_sec = v8.tv_sec + a2 / 0x3E8uLL + v6 / 0xF4240uLL;
      v9.tv_nsec = 1000 * (v6 % 0xF4240);
      while (!*((_BYTE *)this + 116)
           && v4 == *((_DWORD *)this + 28)
           && !pthread_cond_timedwait((pthread_cond_t *)((char *)this + 64), (pthread_mutex_t *)this, &v9))
        ;
    }
  }
  if (*((_BYTE *)this + 116))
    v5 = 1;
  else
    v5 = v4 != *((_DWORD *)this + 28);
  pthread_mutex_unlock((pthread_mutex_t *)this);
  return v5;
}

_QWORD *physx::shdfnd::TempAllocator::allocate(physx::shdfnd::TempAllocator *this, uint64_t a2, const char *a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  if (!a2)
    return 0;
  v6 = 31 - __clz(a2 + 15);
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  if (v7 > 0x10)
  {
    v17 = a2 + 16;
    if (v17)
      v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", a3, a4);
    else
      v15 = 0;
  }
  else
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0
      || (v9 = physx::shdfnd::Foundation::mInstance, physx::shdfnd::g_isLockingEnabled))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(physx::shdfnd::Foundation::mInstance + 456));
      v9 = physx::shdfnd::Foundation::mInstance;
    }
    v10 = *(_QWORD *)(v9 + 440);
    v11 = v10 + 8 * v7;
    v12 = (_QWORD **)(v11 - 64);
    v13 = v11 - 40;
    if (v13 >= v10 + 8 * (unint64_t)*(unsigned int *)(v9 + 448))
      v13 = v10 + 8 * *(unsigned int *)(v9 + 448);
    if ((unint64_t)v12 >= v13)
    {
LABEL_15:
      v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, (2 << v7), "NonTrackedAlloc", a3, a4);
    }
    else
    {
      v14 = v10 + 8 * v7 - 64;
      while (1)
      {
        v15 = *v12;
        if (*v12)
          break;
        ++v12;
        v14 += 8;
        if ((unint64_t)v12 >= v13)
          goto LABEL_15;
      }
      *v12 = (_QWORD *)*v15;
      LODWORD(v7) = ((unint64_t)(v14 - *(_QWORD *)(physx::shdfnd::Foundation::mInstance + 440)) >> 3) + 8;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 456));
  }
  *(_DWORD *)v15 = v7;
  return v15 + 2;
}

uint64_t physx::shdfnd::TempAllocator::deallocate(physx::shdfnd::TempAllocator *this, char *a2)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (a2)
  {
    v2 = a2 - 16;
    v3 = *((_DWORD *)a2 - 4);
    v4 = physx::shdfnd::Foundation::mInstance;
    if (v3 < 0x11)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0
        || (v6 = physx::shdfnd::Foundation::mInstance, physx::shdfnd::g_isLockingEnabled))
      {
        result = pthread_mutex_lock(*(pthread_mutex_t **)(physx::shdfnd::Foundation::mInstance + 456));
        v6 = physx::shdfnd::Foundation::mInstance;
      }
      v7 = v3 - 8;
      if (*(_DWORD *)(v6 + 448) <= v3 - 8)
      {
        v8 = 0;
        result = physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::resize(v6 + 440, v3 - 7, &v8);
        v6 = physx::shdfnd::Foundation::mInstance;
      }
      *(_QWORD *)v2 = *(_QWORD *)(*(_QWORD *)(v6 + 440) + 8 * v7);
      *(_QWORD *)(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 440) + 8 * v7) = v2;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 456));
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a2 - 16);
    }
  }
  return result;
}

uint64_t physx::NpActor::exportExtraData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  pthread_mutex_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  v5 = a1[1];
  if (!v5)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *a1);
  v6 = *(unsigned int *)(v5 + 80);
  if ((_DWORD)v6)
  {
    v7 = v4;
    v8 = 0;
    v9 = 0;
    do
    {
      v9 += (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, *(_QWORD *)(*(_QWORD *)(a1[1] + 72) + v8 + 8)) ^ 1;
      v8 += 16;
    }
    while (16 * v6 != v8);
    if (v9)
    {
      v10 = physx::NpFactory::acquireConnectorArray((pthread_mutex_t **)physx::NpFactory::mInstance);
      v5 = (uint64_t)v10;
      if (v9 < v6)
      {
        if ((*(_DWORD *)&v10[1].__opaque[12] & 0x7FFFFFFFu) < v6 - v9)
          physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::recreate((uint64_t)v10, v6 - v9);
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)(a1[1] + 72) + v11;
          if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, *(_QWORD *)(v12 + 8)))
          {
            v13 = *(unsigned int *)(v5 + 80);
            if ((*(_DWORD *)(v5 + 84) & 0x7FFFFFFFu) <= v13)
            {
              physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::growAndPushBack(v5, v12);
            }
            else
            {
              v14 = *(_QWORD *)(v5 + 72) + 16 * v13;
              *(_BYTE *)v14 = *(_BYTE *)v12;
              *(_QWORD *)(v14 + 8) = *(_QWORD *)(v12 + 8);
              *(_DWORD *)(v5 + 80) = v13 + 1;
            }
          }
          v11 += 16;
          --v6;
        }
        while (v6);
      }
      v15 = 0;
      goto LABEL_18;
    }
    v5 = a1[1];
  }
  v15 = 1;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5, 88);
  if (!*(_BYTE *)(v5 + 64) && *(_QWORD *)(v5 + 72) && *(_DWORD *)(v5 + 80) | *(_DWORD *)(v5 + 84) & 0x7FFFFFFF)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((v15 & 1) == 0)
    physx::NpFactory::releaseConnectorArray(physx::NpFactory::mInstance, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *a1);
}

_QWORD *physx::NpActor::importExtraData(_QWORD *result, uint64_t a2)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a2 + 8);
  if (result[1])
  {
    v3 = ((unint64_t)v2 + 15) & 0xFFFFFFFFFFFFFFF0;
    v2 = (unsigned int *)(v3 + 88);
    result[1] = v3;
    v4 = *(_QWORD *)(v3 + 72);
    if (v4)
      *(_DWORD *)(v3 + 84) |= 0x80000000;
    if (*(_BYTE *)(v3 + 64))
    {
      *(_QWORD *)(v3 + 72) = v3;
      if (*(_DWORD *)(v3 + 80))
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!*(_DWORD *)(v3 + 80))
    {
LABEL_10:
      result[1] = 0;
      goto LABEL_11;
    }
    if (v4)
    {
      v5 = *(_DWORD *)(v3 + 84) & 0x7FFFFFFF;
      *(_QWORD *)(v3 + 72) = v2;
      v2 += 4 * v5;
    }
  }
LABEL_11:
  v8 = *v2;
  v6 = v2 + 1;
  v7 = v8;
  *(_QWORD *)(a2 + 8) = v6;
  if (!v8)
    v6 = 0;
  *result = v6;
  *(_QWORD *)(a2 + 8) += v7;
  return result;
}

uint64_t physx::NpActor::resolveReferences(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 80);
    if ((_DWORD)v3)
    {
      v5 = result;
      v6 = 0;
      v7 = 16 * v3;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 72) + v6;
        if (*(_QWORD *)(v8 + 8))
        {
          result = (**a2)(a2, 0x80000000);
          *(_QWORD *)(v8 + 8) = result;
        }
        v6 += 16;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t physx::NpActor::releaseConstraints(uint64_t this, physx::PxRigidActor *a2, int8x8_t a3)
{
  uint64_t v3;
  int v4;
  physx::PxRigidActor *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(this + 8);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 80);
    if (v4)
    {
      v5 = a2;
      v6 = this;
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 72);
        if (*(_BYTE *)(v8 + 16 * v7))
        {
          ++v7;
        }
        else
        {
          v9 = *(_QWORD *)(v8 + 16 * v7 + 8);
          if (*(physx::PxRigidActor **)(v9 + 16) == v5)
            v10 = 16;
          else
            v10 = 24;
          *(_QWORD *)(v9 + v10) = 0;
          if (((*(_DWORD *)(v9 + 40) >> 30) - 1) <= 1)
          {
            a2 = (physx::PxRigidActor *)(v9 + 32);
            v11 = *(_QWORD *)(v9 + 32);
            if (v11)
            {
              physx::Scb::Scene::removeConstraint(*(_QWORD *)(v9 + 32), a2, a3);
              v12 = v9;
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v11 + 9072, &v12);
            }
          }
          this = physx::NpActor::removeConnector(v6, a2, v7);
        }
        --v4;
      }
      while (v4);
    }
  }
  return this;
}

uint64_t physx::NpActor::removeConnector(uint64_t this, physx::PxActor *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(_DWORD *)(v3 + 80) - 1;
  *(_DWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v4 + 16 * a3) = *(_OWORD *)(v4 + 16 * v5);
  v6 = *(_QWORD *)(this + 8);
  if (!*(_DWORD *)(v6 + 80))
  {
    v7 = this;
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
      this = physx::NpFactory::releaseConnectorArray(physx::NpFactory::mInstance, v6);
    *(_QWORD *)(v7 + 8) = 0;
  }
  return this;
}

BOOL physx::NpAggregate::removeActorAndReinsert(physx::NpAggregate *this, physx::PxActor *a2, physx::PxActor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  physx::PxActor **v11;
  unint64_t v12;
  physx::PxActor *v13;
  _BOOL8 v14;
  int v15;
  _QWORD *v16;
  char *v17;
  int8x8_t v18;
  char v20;

  v8 = *((unsigned int *)this + 16);
  if (!(_DWORD)v8)
  {
LABEL_7:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 204, "PxAggregate: can't remove actor, actor doesn't belong to aggregate", a6, a7, a8, v20);
    return 0;
  }
  v9 = (int)a3;
  v11 = (physx::PxActor **)*((_QWORD *)this + 9);
  if (*v11 != a2)
  {
    v12 = 0;
    while (v8 - 1 != v12)
    {
      v13 = v11[++v12];
      if (v13 == a2)
      {
        v14 = v12 < v8;
        goto LABEL_9;
      }
    }
    goto LABEL_7;
  }
  v12 = 0;
  v14 = 1;
LABEL_9:
  v15 = v8 - 1;
  *((_DWORD *)this + 16) = v15;
  v11[v12] = v11[v15];
  v16 = (_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a2 + 4);
  v17 = (char *)a2 + v16[18];
  physx::NpActor::setAggregate((uint64_t)a2 + *v16, 0, a3);
  physx::Scb::Aggregate::removeActor((_QWORD *)this + 2, (uint64_t)v17, v9, v18);
  return v14;
}

uint64_t physx::NpActor::addConnector(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;

  v5 = result;
  v6 = *(pthread_mutex_t **)(result + 8);
  if (!v6)
  {
    result = (uint64_t)physx::NpFactory::acquireConnectorArray((pthread_mutex_t **)physx::NpFactory::mInstance);
    v6 = (pthread_mutex_t *)result;
    *(_QWORD *)(v5 + 8) = result;
  }
  v7 = *(_DWORD *)&v6[1].__opaque[12];
  if (v7 < 0 && *(_DWORD *)&v6[1].__opaque[8] == (v7 & 0x7FFFFFFF))
  {
    v6 = physx::NpFactory::acquireConnectorArray((pthread_mutex_t **)physx::NpFactory::mInstance);
    v8 = *(_QWORD *)(v5 + 8);
    v9 = *(_QWORD *)(v8 + 72);
    result = physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::resizeUninitialized((uint64_t)v6, *(_DWORD *)(v8 + 80));
    v10 = *(unsigned int *)&v6[1].__opaque[8];
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)v6[1].__opaque;
      v12 = v11 + 16 * v10;
      do
      {
        *(_BYTE *)v11 = *(_BYTE *)v9;
        *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
        v11 += 16;
        v9 += 16;
      }
      while (v11 < v12);
    }
    v13 = *(_QWORD *)(v5 + 8);
    v14 = *(_DWORD *)(v13 + 84);
    if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0)
    {
      v15 = *(_QWORD *)(v13 + 72);
      if (v15 == v13)
      {
        *(_BYTE *)(v13 + 64) = 0;
      }
      else if (v15)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    *(_QWORD *)(v5 + 8) = v6;
    v7 = *(_DWORD *)&v6[1].__opaque[12];
  }
  v19[0] = a2;
  v20 = a3;
  v16 = v7 & 0x7FFFFFFF;
  v17 = *(unsigned int *)&v6[1].__opaque[8];
  if (v16 <= v17)
    return physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::growAndPushBack((uint64_t)v6, (uint64_t)v19);
  v18 = *(_QWORD *)v6[1].__opaque + 16 * v17;
  *(_BYTE *)v18 = a2;
  *(_QWORD *)(v18 + 8) = a3;
  *(_DWORD *)&v6[1].__opaque[8] = v17 + 1;
  return result;
}

uint64_t physx::NpActor::removeConnector(uint64_t result, physx::PxActor *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = (_QWORD *)(*(_QWORD *)(v4 + 72) + 8);
      while (*((unsigned __int8 *)v8 - 8) != a3 || *v8 != a4)
      {
        ++v7;
        v8 += 2;
        if (v5 == v7)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      LODWORD(v7) = -1;
    }
    return physx::NpActor::removeConnector(result, a2, v7);
  }
  return result;
}

uint64_t physx::NpActor::setAggregate(uint64_t this, physx::NpAggregate *a2, physx::PxActor *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v3 = *(_QWORD *)(this + 8);
  if (!v3)
    return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
  v4 = *(unsigned int *)(v3 + 80);
  if (!(_DWORD)v4)
    return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
  v5 = 0;
  for (i = (_QWORD *)(*(_QWORD *)(v3 + 72) + 8); *((_BYTE *)i - 8) != 1; i += 2)
  {
    if (v4 == ++v5)
      return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
  }
  if (!*i)
    return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
  if (!a2)
    return physx::NpActor::removeConnector(this, 0, v5);
  *i = a2;
  return this;
}

int32x2_t *physx::NpActor::removeConstraintsFromScene(int32x2_t *this)
{
  int32x2_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  physx::Scb::Base *v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;

  v1 = this[1];
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)&v1 + 72);
    v3 = *(_DWORD *)(*(_QWORD *)&v1 + 80);
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  v4 = 0;
LABEL_5:
  if (v4 <= v3)
    v5 = v3;
  else
    v5 = v4;
  v6 = (unsigned __int8 *)(v2 + 16 * v4);
  v7 = v5 - v4 + 1;
  while (--v7)
  {
    v8 = v6 + 16;
    ++v4;
    v9 = *v6;
    v6 += 16;
    if (!v9)
    {
      v10 = *((_QWORD *)v8 - 1);
      if (!v10)
        return this;
      if (((*(_DWORD *)(v10 + 40) >> 30) - 1) <= 1)
      {
        v11 = (physx::Scb::Base *)(v10 + 32);
        v12 = *(_QWORD *)(v10 + 32);
        if (v12)
        {
          v14 = *((_QWORD *)v8 - 1);
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v12 + 9072, &v14);
          this = physx::Scb::Scene::removeConstraint(v12, v11, v13);
        }
      }
      goto LABEL_5;
    }
  }
  return this;
}

int32x2_t *physx::NpActor::addConstraintsToSceneInternal(int32x2_t *this)
{
  int32x2_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int8x8_t v11;
  int32x2_t *v12;
  _QWORD *v13;
  int8x8_t v14;
  uint64_t v15;
  char v16;

  v1 = this[1];
  if (v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(*(_QWORD *)&v1 + 72);
    v4 = *(_DWORD *)(*(_QWORD *)&v1 + 80);
LABEL_3:
    if (v2 <= v4)
      v5 = v4;
    else
      v5 = v2;
    v6 = (unsigned __int8 *)(v3 + 16 * v2);
    v7 = v5 - v2 + 1;
    while (--v7)
    {
      v8 = v6 + 16;
      ++v2;
      v9 = *v6;
      v6 += 16;
      if (!v9)
      {
        v10 = *((_QWORD *)v8 - 1);
        if (!v10)
          return this;
        (*(void (**)(_QWORD))(*(_QWORD *)v10 + 72))(*((_QWORD *)v8 - 1));
        this = (int32x2_t *)physx::NpConstraint::getSceneFromActors((physx::NpConstraint *)v10);
        if (this)
        {
          v12 = this;
          v15 = v10;
          v16 = 0;
          v13 = (_QWORD *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 1136, &v15, &v16, v11);
          if (!v16)
            *v13 = v15;
          this = physx::Scb::Scene::add<physx::Scb::Constraint>(v12 + 2, (physx::Scb::Base *)(v10 + 32), v12 + 996, v14);
        }
        goto LABEL_3;
      }
    }
  }
  return this;
}

float32x4_t physx::NpActor::getGlobalPose(float32x4_t *a1, uint64_t a2, uint64_t a3, float32x4_t a4)
{
  int8x8_t *v4;
  unsigned int v5;
  int32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int8x8_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  int8x8_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t result;
  int v28;
  __n128 *v29;
  unsigned __int8 *v30;
  float32x4_t *v31;
  unsigned __int32 *v32;
  unsigned __int32 *v33;
  unsigned __int32 *v34;
  int8x8_t *v35;
  int32x4_t *v36;
  float32x4_t v37;
  int32x4_t *v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int8x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x8_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;

  v4 = *(int8x8_t **)(a2 + 16);
  if ((*(_BYTE *)(a2 + 8) & 4) == 0)
    v4 = (int8x8_t *)(a2 + 64);
  v5 = *(_DWORD *)(a3 + 8);
  if ((v5 & 0xF000000) == 0x5000000)
  {
    v6 = (int32x4_t *)(*(_QWORD *)(a3 + 16) + 176);
    if ((v5 & 0x40) == 0)
      v6 = (int32x4_t *)(a3 + 48);
    v7.i64[0] = v6[1].i64[0];
    v7.i64[1] = v6[1].u32[2];
    *(int8x8_t *)v8.f32 = v4[2];
    v8.i64[1] = v4[3].u32[0];
    v9 = (float32x2_t)vdupq_laneq_s32(*v6, 3).u64[0];
    v10 = *(float32x4_t *)v6;
    v10.i32[3] = 0;
    v11 = *(float32x4_t *)v4->i8;
    v11.i32[3] = 0;
    v12 = vmulq_f32(v10, v11);
    v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
    v13 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    v14 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v12.i64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    v15 = (float32x2_t)vext_s8(*(int8x8_t *)v6->i8, (int8x8_t)v14, 4uLL);
    v16 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v6->i8, (float32x2_t)vext_s8(*v4, *(int8x8_t *)v12.f32, 4uLL)), v15, (float32x2_t)*v4);
    *(int8x8_t *)v12.f32 = vext_s8(v16, (int8x8_t)vmls_f32(vmul_f32(v14, (float32x2_t)*v4), *(float32x2_t *)v6->i8, *(float32x2_t *)v12.f32), 4uLL);
    v12.i64[1] = v16.u32[0];
    v17 = vmlaq_laneq_f32(v12, v11, *(float32x4_t *)v6, 3);
    v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
    *(float32x2_t *)v11.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v6, *(int8x16_t *)v6, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v4->i8, *(int8x16_t *)v4->i8, 8uLL)), v13);
    v18 = vmulq_n_f32(v8, vmla_f32((float32x2_t)0xBF000000BF000000, v9, v9).f32[0]);
    v18.i32[3] = 0;
    v19 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v6->i8, (float32x2_t)vext_s8(*(int8x8_t *)v8.f32, (int8x8_t)v19, 4uLL)), v15, *(float32x2_t *)v8.f32);
    *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v14, *(float32x2_t *)v8.f32), *(float32x2_t *)v6->i8, v19), 4uLL);
    v21.i64[1] = v20.u32[0];
    v22 = vmlaq_laneq_f32(v18, v21, *(float32x4_t *)v6, 3);
    v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
    v23 = vmulq_f32(v10, v8);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    v24 = vmlaq_n_f32(v22, v10, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
    v25 = vmlaq_laneq_f32(v17, v10, *(float32x4_t *)v4->i8, 3);
    v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
    v26.i64[0] = 0x4000000040000000;
    v26.i64[1] = 0x4000000040000000;
    result = vmlaq_f32(v7, v26, v24);
    a1[1].i64[0] = result.i64[0];
    a1[1].i32[2] = result.i32[2];
    v25.i32[3] = v11.i32[1];
    *a1 = v25;
    return result;
  }
  v28 = *(_DWORD *)(a3 + 284);
  v29 = *(__n128 **)(a3 + 16);
  v30 = &v29[21].n128_u8[12];
  if ((v28 & 0x4000) == 0)
    v30 = (unsigned __int8 *)(a3 + 76);
  if ((~*v30 & 3) == 0)
  {
    if ((v28 & 0x8000) != 0)
    {
      a4 = (float32x4_t)v29[17];
      v71 = a4;
      v33 = (unsigned __int32 *)&v29[18];
      v32 = &v29[18].n128_u32[1];
      v34 = &v29[18].n128_u32[2];
      goto LABEL_18;
    }
    if (v5 >> 30 != 3)
    {
      v31 = *(float32x4_t **)(a3 + 208);
      if (v31)
      {
        if (v31[1].i8[15] == 1 && v31[1].i8[12])
        {
          v32 = &v31[1].u32[1];
          a4 = *v31;
          v71 = *v31;
          v33 = (unsigned __int32 *)&v31[1];
          v34 = &v31[1].u32[2];
LABEL_18:
          v35 = (int8x8_t *)&v71;
          goto LABEL_19;
        }
      }
    }
  }
  v35 = (int8x8_t *)(a3 + 224);
  v33 = (unsigned __int32 *)(a3 + 240);
  v32 = (unsigned __int32 *)(a3 + 244);
  v34 = (unsigned __int32 *)(a3 + 248);
LABEL_19:
  v36 = (int32x4_t *)&v29[14];
  if ((v28 & 0x400) != 0)
    v38 = v36;
  else
    v38 = (int32x4_t *)(a3 + 80);
  v39.i64[0] = v38[1].i64[0];
  v39.i64[1] = v38[1].u32[2];
  a4.i32[0] = *v33;
  a4.i32[1] = *v32;
  a4.i32[2] = *v34;
  v40 = (float32x2_t)vdupq_laneq_s32(*v38, 3).u64[0];
  v41 = *(float32x4_t *)v38;
  v41.i32[3] = 0;
  v42 = *(float32x4_t *)v4->i8;
  v42.i32[3] = 0;
  v43 = vmulq_f32(v42, v41);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  *(float32x2_t *)v43.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v4->i8, 3), v40);
  v44 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
  v45 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  v46 = (float32x2_t)vext_s8(*(int8x8_t *)v38->i8, (int8x8_t)v45, 4uLL);
  v47 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v4, v46), (float32x2_t)vext_s8(*v4, (int8x8_t)v44, 4uLL), *(float32x2_t *)v38->i8);
  *(int8x8_t *)v48.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(v44, *(float32x2_t *)v38->i8), (float32x2_t)*v4, v45), 4uLL);
  v48.i64[1] = v47.u32[0];
  v49 = vmlaq_laneq_f32(v48, v42, *(float32x4_t *)v38, 3);
  v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
  v50 = vmlsq_laneq_f32(v49, v41, *(float32x4_t *)v4->i8, 3);
  v51 = *(float32x4_t *)v35->i8;
  v51.i32[3] = 0;
  v52 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  v53 = (float32x2_t)vext_s8(*v35, (int8x8_t)v52, 4uLL);
  v54 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v35, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL)), v53, *(float32x2_t *)v50.f32);
  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
  v37.i64[1] = v4[3].u32[0];
  *(int8x8_t *)v37.f32 = v4[2];
  v55 = vsubq_f32(v37, v39);
  v56 = vmulq_n_f32(v55, vmla_f32((float32x2_t)0xBF000000BF000000, v40, v40).f32[0]);
  v56.i32[3] = 0;
  v57 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, v46), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL), *(float32x2_t *)v38->i8);
  *(int8x8_t *)v58.f32 = vext_s8(v57, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v38->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL)), *(float32x2_t *)v55.f32, v45), 4uLL);
  v58.i64[1] = v57.u32[0];
  v59 = vmlaq_laneq_f32(v56, v58, *(float32x4_t *)v38, 3);
  v59.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u32[0];
  v60 = vmulq_f32(v41, v55);
  v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
  v61 = vmlaq_n_f32(v59, v41, vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).f32[0]);
  v60.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
  *(float32x2_t *)v41.f32 = vadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
  v61.i64[1] = v60.u32[0];
  v62 = vaddq_f32(v61, v61);
  v58.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v35->i8, 3).u64[0];
  v63 = vmulq_f32(v51, v50);
  v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
  v64 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v35->i8, *(int8x16_t *)v35->i8, 8uLL), *(float32x2_t *)v43.f32), vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32));
  *(int8x8_t *)v63.f32 = vext_s8(v54, (int8x8_t)vmls_f32(vmul_f32(v52, *(float32x2_t *)v50.f32), (float32x2_t)*v35, *(float32x2_t *)&v50.u32[2]), 4uLL);
  v63.i64[1] = v54.u32[0];
  v65 = vmlaq_laneq_f32(v63, v50, *(float32x4_t *)v35->i8, 3);
  v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
  v66 = vmulq_n_f32(v62, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0]);
  v66.i32[3] = 0;
  *(float32x2_t *)v60.f32 = vadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
  *(float32x2_t *)v58.f32 = vmls_f32(vmul_f32((float32x2_t)*v35, (float32x2_t)vext_s8(*(int8x8_t *)v41.f32, *(int8x8_t *)v60.f32, 4uLL)), v53, *(float32x2_t *)v41.f32);
  *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)vmls_f32(vmul_f32(v52, *(float32x2_t *)v41.f32), (float32x2_t)*v35, *(float32x2_t *)v60.f32), 4uLL);
  v60.i64[1] = v58.u32[0];
  v67 = vmlaq_laneq_f32(v66, v60, *(float32x4_t *)v35->i8, 3);
  v67.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
  v68 = vmulq_f32(v51, v62);
  v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
  v69 = vmlaq_n_f32(v67, v51, vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32).f32[0]);
  v70 = vmlaq_n_f32(v65, v51, v43.f32[0]);
  v69.i64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u32[0];
  v43.i64[0] = 0x4000000040000000;
  v43.i64[1] = 0x4000000040000000;
  result = vmlaq_f32(a4, v43, v69);
  a1[1].i64[0] = result.i64[0];
  a1[1].i32[2] = result.i32[2];
  v70.i32[3] = v64.i32[1];
  *a1 = v70;
  return result;
}

physx::NpAggregate *physx::NpAggregate::NpAggregate(physx::NpAggregate *this, unsigned int a2, char a3)
{
  uint64_t v4;

  *((_DWORD *)this + 2) = 196618;
  *(_QWORD *)this = off_24ED92E38;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = this;
  *((_DWORD *)this + 12) = -1;
  *((_DWORD *)this + 13) = a2;
  *((_BYTE *)this + 56) = a3;
  *((_DWORD *)this + 6) = 150994944;
  *((_DWORD *)this + 16) = 0;
  if (a2)
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 60);
  else
    v4 = 0;
  *((_QWORD *)this + 9) = v4;
  return this;
}

void physx::NpAggregate::~NpAggregate(physx::NpAggregate *this)
{
  *(_QWORD *)this = off_24ED92E38;
  physx::NpFactory::onAggregateRelease(physx::NpFactory::mInstance, this);
  if ((*((_WORD *)this + 5) & 1) != 0)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v2;

  physx::NpAggregate::~NpAggregate(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpAggregate *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpAggregate::release(physx::NpAggregate *this)
{
  int8x8_t v2;
  unint64_t v3;
  uint64_t v4;
  physx::PxActor *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int8x8_t v10;
  uint64_t v11;
  physx::NpAggregate *v13;

  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, 0, 1);
  if (*((_DWORD *)this + 16))
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4) == 2)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8 * v3) + 384);
        *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6) + 136) = 0;
      }
      v7 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v3);
      v8 = (_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(v7 + 8);
      v9 = v7 + v8[18];
      physx::NpActor::setAggregate(v7 + *v8, 0, v5);
      physx::Scb::Aggregate::removeActor((_QWORD *)this + 2, v9, 1, v10);
      ++v3;
    }
    while (v3 < *((unsigned int *)this + 16));
  }
  if (((*((_DWORD *)this + 6) >> 30) - 1) <= 1)
  {
    v11 = *((_QWORD *)this + 2);
    if (v11)
    {
      physx::Scb::Scene::removeAggregate(*((int32x2_t **)this + 2), (physx::NpAggregate *)((char *)this + 16), v2);
      v13 = this;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v11 + 9200, (uint64_t *)&v13);
    }
  }
  return physx::Scb::Base::destroy((uint64_t)this + 16);
}

void physx::NpAggregate::addActorInternal(physx::NpAggregate *this, int32x2_t *a2, int32x2_t *a3, const physx::PxBVHStructure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;

  if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a2 + 48))(a2) == 2)
  {
    if (!(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 56))(a2))
    {
      v14 = (uint64_t)a2[48];
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14))
      {
        v15 = 0;
        v16 = (char *)this + 16;
        do
        {
          v24 = 0;
          *(double *)&v17 = (*(double (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v14 + 160))(v14, &v24, 1, v15);
          physx::Scb::Aggregate::addActor((uint64_t)v16, v24 + 96, v17);
          v15 = (v15 + 1);
        }
        while (v15 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14));
      }
      physx::NpScene::addArticulationInternal(a3, v14);
    }
  }
  else
  {
    physx::Scb::Aggregate::addActor((uint64_t)this + 16, (uint64_t)a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + a2[1].u16[0] + 18), v13);
    physx::NpScene::addActorInternal(a3, a2, a4, v23, v18, v19, v20, v21, v22, a9);
  }
}

uint64_t physx::NpAggregate::addActor(physx::NpAggregate *this, int32x2_t *a2, const physx::PxBVHStructure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  physx::PxActor *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  char v25;

  if (*((_DWORD *)this + 16) == *((_DWORD *)this + 13))
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxAggregate: can't add actor to aggregate, max number of actors reached";
    v10 = 146;
LABEL_9:
    physx::shdfnd::Foundation::error(v8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", v10, v9, a6, a7, a8, v25);
    return 0;
  }
  if ((*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 144))(a2))
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxAggregate: can't add actor to aggregate, actor already belongs to an aggregate";
    v10 = 152;
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 56))(a2))
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxAggregate: can't add actor to aggregate, actor already belongs to a scene";
    v10 = 158;
    goto LABEL_9;
  }
  if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a2 + 48))(a2) == 2)
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxAggregate: can't add articulation link to aggregate, only whole articulations can be added";
    v10 = 164;
    goto LABEL_9;
  }
  physx::NpActor::setAggregate((uint64_t)a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + a2[1].u16[0]), this, v14);
  v20 = *((_QWORD *)this + 9);
  v21 = *((unsigned int *)this + 16);
  *((_DWORD *)this + 16) = v21 + 1;
  *(_QWORD *)(v20 + 8 * v21) = a2;
  if (((*((_DWORD *)this + 6) >> 30) - 1) <= 1 && (v22 = *((_QWORD *)this + 2)) != 0)
  {
    physx::NpAggregate::addActorInternal(this, a2, (int32x2_t *)(v22 - 16), a3, v16, v17, v18, v19, v25);
  }
  else if (a3)
  {
    v23 = (unsigned int *)((char *)a3 + 24);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    physx::NpActor::addConnector((uint64_t)a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + a2[1].u16[0]), 3, (uint64_t)a3);
  }
  return 1;
}

BOOL physx::NpAggregate::removeActor(physx::NpAggregate *this, physx::PxActor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  physx::PxActor *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;

  if ((*(unsigned int (**)(physx::PxActor *))(*(_QWORD *)a2 + 48))(a2) == 2)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 215, "PxAggregate: can't remove articulation link, only whole articulations can be removed", v6, v7, v8, v16);
    return 0;
  }
  else
  {
    if (((*((_DWORD *)this + 6) >> 30) - 1) > 1 || !*((_QWORD *)this + 2))
    {
      v10 = (char *)a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a2 + 4));
      v17 = 0;
      if (physx::NpActor::getConnectors<physx::Gu::BVHStructure>((uint64_t)v10, 3, (uint64_t)&v17, 1u, 0))
      {
        physx::NpActor::removeConnector((uint64_t)v10, v11, 3, v17);
        v12 = v17;
        v13 = (unsigned int *)(v17 + 24);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 16) + 16))(v12 + 16);
      }
    }
    return physx::NpAggregate::removeActorAndReinsert(this, a2, (physx::PxActor *)1, v4, v5, v6, v7, v8);
  }
}

unint64_t physx::NpActor::getConnectors<physx::Gu::BVHStructure>(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5 || !*(_DWORD *)(v5 + 80))
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(_QWORD *)(v5 + 72);
    if (*(unsigned __int8 *)(v10 + v6) != a2 || v8 >= a4)
    {
      v12 = v9;
    }
    else
    {
      v12 = (v9 + 1);
      if (v9 >= a5)
      {
        *(_QWORD *)(a3 + 8 * v8++) = *(_QWORD *)(v10 + v6 + 8);
        v5 = *(_QWORD *)(a1 + 8);
      }
    }
    ++v7;
    v6 += 16;
    v9 = v12;
  }
  while (v7 < *(unsigned int *)(v5 + 80));
  return v8;
}

uint64_t physx::NpAggregate::addArticulation(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  physx::PxActor *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  char v22;

  v4 = *(_DWORD *)(a1 + 64);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2) + v4 > *(_DWORD *)(a1 + 52))
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxAggregate: can't add articulation links, max number of actors reached";
    v10 = 249;
LABEL_7:
    physx::shdfnd::Foundation::error(v8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", v10, v9, v5, v6, v7, v22);
    return 0;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2))
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxAggregate: can't add articulation to aggregate, articulation already belongs to an aggregate";
    v10 = 255;
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2))
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxAggregate: can't add articulation to aggregate, articulation already belongs to a scene";
    v10 = 261;
    goto LABEL_7;
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  *(_QWORD *)(v13 + 136) = a1;
  if (*(_DWORD *)(v13 + 128))
  {
    v15 = v13;
    v16 = 0;
    v17 = *(_QWORD *)(v13 + 120);
    do
    {
      v18 = *(_QWORD *)(v17 + 8 * v16);
      physx::NpActor::setAggregate(v18 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(v18 + 8)), (physx::NpAggregate *)a1, v14);
      v19 = *(_QWORD *)(a1 + 72);
      v20 = *(unsigned int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v20 + 1;
      *(_QWORD *)(v19 + 8 * v20) = v18;
      physx::Scb::Aggregate::addActor(a1 + 16, v18 + 96, v21);
      ++v16;
    }
    while (v16 < *(unsigned int *)(v15 + 128));
  }
  if (((*(_DWORD *)(a1 + 24) >> 30) - 1) <= 1)
  {
    if (*v12)
      physx::NpScene::addArticulationInternal((int32x2_t *)(*v12 - 16), a2);
  }
  return 1;
}

uint64_t physx::NpAggregate::removeArticulationAndReinsert(uint64_t a1, uint64_t a2, int a3)
{
  char v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  physx::PxActor *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  if (*(_DWORD *)(a1 + 64))
  {
    v6 = 0;
    v7 = 0;
    v8 = (_QWORD *)(a1 + 16);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) == 2
        && (v11 = *(_QWORD *)(a1 + 72), v12 = *(_QWORD *)(v11 + 8 * v7), *(_QWORD *)(v12 + 384) == a2))
      {
        v13 = *(_DWORD *)(a1 + 64) - 1;
        *(_DWORD *)(a1 + 64) = v13;
        *(_QWORD *)(v11 + 8 * v7) = *(_QWORD *)(v11 + 8 * v13);
        v14 = (_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(v12 + 8);
        v15 = v12 + v14[18];
        physx::NpActor::setAggregate(v12 + *v14, 0, v10);
        physx::Scb::Aggregate::removeActor(v8, v15, a3, v16);
        v6 = 1;
      }
      else
      {
        ++v7;
      }
    }
    while (v7 < *(unsigned int *)(a1 + 64));
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2) + 136) = 0;
  if ((v6 & 1) == 0)
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 310, "PxAggregate: can't remove articulation, articulation doesn't belong to aggregate", v17, v18, v19, v21);
  return v6 & 1;
}

uint64_t physx::NpAggregate::removeArticulation(uint64_t a1, uint64_t a2)
{
  return physx::NpAggregate::removeArticulationAndReinsert(a1, a2, 1);
}

uint64_t physx::NpAggregate::getNbActors(physx::NpAggregate *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t physx::NpAggregate::getMaxNbActors(physx::NpAggregate *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t physx::NpAggregate::getActors(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (*(_DWORD *)(a1 + 64) - a4) & ~((int)(*(_DWORD *)(a1 + 64) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpAggregate::getScene(physx::NpAggregate *this)
{
  uint64_t v1;

  if (((*((_DWORD *)this + 6) >> 30) - 1) > 1)
    return 0;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    return v1 - 16;
  else
    return 0;
}

uint64_t physx::NpAggregate::getSelfCollision(physx::NpAggregate *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t physx::NpAggregate::exportExtraData(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)(result + 72))
  {
    v3 = result;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 72), (8 * *(_DWORD *)(v3 + 64)));
  }
  return result;
}

uint64_t physx::NpAggregate::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  BOOL v6;

  if (*(_DWORD *)(result + 64))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(unsigned __int16 **)(*(_QWORD *)(v3 + 72) + 8 * v4);
      if (v5)
        v6 = v5[4] == 13;
      else
        v6 = 0;
      if (v6)
        v5 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 496))(*(_QWORD *)(*(_QWORD *)(v3 + 72) + 8 * v4));
      result = (*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2, v5);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 64));
  }
  return result;
}

_QWORD *physx::NpArticulationReducedCoordinate::setArticulationFlags(_QWORD *result, char *a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  char v6;
  int v7;
  uint64_t v8;

  v4 = result;
  v5 = (physx::Scb::Base *)(result + 3);
  v6 = *a2;
  *((_BYTE *)result + 101) = v6;
  v7 = *((_DWORD *)result + 8) >> 30;
  if (v7 == 2)
  {
    result = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
  }
  else if (v7 == 3)
  {
    result = *(_QWORD **)v5;
LABEL_5:
    result = physx::Scb::Scene::scheduleForUpdate(result, v5, a3);
    *((_DWORD *)v4 + 8) |= 0x80000u;
    return result;
  }
  *((_BYTE *)v4 + 88) = v6;
  v8 = v4[6];
  if (v8)
  {
    if (*(_DWORD *)(v8 + 32))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 16) + 159) = v6 & 1;
  }
  return result;
}

_QWORD *physx::NpArticulationReducedCoordinate::setArticulationFlag(_QWORD *result, char a2, int a3, int8x8_t a4)
{
  _QWORD *v5;
  physx::Scb::Base *v6;
  char v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;

  v5 = result;
  v6 = (physx::Scb::Base *)(result + 3);
  v7 = *((_BYTE *)result + 101);
  v8 = v7 | a2;
  v9 = v7 & ~a2;
  if (a3)
    v9 = v8;
  *((_BYTE *)result + 101) = v9;
  v10 = *((_DWORD *)result + 8) >> 30;
  if (v10 == 2)
  {
    result = *(_QWORD **)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 7689))
      goto LABEL_7;
  }
  else if (v10 == 3)
  {
    result = *(_QWORD **)v6;
LABEL_7:
    result = physx::Scb::Scene::scheduleForUpdate(result, v6, a4);
    *((_DWORD *)v5 + 8) |= 0x80000u;
    return result;
  }
  *((_BYTE *)v5 + 88) = v9;
  v11 = v5[6];
  if (v11)
  {
    if (*(_DWORD *)(v11 + 32))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 16) + 159) = v9 & 1;
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getArticulationFlags@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(this + 101);
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::getDofs(physx::NpArticulationReducedCoordinate *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 6);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 56))(*v1);
  else
    return 0;
}

_QWORD *physx::NpArticulationReducedCoordinate::createCache(physx::Sc::ArticulationSim **this)
{
  _QWORD *result;

  result = physx::Sc::ArticulationSim::createCache(this[6]);
  *((_DWORD *)result + 28) = *((_DWORD *)this + 44);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getCacheDataSize(physx::NpArticulationReducedCoordinate *this)
{
  return physx::Sc::ArticulationCore::getCacheDataSize((physx::NpArticulationReducedCoordinate *)((char *)this + 48));
}

void physx::NpArticulationReducedCoordinate::zeroCache(uint64_t a1, void **a2)
{
  physx::Sc::ArticulationCore::zeroCache((_DWORD **)(a1 + 48), a2);
}

_QWORD *physx::NpArticulationReducedCoordinate::applyCache(uint64_t a1, uint64_t a2, char *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  physx::Scb::Base *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _QWORD *v44;
  int8x8_t v45;
  int v46;
  _QWORD *v47;
  _DWORD v48[2];
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 7508))
    return (_QWORD *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationReducedCoordinate.cpp", 141, "NpArticulation::applyCache() not allowed while simulation is running.", v13, v14, v15, a9);
  v18 = *a3;
  v19 = *(_QWORD **)(a1 + 48);
  if (v19)
  {
    LOBYTE(v48[0]) = *a3;
    physx::Sc::ArticulationSim::applyCache(v19, a2, (char *)v48);
    v18 = *a3;
  }
  if ((v18 & 4) != 0)
  {
    v20 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = 8 * v20;
      while (1)
      {
        v23 = *(_DWORD **)(*(_QWORD *)(a1 + 144) + v21);
        v24 = (physx::Scb::Base *)(v23 + 24);
        LODWORD(v16) = v23[36];
        v25 = v23[37];
        v48[0] = LODWORD(v16);
        v48[1] = v25;
        v27 = v23[39];
        v49 = v23[38];
        v26 = v49;
        v50 = v27;
        v29 = v23[41];
        v51 = v23[40];
        v28 = v51;
        v52 = v29;
        v53 = v23[42];
        v30 = v53;
        v23[80] = LODWORD(v16);
        v23[81] = v25;
        v23[82] = v26;
        v23[83] = v27;
        v23[84] = v28;
        v23[85] = v29;
        v23[86] = v30;
        v31 = v23[26] >> 30;
        if (v31 == 2)
        {
          v32 = *(_QWORD **)v24;
          if (!*(_BYTE *)(*(_QWORD *)v24 + 7689))
          {
LABEL_13:
            physx::Sc::BodyCore::setBody2World((uint64_t)(v23 + 32), (uint64_t)v48);
            goto LABEL_14;
          }
        }
        else
        {
          if (v31 != 3)
            goto LABEL_13;
          v32 = *(_QWORD **)v24;
        }
        v23[95] &= ~0x200000u;
        physx::Scb::Scene::scheduleForUpdate(v32, v24, *(int8x8_t *)&v16);
        v23[95] |= 0x100000u;
LABEL_14:
        v21 += 8;
        if (v22 == v21)
        {
          v18 = *a3;
          break;
        }
      }
    }
  }
  if ((v18 & 5) != 0)
  {
    v33 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = 8 * v33;
      do
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + v34);
        v37 = v36 + 96;
        LODWORD(v16) = *(_DWORD *)(v36 + 208);
        v38 = *(_DWORD *)(v36 + 212);
        v39 = *(_DWORD *)(v36 + 216);
        v40 = *(_DWORD *)(v36 + 224);
        v41 = *(_DWORD *)(v36 + 228);
        v42 = *(_DWORD *)(v36 + 232);
        *(_DWORD *)(v36 + 348) = LODWORD(v16);
        *(_DWORD *)(v36 + 352) = v38;
        *(_DWORD *)(v36 + 356) = v39;
        v43 = *(_DWORD *)(v36 + 104) >> 30;
        if (v43 == 2)
        {
          v44 = *(_QWORD **)v37;
          if (*(_BYTE *)(*(_QWORD *)v37 + 7689))
            goto LABEL_23;
        }
        else if (v43 == 3)
        {
          v44 = *(_QWORD **)v37;
LABEL_23:
          physx::Scb::Scene::scheduleForUpdate(v44, (physx::Scb::Base *)(v36 + 96), *(int8x8_t *)&v16);
          *(_DWORD *)(v36 + 380) |= 0x400000u;
          goto LABEL_25;
        }
        *(_DWORD *)(v36 + 208) = LODWORD(v16);
        *(_DWORD *)(v36 + 212) = v38;
        *(_DWORD *)(v36 + 216) = v39;
        updateBodySim((uint64_t *)(v36 + 128));
LABEL_25:
        *(_DWORD *)(v36 + 360) = v40;
        *(_DWORD *)(v36 + 364) = v41;
        *(_DWORD *)(v36 + 368) = v42;
        v46 = *(_DWORD *)(v36 + 104) >> 30;
        if (v46 == 2)
        {
          v47 = *(_QWORD **)v37;
          if (!*(_BYTE *)(*(_QWORD *)v37 + 7689))
          {
LABEL_30:
            *(_DWORD *)(v36 + 224) = v40;
            *(_DWORD *)(v36 + 228) = v41;
            *(_DWORD *)(v36 + 232) = v42;
            updateBodySim((uint64_t *)(v36 + 128));
            goto LABEL_31;
          }
        }
        else
        {
          if (v46 != 3)
            goto LABEL_30;
          v47 = *(_QWORD **)v37;
        }
        physx::Scb::Scene::scheduleForUpdate(v47, (physx::Scb::Base *)(v36 + 96), v45);
        *(_DWORD *)(v36 + 380) |= 0x800000u;
LABEL_31:
        v34 += 8;
      }
      while (v35 != v34);
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal((_QWORD *)(a1 + 24), 0, a4, v16);
}

_QWORD *physx::PxArticulationImpl::wakeUpInternal(_QWORD *this, int a2, int a3, double a4)
{
  _DWORD *v4;
  unsigned int v5;
  int v6;
  float v7;
  unint64_t v8;
  float *v9;
  physx::Scb::Base *v10;
  int v11;
  _QWORD *v12;
  unsigned int v13;

  v4 = this;
  v5 = *((_DWORD *)this + 2);
  LODWORD(a4) = *(_DWORD *)(*this + 8176);
  v6 = a2 | a3;
  if (!*((_BYTE *)this + 76))
    v6 = 0;
  if ((a3 & (*((float *)this + 18) < *(float *)&a4)) != 0)
    v7 = *(float *)(*this + 8176);
  else
    v7 = *((float *)this + 18);
  if ((a3 & (*((float *)this + 18) < *(float *)&a4)) == 0 && !v6)
    return this;
  if (!*((_DWORD *)this + 32))
    goto LABEL_18;
  v8 = 0;
  do
  {
    v9 = *(float **)(*((_QWORD *)v4 + 15) + 8 * v8);
    v10 = (physx::Scb::Base *)(v9 + 24);
    v11 = *((_DWORD *)v9 + 26) >> 30;
    if (v11 == 2)
    {
      v12 = *(_QWORD **)v10;
      if (*(_BYTE *)(*(_QWORD *)v10 + 7689))
        goto LABEL_14;
    }
    else if (v11 == 3)
    {
      v12 = *(_QWORD **)v10;
LABEL_14:
      v9[94] = 0.0;
      v9[93] = v7;
      this = physx::Scb::Scene::scheduleForUpdate(v12, v10, *(int8x8_t *)&a4);
      *((_DWORD *)v9 + 95) = (_DWORD)v9[95] & 0xF8FFFFFF | 0x5000000;
      goto LABEL_16;
    }
    v9[94] = 0.0;
    v9[93] = v7;
    this = (_QWORD *)physx::Sc::BodyCore::setWakeCounter((uint64_t)(v9 + 32), v7, 1);
LABEL_16:
    ++v8;
  }
  while (v8 < v4[32]);
  v5 = v4[2];
LABEL_18:
  *((float *)v4 + 18) = v7;
  *((_BYTE *)v4 + 76) = 0;
  v13 = v5 >> 30;
  if (v13 == 2)
  {
    this = *(_QWORD **)v4;
    if (!*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_23;
LABEL_22:
    this = physx::Scb::Scene::scheduleForUpdate(this, (physx::Scb::Base *)v4, *(int8x8_t *)&a4);
    v4[2] = v4[2] & 0xFFFFFC7F | 0x280;
  }
  else
  {
    if (v13 == 3)
    {
      this = *(_QWORD **)v4;
      goto LABEL_22;
    }
LABEL_23:
    *((float *)v4 + 15) = v7;
  }
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::copyInternalStateToCache(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = *(uint64_t **)(result + 48);
  if (v3)
  {
    v4 = *v3;
    v5 = *a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 80))(v4, a2, &v5);
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::releaseCache(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 48))
    return physx::Sc::ArticulationSim::releaseCache(a1, a2);
  return a1;
}

uint64_t physx::NpArticulationReducedCoordinate::packJointData(uint64_t this, const float *a2, float *a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(this + 48);
  if (v3)
    return (*(uint64_t (**)(_QWORD, const float *, float *))(*(_QWORD *)*v3 + 88))(*v3, a2, a3);
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::unpackJointData(uint64_t this, const float *a2, float *a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(this + 48);
  if (v3)
    return (*(uint64_t (**)(_QWORD, const float *, float *))(*(_QWORD *)*v3 + 96))(*v3, a2, a3);
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::commonInit(uint64_t this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(this + 48);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 104))(*v1);
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::computeGeneralizedGravityForce(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 48);
  if (v2)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v2 + 112))(*v2, v2[1] + 1952, a2);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeCoriolisAndCentrifugalForce(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 48);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 120))(*v1);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeGeneralizedExternalForce(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 48);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 128))(*v1);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeJointAcceleration(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 48);
  if (v2)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v2 + 136))(*v2, v2[1] + 1952, a2);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeJointForce(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 48);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 144))(*v1);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeDenseJacobian(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 48);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 160))(*v1);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeCoefficientMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = result;
  if (*(_DWORD *)(result + 192))
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 184) + 8 * v4);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 208))(v5);
      result = physx::NpConstraint::updateConstants(v6);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 192));
  }
  v7 = *(_QWORD **)(v3 + 48);
  if (v7)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v7 + 168))(*v7, v7[10], *((unsigned int *)v7 + 22), a2);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeLambda(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) > 1 || !*(_QWORD *)(a1 + 24))
  {
    v16 = physx::shdfnd::Foundation::mInstance;
    v17 = "PxArticulation::computeLambda : object must be in a scened!";
    v18 = 300;
LABEL_7:
    physx::shdfnd::Foundation::error(v16, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationReducedCoordinate.cpp", v18, v17, a6, a7, a8, v19);
    return 0;
  }
  if (*(_DWORD *)(a2 + 112) != *(_DWORD *)(a1 + 176))
  {
    v16 = physx::shdfnd::Foundation::mInstance;
    v17 = "PxArticulation::computeLambda : cache is invalid, articulation configuration has changed!";
    v18 = 308;
    goto LABEL_7;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v13 + 488))(&v19);
  v14 = *(_QWORD **)(a1 + 48);
  if (v14)
  {
    v21 = v19;
    v22 = v20;
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)*v14 + 176))(*v14, v14[10], *((unsigned int *)v14 + 22), a2, a3, a4, &v21, a5);
  }
  return 0;
}

uint64_t physx::NpArticulationReducedCoordinate::computeGeneralizedMassMatrix(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 48);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 192))(*v1);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::addLoopJoint(physx::NpArticulationReducedCoordinate *this, physx::PxJoint *a2)
{
  char *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t result;
  physx::PxJoint *v11;

  v11 = a2;
  v4 = (char *)this + 184;
  v5 = *((_DWORD *)this + 48);
  v6 = *((_DWORD *)this + 49) & 0x7FFFFFFF;
  v7 = (2 * v5) | 1;
  if (v5 >= v6 && v6 < v7)
  {
    physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::recreate((uint64_t)this + 184, v7);
    v5 = *((_DWORD *)this + 48);
    v6 = *((_DWORD *)this + 49) & 0x7FFFFFFF;
  }
  if (v6 <= v5)
  {
    physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::growAndPushBack((uint64_t)v4, &v11);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v5) = a2;
    *((_DWORD *)this + 48) = v5 + 1;
  }
  v9 = *((_QWORD *)this + 6);
  result = (*(uint64_t (**)(physx::PxJoint *))(*(_QWORD *)a2 + 208))(a2);
  if (v9)
    return physx::Sc::ArticulationSim::addLoopConstraint(v9, *(_QWORD *)(result + 136));
  return result;
}

__n128 physx::NpArticulationReducedCoordinate::removeLoopJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  unsigned int v13;

  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2)
  {
    v3 = 0;
    while (*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v3) != a2)
    {
      if (v2 == ++v3)
        goto LABEL_9;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v2)
  {
    v4 = *(_QWORD *)(a1 + 184);
    v5 = v2 - 1;
    *(_DWORD *)(a1 + 192) = v5;
    *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
  }
LABEL_9:
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
  v9 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = (_QWORD *)(*(_QWORD *)(v6 + 80) + 8); *i != *(_QWORD *)(v7 + 136); i += 2)
    {
      if (v9 == ++v10)
        return result;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v10 != (_DWORD)v9)
  {
    v12 = *(_QWORD *)(v6 + 80);
    v13 = v9 - 1;
    *(_DWORD *)(v6 + 88) = v13;
    result = *(__n128 *)(v12 + 16 * v13);
    *(__n128 *)(v12 + 16 * v10) = result;
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getNbLoopJoints(physx::NpArticulationReducedCoordinate *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t physx::NpArticulationReducedCoordinate::getLoopJoints(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (*(_DWORD *)(a1 + 192) - a4) & ~((int)(*(_DWORD *)(a1 + 192) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getCoefficientMatrixSize(physx::NpArticulationReducedCoordinate *this)
{
  _DWORD *v1;
  int v2;

  v1 = (_DWORD *)*((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = v1[22];
  return 4 * v2 * (*(unsigned int (**)(_QWORD))(**(_QWORD **)v1 + 56))(*(_QWORD *)v1);
}

unsigned int *physx::NpArticulationReducedCoordinate::teleportRootLink(uint64_t a1, float *a2, int a3, double a4)
{
  return physx::NpArticulationLink::setGlobalPoseInternal(**(_QWORD **)(a1 + 144), a2, a3, a4);
}

unsigned int *physx::NpArticulationLink::setGlobalPoseInternal(uint64_t a1, float *a2, int a3, double a4)
{
  int v7;
  float *v8;
  uint64_t v9;
  physx::Scb::Base *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  _QWORD *v33;
  unsigned int *result;
  _QWORD *v35;
  double v36;
  int8x8_t v37;
  unsigned int *v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  physx::Scb::Base *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  _QWORD *v55;
  _DWORD v56[7];
  _DWORD v57[2];
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;

  v7 = *(_DWORD *)(a1 + 380);
  if ((v7 & 0x400) != 0)
    v8 = (float *)(*(_QWORD *)(a1 + 112) + 224);
  else
    v8 = (float *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  v10 = (physx::Scb::Base *)(a1 + 96);
  v11 = v8[4] + v8[4];
  v12 = v8[5] + v8[5];
  v13 = v8[6] + v8[6];
  v15 = a2[2];
  v14 = a2[3];
  v16 = (float)(v14 * v14) + -0.5;
  v17 = a2[1];
  v18 = (float)((float)(v12 * v17) + (float)(*a2 * v11)) + (float)(v15 * v13);
  v19 = (float)((float)(v14 * (float)((float)(v17 * v13) - (float)(v15 * v12))) + (float)(v11 * v16))
      + (float)(*a2 * v18);
  v20 = (float)((float)(v14 * (float)((float)(v15 * v11) - (float)(*a2 * v13))) + (float)(v12 * v16))
      + (float)(v17 * v18);
  v21 = (float)((float)(v14 * (float)((float)(*a2 * v12) - (float)(v17 * v11))) + (float)(v13 * v16))
      + (float)(v15 * v18);
  v22 = a2[4] + v19;
  v23 = a2[5] + v20;
  *(float *)&a4 = a2[6] + v21;
  v25 = v8[2];
  v24 = v8[3];
  v26 = v8[1];
  v27 = (float)((float)((float)(*a2 * v24) + (float)(v14 * *v8)) + (float)(v17 * v25)) - (float)(v26 * v15);
  v28 = (float)((float)((float)(v17 * v24) + (float)(v14 * v26)) + (float)(v15 * *v8)) - (float)(v25 * *a2);
  v29 = (float)((float)((float)(v15 * v24) + (float)(v14 * v25)) + (float)(*a2 * v26)) - (float)(*v8 * v17);
  v30 = (float)((float)(v14 * v24) - (float)(*a2 * *v8)) - (float)(v17 * v26);
  *(float *)v56 = v27;
  *(float *)&v56[1] = v28;
  v31 = v30 - (float)(v15 * v25);
  *(float *)&v56[2] = v29;
  *(float *)&v56[3] = v31;
  *(float *)&v56[4] = v22;
  *(float *)&v56[5] = v23;
  v56[6] = LODWORD(a4);
  *(float *)(a1 + 320) = v27;
  *(float *)(a1 + 324) = v28;
  *(float *)(a1 + 328) = v29;
  *(float *)(a1 + 332) = v31;
  *(float *)(a1 + 336) = v22;
  *(float *)(a1 + 340) = v23;
  *(_DWORD *)(a1 + 344) = LODWORD(a4);
  v32 = *(_DWORD *)(a1 + 104) >> 30;
  if (v32 == 2)
  {
    v33 = *(_QWORD **)v10;
    if (*(_BYTE *)(*(_QWORD *)v10 + 7689))
    {
LABEL_8:
      *(_DWORD *)(a1 + 380) = v7 & 0xFFDFFFFF;
      result = (unsigned int *)physx::Scb::Scene::scheduleForUpdate(v33, v10, *(int8x8_t *)&a4);
      *(_DWORD *)(a1 + 380) |= 0x100000u;
      if (!v9)
        goto LABEL_13;
      goto LABEL_11;
    }
  }
  else if (v32 == 3)
  {
    v33 = *(_QWORD **)v10;
    goto LABEL_8;
  }
  result = (unsigned int *)physx::Sc::BodyCore::setBody2World(a1 + 128, (uint64_t)v56);
  if (!v9)
    goto LABEL_13;
LABEL_11:
  if (a3)
  {
    v35 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 200))(*(_QWORD *)(a1 + 384));
    physx::PxArticulationImpl::wakeUpInternal(v35, 0, 1, v36);
    goto LABEL_14;
  }
LABEL_13:
  if (!v9)
    return result;
LABEL_14:
  result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 200))(*(_QWORD *)(a1 + 384));
  v38 = result;
  v39 = result[2];
  if (v39 >> 30 == 2)
  {
    result = *(unsigned int **)result;
    if (*(_BYTE *)(*(_QWORD *)v38 + 7689))
      goto LABEL_18;
  }
  else if (v39 >> 30 == 3)
  {
    result = *(unsigned int **)result;
LABEL_18:
    result = (unsigned int *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v38, v37);
    v39 = v38[2] | 0x800;
    v38[2] = v39;
    goto LABEL_21;
  }
  v40 = (_QWORD *)*((_QWORD *)v38 + 3);
  if (v40)
  {
    physx::Sc::ArticulationSim::checkResize(*((_QWORD **)v38 + 3));
    result = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v40 + 200))(*v40);
    v39 = v38[2];
  }
LABEL_21:
  v41 = v39 >> 30;
  if (v41 != 3 && (v41 != 2 || !*(_BYTE *)(*(_QWORD *)v38 + 7689)))
  {
    v42 = v38[32];
    if (v42 >= 2)
    {
      v43 = *((_QWORD *)v38 + 15);
      v44 = v42 - 1;
      v45 = v43 + 8;
      do
      {
        v46 = *(_DWORD **)v45;
        v47 = (physx::Scb::Base *)(*(_QWORD *)v45 + 96);
        v37.i32[0] = *(_DWORD *)(*(_QWORD *)v45 + 144);
        v48 = *(_DWORD *)(*(_QWORD *)v45 + 148);
        v57[0] = v37.i32[0];
        v57[1] = v48;
        v50 = v46[39];
        v58 = v46[38];
        v49 = v58;
        v59 = v50;
        v52 = v46[41];
        v60 = v46[40];
        v51 = v60;
        v61 = v52;
        v62 = v46[42];
        v53 = v62;
        v46[80] = v37.i32[0];
        v46[81] = v48;
        v46[82] = v49;
        v46[83] = v50;
        v46[84] = v51;
        v46[85] = v52;
        v54 = v46[26] >> 30;
        v46[86] = v53;
        if (v54 == 2)
        {
          v55 = *(_QWORD **)v47;
          if (!*(_BYTE *)(*(_QWORD *)v47 + 7689))
          {
LABEL_31:
            result = (unsigned int *)physx::Sc::BodyCore::setBody2World((uint64_t)(v46 + 32), (uint64_t)v57);
            goto LABEL_32;
          }
        }
        else
        {
          if (v54 != 3)
            goto LABEL_31;
          v55 = *(_QWORD **)v47;
        }
        v46[95] &= ~0x200000u;
        result = (unsigned int *)physx::Scb::Scene::scheduleForUpdate(v55, v47, v37);
        v46[95] |= 0x100000u;
LABEL_32:
        v45 += 8;
        --v44;
      }
      while (v44);
    }
  }
  return result;
}

double physx::NpArticulationReducedCoordinate::getLinkVelocity@<D0>(physx::NpArticulationReducedCoordinate *this@<X0>, _OWORD *a2@<X8>)
{
  physx::Sc::ArticulationSim *v2;
  double result;

  v2 = (physx::Sc::ArticulationSim *)*((_QWORD *)this + 6);
  if (v2)
    return physx::Sc::ArticulationSim::getLinkVelocity(v2, a2);
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

double physx::NpArticulationReducedCoordinate::getLinkAcceleration@<D0>(physx::NpArticulationReducedCoordinate *this@<X0>, _OWORD *a2@<X8>)
{
  physx::Sc::ArticulationSim *v2;
  double result;

  v2 = (physx::Sc::ArticulationSim *)*((_QWORD *)this + 6);
  if (v2)
    return physx::Sc::ArticulationSim::getLinkAcceleration(v2, a2);
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

void physx::NpArticulationReducedCoordinate::~NpArticulationReducedCoordinate(physx::NpArticulationReducedCoordinate *this)
{
  int v2;

  *(_QWORD *)this = &off_24ED92ED0;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  v2 = *((_DWORD *)this + 49);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 23) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = &off_24ED93A40;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  physx::PxArticulationImpl::~PxArticulationImpl((physx::NpArticulationReducedCoordinate *)((char *)this + 24));
}

{
  uint64_t v2;

  physx::NpArticulationReducedCoordinate::~NpArticulationReducedCoordinate(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpArticulationReducedCoordinate *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                          + 24)
                                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

_QWORD *physx::NpArticulationReducedCoordinate::createArticulationJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return physx::NpFactory::createNpArticulationJointRC(physx::NpFactory::mInstance, a2, a3, a4, a5);
}

uint64_t physx::NpArticulationReducedCoordinate::releaseArticulationJoint(uint64_t a1, pthread_mutex_t *a2)
{
  return physx::NpFactory::releaseArticulationJointRCToPool((pthread_mutex_t **)physx::NpFactory::mInstance, a2);
}

void physx::NpArticulation::~NpArticulation(physx::NpArticulation *this)
{
  *(_QWORD *)this = &off_24ED930C8;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  *(_QWORD *)this = &off_24ED93C38;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  physx::PxArticulationImpl::~PxArticulationImpl((physx::NpArticulation *)((char *)this + 24));
}

{
  uint64_t v2;

  physx::NpArticulation::~NpArticulation(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpArticulation *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpArticulation::getInternalDriveIterations(physx::NpArticulation *this)
{
  unsigned int *v1;

  if ((*((_BYTE *)this + 32) & 1) != 0)
    v1 = (unsigned int *)*((_QWORD *)this + 5);
  else
    v1 = (unsigned int *)((char *)this + 56);
  return *v1;
}

_QWORD *physx::NpArticulation::setInternalDriveIterations(_QWORD *this, int a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v8;

  v4 = this;
  v5 = (physx::Scb::Base *)(this + 3);
  v6 = *((_DWORD *)this + 8);
  if (v6 >> 30 == 2)
  {
    this = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v4 + 14) = a2;
    return this;
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v5;
LABEL_5:
  v7 = (_DWORD *)v4[5];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    v7 = v8;
    v4[5] = v8;
    this = (_QWORD *)v4[3];
  }
  *v7 = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 8) |= 1u;
  return this;
}

uint64_t physx::NpArticulation::getExternalDriveIterations(physx::NpArticulation *this)
{
  unsigned int *v1;

  if ((*((_BYTE *)this + 32) & 2) != 0)
    v1 = (unsigned int *)(*((_QWORD *)this + 5) + 4);
  else
    v1 = (unsigned int *)((char *)this + 60);
  return *v1;
}

_QWORD *physx::NpArticulation::setExternalDriveIterations(_QWORD *this, int a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this;
  v5 = (physx::Scb::Base *)(this + 3);
  v6 = *((_DWORD *)this + 8);
  if (v6 >> 30 == 2)
  {
    this = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v4 + 15) = a2;
    return this;
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v5;
LABEL_5:
  v7 = v4[5];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    v7 = v8;
    v4[5] = v8;
    this = (_QWORD *)v4[3];
  }
  *(_DWORD *)(v7 + 4) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 8) |= 2u;
  return this;
}

uint64_t physx::NpArticulation::getMaxProjectionIterations(physx::NpArticulation *this)
{
  unsigned int *v1;

  if ((*((_BYTE *)this + 32) & 4) != 0)
    v1 = (unsigned int *)(*((_QWORD *)this + 5) + 8);
  else
    v1 = (unsigned int *)((char *)this + 64);
  return *v1;
}

_QWORD *physx::NpArticulation::setMaxProjectionIterations(_QWORD *this, int a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this;
  v5 = (physx::Scb::Base *)(this + 3);
  v6 = *((_DWORD *)this + 8);
  if (v6 >> 30 == 2)
  {
    this = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v4 + 16) = a2;
    return this;
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v5;
LABEL_5:
  v7 = v4[5];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    v7 = v8;
    v4[5] = v8;
    this = (_QWORD *)v4[3];
  }
  *(_DWORD *)(v7 + 8) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 8) |= 4u;
  return this;
}

float physx::NpArticulation::getSeparationTolerance(physx::NpArticulation *this)
{
  char *v1;

  if ((*((_BYTE *)this + 32) & 8) != 0)
    v1 = (char *)(*((_QWORD *)this + 5) + 12);
  else
    v1 = (char *)this + 72;
  return *(float *)v1;
}

_QWORD *physx::NpArticulation::setSeparationTolerance(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 3);
  v5 = *((_DWORD *)this + 8);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 18) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[5] = v7;
    this = (_QWORD *)v3[3];
  }
  *(_DWORD *)(v6 + 12) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 8) |= 8u;
  return this;
}

unsigned __int16 *physx::NpArticulation::createDriveCache(physx::NpArticulation *this, float a2, unsigned __int16 a3)
{
  unsigned __int16 *result;

  result = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (result)
    return physx::Sc::ArticulationSim::createDriveCache((physx::Sc::ArticulationSim *)result, a2, a3);
  return result;
}

void physx::NpArticulation::updateDriveCache(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3, float a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    physx::Sc::ArticulationSim::updateDriveCache(v4, a2, a3, a4);
}

uint64_t physx::NpArticulation::releaseDriveCache(uint64_t result)
{
  if (*(_QWORD *)(result + 48))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return result;
}

void physx::NpArticulation::applyImpulse(uint64_t a1, double a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  if (*(_BYTE *)(a1 + 100))
    physx::PxArticulationImpl::wakeUp((physx::PxArticulationImpl *)(a1 + 24), a2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    physx::Sc::ArticulationSim::applyImpulse(v3);
  if (*(_DWORD *)(a1 + 152))
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v4);
      v9 = *(_QWORD *)(v5 + 208);
      v10 = *(_DWORD *)(v5 + 216);
      v7 = *(_QWORD *)(v5 + 224);
      v8 = *(_DWORD *)(v5 + 232);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 320))(v5, &v9, 1);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v4);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v6 + 336))(v6, &v7, 1);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a1 + 152));
  }
}

_QWORD *physx::PxArticulationImpl::wakeUp(physx::PxArticulationImpl *this, double a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  physx::Scb::Base *v7;
  int v8;
  _QWORD *v9;
  _QWORD *result;
  unsigned int v11;

  v3 = *((_DWORD *)this + 2);
  if ((v3 >> 30) - 1 > 1)
  {
    v4 = 0;
  }
  else if (*(_QWORD *)this)
  {
    v4 = *(_QWORD *)this - 16;
  }
  else
  {
    v4 = 0;
  }
  if (*((_DWORD *)this + 32))
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_DWORD **)(*((_QWORD *)this + 15) + 8 * v5);
      v7 = (physx::Scb::Base *)(v6 + 24);
      LODWORD(a2) = *(_DWORD *)(v4 + 0x2000);
      v8 = v6[26] >> 30;
      if (v8 == 2)
      {
        v9 = *(_QWORD **)v7;
        if (!*(_BYTE *)(*(_QWORD *)v7 + 7689))
        {
LABEL_13:
          v6[94] = 0;
          v6[93] = LODWORD(a2);
          physx::Sc::BodyCore::setWakeCounter((uint64_t)(v6 + 32), *(float *)&a2, 1);
          goto LABEL_14;
        }
      }
      else
      {
        if (v8 != 3)
          goto LABEL_13;
        v9 = *(_QWORD **)v7;
      }
      v6[94] = 0;
      v6[93] = LODWORD(a2);
      physx::Scb::Scene::scheduleForUpdate(v9, v7, *(int8x8_t *)&a2);
      v6[95] = v6[95] & 0xF8FFFFFF | 0x5000000;
LABEL_14:
      if (++v5 >= (unint64_t)*((unsigned int *)this + 32))
      {
        v3 = *((_DWORD *)this + 2);
        break;
      }
    }
  }
  result = *(_QWORD **)this;
  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)this + 8176);
  *((_DWORD *)this + 18) = LODWORD(a2);
  *((_BYTE *)this + 76) = 0;
  v11 = v3 >> 30;
  if (v11 == 3 || v11 == 2 && *((_BYTE *)result + 7689))
  {
    result = physx::Scb::Scene::scheduleForUpdate(result, this, *(int8x8_t *)&a2);
    *((_DWORD *)this + 2) = *((_DWORD *)this + 2) & 0xFFFFFC7F | 0x280;
  }
  else
  {
    *((_DWORD *)this + 15) = LODWORD(a2);
  }
  return result;
}

float physx::NpArticulation::computeImpulseResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  float result;

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    return physx::Sc::ArticulationSim::computeImpulseResponse(v7, (uint64_t *)(a2 + 128), a3, a4, a5, a6, a7);
  return result;
}

_QWORD *physx::NpArticulation::createArticulationJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return physx::NpFactory::createNpArticulationJoint(physx::NpFactory::mInstance, a2, a3, a4, a5);
}

uint64_t physx::NpArticulation::releaseArticulationJoint(uint64_t a1, pthread_mutex_t *a2)
{
  return physx::NpFactory::releaseArticulationJointToPool((pthread_mutex_t **)physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpArticulationJoint::resolveReferences(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  _QWORD *v3;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 424))
  {
    result = (**a2)(a2, 0x80000000);
    v3[53] = result;
  }
  if (v3[54])
  {
    result = (**a2)(a2, 0x80000000);
    v3[54] = result;
  }
  v3[52] = v3;
  return result;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::NpArticulationJointTemplate(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = 1;
  *(_QWORD *)a1 = &off_24ED93DA8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  physx::Sc::ArticulationJointCore::ArticulationJointCore(a1 + 40, a4, a6, a2 == 15);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xF0FFFFFF | 0x8000000;
  *(_QWORD *)(a1 + 424) = a3;
  *(_QWORD *)(a1 + 432) = a5;
  *(_QWORD *)(a1 + 408) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 384) + 200))(*(_QWORD *)(a3 + 384))
                        + 24;
  *(_QWORD *)(a1 + 416) = a1;
  return a1;
}

void physx::NpArticulationJoint::~NpArticulationJoint(physx::NpArticulationJoint *this)
{
  *(_QWORD *)this = &off_24ED93DA8;
}

{
  *(_QWORD *)this = &off_24ED93DA8;
  (*(void (**)(uint64_t, physx::NpArticulationJoint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

__n128 physx::NpArticulationJoint::setTargetOrientation(__n128 *a1, __n128 *a2)
{
  physx::Scb::Base *v4;
  unsigned __int32 v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  __n128 result;

  v4 = (physx::Scb::Base *)&a1[1];
  v5 = a1[1].n128_u32[2];
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    result = *a2;
    a1[20] = *a2;
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = a1[2].n128_u64[0];
  if (!v7)
  {
    physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF);
    v7 = v8;
    a1[2].n128_u64[0] = v8;
    v6 = (_QWORD *)a1[1].n128_u64[0];
  }
  v9 = *a2;
  *(__n128 *)(v7 + 56) = *a2;
  physx::Scb::Scene::scheduleForUpdate(v6, v4, (int8x8_t)v9.n128_u64[0]);
  a1[1].n128_u32[2] |= 4u;
  return result;
}

__n128 physx::NpArticulationJoint::getTargetOrientation@<Q0>(physx::NpArticulationJoint *this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;

  if ((*((_BYTE *)this + 24) & 4) != 0)
    v2 = (__n128 *)(*((_QWORD *)this + 4) + 56);
  else
    v2 = (__n128 *)((char *)this + 320);
  result = *v2;
  *a2 = *v2;
  return result;
}

float physx::NpArticulationJoint::setTargetVelocity(uint64_t a1, uint64_t a2)
{
  physx::Scb::Base *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  float result;

  v4 = (physx::Scb::Base *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *(_QWORD *)(a1 + 336) = *(_QWORD *)a2;
    result = *(float *)(a2 + 8);
    *(float *)(a1 + 344) = result;
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
  {
    physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF);
    v7 = v8;
    *(_QWORD *)(a1 + 32) = v8;
    v6 = *(_QWORD **)(a1 + 16);
  }
  v9 = *(int8x8_t *)a2;
  *(_QWORD *)(v7 + 72) = *(_QWORD *)a2;
  v9.i32[0] = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v7 + 80) = v9.i32[0];
  physx::Scb::Scene::scheduleForUpdate(v6, v4, v9);
  *(_DWORD *)(a1 + 24) |= 8u;
  return result;
}

uint64_t physx::NpArticulationJoint::getDriveType(physx::NpArticulationJoint *this)
{
  if ((*((_BYTE *)this + 26) & 1) != 0)
    return *(unsigned int *)(*((_QWORD *)this + 4) + 132);
  else
    return *((unsigned __int8 *)this + 378);
}

_QWORD *physx::NpArticulationJoint::setDriveType(_QWORD *result, int a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  v5 = (physx::Scb::Base *)(result + 2);
  v6 = *((_DWORD *)result + 6);
  if (v6 >> 30 == 2)
  {
    result = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_BYTE *)v4 + 378) = a2;
    return result;
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v5;
LABEL_5:
  v7 = v4[4];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
    v7 = v8;
    v4[4] = v8;
    result = (_QWORD *)v4[2];
  }
  *(_DWORD *)(v7 + 132) = a2;
  result = physx::Scb::Scene::scheduleForUpdate(result, v5, a3);
  *((_DWORD *)v4 + 6) |= 0x10000u;
  return result;
}

float physx::NpArticulationJoint::getTargetVelocity@<S0>(physx::NpArticulationJoint *this@<X0>, uint64_t a2@<X8>)
{
  float *v2;
  float result;

  if ((*((_BYTE *)this + 24) & 8) != 0)
    v2 = (float *)(*((_QWORD *)this + 4) + 72);
  else
    v2 = (float *)((char *)this + 336);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  result = v2[2];
  *(float *)(a2 + 8) = result;
  return result;
}

_QWORD *physx::NpArticulationJoint::setStiffness(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 87) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 84) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x10u;
  return this;
}

float physx::NpArticulationJoint::getStiffness(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 24) & 0x10) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 84);
  else
    v1 = (char *)this + 348;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationJoint::setDamping(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 88) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 88) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x20u;
  return this;
}

float physx::NpArticulationJoint::getDamping(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 24) & 0x20) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 88);
  else
    v1 = (char *)this + 352;
  return *(float *)v1;
}

void physx::NpArticulationJoint::setSwingLimitContactDistance(physx::NpArticulationJoint *this, double a2)
{
  int v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = LODWORD(a2);
  v4 = (physx::NpArticulationJoint *)((char *)this + 16);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)this + 91) = LODWORD(a2);
    *((float *)this + 98) = tanf(*(float *)&a2 * 0.25);
    return;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = *((_QWORD *)this + 4);
  if (!v7)
  {
    *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    v7 = v8;
    *((_QWORD *)this + 4) = v8;
    v6 = (_QWORD *)*((_QWORD *)this + 2);
  }
  *(_DWORD *)(v7 + 108) = v2;
  physx::Scb::Scene::scheduleForUpdate(v6, v4, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x400u;
}

float physx::NpArticulationJoint::getSwingLimitContactDistance(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 25) & 4) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 108);
  else
    v1 = (char *)this + 364;
  return *(float *)v1;
}

void physx::NpArticulationJoint::setTwistLimitContactDistance(physx::NpArticulationJoint *this, double a2)
{
  int v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = LODWORD(a2);
  v4 = (physx::NpArticulationJoint *)((char *)this + 16);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)this + 95) = LODWORD(a2);
    *((float *)this + 101) = tanf(*(float *)&a2 * 0.25);
    return;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = *((_QWORD *)this + 4);
  if (!v7)
  {
    *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    v7 = v8;
    *((_QWORD *)this + 4) = v8;
    v6 = (_QWORD *)*((_QWORD *)this + 2);
  }
  *(_DWORD *)(v7 + 124) = v2;
  physx::Scb::Scene::scheduleForUpdate(v6, v4, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x4000u;
}

float physx::NpArticulationJoint::getTwistLimitContactDistance(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 25) & 0x40) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 124);
  else
    v1 = (char *)this + 380;
  return *(float *)v1;
}

uint64_t physx::NpArticulationJoint::getJointType(physx::NpArticulationJoint *this)
{
  if ((*((_BYTE *)this + 26) & 8) != 0)
    return *(unsigned int *)(*((_QWORD *)this + 4) + 136);
  else
    return *((unsigned __int8 *)this + 318);
}

_QWORD *physx::NpArticulationJoint::setJointType(_QWORD *result, int a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = result;
  v5 = (physx::Scb::Base *)(result + 2);
  v6 = *((_DWORD *)result + 6);
  if (v6 >> 30 == 2)
  {
    result = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
  }
  else if (v6 >> 30 == 3)
  {
    result = *(_QWORD **)v5;
LABEL_5:
    v7 = v4[4];
    if (!v7)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
      v7 = v8;
      v4[4] = v8;
      result = (_QWORD *)v4[2];
    }
    *(_DWORD *)(v7 + 136) = a2;
    result = physx::Scb::Scene::scheduleForUpdate(result, v5, a3);
    *((_DWORD *)v4 + 6) |= 0x80000u;
    return result;
  }
  *((_BYTE *)v4 + 318) = a2;
  v9 = *(_QWORD **)v4[51];
  if (v9)
  {
    v10 = v9[1];
    *(_BYTE *)(*v9 + 161) = 1;
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 1904) + 128))(*(_QWORD *)(v10 + 1904));
  }
  return result;
}

uint64_t physx::NpArticulationJoint::setMotion(uint64_t a1, unsigned int a2, int a3, int8x8_t a4)
{
  uint64_t v5;
  uint64_t result;

  physx::Scb::ArticulationJoint::setMotion((physx::Scb::Base *)(a1 + 16), a2, a3, a4);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 432) + 496))(*(_QWORD *)(a1 + 432));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
  ++*(_DWORD *)(result + 152);
  return result;
}

physx::Sc::ArticulationJointSim *physx::Scb::ArticulationJoint::setMotion(physx::Scb::Base *a1, unsigned int a2, int a3, int8x8_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  physx::Sc::ArticulationJointSim *result;
  char *v11;
  _QWORD *v12;

  v7 = *((_DWORD *)a1 + 2);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(_BYTE *)(*(_QWORD *)a1 + 7689))
  {
    v8 = *((_QWORD *)a1 + 2);
    if ((v7 & 0x800000) != 0)
    {
      v12 = *(_QWORD **)a1;
      if (v8)
      {
LABEL_15:
        *(_DWORD *)(v8 + 4 * a2 + 348) = a3;
        result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v12, a1, a4);
        *((_DWORD *)a1 + 2) |= 0x800000u;
        return result;
      }
      a4 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)a1, *((_BYTE *)a1 + 11) & 0xF).n128_u64[0];
      *((_QWORD *)a1 + 2) = v8;
    }
    else
    {
      if (!v8)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)a1, HIBYTE(v7) & 0xF).n128_u64[0];
        *((_QWORD *)a1 + 2) = v8;
      }
      for (i = 0; i != 6; ++i)
        *(_DWORD *)(v8 + 4 * i + 348) = *((unsigned __int8 *)a1 + i + 290);
    }
    v12 = *(_QWORD **)a1;
    goto LABEL_15;
  }
  v11 = (char *)a1 + 24;
  result = (physx::Sc::ArticulationJointSim *)*((_QWORD *)a1 + 3);
  v11[a2 + 266] = a3;
  v11[277] |= 1u;
  if (result)
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  return result;
}

uint64_t physx::NpArticulationJoint::getMotion(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 26) & 0x80) != 0)
    return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * a2 + 348);
  else
    return *(unsigned __int8 *)(a1 + a2 + 306);
}

_QWORD *physx::NpArticulationJoint::setFrictionCoefficient(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 74) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 92) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x40u;
  return this;
}

float physx::NpArticulationJoint::getFrictionCoefficient(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 24) & 0x40) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 92);
  else
    v1 = (char *)this + 296;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationJoint::setInternalCompliance(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 89) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 100) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x100u;
  return this;
}

float physx::NpArticulationJoint::getInternalCompliance(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 25) & 1) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 100);
  else
    v1 = (char *)this + 356;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationJoint::setExternalCompliance(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 90) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 104) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x200u;
  return this;
}

float physx::NpArticulationJoint::getExternalCompliance(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 25) & 2) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 104);
  else
    v1 = (char *)this + 360;
  return *(float *)v1;
}

void physx::NpArticulationJoint::setSwingLimit(physx::NpArticulationJoint *this, double a2, float a3)
{
  int v4;
  physx::Scb::Base *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = LODWORD(a2);
  v6 = (physx::NpArticulationJoint *)((char *)this + 16);
  v7 = *((_DWORD *)this + 6);
  if (v7 >> 30 == 2)
  {
    v8 = *(_QWORD **)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)this + 28) = LODWORD(a2);
    *((float *)this + 30) = a3;
    *((float *)this + 96) = tanf(*(float *)&a2 * 0.25);
    *((float *)this + 97) = tanf(a3 * 0.25);
    return;
  }
  if (v7 >> 30 != 3)
    goto LABEL_8;
  v8 = *(_QWORD **)v6;
LABEL_5:
  v9 = *((_QWORD *)this + 4);
  if (!v9)
  {
    *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)v8, HIBYTE(v7) & 0xF).n128_u64[0];
    v9 = v10;
    *((_QWORD *)this + 4) = v10;
    v8 = (_QWORD *)*((_QWORD *)this + 2);
  }
  *(_DWORD *)(v9 + 140) = v4;
  *(float *)(v9 + 144) = a3;
  physx::Scb::Scene::scheduleForUpdate(v8, v6, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x20000u;
}

float physx::NpArticulationJoint::getSwingLimit(physx::NpArticulationJoint *this, float *a2, float *a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float result;

  if ((*((_BYTE *)this + 26) & 2) != 0)
  {
    v5 = *((_QWORD *)this + 4);
    v3 = (float *)(v5 + 140);
    v4 = (float *)(v5 + 144);
  }
  else
  {
    v3 = (float *)((char *)this + 112);
    v4 = (float *)((char *)this + 120);
  }
  *a2 = *v3;
  result = *v4;
  *a3 = *v4;
  return result;
}

_QWORD *physx::NpArticulationJoint::setTangentialStiffness(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 92) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 116) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x1000u;
  return this;
}

float physx::NpArticulationJoint::getTangentialStiffness(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 25) & 0x10) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 116);
  else
    v1 = (char *)this + 368;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationJoint::setTangentialDamping(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 93) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 120) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x2000u;
  return this;
}

float physx::NpArticulationJoint::getTangentialDamping(physx::NpArticulationJoint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 25) & 0x20) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 120);
  else
    v1 = (char *)this + 372;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationJoint::setSwingLimitEnabled(_QWORD *this, char a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this;
  v5 = (physx::Scb::Base *)(this + 2);
  v6 = *((_DWORD *)this + 6);
  if (v6 >> 30 == 2)
  {
    this = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_BYTE *)v4 + 376) = a2;
    return this;
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v5;
LABEL_5:
  v7 = v4[4];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    v7 = v8;
    v4[4] = v8;
    this = (_QWORD *)v4[2];
  }
  *(_BYTE *)(v7 + 112) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 6) |= 0x800u;
  return this;
}

uint64_t physx::NpArticulationJoint::getSwingLimitEnabled(physx::NpArticulationJoint *this)
{
  unsigned __int8 *v1;

  if ((*((_BYTE *)this + 25) & 8) != 0)
    v1 = (unsigned __int8 *)(*((_QWORD *)this + 4) + 112);
  else
    v1 = (unsigned __int8 *)this + 376;
  return *v1;
}

void physx::NpArticulationJoint::setTwistLimit(physx::NpArticulationJoint *this, double a2, float a3)
{
  float v4;
  physx::Scb::Base *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(float *)&a2;
  v6 = (physx::NpArticulationJoint *)((char *)this + 16);
  v7 = *((_DWORD *)this + 6);
  if (v7 >> 30 == 2)
  {
    v8 = *(_QWORD **)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)this + 26) = LODWORD(a2);
    *((float *)this + 27) = a3;
    *((float *)this + 99) = tanf(a3 * 0.25);
    *((float *)this + 100) = tanf(v4 * 0.25);
    return;
  }
  if (v7 >> 30 != 3)
    goto LABEL_8;
  v8 = *(_QWORD **)v6;
LABEL_5:
  v9 = *((_QWORD *)this + 4);
  if (!v9)
  {
    *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)v8, HIBYTE(v7) & 0xF).n128_u64[0];
    v9 = v10;
    *((_QWORD *)this + 4) = v10;
    v8 = (_QWORD *)*((_QWORD *)this + 2);
  }
  *(float *)(v9 + 148) = v4;
  *(float *)(v9 + 152) = a3;
  physx::Scb::Scene::scheduleForUpdate(v8, v6, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x40000u;
}

float physx::NpArticulationJoint::getTwistLimit(physx::NpArticulationJoint *this, float *a2, float *a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float result;

  if ((*((_BYTE *)this + 26) & 4) != 0)
  {
    v5 = *((_QWORD *)this + 4);
    v3 = (float *)(v5 + 148);
    v4 = (float *)(v5 + 152);
  }
  else
  {
    v3 = (float *)((char *)this + 104);
    v4 = (float *)((char *)this + 108);
  }
  *a2 = *v3;
  result = *v4;
  *a3 = *v4;
  return result;
}

_QWORD *physx::NpArticulationJoint::setTwistLimitEnabled(_QWORD *this, char a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this;
  v5 = (physx::Scb::Base *)(this + 2);
  v6 = *((_DWORD *)this + 6);
  if (v6 >> 30 == 2)
  {
    this = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_BYTE *)v4 + 377) = a2;
    return this;
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v5;
LABEL_5:
  v7 = v4[4];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    v7 = v8;
    v4[4] = v8;
    this = (_QWORD *)v4[2];
  }
  *(_BYTE *)(v7 + 128) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 6) |= 0x8000u;
  return this;
}

uint64_t physx::NpArticulationJoint::getTwistLimitEnabled(physx::NpArticulationJoint *this)
{
  unsigned __int8 *v1;

  if ((*((_BYTE *)this + 25) & 0x80) != 0)
    v1 = (unsigned __int8 *)(*((_QWORD *)this + 4) + 128);
  else
    v1 = (unsigned __int8 *)this + 377;
  return *v1;
}

uint64_t physx::NpArticulationJointReducedCoordinate::resolveReferences(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  _QWORD *v3;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 424))
  {
    result = (**a2)(a2, 0x80000000);
    v3[53] = result;
  }
  if (v3[54])
  {
    result = (**a2)(a2, 0x80000000);
    v3[54] = result;
  }
  v3[52] = v3;
  return result;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::NpArticulationJointTemplate(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = 1;
  *(_QWORD *)a1 = &off_24ED93F18;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  physx::Sc::ArticulationJointCore::ArticulationJointCore(a1 + 40, a4, a6, a2 == 15);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xF0FFFFFF | 0x8000000;
  *(_QWORD *)(a1 + 424) = a3;
  *(_QWORD *)(a1 + 432) = a5;
  *(_QWORD *)(a1 + 408) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 384) + 200))(*(_QWORD *)(a3 + 384))
                        + 24;
  *(_QWORD *)(a1 + 416) = a1;
  return a1;
}

void physx::NpArticulationJointReducedCoordinate::~NpArticulationJointReducedCoordinate(physx::NpArticulationJointReducedCoordinate *this)
{
  *(_QWORD *)this = &off_24ED93F18;
}

{
  *(_QWORD *)this = &off_24ED93F18;
  (*(void (**)(uint64_t, physx::NpArticulationJointReducedCoordinate *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                             + 24)
                                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

_QWORD *physx::NpArticulationJointReducedCoordinate::setJointType(_QWORD *result, int a2, int8x8_t a3)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = result;
  v5 = (physx::Scb::Base *)(result + 2);
  v6 = *((_DWORD *)result + 6);
  if (v6 >> 30 == 2)
  {
    result = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
  }
  else if (v6 >> 30 == 3)
  {
    result = *(_QWORD **)v5;
LABEL_5:
    v7 = v4[4];
    if (!v7)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
      v7 = v8;
      v4[4] = v8;
      result = (_QWORD *)v4[2];
    }
    *(_DWORD *)(v7 + 136) = a2;
    result = physx::Scb::Scene::scheduleForUpdate(result, v5, a3);
    *((_DWORD *)v4 + 6) |= 0x80000u;
    return result;
  }
  *((_BYTE *)v4 + 318) = a2;
  v9 = *(_QWORD **)v4[51];
  if (v9)
  {
    v10 = v9[1];
    *(_BYTE *)(*v9 + 161) = 1;
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 1904) + 128))(*(_QWORD *)(v10 + 1904));
  }
  return result;
}

uint64_t physx::NpArticulationJointReducedCoordinate::getJointType(physx::NpArticulationJointReducedCoordinate *this)
{
  if ((*((_BYTE *)this + 26) & 8) != 0)
    return *(unsigned int *)(*((_QWORD *)this + 4) + 136);
  else
    return *((unsigned __int8 *)this + 318);
}

uint64_t physx::NpArticulationJointReducedCoordinate::setMotion(uint64_t a1, unsigned int a2, int a3, int8x8_t a4)
{
  uint64_t v5;
  uint64_t result;

  physx::Scb::ArticulationJoint::setMotion((physx::Scb::Base *)(a1 + 16), a2, a3, a4);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 432) + 496))(*(_QWORD *)(a1 + 432));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
  ++*(_DWORD *)(result + 152);
  return result;
}

uint64_t physx::NpArticulationJointReducedCoordinate::getMotion(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 26) & 0x80) != 0)
    return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * a2 + 348);
  else
    return *(unsigned __int8 *)(a1 + a2 + 306);
}

_QWORD *physx::NpArticulationJointReducedCoordinate::setFrictionCoefficient(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 74) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 92) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x40u;
  return this;
}

float physx::NpArticulationJointReducedCoordinate::getFrictionCoefficient(physx::NpArticulationJointReducedCoordinate *this)
{
  char *v1;

  if ((*((_BYTE *)this + 24) & 0x40) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 92);
  else
    v1 = (char *)this + 296;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationJointReducedCoordinate::setMaxJointVelocity(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 2);
  v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 78) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  this = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[4] = v7;
    this = (_QWORD *)v3[2];
  }
  *(_DWORD *)(v6 + 96) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x80u;
  return this;
}

float physx::NpArticulationJointReducedCoordinate::getMaxJointVelocity(physx::NpArticulationJointReducedCoordinate *this)
{
  char *v1;

  if ((*((_BYTE *)this + 24) & 0x80) != 0)
    v1 = (char *)(*((_QWORD *)this + 4) + 96);
  else
    v1 = (char *)this + 312;
  return *(float *)v1;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setLimit(uint64_t a1, unsigned int a2, __n128 Stream, float a4)
{
  unsigned __int32 v5;
  physx::Scb::Base *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  physx::Sc::ArticulationJointSim *result;

  v5 = Stream.n128_u32[0];
  v8 = (physx::Scb::Base *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 24);
  if (v9 >> 30 == 3 || v9 >> 30 == 2 && *(_BYTE *)(*(_QWORD *)v8 + 7689))
  {
    v10 = *(_QWORD *)(a1 + 32);
    if ((v9 & 0x100000) != 0)
    {
      if (!v10)
      {
        Stream.n128_u64[0] = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), HIBYTE(v9) & 0xF).n128_u64[0];
        *(_QWORD *)(a1 + 32) = v10;
      }
    }
    else
    {
      if (!v10)
      {
        Stream = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), HIBYTE(v9) & 0xF);
        *(_QWORD *)(a1 + 32) = v10;
      }
      v11 = 0;
      v12 = a1 + 104;
      do
      {
        v13 = v10 + v11;
        *(_DWORD *)(v13 + 156) = *(_DWORD *)(v12 + v11);
        Stream.n128_u32[0] = *(_DWORD *)(v12 + v11 + 4);
        *(_DWORD *)(v13 + 160) = Stream.n128_u32[0];
        v11 += 8;
      }
      while (v11 != 48);
    }
    *(_DWORD *)(v10 + 8 * a2 + 156) = v5;
    *(float *)(v10 + 8 * a2 + 160) = a4;
    result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)(a1 + 16), v8, (int8x8_t)Stream.n128_u64[0]);
    *(_DWORD *)(a1 + 24) |= 0x100000u;
  }
  else
  {
    v14 = (char *)v8 + 8 * a2;
    *((_DWORD *)v14 + 22) = Stream.n128_u32[0];
    *((float *)v14 + 23) = a4;
    *(_BYTE *)(a1 + 317) |= 0x10u;
    result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
    if (result)
      return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  }
  return result;
}

float physx::NpArticulationJointReducedCoordinate::getLimit(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  _DWORD *v5;
  float *v6;
  uint64_t v7;
  float result;

  if ((*(_BYTE *)(a1 + 26) & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a1 + 32) + 8 * a2;
    v5 = (_DWORD *)(v7 + 156);
    v6 = (float *)(v7 + 160);
  }
  else
  {
    v4 = a1 + 8 * a2;
    v5 = (_DWORD *)(v4 + 104);
    v6 = (float *)(v4 + 108);
  }
  *a3 = *v5;
  result = *v6;
  *a4 = *(_DWORD *)v6;
  return result;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setDrive(uint64_t a1, unsigned int a2, int a3, __n128 Stream, float a5, float a6)
{
  unsigned __int32 v9;
  physx::Scb::Base *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t i;
  _DWORD *v16;
  char *v17;
  physx::Sc::ArticulationJointSim *result;
  uint64_t v19;

  v9 = Stream.n128_u32[0];
  v12 = (physx::Scb::Base *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 24);
  if (v13 >> 30 == 3 || v13 >> 30 == 2 && *(_BYTE *)(*(_QWORD *)v12 + 7689))
  {
    v14 = *(_QWORD *)(a1 + 32);
    if ((v13 & 0x200000) != 0)
    {
      if (!v14)
      {
        Stream.n128_u64[0] = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), HIBYTE(v13) & 0xF).n128_u64[0];
        *(_QWORD *)(a1 + 32) = v14;
      }
    }
    else
    {
      if (!v14)
      {
        Stream = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), HIBYTE(v13) & 0xF);
        *(_QWORD *)(a1 + 32) = v14;
      }
      for (i = 0; i != 96; i += 16)
      {
        v16 = (_DWORD *)(v14 + i);
        v16[51] = *(_DWORD *)(a1 + i + 152);
        v16[52] = *(_DWORD *)(a1 + i + 156);
        Stream.n128_u32[0] = *(_DWORD *)(a1 + i + 160);
        v16[53] = Stream.n128_u32[0];
        v16[54] = *(_DWORD *)(a1 + i + 164);
      }
    }
    v19 = v14 + 16 * a2;
    *(_DWORD *)(v19 + 204) = v9;
    *(float *)(v19 + 208) = a5;
    *(float *)(v19 + 212) = a6;
    *(_DWORD *)(v19 + 216) = a3;
    result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)(a1 + 16), v12, (int8x8_t)Stream.n128_u64[0]);
    *(_DWORD *)(a1 + 24) |= 0x200000u;
  }
  else
  {
    v17 = (char *)v12 + 16 * a2;
    *((_DWORD *)v17 + 34) = Stream.n128_u32[0];
    *((float *)v17 + 35) = a5;
    *((float *)v17 + 36) = a6;
    *((_DWORD *)v17 + 37) = a3;
    *(_BYTE *)(a1 + 317) |= 0x20u;
    result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
    if (result)
      return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  }
  return result;
}

float physx::NpArticulationJointReducedCoordinate::getDrive(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  float *v9;
  _DWORD *v10;
  uint64_t v11;
  float result;

  if ((*(_BYTE *)(a1 + 26) & 0x20) != 0)
  {
    v11 = *(_QWORD *)(a1 + 32) + 16 * a2;
    v7 = (_DWORD *)(v11 + 204);
    v8 = (_DWORD *)(v11 + 208);
    v9 = (float *)(v11 + 212);
    v10 = (_DWORD *)(v11 + 216);
  }
  else
  {
    v6 = a1 + 16 * a2;
    v7 = (_DWORD *)(v6 + 152);
    v8 = (_DWORD *)(v6 + 156);
    v9 = (float *)(v6 + 160);
    v10 = (_DWORD *)(v6 + 164);
  }
  *a3 = *v7;
  *a4 = *v8;
  result = *v9;
  *a5 = *(_DWORD *)v9;
  *a6 = *v10;
  return result;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setDriveTarget(uint64_t a1, unsigned int a2, __n128 Stream)
{
  unsigned __int32 v3;
  physx::Scb::Base *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  physx::Sc::ArticulationJointSim *result;
  _QWORD *v14;

  v3 = Stream.n128_u32[0];
  v6 = (physx::Scb::Base *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(_BYTE *)(*(_QWORD *)v6 + 7689))
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v7 & 0x400000) != 0)
    {
      v14 = *(_QWORD **)v6;
      if (v8)
      {
LABEL_16:
        *(_DWORD *)(v8 + 4 * a2 + 300) = v3;
        result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v14, v6, (int8x8_t)Stream.n128_u64[0]);
        *(_DWORD *)(a1 + 24) |= 0x400000u;
        return result;
      }
      Stream.n128_u64[0] = physx::Scb::Scene::getStream(*(_QWORD *)v6, HIBYTE(v7) & 0xF).n128_u64[0];
      *(_QWORD *)(a1 + 32) = v9;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 32);
      if (!v8)
      {
        Stream = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), HIBYTE(v7) & 0xF);
        v8 = v9;
        *(_QWORD *)(a1 + 32) = v9;
        if (!v9)
        {
          Stream = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 27) & 0xF);
          v8 = 0;
          *(_QWORD *)(a1 + 32) = v9;
        }
      }
      v10 = 0;
      v11 = v8 + 300;
      v12 = a1 + 248;
      do
      {
        *(_DWORD *)(v11 + v10) = *(_DWORD *)(v12 + v10);
        Stream.n128_u32[0] = *(_DWORD *)(v12 + v10 + 24);
        *(_DWORD *)(v9 + v10 + 324) = Stream.n128_u32[0];
        v10 += 4;
      }
      while (v10 != 24);
    }
    v14 = *(_QWORD **)v6;
    v8 = v9;
    goto LABEL_16;
  }
  *((_DWORD *)v6 + a2 + 58) = Stream.n128_u32[0];
  *(_BYTE *)(a1 + 317) |= 4u;
  result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
  if (result)
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  return result;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setDriveVelocity(uint64_t a1, unsigned int a2, __n128 Stream)
{
  unsigned __int32 v3;
  physx::Scb::Base *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  physx::Sc::ArticulationJointSim *result;
  _QWORD *v14;

  v3 = Stream.n128_u32[0];
  v6 = (physx::Scb::Base *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(_BYTE *)(*(_QWORD *)v6 + 7689))
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v7 & 0x400000) != 0)
    {
      v14 = *(_QWORD **)v6;
      if (v8)
      {
LABEL_16:
        *(_DWORD *)(v8 + 4 * a2 + 324) = v3;
        result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v14, v6, (int8x8_t)Stream.n128_u64[0]);
        *(_DWORD *)(a1 + 24) |= 0x400000u;
        return result;
      }
      Stream.n128_u64[0] = physx::Scb::Scene::getStream(*(_QWORD *)v6, HIBYTE(v7) & 0xF).n128_u64[0];
      *(_QWORD *)(a1 + 32) = v9;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 32);
      if (!v8)
      {
        Stream = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), HIBYTE(v7) & 0xF);
        v8 = v9;
        *(_QWORD *)(a1 + 32) = v9;
        if (!v9)
        {
          Stream = physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 27) & 0xF);
          v8 = 0;
          *(_QWORD *)(a1 + 32) = v9;
        }
      }
      v10 = 0;
      v11 = v8 + 300;
      v12 = a1 + 248;
      do
      {
        *(_DWORD *)(v11 + v10) = *(_DWORD *)(v12 + v10);
        Stream.n128_u32[0] = *(_DWORD *)(v12 + v10 + 24);
        *(_DWORD *)(v9 + v10 + 324) = Stream.n128_u32[0];
        v10 += 4;
      }
      while (v10 != 24);
    }
    v14 = *(_QWORD **)v6;
    v8 = v9;
    goto LABEL_16;
  }
  *((_DWORD *)v6 + a2 + 64) = Stream.n128_u32[0];
  *(_BYTE *)(a1 + 317) |= 8u;
  result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
  if (result)
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  return result;
}

float physx::NpArticulationJointReducedCoordinate::getDriveTarget(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 26) & 0x40) != 0)
    v2 = *(_QWORD *)(a1 + 32) + 4 * a2 + 300;
  else
    v2 = a1 + 4 * a2 + 248;
  return *(float *)v2;
}

float physx::NpArticulationJointReducedCoordinate::getDriveVelocity(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 26) & 0x40) != 0)
    v2 = *(_QWORD *)(a1 + 32) + 4 * a2 + 324;
  else
    v2 = a1 + 4 * a2 + 272;
  return *(float *)v2;
}

uint64_t physx::NpArticulationLink::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = *(unsigned __int16 *)(result + 48);
  if (*(_WORD *)(result + 48))
  {
    v5 = 0;
    v6 = (uint64_t *)(result + 40);
    v7 = 8 * v4 - 8;
    while (1)
    {
      v8 = v3 + 40;
      if ((_DWORD)v4 != 1)
        v8 = *v6;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v8 + v5));
      if (v7 == v5)
        break;
      LODWORD(v4) = *(unsigned __int16 *)(v3 + 48);
      v5 += 8;
    }
  }
  if (*(_QWORD *)(v3 + 392))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned __int16 *)(result + 48);
  if (*(_WORD *)(result + 48))
  {
    v4 = result;
    v5 = 0;
    v6 = (_QWORD *)(result + 40);
    v7 = 8 * v2 - 8;
    while (1)
    {
      v8 = v6;
      if ((_DWORD)v2 != 1)
        v8 = (_QWORD *)*v6;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v8[v5 / 8]);
      if (v7 == v5)
        break;
      LODWORD(v2) = *(unsigned __int16 *)(v4 + 48);
      v5 += 8;
    }
  }
  return result;
}

uint64_t physx::NpArticulationLink::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  physx::NpActor::exportExtraData((_QWORD *)(a1 + 24), a2);
  return physx::Cm::exportInlineArray<physx::NpArticulationLink *,4u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>(a1 + 408, a2);
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  return physx::NpActor::exportExtraData((_QWORD *)(a1 + 24), a2);
}

uint64_t physx::Cm::exportInlineArray<physx::NpArticulationLink *,4u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (!*(_BYTE *)(result + 32))
  {
    v2 = *(_QWORD *)(result + 40);
    if (v2)
    {
      v3 = *(_DWORD *)(result + 52);
      if (*(_DWORD *)(result + 48) | v3 & 0x7FFFFFFF)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v2, (8 * v3));
    }
  }
  return result;
}

_QWORD *physx::NpArticulationLink::importExtraData(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  physx::NpShapeManager::importExtraData(a1 + 40, a2);
  result = physx::NpActor::importExtraData((_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 440) && *(_QWORD *)(a1 + 448))
  {
    v5 = *(_DWORD *)(a1 + 460) & 0x7FFFFFFF;
    if (*(_DWORD *)(a1 + 456) | v5)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v6 + 8 * v5;
      *(_QWORD *)(a1 + 448) = v6;
    }
  }
  return result;
}

_QWORD *physx::NpRigidActorTemplate<physx::PxArticulationLink>::importExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::importExtraData(a1 + 40, a2);
  return physx::NpActor::importExtraData((_QWORD *)(a1 + 24), a2);
}

uint64_t physx::NpArticulationLink::resolveReferences(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 384))
    *(_QWORD *)(a1 + 384) = (**a2)(a2, 0x80000000);
  if (*(_QWORD *)(a1 + 392))
    *(_QWORD *)(a1 + 392) = (**a2)(a2, 0x80000000);
  if (*(_QWORD *)(a1 + 400))
    *(_QWORD *)(a1 + 400) = (**a2)(a2, 0x80000000);
  result = physx::NpRigidActorTemplate<physx::PxArticulationLink>::resolveReferences(a1, a2);
  v5 = *(unsigned int *)(a1 + 456);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v8 = *(_QWORD *)(a1 + 448);
      if (*(_QWORD *)(v8 + v6))
      {
        result = (**a2)(a2, 0x80000000);
        *(_QWORD *)(v8 + v6) = result;
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::resolveReferences(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = (_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48);
  if ((_DWORD)v5 != 1)
  {
    if (!*(_WORD *)(a1 + 48))
      return physx::NpActor::resolveReferences(a1 + 24, a2);
    v4 = (_QWORD *)*v4;
  }
  v6 = 0;
  do
  {
    if (v4[v6])
    {
      v7 = (**a2)(a2, 0x80000000);
      v4[v6] = v7;
    }
    else
    {
      v7 = 0;
    }
    v8 = (unsigned int *)(v7 + 32);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if ((*(_DWORD *)(v7 + 264) & 0x80000000) != 0)
      *(_QWORD *)(v7 + 40) = a1;
    v10 = (unsigned int *)(v7 + 264);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    ++v6;
  }
  while (v6 != v5);
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

uint64_t physx::NpArticulationLink::NpArticulationLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  uint64_t v11;

  v10 = 1;
  v7 = physx::NpRigidBodyTemplate<physx::PxArticulationLink>::NpRigidBodyTemplate(a1, 13, &v10, 2, a2);
  *(_QWORD *)v7 = off_24ED93508;
  *(_QWORD *)(v7 + 384) = a3;
  *(_QWORD *)(v7 + 392) = 0;
  *(_QWORD *)(v7 + 400) = a4;
  *(_BYTE *)(v7 + 440) = 1;
  *(_QWORD *)(v7 + 448) = v7 + 408;
  *(_QWORD *)(v7 + 456) = 0x400000000;
  *(_QWORD *)(v7 + 464) = -1;
  *(_DWORD *)(v7 + 104) = *(_DWORD *)(v7 + 104) & 0xF0FFFFFF | 0x4000000;
  if (a4)
  {
    v11 = a1;
    v8 = *(unsigned int *)(a4 + 456);
    if ((*(_DWORD *)(a4 + 460) & 0x7FFFFFFFu) <= v8)
    {
      physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(a4 + 408, &v11);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a4 + 448) + 8 * v8) = a1;
      *(_DWORD *)(a4 + 456) = v8 + 1;
    }
  }
  return a1;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxArticulationLink>::NpRigidBodyTemplate(uint64_t a1, __int16 a2, __int16 *a3, int a4, uint64_t a5)
{
  __int16 v6;
  uint64_t v7;
  __int128 v8;

  v6 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0x10000;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24ED94018;
  *(_QWORD *)(a1 + 96) = 0;
  v7 = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  physx::Sc::BodyCore::BodyCore(a1 + 128, a4, a5);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a1 + 104) & 0xF0FFFFFF | 0x3000000;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 160);
  *(_QWORD *)&v8 = *(_QWORD *)(a1 + 164);
  *((_QWORD *)&v8 + 1) = *(_QWORD *)(a1 + 208);
  *(_OWORD *)(v7 + 244) = v8;
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 224);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a1 + 284);
  *(_QWORD *)(a1 + 376) = 1;
  return a1;
}

void physx::NpArticulationLink::~NpArticulationLink(physx::NpArticulationLink *this)
{
  int v2;
  physx::NpArticulationLink *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED93508;
  v2 = *((_DWORD *)this + 115);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = (physx::NpArticulationLink *)*((_QWORD *)this + 56);
    if (v3 == (physx::NpArticulationLink *)((char *)this + 408))
    {
      *((_BYTE *)this + 440) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)this = off_24ED94278;
  v4 = *(_QWORD *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)this + 40, v4);
  physx::Cm::PtrTable::clear((uint64_t)this + 56, v4);
  *(_QWORD *)this = off_24ED944D8;
  physx::NpFactory::onActorRelease(physx::NpFactory::mInstance, this);
}

{
  uint64_t v2;

  physx::NpArticulationLink::~NpArticulationLink(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpArticulationLink *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpArticulationLink::releaseInternal(physx::NpArticulationLink *this)
{
  int8x8_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void (***v15)(_QWORD);
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;

  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, *((_QWORD *)this + 2), 1);
  physx::NpRigidActorTemplate<physx::PxArticulationLink>::release(this, v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 48) + 200))(*((_QWORD *)this + 48));
  v5 = v3;
  v6 = *(unsigned int *)(v3 + 128);
  if ((_DWORD)v6)
  {
    v7 = 0;
    while (*(physx::NpArticulationLink **)(*(_QWORD *)(v3 + 120) + 8 * v7) != this)
    {
      if (v6 == ++v7)
        goto LABEL_9;
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v7 != (_DWORD)v6)
  {
    v8 = *(_QWORD *)(v3 + 120);
    v9 = v6 - 1;
    *(_DWORD *)(v3 + 128) = v9;
    *(_QWORD *)(v8 + 8 * v7) = *(_QWORD *)(v8 + 8 * v9);
  }
LABEL_9:
  v10 = *((_QWORD *)this + 50);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 456);
    if ((_DWORD)v11)
    {
      v12 = 0;
      while (*(physx::NpArticulationLink **)(*(_QWORD *)(v10 + 448) + 8 * v12) != this)
      {
        if (v11 == ++v12)
          goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    if ((_DWORD)v12 != (_DWORD)v11)
    {
      v13 = *(_QWORD *)(v10 + 448);
      v14 = v11 - 1;
      *(_DWORD *)(v10 + 456) = v14;
      *(_QWORD *)(v13 + 8 * v12) = *(_QWORD *)(v13 + 8 * v14);
    }
  }
LABEL_18:
  v15 = (void (***)(_QWORD))*((_QWORD *)this + 49);
  if (v15)
    (**v15)(v15);
  v16 = (char *)this + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)this + 4) + 18);
  if (((*((_DWORD *)v16 + 2) >> 30) - 1) <= 1)
  {
    if (*(_QWORD *)v16)
    {
      physx::Scb::Scene::removeActor(*(int32x2_t **)v16, (physx::NpArticulationLink *)((char *)this + 96), 1, 0, v4);
      v17 = *(_DWORD *)(v5 + 8) >> 30;
      if (v17 != 3 && (v17 != 2 || !*(_BYTE *)(*(_QWORD *)v5 + 7689)))
      {
        v18 = *(_QWORD *)(v5 + 24);
        if (v18)
        {
          v19 = *(unsigned int *)(v5 + 128);
          if (v19 >= 2)
          {
            v20 = *(_QWORD *)(v5 + 120);
            v21 = *(unsigned int *)(v18 + 48);
            for (i = 1; i != v19; ++i)
            {
              v23 = *(_QWORD *)(v20 + 8 * i);
              if ((_DWORD)v21)
              {
                v24 = 0;
                while (*(_QWORD *)(*(_QWORD *)(v18 + 40) + 8 * v24) != *(_QWORD *)(v23 + 128))
                {
                  if (v21 == ++v24)
                    goto LABEL_32;
                }
              }
              else
              {
LABEL_32:
                LODWORD(v24) = 0x80000000;
              }
              *(_DWORD *)(v23 + 464) = v24;
            }
          }
        }
      }
    }
  }
  return physx::Scb::Base::destroy((uint64_t)this + 96);
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::release(physx::PxRigidActor *a1, int8x8_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  physx::NpScene *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  physx::NpActor::releaseConstraints((uint64_t)a1 + 24, a1, a2);
  v6 = (char *)a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a1 + 4) + 18);
  if (((*((_DWORD *)v6 + 2) >> 30) - 1) > 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(_QWORD *)v6;
    if (v7)
      v8 = (physx::NpScene *)(v7 - 16);
    else
      v8 = 0;
  }
  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 200, "PxRigidActor::release: Actor is part of a pruning structure, pruning structure is now invalid!", v3, v4, v5, v16);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  result = physx::NpShapeManager::detachAll((physx::PxRigidActor *)((char *)a1 + 40), v8, a1);
  v15 = *((_QWORD *)a1 + 4);
  if (v15)
    return physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(_QWORD *)(v15 + 72) + 8), a1, 0, v10, v11, v12, v13, v14);
  return result;
}

uint64_t physx::NpArticulationLink::release(physx::NpArticulationLink *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  physx::NpArticulationLink *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 48) + 200))(*((_QWORD *)this + 48));
  if (*(_DWORD *)(v10 + 128))
    v14 = **(physx::NpArticulationLink ***)(v10 + 120);
  else
    v14 = 0;
  if (v14 == this
    && *(_QWORD *)((char *)this + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)this + 4) + 18)))
  {
    v15 = "PxArticulationLink::release(): root link may not be released while articulation is in a scene";
    v16 = physx::shdfnd::Foundation::mInstance;
    v17 = 141;
    return physx::shdfnd::Foundation::error(v16, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationLink.cpp", v17, v15, v11, v12, v13, a9);
  }
  if (*((_DWORD *)this + 114))
  {
    v15 = "PxArticulationLink::release(): Only leaf articulation links can be released. Release call failed";
    v16 = physx::shdfnd::Foundation::mInstance;
    v17 = 154;
    return physx::shdfnd::Foundation::error(v16, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationLink.cpp", v17, v15, v11, v12, v13, a9);
  }
  return physx::NpArticulationLink::releaseInternal(this);
}

float physx::NpArticulationLink::getGlobalPose@<S0>(physx::NpArticulationLink *this@<X0>, float *a2@<X8>)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float result;

  if ((*((_BYTE *)this + 381) & 4) != 0)
    v2 = (float *)(*((_QWORD *)this + 14) + 224);
  else
    v2 = (float *)((char *)this + 176);
  v3 = v2[4] * -2.0;
  v4 = v2[5] * -2.0;
  v5 = v2[6] * -2.0;
  v7 = v2[2];
  v6 = v2[3];
  v8 = (float)(v6 * v6) + -0.5;
  v9 = v2[1];
  v10 = (float)((float)(v4 * v9) + (float)(*v2 * v3)) + (float)(v7 * v5);
  v11 = (float)((float)(v3 * v8) - (float)((float)((float)(v9 * v5) - (float)(v7 * v4)) * v6)) + (float)(*v2 * v10);
  v12 = (float)((float)(v4 * v8) - (float)((float)((float)(v7 * v3) - (float)(*v2 * v5)) * v6)) + (float)(v9 * v10);
  v13 = (float)((float)(v5 * v8) - (float)((float)((float)(*v2 * v4) - (float)(v9 * v3)) * v6)) + (float)(v7 * v10);
  v14 = v11 + v11;
  v15 = v12 + v12;
  v16 = v13 + v13;
  v17 = *((float *)this + 83);
  v18 = (float)(v17 * v17) + -0.5;
  v19 = *((float *)this + 80);
  v20 = *((float *)this + 81);
  v21 = *((float *)this + 82);
  v22 = (float)((float)(v20 * (float)(v12 + v12)) + (float)(v19 * v14)) + (float)(v21 * v16);
  v23 = (float)((float)(v17 * (float)((float)(v20 * v16) - (float)(v21 * v15))) + (float)(v14 * v18))
      + (float)(v19 * v22);
  v24 = (float)((float)(v17 * (float)((float)(v21 * v14) - (float)(v19 * v16))) + (float)(v15 * v18))
      + (float)(v20 * v22);
  v25 = (float)((float)(v17 * (float)((float)(v19 * v15) - (float)(v20 * v14))) + (float)(v16 * v18))
      + (float)(v21 * v22);
  v26 = *((float *)this + 84) + v23;
  v27 = *((float *)this + 85) + v24;
  v28 = *((float *)this + 86);
  v29 = (float)((float)((float)(v6 * v20) - (float)(v17 * v9)) - (float)(v21 * *v2)) + (float)(v7 * v19);
  v30 = (float)((float)((float)(v6 * v21) - (float)(v17 * v7)) - (float)(v19 * v9)) + (float)(*v2 * v20);
  v31 = *v2 * v19;
  *a2 = (float)((float)((float)(v6 * v19) - (float)(v17 * *v2)) - (float)(v20 * v7)) + (float)(v9 * v21);
  a2[1] = v29;
  a2[2] = v30;
  a2[3] = (float)((float)(v31 + (float)(v17 * v6)) + (float)(v20 * v9)) + (float)(v21 * v7);
  result = v28 + v25;
  a2[4] = v26;
  a2[5] = v27;
  a2[6] = v28 + v25;
  return result;
}

uint64_t *physx::NpArticulationLink::setLinearDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2;
  uint64_t *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 12);
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 180) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 4u;
    return this;
  }
  v8 = v3[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 48) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 62) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getLinearDamping(physx::NpArticulationLink *this)
{
  uint64_t v1;
  char *v2;

  if ((*((_BYTE *)this + 380) & 4) != 0)
  {
    v2 = (char *)(*((_QWORD *)this + 14) + 180);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (char *)(v1 + 48);
    else
      v2 = (char *)this + 248;
  }
  return *(float *)v2;
}

uint64_t *physx::NpArticulationLink::setAngularDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2;
  uint64_t *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 12);
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 184) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 8u;
    return this;
  }
  v8 = v3[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 52) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 63) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getAngularDamping(physx::NpArticulationLink *this)
{
  uint64_t v1;
  char *v2;

  if ((*((_BYTE *)this + 380) & 8) != 0)
  {
    v2 = (char *)(*((_QWORD *)this + 14) + 184);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (char *)(v1 + 52);
    else
      v2 = (char *)this + 252;
  }
  return *(float *)v2;
}

uint64_t physx::NpArticulationLink::getArticulation(physx::NpArticulationLink *this)
{
  return *((_QWORD *)this + 48);
}

uint64_t physx::NpArticulationLink::getInboundJoint(physx::NpArticulationLink *this)
{
  return *((_QWORD *)this + 49);
}

uint64_t physx::NpArticulationLink::getInboundJointDof(physx::NpArticulationLink *this)
{
  return *((unsigned int *)this + 117);
}

uint64_t physx::NpArticulationLink::getNbChildren(physx::NpArticulationLink *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t physx::NpArticulationLink::getChildren(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (*(_DWORD *)(a1 + 456) - a4) & ~((int)(*(_DWORD *)(a1 + 456) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 448) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationLink::getLinkIndex(physx::NpArticulationLink *this)
{
  return *((unsigned int *)this + 116);
}

void *physx::NpArticulationLink::setCMassLocalPose(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int8x8_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  int v29;
  int v30;
  __n128 Stream;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  _QWORD *v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  float v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  void *result;
  uint64_t v72;
  int8x8_t v73;
  float **v74;
  unsigned int v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float *v92;
  float *v93;
  float *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int8x8_t v98;
  uint64_t v99;
  unsigned int v100;
  float *v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  _QWORD *v117;
  float *v118;
  float *v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154[7];
  uint64_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;

  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = sqrtf((float)((float)((float)(v3 * v3) + (float)(*a2 * *a2)) + (float)(v4 * v4)) + (float)(v5 * v5));
  v7 = *a2 / v6;
  v8 = v3 / v6;
  v9 = v4 / v6;
  v10 = v5 / v6;
  v154[0] = v7;
  v154[1] = v3 / v6;
  v154[2] = v4 / v6;
  v154[3] = v5 / v6;
  v12 = a2[4];
  v11 = a2[5];
  v154[4] = v12;
  v154[5] = v11;
  v145 = v11;
  v142 = a2[6];
  v154[6] = v142;
  if ((*(_BYTE *)(a1 + 381) & 4) != 0)
    v13 = (float *)(*(_QWORD *)(a1 + 112) + 224);
  else
    v13 = (float *)(a1 + 176);
  v14 = v13[3];
  v148 = v13[1];
  v150 = v13[2];
  v16 = v142;
  v15 = v11;
  v17 = (float)(v13[4] - v12) + (float)(v13[4] - v12);
  v18 = (float)(v13[5] - v11) + (float)(v13[5] - v11);
  v19 = (float)(v13[6] - v142) + (float)(v13[6] - v142);
  v130 = (float)(v9 * v18) - (float)(v8 * v19);
  v133 = -(float)(v8 * v18);
  v136 = v19;
  v138 = v18;
  v140 = v17;
  v126 = (float)(v8 * v17) - (float)(v7 * v18);
  v128 = (float)(v7 * v19) - (float)(v9 * v17);
  v123 = -(float)(v8 * v14);
  v124 = -(float)(v7 * v14);
  v152 = *v13;
  v121 = v7 * *v13;
  v122 = -(float)(v9 * v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 152))(&v155, a1);
  v20 = (float)(v157 * v157) + -0.5;
  v21 = (float)((float)((float)(v15 + v15) * *((float *)&v155 + 1)) + (float)(*(float *)&v155 * (float)(v12 + v12)))
      + (float)(v156 * (float)(v16 + v16));
  v22 = v158
      + (float)((float)((float)(v157
                              * (float)((float)(*((float *)&v155 + 1) * (float)(v16 + v16))
                                      - (float)(v156 * (float)(v15 + v15))))
                      + (float)((float)(v12 + v12) * v20))
              + (float)(*(float *)&v155 * v21));
  v23 = v159
      + (float)((float)((float)(v157
                              * (float)((float)(v156 * (float)(v12 + v12))
                                      - (float)(*(float *)&v155 * (float)(v16 + v16))))
                      + (float)((float)(v15 + v15) * v20))
              + (float)(*((float *)&v155 + 1) * v21));
  *(float *)v24.i32 = v160
                    + (float)((float)((float)(v157
                                            * (float)((float)(*(float *)&v155 * (float)(v15 + v15))
                                                    - (float)(*((float *)&v155 + 1) * (float)(v12 + v12))))
                                    + (float)((float)(v16 + v16) * v20))
                            + (float)(v156 * v21));
  v25 = (float)((float)((float)(v10 * *((float *)&v155 + 1)) + (float)(v157 * v8)) + (float)(v156 * v7))
      - (float)(v9 * *(float *)&v155);
  v26 = (float)((float)((float)(v10 * v156) + (float)(v157 * v9)) + (float)(*(float *)&v155 * v8))
      - (float)(v7 * *((float *)&v155 + 1));
  v161 = (float)((float)((float)(v10 * *(float *)&v155) + (float)(v157 * v7)) + (float)(*((float *)&v155 + 1) * v9))
       - (float)(v8 * v156);
  v162 = v25;
  v27 = (float)((float)((float)(v157 * v10) - (float)(*(float *)&v155 * v7)) - (float)(*((float *)&v155 + 1) * v8))
      - (float)(v156 * v9);
  v163 = v26;
  v164 = v27;
  v165 = v22;
  v166 = v23;
  v167 = *(float *)v24.i32;
  v28 = a1 + 96;
  *(float *)(a1 + 320) = v161;
  *(float *)(a1 + 324) = v25;
  *(float *)(a1 + 328) = v26;
  *(float *)(a1 + 332) = v27;
  *(float *)(a1 + 336) = v22;
  *(float *)(a1 + 340) = v23;
  *(_DWORD *)(a1 + 344) = v24.i32[0];
  v29 = *(_DWORD *)(a1 + 104) >> 30;
  v120 = v12;
  if (v29 == 3 || v29 == 2 && *(_BYTE *)(*(_QWORD *)v28 + 7689))
  {
    v30 = *(_DWORD *)(a1 + 380);
    if ((v30 & 0x100000) == 0)
      *(_DWORD *)(a1 + 380) = v30 | 0x200000;
    physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)(a1 + 96), (physx::Scb::Base *)(a1 + 96), v24);
    *(_DWORD *)(a1 + 380) |= 0x100000u;
  }
  else
  {
    physx::Sc::BodyCore::setBody2World(a1 + 128, (uint64_t)&v161);
  }
  v32 = v140;
  v33 = (float)(v10 * v10) + -0.5;
  v34 = v10 * v130;
  v35 = v10 * v126;
  v36 = v121 + (float)(v10 * v14);
  v37 = *(_DWORD *)(a1 + 104);
  v131 = v133 - (float)(v7 * v140);
  v134 = v34;
  if (v37 >> 30 == 2)
  {
    v38 = *(_QWORD **)v28;
    if (*(_BYTE *)(*(_QWORD *)v28 + 7689))
      goto LABEL_15;
  }
  else if (v37 >> 30 == 3)
  {
    v38 = *(_QWORD **)v28;
LABEL_15:
    v39 = *(float **)(a1 + 112);
    v127 = v124 + (float)(v10 * v152);
    v129 = v10 * v128;
    v125 = v123 + (float)(v10 * v148);
    if (!v39)
    {
      Stream = physx::Scb::Scene::getStream((uint64_t)v38, HIBYTE(v37) & 0xF);
      v39 = v40;
      *(_QWORD *)(a1 + 112) = v40;
      v38 = *(_QWORD **)(a1 + 96);
    }
    v39[56] = v7;
    v39[57] = v8;
    v39[58] = v9;
    v39[59] = v10;
    v39[60] = v120;
    v39[61] = v145;
    Stream.n128_f32[0] = v142;
    v39[62] = v142;
    physx::Scb::Scene::scheduleForUpdate(v38, (physx::Scb::Base *)(a1 + 96), (int8x8_t)Stream.n128_u64[0]);
    *(_DWORD *)(a1 + 380) |= 0x400u;
    v42 = v150;
    v41 = v152;
    v43 = v148;
    v45 = v136;
    v44 = v138;
    v46 = v131;
    v47 = v134;
    v49 = v127;
    v48 = v129;
    v51 = v122 + (float)(v10 * v150);
    v50 = v125;
    goto LABEL_19;
  }
  v143 = v36;
  v146 = v10 * v126;
  v52 = v10 * v128;
  v53 = v124 + (float)(v10 * v152);
  v54 = v123 + (float)(v10 * v148);
  v51 = v122 + (float)(v10 * v150);
  physx::Sc::BodyCore::setBody2Actor(a1 + 128, v154);
  v46 = v131;
  v47 = v134;
  v50 = v54;
  v49 = v53;
  v48 = v52;
  v36 = v143;
  v35 = v146;
  v44 = v138;
  v32 = v140;
  v43 = v148;
  v42 = v150;
  v41 = v152;
  v45 = v136;
LABEL_19:
  v55 = v46 - (float)(v9 * v45);
  v56 = v47 + (float)(v32 * v33);
  v57 = v48 + (float)(v44 * v33);
  v58 = v35 + (float)(v45 * v33);
  v59 = *(_QWORD *)(a1 + 32);
  if (v59)
  {
    v60 = *(_QWORD *)(v59 + 72);
    v61 = *(_DWORD *)(v59 + 80);
  }
  else
  {
    v61 = 0;
    v60 = 0;
  }
  v62 = 0;
  v147 = v56 - (float)(v7 * v55);
  v141 = v58 - (float)(v9 * v55);
  v144 = v57 - (float)(v8 * v55);
  v151 = (float)(v50 - (float)(v9 * v41)) + (float)(v42 * v7);
  v153 = (float)(v49 - (float)(v8 * v42)) + (float)(v43 * v9);
  v149 = (float)(v51 - (float)(v7 * v43)) + (float)(v41 * v8);
  v63 = (float)(v36 + (float)(v8 * v43)) + (float)(v9 * v42);
LABEL_23:
  if (v62 <= v61)
    v64 = v61;
  else
    v64 = v62;
  v65 = (unsigned __int8 *)(v60 + 16 * v62);
  v66 = v64 - v62 + 1;
  while (--v66)
  {
    v67 = v65 + 16;
    ++v62;
    v68 = *v65;
    v65 += 16;
    if (!v68)
    {
      v69 = (_QWORD *)*((_QWORD *)v67 - 1);
      if (!v69)
        break;
      v70 = v69[11];
      if (v69[2] == a1)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v70 + 24))(v69[11], 0);
      if (v69[3] == a1)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 24))(v70, 1);
      goto LABEL_23;
    }
  }
  result = *(void **)(a1 + 392);
  if (result)
  {
    v72 = (*(uint64_t (**)(void *))(*(_QWORD *)result + 96))(result);
    v74 = (float **)v72;
    v75 = *(_DWORD *)(v72 + 8);
    if ((v75 & 2) != 0)
      v76 = (float *)(*(_QWORD *)(v72 + 16) + 28);
    else
      v76 = (float *)(v72 + 60);
    v77 = v76[1];
    v78 = v76[2];
    v79 = v76[3];
    v80 = v76[4] + v76[4];
    v81 = v76[5] + v76[5];
    v82 = v76[6] + v76[6];
    v83 = (float)(v63 * v63) + -0.5;
    v84 = (float)((float)(v151 * v81) + (float)(v153 * v80)) + (float)(v149 * v82);
    v85 = v147
        + (float)((float)((float)(v63 * (float)((float)(v151 * v82) - (float)(v149 * v81))) + (float)(v80 * v83))
                + (float)(v153 * v84));
    v86 = v144
        + (float)((float)((float)(v63 * (float)((float)(v149 * v80) - (float)(v153 * v82))) + (float)(v81 * v83))
                + (float)(v151 * v84));
    v87 = v141
        + (float)((float)((float)(v63 * (float)((float)(v153 * v81) - (float)(v151 * v80))) + (float)(v82 * v83))
                + (float)(v149 * v84));
    v88 = (float)((float)((float)(v153 * v79) + (float)(v63 * *v76)) + (float)(v151 * v78)) - (float)(v77 * v149);
    v89 = (float)((float)((float)(v151 * v79) + (float)(v63 * v77)) + (float)(v149 * *v76)) - (float)(v78 * v153);
    v90 = (float)((float)((float)(v149 * v79) + (float)(v63 * v78)) + (float)(v153 * v77)) - (float)(*v76 * v151);
    *(float *)v73.i32 = (float)((float)(v63 * v79) - (float)(v153 * *v76)) - (float)(v151 * v77);
    v161 = v88;
    v162 = v89;
    v91 = *(float *)v73.i32 - (float)(v149 * v78);
    v163 = v90;
    v164 = v91;
    v165 = v85;
    v166 = v86;
    v167 = v87;
    if (v75 >> 30 == 2)
    {
      v92 = *(float **)v72;
      if (*((_BYTE *)*v74 + 7689))
        goto LABEL_42;
    }
    else if (v75 >> 30 == 3)
    {
      v92 = *(float **)v72;
LABEL_42:
      v93 = v74[2];
      if (!v93)
      {
        v73 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v92, HIBYTE(v75) & 0xF).n128_u64[0];
        v93 = v94;
        v74[2] = v94;
        v92 = *v74;
      }
      v93[7] = v88;
      v93[8] = v89;
      v93[9] = v90;
      v93[10] = v91;
      v93[11] = v85;
      v93[12] = v86;
      v93[13] = v87;
      result = physx::Scb::Scene::scheduleForUpdate(v92, (physx::Scb::Base *)v74, v73);
      *((_DWORD *)v74 + 2) |= 2u;
      goto LABEL_46;
    }
    result = physx::Sc::ArticulationJointCore::setChildPose((uint64_t)(v74 + 3), (uint64_t)&v161);
  }
LABEL_46:
  if (*(_DWORD *)(a1 + 456))
  {
    v95 = 0;
    v137 = -v149;
    v139 = (float)(v63 * v63) + -0.5;
    v132 = -v151;
    v135 = -v153;
    do
    {
      v96 = *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v95);
      v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 504))(v96);
      v99 = v97;
      v100 = *(_DWORD *)(v97 + 24);
      if ((v100 & 1) != 0)
        v101 = *(float **)(v97 + 32);
      else
        v101 = (float *)(v97 + 48);
      v102 = v97 + 16;
      v103 = v101[1];
      v104 = v101[2];
      v105 = v101[3];
      v106 = v101[4] + v101[4];
      v107 = v101[5] + v101[5];
      v108 = v101[6] + v101[6];
      v109 = (float)((float)(v151 * v107) + (float)(v153 * v106)) + (float)(v149 * v108);
      v110 = v147
           + (float)((float)((float)(v63 * (float)((float)(v107 * v137) + (float)(v151 * v108))) + (float)(v106 * v139))
                   + (float)(v153 * v109));
      v111 = v144
           + (float)((float)((float)(v63 * (float)((float)(v108 * v135) + (float)(v149 * v106))) + (float)(v107 * v139))
                   + (float)(v151 * v109));
      v112 = v141
           + (float)((float)((float)(v63 * (float)((float)(v106 * v132) + (float)(v153 * v107))) + (float)(v108 * v139))
                   + (float)(v149 * v109));
      v113 = (float)((float)((float)(v153 * v105) + (float)(v63 * *v101)) + (float)(v151 * v104)) - (float)(v103 * v149);
      v114 = (float)((float)((float)(v151 * v105) + (float)(v63 * v103)) + (float)(v149 * *v101)) - (float)(v104 * v153);
      v115 = (float)((float)((float)(v149 * v105) + (float)(v63 * v104)) + (float)(v153 * v103)) - (float)(*v101 * v151);
      *(float *)v98.i32 = (float)((float)(*v101 * v135) + (float)(v63 * v105)) + (float)(v132 * v103);
      v161 = v113;
      v162 = v114;
      v116 = *(float *)v98.i32 + (float)(v137 * v104);
      v163 = v115;
      v164 = v116;
      v165 = v110;
      v166 = v111;
      v167 = v112;
      if (v100 >> 30 == 2)
      {
        v117 = *(_QWORD **)v102;
        if (*(_BYTE *)(*(_QWORD *)v102 + 7689))
          goto LABEL_55;
      }
      else if (v100 >> 30 == 3)
      {
        v117 = *(_QWORD **)v102;
LABEL_55:
        v118 = *(float **)(v99 + 32);
        if (!v118)
        {
          v98 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v117, HIBYTE(v100) & 0xF).n128_u64[0];
          v118 = v119;
          *(_QWORD *)(v99 + 32) = v119;
          v117 = *(_QWORD **)(v99 + 16);
        }
        *v118 = v113;
        v118[1] = v114;
        v118[2] = v115;
        v118[3] = v116;
        v118[4] = v110;
        v118[5] = v111;
        v118[6] = v112;
        result = physx::Scb::Scene::scheduleForUpdate(v117, (physx::Scb::Base *)(v99 + 16), v98);
        *(_DWORD *)(v99 + 24) |= 1u;
        goto LABEL_59;
      }
      result = physx::Sc::ArticulationJointCore::setParentPose(v99 + 40, (uint64_t)&v161);
LABEL_59:
      ++v95;
    }
    while (v95 < *(unsigned int *)(a1 + 456));
  }
  return result;
}

_QWORD *physx::NpArticulationLink::addForce(uint64_t a1, float32x2_t *a2, int a3, int a4, double a5)
{
  float v8;
  _QWORD *v9;
  double v10;
  _BOOL4 v11;

  v8 = physx::NpRigidBodyTemplate<physx::PxArticulationLink>::addSpatialForce((float32x4_t *)a1, a2, 0, a3, a5);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(a1 + 384) + 200))(*(_QWORD *)(a1 + 384), v8);
  LODWORD(v10) = a2->i32[0];
  v11 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v10) = a2->i32[1];
    if (*(float *)&v10 == 0.0)
    {
      LODWORD(v10) = a2[1].i32[0];
      v11 = *(float *)&v10 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v9, v11, a4, v10);
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::addSpatialForce(float32x4_t *a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  uint64_t v10;
  float *f32;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float v34;
  int8x8_t v35;
  float32x2_t v36;
  float v37;
  int8x8_t v38;
  int8x8_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  float v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  int8x8_t v64;
  float32x2_t v65;
  float v66;
  int8x8_t v67;
  int8x8_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  double v78;
  float v79;
  double v80;
  float v81;

  switch(a4)
  {
    case 0:
      if (a2)
      {
        if ((a1[23].i8[12] & 1) != 0)
        {
          v6 = (float *)(a1[7].i64[0] + 164);
        }
        else
        {
          v5 = a1[19].i64[0];
          if (v5 && *(_BYTE *)(v5 + 31) == 1)
            v6 = (float *)(v5 + 44);
          else
            v6 = &a1[16].f32[3];
        }
        v9 = *v6 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v6));
        v80 = a5;
        v81 = v9;
        a2 = (float32x2_t *)&v80;
      }
      if (a3)
      {
        if ((a1[23].i8[12] & 2) != 0)
        {
          f32 = (float *)(a1[7].i64[0] + 168);
        }
        else
        {
          v10 = a1[19].i64[0];
          if (v10 && *(_BYTE *)(v10 + 31) == 1)
            f32 = (float *)(v10 + 32);
          else
            f32 = a1[16].f32;
        }
        v15 = f32[1];
        v16 = f32[2];
        v17 = a1[20];
        v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1);
        v19 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 2);
        v20 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 3);
        _Q7 = vaddq_f32(v17, v17);
        *(int32x2_t *)v17.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)_Q7.f32), 0);
        v22 = vmul_lane_f32(v18, *(float32x2_t *)_Q7.f32, 1);
        v23 = vmul_laneq_f32(v19, _Q7, 2);
        v24 = vmul_n_f32(v18, _Q7.f32[0]);
        v25 = vmul_n_f32(v19, _Q7.f32[0]);
        v26 = vmul_n_f32(v20, _Q7.f32[0]);
        v27 = vmul_lane_f32(v19, *(float32x2_t *)_Q7.f32, 1);
        v28 = vmul_lane_f32(v20, *(float32x2_t *)_Q7.f32, 1);
        v29 = vmul_laneq_f32(v20, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v17.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v17.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v24, v29);
        v34 = vsub_f32(v25, v28).f32[0];
        v35 = (int8x8_t)vsub_f32(v24, v29);
        v36 = vsub_f32(*(float32x2_t *)v17.f32, v23);
        v37 = vadd_f32(v27, v26).f32[0];
        v38 = (int8x8_t)vadd_f32(v25, v28);
        v39 = (int8x8_t)vsub_f32(v27, v26);
        v17.f32[0] = vsub_f32(*(float32x2_t *)v17.f32, v22).f32[0];
        v26.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v15 * v37) * v37, *f32 * v34, v34), v16 * v17.f32[0], v17.f32[0]);
        v23.i32[0] = a3[1].i32[0];
        v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v40.f32[0] = (float)(1.0 - v22.f32[1]) - v23.f32[1];
        v41 = vmul_n_f32(v40, *f32);
        v42 = (float32x2_t)vext_s8(v35, (int8x8_t)v36, 4uLL);
        v43 = vmul_n_f32(v42, v15);
        v44 = (float32x2_t)vext_s8(v38, v39, 4uLL);
        v45 = vmul_n_f32(v44, v16);
        v46 = vmla_f32(vmla_f32(vmul_f32(v42, v43), v40, v41), v44, v45);
        v36.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v43, v36).f32[0], _Q7.f32[0], v41.f32[0]), *(float *)v39.i32, v45.f32[0]);
        v47 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v43, v37), v41, v34), v45, v17.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v47, v23.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v36.f32[0])), vmul_f32(*a3, v46))));
        v47.f32[0] = (float)(v23.f32[0] * v26.f32[0]) + vaddv_f32(vmul_f32(*a3, v47));
        v78 = a5;
        v79 = v47.f32[0];
        a3 = (float32x2_t *)&v78;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    case 1:
      if (a2)
      {
        if ((a1[23].i8[12] & 1) != 0)
        {
          v8 = (float *)(a1[7].i64[0] + 164);
        }
        else
        {
          v7 = a1[19].i64[0];
          if (v7 && *(_BYTE *)(v7 + 31) == 1)
            v8 = (float *)(v7 + 44);
          else
            v8 = &a1[16].f32[3];
        }
        v12 = *v8 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v8));
        v80 = a5;
        v81 = v12;
        a2 = (float32x2_t *)&v80;
      }
      if (a3)
      {
        if ((a1[23].i8[12] & 2) != 0)
        {
          v14 = (float *)(a1[7].i64[0] + 168);
        }
        else
        {
          v13 = a1[19].i64[0];
          if (v13 && *(_BYTE *)(v13 + 31) == 1)
            v14 = (float *)(v13 + 32);
          else
            v14 = a1[16].f32;
        }
        v48 = v14[1];
        v49 = v14[2];
        v50 = a1[20];
        v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 1);
        v52 = (float32x2_t)vdup_laneq_s32((int32x4_t)v50, 2);
        v53 = (float32x2_t)vdup_laneq_s32((int32x4_t)v50, 3);
        _Q7 = vaddq_f32(v50, v50);
        *(int32x2_t *)v50.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)_Q7.f32), 0);
        v55 = vmul_lane_f32(v51, *(float32x2_t *)_Q7.f32, 1);
        v56 = vmul_laneq_f32(v52, _Q7, 2);
        v57 = vmul_n_f32(v51, _Q7.f32[0]);
        v58 = vmul_n_f32(v52, _Q7.f32[0]);
        v59 = vmul_n_f32(v53, _Q7.f32[0]);
        v60 = vmul_lane_f32(v52, *(float32x2_t *)_Q7.f32, 1);
        v61 = vmul_lane_f32(v53, *(float32x2_t *)_Q7.f32, 1);
        v62 = vmul_laneq_f32(v53, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v50.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v50.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v57, v62);
        v63 = vsub_f32(v58, v61).f32[0];
        v64 = (int8x8_t)vsub_f32(v57, v62);
        v65 = vsub_f32(*(float32x2_t *)v50.f32, v56);
        v66 = vadd_f32(v60, v59).f32[0];
        v67 = (int8x8_t)vadd_f32(v58, v61);
        v68 = (int8x8_t)vsub_f32(v60, v59);
        v50.f32[0] = vsub_f32(*(float32x2_t *)v50.f32, v55).f32[0];
        v59.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v48 * v66) * v66, *v14 * v63, v63), v49 * v50.f32[0], v50.f32[0]);
        v56.i32[0] = a3[1].i32[0];
        v69 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v69.f32[0] = (float)(1.0 - v55.f32[1]) - v56.f32[1];
        v70 = vmul_n_f32(v69, *v14);
        v71 = (float32x2_t)vext_s8(v64, (int8x8_t)v65, 4uLL);
        v72 = vmul_n_f32(v71, v48);
        v73 = (float32x2_t)vext_s8(v67, v68, 4uLL);
        v74 = vmul_n_f32(v73, v49);
        v75 = vmla_f32(vmla_f32(vmul_f32(v71, v72), v69, v70), v73, v74);
        v65.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v72, v65).f32[0], _Q7.f32[0], v70.f32[0]), *(float *)v68.i32, v74.f32[0]);
        v76 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v72, v66), v70, v63), v74, v50.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v76, v56.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v65.f32[0])), vmul_f32(*a3, v75))));
        v76.f32[0] = (float)(v56.f32[0] * v59.f32[0]) + vaddv_f32(vmul_f32(*a3, v76));
        v78 = a5;
        v79 = v76.f32[0];
        a3 = (float32x2_t *)&v78;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    case 2:
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    case 3:
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    default:
      return *(float *)&a5;
  }
  return *(float *)&a5;
}

_QWORD *physx::NpArticulationLink::addTorque(uint64_t a1, float32x2_t *a2, int a3, int a4, double a5)
{
  float v8;
  _QWORD *v9;
  double v10;
  _BOOL4 v11;

  v8 = physx::NpRigidBodyTemplate<physx::PxArticulationLink>::addSpatialForce((float32x4_t *)a1, 0, a2, a3, a5);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(a1 + 384) + 200))(*(_QWORD *)(a1 + 384), v8);
  LODWORD(v10) = a2->i32[0];
  v11 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v10) = a2->i32[1];
    if (*(float *)&v10 == 0.0)
    {
      LODWORD(v10) = a2[1].i32[0];
      v11 = *(float *)&v10 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v9, v11, a4, v10);
}

_QWORD *physx::NpArticulationLink::setForceAndTorque(uint64_t a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  float32x2_t *v5;
  float32x2_t *v7;
  int v8;
  uint64_t v9;
  float *v10;
  int v11;
  uint64_t v12;
  float *v13;
  physx::Scb::Base *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  physx::Scb::Base *v29;
  uint64_t v30;
  physx::Sc::BodySim **v31;
  float32x2_t *v32;
  double *v33;
  float v34;
  float v35;
  uint64_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float v54;
  int8x8_t v55;
  float32x2_t v56;
  float v57;
  int8x8_t v58;
  int8x8_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  int8x8_t v87;
  float32x2_t v88;
  float v89;
  int8x8_t v90;
  int8x8_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t *v100;
  float32x2_t *v101;
  _QWORD *v102;
  double v103;
  _BOOL4 v104;
  double v106;
  float v107;
  float32x2_t v108;
  float v109;

  v5 = a3;
  v7 = a2;
  switch(a4)
  {
    case 0:
      v8 = *(_DWORD *)(a1 + 380);
      if ((v8 & 1) != 0)
      {
        v10 = (float *)(*(_QWORD *)(a1 + 112) + 164);
      }
      else
      {
        v9 = *(_QWORD *)(a1 + 304);
        if (v9 && *(_BYTE *)(v9 + 31) == 1)
          v10 = (float *)(v9 + 44);
        else
          v10 = (float *)(a1 + 268);
      }
      v18 = *v10 * a2->f32[0];
      v19 = *v10 * a2->f32[1];
      v20 = *v10 * a2[1].f32[0];
      v108.f32[0] = v18;
      v108.f32[1] = v19;
      v109 = v20;
      if ((v8 & 2) != 0)
      {
        v22 = (float *)(*(_QWORD *)(a1 + 112) + 168);
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 304);
        if (v21 && *(_BYTE *)(v21 + 31) == 1)
          v22 = (float *)(v21 + 32);
        else
          v22 = (float *)(a1 + 256);
      }
      v34 = v22[1];
      v35 = v22[2];
      v36 = a1 + 96;
      v37 = *(float32x4_t *)(a1 + 320);
      v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
      v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v37, 2);
      v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v37, 3);
      _Q7 = vaddq_f32(v37, v37);
      *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)_Q7.f32), 0);
      v42 = vmul_lane_f32(v38, *(float32x2_t *)_Q7.f32, 1);
      v43 = vmul_laneq_f32(v39, _Q7, 2);
      v44 = vmul_n_f32(v38, _Q7.f32[0]);
      v45 = vmul_n_f32(v39, _Q7.f32[0]);
      v46 = vmul_n_f32(v40, _Q7.f32[0]);
      v47 = vmul_lane_f32(v39, *(float32x2_t *)_Q7.f32, 1);
      v48 = vmul_lane_f32(v40, *(float32x2_t *)_Q7.f32, 1);
      v49 = vmul_laneq_f32(v40, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v37.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v37.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v44, v49);
      v54 = vsub_f32(v45, v48).f32[0];
      v55 = (int8x8_t)vsub_f32(v44, v49);
      v56 = vsub_f32(*(float32x2_t *)v37.f32, v43);
      v57 = vadd_f32(v47, v46).f32[0];
      v58 = (int8x8_t)vadd_f32(v45, v48);
      v59 = (int8x8_t)vsub_f32(v47, v46);
      v37.f32[0] = vsub_f32(*(float32x2_t *)v37.f32, v42).f32[0];
      v43.i32[0] = a3[1].i32[0];
      v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v60.f32[0] = (float)(1.0 - v42.f32[1]) - v43.f32[1];
      v42.f32[0] = v43.f32[0]
                 * vmlas_n_f32(vmlas_n_f32((float)(v34 * v57) * v57, *v22 * v54, v54), v35 * v37.f32[0], v37.f32[0]);
      v61 = vmul_n_f32(v60, *v22);
      v62 = (float32x2_t)vext_s8(v55, (int8x8_t)v56, 4uLL);
      v63 = vmul_n_f32(v62, v34);
      v64 = (float32x2_t)vext_s8(v58, v59, 4uLL);
      v65 = vmul_n_f32(v64, v35);
      v66 = vmla_f32(vmla_f32(vmul_f32(v62, v63), v60, v61), v64, v65);
      v56.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v63, v56).f32[0], _Q7.f32[0], v61.f32[0]), *(float *)v59.i32, v65.f32[0]);
      v67 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v63, v57), v61, v54), v65, v37.f32[0]);
      v68 = vadd_f32(vmul_n_f32(v67, v43.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v56.f32[0])), vmul_f32(*a3, v66)));
      v69 = v42.f32[0] + vaddv_f32(vmul_f32(*a3, v67));
      v106 = *(double *)&v68;
      v107 = v69;
      v70 = *(_DWORD *)(a1 + 104);
      if (v70 >> 30 != 2)
      {
        if (v70 >> 30 == 3)
        {
          v17 = *(_QWORD **)v36;
          goto LABEL_42;
        }
        v17 = *(_QWORD **)v36;
LABEL_47:
        v30 = v17[548];
        v32 = &v108;
        v33 = &v106;
        v31 = (physx::Sc::BodySim **)(a1 + 128);
        goto LABEL_48;
      }
      v17 = *(_QWORD **)v36;
      if (!*(_BYTE *)(*(_QWORD *)v36 + 7689))
        goto LABEL_47;
LABEL_42:
      v100 = *(float32x2_t **)(a1 + 112);
      if (!v100)
      {
        physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v70) & 0xF);
        v100 = v101;
        *(_QWORD *)(a1 + 112) = v101;
        v17 = *(_QWORD **)(a1 + 96);
      }
      v100[37].f32[1] = v18;
      v100[38].f32[0] = v19;
      v100[38].f32[1] = v20;
      v28 = (int8x8_t)vadd_f32(v68, v100[39]);
      v100[39] = (float32x2_t)v28;
      *(float *)v28.i32 = v69 + v100[40].f32[0];
      v100[40].i32[0] = v28.i32[0];
      v29 = (physx::Scb::Base *)(a1 + 96);
LABEL_45:
      physx::Scb::Scene::scheduleForUpdate(v17, v29, v28);
      *(_DWORD *)(a1 + 380) |= 0x30000u;
LABEL_49:
      v102 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 200))(*(_QWORD *)(a1 + 384));
      LODWORD(v103) = v5->i32[0];
      v104 = 1;
      if (v5->f32[0] == 0.0)
      {
        LODWORD(v103) = v5->i32[1];
        if (*(float *)&v103 == 0.0)
        {
          LODWORD(v103) = v5[1].i32[0];
          v104 = *(float *)&v103 != 0.0;
        }
      }
      return physx::PxArticulationImpl::wakeUpInternal(v102, v104, 1, v103);
    case 1:
      v11 = *(_DWORD *)(a1 + 380);
      if ((v11 & 1) != 0)
      {
        v13 = (float *)(*(_QWORD *)(a1 + 112) + 164);
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 304);
        if (v12 && *(_BYTE *)(v12 + 31) == 1)
          v13 = (float *)(v12 + 44);
        else
          v13 = (float *)(a1 + 268);
      }
      v23 = *v13 * a2[1].f32[0];
      v108 = vmul_n_f32(*a2, *v13);
      v109 = v23;
      if ((v11 & 2) != 0)
      {
        v25 = (float *)(*(_QWORD *)(a1 + 112) + 168);
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 304);
        if (v24 && *(_BYTE *)(v24 + 31) == 1)
          v25 = (float *)(v24 + 32);
        else
          v25 = (float *)(a1 + 256);
      }
      v71 = v25[1];
      v72 = v25[2];
      v73 = *(float32x4_t *)(a1 + 320);
      v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.f32, 1);
      v75 = (float32x2_t)vdup_laneq_s32((int32x4_t)v73, 2);
      v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v73, 3);
      v14 = (physx::Scb::Base *)(a1 + 96);
      _Q7 = vaddq_f32(v73, v73);
      *(int32x2_t *)v73.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)_Q7.f32), 0);
      v78 = vmul_lane_f32(v74, *(float32x2_t *)_Q7.f32, 1);
      v79 = vmul_laneq_f32(v75, _Q7, 2);
      v80 = vmul_n_f32(v74, _Q7.f32[0]);
      v81 = vmul_n_f32(v75, _Q7.f32[0]);
      v82 = vmul_n_f32(v76, _Q7.f32[0]);
      v83 = vmul_lane_f32(v75, *(float32x2_t *)_Q7.f32, 1);
      v84 = vmul_lane_f32(v76, *(float32x2_t *)_Q7.f32, 1);
      v85 = vmul_laneq_f32(v76, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v73.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v73.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v80, v85);
      v86 = vsub_f32(v81, v84).f32[0];
      v87 = (int8x8_t)vsub_f32(v80, v85);
      v88 = vsub_f32(*(float32x2_t *)v73.f32, v79);
      v89 = vadd_f32(v83, v82).f32[0];
      v90 = (int8x8_t)vadd_f32(v81, v84);
      v91 = (int8x8_t)vsub_f32(v83, v82);
      v73.f32[0] = vsub_f32(*(float32x2_t *)v73.f32, v78).f32[0];
      v82.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v71 * v89) * v89, *v25 * v86, v86), v72 * v73.f32[0], v73.f32[0]);
      v79.i32[0] = a3[1].i32[0];
      v92 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v92.f32[0] = (float)(1.0 - v78.f32[1]) - v79.f32[1];
      v93 = vmul_n_f32(v92, *v25);
      v94 = (float32x2_t)vext_s8(v87, (int8x8_t)v88, 4uLL);
      v95 = vmul_n_f32(v94, v71);
      v96 = (float32x2_t)vext_s8(v90, v91, 4uLL);
      v97 = vmul_n_f32(v96, v72);
      v98 = vmla_f32(vmla_f32(vmul_f32(v94, v95), v92, v93), v96, v97);
      v88.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v95, v88).f32[0], _Q7.f32[0], v93.f32[0]), *(float *)v91.i32, v97.f32[0]);
      v99 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v89), v93, v86), v97, v73.f32[0]);
      a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v99, v79.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v88.f32[0])), vmul_f32(*a3, v98))));
      v99.f32[0] = (float)(v79.f32[0] * v82.f32[0]) + vaddv_f32(vmul_f32(*a3, v99));
      v106 = a5;
      v107 = v99.f32[0];
      a2 = &v108;
      a3 = (float32x2_t *)&v106;
      goto LABEL_40;
    case 2:
      v14 = (physx::Scb::Base *)(a1 + 96);
LABEL_40:
      physx::Scb::Body::addSpatialVelocity(v14, a2, a3, a5);
      goto LABEL_49;
    case 3:
      v15 = a1 + 96;
      v16 = *(_DWORD *)(a1 + 104);
      if (v16 >> 30 == 2)
      {
        v17 = *(_QWORD **)v15;
        if (*(_BYTE *)(*(_QWORD *)v15 + 7689))
          goto LABEL_29;
      }
      else
      {
        if (v16 >> 30 == 3)
        {
          v17 = *(_QWORD **)v15;
LABEL_29:
          v26 = *(_QWORD *)(a1 + 112);
          if (!v26)
          {
            physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v16) & 0xF);
            v26 = v27;
            *(_QWORD *)(a1 + 112) = v27;
            v17 = *(_QWORD **)(a1 + 96);
          }
          *(float32x2_t *)(v26 + 300) = *v7;
          *(_DWORD *)(v26 + 308) = v7[1].i32[0];
          v28 = (int8x8_t)vadd_f32(*v5, *(float32x2_t *)(v26 + 312));
          *(int8x8_t *)(v26 + 312) = v28;
          *(float *)v28.i32 = v5[1].f32[0] + *(float *)(v26 + 320);
          *(_DWORD *)(v26 + 320) = v28.i32[0];
          v29 = (physx::Scb::Base *)(a1 + 96);
          goto LABEL_45;
        }
        v17 = *(_QWORD **)v15;
      }
      v30 = v17[548];
      v31 = (physx::Sc::BodySim **)(a1 + 128);
      v32 = v7;
      v33 = (double *)v5;
LABEL_48:
      physx::Sc::BodyCore::setSpatialAcceleration(v31, v30, (uint64_t)v32, (uint64_t)v33);
      goto LABEL_49;
    default:
      goto LABEL_49;
  }
}

void physx::NpArticulationLink::clearForce(uint64_t a1, int a2, int8x8_t a3)
{
  physx::NpRigidBodyTemplate<physx::PxArticulationLink>::clearSpatialForce(a1, a2, 1, 0, a3);
}

void physx::NpRigidBodyTemplate<physx::PxArticulationLink>::clearSpatialForce(uint64_t a1, int a2, int a3, int a4, int8x8_t a5)
{
  physx::Scb::Base *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  if ((a2 - 1) < 2)
  {
    v8 = (physx::Scb::Base *)(a1 + 96);
    v13 = *(_DWORD *)(a1 + 104);
    if (v13 >> 30 != 3 && (v13 >> 30 != 2 || !*(_BYTE *)(*(_QWORD *)v8 + 7689)))
    {
      physx::Sc::BodyCore::clearSpatialVelocity((physx::Sc::BodySim **)(a1 + 128), a3, a4);
      return;
    }
    v14 = *(_QWORD *)(a1 + 112);
    if (!v14)
    {
      a5 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 96), HIBYTE(v13) & 0xF).n128_u64[0];
      *(_QWORD *)(a1 + 112) = v14;
    }
    v11 = *(_DWORD *)(a1 + 380);
    if (a3)
    {
      *(_DWORD *)(v14 + 324) = 0;
      *(_QWORD *)(v14 + 328) = 0;
      v11 &= ~0x40000u;
      v12 = 0x20000000;
      if (!a4)
        goto LABEL_27;
    }
    else
    {
      v12 = 0;
      if (!a4)
        goto LABEL_27;
    }
    *(_QWORD *)(v14 + 336) = 0;
    v11 &= ~0x80000u;
    v12 |= 0x40000000u;
    *(_DWORD *)(v14 + 344) = 0;
    goto LABEL_27;
  }
  if (a2 == 3 || !a2)
  {
    v8 = (physx::Scb::Base *)(a1 + 96);
    v9 = *(_DWORD *)(a1 + 104);
    if (v9 >> 30 != 3 && (v9 >> 30 != 2 || !*(_BYTE *)(*(_QWORD *)v8 + 7689)))
    {
      physx::Sc::BodyCore::clearSpatialAcceleration((physx::Sc::BodySim **)(a1 + 128), a3, a4);
      return;
    }
    v10 = *(_QWORD *)(a1 + 112);
    if (!v10)
    {
      a5 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 96), HIBYTE(v9) & 0xF).n128_u64[0];
      *(_QWORD *)(a1 + 112) = v10;
    }
    v11 = *(_DWORD *)(a1 + 380);
    if (a3)
    {
      *(_DWORD *)(v10 + 300) = 0;
      *(_QWORD *)(v10 + 304) = 0;
      v11 &= ~0x10000u;
      v12 = 0x8000000;
      if (!a4)
        goto LABEL_27;
    }
    else
    {
      v12 = 0;
      if (!a4)
      {
LABEL_27:
        *(_DWORD *)(a1 + 380) = v12 | v11;
        physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)(a1 + 96), v8, a5);
        return;
      }
    }
    *(_QWORD *)(v10 + 312) = 0;
    v11 &= ~0x20000u;
    v12 |= 0x10000000u;
    *(_DWORD *)(v10 + 320) = 0;
    goto LABEL_27;
  }
}

void physx::NpArticulationLink::clearTorque(uint64_t a1, int a2, int8x8_t a3)
{
  physx::NpRigidBodyTemplate<physx::PxArticulationLink>::clearSpatialForce(a1, a2, 0, 1, a3);
}

uint64_t physx::NpArticulationLink::setGlobalPose(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2, 1);
}

uint64_t *physx::NpArticulationLink::setLinearVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  uint64_t v6;
  physx::Scb::Base *v7;
  int8x8_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *result;
  _QWORD *v12;
  double v13;
  _BOOL4 v14;

  v6 = *(_QWORD *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  v7 = (physx::Scb::Base *)(a1 + 96);
  v8 = *a2;
  *(int8x8_t *)(a1 + 348) = *a2;
  v8.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 356) = v8.i32[0];
  v9 = *(_DWORD *)(a1 + 104) >> 30;
  if (v9 != 2)
  {
    if (v9 == 3)
    {
      v10 = *(_QWORD **)v7;
      goto LABEL_5;
    }
LABEL_10:
    *(int8x8_t *)(a1 + 208) = *a2;
    *(_DWORD *)(a1 + 216) = a2[1].i32[0];
    result = updateBodySim((uint64_t *)(a1 + 128));
    if (!v6)
      return result;
    goto LABEL_6;
  }
  v10 = *(_QWORD **)v7;
  if (!*(_BYTE *)(*(_QWORD *)v7 + 7689))
    goto LABEL_10;
LABEL_5:
  result = physx::Scb::Scene::scheduleForUpdate(v10, v7, v8);
  *(_DWORD *)(a1 + 380) |= 0x400000u;
  if (!v6)
    return result;
LABEL_6:
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 200))(*(_QWORD *)(a1 + 384));
  LODWORD(v13) = a2->i32[0];
  v14 = 1;
  if (*(float *)a2->i32 == 0.0)
  {
    LODWORD(v13) = a2->i32[1];
    if (*(float *)&v13 == 0.0)
    {
      LODWORD(v13) = a2[1].i32[0];
      v14 = *(float *)&v13 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v12, v14, a3, v13);
}

uint64_t *physx::NpArticulationLink::setAngularVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  uint64_t v6;
  physx::Scb::Base *v7;
  int8x8_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *result;
  _QWORD *v12;
  double v13;
  _BOOL4 v14;

  v6 = *(_QWORD *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  v7 = (physx::Scb::Base *)(a1 + 96);
  v8 = *a2;
  *(int8x8_t *)(a1 + 360) = *a2;
  v8.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 368) = v8.i32[0];
  v9 = *(_DWORD *)(a1 + 104) >> 30;
  if (v9 != 2)
  {
    if (v9 == 3)
    {
      v10 = *(_QWORD **)v7;
      goto LABEL_5;
    }
LABEL_10:
    *(int8x8_t *)(a1 + 224) = *a2;
    *(_DWORD *)(a1 + 232) = a2[1].i32[0];
    result = updateBodySim((uint64_t *)(a1 + 128));
    if (!v6)
      return result;
    goto LABEL_6;
  }
  v10 = *(_QWORD **)v7;
  if (!*(_BYTE *)(*(_QWORD *)v7 + 7689))
    goto LABEL_10;
LABEL_5:
  result = physx::Scb::Scene::scheduleForUpdate(v10, v7, v8);
  *(_DWORD *)(a1 + 380) |= 0x800000u;
  if (!v6)
    return result;
LABEL_6:
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 200))(*(_QWORD *)(a1 + 384));
  LODWORD(v13) = a2->i32[0];
  v14 = 1;
  if (*(float *)a2->i32 == 0.0)
  {
    LODWORD(v13) = a2->i32[1];
    if (*(float *)&v13 == 0.0)
    {
      LODWORD(v13) = a2[1].i32[0];
      v14 = *(float *)&v13 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v12, v14, a3, v13);
}

uint64_t *physx::NpArticulationLink::setMaxAngularVelocity(uint64_t *this, double a2)
{
  uint64_t *v2;
  physx::Scb::Base *v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  v3 = (physx::Scb::Base *)(this + 12);
  v4 = *(float *)&a2 * *(float *)&a2;
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    v6 = v2[14];
    if (!v6)
    {
      *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 188) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x10u;
    return this;
  }
  v8 = v2[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 56) = v4;
  }
  else
  {
    *((float *)v2 + 60) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getMaxAngularVelocity(physx::NpArticulationLink *this)
{
  uint64_t v1;
  float *v2;

  if ((*((_BYTE *)this + 380) & 0x10) != 0)
  {
    v2 = (float *)(*((_QWORD *)this + 14) + 188);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (float *)(v1 + 56);
    else
      v2 = (float *)((char *)this + 240);
  }
  return sqrtf(*v2);
}

uint64_t *physx::NpArticulationLink::setMaxLinearVelocity(uint64_t *this, double a2)
{
  uint64_t *v2;
  physx::Scb::Base *v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  v3 = (physx::Scb::Base *)(this + 12);
  v4 = *(float *)&a2 * *(float *)&a2;
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    v6 = v2[14];
    if (!v6)
    {
      *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 192) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x20u;
    return this;
  }
  v8 = v2[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 60) = v4;
  }
  else
  {
    *((float *)v2 + 61) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getMaxLinearVelocity(physx::NpArticulationLink *this)
{
  uint64_t v1;
  float *v2;

  if ((*((_BYTE *)this + 380) & 0x20) != 0)
  {
    v2 = (float *)(*((_QWORD *)this + 14) + 192);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (float *)(v1 + 60);
    else
      v2 = (float *)((char *)this + 244);
  }
  return sqrtf(*v2);
}

void physx::NpArticulationLink::visualize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  _DWORD *v14;
  int v15;
  float *v16;
  __int32 v17;
  _DWORD *v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float32x2_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int32x2_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float32x2_t v39;
  float32x2_t v44;
  float v45;
  uint64_t v46;
  float *v47;
  _DWORD *v48;
  float32x2_t v49;
  float32x2_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  int8x16_t v62;
  float v63;
  float v64;
  uint64_t v65;
  float v67;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  int v120;
  float *v121;
  float *v122;
  uint64_t v123;
  float v124;
  float v125;
  float v126;
  float *v127;
  float *v128;
  uint64_t v129;
  float v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float *v139;
  _BOOL4 v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  _BOOL4 v163;
  float v164;
  float v165;
  float v166;
  _BOOL4 v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float v172;
  float v173;
  float v174;
  _BOOL4 v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  uint64_t v179;
  float *v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  int v189;
  float v190;
  float v191;
  float v192;
  __int32 v193;
  float v194;
  float v195;
  int32x2_t v196;
  int8x16_t v197;
  float v198;
  void (**v199)(physx::Cm::ConstraintImmediateVisualizer *__hidden);
  float v200;
  float v201;
  uint64_t v202;
  float v203[3];
  float32x4_t v204;
  uint64_t v205;
  float v206;
  float32x2_t v207;
  __int128 v208;
  float v209;
  float v210;
  float v211;
  uint64_t v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float32x2_t v218;
  __int128 v219;
  float v220;
  float v221;
  float v222;
  float v223;
  unint64_t v224;
  float v225;
  float v226;

  physx::NpShapeManager::visualize((uint64_t *)(a1 + 40), a2, a3, a1);
  v6 = *(unsigned int *)(a1 + 104);
  if ((v6 & 1) != 0)
    v7 = *(_BYTE **)(a1 + 112);
  else
    v7 = (_BYTE *)(a1 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + 108);
  if ((*v7 & 1) == 0)
    goto LABEL_34;
  v8 = *(_DWORD *)(a3 + 8624);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a3 + 1872);
    v10 = *(float *)(v9 + 1792);
LABEL_13:
    v12 = (float *)(v9 + 1832);
    goto LABEL_14;
  }
  if (*(_BYTE *)(a3 + 8292))
    v11 = (float *)(a3 + 8196);
  else
    v11 = (float *)(*(_QWORD *)(a3 + 1872) + 1792);
  v10 = *v11;
  if (!*(_BYTE *)(a3 + 8302))
  {
    v9 = *(_QWORD *)(a3 + 1872);
    goto LABEL_13;
  }
  v12 = (float *)(a3 + 8236);
LABEL_14:
  v13 = v10 * *v12;
  if (v13 != 0.0)
  {
    (*(void (**)(float32x2_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 152))(&v207, a1);
    v14 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, (uint64_t)&v207);
    v221 = v13;
    v222 = v13;
    v223 = v13;
    v224 = 0xFF00FF00FFFF0000;
    v225 = -1.7015e38;
    physx::Cm::operator<<(v14, (uint64_t)&v221);
    v8 = *(_DWORD *)(a3 + 8624);
  }
  v15 = v8 & 0x20;
  if (v15 && *(_BYTE *)(a3 + 8294))
    v16 = (float *)(a3 + 8204);
  else
    v16 = (float *)(*(_QWORD *)(a3 + 1872) + 1800);
  *(float *)&v17 = v10 * *v16;
  if (*(float *)&v17 != 0.0)
  {
    v18 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, a1 + 320);
    v207.i32[0] = v17;
    v207.i32[1] = v17;
    LODWORD(v208) = v17;
    *(_QWORD *)((char *)&v208 + 4) = 0xFF00FF00FFFF0000;
    HIDWORD(v208) = -16776961;
    physx::Cm::operator<<(v18, (uint64_t)&v207);
    v15 = *(_DWORD *)(a3 + 8624) & 0x20;
  }
  if (v15 && *(_BYTE *)(a3 + 8296))
    v19 = (float *)(a3 + 8212);
  else
    v19 = (float *)(*(_QWORD *)(a3 + 1872) + 1808);
  v20 = v10 * *v19;
  if (v20 != 0.0)
  {
    *(_DWORD *)(a2 + 4) = 0xFFFFFF;
    *(_DWORD *)(a2 + 36) = 1065353216;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(_QWORD *)(a2 + 68) = 0;
    *(_QWORD *)(a2 + 60) = 0;
    *(_DWORD *)(a2 + 76) = 1065353216;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_DWORD *)(a2 + 96) = 1065353216;
    v21 = v20 * *(float *)(a1 + 356);
    v22 = v20 * 0.2;
    LODWORD(v208) = *(_DWORD *)(a1 + 344);
    v23 = vmul_n_f32(*(float32x2_t *)(a1 + 348), v20);
    v207 = *(float32x2_t *)(a1 + 336);
    *(float32x2_t *)((char *)&v208 + 4) = vadd_f32(v23, v207);
    *((float *)&v208 + 3) = v21 + *(float *)&v208;
    v209 = v22;
    physx::Cm::operator<<((_DWORD *)a2, (float *)&v207);
    v15 = *(_DWORD *)(a3 + 8624) & 0x20;
  }
  if (v15 && *(_BYTE *)(a3 + 8297))
    v24 = (float *)(a3 + 8216);
  else
    v24 = (float *)(*(_QWORD *)(a3 + 1872) + 1812);
  v25 = v10 * *v24;
  if (v25 != 0.0)
  {
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 36) = 1065353216;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(_QWORD *)(a2 + 68) = 0;
    *(_QWORD *)(a2 + 60) = 0;
    *(_DWORD *)(a2 + 76) = 1065353216;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_DWORD *)(a2 + 96) = 1065353216;
    v26 = v25 * *(float *)(a1 + 368);
    v27 = v25 * 0.2;
    LODWORD(v208) = *(_DWORD *)(a1 + 344);
    v28 = vmul_n_f32(*(float32x2_t *)(a1 + 360), v25);
    v207 = *(float32x2_t *)(a1 + 336);
    *(float32x2_t *)((char *)&v208 + 4) = vadd_f32(v28, v207);
    *((float *)&v208 + 3) = v26 + *(float *)&v208;
    v209 = v27;
    physx::Cm::operator<<((_DWORD *)a2, (float *)&v207);
  }
LABEL_34:
  v29 = *(unsigned int *)(a1 + 104);
  if ((v29 & 1) != 0)
    v30 = *(_BYTE **)(a1 + 112);
  else
    v30 = (_BYTE *)(a1 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v29 >> 24) & 0xF) + 3) + 108);
  if ((*v30 & 1) != 0)
  {
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v32 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 560))(v31, 0);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if ((float)(v32 * (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 560))(v33, 3)) != 0.0)
    {
      v35 = *(_DWORD *)(a1 + 380);
      if ((v35 & 2) != 0)
      {
        v37 = *(_QWORD *)(a1 + 112) + 168;
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 304);
        if (v36 && *(_BYTE *)(v36 + 31) == 1)
          v37 = v36 + 32;
        else
          v37 = a1 + 256;
      }
      v38 = *(float *)(v37 + 8);
      v39 = (float32x2_t)vrev64_s32(*(int32x2_t *)v37);
      __asm { FMOV            V3.2S, #1.0 }
      v44 = (float32x2_t)vbic_s8((int8x8_t)vdiv_f32(_D3, v39), (int8x8_t)vceqz_f32(v39));
      v45 = 1.0 / v38;
      _ZF = v38 == 0.0;
      v34.i32[0] = 0;
      if (!_ZF)
        *(float *)v34.i32 = v45;
      if ((v35 & 1) != 0)
      {
        v47 = (float *)(*(_QWORD *)(a1 + 112) + 164);
      }
      else
      {
        v46 = *(_QWORD *)(a1 + 304);
        if (v46 && *(_BYTE *)(v46 + 31) == 1)
          v47 = (float *)(v46 + 44);
        else
          v47 = (float *)(a1 + 268);
      }
      *(float *)v34.i32 = *(float *)v34.i32 * (float)(6.0 / (float)(1.0 / *v47));
      v194 = 6.0 / (float)(1.0 / *v47);
      v196 = v34;
      *(_DWORD *)(a2 + 4) = 0xFFFFFF;
      v48 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, a1 + 320);
      v49 = vmul_n_f32(v44, v194);
      v50 = vmul_f32(vsqrt_f32(vabs_f32(vadd_f32((float32x2_t)vdup_lane_s32(v196, 0), vsub_f32(v49, (float32x2_t)vrev64_s32((int32x2_t)v49))))), (float32x2_t)0x3F0000003F000000);
      v51 = sqrtf(vabds_f32(vaddv_f32(v49), *(float *)v196.i32)) * 0.5;
      v207 = vneg_f32(v50);
      *(float *)&v208 = -v51;
      *(float32x2_t *)((char *)&v208 + 4) = v50;
      *((float *)&v208 + 3) = v51;
      LOBYTE(v209) = 1;
      physx::Cm::operator<<(v48, (uint64_t *)&v207);
    }
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v53 = v32 * (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 560))(v52, 20);
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v55 = v32 * (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 560))(v54, 21);
    if (v53 != 0.0 || v55 != 0.0)
    {
      v199 = &off_24ED8E150;
      v200 = v53;
      v201 = v55;
      v202 = a2;
      v56 = *(_QWORD *)(a1 + 400);
      if (v56)
      {
        (*(void (**)(float32x2_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 152))(&v207, a1);
        (*(void (**)(float32x2_t *__return_ptr))(**(_QWORD **)(a1 + 392) + 88))(&v218);
        v57 = (float)(*((float *)&v208 + 1) * *((float *)&v208 + 1)) + -0.5;
        v58 = (float)((float)((float)(*((float *)&v219 + 3) + *((float *)&v219 + 3)) * v207.f32[1])
                    + (float)(v207.f32[0] * (float)(*((float *)&v219 + 2) + *((float *)&v219 + 2))))
            + (float)(*(float *)&v208 * (float)(v220 + v220));
        v221 = (float)((float)((float)(v207.f32[0] * *((float *)&v219 + 1))
                             + (float)(*((float *)&v208 + 1) * v218.f32[0]))
                     + (float)(v207.f32[1] * *(float *)&v219))
             - (float)(v218.f32[1] * *(float *)&v208);
        v222 = (float)((float)((float)(v207.f32[1] * *((float *)&v219 + 1))
                             + (float)(*((float *)&v208 + 1) * v218.f32[1]))
                     + (float)(*(float *)&v208 * v218.f32[0]))
             - (float)(*(float *)&v219 * v207.f32[0]);
        v223 = (float)((float)((float)(*(float *)&v208 * *((float *)&v219 + 1))
                             + (float)(*((float *)&v208 + 1) * *(float *)&v219))
                     + (float)(v207.f32[0] * v218.f32[1]))
             - (float)(v218.f32[0] * v207.f32[1]);
        *(float *)&v224 = (float)((float)((float)(*((float *)&v208 + 1) * *((float *)&v219 + 1))
                                        - (float)(v207.f32[0] * v218.f32[0]))
                                - (float)(v207.f32[1] * v218.f32[1]))
                        - (float)(*(float *)&v208 * *(float *)&v219);
        *((float *)&v224 + 1) = *((float *)&v208 + 2)
                              + (float)((float)((float)(*((float *)&v208 + 1)
                                                      * (float)((float)(v207.f32[1] * (float)(v220 + v220))
                                                              - (float)(*(float *)&v208
                                                                      * (float)(*((float *)&v219 + 3)
                                                                              + *((float *)&v219 + 3)))))
                                              + (float)((float)(*((float *)&v219 + 2) + *((float *)&v219 + 2)) * v57))
                                      + (float)(v207.f32[0] * v58));
        v225 = *((float *)&v208 + 3)
             + (float)((float)((float)(*((float *)&v208 + 1)
                                     * (float)((float)(*(float *)&v208
                                                     * (float)(*((float *)&v219 + 2) + *((float *)&v219 + 2)))
                                             - (float)(v207.f32[0] * (float)(v220 + v220))))
                             + (float)((float)(*((float *)&v219 + 3) + *((float *)&v219 + 3)) * v57))
                     + (float)(v207.f32[1] * v58));
        v226 = v209
             + (float)((float)((float)(*((float *)&v208 + 1)
                                     * (float)((float)(v207.f32[0]
                                                     * (float)(*((float *)&v219 + 3) + *((float *)&v219 + 3)))
                                             - (float)(v207.f32[1]
                                                     * (float)(*((float *)&v219 + 2) + *((float *)&v219 + 2)))))
                             + (float)((float)(v220 + v220) * v57))
                     + (float)(*(float *)&v208 * v58));
        (*(void (**)(float32x2_t *__return_ptr, uint64_t))(*(_QWORD *)v56 + 152))(&v207, v56);
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 392) + 64))(&v212);
        v59 = (float)(*((float *)&v208 + 1) * *((float *)&v208 + 1)) + -0.5;
        v60 = (float)((float)((float)(v216 + v216) * v207.f32[1]) + (float)(v207.f32[0] * (float)(v215 + v215)))
            + (float)(*(float *)&v208 * (float)(v217 + v217));
        v218.f32[0] = (float)((float)((float)(v207.f32[0] * v214) + (float)(*((float *)&v208 + 1) * *(float *)&v212))
                            + (float)(v207.f32[1] * v213))
                    - (float)(*((float *)&v212 + 1) * *(float *)&v208);
        v218.f32[1] = (float)((float)((float)(v207.f32[1] * v214)
                                    + (float)(*((float *)&v208 + 1) * *((float *)&v212 + 1)))
                            + (float)(*(float *)&v208 * *(float *)&v212))
                    - (float)(v213 * v207.f32[0]);
        *(float *)&v219 = (float)((float)((float)(*(float *)&v208 * v214) + (float)(*((float *)&v208 + 1) * v213))
                                + (float)(v207.f32[0] * *((float *)&v212 + 1)))
                        - (float)(*(float *)&v212 * v207.f32[1]);
        *((float *)&v219 + 1) = (float)((float)((float)(*((float *)&v208 + 1) * v214)
                                              - (float)(v207.f32[0] * *(float *)&v212))
                                      - (float)(v207.f32[1] * *((float *)&v212 + 1)))
                              - (float)(*(float *)&v208 * v213);
        *((float *)&v219 + 2) = *((float *)&v208 + 2)
                              + (float)((float)((float)(*((float *)&v208 + 1)
                                                      * (float)((float)(v207.f32[1] * (float)(v217 + v217))
                                                              - (float)(*(float *)&v208 * (float)(v216 + v216))))
                                              + (float)((float)(v215 + v215) * v59))
                                      + (float)(v207.f32[0] * v60));
        *((float *)&v219 + 3) = *((float *)&v208 + 3)
                              + (float)((float)((float)(*((float *)&v208 + 1)
                                                      * (float)((float)(*(float *)&v208 * (float)(v215 + v215))
                                                              - (float)(v207.f32[0] * (float)(v217 + v217))))
                                              + (float)((float)(v216 + v216) * v59))
                                      + (float)(v207.f32[1] * v60));
        v220 = v209
             + (float)((float)((float)(*((float *)&v208 + 1)
                                     * (float)((float)(v207.f32[0] * (float)(v216 + v216))
                                             - (float)(v207.f32[1] * (float)(v215 + v215))))
                             + (float)((float)(v217 + v217) * v59))
                     + (float)(*(float *)&v208 * v60));
        ((void (*)(uint64_t, uint64_t, uint64_t))v199[2])((uint64_t)&v199, (uint64_t)&v221, (uint64_t)&v218);
        v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 392) + 96))(*(_QWORD *)(a1 + 392));
        if (*(_WORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1) + 8) == 11)
        {
          v63 = v218.f32[1];
          v64 = v218.f32[0];
          v207 = v218;
          v65 = v219;
          v208 = v219;
          v209 = v220;
          _S17 = v224;
          v67 = *((float *)&v219 + 1);
          __asm { FMLA            S0, S17, V5.S[1] }
          if (_S0 < 0.0)
          {
            v64 = -v218.f32[0];
            v63 = -v218.f32[1];
            *(float *)&v65 = -*(float *)&v219;
            v218.f32[0] = -v218.f32[0];
            v218.f32[1] = -v218.f32[1];
            v67 = -*((float *)&v219 + 1);
            *(float *)&v219 = -*(float *)&v219;
            *((float *)&v219 + 1) = -*((float *)&v65 + 1);
          }
          v69 = (float)((float)((float)(*(float *)&v224 * v64) - (float)(v221 * v67)) - (float)(v222 * *(float *)&v65))
              + (float)(v63 * v223);
          v70 = (float)((float)((float)(*(float *)&v224 * v63) - (float)(v222 * v67)) - (float)(v223 * v64))
              + (float)(*(float *)&v65 * v221);
          v71 = (float)((float)((float)(*(float *)&v224 * *(float *)&v65) - (float)(v223 * v67)) - (float)(v221 * v63))
              + (float)(v64 * v222);
          v72 = (float)((float)((float)(v221 * v64) + (float)(*(float *)&v224 * v67)) + (float)(v222 * v63))
              + (float)(v223 * *(float *)&v65);
          if (v69 == 0.0)
          {
            v74 = 0.0;
            v75 = 0.0;
            v76 = 1.0;
          }
          else
          {
            v73 = sqrtf((float)((float)(v69 * v69) + 0.0) + (float)(v72 * v72));
            v74 = v69 / v73;
            v75 = 0.0 / v73;
            v76 = v72 / v73;
          }
          v118 = v74 / (float)(v76 + 1.0);
          v119 = 1.8447e19;
          if (v74 < 0.0)
            v119 = -1.8447e19;
          if (v76 == -1.0)
            v118 = v119;
          v120 = *(_DWORD *)(v61 + 8);
          if ((v120 & 0x40000) != 0)
          {
            v123 = *(_QWORD *)(v61 + 16);
            v121 = (float *)(v123 + 148);
            v122 = (float *)(v123 + 152);
          }
          else
          {
            v121 = (float *)(v61 + 88);
            v122 = (float *)(v61 + 92);
          }
          v124 = (float)(v70 * v76) - (float)(v72 * v75);
          v125 = (float)(v71 * v76) - (float)(v72 * v75);
          v126 = (float)(v69 * v74) + (float)(v72 * v76);
          if ((v120 & 0x20000) != 0)
          {
            v129 = *(_QWORD *)(v61 + 16);
            v127 = (float *)(v129 + 140);
            v128 = (float *)(v129 + 144);
          }
          else
          {
            v127 = (float *)(v61 + 96);
            v128 = (float *)(v61 + 104);
          }
          v130 = v126 + (float)(v70 * v75);
          if ((v120 & 0x400) != 0)
            v131 = (float *)(*(_QWORD *)(v61 + 16) + 108);
          else
            v131 = (float *)(v61 + 348);
          v132 = (float)(v124 - (float)(v71 * v74)) + (float)(v75 * v69);
          v133 = (float)(v125 - (float)(v69 * v75)) + (float)(v74 * v70);
          v134 = *v121;
          v135 = *v122;
          v136 = v130 + (float)(v71 * v75);
          v137 = *v127;
          v138 = *v128;
          v198 = *v131;
          if ((v120 & 0x4000) != 0)
            v139 = (float *)(*(_QWORD *)(v61 + 16) + 124);
          else
            v139 = (float *)(v61 + 364);
          v140 = fabsf(v118) > tanf(v135 - *v139);
          ((void (*)(uint64_t, uint64_t, int, float, float))v199[4])((uint64_t)&v199, (uint64_t)&v207, v140, v134, v135);
          v141 = v132 / (float)(v136 + 1.0);
          v142 = 1.8447e19;
          if (v133 >= 0.0)
            v143 = 1.8447e19;
          else
            v143 = -1.8447e19;
          if (v132 < 0.0)
            v142 = -1.8447e19;
          if (v136 == -1.0)
            v144 = v143;
          else
            v144 = v133 / (float)(v136 + 1.0);
          if (v136 == -1.0)
            v145 = v142;
          else
            v145 = v141;
          v146 = tanf(v137 * 0.25);
          v147 = tanf(v138 * 0.25);
          v148 = tanf(v198 * 0.25);
          v149 = fabsf(v144);
          v150 = fabsf(v145);
          v151 = (float)((float)((float)(v149 + v148) / (float)(1.0 - (float)(v149 * v148))) / v146)
               * (float)((float)((float)(v149 + v148) / (float)(1.0 - (float)(v149 * v148))) / v146);
          v152 = (float)((float)(v150 + v148) / (float)(1.0 - (float)(v150 * v148))) / v147;
          ((void (*)(uint64_t, uint64_t, int, float, float))v199[5])((uint64_t)&v199, (uint64_t)&v207, (float)(v151 + (float)(v152 * v152)) > 1.0, v146, v147);
        }
        else
        {
          v78 = v221;
          v77 = v222;
          v79 = v223;
          v80 = v77 * (float)(v77 + v77);
          v81 = v79 * (float)(v79 + v79);
          v82 = (float)(v78 + v78) * v222;
          v83 = (float)(v78 + v78) * v223;
          v84 = (float)(v78 + v78) * *(float *)&v224;
          v85 = (float)(v77 + v77) * v223;
          v86 = (float)(v77 + v77) * *(float *)&v224;
          *(float *)v62.i32 = (float)(v79 + v79) * *(float *)&v224;
          v87 = 1.0;
          v207.f32[0] = (float)(1.0 - v80) - v81;
          v207.f32[1] = v82 + *(float *)v62.i32;
          v88 = 1.0 - (float)(v78 * (float)(v78 + v78));
          *(float *)&v208 = v83 - v86;
          *((float *)&v208 + 1) = v82 - *(float *)v62.i32;
          *((float *)&v208 + 2) = v88 - v81;
          *((float *)&v208 + 3) = v85 + v84;
          v209 = v83 + v86;
          v210 = v85 - v84;
          v211 = v88 - v80;
          *(float32x2_t *)v62.i8 = v218;
          v89 = *((_QWORD *)&v219 + 1);
          v90 = v220;
          v91 = v218.f32[1];
          v192 = -*(float *)&v219;
          v195 = *((float *)&v219 + 1);
          v193 = v219;
          v197 = v62;
          v92 = *((float *)&v219 + 1);
          v93 = *(float *)&v219;
          v94 = v218.f32[1];
          if ((float)((float)(vmlas_n_f32(vmuls_lane_f32(v222, v218, 1), v221, v218.f32[0])
                             + (float)(v223 * *(float *)&v219))
                     + (float)(*(float *)&v224 * *((float *)&v219 + 1))) < 0.0)
          {
            v92 = -*((float *)&v219 + 1);
            *(float32x2_t *)v62.i8 = vneg_f32(v218);
            v218 = *(float32x2_t *)v62.i8;
            v93 = -*(float *)&v219;
            *(float *)&v219 = -*(float *)&v219;
            *((float *)&v219 + 1) = -*((float *)&v219 + 1);
            v94 = *(float *)&v62.i32[1];
          }
          v95 = (float)(*((float *)&v224 + 1) - *((float *)&v219 + 2))
              + (float)(*((float *)&v224 + 1) - *((float *)&v219 + 2));
          v96 = (float)(v225 - *((float *)&v219 + 3)) + (float)(v225 - *((float *)&v219 + 3));
          v97 = (float)(v226 - v220) + (float)(v226 - v220);
          v98 = (float)(v92 * v92) + -0.5;
          v99 = (float)((float)-(float)(v94 * v96) - (float)(*(float *)v62.i32 * v95)) - (float)(v93 * v97);
          v100 = (float)((float)(v92 * (float)((float)(v93 * v96) - (float)(v94 * v97))) + (float)(v95 * v98))
               - (float)(*(float *)v62.i32 * v99);
          v101 = (float)((float)(v92 * (float)((float)(*(float *)v62.i32 * v97) - (float)(v93 * v95)))
                       + (float)(v96 * v98))
               - (float)(v94 * v99);
          v102 = (float)((float)(v92 * (float)((float)(v94 * v95) - (float)(*(float *)v62.i32 * v96)))
                       + (float)(v97 * v98))
               - (float)(v93 * v99);
          v103 = (float)((float)((float)(v92 * v221) - (float)(*(float *)v62.i32 * *(float *)&v224))
                       - (float)(v94 * v223))
               + (float)(v222 * v93);
          v104 = (float)((float)((float)(v92 * v222) - (float)(v94 * *(float *)&v224)) - (float)(v93 * v221))
               + (float)(v223 * *(float *)v62.i32);
          v105 = (float)((float)((float)(v92 * v223) - (float)(v93 * *(float *)&v224))
                       - (float)(*(float *)v62.i32 * v222))
               + (float)(v221 * v94);
          v106 = (float)((float)((float)(v221 * *(float *)v62.i32) + (float)(v92 * *(float *)&v224))
                       + (float)(v94 * v222))
               + (float)(v93 * v223);
          *(float *)&v212 = v103;
          *((float *)&v212 + 1) = v104;
          v213 = v105;
          v214 = v106;
          v215 = v100;
          v216 = v101;
          v217 = v102;
          v107 = 0.0;
          v108 = 0.0;
          v109 = 0.0;
          if (v103 != 0.0)
          {
            v110 = sqrtf((float)((float)(v103 * v103) + 0.0) + (float)(v106 * v106));
            v108 = v103 / v110;
            v109 = 0.0 / v110;
            v87 = v106 / v110;
          }
          v111 = (float)((float)((float)(v103 * v87) - (float)(v106 * v108)) - (float)(v104 * v109))
               + (float)(v109 * v105);
          v112 = (float)((float)((float)(v104 * v87) - (float)(v106 * v109)) - (float)(v105 * v108))
               + (float)(v109 * v103);
          v113 = (float)((float)((float)(v105 * v87) - (float)(v106 * v109)) - (float)(v103 * v109))
               + (float)(v108 * v104);
          v114 = (float)((float)((float)(v103 * v108) + (float)(v106 * v87)) + (float)(v104 * v109))
               + (float)(v105 * v109);
          if (v112 == 0.0)
          {
            v117 = 1.0;
            v116 = 0.0;
          }
          else
          {
            v115 = sqrtf((float)(v112 * v112) + (float)(v114 * v114));
            v107 = 0.0 / v115;
            v116 = v112 / v115;
            v117 = v114 / v115;
          }
          v153 = (float)((float)((float)(v113 * v117) - (float)(v114 * v107)) - (float)(v111 * v116))
               + (float)(v107 * v112);
          if (v153 == 0.0)
          {
            v156 = 2.0;
            v190 = 0.0;
          }
          else
          {
            v154 = (float)((float)((float)(v111 * v107) + (float)(v114 * v117)) + (float)(v112 * v116))
                 + (float)(v113 * v107);
            v155 = sqrtf((float)((float)(v153 * v153) + 0.0) + (float)(v154 * v154));
            v190 = v153 / v155;
            v156 = (float)(v154 / v155) + 1.0;
          }
          if (*(_BYTE *)(v61 + 290))
          {
            v157 = sqrtf((float)((float)((float)(v109 * v109) + (float)(v108 * v108)) + (float)(v109 * v109))+ (float)(v87 * v87));
            if (v157 != 0.0)
            {
              v108 = v108 / v157;
              v87 = v87 / v157;
            }
            if (v87 < -1.0)
              v87 = -1.0;
            if (v87 > 1.0)
              v87 = 1.0;
            v158 = acosf(v87);
            v159 = v158 + v158;
            if (v108 >= 0.0)
              v160 = v159;
            else
              v160 = -v159;
            v161 = *(float *)(v61 + 88);
            v162 = *(float *)(v61 + 92);
            v163 = (float)(v160 + 0.01) > v162 || (float)(v160 + -0.01) < v161;
            v204.i64[0] = v197.i64[0];
            v204.i64[1] = __PAIR64__(LODWORD(v195), v193);
            v205 = v89;
            v206 = v90;
            ((void (*)(uint64_t, uint64_t, int, float, float))v199[4])((uint64_t)&v199, (uint64_t)&v204, v163, v161, v162);
          }
          v191 = -v91;
          if (*(_BYTE *)(v61 + 291))
          {
            v164 = *(float *)(v61 + 96);
            v165 = *(float *)(v61 + 100);
            v166 = atan2f(v116, v117 + 1.0) * 4.0;
            v167 = (float)(v166 + 0.01) > v165 || (float)(v166 + -0.01) < v164;
            v205 = v89;
            v206 = v90;
            v168.i64[0] = v197.i64[0];
            v168.i64[1] = __PAIR64__(v197.u32[0], v193);
            v169 = (float32x4_t)vuzp2q_s32((int32x4_t)v197, vzip1q_s32((int32x4_t)v197, (int32x4_t)v197));
            v169.i32[1] = v193;
            v169.f32[3] = v191;
            v170 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v168, (float32x4_t)xmmword_2261AB220), (float32x4_t)xmmword_2261AB230, v195), (float32x4_t)xmmword_2261AB240, v169);
            v171 = (float32x4_t)vextq_s8((int8x16_t)v170, v197, 0xCuLL);
            v171.i32[0] = v193;
            v171.f32[3] = v192;
            v204 = vmlaq_f32(v170, (float32x4_t)xmmword_2261AB250, v171);
            ((void (*)(uint64_t, uint64_t, int, float, float))v199[4])((uint64_t)&v199, (uint64_t)&v204, v167, -v165, -v164);
          }
          if (*(_BYTE *)(v61 + 292))
          {
            v172 = *(float *)(v61 + 104);
            v173 = *(float *)(v61 + 108);
            v174 = atan2f(v190, v156) * 4.0;
            v175 = (float)(v174 + 0.01) > v173 || (float)(v174 + -0.01) < v172;
            v205 = v89;
            v176 = (float32x4_t)v197;
            v176.i32[2] = v193;
            v206 = v90;
            v177 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v176, (int8x16_t)v176, 0xCuLL), (int8x16_t)v176, 8uLL);
            v176.i32[3] = v197.i32[0];
            v178 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v177, (int8x16_t)v177, 0xCuLL), (int8x16_t)v177, 8uLL);
            v177.f32[3] = v191;
            v178.f32[3] = v192;
            v204 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_f32(v176, (float32x4_t)xmmword_2261A9330), (float32x4_t)xmmword_2261A9340, v195), (float32x4_t)xmmword_2261A9350, v177), (float32x4_t)xmmword_22610BB60, v178);
            ((void (*)(uint64_t, uint64_t, int, float, float))v199[4])((uint64_t)&v199, (uint64_t)&v204, v175, -v173, -v172);
          }
          v179 = 0;
          v180 = (float *)(v61 + 116);
          v181 = (float *)&v208;
          do
          {
            if (*(_BYTE *)(v61 + v179 + 293) == 1)
            {
              v182 = *(v180 - 1);
              v183 = *v180;
              v184 = *(&v215 + v179);
              v185 = *(v181 - 2);
              v186 = *(v181 - 1);
              v187 = *v181;
              _NF = v184 > *v180 || v184 < v182;
              v204.f32[0] = *((float *)&v219 + 2) + (float)(v182 * v185);
              v204.f32[1] = *((float *)&v219 + 3) + (float)(v182 * v186);
              v204.f32[2] = v220 + (float)(v182 * v187);
              v203[0] = *((float *)&v219 + 2) + (float)(v183 * v185);
              v203[1] = *((float *)&v219 + 3) + (float)(v183 * v186);
              v203[2] = v220 + (float)(v183 * v187);
              if (_NF)
                v189 = 16711680;
              else
                v189 = 0xFFFFFF;
              ((void (*)(uint64_t, uint64_t, uint64_t, int))v199[7])((uint64_t)&v199, (uint64_t)&v204, (uint64_t)v203, v189);
            }
            ++v179;
            v180 += 2;
            v181 += 3;
          }
          while (v179 != 3);
        }
      }
    }
  }
}

const char *physx::PxAggregate::getConcreteTypeName(physx::PxAggregate *this)
{
  return "PxAggregate";
}

BOOL physx::PxAggregate::isKindOf(physx::PxAggregate *this, const char *a2)
{
  return !strcmp("PxAggregate", a2) || strcmp(a2, "PxBase") == 0;
}

const char *physx::PxArticulationLink::getConcreteTypeName(physx::PxArticulationLink *this)
{
  return "PxArticulationLink";
}

BOOL physx::PxArticulationLink::isKindOf(physx::PxArticulationLink *this, const char *a2)
{
  return !strcmp("PxArticulationLink", a2) || physx::PxRigidBody::isKindOf(this, a2);
}

uint64_t physx::NpArticulationLink::getType(physx::NpArticulationLink *this)
{
  return 2;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getScene(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v1 + 2) >> 30) - 1) > 1)
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 16;
  else
    return 0;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

float physx::NpRigidActorTemplate<physx::PxArticulationLink>::getWorldBounds@<S0>(physx::PxRigidActor *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v4;
  float v5;
  float v6;
  float result;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;

  physx::NpShapeManager::getWorldBounds((physx::PxRigidActor *)((char *)a1 + 40), a1, (uint64_t)&v11);
  v4 = (float)(v12 + v14) * 0.5;
  v5 = (float)((float)(v14 - v12) * 0.5) * a3;
  v6 = v4 - v5;
  result = v4 + v5;
  v8 = vmul_f32(vadd_f32(v11, v13), (float32x2_t)0x3F0000003F000000);
  v9 = vmul_n_f32(vmul_f32(vsub_f32(v13, v11), (float32x2_t)0x3F0000003F000000), a3);
  *(float32x2_t *)a2 = vsub_f32(v8, v9);
  *(float *)(a2 + 8) = v6;
  *(float32x2_t *)(a2 + 12) = vadd_f32(v8, v9);
  *(float *)(a2 + 20) = result;
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxArticulationLink>::setActorFlag(int32x2_t *result, int a2, int a3, int8x8_t a4)
{
  int32x2_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  int32x2_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int32x2_t **v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  physx::Scb::Base *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  int32x2_t *v24;
  int32x2_t *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  int32x2_t **v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int32x2_t *v34;
  int32x2_t *v35;
  int v36;
  unsigned int v37;
  int32x2_t *v38;
  int32x2_t *v39;

  v6 = result;
  if (a2 != 8)
    goto LABEL_35;
  v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  v8 = (int32x2_t *)((char *)result + v7);
  v9 = *(unsigned int *)((char *)result[1].u32 + v7);
  if ((v9 & 1) != 0)
    v10 = (int32x2_t *)v8[2];
  else
    v10 = (int32x2_t *)((char *)v8 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v9 >> 24) & 0xF) + 3) + 12);
  v11 = (uint64_t)*v8;
  v12 = v10->u8[0];
  if ((v12 & 8) == 0 || (a3 & 1) != 0)
  {
    if ((v12 & 8) != 0 || !a3)
      goto LABEL_35;
    if (v11)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
      LODWORD(v9) = *(__int32 *)((char *)v6[1].i32 + v7);
    }
    v18 = v12 | 8;
    v19 = (physx::Scb::Base *)((char *)v6 + v7);
    v20 = BYTE3(v9) & 0xF;
    v21 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v20 + 3);
    v22 = v9 >> 30;
    if (v22 == 2)
    {
      v23 = *(_QWORD **)v19;
      if (*(_BYTE *)(*(_QWORD *)v19 + 7689))
        goto LABEL_28;
    }
    else if (v22 == 3)
    {
      v23 = *(_QWORD **)v19;
LABEL_28:
      v27 = (_BYTE *)*((_QWORD *)v19 + 2);
      if (!v27)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v23, v20).n128_u64[0];
        v27 = v28;
        *((_QWORD *)v19 + 2) = v28;
        v23 = *(_QWORD **)v19;
      }
      *v27 = v18;
      physx::Scb::Scene::scheduleForUpdate(v23, v19, a4);
      *((_DWORD *)v19 + 2) |= 1u;
LABEL_34:
      result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v6 + 576))(v6);
      goto LABEL_35;
    }
    v29 = (char *)v19 + v21;
    if (v18 != *((unsigned __int8 *)v19 + v21 + 12))
    {
      v29[12] = v18;
      if (*(_QWORD *)v29)
        (*(void (**)(_QWORD))(**(_QWORD **)v29 + 16))(*(_QWORD *)v29);
    }
    goto LABEL_34;
  }
  result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 584))(result);
  v13 = v12 & 0xFFFFFFF7;
  v14 = (int32x2_t **)((char *)v6 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18));
  v15 = *((unsigned int *)v14 + 2);
  v16 = (v15 >> 24) & 0xF;
  v17 = v15 >> 30;
  if (v17 == 2)
  {
    result = *v14;
    if ((*v14)[961].i8[1])
      goto LABEL_18;
LABEL_21:
    v26 = (char *)v14 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v16 + 3);
    if (v13 != v26[12])
    {
      v26[12] = v13;
      result = *(int32x2_t **)v26;
      if (*(_QWORD *)v26)
        result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
    }
    goto LABEL_24;
  }
  if (v17 != 3)
    goto LABEL_21;
  result = *v14;
LABEL_18:
  v24 = v14[2];
  if (!v24)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v16).n128_u64[0];
    v24 = v25;
    v14[2] = v25;
    result = *v14;
  }
  v24->i8[0] = v13;
  result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v14, a4);
  *((_DWORD *)v14 + 2) |= 1u;
LABEL_24:
  if (v11 && *(_QWORD *)&v6[4])
    result = physx::NpActor::addConstraintsToSceneInternal(v6 + 3);
LABEL_35:
  v30 = (int32x2_t **)((char *)v6 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18));
  v31 = *((unsigned int *)v30 + 2);
  if (a3)
  {
    if ((v31 & 1) != 0)
    {
      v34 = v30[2];
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
    }
    else
    {
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
      v34 = (int32x2_t *)(v33 + 12);
    }
    v36 = v34->u8[0] | a2;
  }
  else
  {
    if ((v31 & 1) != 0)
    {
      v35 = v30[2];
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
    }
    else
    {
      LODWORD(v32) = BYTE3(v31) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
      v35 = (int32x2_t *)(v33 + 12);
    }
    v36 = v35->u8[0] & ~a2;
  }
  v37 = v31 >> 30;
  if (v37 == 2)
  {
    result = *v30;
    if ((*v30)[961].i8[1])
      goto LABEL_48;
  }
  else if (v37 == 3)
  {
    result = *v30;
LABEL_48:
    v38 = v30[2];
    if (!v38)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v32).n128_u64[0];
      v38 = v39;
      v30[2] = v39;
      result = *v30;
    }
    v38->i8[0] = v36;
    result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v30, a4);
    *((_DWORD *)v30 + 2) |= 1u;
    return result;
  }
  if (v36 != v33[12])
  {
    v33[12] = v36;
    result = *(int32x2_t **)v33;
    if (*(_QWORD *)v33)
      return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxArticulationLink>::setActorFlags(int32x2_t *result, _BYTE *a2, int8x8_t a3)
{
  int32x2_t *v4;
  uint64_t v5;
  int32x2_t *v6;
  unint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int32x2_t **v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  physx::Scb::Base *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  int32x2_t *v22;
  int32x2_t *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  int32x2_t **v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int32x2_t *v33;
  int32x2_t *v34;
  char *v35;

  v4 = result;
  v5 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  v6 = (int32x2_t *)((char *)result + v5);
  v7 = *(unsigned int *)((char *)result[1].u32 + v5);
  if ((v7 & 1) != 0)
    v8 = (int32x2_t *)v6[2];
  else
    v8 = (int32x2_t *)((char *)v6 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v7 >> 24) & 0xF) + 3) + 12);
  v9 = (uint64_t)*v6;
  v10 = v8->u8[0];
  if ((*a2 & 8) != 0 || (v10 & 8) == 0)
  {
    if ((*a2 & 8) == 0 || (v10 & 8) != 0)
      goto LABEL_34;
    if (v9)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      v5 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
      LODWORD(v7) = *(__int32 *)((char *)v4[1].i32 + v5);
    }
    v16 = v10 | 8;
    v17 = (physx::Scb::Base *)((char *)v4 + v5);
    v18 = BYTE3(v7) & 0xF;
    v19 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v18 + 3);
    v20 = v7 >> 30;
    if (v20 == 2)
    {
      v21 = *(_QWORD **)v17;
      if (*(_BYTE *)(*(_QWORD *)v17 + 7689))
        goto LABEL_27;
    }
    else if (v20 == 3)
    {
      v21 = *(_QWORD **)v17;
LABEL_27:
      v25 = (_BYTE *)*((_QWORD *)v17 + 2);
      if (!v25)
      {
        a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v21, v18).n128_u64[0];
        v25 = v26;
        *((_QWORD *)v17 + 2) = v26;
        v21 = *(_QWORD **)v17;
      }
      *v25 = v16;
      physx::Scb::Scene::scheduleForUpdate(v21, v17, a3);
      *((_DWORD *)v17 + 2) |= 1u;
LABEL_33:
      result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v4 + 576))(v4);
      goto LABEL_34;
    }
    v27 = (char *)v17 + v19;
    if (v16 != *((unsigned __int8 *)v17 + v19 + 12))
    {
      v27[12] = v16;
      if (*(_QWORD *)v27)
        (*(void (**)(_QWORD))(**(_QWORD **)v27 + 16))(*(_QWORD *)v27);
    }
    goto LABEL_33;
  }
  result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 584))(result);
  v11 = v10 & 0xFFFFFFF7;
  v12 = (int32x2_t **)((char *)v4 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18));
  v13 = *((unsigned int *)v12 + 2);
  v14 = (v13 >> 24) & 0xF;
  v15 = v13 >> 30;
  if (v15 == 2)
  {
    result = *v12;
    if ((*v12)[961].i8[1])
      goto LABEL_17;
LABEL_20:
    v24 = (char *)v12 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v14 + 3);
    if (v11 != v24[12])
    {
      v24[12] = v11;
      result = *(int32x2_t **)v24;
      if (*(_QWORD *)v24)
        result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
    }
    goto LABEL_23;
  }
  if (v15 != 3)
    goto LABEL_20;
  result = *v12;
LABEL_17:
  v22 = v12[2];
  if (!v22)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v14).n128_u64[0];
    v22 = v23;
    v12[2] = v23;
    result = *v12;
  }
  v22->i8[0] = v11;
  result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v12, a3);
  *((_DWORD *)v12 + 2) |= 1u;
LABEL_23:
  if (v9 && *(_QWORD *)&v4[4])
    result = physx::NpActor::addConstraintsToSceneInternal(v4 + 3);
LABEL_34:
  v28 = *a2;
  v29 = (int32x2_t **)((char *)v4 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18));
  v30 = *((unsigned int *)v29 + 2);
  v31 = (v30 >> 24) & 0xF;
  v32 = v30 >> 30;
  if (v32 == 2)
  {
    result = *v29;
    if ((*v29)[961].i8[1])
      goto LABEL_38;
  }
  else if (v32 == 3)
  {
    result = *v29;
LABEL_38:
    v33 = v29[2];
    if (!v33)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v31).n128_u64[0];
      v33 = v34;
      v29[2] = v34;
      result = *v29;
    }
    v33->i8[0] = v28;
    result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v29, a3);
    *((_DWORD *)v29 + 2) |= 1u;
    return result;
  }
  v35 = (char *)v29 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v31 + 3);
  if (v28 != v35[12])
  {
    v35[12] = v28;
    result = *(int32x2_t **)v35;
    if (*(_QWORD *)v35)
      return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getActorFlags@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;

  v2 = result + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  v3 = *(unsigned int *)(v2 + 8);
  if ((v3 & 1) != 0)
    v4 = *(_BYTE **)(v2 + 16);
  else
    v4 = (_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + v2 + 12);
  *a2 = *v4;
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxArticulationLink>::setDominanceGroup(uint64_t a1, char a2, int8x8_t a3)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  v4 = (_DWORD *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  v5 = v4[2];
  v6 = (v5 >> 24) & 0xF;
  v7 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  v8 = v5 >> 30;
  if (v8 == 2)
  {
    v9 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v8 == 3)
  {
    v9 = *(_QWORD **)v4;
LABEL_5:
    v10 = *((_QWORD *)v4 + 2);
    if (!v10)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v9, v6).n128_u64[0];
      v10 = v11;
      *((_QWORD *)v4 + 2) = v11;
      v9 = *(_QWORD **)v4;
    }
    *(_BYTE *)(v10 + 1) = a2;
    result = physx::Scb::Scene::scheduleForUpdate(v9, (physx::Scb::Base *)v4, a3);
    v4[2] |= 2u;
    return result;
  }
  *((_BYTE *)v4 + v7 + 14) = a2;
  result = *(_QWORD **)((char *)v4 + v7);
  if (result)
    return physx::Sc::ActorSim::setActorsInteractionsDirty(result, 8, 0, 1, a3);
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getDominanceGroup(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 *v3;

  v1 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  v2 = *(unsigned int *)(v1 + 8);
  if ((v2 & 2) != 0)
    v3 = (unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 1);
  else
    v3 = (unsigned __int8 *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v2 >> 24) & 0xF) + 3) + v1 + 14);
  return *v3;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::setOwnerClient(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v9 = result + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  if (*(_QWORD *)v9)
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpActorTemplate.h";
    v11 = "Attempt to set the client id when an actor is already in a scene.";
    v12 = physx::shdfnd::Foundation::mInstance;
    v13 = 196;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  v14 = *(unsigned int *)(v9 + 8);
  if (v14 >> 30 == 3 || v14 >> 30 == 2 && MEMORY[0x1E09])
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbActor.h";
    v11 = "Attempt to set the client id when an actor is buffering";
    v12 = physx::shdfnd::Foundation::mInstance;
    v13 = 182;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  *(_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v14 >> 24) & 0xF) + 3) + v9 + 11) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getOwnerClient(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  return *(unsigned __int8 *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v1 + 11) & 0xF) + 3)
                            + v1
                            + 11);
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getAggregate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 80);
  if (!(_DWORD)v2)
    return 0;
  for (i = *(_QWORD *)(v1 + 72) + 8; *(_BYTE *)(i - 8) != 1; i += 16)
  {
    if (!--v2)
      return 0;
  }
  return *(_QWORD *)i;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::detachShape(physx::PxRigidActor *a1, physx::NpShape *a2, char a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  physx::NpShapeManager *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v13 = (physx::PxRigidActor *)((char *)a1 + 40);
  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 247, "PxRigidActor::detachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v18);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  result = physx::NpShapeManager::detachShape(v13, a2, a1, a3, a4);
  if ((result & 1) == 0)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 253, "PxRigidActor::detachShape: shape is not attached to this actor!", v15, v16, v17, a10);
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getNbShapes(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getShapes(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1)
    v4 = (_QWORD *)*v4;
  v6 = (v5 - a4) & ~((v5 - a4) >> 31);
  if (v6 >= a3)
    result = a3;
  else
    result = v6;
  if ((_DWORD)result)
  {
    v8 = &v4[a4];
    v9 = result;
    do
    {
      v10 = *v8++;
      *a2++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getNbConstraints(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 80);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(result) = 0;
  v4 = *(unsigned __int8 **)(v1 + 72);
  do
  {
    v5 = *v4;
    v4 += 16;
    if (v5)
      result = result;
    else
      result = (result + 1);
    --v2;
  }
  while (v2);
  return result;
}

unint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getConstraints(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return physx::NpActor::getConnectors<physx::Gu::BVHStructure>(a1 + 24, 0, a2, a3, a4);
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getCMassLocalPose@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  if ((*(_BYTE *)(a1 + 381) & 4) != 0)
    v2 = *(_QWORD *)(a1 + 112) + 224;
  else
    v2 = a1 + 176;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 16);
  result = *(float *)(v2 + 24);
  *(float *)(a2 + 24) = result;
  return result;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMass(uint64_t *result, double a2)
{
  uint64_t *v2;
  physx::Scb::Base *v3;
  float v4;
  BOOL v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v3 = (physx::Scb::Base *)(result + 12);
  v4 = 1.0 / *(float *)&a2;
  v5 = *(float *)&a2 <= 0.0;
  LODWORD(a2) = 0;
  if (v5)
    v6 = 0.0;
  else
    v6 = v4;
  v7 = *((_DWORD *)result + 26);
  if (v7 >> 30 == 2)
  {
    result = *(uint64_t **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_8;
  }
  else if (v7 >> 30 == 3)
  {
    result = *(uint64_t **)v3;
LABEL_8:
    v8 = v2[14];
    if (!v8)
    {
      *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v7) & 0xF).n128_u64[0];
      v8 = v9;
      v2[14] = v9;
      result = (uint64_t *)v2[12];
    }
    *(float *)(v8 + 164) = v6;
    result = physx::Scb::Scene::scheduleForUpdate(result, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 1u;
    return result;
  }
  v10 = v2[38];
  if (v10 && *(_BYTE *)(v10 + 31) == 1)
  {
    *(float *)(v10 + 44) = v6;
  }
  else
  {
    *((float *)v2 + 67) = v6;
    return updateBodySim(v2 + 16);
  }
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMass(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  float result;

  if ((*(_BYTE *)(a1 + 380) & 1) != 0)
  {
    v2 = (float *)(*(_QWORD *)(a1 + 112) + 164);
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 304);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (float *)(v1 + 44);
    else
      v2 = (float *)(a1 + 268);
  }
  result = 0.0;
  if (*v2 > 0.0)
    return 1.0 / *v2;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getInvMass(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 380) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 112) + 164;
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 304);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = v1 + 44;
    else
      v2 = a1 + 268;
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMassSpaceInertiaTensor(uint64_t a1, float32x2_t *a2)
{
  physx::Scb::Base *v3;
  int8x8_t v9;
  float v10;
  int8x8_t v11;
  float v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *result;
  int8x8_t v18;
  float v19;

  v3 = (physx::Scb::Base *)(a1 + 96);
  __asm { FMOV            V2.2S, #1.0 }
  v11 = (int8x8_t)vdiv_f32(_D2, *a2);
  v9 = vbic_s8(v11, (int8x8_t)vceqz_f32(*a2));
  v11.i32[0] = a2[1].i32[0];
  v10 = 1.0 / *(float *)v11.i32;
  _ZF = *(float *)v11.i32 == 0.0;
  v11.i32[0] = 0;
  if (_ZF)
    v12 = 0.0;
  else
    v12 = v10;
  v18 = v9;
  v19 = v12;
  v13 = *(_DWORD *)(a1 + 104);
  if (v13 >> 30 == 2)
  {
    v14 = *(_QWORD **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_8;
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v18);
  }
  if (v13 >> 30 != 3)
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v18);
  v14 = *(_QWORD **)v3;
LABEL_8:
  v15 = *(_QWORD *)(a1 + 112);
  if (!v15)
  {
    v11 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v14, HIBYTE(v13) & 0xF).n128_u64[0];
    v15 = v16;
    *(_QWORD *)(a1 + 112) = v16;
    v14 = *(_QWORD **)(a1 + 96);
  }
  *(int8x8_t *)(v15 + 168) = v9;
  *(float *)(v15 + 176) = v12;
  result = physx::Scb::Scene::scheduleForUpdate(v14, v3, v11);
  *(_DWORD *)(a1 + 380) |= 2u;
  return result;
}

float32x2_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMassSpaceInertiaTensor@<X0>(float32x2_t *result@<X0>, uint64_t a2@<X8>)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float v4;
  float v5;
  float v7;

  if ((result[47].i8[4] & 2) != 0)
  {
    v3 = (float32x2_t *)(*(_QWORD *)&result[14] + 168);
  }
  else
  {
    v2 = (float32x2_t *)result[38];
    if (v2 && v2[3].i8[7] == 1)
      v3 = v2 + 4;
    else
      v3 = result + 32;
  }
  v4 = v3[1].f32[0];
  v5 = 1.0 / v4;
  _ZF = v4 == 0.0;
  v7 = 0.0;
  if (!_ZF)
    v7 = v5;
  __asm { FMOV            V3.2S, #1.0 }
  *(int8x8_t *)a2 = vbic_s8((int8x8_t)vdiv_f32(_D3, *v3), (int8x8_t)vceqz_f32(*v3));
  *(float *)(a2 + 8) = v7;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMassSpaceInvInertiaTensor@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  if ((*(_BYTE *)(a1 + 380) & 2) != 0)
  {
    v3 = *(_QWORD *)(a1 + 112) + 168;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 304);
    if (v2 && *(_BYTE *)(v2 + 31) == 1)
      v3 = v2 + 32;
    else
      v3 = a1 + 256;
  }
  *(_QWORD *)a2 = *(_QWORD *)v3;
  result = *(float *)(v3 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getLinearVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 348);
  result = *(float *)(a1 + 356);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getAngularVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 360);
  result = *(float *)(a1 + 368);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setRigidBodyFlag(uint64_t a1, int a2, int a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  if ((*(_BYTE *)(a1 + 381) & 0x40) != 0)
    v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 112) + 348);
  else
    v11 = (unsigned __int8 *)(a1 + 172);
  v12 = *v11;
  if (a3)
    v13 = v12 | a2;
  else
    v13 = v12 & ~a2;
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v31);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v31);
    v13 &= ~0x20u;
  }
  v14 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = *v14;
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
  }
  if (v16)
    v17 = v16 + 32;
  else
    v17 = 0;
  if ((v12 & 1) == 0 || (v13 & 1) != 0)
  {
    if ((v12 & 1) == 0 && (v13 & 1) != 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) == 2)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
        return;
      }
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        v28 = *(_QWORD *)(a1 + 304);
        if (v28)
        {
          if (*(_BYTE *)(v28 + 31) != 1)
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), 1, 0);
        }
      }
      if (v16)
      {
        a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a4;
      }
      goto LABEL_64;
    }
LABEL_54:
    if ((v12 & 1) != 0
      && (v13 & 1) != 0
      && ((v13 ^ v12) & 2) != 0
      && ((*(_BYTE *)(a1 + 381) & 0x80) != 0
       || *(_DWORD *)(a1 + 104) >> 30 != 3
       && (v30 = *(_QWORD *)(a1 + 304)) != 0
       && *(_BYTE *)(v30 + 31) == 1
       && *(_BYTE *)(v30 + 28)))
    {
      if (v16)
      {
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
      }
    }
LABEL_64:
    v32 = v13;
    physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v32, *(int8x8_t *)&a4);
    return;
  }
  v18 = *(unsigned __int16 *)(a1 + 48);
  v19 = a1 + 40;
  if ((_DWORD)v18 != 1)
  {
    if (*(_WORD *)(a1 + 48))
    {
      v19 = *(_QWORD *)(a1 + 40);
      goto LABEL_24;
    }
LABEL_28:
    if ((v12 & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 381) & 0x80) != 0)
      {
        if (!v16)
        {
LABEL_51:
          if (*(_DWORD *)(a1 + 104) >> 30 == 1)
          {
            v29 = *(_QWORD *)(a1 + 304);
            if (v29)
              physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), *(unsigned __int8 *)(v29 + 31) == 1);
          }
          goto LABEL_54;
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 104) >> 30 == 3)
          goto LABEL_35;
        v24 = *(_QWORD *)(a1 + 304);
        if (!v24 || *(_BYTE *)(v24 + 31) != 1 || !*(_BYTE *)(v24 + 28) || !v16)
          goto LABEL_35;
      }
      physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
      ++*(_DWORD *)(v16 + 8732);
LABEL_50:
      a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
      *(double *)(v17 + 4668) = a4;
      goto LABEL_51;
    }
LABEL_35:
    if (!v16)
      goto LABEL_51;
    goto LABEL_50;
  }
LABEL_24:
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v19 + 312))(&v33);
    if ((v33 & 1) != 0)
    {
      v23 = *(_DWORD *)(*(_QWORD *)v19 + 152);
      if ((v23 | 4) == 5 || v23 == 6)
        break;
    }
    v19 += 8;
    if (!--v18)
      goto LABEL_28;
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v31);
}

void physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setRigidBodyFlags(uint64_t a1, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  if ((*(_BYTE *)(a1 + 381) & 0x40) != 0)
    v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 112) + 348);
  else
    v11 = (unsigned __int8 *)(a1 + 172);
  v12 = *v11;
  v13 = *a2;
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v31);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v31);
    v13 &= 0xDFu;
  }
  v14 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = *v14;
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
  }
  if (v16)
    v17 = v16 + 32;
  else
    v17 = 0;
  if ((v12 & 1) == 0 || (v13 & 1) != 0)
  {
    if ((v12 & 1) == 0 && (v13 & 1) != 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) == 2)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
        return;
      }
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        v28 = *(_QWORD *)(a1 + 304);
        if (v28)
        {
          if (*(_BYTE *)(v28 + 31) != 1)
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), 1, 0);
        }
      }
      if (v16)
      {
        a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a3;
      }
      goto LABEL_61;
    }
LABEL_51:
    if ((v12 & 1) != 0
      && (v13 & 1) != 0
      && ((v13 ^ v12) & 2) != 0
      && ((*(_BYTE *)(a1 + 381) & 0x80) != 0
       || *(_DWORD *)(a1 + 104) >> 30 != 3
       && (v30 = *(_QWORD *)(a1 + 304)) != 0
       && *(_BYTE *)(v30 + 31) == 1
       && *(_BYTE *)(v30 + 28)))
    {
      if (v16)
      {
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
      }
    }
LABEL_61:
    v32 = v13;
    physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v32, *(int8x8_t *)&a3);
    return;
  }
  v18 = *(unsigned __int16 *)(a1 + 48);
  v19 = a1 + 40;
  if ((_DWORD)v18 != 1)
  {
    if (*(_WORD *)(a1 + 48))
    {
      v19 = *(_QWORD *)(a1 + 40);
      goto LABEL_21;
    }
LABEL_25:
    if ((v12 & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 381) & 0x80) != 0)
      {
        if (!v16)
        {
LABEL_48:
          if (*(_DWORD *)(a1 + 104) >> 30 == 1)
          {
            v29 = *(_QWORD *)(a1 + 304);
            if (v29)
              physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), *(unsigned __int8 *)(v29 + 31) == 1);
          }
          goto LABEL_51;
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 104) >> 30 == 3)
          goto LABEL_32;
        v24 = *(_QWORD *)(a1 + 304);
        if (!v24 || *(_BYTE *)(v24 + 31) != 1 || !*(_BYTE *)(v24 + 28) || !v16)
          goto LABEL_32;
      }
      physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
      ++*(_DWORD *)(v16 + 8732);
LABEL_47:
      a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
      *(double *)(v17 + 4668) = a3;
      goto LABEL_48;
    }
LABEL_32:
    if (!v16)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_21:
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v19 + 312))(&v33);
    if ((v33 & 1) != 0)
    {
      v23 = *(_DWORD *)(*(_QWORD *)v19 + 152);
      if ((v23 | 4) == 5 || v23 == 6)
        break;
    }
    v19 += 8;
    if (!--v18)
      goto LABEL_25;
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v31);
}

uint64_t physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getRigidBodyFlags@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  if ((*(_BYTE *)(result + 381) & 0x40) != 0)
    v2 = (_BYTE *)(*(_QWORD *)(result + 112) + 348);
  else
    v2 = (_BYTE *)(result + 172);
  *a2 = *v2;
  return result;
}

_QWORD *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMinCCDAdvanceCoefficient(_QWORD *result, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = result;
  v4 = (physx::Scb::Base *)(result + 12);
  v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 51) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[14];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[14] = v7;
    result = (_QWORD *)v3[12];
  }
  *(_DWORD *)(v6 + 200) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 95) |= 0x80u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMinCCDAdvanceCoefficient(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 380) & 0x80) != 0)
    v1 = *(_QWORD *)(a1 + 112) + 200;
  else
    v1 = a1 + 204;
  return *(float *)v1;
}

float *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMaxDepenetrationVelocity(float *result, double a2)
{
  float *v2;
  physx::Scb::Base *v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = (physx::Scb::Base *)(result + 24);
  v4 = -*(float *)&a2;
  v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    result = *(float **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_5;
LABEL_8:
    v2[55] = v4;
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(float **)v3;
LABEL_5:
  v6 = *((_QWORD *)v2 + 14);
  if (!v6)
  {
    *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    *((_QWORD *)v2 + 14) = v7;
    result = (float *)*((_QWORD *)v2 + 12);
  }
  *(float *)(v6 + 252) = v4;
  result = (float *)physx::Scb::Scene::scheduleForUpdate(result, v3, *(int8x8_t *)&a2);
  *((_DWORD *)v2 + 95) |= 0x800u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMaxDepenetrationVelocity(uint64_t a1)
{
  float *v1;

  if ((*(_BYTE *)(a1 + 381) & 8) != 0)
    v1 = (float *)(*(_QWORD *)(a1 + 112) + 252);
  else
    v1 = (float *)(a1 + 220);
  return -*v1;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMaxContactImpulse(uint64_t a1, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;

  v2 = a2.i32[0];
  v4 = (physx::Scb::Base *)(a1 + 96);
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *(_DWORD *)(a1 + 272) = a2.i32[0];
    return updateBodySim((uint64_t *)(a1 + 128));
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = *(_QWORD *)(a1 + 112);
  if (!v7)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    v7 = v8;
    *(_QWORD *)(a1 + 112) = v8;
    v6 = *(_QWORD **)(a1 + 96);
  }
  *(_DWORD *)(v7 + 260) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(v6, v4, a2);
  *(_DWORD *)(a1 + 380) |= 0x2000u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMaxContactImpulse(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 381) & 0x20) != 0)
    v1 = *(_QWORD *)(a1 + 112) + 260;
  else
    v1 = a1 + 272;
  return *(float *)v1;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getInternalIslandNodeIndex(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    return *(_DWORD *)(v1 + 176) >> 7;
  else
    return 0x1FFFFFFLL;
}

uint64_t physx::NpArticulationLink::isSubordinate(physx::NpArticulationLink *this)
{
  return 1;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::release(uint64_t a1)
{
  int8x8_t v2;
  int32x2_t **v3;

  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, 0, 1);
  v3 = (int32x2_t **)(a1 + 16);
  if (((*(_DWORD *)(a1 + 24) >> 30) - 1) <= 1 && *v3)
    physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>(*v3, (physx::Sc::ArticulationJointSim **)(a1 + 16), *v3 + 1008, v2);
  return physx::Scb::Base::destroy(a1 + 16);
}

const char *physx::PxArticulationJoint::getConcreteTypeName(physx::PxArticulationJoint *this)
{
  return "PxArticulationJoint";
}

BOOL physx::PxArticulationJoint::isKindOf(physx::PxArticulationJoint *this, const char *a2)
{
  return !strcmp("PxArticulationJoint", a2) || !strcmp("PxArticulationJointBase", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getParentArticulationLink(uint64_t a1)
{
  return *(_QWORD *)(a1 + 424);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::setParentPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setParentPose((_DWORD *)(a1 + 16), a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getParentPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getParentPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getChildArticulationLink(uint64_t a1)
{
  return *(_QWORD *)(a1 + 432);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::setChildPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setChildPose((_DWORD *)(a1 + 16), a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getChildPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getChildPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getImpl(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t physx::NpArticulationJoint::isSubordinate(physx::NpArticulationJoint *this)
{
  return 1;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::release(uint64_t a1)
{
  int8x8_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t **v6;
  int32x2_t *v7;
  uint64_t v9;

  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, *(_QWORD *)(a1 + 16), 1);
  v3 = *(_DWORD *)(a1 + 152);
  if (v3)
  {
    LODWORD(v4) = 0;
    do
    {
      v4 = v4 % v3;
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v4);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 520))(v5))
        LODWORD(v4) = v4 + 1;
      else
        physx::NpArticulationLink::releaseInternal(*(physx::NpArticulationLink **)(*(_QWORD *)(a1 + 144) + 8 * v4));
      v3 = *(_DWORD *)(a1 + 152);
    }
    while (v3);
  }
  v6 = (int32x2_t **)(a1 + 24);
  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
  {
    v7 = *v6;
    if (*v6)
    {
      physx::Scb::Scene::removeArticulation(*v6, (physx::Scb::Articulation *)(a1 + 24), v2);
      v9 = a1;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v7[1143], &v9);
    }
  }
  *(_DWORD *)(a1 + 152) = 0;
  return physx::Scb::Base::destroy(a1 + 24);
}

const char *physx::NpArticulation::getConcreteTypeName(physx::NpArticulation *this)
{
  return "PxArticulation";
}

BOOL physx::NpArticulation::isKindOf(physx::NpArticulation *this, const char *a2)
{
  return !strcmp("PxArticulation", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getScene(uint64_t a1)
{
  uint64_t v1;

  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) > 1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return v1 - 16;
  else
    return 0;
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulation>::setSolverIterationCounts(_QWORD *result, unsigned __int8 a2, __int16 a3, int8x8_t a4)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = result;
  v5 = (physx::Scb::Base *)(result + 3);
  v6 = a2 | (unsigned __int16)(a3 << 8);
  v7 = *((_DWORD *)result + 8);
  if (v7 >> 30 == 2)
  {
    result = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_WORD *)v4 + 34) = v6;
    return result;
  }
  if (v7 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v5;
LABEL_5:
  v8 = v4[5];
  if (!v8)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v7) & 0xF).n128_u64[0];
    v8 = v9;
    v4[5] = v9;
    result = (_QWORD *)v4[3];
  }
  *(_WORD *)(v8 + 20) = v6;
  result = physx::Scb::Scene::scheduleForUpdate(result, v5, a4);
  *((_DWORD *)v4 + 8) |= 0x20u;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getSolverIterationCounts(uint64_t result, _DWORD *a2, unsigned int *a3)
{
  unsigned __int16 *v3;
  unsigned int v4;

  if ((*(_BYTE *)(result + 32) & 0x20) != 0)
    v3 = (unsigned __int16 *)(*(_QWORD *)(result + 40) + 20);
  else
    v3 = (unsigned __int16 *)(result + 68);
  v4 = *v3;
  *a3 = v4 >> 8;
  *a2 = v4;
  return result;
}

BOOL physx::NpArticulationTemplate<physx::PxArticulation>::isSleeping(uint64_t a1)
{
  return *(_BYTE *)(a1 + 100) != 0;
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulation>::setSleepThreshold(_QWORD *result, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = result;
  v4 = (physx::Scb::Base *)(result + 3);
  v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 19) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[5] = v7;
    result = (_QWORD *)v3[3];
  }
  *(_DWORD *)(v6 + 16) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x10u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getSleepThreshold(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
    v1 = *(_QWORD *)(a1 + 40) + 16;
  else
    v1 = a1 + 76;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulation>::setStabilizationThreshold(_QWORD *result, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = result;
  v4 = (physx::Scb::Base *)(result + 3);
  v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 20) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[5] = v7;
    result = (_QWORD *)v3[3];
  }
  *(_DWORD *)(v6 + 24) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x40u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getStabilizationThreshold(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 32) & 0x40) != 0)
    v1 = *(_QWORD *)(a1 + 40) + 24;
  else
    v1 = a1 + 80;
  return *(float *)v1;
}

float *physx::NpArticulationTemplate<physx::PxArticulation>::setWakeCounter(float *result, double a2)
{
  float v2;
  float *v3;
  unint64_t v4;
  physx::Scb::Base *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(float *)&a2;
  v3 = result;
  if (*((_DWORD *)result + 38))
  {
    v4 = 0;
    do
    {
      *(float *)&a2 = v2;
      result = (float *)physx::Scb::Body::setWakeCounter((physx::Scb::Body *)(*(_QWORD *)(*((_QWORD *)v3 + 18) + 8 * v4++) + 96), a2);
    }
    while (v4 < *((unsigned int *)v3 + 38));
  }
  v5 = (physx::Scb::Base *)(v3 + 6);
  v3[24] = v2;
  v6 = *((_DWORD *)v3 + 8) >> 30;
  if (v6 == 2)
  {
    v7 = *(_QWORD *)v5;
    if (!*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_10;
LABEL_8:
    if (v2 <= 0.0)
    {
      result = (float *)physx::Scb::Scene::scheduleForUpdate(*((_QWORD **)v3 + 3), v5, *(int8x8_t *)&a2);
      v8 = *((_DWORD *)v3 + 8) | 0x80;
    }
    else
    {
      *((_BYTE *)v3 + 100) = 0;
      result = (float *)physx::Scb::Scene::scheduleForUpdate(*((_QWORD **)v3 + 3), v5, *(int8x8_t *)&a2);
      v8 = (_DWORD)v3[8] & 0xFFFFFC7F | 0x280;
    }
    *((_DWORD *)v3 + 8) = v8;
    return result;
  }
  if (v6 == 3)
    goto LABEL_8;
  v7 = *(_QWORD *)v5;
LABEL_10:
  if (v2 > 0.0)
  {
    if (v7)
      *((_BYTE *)v3 + 100) = 0;
  }
  v3[21] = v2;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getWakeCounter(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulation>::wakeUp(uint64_t a1, double a2)
{
  return physx::PxArticulationImpl::wakeUp((physx::PxArticulationImpl *)(a1 + 24), a2);
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulation>::putToSleep(_QWORD *result, int8x8_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  physx::Scb::Base *v4;
  int v5;

  v2 = result;
  if (*((_DWORD *)result + 38))
  {
    v3 = 0;
    do
      result = physx::Scb::Body::putToSleepInternal((physx::Scb::Body *)(*(_QWORD *)(v2[18] + 8 * v3++) + 96), a2);
    while (v3 < *((unsigned int *)v2 + 38));
  }
  v4 = (physx::Scb::Base *)(v2 + 3);
  *((_DWORD *)v2 + 24) = 0;
  *((_BYTE *)v2 + 100) = 1;
  v5 = *((_DWORD *)v2 + 8) >> 30;
  if (v5 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_8;
  }
  else if (v5 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_8:
    result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
    *((_DWORD *)v2 + 8) = v2[4] & 0xFFFFFC7F | 0x180;
    return result;
  }
  *((_DWORD *)v2 + 21) = 0;
  return result;
}

physx::NpArticulationLink *physx::NpArticulationTemplate<physx::PxArticulation>::createLink(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  physx::NpArticulationLink *ArticulationLink;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v26;
  uint64_t v27;
  __int32 v28;

  v9 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    if (!v9)
    {
      v10 = physx::shdfnd::Foundation::mInstance;
      v11 = "Root articulation link must have NULL parent pointer!";
      v12 = 332;
LABEL_6:
      physx::shdfnd::Foundation::error(v10, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationTemplate.h", v12, v11, a6, a7, a8, v26.i8[0]);
      return 0;
    }
  }
  else if (v9)
  {
    v10 = physx::shdfnd::Foundation::mInstance;
    v11 = "Non-root articulation link must have valid parent pointer!";
    v12 = 338;
    goto LABEL_6;
  }
  ++*(_DWORD *)(a1 + 176);
  _Q0 = *a3;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a3->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned __int128 *)a3);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  v26 = vdivq_f32(*a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  v27 = a3[1].i64[0];
  v28 = a3[1].i32[2];
  ArticulationLink = (physx::NpArticulationLink *)physx::NpFactory::createArticulationLink(physx::NpFactory::mInstance, a1, a2, v26.f32, a5, a6, a7, a8);
  if (ArticulationLink)
  {
    if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
    {
      v23 = *(_QWORD *)(a1 + 24);
      if (v23)
        physx::NpScene::addArticulationLink((int32x2_t *)(v23 - 16), ArticulationLink, v22);
    }
    v26.i64[0] = (uint64_t)ArticulationLink;
    v24 = *(unsigned int *)(a1 + 152);
    if ((*(_DWORD *)(a1 + 156) & 0x7FFFFFFFu) <= v24)
    {
      physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(a1 + 104, &v26);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v24) = ArticulationLink;
      *(_DWORD *)(a1 + 152) = v24 + 1;
    }
  }
  return ArticulationLink;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getNbLinks(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getLinks(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (*(_DWORD *)(a1 + 152) - a4) & ~((int)(*(_DWORD *)(a1 + 152) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 168) = a2;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getWorldBounds@<S0>(uint64_t a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float result;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;

  if (*(_DWORD *)(a1 + 152))
  {
    v6 = 0;
    v7 = 8.5071e37;
    v8 = -8.5071e37;
    v9 = -8.5071e37;
    v10 = -8.5071e37;
    v11 = 8.5071e37;
    v12 = 8.5071e37;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 8 * v6) + 80))(&v20, 1.01);
      if (v12 >= *(float *)&v20)
        v12 = *(float *)&v20;
      if (v11 >= *((float *)&v20 + 1))
        v11 = *((float *)&v20 + 1);
      if (v7 >= v21)
        v7 = v21;
      if (v10 <= v22)
        v10 = v22;
      if (v9 <= v23)
        v9 = v23;
      if (v8 <= v24)
        v8 = v24;
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 152));
  }
  else
  {
    v10 = -8.5071e37;
    v12 = 8.5071e37;
    v11 = 8.5071e37;
    v7 = 8.5071e37;
    v9 = -8.5071e37;
    v8 = -8.5071e37;
  }
  v13 = (float)(v12 + v10) * 0.5;
  v14 = (float)(v11 + v9) * 0.5;
  v15 = (float)(v7 + v8) * 0.5;
  v16 = (float)((float)(v10 - v12) * 0.5) * a3;
  v17 = (float)((float)(v9 - v11) * 0.5) * a3;
  v18 = (float)((float)(v8 - v7) * 0.5) * a3;
  *a2 = v13 - v16;
  a2[1] = v14 - v17;
  a2[2] = v15 - v18;
  a2[3] = v13 + v16;
  result = v15 + v18;
  a2[4] = v14 + v17;
  a2[5] = v15 + v18;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getAggregate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getImpl(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::Cm::exportInlineArray<physx::NpArticulationLink *,4u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>(a1 + 104, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 168));
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 152);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 8 * v2;
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)(v4 + 144) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::release(uint64_t a1)
{
  int8x8_t v2;
  int32x2_t **v3;

  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, 0, 1);
  v3 = (int32x2_t **)(a1 + 16);
  if (((*(_DWORD *)(a1 + 24) >> 30) - 1) <= 1 && *v3)
    physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>(*v3, (physx::Sc::ArticulationJointSim **)(a1 + 16), *v3 + 1008, v2);
  return physx::Scb::Base::destroy(a1 + 16);
}

const char *physx::PxArticulationJointReducedCoordinate::getConcreteTypeName(physx::PxArticulationJointReducedCoordinate *this)
{
  return "PxArticulationJointReducedCoordinate";
}

BOOL physx::PxArticulationJointReducedCoordinate::isKindOf(physx::PxArticulationJointReducedCoordinate *this, const char *a2)
{
  return !strcmp("PxArticulationJointReducedCoordinate", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getParentArticulationLink(uint64_t a1)
{
  return *(_QWORD *)(a1 + 424);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::setParentPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setParentPose((_DWORD *)(a1 + 16), a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getParentPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getParentPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getChildArticulationLink(uint64_t a1)
{
  return *(_QWORD *)(a1 + 432);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::setChildPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setChildPose((_DWORD *)(a1 + 16), a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getChildPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getChildPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getImpl(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t physx::NpArticulationJointReducedCoordinate::isSubordinate(physx::NpArticulationJointReducedCoordinate *this)
{
  return 1;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::release(uint64_t a1)
{
  int8x8_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t **v6;
  int32x2_t *v7;
  uint64_t v9;

  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, *(_QWORD *)(a1 + 16), 1);
  v3 = *(_DWORD *)(a1 + 152);
  if (v3)
  {
    LODWORD(v4) = 0;
    do
    {
      v4 = v4 % v3;
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v4);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 520))(v5))
        LODWORD(v4) = v4 + 1;
      else
        physx::NpArticulationLink::releaseInternal(*(physx::NpArticulationLink **)(*(_QWORD *)(a1 + 144) + 8 * v4));
      v3 = *(_DWORD *)(a1 + 152);
    }
    while (v3);
  }
  v6 = (int32x2_t **)(a1 + 24);
  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
  {
    v7 = *v6;
    if (*v6)
    {
      physx::Scb::Scene::removeArticulation(*v6, (physx::Scb::Articulation *)(a1 + 24), v2);
      v9 = a1;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v7[1143], &v9);
    }
  }
  *(_DWORD *)(a1 + 152) = 0;
  return physx::Scb::Base::destroy(a1 + 24);
}

const char *physx::NpArticulationReducedCoordinate::getConcreteTypeName(physx::NpArticulationReducedCoordinate *this)
{
  return "PxArticulationReducedCoordinate";
}

BOOL physx::NpArticulationReducedCoordinate::isKindOf(physx::NpArticulationReducedCoordinate *this, const char *a2)
{
  return !strcmp("PxArticulationReducedCoordinate", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getScene(uint64_t a1)
{
  uint64_t v1;

  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) > 1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return v1 - 16;
  else
    return 0;
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setSolverIterationCounts(_QWORD *result, unsigned __int8 a2, __int16 a3, int8x8_t a4)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = result;
  v5 = (physx::Scb::Base *)(result + 3);
  v6 = a2 | (unsigned __int16)(a3 << 8);
  v7 = *((_DWORD *)result + 8);
  if (v7 >> 30 == 2)
  {
    result = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_WORD *)v4 + 34) = v6;
    return result;
  }
  if (v7 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v5;
LABEL_5:
  v8 = v4[5];
  if (!v8)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v7) & 0xF).n128_u64[0];
    v8 = v9;
    v4[5] = v9;
    result = (_QWORD *)v4[3];
  }
  *(_WORD *)(v8 + 20) = v6;
  result = physx::Scb::Scene::scheduleForUpdate(result, v5, a4);
  *((_DWORD *)v4 + 8) |= 0x20u;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getSolverIterationCounts(uint64_t result, _DWORD *a2, unsigned int *a3)
{
  unsigned __int16 *v3;
  unsigned int v4;

  if ((*(_BYTE *)(result + 32) & 0x20) != 0)
    v3 = (unsigned __int16 *)(*(_QWORD *)(result + 40) + 20);
  else
    v3 = (unsigned __int16 *)(result + 68);
  v4 = *v3;
  *a3 = v4 >> 8;
  *a2 = v4;
  return result;
}

BOOL physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::isSleeping(uint64_t a1)
{
  return *(_BYTE *)(a1 + 100) != 0;
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setSleepThreshold(_QWORD *result, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = result;
  v4 = (physx::Scb::Base *)(result + 3);
  v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 19) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[5] = v7;
    result = (_QWORD *)v3[3];
  }
  *(_DWORD *)(v6 + 16) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x10u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getSleepThreshold(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
    v1 = *(_QWORD *)(a1 + 40) + 16;
  else
    v1 = a1 + 76;
  return *(float *)v1;
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setStabilizationThreshold(_QWORD *result, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = result;
  v4 = (physx::Scb::Base *)(result + 3);
  v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 20) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[5] = v7;
    result = (_QWORD *)v3[3];
  }
  *(_DWORD *)(v6 + 24) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x40u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getStabilizationThreshold(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 32) & 0x40) != 0)
    v1 = *(_QWORD *)(a1 + 40) + 24;
  else
    v1 = a1 + 80;
  return *(float *)v1;
}

float *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setWakeCounter(float *result, double a2)
{
  float v2;
  float *v3;
  unint64_t v4;
  physx::Scb::Base *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(float *)&a2;
  v3 = result;
  if (*((_DWORD *)result + 38))
  {
    v4 = 0;
    do
    {
      *(float *)&a2 = v2;
      result = (float *)physx::Scb::Body::setWakeCounter((physx::Scb::Body *)(*(_QWORD *)(*((_QWORD *)v3 + 18) + 8 * v4++) + 96), a2);
    }
    while (v4 < *((unsigned int *)v3 + 38));
  }
  v5 = (physx::Scb::Base *)(v3 + 6);
  v3[24] = v2;
  v6 = *((_DWORD *)v3 + 8) >> 30;
  if (v6 == 2)
  {
    v7 = *(_QWORD *)v5;
    if (!*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_10;
LABEL_8:
    if (v2 <= 0.0)
    {
      result = (float *)physx::Scb::Scene::scheduleForUpdate(*((_QWORD **)v3 + 3), v5, *(int8x8_t *)&a2);
      v8 = *((_DWORD *)v3 + 8) | 0x80;
    }
    else
    {
      *((_BYTE *)v3 + 100) = 0;
      result = (float *)physx::Scb::Scene::scheduleForUpdate(*((_QWORD **)v3 + 3), v5, *(int8x8_t *)&a2);
      v8 = (_DWORD)v3[8] & 0xFFFFFC7F | 0x280;
    }
    *((_DWORD *)v3 + 8) = v8;
    return result;
  }
  if (v6 == 3)
    goto LABEL_8;
  v7 = *(_QWORD *)v5;
LABEL_10:
  if (v2 > 0.0)
  {
    if (v7)
      *((_BYTE *)v3 + 100) = 0;
  }
  v3[21] = v2;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getWakeCounter(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::wakeUp(uint64_t a1, double a2)
{
  return physx::PxArticulationImpl::wakeUp((physx::PxArticulationImpl *)(a1 + 24), a2);
}

_QWORD *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::putToSleep(_QWORD *result, int8x8_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  physx::Scb::Base *v4;
  int v5;

  v2 = result;
  if (*((_DWORD *)result + 38))
  {
    v3 = 0;
    do
      result = physx::Scb::Body::putToSleepInternal((physx::Scb::Body *)(*(_QWORD *)(v2[18] + 8 * v3++) + 96), a2);
    while (v3 < *((unsigned int *)v2 + 38));
  }
  v4 = (physx::Scb::Base *)(v2 + 3);
  *((_DWORD *)v2 + 24) = 0;
  *((_BYTE *)v2 + 100) = 1;
  v5 = *((_DWORD *)v2 + 8) >> 30;
  if (v5 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_8;
  }
  else if (v5 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_8:
    result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
    *((_DWORD *)v2 + 8) = v2[4] & 0xFFFFFC7F | 0x180;
    return result;
  }
  *((_DWORD *)v2 + 21) = 0;
  return result;
}

physx::NpArticulationLink *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::createLink(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  physx::NpArticulationLink *ArticulationLink;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v26;
  uint64_t v27;
  __int32 v28;

  v9 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    if (!v9)
    {
      v10 = physx::shdfnd::Foundation::mInstance;
      v11 = "Root articulation link must have NULL parent pointer!";
      v12 = 332;
LABEL_6:
      physx::shdfnd::Foundation::error(v10, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationTemplate.h", v12, v11, a6, a7, a8, v26.i8[0]);
      return 0;
    }
  }
  else if (v9)
  {
    v10 = physx::shdfnd::Foundation::mInstance;
    v11 = "Non-root articulation link must have valid parent pointer!";
    v12 = 338;
    goto LABEL_6;
  }
  ++*(_DWORD *)(a1 + 176);
  _Q0 = *a3;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a3->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned __int128 *)a3);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  v26 = vdivq_f32(*a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  v27 = a3[1].i64[0];
  v28 = a3[1].i32[2];
  ArticulationLink = (physx::NpArticulationLink *)physx::NpFactory::createArticulationLink(physx::NpFactory::mInstance, a1, a2, v26.f32, a5, a6, a7, a8);
  if (ArticulationLink)
  {
    if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
    {
      v23 = *(_QWORD *)(a1 + 24);
      if (v23)
        physx::NpScene::addArticulationLink((int32x2_t *)(v23 - 16), ArticulationLink, v22);
    }
    v26.i64[0] = (uint64_t)ArticulationLink;
    v24 = *(unsigned int *)(a1 + 152);
    if ((*(_DWORD *)(a1 + 156) & 0x7FFFFFFFu) <= v24)
    {
      physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(a1 + 104, &v26);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v24) = ArticulationLink;
      *(_DWORD *)(a1 + 152) = v24 + 1;
    }
  }
  return ArticulationLink;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getNbLinks(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getLinks(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (*(_DWORD *)(a1 + 152) - a4) & ~((int)(*(_DWORD *)(a1 + 152) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 168) = a2;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getWorldBounds@<S0>(uint64_t a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float result;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;

  if (*(_DWORD *)(a1 + 152))
  {
    v6 = 0;
    v7 = 8.5071e37;
    v8 = -8.5071e37;
    v9 = -8.5071e37;
    v10 = -8.5071e37;
    v11 = 8.5071e37;
    v12 = 8.5071e37;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 8 * v6) + 80))(&v20, 1.01);
      if (v12 >= *(float *)&v20)
        v12 = *(float *)&v20;
      if (v11 >= *((float *)&v20 + 1))
        v11 = *((float *)&v20 + 1);
      if (v7 >= v21)
        v7 = v21;
      if (v10 <= v22)
        v10 = v22;
      if (v9 <= v23)
        v9 = v23;
      if (v8 <= v24)
        v8 = v24;
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 152));
  }
  else
  {
    v10 = -8.5071e37;
    v12 = 8.5071e37;
    v11 = 8.5071e37;
    v7 = 8.5071e37;
    v9 = -8.5071e37;
    v8 = -8.5071e37;
  }
  v13 = (float)(v12 + v10) * 0.5;
  v14 = (float)(v11 + v9) * 0.5;
  v15 = (float)(v7 + v8) * 0.5;
  v16 = (float)((float)(v10 - v12) * 0.5) * a3;
  v17 = (float)((float)(v9 - v11) * 0.5) * a3;
  v18 = (float)((float)(v8 - v7) * 0.5) * a3;
  *a2 = v13 - v16;
  a2[1] = v14 - v17;
  a2[2] = v15 - v18;
  a2[3] = v13 + v16;
  result = v15 + v18;
  a2[4] = v14 + v17;
  a2[5] = v15 + v18;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getAggregate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getImpl(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::Cm::exportInlineArray<physx::NpArticulationLink *,4u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>(a1 + 104, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 168));
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 152);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 8 * v2;
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)(v4 + 144) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 8 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15);
      v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(_QWORD *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

BOOL physx::PxBase::isKindOf(physx::PxBase *this, const char *__s1)
{
  return strcmp(__s1, "PxBase") == 0;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;

  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 233, "PxRigidActor::attachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a6, a7, a8, v11);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  physx::NpShapeManager::attachShape((physx::PxRigidActor *)((char *)a1 + 40), a2, a1);
  return 1;
}

physx::PxActor *physx::NpActorTemplate<physx::PxArticulationLink>::release(physx::PxActor *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((_QWORD *)result + 4);
  if (v8)
    return (physx::PxActor *)physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(_QWORD *)(v8 + 72) + 8), result, 0, a4, a5, a6, a7, a8);
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxArticulationLink>::setActorFlag(_QWORD *result, int a2, int a3, int8x8_t a4)
{
  _DWORD *v4;
  unint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;

  v4 = (_DWORD *)((char *)result
                + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18));
  v5 = v4[2];
  if (a3)
  {
    if ((v5 & 1) != 0)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v8 = (v5 >> 24) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
    }
    else
    {
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3);
      v7 = (unsigned __int8 *)(v6 + 12);
      v8 = (v5 >> 24) & 0xF;
    }
    v10 = *v7 | a2;
  }
  else
  {
    if ((v5 & 1) != 0)
    {
      v9 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v8 = (v5 >> 24) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
    }
    else
    {
      LODWORD(v8) = BYTE3(v5) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
      v9 = (unsigned __int8 *)(v6 + 12);
    }
    v10 = *v9 & ~a2;
  }
  v11 = v5 >> 30;
  if (v11 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_14;
  }
  else if (v11 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_14:
    v12 = (_BYTE *)*((_QWORD *)v4 + 2);
    if (!v12)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v8).n128_u64[0];
      v12 = v13;
      *((_QWORD *)v4 + 2) = v13;
      result = *(_QWORD **)v4;
    }
    *v12 = v10;
    result = physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v4, a4);
    v4[2] |= 1u;
    return result;
  }
  if (v10 != v6[12])
  {
    v6[12] = v10;
    result = *(_QWORD **)v6;
    if (*(_QWORD *)v6)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxArticulationLink>::setActorFlags(_QWORD *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;

  v3 = *a2;
  v4 = (_DWORD *)((char *)result
                + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18));
  v5 = v4[2];
  v6 = (v5 >> 24) & 0xF;
  v7 = v5 >> 30;
  if (v7 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v7 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_5:
    v8 = (_BYTE *)*((_QWORD *)v4 + 2);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v6).n128_u64[0];
      v8 = v9;
      *((_QWORD *)v4 + 2) = v9;
      result = *(_QWORD **)v4;
    }
    *v8 = v3;
    result = physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v4, a3);
    v4[2] |= 1u;
    return result;
  }
  v10 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  if (v3 != v10[12])
  {
    v10[12] = v3;
    result = *(_QWORD **)v10;
    if (*(_QWORD *)v10)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::exportExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::exportExtraData((_QWORD *)(a1 + 24), a2);
}

_QWORD *physx::NpActorTemplate<physx::PxArticulationLink>::importExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::importExtraData((_QWORD *)(a1 + 24), a2);
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::resolveReferences(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

BOOL physx::PxRigidBody::isKindOf(physx::PxRigidBody *this, const char *a2)
{
  return !strcmp("PxRigidBody", a2) || physx::PxRigidActor::isKindOf(this, a2);
}

BOOL physx::PxRigidActor::isKindOf(physx::PxRigidActor *this, const char *a2)
{
  return !strcmp("PxRigidActor", a2) || physx::PxActor::isKindOf(this, a2);
}

BOOL physx::PxActor::isKindOf(physx::PxActor *this, const char *a2)
{
  return !strcmp("PxActor", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 52);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x20 && *(_BYTE *)(a1 + 32) == 0)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>::getName() [T = physx::NpArt"
         "iculationLink *]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 48);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 40);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 52) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 40);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 32) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 48);
    }
  }
  *(_QWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 48) = v10 + 1;
  *(_DWORD *)(a1 + 52) = v5;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = result;
  v4 = (16 * a2);
  if (v4 <= 0x40 && *(_BYTE *)(result + 64) == 0)
  {
    *(_BYTE *)(result + 64) = 1;
    v8 = result;
  }
  else if ((_DWORD)v4)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnector>::getName() [T = physx::NpConnector]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v4, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 80);
  v10 = *(_QWORD *)(v3 + 72);
  if ((_DWORD)v9)
  {
    v11 = v8 + 16 * v9;
    v12 = *(_QWORD *)(v3 + 72);
    v13 = v8;
    do
    {
      *(_BYTE *)v13 = *(_BYTE *)v12;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
      v13 += 16;
      v12 += 16;
    }
    while (v13 < v11);
  }
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) == 0)
  {
    if (v10 == v3)
    {
      *(_BYTE *)(v3 + 64) = 0;
    }
    else if (v10)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 72) = v8;
  *(_DWORD *)(v3 + 84) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::growAndPushBack(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_DWORD *)(a1 + 84);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((16 * v5) <= 0x40 && *(_BYTE *)(a1 + 64) == 0)
  {
    *(_BYTE *)(a1 + 64) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(16 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnector>::getName() [T = physx::NpConnector]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (16 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 80);
  v11 = (_BYTE *)(v9 + 16 * v10);
  v12 = *(_QWORD *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v13 = *(_QWORD *)(a1 + 72);
    v14 = v9;
    do
    {
      *(_BYTE *)v14 = *(_BYTE *)v13;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
      v14 += 16;
      v13 += 16;
    }
    while (v14 < (unint64_t)v11);
  }
  *v11 = *(_BYTE *)a2;
  *(_QWORD *)(v9 + 16 * v10 + 8) = *(_QWORD *)(a2 + 8);
  if ((*(_DWORD *)(a1 + 84) & 0x80000000) == 0)
  {
    if (v12 == a1)
    {
      *(_BYTE *)(a1 + 64) = 0;
    }
    else if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 80);
    }
  }
  *(_QWORD *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 80) = v10 + 1;
  *(_DWORD *)(a1 + 84) = v5;
  return v9 + 16 * v10;
}

uint64_t physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 84) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::recreate(result, a2);
  *(_DWORD *)(v3 + 80) = a2;
  return result;
}

void physx::PxArticulationImpl::~PxArticulationImpl(physx::PxArticulationImpl *this)
{
  int v1;
  physx::PxArticulationImpl *v2;

  v1 = *((_DWORD *)this + 33);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    v2 = (physx::PxArticulationImpl *)*((_QWORD *)this + 15);
    if (v2 == (physx::PxArticulationImpl *)((char *)this + 80))
    {
      *((_BYTE *)this + 112) = 0;
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

float32x2_t physx::PxArticulationImpl::PxArticulationImpl(physx::PxArticulationImpl *this, char a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float32x2_t result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v2 = physx::Sc::Physics::mInstance;
  *((_QWORD *)this + 4) = 0x400000004;
  v3 = *(float *)(v2 + 4);
  v4 = *(float *)v2 * 0.1;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 68) = a2;
  *((_DWORD *)this + 10) = 4;
  *((_WORD *)this + 22) = 260;
  *((float *)this + 12) = v4;
  result = vmul_n_f32(vmul_n_f32((float32x2_t)0x36A7C5AC3851B717, v3), v3);
  *(float32x2_t *)((char *)this + 52) = result;
  *((_DWORD *)this + 15) = 1053609164;
  *((_DWORD *)this + 2) = 117440512;
  *((_DWORD *)this + 18) = 1053609164;
  *((_WORD *)this + 38) = 1;
  *((_BYTE *)this + 112) = 1;
  *((_QWORD *)this + 15) = (char *)this + 80;
  *((_QWORD *)this + 16) = 0x400000000;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxJoint *>::getName() [T = physx::PxJoint *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxJoint *>::getName() [T = physx::PxJoint *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

float32_t physx::Scb::Body::addSpatialAcceleration(physx::Scb::Base *a1, float32x2_t *a2, float32x2_t *a3, double a4)
{
  float32x2_t *v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float32_t result;

  v5 = a2;
  v7 = *((_DWORD *)a1 + 2);
  if (v7 >> 30 == 2)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 7689))
      return physx::Sc::BodyCore::addSpatialAcceleration((physx::Sc::BodySim **)a1 + 4, *(_QWORD *)(v8 + 4384), a2, a3);
  }
  else if (v7 >> 30 != 3)
  {
    v8 = *(_QWORD *)a1;
    return physx::Sc::BodyCore::addSpatialAcceleration((physx::Sc::BodySim **)a1 + 4, *(_QWORD *)(v8 + 4384), a2, a3);
  }
  v9 = *((_QWORD *)a1 + 2);
  if (!v9)
  {
    *(_QWORD *)&a4 = physx::Scb::Scene::getStream(*(_QWORD *)a1, HIBYTE(v7) & 0xF).n128_u64[0];
    *((_QWORD *)a1 + 2) = v9;
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a2)
  {
LABEL_7:
    a4 = COERCE_DOUBLE(vadd_f32(*v5, *(float32x2_t *)(v9 + 300)));
    *(double *)(v9 + 300) = a4;
    *(float *)&a4 = v5[1].f32[0] + *(float *)(v9 + 308);
    *(_DWORD *)(v9 + 308) = LODWORD(a4);
    LODWORD(v5) = 0x10000;
  }
LABEL_8:
  if (a3)
  {
    a4 = COERCE_DOUBLE(vadd_f32(*a3, *(float32x2_t *)(v9 + 312)));
    *(double *)(v9 + 312) = a4;
    *(float *)&a4 = a3[1].f32[0] + *(float *)(v9 + 320);
    *(_DWORD *)(v9 + 320) = LODWORD(a4);
    LODWORD(v5) = v5 | 0x20000;
  }
  physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)a1, a1, *(int8x8_t *)&a4);
  *((_DWORD *)a1 + 71) |= v5;
  return result;
}

float32_t physx::Scb::Body::addSpatialVelocity(physx::Scb::Base *a1, float32x2_t *a2, float32x2_t *a3, double a4)
{
  float32x2_t *v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float32_t result;

  v5 = a2;
  v7 = *((_DWORD *)a1 + 2);
  if (v7 >> 30 == 2)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 7689))
      return physx::Sc::BodyCore::addSpatialVelocity((physx::Sc::BodySim **)a1 + 4, *(_QWORD *)(v8 + 4384), a2, a3);
  }
  else if (v7 >> 30 != 3)
  {
    v8 = *(_QWORD *)a1;
    return physx::Sc::BodyCore::addSpatialVelocity((physx::Sc::BodySim **)a1 + 4, *(_QWORD *)(v8 + 4384), a2, a3);
  }
  v9 = *((_QWORD *)a1 + 2);
  if (!v9)
  {
    *(_QWORD *)&a4 = physx::Scb::Scene::getStream(*(_QWORD *)a1, HIBYTE(v7) & 0xF).n128_u64[0];
    *((_QWORD *)a1 + 2) = v9;
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a2)
  {
LABEL_7:
    a4 = COERCE_DOUBLE(vadd_f32(*v5, *(float32x2_t *)(v9 + 324)));
    *(double *)(v9 + 324) = a4;
    *(float *)&a4 = v5[1].f32[0] + *(float *)(v9 + 332);
    *(_DWORD *)(v9 + 332) = LODWORD(a4);
    LODWORD(v5) = 0x40000;
  }
LABEL_8:
  if (a3)
  {
    a4 = COERCE_DOUBLE(vadd_f32(*a3, *(float32x2_t *)(v9 + 336)));
    *(double *)(v9 + 336) = a4;
    *(float *)&a4 = a3[1].f32[0] + *(float *)(v9 + 344);
    *(_DWORD *)(v9 + 344) = LODWORD(a4);
    LODWORD(v5) = v5 | 0x80000;
  }
  physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)a1, a1, *(int8x8_t *)&a4);
  *((_DWORD *)a1 + 71) |= v5;
  return result;
}

void physx::Scb::Body::setFlags(physx::Sc::BodyCore *this, char *a2, int8x8_t a3)
{
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v5 = *((_DWORD *)this + 71);
  if ((v5 & 0x4000) != 0)
    v6 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 348);
  else
    v6 = (unsigned __int8 *)this + 76;
  v7 = *v6;
  v8 = *a2;
  v9 = *((_DWORD *)this + 2) >> 30;
  if (v9 == 3 || v9 == 2 && *(_BYTE *)(*(_QWORD *)this + 7689))
  {
    if (v7 & 1 | ((*a2 & 1) == 0))
    {
      if ((v7 & ((*a2 & 1) == 0)) != 0)
        *((_DWORD *)this + 71) = v5 & 0xFFFF7FFF;
    }
    else
    {
      physx::Scb::Body::putToSleepInternal(this, a3);
    }
    v11 = *((_QWORD *)this + 2);
    v12 = *(_QWORD **)this;
    if (!v11)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v12, *((_BYTE *)this + 11) & 0xF).n128_u64[0];
      v11 = v13;
      *((_QWORD *)this + 2) = v13;
      v12 = *(_QWORD **)this;
    }
    *(_BYTE *)(v11 + 348) = *a2;
    physx::Scb::Scene::scheduleForUpdate(v12, this, a3);
    *((_DWORD *)this + 71) |= 0x4000u;
  }
  else
  {
    if (!(v7 & 1 | ((*a2 & 1) == 0)))
    {
      *(_QWORD *)((char *)this + 252) = 0;
      *(_QWORD *)((char *)this + 268) = 0;
      *(_QWORD *)((char *)this + 276) = 0x100000000;
      *(_QWORD *)((char *)this + 260) = 0;
    }
    if (*(_QWORD *)this)
      v10 = *(_QWORD *)(*(_QWORD *)this + 4384);
    else
      v10 = 0;
    v14 = v8;
    physx::Sc::BodyCore::setFlags((physx::Sc::BodyCore *)((char *)this + 32), v10, &v14, a3);
  }
}

_QWORD *physx::Scb::Body::putToSleepInternal(physx::Scb::Body *this, int8x8_t a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  int8x8_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int8x8_t v11;
  int v12;

  v3 = *((_DWORD *)this + 2) >> 30;
  if (v3 == 3)
  {
    *(_QWORD *)((char *)this + 276) = 0x100000000;
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 63) = 0;
    v4 = *(_QWORD **)this;
  }
  else
  {
    if (v3 != 2 || (v4 = *(_QWORD **)this, !*(_BYTE *)(*(_QWORD *)this + 7689)))
    {
      *(_QWORD *)((char *)this + 252) = 0;
      v5 = (_QWORD *)((char *)this + 252);
      v5[2] = 0;
      v5[3] = 0x100000000;
      v5[1] = 0;
      return (_QWORD *)physx::Sc::BodyCore::putToSleep((physx::Sc::BodyCore *)((char *)v5 - 220));
    }
    *(_QWORD *)((char *)this + 276) = 0x100000000;
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 63) = 0;
  }
  physx::Scb::Scene::scheduleForUpdate(v4, this, a2);
  *((_DWORD *)this + 71) |= 0x400000u;
  v8 = *((_DWORD *)this + 2);
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 68) = 0;
  v9 = v8 >> 30;
  if (v9 == 2)
  {
    v10 = *(_QWORD **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 7689))
      goto LABEL_11;
LABEL_12:
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    updateBodySim((uint64_t *)this + 4);
    v12 = *((_DWORD *)this + 71);
    goto LABEL_13;
  }
  if (v9 != 3)
    goto LABEL_12;
  v10 = *(_QWORD **)this;
LABEL_11:
  physx::Scb::Scene::scheduleForUpdate(v10, this, v7);
  v12 = *((_DWORD *)this + 71) | 0x800000;
LABEL_13:
  *((_DWORD *)this + 71) = v12 & 0xFFF07FFF;
  result = physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)this, this, v11);
  *((_DWORD *)this + 71) = *((_DWORD *)this + 71) & 0xF8FFFFFF | 0x3000000;
  return result;
}

physx::Sc::ArticulationJointSim *physx::PxArticulationJointImpl::setParentPose(_DWORD *a1, float *a2)
{
  physx::Sc::ArticulationJointSim *result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int8x8_t v23;
  float v24;
  unsigned int v25;
  _QWORD *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  _DWORD v35[7];

  result = (physx::Sc::ArticulationJointSim *)*((_QWORD *)a1 + 51);
  if (!result)
    return result;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)result + 224))(&v29);
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a2 * *a2)) + (float)(v6 * v6)) + (float)(v7 * v7));
  *(float *)v23.i32 = *a2 / v8;
  v9 = v5 / v8;
  v10 = v6 / v8;
  v11 = v7 / v8;
  v12 = (float)(a2[4] - v32) + (float)(a2[4] - v32);
  v13 = (float)(a2[5] - v33) + (float)(a2[5] - v33);
  v14 = (float)(a2[6] - v34) + (float)(a2[6] - v34);
  v15 = (float)(v31 * v31) + -0.5;
  v16 = (float)((float)-(float)(*((float *)&v29 + 1) * v13) - (float)(*(float *)&v29 * v12)) - (float)(v30 * v14);
  v17 = (float)((float)(v31 * (float)((float)(v30 * v13) - (float)(*((float *)&v29 + 1) * v14))) + (float)(v12 * v15))
      - (float)(*(float *)&v29 * v16);
  v18 = (float)((float)(v31 * (float)((float)(*(float *)&v29 * v14) - (float)(v30 * v12))) + (float)(v13 * v15))
      - (float)(*((float *)&v29 + 1) * v16);
  v19 = (float)((float)(v31 * (float)((float)(*((float *)&v29 + 1) * v12) - (float)(*(float *)&v29 * v13)))
              + (float)(v14 * v15))
      - (float)(v30 * v16);
  v20 = (float)((float)((float)(v31 * *(float *)v23.i32) - (float)(*(float *)&v29 * v11))
              - (float)(*((float *)&v29 + 1) * v10))
      + (float)(v9 * v30);
  v21 = (float)((float)((float)(v31 * v9) - (float)(*((float *)&v29 + 1) * v11)) - (float)(v30 * *(float *)v23.i32))
      + (float)(v10 * *(float *)&v29);
  v22 = (float)((float)((float)(v31 * v10) - (float)(v30 * v11)) - (float)(*(float *)&v29 * v9))
      + (float)(*(float *)v23.i32 * *((float *)&v29 + 1));
  *(float *)v23.i32 = (float)((float)(*(float *)v23.i32 * *(float *)&v29) + (float)(v31 * v11))
                    + (float)(*((float *)&v29 + 1) * v9);
  v24 = *(float *)v23.i32 + (float)(v30 * v10);
  *(float *)v35 = v20;
  *(float *)&v35[1] = v21;
  *(float *)&v35[2] = v22;
  *(float *)&v35[3] = v24;
  *(float *)&v35[4] = v17;
  *(float *)&v35[5] = v18;
  *(float *)&v35[6] = v19;
  v25 = a1[2];
  if (v25 >> 30 == 2)
  {
    v26 = *(_QWORD **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 7689))
      goto LABEL_6;
    return physx::Sc::ArticulationJointCore::setParentPose((uint64_t)(a1 + 6), (uint64_t)v35);
  }
  if (v25 >> 30 != 3)
    return physx::Sc::ArticulationJointCore::setParentPose((uint64_t)(a1 + 6), (uint64_t)v35);
  v26 = *(_QWORD **)a1;
LABEL_6:
  v27 = (float *)*((_QWORD *)a1 + 2);
  if (!v27)
  {
    v23 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v26, HIBYTE(v25) & 0xF).n128_u64[0];
    v27 = v28;
    *((_QWORD *)a1 + 2) = v28;
    v26 = *(_QWORD **)a1;
  }
  *v27 = v20;
  v27[1] = v21;
  v27[2] = v22;
  v27[3] = v24;
  v27[4] = v17;
  v27[5] = v18;
  v27[6] = v19;
  result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v26, (physx::Scb::Base *)a1, v23);
  a1[2] |= 1u;
  return result;
}

float physx::PxArticulationJointImpl::getParentPose(physx::PxArticulationJointImpl *this, uint64_t a2)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float result;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 408) + 224))(&v23);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v4 = *(float **)(a2 + 16);
  else
    v4 = (float *)(a2 + 32);
  v5 = v4[1];
  v6 = v4[2];
  v7 = v4[3];
  v8 = v4[4] + v4[4];
  v9 = v4[5] + v4[5];
  v10 = v4[6] + v4[6];
  v11 = (float)(v25 * v25) + -0.5;
  v12 = (float)((float)(v9 * *((float *)&v23 + 1)) + (float)(*(float *)&v23 * v8)) + (float)(v24 * v10);
  v13 = (float)((float)(v25 * (float)((float)(*((float *)&v23 + 1) * v10) - (float)(v24 * v9))) + (float)(v8 * v11))
      + (float)(*(float *)&v23 * v12);
  v14 = (float)((float)(v25 * (float)((float)(v24 * v8) - (float)(*(float *)&v23 * v10))) + (float)(v9 * v11))
      + (float)(*((float *)&v23 + 1) * v12);
  v15 = (float)((float)(v25 * (float)((float)(*(float *)&v23 * v9) - (float)(*((float *)&v23 + 1) * v8)))
              + (float)(v10 * v11))
      + (float)(v24 * v12);
  v16 = v26 + v13;
  v17 = v27 + v14;
  v18 = v28;
  v19 = (float)((float)((float)(v7 * *((float *)&v23 + 1)) + (float)(v25 * v5)) + (float)(v24 * *v4))
      - (float)(v6 * *(float *)&v23);
  v20 = (float)((float)((float)(v7 * v24) + (float)(v25 * v6)) + (float)(*(float *)&v23 * v5))
      - (float)(*v4 * *((float *)&v23 + 1));
  v21 = (float)((float)((float)(v25 * v7) - (float)(*(float *)&v23 * *v4)) - (float)(*((float *)&v23 + 1) * v5))
      - (float)(v24 * v6);
  *(float *)this = (float)((float)((float)(v7 * *(float *)&v23) + (float)(v25 * *v4))
                         + (float)(*((float *)&v23 + 1) * v6))
                 - (float)(v5 * v24);
  *((float *)this + 1) = v19;
  *((float *)this + 2) = v20;
  *((float *)this + 3) = v21;
  result = v18 + v15;
  *((float *)this + 4) = v16;
  *((float *)this + 5) = v17;
  *((float *)this + 6) = v18 + v15;
  return result;
}

physx::Sc::ArticulationJointSim *physx::PxArticulationJointImpl::setChildPose(_DWORD *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int8x8_t v22;
  float v23;
  unsigned int v24;
  _QWORD *v25;
  float *v26;
  float *v27;
  physx::Sc::ArticulationJointSim *result;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  _DWORD v35[7];

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a1 + 52) + 224))(&v29);
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = sqrtf((float)((float)((float)(v4 * v4) + (float)(*a2 * *a2)) + (float)(v5 * v5)) + (float)(v6 * v6));
  *(float *)v22.i32 = *a2 / v7;
  v8 = v4 / v7;
  v9 = v5 / v7;
  v10 = v6 / v7;
  v11 = (float)(a2[4] - v32) + (float)(a2[4] - v32);
  v12 = (float)(a2[5] - v33) + (float)(a2[5] - v33);
  v13 = (float)(a2[6] - v34) + (float)(a2[6] - v34);
  v14 = (float)(v31 * v31) + -0.5;
  v15 = (float)((float)-(float)(*((float *)&v29 + 1) * v12) - (float)(*(float *)&v29 * v11)) - (float)(v30 * v13);
  v16 = (float)((float)(v31 * (float)((float)(v30 * v12) - (float)(*((float *)&v29 + 1) * v13))) + (float)(v11 * v14))
      - (float)(*(float *)&v29 * v15);
  v17 = (float)((float)(v31 * (float)((float)(*(float *)&v29 * v13) - (float)(v30 * v11))) + (float)(v12 * v14))
      - (float)(*((float *)&v29 + 1) * v15);
  v18 = (float)((float)(v31 * (float)((float)(*((float *)&v29 + 1) * v11) - (float)(*(float *)&v29 * v12)))
              + (float)(v13 * v14))
      - (float)(v30 * v15);
  v19 = (float)((float)((float)(v31 * *(float *)v22.i32) - (float)(*(float *)&v29 * v10))
              - (float)(*((float *)&v29 + 1) * v9))
      + (float)(v8 * v30);
  v20 = (float)((float)((float)(v31 * v8) - (float)(*((float *)&v29 + 1) * v10)) - (float)(v30 * *(float *)v22.i32))
      + (float)(v9 * *(float *)&v29);
  v21 = (float)((float)((float)(v31 * v9) - (float)(v30 * v10)) - (float)(*(float *)&v29 * v8))
      + (float)(*(float *)v22.i32 * *((float *)&v29 + 1));
  *(float *)v22.i32 = (float)((float)(*(float *)v22.i32 * *(float *)&v29) + (float)(v31 * v10))
                    + (float)(*((float *)&v29 + 1) * v8);
  v23 = *(float *)v22.i32 + (float)(v30 * v9);
  *(float *)v35 = v19;
  *(float *)&v35[1] = v20;
  *(float *)&v35[2] = v21;
  *(float *)&v35[3] = v23;
  *(float *)&v35[4] = v16;
  *(float *)&v35[5] = v17;
  *(float *)&v35[6] = v18;
  v24 = a1[2];
  if (v24 >> 30 == 2)
  {
    v25 = *(_QWORD **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 7689))
      goto LABEL_5;
    return physx::Sc::ArticulationJointCore::setChildPose((uint64_t)(a1 + 6), (uint64_t)v35);
  }
  if (v24 >> 30 != 3)
    return physx::Sc::ArticulationJointCore::setChildPose((uint64_t)(a1 + 6), (uint64_t)v35);
  v25 = *(_QWORD **)a1;
LABEL_5:
  v26 = (float *)*((_QWORD *)a1 + 2);
  if (!v26)
  {
    v22 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v25, HIBYTE(v24) & 0xF).n128_u64[0];
    v26 = v27;
    *((_QWORD *)a1 + 2) = v27;
    v25 = *(_QWORD **)a1;
  }
  v26[7] = v19;
  v26[8] = v20;
  v26[9] = v21;
  v26[10] = v23;
  v26[11] = v16;
  v26[12] = v17;
  v26[13] = v18;
  result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v25, (physx::Scb::Base *)a1, v22);
  a1[2] |= 2u;
  return result;
}

float physx::PxArticulationJointImpl::getChildPose(physx::PxArticulationJointImpl *this, uint64_t a2)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float result;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 416) + 224))(&v23);
  if ((*(_BYTE *)(a2 + 8) & 2) != 0)
    v4 = (float *)(*(_QWORD *)(a2 + 16) + 28);
  else
    v4 = (float *)(a2 + 60);
  v5 = v4[1];
  v6 = v4[2];
  v7 = v4[3];
  v8 = v4[4] + v4[4];
  v9 = v4[5] + v4[5];
  v10 = v4[6] + v4[6];
  v11 = (float)(v25 * v25) + -0.5;
  v12 = (float)((float)(v9 * *((float *)&v23 + 1)) + (float)(*(float *)&v23 * v8)) + (float)(v24 * v10);
  v13 = (float)((float)(v25 * (float)((float)(*((float *)&v23 + 1) * v10) - (float)(v24 * v9))) + (float)(v8 * v11))
      + (float)(*(float *)&v23 * v12);
  v14 = (float)((float)(v25 * (float)((float)(v24 * v8) - (float)(*(float *)&v23 * v10))) + (float)(v9 * v11))
      + (float)(*((float *)&v23 + 1) * v12);
  v15 = (float)((float)(v25 * (float)((float)(*(float *)&v23 * v9) - (float)(*((float *)&v23 + 1) * v8)))
              + (float)(v10 * v11))
      + (float)(v24 * v12);
  v16 = v26 + v13;
  v17 = v27 + v14;
  v18 = v28;
  v19 = (float)((float)((float)(v7 * *((float *)&v23 + 1)) + (float)(v25 * v5)) + (float)(v24 * *v4))
      - (float)(v6 * *(float *)&v23);
  v20 = (float)((float)((float)(v7 * v24) + (float)(v25 * v6)) + (float)(*(float *)&v23 * v5))
      - (float)(*v4 * *((float *)&v23 + 1));
  v21 = (float)((float)((float)(v25 * v7) - (float)(*(float *)&v23 * *v4)) - (float)(*((float *)&v23 + 1) * v5))
      - (float)(v24 * v6);
  *(float *)this = (float)((float)((float)(v7 * *(float *)&v23) + (float)(v25 * *v4))
                         + (float)(*((float *)&v23 + 1) * v6))
                 - (float)(v5 * v24);
  *((float *)this + 1) = v19;
  *((float *)this + 2) = v20;
  *((float *)this + 3) = v21;
  result = v18 + v15;
  *((float *)this + 4) = v16;
  *((float *)this + 5) = v17;
  *((float *)this + 6) = v18 + v15;
  return result;
}

_QWORD *physx::Scb::Body::setWakeCounter(physx::Scb::Body *this, double a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;
  int v8;
  _QWORD *result;
  unsigned int v10;

  *((_DWORD *)this + 69) = LODWORD(a2);
  v3 = *((_DWORD *)this + 2) >> 30;
  if (v3 == 2)
  {
    v4 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 7689))
      goto LABEL_8;
  }
  else if (v3 != 3)
  {
    v4 = *(_QWORD *)this;
LABEL_8:
    if (*(float *)&a2 > 0.0 && v4 != 0)
      *((_DWORD *)this + 70) = 0;
    v7 = (char *)this + 32;
    v8 = 0;
    return (_QWORD *)physx::Sc::BodyCore::setWakeCounter((uint64_t)v7, *(float *)&a2, v8);
  }
  if (*(float *)&a2 <= 0.0)
  {
    result = physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)this, this, *(int8x8_t *)&a2);
    v10 = *((_DWORD *)this + 71) | 0x1000000;
  }
  else
  {
    if (v3 == 2)
    {
      v5 = *(_QWORD **)this;
      if (!*(_BYTE *)(*(_QWORD *)this + 7689))
      {
        *((_DWORD *)this + 70) = 0;
        *((_DWORD *)this + 69) = LODWORD(a2);
        v7 = (char *)this + 32;
        v8 = 1;
        return (_QWORD *)physx::Sc::BodyCore::setWakeCounter((uint64_t)v7, *(float *)&a2, v8);
      }
    }
    else
    {
      v5 = *(_QWORD **)this;
    }
    *((_DWORD *)this + 70) = 0;
    *((_DWORD *)this + 69) = LODWORD(a2);
    result = physx::Scb::Scene::scheduleForUpdate(v5, this, *(int8x8_t *)&a2);
    v10 = *((_DWORD *)this + 71) & 0xF8FFFFFF | 0x5000000;
  }
  *((_DWORD *)this + 71) = v10;
  return result;
}

void physx::NpBatchQuery::~NpBatchQuery(physx::NpBatchQuery *this)
{
  int v2;

  *(_QWORD *)this = off_24ED94778;
  v2 = *((_DWORD *)this + 9);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 3) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1);
}

{
  uint64_t v2;

  physx::NpBatchQuery::~NpBatchQuery(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpBatchQuery *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpBatchQuery::setUserMemory(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v9 = (unsigned int *)(result + 60);
  while (!__ldaxr(v9))
  {
    if (!__stlxr(0, v9))
    {
      *(_OWORD *)(result + 96) = *(_OWORD *)a2;
      v11 = *(_OWORD *)(a2 + 16);
      v12 = *(_OWORD *)(a2 + 32);
      v13 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 128) = v12;
      *(_OWORD *)(result + 144) = v13;
      *(_OWORD *)(result + 112) = v11;
      return result;
    }
  }
  __clrex();
  return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 73, "PxBatchQuery::setUserMemory: This batch is still executing, skipping setUserMemory", a6, a7, a8, a9);
}

uint64_t physx::NpBatchQuery::getUserMemory(physx::NpBatchQuery *this)
{
  return (uint64_t)this + 96;
}

uint64_t physx::NpBatchQuery::execute(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  unsigned int v64;
  char v65;
  BOOL v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  BOOL v71;
  char v72;
  uint64_t v73;
  __int128 v74;
  unsigned int v75;
  char v76;
  BOOL v77;
  uint64_t v78;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  uint64_t (**v92)();
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[32];
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  int v112;
  __int128 v113;

  v9 = this;
  v10 = (unsigned int *)(this + 60);
  while (1)
  {
    v11 = __ldaxr(v10);
    if (v11)
      break;
    if (!__stlxr(1u, v10))
      goto LABEL_6;
  }
  __clrex();
LABEL_6:
  if (v11 == -1)
  {
    v12 = "PxBatchQuery::execute: Another thread is still adding queries to this batch";
    v13 = physx::shdfnd::Foundation::mInstance;
    v14 = 317;
  }
  else
  {
    if (v11 != 1)
    {
      v15 = *(unsigned int *)(this + 48);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(this + 96) + 89;
        do
        {
          *(_WORD *)(v16 - 1) = 0;
          *(_DWORD *)(v16 - 17) = 0;
          *(_QWORD *)(v16 - 25) = 0;
          *(_QWORD *)(v16 - 9) = 0;
          v16 += 96;
          --v15;
        }
        while (v15);
      }
      v17 = *(unsigned int *)(this + 52);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(this + 128) + 49;
        do
        {
          *(_WORD *)(v18 - 1) = 0;
          *(_DWORD *)(v18 - 17) = 0;
          *(_QWORD *)(v18 - 25) = 0;
          *(_QWORD *)(v18 - 9) = 0;
          v18 += 56;
          --v17;
        }
        while (v17);
      }
      v19 = *(unsigned int *)(this + 56);
      v20 = *(_QWORD *)(this + 112);
      if ((_DWORD)v19)
      {
        v21 = v20 + 81;
        do
        {
          *(_WORD *)(v21 - 1) = 0;
          *(_DWORD *)(v21 - 17) = 0;
          *(_QWORD *)(v21 - 25) = 0;
          *(_QWORD *)(v21 - 9) = 0;
          v21 += 88;
          --v19;
        }
        while (v19);
      }
      v23 = *(_QWORD *)(this + 96);
      v22 = *(_QWORD *)(this + 104);
      v25 = *(_QWORD *)(this + 128);
      v24 = *(_QWORD *)(this + 136);
      v26 = *(_QWORD *)(this + 120);
      v83 = *(_DWORD *)(this + 144);
      v84 = *(_DWORD *)(this + 152);
      v82 = *(_DWORD *)(this + 148);
      v27 = *(_DWORD *)(this + 72);
      v111 = *(_QWORD *)(this + 64);
      v112 = v27;
      v113 = *(_OWORD *)(this + 80);
      if (*(_DWORD *)(this + 168) == -16)
      {
        *(_DWORD *)(this + 168) = -16;
        *(_DWORD *)(this + 40) = 0;
        *(_DWORD *)(this + 56) = 0;
        *(_QWORD *)(this + 48) = 0;
        *(_BYTE *)(this + 172) = 0;
        while (1)
        {
          v28 = *v10;
          while (1)
          {
            v29 = __ldaxr(v10);
            if (v29 != v28)
              break;
            if (!__stlxr(0, v10))
              return this;
          }
          __clrex();
        }
      }
      v87 = v26;
      v88 = v22;
      v30 = 0;
      v31 = 0;
      v85 = v23;
      v86 = this;
      do
      {
        v32 = *(_QWORD *)(v9 + 24);
        v33 = v32 + v31;
        v31 = *(unsigned int *)(v32 + v31);
        _X8 = v32 + v31;
        __asm { PRFM            #0, [X8] }
        v38 = (_QWORD *)(v33 + 56);
        if (*(_QWORD *)(v33 + 56))
        {
          *(_QWORD *)(v33 + 56) = v33 + 104;
          v39 = 116;
        }
        else
        {
          v39 = 104;
        }
        if (*(_QWORD *)(v33 + 64))
        {
          v40 = v33 + v39;
          v39 += 12;
          *(_QWORD *)(v33 + 64) = v40;
        }
        if (*(_QWORD *)(v33 + 88))
        {
          v41 = v33 + v39;
          v39 += 28;
          *(_QWORD *)(v33 + 88) = v41;
        }
        if (*(_QWORD *)(v33 + 80))
        {
          v42 = *(_DWORD *)(v33 + v39);
          _ZF = v42 > 4 || v42 == 1;
          v44 = v39 + v33 + 4;
          if (_ZF)
            v44 = 0;
          *(_QWORD *)(v33 + 80) = v44;
        }
        v45 = *(char *)(v33 + 50);
        if (v45 == 2)
        {
          v68 = v82 + 1227133513 * ((unint64_t)(v87 - *(_QWORD *)(v9 + 120)) >> 3);
          if (*(unsigned __int16 *)(v33 + 48) >= v68)
            v69 = v82 + 1227133513 * ((unint64_t)(v87 - *(_QWORD *)(v9 + 120)) >> 3);
          else
            v69 = *(unsigned __int16 *)(v33 + 48);
          v93 = 0uLL;
          LODWORD(v94) = -1;
          WORD2(v94) = 0;
          *(_OWORD *)v96 = 0uLL;
          v95 = 0;
          *(_DWORD *)&v96[16] = 2139095039;
          v96[24] = 0;
          v97 = v87;
          v98 = v69;
          v92 = off_24ED94E20;
          LOBYTE(v99) = 0;
          v101 = 0;
          v102 = 0;
          LODWORD(v103) = -1;
          WORD2(v103) = 0;
          v104 = 0;
          v105 = 0;
          v106 = 0;
          LODWORD(v107) = 2139095039;
          LOBYTE(v109) = 0;
          v70 = *(_QWORD *)(v9 + 16);
          v89 = *(_WORD *)(v33 + 4);
          this = physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(v70, (uint64_t)v38, (uint64_t)&v92, &v89, *(_QWORD **)(v33 + 40), v33 + 8, 0, (uint64_t)&v111);
          v71 = 0;
          if (!v68)
            v71 = *(_WORD *)(v33 + 48) != 0;
          v72 = v99 | v71;
          LOBYTE(v99) = v72;
          v73 = *(_QWORD *)(v33 + 32);
          v74 = v93;
          *(_DWORD *)(v20 + 16) = v94;
          *(_OWORD *)v20 = v74;
          v75 = HIDWORD(v98);
          if (v72)
            v76 = 2;
          else
            v76 = 1;
          if (HIDWORD(v98))
            v77 = 1;
          else
            v77 = v72 == 0;
          *(_QWORD *)(v20 + 72) = v73;
          *(_WORD *)(v20 + 20) = WORD2(v94);
          *(_QWORD *)(v20 + 24) = v95;
          *(_DWORD *)(v20 + 32) = *(_DWORD *)v96;
          *(_OWORD *)(v20 + 36) = *(_OWORD *)&v96[4];
          *(_DWORD *)(v20 + 52) = *(_DWORD *)&v96[20];
          *(_BYTE *)(v20 + 81) = v96[24];
          *(_DWORD *)(v20 + 64) = v75;
          *(_BYTE *)(v20 + 80) = v76;
          v78 = v97;
          if (!v77)
            v78 = 0;
          *(_QWORD *)(v20 + 56) = v78;
          v20 += 88;
          v87 += 56 * v75;
          v9 = v86;
        }
        else if (v45 == 1)
        {
          v57 = v84 + 1431655765 * ((unint64_t)(v24 - *(_QWORD *)(v9 + 136)) >> 3);
          if (*(unsigned __int16 *)(v33 + 48) >= v57)
            v58 = v84 + 1431655765 * ((unint64_t)(v24 - *(_QWORD *)(v9 + 136)) >> 3);
          else
            v58 = *(unsigned __int16 *)(v33 + 48);
          v93 = 0uLL;
          LODWORD(v94) = -1;
          LOBYTE(v95) = 0;
          *(_QWORD *)v96 = v24;
          *(_QWORD *)&v96[8] = v58;
          v92 = off_24ED94DD8;
          v96[16] = 0;
          *(_QWORD *)&v96[24] = 0;
          v97 = 0;
          LODWORD(v98) = -1;
          LOBYTE(v101) = 0;
          v59 = *(_QWORD *)(v9 + 16);
          v90 = *(_WORD *)(v33 + 4);
          this = physx::NpSceneQueries::multiQuery<physx::PxOverlapHit>(v59, (uint64_t)v38, (uint64_t)&v92, &v90, *(_QWORD **)(v33 + 40), v33 + 8, 0, (uint64_t)&v111);
          v60 = 0;
          if (!v57)
            v60 = *(_WORD *)(v33 + 48) != 0;
          v61 = v96[16] | v60;
          v96[16] = v61;
          v62 = *(_QWORD *)(v33 + 32);
          v63 = v93;
          *(_QWORD *)(v25 + 16) = v94;
          *(_OWORD *)v25 = v63;
          v64 = *(_DWORD *)&v96[12];
          if (v61)
            v65 = 2;
          else
            v65 = 1;
          if (*(_DWORD *)&v96[12])
            v66 = 1;
          else
            v66 = v61 == 0;
          *(_QWORD *)(v25 + 40) = v62;
          *(_BYTE *)(v25 + 49) = v95;
          *(_DWORD *)(v25 + 32) = v64;
          *(_BYTE *)(v25 + 48) = v65;
          v67 = *(_QWORD *)v96;
          if (!v66)
            v67 = 0;
          *(_QWORD *)(v25 + 24) = v67;
          v25 += 56;
          v24 += 24 * v64;
        }
        else if (!*(_BYTE *)(v33 + 50))
        {
          v46 = (unint64_t)(v88 - *(_QWORD *)(v9 + 104)) >> 6;
          v47 = v83 - v46;
          if (*(unsigned __int16 *)(v33 + 48) < (v83 - v46))
            v47 = *(unsigned __int16 *)(v33 + 48);
          v93 = 0uLL;
          LODWORD(v94) = -1;
          WORD2(v94) = 0;
          *(_OWORD *)v96 = 0uLL;
          v95 = 0;
          *(_QWORD *)&v96[16] = 2139095039;
          *(_DWORD *)&v96[24] = 0;
          LOBYTE(v97) = 0;
          v98 = v88;
          v99 = v47;
          v100 = 0;
          v92 = off_24ED94D90;
          LOBYTE(v101) = 0;
          v102 = 0;
          v103 = 0;
          LODWORD(v104) = -1;
          WORD2(v104) = 0;
          v106 = 0;
          v107 = 0;
          v105 = 0;
          v108 = 2139095039;
          v109 = 0;
          v110 = 0;
          v48 = *(_QWORD *)(v9 + 16);
          v91 = *(_WORD *)(v33 + 4);
          this = physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(v48, v38, (uint64_t)&v92, &v91, *(_QWORD **)(v33 + 40), v33 + 8, 0, (uint64_t)&v111);
          v49 = 0;
          if (v83 == (_DWORD)v46)
            v49 = *(_WORD *)(v33 + 48) != 0;
          v50 = v101 | v49;
          LOBYTE(v101) = v50;
          v51 = *(_QWORD *)(v33 + 32);
          v52 = v93;
          *(_DWORD *)(v85 + 16) = v94;
          *(_OWORD *)v85 = v52;
          *(_WORD *)(v85 + 20) = WORD2(v94);
          *(_QWORD *)(v85 + 24) = v95;
          *(_DWORD *)(v85 + 32) = *(_DWORD *)v96;
          *(_OWORD *)(v85 + 36) = *(_OWORD *)&v96[4];
          *(_QWORD *)(v85 + 52) = *(_QWORD *)&v96[20];
          v53 = v100;
          if (v50)
            v54 = 2;
          else
            v54 = 1;
          if (v100)
            v55 = 1;
          else
            v55 = v50 == 0;
          *(_QWORD *)(v85 + 80) = v51;
          *(_BYTE *)(v85 + 89) = v97;
          *(_DWORD *)(v85 + 72) = v53;
          *(_BYTE *)(v85 + 88) = v54;
          v56 = v98;
          if (!v55)
            v56 = 0;
          *(_QWORD *)(v85 + 64) = v56;
          v88 += v53 << 6;
          v85 += 96;
          v9 = v86;
        }
      }
      while (*(_DWORD *)v33 != -16 && ++v30 < 0xF4240);
      *(_DWORD *)(v9 + 168) = -16;
      *(_DWORD *)(v9 + 40) = 0;
      *(_DWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_BYTE *)(v9 + 172) = 0;
      while (1)
      {
        v80 = *v10;
        while (1)
        {
          v81 = __ldaxr(v10);
          if (v81 != v80)
            break;
          if (!__stlxr(0, v10))
            return this;
        }
        __clrex();
      }
    }
    v12 = "PxBatchQuery::execute: This batch is already executing";
    v13 = physx::shdfnd::Foundation::mInstance;
    v14 = 312;
  }
  return physx::shdfnd::Foundation::error(v13, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", v14, v12, a6, a7, a8, a9);
}

uint64_t physx::NpBatchQuery::writeBatchHeader(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;

  v4 = (_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 36) & 0x7FFFFFFF;
  v7 = 3 * (v5 + 56);
  if (v5 + 56 > v6 && v6 < v7)
    physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1 + 24, v7);
  result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized((uint64_t)v4, v5 + 56);
  v10 = *(_QWORD *)(a1 + 24) + *(unsigned int *)(a1 + 40);
  *(_DWORD *)v10 = *(_DWORD *)a2;
  *(_WORD *)(v10 + 4) = *(_WORD *)(a2 + 4);
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(v10 + 24) = *(_WORD *)(a2 + 24);
  v11 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v10 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(v10 + 32) = v11;
  *(_DWORD *)(a1 + 40) = v5 + 56;
  v14 = *(_DWORD *)(a1 + 168);
  v13 = (_DWORD *)(a1 + 168);
  v12 = v14;
  v15 = v13;
  if (v14 != -16)
    v15 = (_DWORD *)(*v4 + v12);
  *v15 = v5;
  *v13 = v5;
  return result;
}

uint64_t physx::NpBatchQuery::raycast(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, char a10)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  char v30;

  if (*(_DWORD *)(result + 48) < *(_DWORD *)(result + 156))
  {
    _X19 = a3;
    _X20 = a2;
    v13 = result;
    v14 = (unsigned int *)(result + 60);
    while (1)
    {
      v15 = __ldaxr(v14);
      if (v15)
        break;
      if (!__stlxr(0xFFFFFFFF, v14))
        goto LABEL_7;
    }
    __clrex();
LABEL_7:
    if (v15 != 1)
    {
      ++*(_DWORD *)(result + 48);
      WORD2(v24) = *a5;
      v25 = *(_OWORD *)a6;
      LOWORD(v26) = *(_WORD *)(a6 + 16);
      v27 = a7;
      v28 = a8;
      v29 = a4;
      v30 = 0;
      LODWORD(v24) = -16;
      physx::NpBatchQuery::writeBatchHeader(result, (uint64_t)&v24);
      __asm
      {
        PRFM            #0, [X20]
        PRFM            #0, [X19]
      }
      v24 = _X20;
      *(_QWORD *)&v25 = _X19;
      *((float *)&v25 + 2) = a9;
      v26 = 0;
      v27 = 0;
      LODWORD(v28) = 0;
      result = writeQueryInput(v13 + 24, (__int128 *)&v24);
      while (1)
      {
        v22 = *v14;
        while (1)
        {
          v23 = __ldaxr(v14);
          if (v23 != v22)
            break;
          if (!__stlxr(0, v14))
            return result;
        }
        __clrex();
      }
    }
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 484, "PxBatchQuery::raycast: This batch is still executing, skipping query.", a6, a7, a8, a10);
  }
  return result;
}

uint64_t writeQueryInput(uint64_t a1, __int128 *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  __int16 v37;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = v4 + 48;
  v6 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
  v7 = 3 * (v4 + 48);
  if (v4 + 48 > v6 && v6 < v7)
    physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, v7);
  result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v4 + 48);
  v10 = (_OWORD *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 16));
  v11 = *a2;
  v12 = a2[1];
  *(_OWORD *)((char *)v10 + 28) = *(__int128 *)((char *)a2 + 28);
  *v10 = v11;
  v10[1] = v12;
  *(_DWORD *)(a1 + 16) = v5;
  v13 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = v4 + 60;
    v14 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    if (v4 + 60 > v14 && v14 < 3 * v5)
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v5);
    result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v4 + 60);
    v15 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 16);
    *(_QWORD *)v15 = *(_QWORD *)v13;
    *(_DWORD *)(v15 + 8) = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v5;
  }
  v16 = *((_QWORD *)a2 + 1);
  if (v16)
  {
    v5 += 12;
    v17 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    v18 = 3 * v5;
    if (v5 > v17 && v17 < v18)
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, v18);
    result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v5);
    v20 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 16);
    *(_QWORD *)v20 = *(_QWORD *)v16;
    *(_DWORD *)(v20 + 8) = *(_DWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v5;
  }
  v21 = *((_QWORD *)a2 + 4);
  if (v21)
  {
    v5 += 28;
    v22 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    if (v5 > v22 && v22 < 3 * v5)
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v5);
    result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v5);
    v23 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v21;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v21 + 16);
    *(_DWORD *)(v23 + 24) = *(_DWORD *)(v21 + 24);
    *(_DWORD *)(a1 + 16) = v5;
  }
  v24 = (int *)*((_QWORD *)a2 + 3);
  if (v24)
  {
    v25 = *v24;
    v26 = v5 + 4;
    v27 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    if (v5 + 4 > v27 && v27 < 3 * v26)
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v26);
    result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v5 + 4);
    *(_DWORD *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 16)) = v25;
    *(_DWORD *)(a1 + 16) = v26;
    switch(v25)
    {
      case 0:
        v28 = v5 + 12;
        v29 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v29 && v29 < 3 * v28)
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        *(_QWORD *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 16)) = *(_QWORD *)v24;
        goto LABEL_44;
      case 2:
        v28 = v5 + 16;
        v30 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v30 && v30 < 3 * v28)
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        v31 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 16);
        v32 = *(_QWORD *)v24;
        *(_DWORD *)(v31 + 8) = v24[2];
        *(_QWORD *)v31 = v32;
        goto LABEL_44;
      case 3:
        v28 = v5 + 20;
        v33 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v33 && v33 < 3 * v28)
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        v34 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 16);
        *(_DWORD *)v34 = *v24;
        *(_QWORD *)(v34 + 4) = *(_QWORD *)(v24 + 1);
        *(_DWORD *)(v34 + 12) = v24[3];
        goto LABEL_44;
      case 4:
        v28 = v5 + 52;
        v35 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v35 && v35 < 3 * v28)
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        v36 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 16);
        *(_DWORD *)v36 = *v24;
        *(_OWORD *)(v36 + 4) = *(_OWORD *)(v24 + 1);
        *(_QWORD *)(v36 + 20) = *(_QWORD *)(v24 + 5);
        *(_DWORD *)(v36 + 28) = v24[7];
        *(_QWORD *)(v36 + 32) = *((_QWORD *)v24 + 4);
        *(_BYTE *)(v36 + 40) = *((_BYTE *)v24 + 40);
        v37 = *(_WORD *)((char *)v24 + 41);
        *(_BYTE *)(v36 + 43) = *((_BYTE *)v24 + 43);
        *(_WORD *)(v36 + 41) = v37;
LABEL_44:
        *(_DWORD *)(a1 + 16) = v28;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t physx::NpBatchQuery::overlap(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  char v28;

  if (*(_DWORD *)(result + 52) < *(_DWORD *)(result + 164))
  {
    _X19 = a3;
    _X20 = a2;
    v11 = result;
    v12 = (unsigned int *)(result + 60);
    while (1)
    {
      v13 = __ldaxr(v12);
      if (v13)
        break;
      if (!__stlxr(0xFFFFFFFF, v12))
        goto LABEL_7;
    }
    __clrex();
LABEL_7:
    if (v13 != 1)
    {
      ++*(_DWORD *)(result + 52);
      WORD2(v22) = 0;
      v23 = *a5;
      LOWORD(v24) = *((_WORD *)a5 + 8);
      v25 = a6;
      v26 = a7;
      v27 = a4;
      v28 = 1;
      LODWORD(v22) = -16;
      physx::NpBatchQuery::writeBatchHeader(result, (uint64_t)&v22);
      __asm
      {
        PRFM            #0, [X20]
        PRFM            #0, [X19]
      }
      v24 = _X20;
      v25 = _X19;
      LODWORD(v26) = 0;
      v22 = 0;
      *(_QWORD *)&v23 = 0;
      result = writeQueryInput(v11 + 24, (__int128 *)&v22);
      while (1)
      {
        v20 = *v12;
        while (1)
        {
          v21 = __ldaxr(v12);
          if (v21 != v20)
            break;
          if (!__stlxr(0, v12))
            return result;
        }
        __clrex();
      }
    }
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 505, "PxBatchQuery::overlap: This batch is still executing, skipping query.", a6, a7, a8, a9);
  }
  return result;
}

uint64_t physx::NpBatchQuery::sweep(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, _WORD *a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t a11)
{
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;

  if (*(_DWORD *)(result + 56) < *(_DWORD *)(result + 160))
  {
    _X20 = a4;
    _X19 = a3;
    _X21 = a2;
    v17 = result;
    v18 = (unsigned int *)(result + 60);
    while (1)
    {
      v19 = __ldaxr(v18);
      if (v19)
        break;
      if (!__stlxr(0xFFFFFFFF, v18))
        goto LABEL_7;
    }
    __clrex();
LABEL_7:
    if (v19 != 1)
    {
      ++*(_DWORD *)(result + 56);
      WORD2(v34) = *a6;
      v35 = *(_OWORD *)a7;
      LOWORD(v36) = *(_WORD *)(a7 + 16);
      v37 = a8;
      v38 = a11;
      v39 = a5;
      v40 = 2;
      LODWORD(v34) = -16;
      physx::NpBatchQuery::writeBatchHeader(result, (uint64_t)&v34);
      v23 = (unsigned __int16)*a6;
      *(_BYTE *)(v17 + 172) |= (v23 & 0x200) != 0;
      if ((~v23 & 0x300) == 0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 551, " Precise sweep doesn't support MTD. Perform MTD with default sweep", v20, v21, v22, v33);
        v23 = *a6 & 0xFEFF;
        *a6 &= ~0x100u;
      }
      if ((~v23 & 0x210) == 0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 557, " eMTD cannot be used in conjunction with eASSUME_NO_INITIAL_OVERLAP. eASSUME_NO_INITIAL_OVERLAP will be ignored", v20, v21, v22, v33);
        LOWORD(v23) = *a6 & 0xFFEF;
        *a6 = v23;
      }
      if (a10 > 0.0 && (v23 & 0x100) != 0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 565, " Precise sweep doesn't support inflation, inflation will be overwritten to be zero", v20, v21, v22, v33);
        a10 = 0.0;
      }
      __asm
      {
        PRFM            #0, [X21]
        PRFM            #0, [X19]
        PRFM            #0, [X20]
      }
      *((float *)&v35 + 2) = a9;
      v34 = 0;
      *(_QWORD *)&v35 = _X20;
      v36 = _X21;
      v37 = _X19;
      *(float *)&v38 = a10;
      result = writeQueryInput(v17 + 24, (__int128 *)&v34);
      while (1)
      {
        v31 = *v18;
        while (1)
        {
          v32 = __ldaxr(v18);
          if (v32 != v31)
            break;
          if (!__stlxr(0, v18))
            return result;
        }
        __clrex();
      }
    }
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 541, "PxBatchQuery::sweep: This batch is still executing, skipping query.", (uint64_t)a6, a7, a8, a11);
  }
  return result;
}

uint64_t physx::NpBatchQuery::release(physx::NpBatchQuery *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int *v9;

  v9 = (unsigned int *)((char *)this + 60);
  while (!__ldaxr(v9))
  {
    if (!__stlxr(0, v9))
      return physx::NpScene::releaseBatchQuery(*((_QWORD *)this + 2), (uint64_t)this);
  }
  __clrex();
  return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 577, "PxBatchQuery::release: This batch is still executing, skipping release", a6, a7, a8, a9);
}

uint64_t physx::NpBatchQuery::getPreFilterShader(physx::NpBatchQuery *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t physx::NpBatchQuery::getPostFilterShader(physx::NpBatchQuery *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t physx::NpBatchQuery::getFilterShaderData(physx::NpBatchQuery *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t physx::NpBatchQuery::getFilterShaderDataSize(physx::NpBatchQuery *this)
{
  return *((unsigned int *)this + 18);
}

int32x2_t *physx::NpConstraint::setConstraintFunctions(int32x2_t *result, uint64_t a2, int8x16_t *a3)
{
  uint64_t v3;
  int8x16_t v4;
  int32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int16 *v11;
  int32x2_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL4 v20;
  BOOL v21;
  int v22;
  int32x2_t *v23;
  int32x2_t *v24;
  uint64_t v25;
  int8x8_t v26;
  _QWORD *v27;
  int8x8_t v28;
  uint64_t v29;
  char v30;

  v3 = (uint64_t)result;
  result[11] = (int32x2_t)a2;
  v4 = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)result[12].i8 = v4;
  result[14] = *(int32x2_t *)a3[1].i8;
  v5 = result[2];
  if (v5)
  {
    result = (int32x2_t *)(*(_QWORD *)&v5
                         + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(*(_QWORD *)&v5 + 8)));
    v6 = result[1];
    if (!*(_QWORD *)&v6)
      goto LABEL_13;
    v7 = *(unsigned int *)(*(_QWORD *)&v6 + 80);
    if (!(_DWORD)v7)
      goto LABEL_13;
    v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v6 + 72) + 8);
    v9 = 0xFFFFFFFFLL;
    while (*((_BYTE *)v8 - 8) || *v8 != v3)
    {
      --v9;
      v8 += 2;
      if (!--v7)
        goto LABEL_13;
    }
    if (v9)
    {
      v5.i32[0] = 0;
    }
    else
    {
LABEL_13:
      result = (int32x2_t *)physx::NpActor::addConnector((uint64_t)result, 0, v3);
      v5.i32[0] = 1;
    }
  }
  v11 = *(unsigned __int16 **)(v3 + 24);
  if (!v11)
    goto LABEL_25;
  result = (int32x2_t *)((char *)v11 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v11[4]));
  v12 = result[1];
  if (!*(_QWORD *)&v12)
    goto LABEL_27;
  v13 = *(unsigned int *)(*(_QWORD *)&v12 + 80);
  if (!(_DWORD)v13)
    goto LABEL_27;
  v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v12 + 72) + 8);
  v15 = 0xFFFFFFFFLL;
  while (*((_BYTE *)v14 - 8) || *v14 != v3)
  {
    --v15;
    v14 += 2;
    if (!--v13)
      goto LABEL_27;
  }
  if (v15)
  {
LABEL_25:
    if (!v5.i32[0])
      return result;
  }
  else
  {
LABEL_27:
    physx::NpActor::addConnector((uint64_t)result, 0, v3);
    v11 = *(unsigned __int16 **)(v3 + 24);
  }
  v17 = *(_QWORD *)(v3 + 16);
  if (!v17
    || ((*(void (**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)v17 + 104))(&v29, *(_QWORD *)(v3 + 16)),
        (v29 & 8) != 0))
  {
    v18 = 0;
    if (!v11)
      goto LABEL_35;
  }
  else
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
    if (!v11)
      goto LABEL_35;
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *))(*(_QWORD *)v11 + 104))(&v29, v11);
  if ((v29 & 8) == 0)
  {
    result = (int32x2_t *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v11 + 56))(v11);
    goto LABEL_36;
  }
LABEL_35:
  result = 0;
LABEL_36:
  v19 = (_QWORD *)(v3 + 32);
  v20 = v17 == 0;
  if (v11)
    v21 = result == 0;
  else
    v21 = 0;
  v22 = !v21;
  if (v18)
  {
    v20 = 1;
    v23 = (int32x2_t *)v18;
  }
  else
  {
    v23 = result;
  }
  if ((v20 & v22) != 0)
    v24 = v23;
  else
    v24 = 0;
  if (((*(_DWORD *)(v3 + 40) >> 30) - 1) <= 1)
  {
    if (*v19)
      v25 = *v19 - 16;
    else
      v25 = 0;
    if ((int32x2_t *)v25 == v24)
      return result;
    if (*v19)
    {
      v29 = v3;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v25 + 9088, &v29);
      result = physx::Scb::Scene::removeConstraint(v25 + 16, (physx::Scb::Base *)(v3 + 32), v26);
    }
  }
  if (v24)
  {
    v29 = v3;
    v30 = 0;
    v27 = (_QWORD *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v24 + 1136, &v29, &v30, *(int8x8_t *)v4.i8);
    if (!v30)
      *v27 = v29;
    return physx::Scb::Scene::add<physx::Scb::Constraint>(v24 + 2, (physx::Scb::Base *)(v3 + 32), v24 + 996, v28);
  }
  return result;
}

void physx::NpConstraint::~NpConstraint(physx::NpConstraint *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_24ED947F8;
  if ((*((_WORD *)this + 5) & 1) != 0)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11));
  v2 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 8));
  if (*(_DWORD *)(v2 + 1004))
  {
    v3 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = (_DWORD *)(*(_QWORD *)(v2 + 976)
                  + 4 * ((*(_DWORD *)(v2 + 988) - 1) & ((v5 >> 31) ^ v5)));
    v7 = *v6;
    if ((_DWORD)v7 != -1)
    {
      v8 = *(_QWORD *)(v2 + 960);
      v9 = *(_QWORD *)(v2 + 968);
      if (*(physx::NpConstraint **)(v8 + 8 * v7) == this)
      {
LABEL_12:
        *v6 = *(_DWORD *)(v9 + 4 * v7);
        *(int32x2_t *)(v2 + 1000) = vadd_s32(*(int32x2_t *)(v2 + 1000), (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(v9 + 4 * v7) = *(_DWORD *)(v2 + 996);
        *(_DWORD *)(v2 + 996) = v7;
      }
      else
      {
        while (1)
        {
          v10 = v7;
          v7 = *(unsigned int *)(v9 + 4 * v7);
          if ((_DWORD)v7 == -1)
            break;
          if (*(physx::NpConstraint **)(v8 + 8 * v7) == this)
          {
            v6 = (_DWORD *)(v9 + 4 * v10);
            goto LABEL_12;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 8));
}

{
  uint64_t v2;

  physx::NpConstraint::~NpConstraint(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpConstraint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpConstraint::release(physx::NpConstraint *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  int8x8_t v6;
  physx::NpConstraint *v8;

  if (((*((_DWORD *)this + 10) >> 30) - 1) > 1)
  {
    v3 = 0;
  }
  else
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, 0, 1);
  v4 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (v4)
    physx::NpActor::removeConnector((uint64_t)v4 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[4]), (physx::PxActor *)v4, 0, (uint64_t)this);
  v5 = (unsigned __int16 *)*((_QWORD *)this + 3);
  if (v5)
    physx::NpActor::removeConnector((uint64_t)v5 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v5[4]), (physx::PxActor *)v5, 0, (uint64_t)this);
  if (v3)
  {
    v8 = this;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v3 + 9088, (uint64_t *)&v8);
    physx::Scb::Scene::removeConstraint(v3 + 16, (physx::NpConstraint *)((char *)this + 32), v6);
  }
  return physx::Scb::Base::destroy((uint64_t)this + 32);
}

uint64_t physx::NpConstraint::getScene(physx::NpConstraint *this)
{
  uint64_t v1;

  if (((*((_DWORD *)this + 10) >> 30) - 1) > 1)
    return 0;
  v1 = *((_QWORD *)this + 4);
  if (v1)
    return v1 - 16;
  else
    return 0;
}

uint64_t physx::NpConstraint::getActors(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  *a2 = *(_QWORD *)(result + 16);
  *a3 = *(_QWORD *)(result + 24);
  return result;
}

physx::Sc::ConstraintSim *physx::NpConstraint::setActors(physx::NpConstraint *this, physx::PxRigidActor *a2, physx::PxRigidActor *a3, int8x8_t a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  int v13;
  int32x2_t *v14;
  int32x2_t *v15;
  uint64_t v16;
  int32x2_t *v17;
  int8x8_t v18;
  physx::Scb::RigidObject *v19;
  physx::Scb::RigidObject *v20;
  physx::Scb::RigidObject *v21;
  physx::Scb::RigidObject *v22;
  physx::Sc::ConstraintSim *result;
  int8x8_t v24;
  _QWORD *v25;
  int8x8_t v26;
  physx::NpConstraint *v27;
  char v28;

  v7 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (v7)
    physx::NpActor::removeConnector((uint64_t)v7 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v7[4]), (physx::PxActor *)v7, 0, (uint64_t)this);
  v8 = (unsigned __int16 *)*((_QWORD *)this + 3);
  if (v8)
    physx::NpActor::removeConnector((uint64_t)v8 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v8[4]), (physx::PxActor *)v8, 0, (uint64_t)this);
  if (a2)
    physx::NpActor::addConnector((uint64_t)a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a2 + 4)), 0, (uint64_t)this);
  if (a3)
    physx::NpActor::addConnector((uint64_t)a3 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4)), 0, (uint64_t)this);
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  if (!a2
    || ((*(void (**)(physx::NpConstraint **__return_ptr, physx::PxRigidActor *))(*(_QWORD *)a2 + 104))(&v27, a2), (v27 & 8) != 0))
  {
    v9 = 0;
    if (!a3)
      goto LABEL_16;
  }
  else
  {
    v9 = (*(uint64_t (**)(physx::PxRigidActor *))(*(_QWORD *)a2 + 56))(a2);
    if (!a3)
      goto LABEL_16;
  }
  (*(void (**)(physx::NpConstraint **__return_ptr, physx::PxRigidActor *))(*(_QWORD *)a3 + 104))(&v27, a3);
  if ((v27 & 8) == 0)
  {
    v10 = (*(uint64_t (**)(physx::PxRigidActor *))(*(_QWORD *)a3 + 56))(a3);
    goto LABEL_17;
  }
LABEL_16:
  v10 = 0;
LABEL_17:
  v11 = a2 == 0;
  if (a3)
    v12 = v10 == 0;
  else
    v12 = 0;
  v13 = !v12;
  if (v9)
  {
    v11 = 1;
    v14 = (int32x2_t *)v9;
  }
  else
  {
    v14 = (int32x2_t *)v10;
  }
  if ((v11 & v13) != 0)
    v15 = v14;
  else
    v15 = 0;
  if (((*((_DWORD *)this + 10) >> 30) - 1) > 1)
  {
    if (v15)
      goto LABEL_37;
LABEL_40:
    if (a2)
    {
      v21 = (physx::PxRigidActor *)((char *)a2 + 96);
      if (a3)
      {
LABEL_42:
        v22 = (physx::PxRigidActor *)((char *)a3 + 96);
        return physx::Scb::Constraint::setBodies((physx::NpConstraint *)((char *)this + 32), v21, v22, a4);
      }
    }
    else
    {
      v21 = 0;
      if (a3)
        goto LABEL_42;
    }
    v22 = 0;
    return physx::Scb::Constraint::setBodies((physx::NpConstraint *)((char *)this + 32), v21, v22, a4);
  }
  v16 = *((_QWORD *)this + 4);
  if (v16)
    v17 = (int32x2_t *)(v16 - 16);
  else
    v17 = 0;
  if (v17 == v15)
    goto LABEL_40;
  if (v16)
  {
    v27 = this;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v17[1136], (uint64_t *)&v27);
    physx::Scb::Scene::removeConstraint((uint64_t)&v17[2], (physx::NpConstraint *)((char *)this + 32), v18);
  }
LABEL_37:
  if (a2)
  {
    v19 = (physx::PxRigidActor *)((char *)a2 + 96);
    if (a3)
    {
LABEL_39:
      v20 = (physx::PxRigidActor *)((char *)a3 + 96);
      goto LABEL_45;
    }
  }
  else
  {
    v19 = 0;
    if (a3)
      goto LABEL_39;
  }
  v20 = 0;
LABEL_45:
  result = physx::Scb::Constraint::setBodies((physx::NpConstraint *)((char *)this + 32), v19, v20, a4);
  if (v15)
  {
    v27 = this;
    v28 = 0;
    v25 = (_QWORD *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v15 + 1136, &v27, &v28, v24);
    if (!v28)
      *v25 = v27;
    return (physx::Sc::ConstraintSim *)physx::Scb::Scene::add<physx::Scb::Constraint>(v15 + 2, (physx::NpConstraint *)((char *)this + 32), v15 + 996, v26);
  }
  return result;
}

physx::Sc::ConstraintSim *physx::Scb::Constraint::setBodies(physx::Scb::Constraint *this, physx::Scb::RigidObject *a2, physx::Scb::RigidObject *a3, int8x8_t a4)
{
  char *v5;
  char *v6;
  unsigned int v7;
  _QWORD *v8;
  physx::Sc::ConstraintSim *result;
  int8x8_t v10;

  if (!a2)
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)a2 + 11) & 0xF) + 3);
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v6 = (char *)a3 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)a3 + 11) & 0xF) + 3);
LABEL_6:
  v7 = *((_DWORD *)this + 2);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(_BYTE *)(*(_QWORD *)this + 7689))
  {
    v8 = (_QWORD *)*((_QWORD *)this + 2);
    if (!v8)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)this, HIBYTE(v7) & 0xF).n128_u64[0];
      *((_QWORD *)this + 2) = v8;
    }
    *v8 = v5;
    v8[1] = v6;
    result = (physx::Sc::ConstraintSim *)physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)this, this, a4);
    *((_DWORD *)this + 2) |= 1u;
  }
  else
  {
    result = (physx::Sc::ConstraintSim *)*((_QWORD *)this + 13);
    if (result)
    {
      physx::Sc::ConstraintSim::preBodiesChange(result, a4);
      result = (physx::Sc::ConstraintSim *)*((_QWORD *)this + 13);
      if (result)
        result = physx::Sc::ConstraintSim::postBodiesChange(result, (uint64_t)v5, (uint64_t)v6, v10);
    }
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  return result;
}

uint64_t physx::NpConstraint::markDirty(uint64_t this)
{
  *(_BYTE *)(this + 176) = 1;
  return this;
}

_QWORD *physx::NpConstraint::setFlags(uint64_t a1, __int16 *a2, int8x8_t a3)
{
  physx::Scb::Base *v4;
  __int16 v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  __int16 v11;

  v4 = (physx::Scb::Base *)(a1 + 32);
  v5 = *a2;
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >> 30 == 2)
  {
    v7 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    v11 = *a2;
    return physx::Sc::ConstraintCore::setFlags((_QWORD *)(a1 + 56), &v11, a3);
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  v7 = *(_QWORD **)v4;
LABEL_5:
  v8 = *(_QWORD *)(a1 + 48);
  if (!v8)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v6) & 0xF).n128_u64[0];
    v8 = v9;
    *(_QWORD *)(a1 + 48) = v9;
    v7 = *(_QWORD **)(a1 + 32);
  }
  *(_WORD *)(v8 + 24) = v5;
  result = physx::Scb::Scene::scheduleForUpdate(v7, v4, a3);
  *(_DWORD *)(a1 + 40) |= 4u;
  return result;
}

uint64_t physx::NpConstraint::getFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  __int16 v2;
  __int16 v3;

  if ((*(_BYTE *)(this + 40) & 4) != 0)
  {
    v3 = *(_WORD *)(this + 168) | 0xFBFE;
    v2 = *(_WORD *)(*(_QWORD *)(this + 48) + 24);
  }
  else
  {
    v2 = *(_WORD *)(this + 56);
    v3 = *(_WORD *)(this + 168) | 0xFBFE;
  }
  *a2 = v3 & v2;
  return this;
}

_QWORD *physx::NpConstraint::setFlag(uint64_t a1, __int16 a2, int a3, int8x8_t a4)
{
  unsigned int v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  __int16 v17;

  v5 = *(_DWORD *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    v7 = *(_WORD *)(a1 + 168) | 0xFBFE;
    v6 = *(_WORD *)(*(_QWORD *)(a1 + 48) + 24);
  }
  else
  {
    v6 = *(_WORD *)(a1 + 56);
    v7 = *(_WORD *)(a1 + 168) | 0xFBFE;
  }
  v8 = v7 & v6;
  v9 = a1 + 32;
  v10 = v8 | a2;
  v11 = v8 & ~a2;
  if (a3)
    v12 = v10;
  else
    v12 = v11;
  if (v5 >> 30 == 2)
  {
    v13 = *(_QWORD **)v9;
    if (*(_BYTE *)(*(_QWORD *)v9 + 7689))
      goto LABEL_11;
LABEL_14:
    v17 = v12;
    return physx::Sc::ConstraintCore::setFlags((_QWORD *)(a1 + 56), &v17, a4);
  }
  if (v5 >> 30 != 3)
    goto LABEL_14;
  v13 = *(_QWORD **)v9;
LABEL_11:
  v14 = *(_QWORD *)(a1 + 48);
  if (!v14)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v13, HIBYTE(v5) & 0xF).n128_u64[0];
    v14 = v15;
    *(_QWORD *)(a1 + 48) = v15;
    v13 = *(_QWORD **)(a1 + 32);
  }
  *(_WORD *)(v14 + 24) = v12;
  result = physx::Scb::Scene::scheduleForUpdate(v13, (physx::Scb::Base *)(a1 + 32), a4);
  *(_DWORD *)(a1 + 40) |= 4u;
  return result;
}

float physx::NpConstraint::getForce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 152);
  *(_QWORD *)a3 = *(_QWORD *)(a1 + 156);
  result = *(float *)(a1 + 164);
  *(float *)(a3 + 8) = result;
  return result;
}

uint64_t physx::NpConstraint::updateConstants(uint64_t this)
{
  uint64_t v1;
  physx::Sc::ConstraintCore *v2;
  void *v3;

  if (*(_BYTE *)(this + 176))
  {
    v1 = this;
    v2 = (physx::Sc::ConstraintCore *)(this + 56);
    v3 = (void *)(***(uint64_t (****)(_QWORD))(this + 88))(*(_QWORD *)(this + 88));
    this = physx::Sc::ConstraintCore::updateConstants(v2, v3);
    if ((_DWORD)this)
      *(_BYTE *)(v1 + 176) = 0;
  }
  return this;
}

_QWORD *physx::NpConstraint::setBreakForce(physx::NpConstraint *this, int8x8_t a2, float a3)
{
  __int32 v4;
  physx::Scb::Base *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v4 = a2.i32[0];
  v6 = (physx::NpConstraint *)((char *)this + 32);
  v7 = *((_DWORD *)this + 10);
  if (v7 >> 30 == 2)
  {
    v8 = *(_QWORD **)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 7689))
      goto LABEL_5;
  }
  else if (v7 >> 30 == 3)
  {
    v8 = *(_QWORD **)v6;
LABEL_5:
    v9 = *((_QWORD *)this + 6);
    if (!v9)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v8, HIBYTE(v7) & 0xF).n128_u64[0];
      v9 = v10;
      *((_QWORD *)this + 6) = v10;
      v8 = (_QWORD *)*((_QWORD *)this + 4);
    }
    *(_DWORD *)(v9 + 16) = v4;
    *(float *)(v9 + 20) = a3;
    result = physx::Scb::Scene::scheduleForUpdate(v8, v6, a2);
    *((_DWORD *)this + 10) |= 2u;
    return result;
  }
  *((_DWORD *)this + 31) = a2.i32[0];
  *((float *)this + 32) = a3;
  result = (_QWORD *)*((_QWORD *)this + 17);
  if (result)
    return (_QWORD *)physx::Sc::ConstraintSim::setBreakForceLL((uint64_t)result, *(double *)&a2, a3);
  return result;
}

float physx::NpConstraint::getBreakForce(physx::NpConstraint *this, float *a2, float *a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float result;

  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
    v5 = *((_QWORD *)this + 6);
    v3 = (float *)(v5 + 16);
    v4 = (float *)(v5 + 20);
  }
  else
  {
    v3 = (float *)((char *)this + 124);
    v4 = (float *)((char *)this + 128);
  }
  *a2 = *v3;
  result = *v4;
  *a3 = *v4;
  return result;
}

_QWORD *physx::NpConstraint::setMinResponseThreshold(_QWORD *this, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 4);
  v5 = *((_DWORD *)this + 10);
  if (v5 >> 30 == 2)
  {
    this = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(_QWORD **)v4;
LABEL_5:
    v6 = v3[6];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v3[6] = v7;
      this = (_QWORD *)v3[4];
    }
    *(_DWORD *)(v6 + 28) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 10) |= 8u;
    return this;
  }
  *((_DWORD *)v3 + 33) = a2.i32[0];
  v8 = v3[17];
  if (v8)
    *(_DWORD *)(v8 + 76) = a2.i32[0];
  return this;
}

float physx::NpConstraint::getMinResponseThreshold(physx::NpConstraint *this)
{
  char *v1;

  if ((*((_BYTE *)this + 40) & 8) != 0)
    v1 = (char *)(*((_QWORD *)this + 6) + 28);
  else
    v1 = (char *)this + 132;
  return *(float *)v1;
}

uint64_t physx::NpConstraint::isValid(physx::NpConstraint *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    LODWORD(v1) = *(unsigned __int16 *)(v1 + 8) != 6;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    LODWORD(v2) = *(unsigned __int16 *)(v2 + 8) != 6;
  return v1 | v2;
}

uint64_t physx::NpConstraint::getExternalReference(physx::NpConstraint *this, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), a2);
}

uint64_t physx::NpConstraintGetRigidObjectsFromScb(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)(a1 - 32) + 56))(a1 - 32, &v9, &v8);
  v6 = v9;
  if (v9)
    v6 = v9 + 96;
  *a2 = v6;
  v7 = v8;
  if (v8)
    v7 = v8 + 96;
  *a3 = v7;
  return result;
}

uint64_t physx::NpConstraint::getSceneFromActors(physx::NpConstraint *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v1 = *((_QWORD *)this + 3);
  if (!v2
    || ((*(void (**)(char *__return_ptr, _QWORD))(*(_QWORD *)v2 + 104))((char *)&v10 + 1, *((_QWORD *)this + 2)), (v10 & 0x800) != 0))
  {
    v3 = 0;
    if (!v1)
      goto LABEL_8;
  }
  else
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    if (!v1)
      goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 104))(&v10, v1);
  if ((v10 & 8) == 0)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
    goto LABEL_9;
  }
LABEL_8:
  v4 = 0;
LABEL_9:
  v5 = v2 == 0;
  if (v1)
    v6 = v4 == 0;
  else
    v6 = 0;
  v7 = !v6;
  if (v3)
  {
    v5 = 1;
    v8 = v3;
  }
  else
  {
    v8 = v4;
  }
  if ((v5 & v7) != 0)
    return v8;
  else
    return 0;
}

physx::NpFactory *physx::NpFactory::NpFactory(physx::NpFactory *this)
{
  char *v2;
  physx::GuMeshFactory *v3;
  uint64_t v4;
  const char *v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  pthread_mutex_t *v12;
  uint64_t v13;
  const char *v14;
  pthread_mutex_t *v15;
  uint64_t v16;
  const char *v17;
  pthread_mutex_t *v18;
  uint64_t v19;
  const char *v20;
  pthread_mutex_t *v21;
  uint64_t v22;
  const char *v23;
  pthread_mutex_t *v24;
  uint64_t v25;
  const char *v26;
  pthread_mutex_t *v27;
  uint64_t v28;
  const char *v29;
  pthread_mutex_t *v30;
  uint64_t v31;
  const char *v32;
  pthread_mutex_t *v33;
  uint64_t v34;
  const char *v35;
  pthread_mutex_t *v36;
  uint64_t v37;
  const char *v38;
  pthread_mutex_t *v39;
  uint64_t v40;
  const char *v41;
  pthread_mutex_t *v42;
  uint64_t v43;
  const char *v44;
  pthread_mutex_t *v45;

  v2 = (char *)this + 4520;
  v3 = physx::GuMeshFactory::GuMeshFactory(this);
  *(_QWORD *)v3 = off_24ED948C0;
  *((_QWORD *)v3 + 99) = 0x4000000000;
  *((_BYTE *)v3 + 776) = 1;
  *((_QWORD *)v3 + 98) = (char *)v3 + 264;
  *((_QWORD *)v3 + 100) = 32;
  *((_DWORD *)v3 + 202) = 2816;
  *((_QWORD *)v3 + 102) = 0;
  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v5 = "<allocation names disabled>";
  v6 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 72, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 103) = v6;
  physx::shdfnd::MutexImpl::MutexImpl(v6);
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager>::getName() [T = physx::N"
         "pPtrTableStorageManager]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, 1720, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 51);
  *(_QWORD *)v9 = &off_24ED94C70;
  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v11 = "<allocation names disabled>";
  v12 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 72, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(v9 + 8) = v12;
  physx::shdfnd::MutexImpl::MutexImpl(v12);
  *(_QWORD *)(v9 + 552) = 0x4000000000;
  *(_BYTE *)(v9 + 536) = 1;
  *(_QWORD *)(v9 + 544) = v9 + 24;
  *(_QWORD *)(v9 + 560) = 128;
  *(_DWORD *)(v9 + 568) = 4096;
  *(_QWORD *)(v9 + 576) = 0;
  *(_QWORD *)(v9 + 1120) = 0x4000000000;
  *(_BYTE *)(v9 + 1104) = 1;
  *(_QWORD *)(v9 + 1112) = v9 + 592;
  *(_QWORD *)(v9 + 1128) = 32;
  *(_DWORD *)(v9 + 1136) = 4096;
  *(_QWORD *)(v9 + 1144) = 0;
  *(_QWORD *)(v9 + 1688) = 0x4000000000;
  *(_BYTE *)(v9 + 1672) = 1;
  *(_QWORD *)(v9 + 1680) = v9 + 1160;
  *(_QWORD *)(v9 + 1696) = 8;
  *(_DWORD *)(v9 + 1704) = 4096;
  *(_QWORD *)(v9 + 1712) = 0;
  *((_QWORD *)this + 104) = v9;
  *((_QWORD *)this + 109) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_DWORD *)this + 220) = 1061158912;
  *((_DWORD *)this + 221) = -1;
  *((_QWORD *)this + 111) = 0;
  physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)this + 840, 0x40u, 0);
  *((_QWORD *)this + 116) = 0;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_QWORD *)this + 117) = -3233808384;
  *((_QWORD *)this + 118) = 0;
  physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)this + 896, 0x40u, 0);
  *((_QWORD *)this + 123) = 0;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_QWORD *)this + 124) = -3233808384;
  *((_QWORD *)this + 125) = 0;
  physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)this + 952, 0x40u, 0);
  *((_QWORD *)this + 130) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_QWORD *)this + 131) = -3233808384;
  *((_QWORD *)this + 132) = 0;
  physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)this + 1008, 0x40u, 0);
  *((_QWORD *)this + 137) = 0;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *((_QWORD *)this + 138) = -3233808384;
  *((_QWORD *)this + 139) = 0;
  physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 1064, 0x40u, 0);
  *((_QWORD *)this + 207) = 0x4000000000;
  *((_BYTE *)this + 1640) = 1;
  *((_QWORD *)this + 206) = (char *)this + 1128;
  *((_QWORD *)this + 208) = 10;
  *((_DWORD *)this + 418) = 4096;
  *((_QWORD *)this + 210) = 0;
  v13 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v14 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v14 = "<allocation names disabled>";
  v15 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v13 + 24) + 16))(v13 + 24, 72, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 211) = v15;
  physx::shdfnd::MutexImpl::MutexImpl(v15);
  *((_QWORD *)this + 279) = 0x4000000000;
  *((_BYTE *)this + 2216) = 1;
  *((_QWORD *)this + 278) = (char *)this + 1704;
  *((_QWORD *)this + 280) = 23;
  *((_DWORD *)this + 562) = 4096;
  *((_QWORD *)this + 282) = 0;
  v16 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v17 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v17 = "<allocation names disabled>";
  v18 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v16 + 24) + 16))(v16 + 24, 72, v17, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 283) = v18;
  physx::shdfnd::MutexImpl::MutexImpl(v18);
  *((_QWORD *)this + 351) = 0x4000000000;
  *((_BYTE *)this + 2792) = 1;
  *((_QWORD *)this + 350) = (char *)this + 2280;
  *((_QWORD *)this + 352) = 15;
  *((_DWORD *)this + 706) = 4096;
  *((_QWORD *)this + 354) = 0;
  v19 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v20 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v20 = "<allocation names disabled>";
  v21 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v19 + 24) + 16))(v19 + 24, 72, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 355) = v21;
  physx::shdfnd::MutexImpl::MutexImpl(v21);
  *((_QWORD *)this + 423) = 0x4000000000;
  *((_BYTE *)this + 3368) = 1;
  *((_QWORD *)this + 422) = (char *)this + 2856;
  *((_QWORD *)this + 424) = 51;
  *((_DWORD *)this + 850) = 4096;
  *((_QWORD *)this + 426) = 0;
  v22 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v23 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v23 = "<allocation names disabled>";
  v24 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v22 + 24) + 16))(v22 + 24, 72, v23, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 427) = v24;
  physx::shdfnd::MutexImpl::MutexImpl(v24);
  *((_QWORD *)this + 495) = 0x4000000000;
  *((_BYTE *)this + 3944) = 1;
  *((_QWORD *)this + 494) = (char *)this + 3432;
  *((_QWORD *)this + 496) = 22;
  *((_DWORD *)this + 994) = 4096;
  *((_QWORD *)this + 498) = 0;
  v25 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v26 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v26 = "<allocation names disabled>";
  v27 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v25 + 24) + 16))(v25 + 24, 72, v26, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 499) = v27;
  physx::shdfnd::MutexImpl::MutexImpl(v27);
  *((_QWORD *)this + 567) = 0x4000000000;
  *v2 = 1;
  *((_QWORD *)this + 566) = (char *)this + 4008;
  *((_QWORD *)this + 568) = 51;
  *((_DWORD *)this + 1138) = 4096;
  *((_QWORD *)this + 570) = 0;
  v28 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v29 = "<allocation names disabled>";
  v30 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v28 + 24) + 16))(v28 + 24, 72, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 571) = v30;
  physx::shdfnd::MutexImpl::MutexImpl(v30);
  *((_QWORD *)this + 639) = 0x4000000000;
  v2[576] = 1;
  *((_QWORD *)this + 638) = (char *)this + 4584;
  *((_QWORD *)this + 640) = 22;
  *((_DWORD *)this + 1282) = 4096;
  *((_QWORD *)this + 642) = 0;
  v31 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v32 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v32 = "<allocation names disabled>";
  v33 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v31 + 24) + 16))(v31 + 24, 72, v32, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 643) = v33;
  physx::shdfnd::MutexImpl::MutexImpl(v33);
  *((_QWORD *)this + 711) = 0x4000000000;
  v2[1152] = 1;
  *((_QWORD *)this + 710) = (char *)this + 5160;
  *((_QWORD *)this + 712) = 20;
  *((_DWORD *)this + 1426) = 4096;
  *((_QWORD *)this + 714) = 0;
  v34 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v35 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v35 = "<allocation names disabled>";
  v36 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v34 + 24) + 16))(v34 + 24, 72, v35, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 715) = v36;
  physx::shdfnd::MutexImpl::MutexImpl(v36);
  *((_QWORD *)this + 783) = 0x4000000000;
  v2[1728] = 1;
  *((_QWORD *)this + 782) = (char *)this + 5736;
  *((_QWORD *)this + 784) = 8;
  *((_DWORD *)this + 1570) = 4096;
  *((_QWORD *)this + 786) = 0;
  v37 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v38 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v38 = "<allocation names disabled>";
  v39 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v37 + 24) + 16))(v37 + 24, 72, v38, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 787) = v39;
  physx::shdfnd::MutexImpl::MutexImpl(v39);
  *((_QWORD *)this + 855) = 0x4000000000;
  v2[2304] = 1;
  *((_QWORD *)this + 854) = (char *)this + 6312;
  *((_QWORD *)this + 856) = 9;
  *((_DWORD *)this + 1714) = 4096;
  *((_QWORD *)this + 858) = 0;
  v40 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v41 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v41 = "<allocation names disabled>";
  v42 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v40 + 24) + 16))(v40 + 24, 72, v41, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 859) = v42;
  physx::shdfnd::MutexImpl::MutexImpl(v42);
  *((_QWORD *)this + 927) = 0x4000000000;
  v2[2880] = 1;
  *((_QWORD *)this + 926) = (char *)this + 6888;
  *((_QWORD *)this + 928) = 9;
  *((_DWORD *)this + 1858) = 4096;
  *((_QWORD *)this + 930) = 0;
  v43 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v44 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v44 = "<allocation names disabled>";
  v45 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v43 + 24) + 16))(v43 + 24, 72, v44, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 931) = v45;
  physx::shdfnd::MutexImpl::MutexImpl(v45);
  return this;
}

void physx::NpFactory::~NpFactory(physx::NpFactory *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  physx::NpFactory *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  physx::NpFactory *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  physx::NpFactory *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  physx::NpFactory *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  char *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  physx::NpFactory *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  physx::NpFactory *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  char *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  char *v106;
  char *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  physx::NpFactory *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  char *v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  physx::NpFactory *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  char *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  physx::NpFactory *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  char *v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  char *v154;
  char *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  physx::NpFactory *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  char *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  physx::NpFactory *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  char *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  char *v186;
  char *v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  physx::NpFactory *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;

  *(_QWORD *)this = off_24ED948C0;
  v2 = *((_QWORD *)this + 104);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 931);
  if (*((_DWORD *)this + 1857))
  {
    v198 = 0;
    v199 = 0;
    v3 = *((_QWORD *)this + 930);
    if (v3)
    {
      do
      {
        v197 = v3;
        v4 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v3;
          LODWORD(v199) = v4 + 1;
        }
        v3 = **((_QWORD **)this + 930);
        *((_QWORD *)this + 930) = v3;
      }
      while (v3);
      v5 = v198;
      v6 = v199;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>(v5, v6);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>(*((char **)this + 926), *((_DWORD *)this + 1854));
    v7 = *((unsigned int *)this + 1854);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)*((_QWORD *)this + 926);
      v9 = &v8[v7];
      v10 = &v5[8 * v6];
      v11 = v5;
      do
      {
        v12 = *((_DWORD *)this + 1856);
        if (v12)
        {
          v13 = *v8;
          v14 = 440 * v12;
          do
          {
            if (v11 != v10 && v13 == *(_QWORD *)v11)
              v11 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
            v13 += 440;
            v14 -= 440;
          }
          while (v14);
        }
        ++v8;
      }
      while (v8 != v9);
    }
    if (v5 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
  }
  v15 = (physx::NpFactory *)*((_QWORD *)this + 926);
  v16 = *((unsigned int *)this + 1854);
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    do
    {
      if (*(_QWORD *)v15)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v15 = (physx::NpFactory *)((char *)v15 + 8);
      v17 -= 8;
    }
    while (v17);
    v15 = (physx::NpFactory *)*((_QWORD *)this + 926);
  }
  v18 = *((_DWORD *)this + 1855);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0)
  {
    if (v15 == (physx::NpFactory *)((char *)this + 6888))
    {
      *((_BYTE *)this + 7400) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v15);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 859);
  if (*((_DWORD *)this + 1713))
  {
    v198 = 0;
    v199 = 0;
    v19 = *((_QWORD *)this + 858);
    if (v19)
    {
      do
      {
        v197 = v19;
        v20 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v19;
          LODWORD(v199) = v20 + 1;
        }
        v19 = **((_QWORD **)this + 858);
        *((_QWORD *)this + 858) = v19;
      }
      while (v19);
      v21 = v198;
      v22 = v199;
    }
    else
    {
      v22 = 0;
      v21 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>(v21, v22);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>(*((char **)this + 854), *((_DWORD *)this + 1710));
    v23 = *((unsigned int *)this + 1710);
    if ((_DWORD)v23)
    {
      v24 = (uint64_t *)*((_QWORD *)this + 854);
      v25 = &v24[v23];
      v26 = &v21[8 * v22];
      v27 = v21;
      do
      {
        v28 = *((_DWORD *)this + 1712);
        if (v28)
        {
          v29 = *v24;
          v30 = 440 * v28;
          do
          {
            if (v27 != v26 && v29 == *(_QWORD *)v27)
              v27 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
            v29 += 440;
            v30 -= 440;
          }
          while (v30);
        }
        ++v24;
      }
      while (v24 != v25);
    }
    if (v21 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v21);
  }
  v31 = (physx::NpFactory *)*((_QWORD *)this + 854);
  v32 = *((unsigned int *)this + 1710);
  if ((_DWORD)v32)
  {
    v33 = 8 * v32;
    do
    {
      if (*(_QWORD *)v31)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v31 = (physx::NpFactory *)((char *)v31 + 8);
      v33 -= 8;
    }
    while (v33);
    v31 = (physx::NpFactory *)*((_QWORD *)this + 854);
  }
  v34 = *((_DWORD *)this + 1711);
  if ((v34 & 0x80000000) == 0 && (v34 & 0x7FFFFFFF) != 0)
  {
    if (v31 == (physx::NpFactory *)((char *)this + 6312))
    {
      *((_BYTE *)this + 6824) = 0;
    }
    else if (v31)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v31);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 787);
  if (*((_DWORD *)this + 1569))
  {
    v198 = 0;
    v199 = 0;
    v35 = *((_QWORD *)this + 786);
    if (v35)
    {
      do
      {
        v197 = v35;
        v36 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v35;
          LODWORD(v199) = v36 + 1;
        }
        v35 = **((_QWORD **)this + 786);
        *((_QWORD *)this + 786) = v35;
      }
      while (v35);
      v37 = v198;
      v38 = v199;
    }
    else
    {
      v38 = 0;
      v37 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>(v37, v38);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>(*((char **)this + 782), *((_DWORD *)this + 1566));
    v39 = *((unsigned int *)this + 1566);
    if ((_DWORD)v39)
    {
      v40 = (uint64_t *)*((_QWORD *)this + 782);
      v41 = &v40[v39];
      v42 = &v37[8 * v38];
      v43 = v37;
      do
      {
        v44 = *((unsigned int *)this + 1568);
        if ((_DWORD)v44)
        {
          v45 = *v40;
          v46 = 480 * v44;
          do
          {
            if (v43 != v42 && v45 == *(_QWORD *)v43)
              v43 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
            v45 += 480;
            v46 -= 480;
          }
          while (v46);
        }
        ++v40;
      }
      while (v40 != v41);
    }
    if (v37 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v37);
  }
  v47 = (physx::NpFactory *)*((_QWORD *)this + 782);
  v48 = *((unsigned int *)this + 1566);
  if ((_DWORD)v48)
  {
    v49 = 8 * v48;
    do
    {
      if (*(_QWORD *)v47)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v47 = (physx::NpFactory *)((char *)v47 + 8);
      v49 -= 8;
    }
    while (v49);
    v47 = (physx::NpFactory *)*((_QWORD *)this + 782);
  }
  v50 = *((_DWORD *)this + 1567);
  if ((v50 & 0x80000000) == 0 && (v50 & 0x7FFFFFFF) != 0)
  {
    if (v47 == (physx::NpFactory *)((char *)this + 5736))
    {
      *((_BYTE *)this + 6248) = 0;
    }
    else if (v47)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v47);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 715);
  if (*((_DWORD *)this + 1425))
  {
    v198 = 0;
    v199 = 0;
    v51 = *((_QWORD *)this + 714);
    if (v51)
    {
      do
      {
        v197 = v51;
        v52 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v51;
          LODWORD(v199) = v52 + 1;
        }
        v51 = **((_QWORD **)this + 714);
        *((_QWORD *)this + 714) = v51;
      }
      while (v51);
      v53 = v198;
      v54 = v199;
    }
    else
    {
      v54 = 0;
      v53 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>(v53, v54);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>(*((char **)this + 710), *((_DWORD *)this + 1422));
    v55 = *((unsigned int *)this + 1422);
    if ((_DWORD)v55)
    {
      v56 = (uint64_t *)*((_QWORD *)this + 710);
      v57 = &v56[v55];
      v58 = &v53[8 * v54];
      v59 = v53;
      do
      {
        v60 = *((_DWORD *)this + 1424);
        if (v60)
        {
          v61 = *v56;
          v62 = 200 * v60;
          do
          {
            if (v59 != v58 && v61 == *(_QWORD *)v59)
              v59 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
            v61 += 200;
            v62 -= 200;
          }
          while (v62);
        }
        ++v56;
      }
      while (v56 != v57);
    }
    if (v53 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v53);
  }
  v63 = (physx::NpFactory *)*((_QWORD *)this + 710);
  v64 = *((unsigned int *)this + 1422);
  if ((_DWORD)v64)
  {
    v65 = 8 * v64;
    do
    {
      if (*(_QWORD *)v63)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v63 = (physx::NpFactory *)((char *)v63 + 8);
      v65 -= 8;
    }
    while (v65);
    v63 = (physx::NpFactory *)*((_QWORD *)this + 710);
  }
  v66 = *((_DWORD *)this + 1423);
  if ((v66 & 0x80000000) == 0 && (v66 & 0x7FFFFFFF) != 0)
  {
    if (v63 == (physx::NpFactory *)((char *)this + 5160))
    {
      *((_BYTE *)this + 5672) = 0;
    }
    else if (v63)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v63);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 643);
  if (*((_DWORD *)this + 1281))
  {
    v198 = 0;
    v199 = 0;
    v67 = *((_QWORD *)this + 642);
    if (v67)
    {
      do
      {
        v197 = v67;
        v68 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v67;
          LODWORD(v199) = v68 + 1;
        }
        v67 = **((_QWORD **)this + 642);
        *((_QWORD *)this + 642) = v67;
      }
      while (v67);
      v69 = v198;
      v70 = v199;
    }
    else
    {
      v70 = 0;
      v69 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>(v69, v70);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>(*((char **)this + 638), *((_DWORD *)this + 1278));
    v71 = *((unsigned int *)this + 1278);
    if ((_DWORD)v71)
    {
      v72 = (uint64_t *)*((_QWORD *)this + 638);
      v73 = &v72[v71];
      v74 = &v69[8 * v70];
      v75 = v69;
      do
      {
        v76 = *((_DWORD *)this + 1280);
        if (v76)
        {
          v77 = *v72;
          v78 = 184 * v76;
          do
          {
            if (v75 != v74 && v77 == *(_QWORD *)v75)
              v75 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
            v77 += 184;
            v78 -= 184;
          }
          while (v78);
        }
        ++v72;
      }
      while (v72 != v73);
    }
    if (v69 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v69);
  }
  v79 = (physx::NpFactory *)*((_QWORD *)this + 638);
  v80 = *((unsigned int *)this + 1278);
  if ((_DWORD)v80)
  {
    v81 = 8 * v80;
    do
    {
      if (*(_QWORD *)v79)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v79 = (physx::NpFactory *)((char *)v79 + 8);
      v81 -= 8;
    }
    while (v81);
    v79 = (physx::NpFactory *)*((_QWORD *)this + 638);
  }
  v82 = *((_DWORD *)this + 1279);
  if ((v82 & 0x80000000) == 0 && (v82 & 0x7FFFFFFF) != 0)
  {
    if (v79 == (physx::NpFactory *)((char *)this + 4584))
    {
      *((_BYTE *)this + 5096) = 0;
    }
    else if (v79)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v79);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 571);
  if (*((_DWORD *)this + 1137))
  {
    v198 = 0;
    v199 = 0;
    v83 = *((_QWORD *)this + 570);
    if (v83)
    {
      do
      {
        v197 = v83;
        v84 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v83;
          LODWORD(v199) = v84 + 1;
        }
        v83 = **((_QWORD **)this + 570);
        *((_QWORD *)this + 570) = v83;
      }
      while (v83);
      v85 = v198;
      v86 = v199;
    }
    else
    {
      v86 = 0;
      v85 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>(v85, v86);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>(*((char **)this + 566), *((_DWORD *)this + 1134));
    v87 = *((unsigned int *)this + 1134);
    if ((_DWORD)v87)
    {
      v88 = (uint64_t *)*((_QWORD *)this + 566);
      v89 = &v88[v87];
      v90 = &v85[8 * v86];
      v91 = v85;
      do
      {
        v92 = *((unsigned int *)this + 1136);
        if ((_DWORD)v92)
        {
          v93 = *v88;
          v94 = 80 * v92;
          do
          {
            if (v91 != v90 && v93 == *(_QWORD *)v91)
              v91 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93);
            v93 += 80;
            v94 -= 80;
          }
          while (v94);
        }
        ++v88;
      }
      while (v88 != v89);
    }
    if (v85 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v85);
  }
  v95 = (physx::NpFactory *)*((_QWORD *)this + 566);
  v96 = *((unsigned int *)this + 1134);
  if ((_DWORD)v96)
  {
    v97 = 8 * v96;
    do
    {
      if (*(_QWORD *)v95)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v95 = (physx::NpFactory *)((char *)v95 + 8);
      v97 -= 8;
    }
    while (v97);
    v95 = (physx::NpFactory *)*((_QWORD *)this + 566);
  }
  v98 = *((_DWORD *)this + 1135);
  if ((v98 & 0x80000000) == 0 && (v98 & 0x7FFFFFFF) != 0)
  {
    if (v95 == (physx::NpFactory *)((char *)this + 4008))
    {
      *((_BYTE *)this + 4520) = 0;
    }
    else if (v95)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v95);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 499);
  if (*((_DWORD *)this + 993))
  {
    v198 = 0;
    v199 = 0;
    v99 = *((_QWORD *)this + 498);
    if (v99)
    {
      do
      {
        v197 = v99;
        v100 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v99;
          LODWORD(v199) = v100 + 1;
        }
        v99 = **((_QWORD **)this + 498);
        *((_QWORD *)this + 498) = v99;
      }
      while (v99);
      v101 = v198;
      v102 = v199;
    }
    else
    {
      v102 = 0;
      v101 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>(v101, v102);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>(*((char **)this + 494), *((_DWORD *)this + 990));
    v103 = *((unsigned int *)this + 990);
    if ((_DWORD)v103)
    {
      v104 = (uint64_t *)*((_QWORD *)this + 494);
      v105 = &v104[v103];
      v106 = &v101[8 * v102];
      v107 = v101;
      do
      {
        v108 = *((_DWORD *)this + 992);
        if (v108)
        {
          v109 = *v104;
          v110 = 184 * v108;
          do
          {
            if (v107 != v106 && v109 == *(_QWORD *)v107)
              v107 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v109 + 24))(v109);
            v109 += 184;
            v110 -= 184;
          }
          while (v110);
        }
        ++v104;
      }
      while (v104 != v105);
    }
    if (v101 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v101);
  }
  v111 = (physx::NpFactory *)*((_QWORD *)this + 494);
  v112 = *((unsigned int *)this + 990);
  if ((_DWORD)v112)
  {
    v113 = 8 * v112;
    do
    {
      if (*(_QWORD *)v111)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v111 = (physx::NpFactory *)((char *)v111 + 8);
      v113 -= 8;
    }
    while (v113);
    v111 = (physx::NpFactory *)*((_QWORD *)this + 494);
  }
  v114 = *((_DWORD *)this + 991);
  if ((v114 & 0x80000000) == 0 && (v114 & 0x7FFFFFFF) != 0)
  {
    if (v111 == (physx::NpFactory *)((char *)this + 3432))
    {
      *((_BYTE *)this + 3944) = 0;
    }
    else if (v111)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v111);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 427);
  if (*((_DWORD *)this + 849))
  {
    v198 = 0;
    v199 = 0;
    v115 = *((_QWORD *)this + 426);
    if (v115)
    {
      do
      {
        v197 = v115;
        v116 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v115;
          LODWORD(v199) = v116 + 1;
        }
        v115 = **((_QWORD **)this + 426);
        *((_QWORD *)this + 426) = v115;
      }
      while (v115);
      v117 = v198;
      v118 = v199;
    }
    else
    {
      v118 = 0;
      v117 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>(v117, v118);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>(*((char **)this + 422), *((_DWORD *)this + 846));
    v119 = *((unsigned int *)this + 846);
    if ((_DWORD)v119)
    {
      v120 = (uint64_t *)*((_QWORD *)this + 422);
      v121 = &v120[v119];
      v122 = &v117[8 * v118];
      v123 = v117;
      do
      {
        v124 = *((unsigned int *)this + 848);
        if ((_DWORD)v124)
        {
          v125 = *v120;
          v126 = 80 * v124;
          do
          {
            if (v123 != v122 && v125 == *(_QWORD *)v123)
              v123 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
            v125 += 80;
            v126 -= 80;
          }
          while (v126);
        }
        ++v120;
      }
      while (v120 != v121);
    }
    if (v117 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v117);
  }
  v127 = (physx::NpFactory *)*((_QWORD *)this + 422);
  v128 = *((unsigned int *)this + 846);
  if ((_DWORD)v128)
  {
    v129 = 8 * v128;
    do
    {
      if (*(_QWORD *)v127)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v127 = (physx::NpFactory *)((char *)v127 + 8);
      v129 -= 8;
    }
    while (v129);
    v127 = (physx::NpFactory *)*((_QWORD *)this + 422);
  }
  v130 = *((_DWORD *)this + 847);
  if ((v130 & 0x80000000) == 0 && (v130 & 0x7FFFFFFF) != 0)
  {
    if (v127 == (physx::NpFactory *)((char *)this + 2856))
    {
      *((_BYTE *)this + 3368) = 0;
    }
    else if (v127)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v127);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 355);
  if (*((_DWORD *)this + 705))
  {
    v198 = 0;
    v199 = 0;
    v131 = *((_QWORD *)this + 354);
    if (v131)
    {
      do
      {
        v197 = v131;
        v132 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpShape>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v131;
          LODWORD(v199) = v132 + 1;
        }
        v131 = **((_QWORD **)this + 354);
        *((_QWORD *)this + 354) = v131;
      }
      while (v131);
      v133 = v198;
      v134 = v199;
    }
    else
    {
      v134 = 0;
      v133 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpShape>>(v133, v134);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpShape>>(*((char **)this + 350), *((_DWORD *)this + 702));
    v135 = *((unsigned int *)this + 702);
    if ((_DWORD)v135)
    {
      v136 = (uint64_t *)*((_QWORD *)this + 350);
      v137 = &v136[v135];
      v138 = &v133[8 * v134];
      v139 = v133;
      do
      {
        v140 = *((unsigned int *)this + 704);
        if ((_DWORD)v140)
        {
          v141 = *v136;
          v142 = 272 * v140;
          do
          {
            if (v139 != v138 && v141 == *(_QWORD *)v139)
              v139 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v141 + 24))(v141);
            v141 += 272;
            v142 -= 272;
          }
          while (v142);
        }
        ++v136;
      }
      while (v136 != v137);
    }
    if (v133 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v133);
  }
  v143 = (physx::NpFactory *)*((_QWORD *)this + 350);
  v144 = *((unsigned int *)this + 702);
  if ((_DWORD)v144)
  {
    v145 = 8 * v144;
    do
    {
      if (*(_QWORD *)v143)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v143 = (physx::NpFactory *)((char *)v143 + 8);
      v145 -= 8;
    }
    while (v145);
    v143 = (physx::NpFactory *)*((_QWORD *)this + 350);
  }
  v146 = *((_DWORD *)this + 703);
  if ((v146 & 0x80000000) == 0 && (v146 & 0x7FFFFFFF) != 0)
  {
    if (v143 == (physx::NpFactory *)((char *)this + 2280))
    {
      *((_BYTE *)this + 2792) = 0;
    }
    else if (v143)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v143);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 283);
  if (*((_DWORD *)this + 561))
  {
    v198 = 0;
    v199 = 0;
    v147 = *((_QWORD *)this + 282);
    if (v147)
    {
      do
      {
        v197 = v147;
        v148 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v147;
          LODWORD(v199) = v148 + 1;
        }
        v147 = **((_QWORD **)this + 282);
        *((_QWORD *)this + 282) = v147;
      }
      while (v147);
      v149 = v198;
      v150 = v199;
    }
    else
    {
      v150 = 0;
      v149 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>(v149, v150);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>(*((char **)this + 278), *((_DWORD *)this + 558));
    v151 = *((unsigned int *)this + 558);
    if ((_DWORD)v151)
    {
      v152 = (uint64_t *)*((_QWORD *)this + 278);
      v153 = &v152[v151];
      v154 = &v149[8 * v150];
      v155 = v149;
      do
      {
        v156 = *((_DWORD *)this + 560);
        if (v156)
        {
          v157 = *v152;
          v158 = 176 * v156;
          do
          {
            if (v155 != v154 && v157 == *(_QWORD *)v155)
              v155 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v157 + 24))(v157);
            v157 += 176;
            v158 -= 176;
          }
          while (v158);
        }
        ++v152;
      }
      while (v152 != v153);
    }
    if (v149 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v149);
  }
  v159 = (physx::NpFactory *)*((_QWORD *)this + 278);
  v160 = *((unsigned int *)this + 558);
  if ((_DWORD)v160)
  {
    v161 = 8 * v160;
    do
    {
      if (*(_QWORD *)v159)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v159 = (physx::NpFactory *)((char *)v159 + 8);
      v161 -= 8;
    }
    while (v161);
    v159 = (physx::NpFactory *)*((_QWORD *)this + 278);
  }
  v162 = *((_DWORD *)this + 559);
  if ((v162 & 0x80000000) == 0 && (v162 & 0x7FFFFFFF) != 0)
  {
    if (v159 == (physx::NpFactory *)((char *)this + 1704))
    {
      *((_BYTE *)this + 2216) = 0;
    }
    else if (v159)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v159);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 211);
  if (*((_DWORD *)this + 417))
  {
    v198 = 0;
    v199 = 0;
    v163 = *((_QWORD *)this + 210);
    if (v163)
    {
      do
      {
        v197 = v163;
        v164 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v163;
          LODWORD(v199) = v164 + 1;
        }
        v163 = **((_QWORD **)this + 210);
        *((_QWORD *)this + 210) = v163;
      }
      while (v163);
      v165 = v198;
      v166 = v199;
    }
    else
    {
      v166 = 0;
      v165 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>(v165, v166);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>(*((char **)this + 206), *((_DWORD *)this + 414));
    v167 = *((unsigned int *)this + 414);
    if ((_DWORD)v167)
    {
      v168 = (uint64_t *)*((_QWORD *)this + 206);
      v169 = &v168[v167];
      v170 = &v165[8 * v166];
      v171 = v165;
      do
      {
        v172 = *((unsigned int *)this + 416);
        if ((_DWORD)v172)
        {
          v173 = *v168;
          v174 = 384 * v172;
          do
          {
            if (v171 != v170 && v173 == *(_QWORD *)v171)
              v171 += 8;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173);
            v173 += 384;
            v174 -= 384;
          }
          while (v174);
        }
        ++v168;
      }
      while (v168 != v169);
    }
    if (v165 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v165);
  }
  v175 = (physx::NpFactory *)*((_QWORD *)this + 206);
  v176 = *((unsigned int *)this + 414);
  if ((_DWORD)v176)
  {
    v177 = 8 * v176;
    do
    {
      if (*(_QWORD *)v175)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v175 = (physx::NpFactory *)((char *)v175 + 8);
      v177 -= 8;
    }
    while (v177);
    v175 = (physx::NpFactory *)*((_QWORD *)this + 206);
  }
  v178 = *((_DWORD *)this + 415);
  if ((v178 & 0x80000000) == 0 && (v178 & 0x7FFFFFFF) != 0)
  {
    if (v175 == (physx::NpFactory *)((char *)this + 1128))
    {
      *((_BYTE *)this + 1640) = 0;
    }
    else if (v175)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v175);
    }
  }
  if (*((_QWORD *)this + 133))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 126))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 119))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 112))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 105))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 103);
  if (*((_DWORD *)this + 201))
  {
    v198 = 0;
    v199 = 0;
    v179 = *((_QWORD *)this + 102);
    if (v179)
    {
      do
      {
        v197 = v179;
        v180 = v199;
        if ((HIDWORD(v199) & 0x7FFFFFFFu) <= v199)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::growAndPushBack((uint64_t)&v198, &v197);
        }
        else
        {
          *(_QWORD *)&v198[8 * v199] = v179;
          LODWORD(v199) = v180 + 1;
        }
        v179 = **((_QWORD **)this + 102);
        *((_QWORD *)this + 102) = v179;
      }
      while (v179);
      v181 = v198;
      v182 = v199;
    }
    else
    {
      v182 = 0;
      v181 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>(v181, v182);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>(*((char **)this + 98), *((_DWORD *)this + 198));
    v183 = *((unsigned int *)this + 198);
    if ((_DWORD)v183)
    {
      v184 = (uint64_t *)*((_QWORD *)this + 98);
      v185 = &v184[v183];
      v186 = &v181[8 * v182];
      v187 = v181;
      do
      {
        v188 = *((_DWORD *)this + 200);
        if (v188)
        {
          v189 = *v184;
          v190 = 88 * v188;
          do
          {
            if (v187 != v186 && v189 == *(_QWORD *)v187)
            {
              v187 += 8;
            }
            else
            {
              v191 = *(_DWORD *)(v189 + 84);
              if ((v191 & 0x80000000) == 0 && (v191 & 0x7FFFFFFF) != 0)
              {
                v192 = *(_QWORD *)(v189 + 72);
                if (v189 == v192)
                {
                  *(_BYTE *)(v189 + 64) = 0;
                }
                else if (v192)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
                }
              }
            }
            v189 += 88;
            v190 -= 88;
          }
          while (v190);
        }
        ++v184;
      }
      while (v184 != v185);
    }
    if (v181 && (v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v181);
  }
  v193 = (physx::NpFactory *)*((_QWORD *)this + 98);
  v194 = *((unsigned int *)this + 198);
  if ((_DWORD)v194)
  {
    v195 = 8 * v194;
    do
    {
      if (*(_QWORD *)v193)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v193 = (physx::NpFactory *)((char *)v193 + 8);
      v195 -= 8;
    }
    while (v195);
    v193 = (physx::NpFactory *)*((_QWORD *)this + 98);
  }
  v196 = *((_DWORD *)this + 199);
  if ((v196 & 0x80000000) == 0 && (v196 & 0x7FFFFFFF) != 0)
  {
    if (v193 == (physx::NpFactory *)((char *)this + 264))
    {
      *((_BYTE *)this + 776) = 0;
    }
    else if (v193)
    {
      (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v193);
    }
  }
  physx::GuMeshFactory::~GuMeshFactory(this);
}

{
  uint64_t v2;

  physx::NpFactory::~NpFactory(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpFactory::addRigidStatic(uint64_t this, physx::PxRigidStatic *a2, int a3, int8x8_t a4)
{
  uint64_t v5;
  int32x2_t *v6;
  physx::PxRigidStatic *v7;
  char v8;
  char v9;

  if (a2)
  {
    v5 = this;
    v6 = (int32x2_t *)(this + 1008);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v7 = a2;
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v7, &v8, a4);
      if (!v8)
        *(_QWORD *)this = a2;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
    }
    else
    {
      v7 = a2;
      v9 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(this + 1008), &v7, &v9, a4);
      if (!v9)
        *(_QWORD *)this = a2;
    }
  }
  return this;
}

uint64_t physx::NpFactory::addShape(uint64_t this, physx::PxShape *a2, int a3, int8x8_t a4)
{
  uint64_t v5;
  int32x2_t *v6;
  physx::PxShape *v7;
  char v8;
  char v9;

  v7 = a2;
  if (a2)
  {
    v5 = this;
    v6 = (int32x2_t *)(this + 1064);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v6, &v7, &v8, a4);
      if (!v8)
        *(_QWORD *)this = a2;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
    }
    else
    {
      v9 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 1064), &v7, &v9, a4);
      if (!v9)
        *(_QWORD *)this = a2;
    }
  }
  return this;
}

uint64_t physx::NpFactory::onActorRelease(uint64_t this, physx::PxActor *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
  if (*(_DWORD *)(v3 + 1060))
  {
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = (_DWORD *)(*(_QWORD *)(v3 + 1032)
                  + 4 * ((*(_DWORD *)(v3 + 1044) - 1) & ((v6 >> 31) ^ v6)));
    v8 = *v7;
    if ((_DWORD)v8 != -1)
    {
      v9 = *(_QWORD *)(v3 + 1016);
      v10 = *(_QWORD *)(v3 + 1024);
      if (*(physx::PxActor **)(v9 + 8 * v8) == a2)
      {
LABEL_10:
        *v7 = *(_DWORD *)(v10 + 4 * v8);
        *(int32x2_t *)(v3 + 1056) = vadd_s32(*(int32x2_t *)(v3 + 1056), (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(v10 + 4 * v8) = *(_DWORD *)(v3 + 1052);
        *(_DWORD *)(v3 + 1052) = v8;
      }
      else
      {
        while (1)
        {
          v11 = v8;
          v8 = *(unsigned int *)(v10 + 4 * v8);
          if ((_DWORD)v8 == -1)
            break;
          if (*(physx::PxActor **)(v9 + 8 * v8) == a2)
          {
            v7 = (_DWORD *)(v10 + 4 * v11);
            goto LABEL_10;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 8));
  return this;
}

uint64_t physx::NpFactory::onShapeRelease(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  result = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 1064, &v4);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return result;
}

uint64_t physx::NpFactory::addArticulation(uint64_t result, uint64_t a2, int a3, int8x8_t a4)
{
  uint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  char v8;
  char v9;

  v7 = a2;
  if (a2)
  {
    v5 = result;
    v6 = (int32x2_t *)(result + 896);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
      v8 = 0;
      result = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v7, &v8, a4);
      if (!v8)
        *(_QWORD *)result = a2;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
    }
    else
    {
      v9 = 0;
      result = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(result + 896), &v7, &v9, a4);
      if (!v9)
        *(_QWORD *)result = a2;
    }
  }
  return result;
}

_QWORD *`anonymous namespace'::createArticulation(_anonymous_namespace_ *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v11;

  v1 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 5144));
  v2 = *(_QWORD **)(v1 + 5136);
  if (!v2)
  {
    v3 = *(unsigned int *)(v1 + 5128);
    if ((_DWORD)v3)
    {
      v4 = physx::shdfnd::Foundation::mInstance;
      v5 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
         ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::getName() [T = physx::NpArticulation]"
         : "<allocation names disabled>";
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v6 = 0;
    }
    v11 = v6;
    v7 = *(unsigned int *)(v1 + 5112);
    if ((*(_DWORD *)(v1 + 5116) & 0x7FFFFFFFu) <= v7)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>>::growAndPushBack(v1 + 4584, &v11);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v1 + 5104) + 8 * v7) = v6;
      *(_DWORD *)(v1 + 5112) = v7 + 1;
    }
    v8 = v6 + 184 * *(unsigned int *)(v1 + 5120) - 184;
    v2 = *(_QWORD **)(v1 + 5136);
    if (v8 >= v6)
    {
      v9 = (_QWORD *)(v6 + 184 * *(unsigned int *)(v1 + 5120) - 184);
      do
      {
        *v9 = v2;
        v9 -= 23;
        v2 = (_QWORD *)v8;
        v8 = (unint64_t)v9;
      }
      while ((unint64_t)v9 >= v6);
      v2 = v9 + 23;
    }
  }
  *(_QWORD *)(v1 + 5136) = *v2;
  ++*(_DWORD *)(v1 + 5124);
  *((_DWORD *)v2 + 2) = 196619;
  v2[2] = 0;
  *v2 = &off_24ED93C38;
  physx::PxArticulationImpl::PxArticulationImpl((physx::PxArticulationImpl *)(v2 + 3), 0);
  *v2 = &off_24ED930C8;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 5144));
  return v2;
}

_QWORD *`anonymous namespace'::createArticulationLink(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  float v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  v6 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 6296));
  v7 = *(_QWORD **)(v6 + 6288);
  if (!v7)
  {
    v8 = *(unsigned int *)(v6 + 6280);
    if ((_DWORD)v8)
    {
      v9 = physx::shdfnd::Foundation::mInstance;
      v10 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::getName() [T = physx::NpArticulationLink]"
          : "<allocation names disabled>";
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, v8, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v11 = 0;
    }
    v37 = v11;
    v12 = *(unsigned int *)(v6 + 6264);
    if ((*(_DWORD *)(v6 + 6268) & 0x7FFFFFFFu) <= v12)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>>::growAndPushBack(v6 + 5736, &v37);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 6256) + 8 * v12) = v11;
      *(_DWORD *)(v6 + 6264) = v12 + 1;
    }
    v13 = (_QWORD *)(v11 + 480 * *(unsigned int *)(v6 + 6272) - 480);
    v7 = *(_QWORD **)(v6 + 6288);
    if ((unint64_t)v13 >= v11)
    {
      do
      {
        *v13 = v7;
        v14 = v13 - 60;
        v7 = v13;
        v13 = v14;
      }
      while ((unint64_t)v14 >= v11);
      v7 = v14 + 60;
    }
  }
  *(_QWORD *)(v6 + 6288) = *v7;
  ++*(_DWORD *)(v6 + 6276);
  physx::NpArticulationLink::NpArticulationLink((uint64_t)v7, (uint64_t)a3, a1, a2);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 6296));
  if (a2)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 224))(&v34, a2);
    v15 = (float)(a3[4] - *(float *)&v35) + (float)(a3[4] - *(float *)&v35);
    v16 = (float)(a3[5] - *((float *)&v35 + 1)) + (float)(a3[5] - *((float *)&v35 + 1));
    v17 = (float)(a3[6] - v36) + (float)(a3[6] - v36);
    v18 = (float)(*((float *)&v34 + 3) * *((float *)&v34 + 3)) + -0.5;
    v19 = (float)((float)-(float)(*((float *)&v34 + 1) * v16) - (float)(*(float *)&v34 * v15))
        - (float)(*((float *)&v34 + 2) * v17);
    v20 = (float)((float)(*((float *)&v34 + 3)
                        * (float)((float)(*((float *)&v34 + 2) * v16) - (float)(*((float *)&v34 + 1) * v17)))
                + (float)(v15 * v18))
        - (float)(*(float *)&v34 * v19);
    v21 = (float)((float)(*((float *)&v34 + 3)
                        * (float)((float)(*(float *)&v34 * v17) - (float)(*((float *)&v34 + 2) * v15)))
                + (float)(v16 * v18))
        - (float)(*((float *)&v34 + 1) * v19);
    v22 = (float)((float)(*((float *)&v34 + 3)
                        * (float)((float)(*((float *)&v34 + 1) * v15) - (float)(*(float *)&v34 * v16)))
                + (float)(v17 * v18))
        - (float)(*((float *)&v34 + 2) * v19);
    v24 = a3[2];
    v23 = a3[3];
    v25 = a3[1];
    v26 = (float)((float)((float)(*((float *)&v34 + 3) * v25) - (float)(*((float *)&v34 + 1) * v23))
                - (float)(*((float *)&v34 + 2) * *a3))
        + (float)(v24 * *(float *)&v34);
    v27 = (float)((float)((float)(*((float *)&v34 + 3) * v24) - (float)(*((float *)&v34 + 2) * v23))
                - (float)(*(float *)&v34 * v25))
        + (float)(*a3 * *((float *)&v34 + 1));
    v28 = (float)((float)((float)(*(float *)&v34 * *a3) + (float)(*((float *)&v34 + 3) * v23))
                + (float)(*((float *)&v34 + 1) * v25))
        + (float)(*((float *)&v34 + 2) * v24);
    *(float *)&v37 = (float)((float)((float)(*((float *)&v34 + 3) * *a3) - (float)(*(float *)&v34 * v23))
                           - (float)(*((float *)&v34 + 1) * v24))
                   + (float)(v25 * *((float *)&v34 + 2));
    *((float *)&v37 + 1) = v26;
    v38 = v27;
    v39 = v28;
    v40 = v20;
    v41 = v21;
    v42 = v22;
    v34 = xmmword_2260E5D70;
    v35 = 0;
    v36 = 0.0;
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, _QWORD *, __int128 *))(*(_QWORD *)a1 + 216))(a1, a2, &v37, v7, &v34);
    if (v29)
    {
      v7[49] = v29;
    }
    else
    {
      (*(void (**)(_QWORD *))(*v7 + 32))(v7);
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 207, "Articulation link initialization failed due to joint creation failure: returned NULL.", v30, v31, v32, v34);
      return 0;
    }
  }
  return v7;
}

_QWORD *`anonymous namespace'::createArticulationRC(_anonymous_namespace_ *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v11;

  v1 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 5720));
  v2 = *(_QWORD **)(v1 + 5712);
  if (!v2)
  {
    v3 = *(unsigned int *)(v1 + 5704);
    if ((_DWORD)v3)
    {
      v4 = physx::shdfnd::Foundation::mInstance;
      v5 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
         ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::getName() [T ="
           " physx::NpArticulationReducedCoordinate]"
         : "<allocation names disabled>";
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v6 = 0;
    }
    v11 = v6;
    v7 = *(unsigned int *)(v1 + 5688);
    if ((*(_DWORD *)(v1 + 5692) & 0x7FFFFFFFu) <= v7)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>>::growAndPushBack(v1 + 5160, &v11);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v1 + 5680) + 8 * v7) = v6;
      *(_DWORD *)(v1 + 5688) = v7 + 1;
    }
    v8 = v6 + 200 * *(unsigned int *)(v1 + 5696) - 200;
    v2 = *(_QWORD **)(v1 + 5712);
    if (v8 >= v6)
    {
      v9 = (_QWORD *)(v6 + 200 * *(unsigned int *)(v1 + 5696) - 200);
      do
      {
        *v9 = v2;
        v9 -= 25;
        v2 = (_QWORD *)v8;
        v8 = (unint64_t)v9;
      }
      while ((unint64_t)v9 >= v6);
      v2 = v9 + 25;
    }
  }
  *(_QWORD *)(v1 + 5712) = *v2;
  ++*(_DWORD *)(v1 + 5700);
  *((_DWORD *)v2 + 2) = 196620;
  v2[2] = 0;
  *v2 = &off_24ED93A40;
  physx::PxArticulationImpl::PxArticulationImpl((physx::PxArticulationImpl *)(v2 + 3), 1);
  *v2 = &off_24ED92ED0;
  v2[23] = 0;
  v2[24] = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 5720));
  return v2;
}

uint64_t physx::NpFactory::onArticulationRelease(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
  if (*(_DWORD *)(v3 + 948))
  {
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = (_DWORD *)(*(_QWORD *)(v3 + 920)
                  + 4 * ((*(_DWORD *)(v3 + 932) - 1) & ((v6 >> 31) ^ v6)));
    v8 = *v7;
    if ((_DWORD)v8 != -1)
    {
      v9 = *(_QWORD *)(v3 + 904);
      v10 = *(_QWORD *)(v3 + 912);
      if (*(_QWORD *)(v9 + 8 * v8) == a2)
      {
LABEL_10:
        *v7 = *(_DWORD *)(v10 + 4 * v8);
        *(int32x2_t *)(v3 + 944) = vadd_s32(*(int32x2_t *)(v3 + 944), (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(v10 + 4 * v8) = *(_DWORD *)(v3 + 940);
        *(_DWORD *)(v3 + 940) = v8;
      }
      else
      {
        while (1)
        {
          v11 = v8;
          v8 = *(unsigned int *)(v10 + 4 * v8);
          if ((_DWORD)v8 == -1)
            break;
          if (*(_QWORD *)(v9 + 8 * v8) == a2)
          {
            v7 = (_DWORD *)(v10 + 4 * v11);
            goto LABEL_10;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 8));
  return result;
}

_QWORD *physx::NpFactory::createArticulationLink(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 324, "Articulations not registered: returned NULL.", a6, a7, a8, vars0);
  return 0;
}

_QWORD *physx::NpFactory::createNpArticulationJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 6872));
  v10 = *(_QWORD **)(a1 + 6864);
  if (!v10)
  {
    physx::shdfnd::PoolBase<physx::NpArticulationJoint,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::allocateSlab(a1 + 6304);
    v10 = *(_QWORD **)(a1 + 6864);
  }
  *(_QWORD *)(a1 + 6864) = *v10;
  ++*(_DWORD *)(a1 + 6852);
  physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::NpArticulationJointTemplate((uint64_t)v10, 14, a2, a3, a4, a5);
  *v10 = &off_24ED93238;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 6872));
  return v10;
}

uint64_t physx::NpFactory::releaseArticulationJointToPool(pthread_mutex_t **this, pthread_mutex_t *a2)
{
  uint64_t result;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[859]);
  result = (*(uint64_t (**)(pthread_mutex_t *))(a2->__sig + 24))(a2);
  --*((_DWORD *)this + 1713);
  a2->__sig = (uint64_t)this[858];
  this[858] = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(this[859]);
  return result;
}

_QWORD *physx::NpFactory::createNpArticulationJointRC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 7448));
  v10 = *(_QWORD **)(a1 + 7440);
  if (!v10)
  {
    physx::shdfnd::PoolBase<physx::NpArticulationJointReducedCoordinate,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::allocateSlab(a1 + 6880);
    v10 = *(_QWORD **)(a1 + 7440);
  }
  *(_QWORD *)(a1 + 7440) = *v10;
  ++*(_DWORD *)(a1 + 7428);
  physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::NpArticulationJointTemplate((uint64_t)v10, 15, a2, a3, a4, a5);
  *v10 = &off_24ED933F0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 7448));
  return v10;
}

uint64_t physx::NpFactory::releaseArticulationJointRCToPool(pthread_mutex_t **this, pthread_mutex_t *a2)
{
  uint64_t result;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[931]);
  result = (*(uint64_t (**)(pthread_mutex_t *))(a2->__sig + 24))(a2);
  --*((_DWORD *)this + 1857);
  a2->__sig = (uint64_t)this[930];
  this[930] = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(this[931]);
  return result;
}

uint64_t physx::NpFactory::addConstraint(uint64_t this, physx::PxConstraint *a2, int a3, int8x8_t a4)
{
  uint64_t v5;
  int32x2_t *v6;
  physx::PxConstraint *v7;
  char v8;
  char v9;

  v7 = a2;
  if (a2)
  {
    v5 = this;
    v6 = (int32x2_t *)(this + 952);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v7, &v8, a4);
      if (!v8)
        *(_QWORD *)this = a2;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
    }
    else
    {
      v9 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(this + 952), &v7, &v9, a4);
      if (!v9)
        *(_QWORD *)this = a2;
    }
  }
  return this;
}

uint64_t physx::NpFactory::addAggregate(uint64_t this, physx::PxAggregate *a2, int a3, int8x8_t a4)
{
  uint64_t v5;
  int32x2_t *v6;
  physx::PxAggregate *v7;
  char v8;
  char v9;

  v7 = a2;
  if (a2)
  {
    v5 = this;
    v6 = (int32x2_t *)(this + 840);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v7, &v8, a4);
      if (!v8)
        *(_QWORD *)this = a2;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
    }
    else
    {
      v9 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(this + 840), &v7, &v9, a4);
      if (!v9)
        *(_QWORD *)this = a2;
    }
  }
  return this;
}

uint64_t physx::NpFactory::onAggregateRelease(uint64_t this, physx::PxAggregate *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
  if (*(_DWORD *)(v3 + 892))
  {
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = (_DWORD *)(*(_QWORD *)(v3 + 864)
                  + 4 * ((*(_DWORD *)(v3 + 876) - 1) & ((v6 >> 31) ^ v6)));
    v8 = *v7;
    if ((_DWORD)v8 != -1)
    {
      v9 = *(_QWORD *)(v3 + 848);
      v10 = *(_QWORD *)(v3 + 856);
      if (*(physx::PxAggregate **)(v9 + 8 * v8) == a2)
      {
LABEL_10:
        *v7 = *(_DWORD *)(v10 + 4 * v8);
        *(int32x2_t *)(v3 + 888) = vadd_s32(*(int32x2_t *)(v3 + 888), (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(v10 + 4 * v8) = *(_DWORD *)(v3 + 884);
        *(_DWORD *)(v3 + 884) = v8;
      }
      else
      {
        while (1)
        {
          v11 = v8;
          v8 = *(unsigned int *)(v10 + 4 * v8);
          if ((_DWORD)v8 == -1)
            break;
          if (*(physx::PxAggregate **)(v9 + 8 * v8) == a2)
          {
            v7 = (_DWORD *)(v10 + 4 * v11);
            goto LABEL_10;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 8));
  return this;
}

pthread_mutex_t *physx::NpFactory::acquireConnectorArray(pthread_mutex_t **this)
{
  pthread_mutex_t *v2;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[103]);
  v2 = this[102];
  if (!v2)
  {
    physx::shdfnd::PoolBase<physx::NpConnectorArray,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::allocateSlab((uint64_t)(this + 32));
    v2 = this[102];
  }
  this[102] = (pthread_mutex_t *)v2->__sig;
  ++*((_DWORD *)this + 201);
  LOBYTE(v2[1].__sig) = 1;
  *(_QWORD *)v2[1].__opaque = v2;
  *(_QWORD *)&v2[1].__opaque[8] = 0x400000000;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[103]);
  return v2;
}

uint64_t physx::NpFactory::releaseConnectorArray(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 824));
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 84);
    if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
    {
      v5 = *(_QWORD *)(a2 + 72);
      if (v5 == a2)
      {
        *(_BYTE *)(a2 + 64) = 0;
      }
      else if (v5)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    --*(_DWORD *)(v3 + 804);
    *(_QWORD *)a2 = *(_QWORD *)(v3 + 816);
    *(_QWORD *)(v3 + 816) = a2;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 824));
  return result;
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::resize(uint64_t result, unsigned int a2, _WORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 28) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 24);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)(v5 + 16);
    v8 = (_WORD *)(v7 + 2 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 2 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 24) = a2;
  return result;
}

uint64_t physx::NpDestroy(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  uint64_t v9;
  pthread_mutex_t *v10;
  uint64_t v11;
  pthread_mutex_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  switch(*(_BYTE *)(result + 11) & 0xF)
  {
    case 1:
    case 2:
      v1 = result - 48;
      v2 = *(_QWORD *)(result - 32);
      if ((*(_WORD *)(result - 38) & 1) == 0)
        goto LABEL_41;
      v3 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 2840));
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      --*(_DWORD *)(v3 + 2820);
      *(_QWORD *)v1 = *(_QWORD *)(v3 + 2832);
      *(_QWORD *)(v3 + 2832) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
        goto LABEL_64;
      v4 = *(pthread_mutex_t **)(v3 + 2840);
      goto LABEL_63;
    case 3:
      v1 = result - 96;
      v2 = *(_QWORD *)(result - 80);
      if ((*(_WORD *)(result - 86) & 1) == 0)
        goto LABEL_41;
      v5 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 1688));
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      --*(_DWORD *)(v5 + 1668);
      *(_QWORD *)v1 = *(_QWORD *)(v5 + 1680);
      *(_QWORD *)(v5 + 1680) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
        goto LABEL_64;
      v4 = *(pthread_mutex_t **)(v5 + 1688);
      goto LABEL_63;
    case 4:
      v1 = result - 96;
      v2 = *(_QWORD *)(result - 80);
      if ((*(_WORD *)(result - 86) & 1) == 0)
        goto LABEL_41;
      v6 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 6296));
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      --*(_DWORD *)(v6 + 6276);
      *(_QWORD *)v1 = *(_QWORD *)(v6 + 6288);
      *(_QWORD *)(v6 + 6288) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
        goto LABEL_64;
      v4 = *(pthread_mutex_t **)(v6 + 6296);
      goto LABEL_63;
    case 5:
      v1 = result - 96;
      v2 = *(_QWORD *)(result - 80);
      if ((*(_WORD *)(result - 86) & 1) == 0)
        goto LABEL_41;
      v7 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 2264));
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      --*(_DWORD *)(v7 + 2244);
      *(_QWORD *)v1 = *(_QWORD *)(v7 + 2256);
      *(_QWORD *)(v7 + 2256) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
        goto LABEL_64;
      v4 = *(pthread_mutex_t **)(v7 + 2264);
      goto LABEL_63;
    case 6:
      v8 = (pthread_mutex_t *)(result - 32);
      if ((*(_WORD *)(result - 22) & 1) == 0)
        goto LABEL_43;
      v9 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3992));
      (*(void (**)(pthread_mutex_t *))(v8->__sig + 24))(v8);
      --*(_DWORD *)(v9 + 3972);
      v8->__sig = *(_QWORD *)(v9 + 3984);
      *(_QWORD *)(v9 + 3984) = v8;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
        goto LABEL_56;
      v10 = *(pthread_mutex_t **)(v9 + 3992);
      goto LABEL_54;
    case 7:
      v1 = result - 24;
      v2 = *(_QWORD *)(result - 8);
      if ((*(_WORD *)(result - 14) & 1) != 0)
      {
        v11 = physx::NpFactory::mInstance;
        if (*(_WORD *)(result - 16) == 11)
        {
          v12 = (pthread_mutex_t **)(physx::NpFactory::mInstance + 5144);
          if (physx::shdfnd::g_alwaysUseLocking & 1 | (physx::shdfnd::g_isLockingEnabled != 0))
            pthread_mutex_lock(*v12);
          (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
          --*(_DWORD *)(v11 + 5124);
          *(_QWORD *)v1 = *(_QWORD *)(v11 + 5136);
          *(_QWORD *)(v11 + 5136) = v1;
        }
        else
        {
          v12 = (pthread_mutex_t **)(physx::NpFactory::mInstance + 5720);
          if (physx::shdfnd::g_alwaysUseLocking & 1 | (physx::shdfnd::g_isLockingEnabled != 0))
            pthread_mutex_lock(*v12);
          (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
          --*(_DWORD *)(v11 + 5700);
          *(_QWORD *)v1 = *(_QWORD *)(v11 + 5712);
          *(_QWORD *)(v11 + 5712) = v1;
        }
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        {
          v4 = *v12;
LABEL_63:
          pthread_mutex_unlock(v4);
        }
      }
      else
      {
LABEL_41:
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      }
LABEL_64:
      v14 = physx::NpPhysics::mInstance;
      v15 = v1;
      v16 = v2;
      break;
    case 8:
      v8 = *(pthread_mutex_t **)(result + 400);
      if ((*(_WORD *)&v8->__opaque[2] & 1) == 0)
        goto LABEL_43;
      if (*(_WORD *)v8->__opaque == 14)
        physx::NpFactory::releaseArticulationJointToPool((pthread_mutex_t **)physx::NpFactory::mInstance, v8);
      else
        physx::NpFactory::releaseArticulationJointRCToPool((pthread_mutex_t **)physx::NpFactory::mInstance, v8);
      goto LABEL_56;
    case 9:
      v8 = (pthread_mutex_t *)(result - 16);
      if ((*(_WORD *)(result - 6) & 1) != 0)
      {
        v13 = physx::NpFactory::mInstance;
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
          pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3416));
        (*(void (**)(pthread_mutex_t *))(v8->__sig + 24))(v8);
        --*(_DWORD *)(v13 + 3396);
        v8->__sig = *(_QWORD *)(v13 + 3408);
        *(_QWORD *)(v13 + 3408) = v8;
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        {
          v10 = *(pthread_mutex_t **)(v13 + 3416);
LABEL_54:
          pthread_mutex_unlock(v10);
        }
      }
      else
      {
LABEL_43:
        (*(void (**)(pthread_mutex_t *))(v8->__sig + 24))(v8);
      }
LABEL_56:
      v14 = physx::NpPhysics::mInstance;
      v15 = (uint64_t)v8;
      v16 = 0;
      break;
    default:
      return result;
  }
  return physx::NpPhysics::notifyDeletionListeners(v14, v15, v16, 2);
}

uint64_t physx::NpPhysics::removeMaterialFromTable(uint64_t this, physx::NpMaterial *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;

  v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  if (*(_DWORD *)(v3 + 16))
  {
    v4 = 0;
    do
      this = physx::Scb::Scene::removeMaterial(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4++) + 16, (uint64_t)a2 + 48);
    while (v4 < *(unsigned int *)(v3 + 16));
  }
  v5 = *((unsigned __int16 *)a2 + 36);
  if (v5 != 0xFFFF)
  {
    *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * *((unsigned __int16 *)a2 + 36)) = 0;
    this = physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v3 + 32, v5);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 160));
  return this;
}

void physx::NpMaterial::~NpMaterial(physx::NpMaterial *this)
{
  *(_QWORD *)this = off_24ED948E0;
  *((_QWORD *)this + 3) = &unk_24ED949B0;
  physx::NpPhysics::removeMaterialFromTable(physx::NpPhysics::mInstance, this);
}

{
  *(_QWORD *)this = off_24ED948E0;
  *((_QWORD *)this + 3) = &unk_24ED949B0;
  physx::NpPhysics::removeMaterialFromTable(physx::NpPhysics::mInstance, this);
  (*(void (**)(uint64_t, physx::NpMaterial *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::NpMaterial::~NpMaterial(physx::NpMaterial *this)
{
  *(_QWORD *)this = &unk_24ED949B0;
  *((_QWORD *)this - 3) = off_24ED948E0;
  physx::NpPhysics::removeMaterialFromTable(physx::NpPhysics::mInstance, (physx::NpMaterial *)((char *)this - 24));
}

{
  char *v1;

  *(_QWORD *)this = &unk_24ED949B0;
  *((_QWORD *)this - 3) = off_24ED948E0;
  v1 = (char *)this - 24;
  physx::NpPhysics::removeMaterialFromTable(physx::NpPhysics::mInstance, (physx::NpMaterial *)((char *)this - 24));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

physx::NpMaterial *physx::NpMaterial::resolveReferences(physx::NpMaterial *a1)
{
  *((_QWORD *)a1 + 8) = a1;
  return physx::NpPhysics::addMaterial((pthread_mutex_t **)physx::NpPhysics::mInstance, a1);
}

physx::NpMaterial *physx::NpPhysics::addMaterial(pthread_mutex_t **this, physx::NpMaterial *a2)
{
  physx::NpMaterial *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;

  v2 = a2;
  if (a2)
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(this[20]);
    if (physx::NpMaterialManager::setMaterial((physx::NpMaterialManager *)(this + 4), v2))
    {
      if (*((_DWORD *)this + 4))
      {
        v7 = 0;
        do
          physx::Scb::Scene::addMaterial(*(&this[1]->__sig + v7++) + 16, (uint64_t)v2 + 48);
        while (v7 < *((unsigned int *)this + 4));
      }
    }
    else
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 418, "PxPhysics::createMaterial: limit of 64K materials reached.", v4, v5, v6, v9);
      (**(void (***)(physx::NpMaterial *))v2)(v2);
      v2 = 0;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(this[20]);
  }
  return v2;
}

uint64_t physx::NpMaterial::onRefCountZero(physx::NpMaterial *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if ((*((_WORD *)this + 5) & 1) != 0)
  {
    v3 = physx::NpFactory::mInstance;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 4568));
    (*(void (**)(physx::NpMaterial *))(*(_QWORD *)this + 24))(this);
    --*(_DWORD *)(v3 + 4548);
    *(_QWORD *)this = *(_QWORD *)(v3 + 4560);
    *(_QWORD *)(v3 + 4560) = this;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 4568));
  }
  else
  {
    (*(void (**)(physx::NpMaterial *))(*(_QWORD *)this + 24))(this);
  }
  return physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, v2, 2);
}

uint64_t `non-virtual thunk to'physx::NpMaterial::onRefCountZero(physx::NpMaterial *this)
{
  return physx::NpMaterial::onRefCountZero((physx::NpMaterial *)((char *)this - 24));
}

uint64_t physx::NpMaterial::release(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 24) + 16))(this + 24);
  return this;
}

uint64_t physx::NpMaterial::acquireReference(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t physx::NpMaterial::getReferenceCount(physx::NpMaterial *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::NpMaterial::setDynamicFriction(physx::NpMaterial *this, float a2)
{
  *((float *)this + 12) = a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, this);
}

float physx::NpMaterial::getDynamicFriction(physx::NpMaterial *this)
{
  return *((float *)this + 12);
}

uint64_t physx::NpMaterial::setStaticFriction(physx::NpMaterial *this, float a2)
{
  *((float *)this + 13) = a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, this);
}

float physx::NpMaterial::getStaticFriction(physx::NpMaterial *this)
{
  return *((float *)this + 13);
}

uint64_t physx::NpMaterial::setRestitution(physx::NpMaterial *this, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v13;

  if (a2 < 0.0 || a2 > 1.0)
  {
    v13 = a2;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpMaterial.cpp", 143, "PxMaterial::setRestitution: Invalid value %f was clamped to [0,1]!", a7, a8, a9, SLOBYTE(v13));
  }
  *((float *)this + 14) = a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, this);
}

float physx::NpMaterial::getRestitution(physx::NpMaterial *this)
{
  return *((float *)this + 14);
}

uint64_t physx::NpMaterial::setFlag(physx::NpMaterial *a1, __int16 a2, int a3)
{
  __int16 v3;

  if (a3)
    v3 = *((_WORD *)a1 + 30) | a2;
  else
    v3 = *((_WORD *)a1 + 30) & ~a2;
  *((_WORD *)a1 + 30) = v3;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::setFlags(physx::NpMaterial *a1, _WORD *a2)
{
  *((_WORD *)a1 + 30) = *a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::getFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(this + 60);
  return this;
}

uint64_t physx::NpMaterial::setFrictionCombineMode(physx::NpMaterial *a1, char a2)
{
  *((_BYTE *)a1 + 62) = *((_BYTE *)a1 + 62) & 0xF | (16 * a2);
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::getFrictionCombineMode(physx::NpMaterial *this)
{
  return *((unsigned __int8 *)this + 62) >> 4;
}

uint64_t physx::NpMaterial::setRestitutionCombineMode(physx::NpMaterial *a1, char a2)
{
  *((_BYTE *)a1 + 62) = *((_BYTE *)a1 + 62) & 0xF0 | a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::getRestitutionCombineMode(physx::NpMaterial *this)
{
  return *((_BYTE *)this + 62) & 0xF;
}

uint64_t physx::NpPhysics::NpPhysics(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  pthread_mutex_t *v8;
  uint64_t v9;
  const char *v10;
  pthread_mutex_t *v11;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24ED949D8;
  *(_QWORD *)(a1 + 24) = *a2;
  physx::Sc::Physics::mInstance = a1 + 24;
  v4 = *(_OWORD *)a3;
  qword_25582F930 = *(_QWORD *)(a3 + 16);
  physx::gPxvOffsetTable = v4;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                + 16))(physx::shdfnd::Foundation::mInstance + 24, 1024, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpMaterialManager.h", 46);
  *(_QWORD *)(a1 + 56) = v5;
  *(_DWORD *)(a1 + 64) = 128;
  bzero(v5, 0x400uLL);
  *(_QWORD *)(a1 + 72) = &off_24ED94CF0;
  v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v7 = "<allocation names disabled>";
  v8 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 72, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 80) = v8;
  physx::shdfnd::MutexImpl::MutexImpl(v8);
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 128) = 1061158912;
  *(_QWORD *)(a1 + 132) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 140) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxDeletionListener * const,physx::NpPhysics::NpDelListenerEntry *>,physx::PxDeletionListener *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::internal::HashMapBase<physx::PxDeletionListener *,physx::NpPhysics::NpDelListenerEntry *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 88, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(_QWORD *)(a1 + 144) = &off_24ED94D40;
  *(_BYTE *)(a1 + 152) = 0;
  v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v10 = "<allocation names disabled>";
  v11 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 72, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 160) = v11;
  physx::shdfnd::MutexImpl::MutexImpl(v11);
  return a1;
}

void physx::NpPhysics::~NpPhysics(physx::NpPhysics *this)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  void (***v7)(_QWORD);
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v21;
  int v22;
  int v23;

  *(_QWORD *)this = off_24ED949D8;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      *v3++ = 0;
      --v2;
    }
    while (v2);
  }
  *((_DWORD *)this + 4) = 0;
  v4 = *((unsigned int *)this + 16);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * i);
      if (v6)
      {
        physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID((uint64_t)this + 32, *(unsigned __int16 *)(v6 + 72));
        v7 = *(void (****)(_QWORD))(*((_QWORD *)this + 7) + 8 * i);
        (**v7)(v7);
        *(_QWORD *)(*((_QWORD *)this + 7) + 8 * i) = 0;
        v4 = *((unsigned int *)this + 16);
      }
    }
  }
  if (*((_QWORD *)this + 7))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((unsigned int *)this + 35);
  if ((_DWORD)v8)
  {
    v9 = (_QWORD **)(*((_QWORD *)this + 12) + 8);
    do
    {
      v10 = *v9;
      if (*v9)
      {
        if (*v10)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
      }
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  v11 = *((_DWORD *)this + 31);
  if (v11 && *((_DWORD *)this + 35))
  {
    memset(*((void **)this + 14), 255, (4 * v11));
    v12 = *((_QWORD *)this + 13);
    v13 = (*((_DWORD *)this + 30) - 1);
    if (*((_DWORD *)this + 30) == 1)
    {
      v21 = 0;
    }
    else
    {
      _X10 = v12 + 128;
      v15 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v15++;
        _X10 += 4;
        --v13;
      }
      while (v13);
      v21 = (*((_DWORD *)this + 30) - 1);
    }
    *(_DWORD *)(v12 + 4 * v21) = -1;
    *((_DWORD *)this + 33) = 0;
    *((_DWORD *)this + 35) = 0;
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 20);
  if (*((_QWORD *)this + 11))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 10);
  v22 = *((_DWORD *)this + 13);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 5))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Sc::Physics::mInstance = 0;
  v23 = *((_DWORD *)this + 5);
  if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 1))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v2;

  physx::NpPhysics::~NpPhysics(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpPhysics *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

double physx::NpPhysics::initOffsetTables(uint64_t a1)
{
  double result;

  xmmword_25582F9E8 = (__int128)vdupq_n_s64(0xFFFFFFFFFFFFFFD0);
  unk_25582F9F8 = vdupq_n_s64(0xFFFFFFFFFFFFFFD8);
  physx::Sc::gOffsetTable = (__int128)vdupq_n_s64(0xFFFFFFFFFFFFFF80);
  *(_OWORD *)algn_25582F9D8 = xmmword_2261AB4F0;
  *(_OWORD *)&qword_25582FA10 = xmmword_2261AB500;
  unk_25582FA20 = physx::Sc::gOffsetTable;
  physx::NpActor::sLazyInitOffsets = 0u;
  unk_25582FA60 = 0u;
  qword_25582FA70 = 0;
  unk_25582FA88 = 0u;
  unk_25582FA98 = 0u;
  unk_25582FAA8 = 0u;
  xmmword_25582FAC0 = 0u;
  unk_25582FAD0 = 0u;
  xmmword_25582FAE0 = 0u;
  unk_25582FAF0 = 0u;
  qword_25582FB00 = 0;
  unk_25582FB38 = 0u;
  unk_25582FB28 = 0u;
  unk_25582FB18 = 0u;
  xmmword_25582FB50 = 0u;
  unk_25582FB60 = 0u;
  unk_25582FA78 = vdupq_n_s64(0x18uLL);
  qword_25582FAB8 = 24;
  qword_25582FB48 = 96;
  unk_25582FB08 = vdupq_n_s64(0x60uLL);
  physx::Scb::Actor::sLazyInitOffsets = (__int128)vdupq_n_s64(0x20uLL);
  qword_25582FBB0 = 32;
  xmmword_25582FBD0 = physx::Scb::Actor::sLazyInitOffsets;
  qword_25582FBE0 = 32;
  result = NAN;
  *(_OWORD *)a1 = xmmword_2261AB510;
  *(_QWORD *)(a1 + 16) = -144;
  return result;
}

uint64_t physx::NpPhysics::createInstance(physx::shdfnd::Foundation *a1, uint64_t a2, float *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  double inited;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  physx::NpFactory *v17;
  void (*v19)(void);
  char v20;
  _BYTE v21[256];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a1 != 67174656)
  {
    physx::shdfnd::snprintf((physx::shdfnd *)v21, (char *)0x100, "Wrong version: PhysX version is 0x%08x, tried to create 0x%08x", a4, 67174656, a1);
    v19 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2) + 16);
LABEL_14:
    v19();
    return 0;
  }
  if (*a3 <= 0.0)
  {
    v19 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 8))(a2, *a3) + 16);
    goto LABEL_14;
  }
  v10 = physx::NpPhysics::mRefCount;
  if (!physx::NpPhysics::mRefCount)
  {
    physx::shdfnd::Foundation::incRefCount(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v20);
    inited = physx::NpPhysics::initOffsetTables((uint64_t)v21);
    v12 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t, double))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, inited))
    {
      v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPhysics>::getName() [T = physx::NpPhysics]";
    }
    else
    {
      v13 = "<allocation names disabled>";
    }
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24) + 16))(v12 + 24, 168, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 216);
    physx::NpPhysics::mInstance = physx::NpPhysics::NpPhysics(v14, a3, (uint64_t)v21);
    v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpFactory>::getName() [T = physx::NpFactory]";
    else
      v16 = "<allocation names disabled>";
    v17 = (physx::NpFactory *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v15 + 24) + 16))(v15 + 24, 7456, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 101);
    physx::NpFactory::mInstance = (uint64_t)physx::NpFactory::NpFactory(v17);
    physx::GuMeshFactory::addFactoryListener(physx::NpFactory::mInstance, physx::NpPhysics::mInstance + 144);
    v10 = physx::NpPhysics::mRefCount;
  }
  physx::NpPhysics::mRefCount = v10 + 1;
  return physx::NpPhysics::mInstance;
}

void physx::NpPhysics::release(physx::NpPhysics *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  unint64_t v32;
  unsigned int v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  physx::shdfnd::Foundation *v53;
  uint64_t v54;
  uint64_t v55;

  if (!--physx::NpPhysics::mRefCount)
  {
    v9 = physx::NpFactory::mInstance;
    v54 = 0;
    v55 = 0;
    v10 = *(_DWORD *)(physx::NpFactory::mInstance + 892);
    if (v10)
      physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::recreate((uint64_t)&v54, v10);
    if (*(_DWORD *)(v9 + 872))
    {
      v11 = *(unsigned int **)(v9 + 864);
      v12 = *v11;
      if ((_DWORD)v12 == -1)
      {
        v13 = 0;
        while (*(_DWORD *)(v9 + 876) - 1 != v13)
        {
          v12 = v11[++v13];
          if ((_DWORD)v12 != -1)
            goto LABEL_11;
        }
      }
      else
      {
        LODWORD(v13) = 0;
        do
        {
LABEL_11:
          v14 = (_QWORD *)(*(_QWORD *)(v9 + 848) + 8 * v12);
          v15 = v55;
          if ((HIDWORD(v55) & 0x7FFFFFFFu) <= v55)
          {
            physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::growAndPushBack((uint64_t)&v54, v14);
          }
          else
          {
            *(_QWORD *)(v54 + 8 * v55) = *v14;
            LODWORD(v55) = v15 + 1;
          }
          v12 = *(unsigned int *)(*(_QWORD *)(v9 + 856) + 4 * v12);
        }
        while ((_DWORD)v12 != -1);
        while (*(_DWORD *)(v9 + 876) - 1 != (_DWORD)v13)
        {
          LODWORD(v13) = v13 + 1;
          v12 = *(unsigned int *)(*(_QWORD *)(v9 + 864) + 4 * v13);
          if ((_DWORD)v12 != -1)
            goto LABEL_11;
        }
      }
    }
    if ((_DWORD)v55)
    {
      v16 = 0;
      do
      {
        (***(void (****)(_QWORD))(v54 + 8 * v16))(*(_QWORD *)(v54 + 8 * v16));
        ++v16;
      }
      while (v16 < v55);
    }
    if ((v55 & 0x8000000000000000) == 0 && (v55 & 0x7FFFFFFF00000000) != 0 && v54 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v54 = 0;
    v55 = 0;
    v18 = *(_DWORD *)(v9 + 1004);
    if (v18)
      physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::recreate((uint64_t)&v54, v18);
    if (*(_DWORD *)(v9 + 984))
    {
      v19 = *(unsigned int **)(v9 + 976);
      v20 = *v19;
      if ((_DWORD)v20 == -1)
      {
        v21 = 0;
        while (*(_DWORD *)(v9 + 988) - 1 != v21)
        {
          v20 = v19[++v21];
          if ((_DWORD)v20 != -1)
            goto LABEL_36;
        }
      }
      else
      {
        LODWORD(v21) = 0;
        do
        {
LABEL_36:
          v22 = (_QWORD *)(*(_QWORD *)(v9 + 960) + 8 * v20);
          v23 = v55;
          if ((HIDWORD(v55) & 0x7FFFFFFFu) <= v55)
          {
            physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::growAndPushBack((uint64_t)&v54, v22);
          }
          else
          {
            *(_QWORD *)(v54 + 8 * v55) = *v22;
            LODWORD(v55) = v23 + 1;
          }
          v20 = *(unsigned int *)(*(_QWORD *)(v9 + 968) + 4 * v20);
        }
        while ((_DWORD)v20 != -1);
        while (*(_DWORD *)(v9 + 988) - 1 != (_DWORD)v21)
        {
          LODWORD(v21) = v21 + 1;
          v20 = *(unsigned int *)(*(_QWORD *)(v9 + 976) + 4 * v21);
          if ((_DWORD)v20 != -1)
            goto LABEL_36;
        }
      }
    }
    if ((_DWORD)v55)
    {
      v24 = 0;
      do
      {
        (***(void (****)(_QWORD))(v54 + 8 * v24))(*(_QWORD *)(v54 + 8 * v24));
        ++v24;
      }
      while (v24 < v55);
    }
    if ((v55 & 0x8000000000000000) == 0 && (v55 & 0x7FFFFFFF00000000) != 0 && v54 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v54 = 0;
    v55 = 0;
    v26 = *(_DWORD *)(v9 + 948);
    if (v26)
      physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::recreate((uint64_t)&v54, v26);
    if (*(_DWORD *)(v9 + 928))
    {
      v27 = *(unsigned int **)(v9 + 920);
      v28 = *v27;
      if ((_DWORD)v28 == -1)
      {
        v29 = 0;
        while (*(_DWORD *)(v9 + 932) - 1 != v29)
        {
          v28 = v27[++v29];
          if ((_DWORD)v28 != -1)
            goto LABEL_61;
        }
      }
      else
      {
        LODWORD(v29) = 0;
        do
        {
LABEL_61:
          v30 = (_QWORD *)(*(_QWORD *)(v9 + 904) + 8 * v28);
          v31 = v55;
          if ((HIDWORD(v55) & 0x7FFFFFFFu) <= v55)
          {
            physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::growAndPushBack((uint64_t)&v54, v30);
          }
          else
          {
            *(_QWORD *)(v54 + 8 * v55) = *v30;
            LODWORD(v55) = v31 + 1;
          }
          v28 = *(unsigned int *)(*(_QWORD *)(v9 + 912) + 4 * v28);
        }
        while ((_DWORD)v28 != -1);
        while (*(_DWORD *)(v9 + 932) - 1 != (_DWORD)v29)
        {
          LODWORD(v29) = v29 + 1;
          v28 = *(unsigned int *)(*(_QWORD *)(v9 + 920) + 4 * v29);
          if ((_DWORD)v28 != -1)
            goto LABEL_61;
        }
      }
    }
    if ((_DWORD)v55)
    {
      v32 = 0;
      do
      {
        (***(void (****)(_QWORD))(v54 + 8 * v32))(*(_QWORD *)(v54 + 8 * v32));
        ++v32;
      }
      while (v32 < v55);
    }
    if ((v55 & 0x8000000000000000) == 0 && (v55 & 0x7FFFFFFF00000000) != 0 && v54 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v54 = 0;
    v55 = 0;
    v34 = *(_DWORD *)(v9 + 1060);
    if (v34)
      physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate((uint64_t)&v54, v34);
    if (*(_DWORD *)(v9 + 1040))
    {
      v35 = *(unsigned int **)(v9 + 1032);
      v36 = *v35;
      if ((_DWORD)v36 == -1)
      {
        v37 = 0;
        while (*(_DWORD *)(v9 + 1044) - 1 != v37)
        {
          v36 = v35[++v37];
          if ((_DWORD)v36 != -1)
            goto LABEL_86;
        }
      }
      else
      {
        LODWORD(v37) = 0;
        do
        {
LABEL_86:
          v38 = (_QWORD *)(*(_QWORD *)(v9 + 1016) + 8 * v36);
          v39 = v55;
          if ((HIDWORD(v55) & 0x7FFFFFFFu) <= v55)
          {
            physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack((uint64_t)&v54, v38);
          }
          else
          {
            *(_QWORD *)(v54 + 8 * v55) = *v38;
            LODWORD(v55) = v39 + 1;
          }
          v36 = *(unsigned int *)(*(_QWORD *)(v9 + 1024) + 4 * v36);
        }
        while ((_DWORD)v36 != -1);
        while (*(_DWORD *)(v9 + 1044) - 1 != (_DWORD)v37)
        {
          LODWORD(v37) = v37 + 1;
          v36 = *(unsigned int *)(*(_QWORD *)(v9 + 1032) + 4 * v37);
          if ((_DWORD)v36 != -1)
            goto LABEL_86;
        }
      }
    }
    if ((_DWORD)v55)
    {
      v40 = 0;
      do
      {
        (***(void (****)(_QWORD))(v54 + 8 * v40))(*(_QWORD *)(v54 + 8 * v40));
        ++v40;
      }
      while (v40 < v55);
    }
    if ((v55 & 0x8000000000000000) == 0 && (v55 & 0x7FFFFFFF00000000) != 0 && v54 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    while (*(_DWORD *)(v9 + 1116))
    {
      v42 = **(_QWORD **)(v9 + 1072);
      v43 = (unsigned int *)(v42 + 32);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
        (*(void (**)(uint64_t))(*(_QWORD *)(v42 + 24) + 16))(v42 + 24);
    }
    physx::GuMeshFactory::release((physx::GuMeshFactory *)v9);
    physx::NpFactory::mInstance = 0;
    v53 = (physx::shdfnd::Foundation *)physx::NpPhysics::mInstance;
    if (physx::NpPhysics::mInstance)
      v53 = (physx::shdfnd::Foundation *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)physx::NpPhysics::mInstance
                                                                            + 8))(physx::NpPhysics::mInstance);
    physx::NpPhysics::mInstance = 0;
    physx::shdfnd::Foundation::decRefCount(v53, v46, v47, v48, v49, v50, v51, v52, a9);
  }
}

_QWORD *physx::NpPhysics::createScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 160));
  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpScene>::getName() [T = physx::NpScene]";
  else
    v5 = "<allocation names disabled>";
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, 9744, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 274);
  v23 = physx::NpScene::NpScene((uint64_t)v6, a2);
  if (!v23)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 277, "Unable to create scene.", v7, v8, v9, v22);
    goto LABEL_23;
  }
  if (!(*(uint64_t (**)(_QWORD *))(*v6 + 968))(v6))
  {
    v17 = physx::shdfnd::Foundation::mInstance;
    v18 = "Unable to create scene. Task manager creation failed.";
    v19 = 32;
    v20 = 282;
LABEL_21:
    physx::shdfnd::Foundation::error(v17, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", v20, v18, v10, v11, v12, v22);
    v6 = 0;
    goto LABEL_23;
  }
  physx::NpScene::loadFromDesc((uint64_t)v6, a2);
  v13 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v13)
  {
    v14 = 0;
    do
    {
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
        if (v15)
          break;
        if (v13 == ++v14)
          goto LABEL_15;
      }
      v14 = (v14 + 1);
      physx::Scb::Scene::addMaterial((uint64_t)(v6 + 2), v15 + 48);
      v13 = *(unsigned int *)(a1 + 64);
    }
    while (v14 < v13);
  }
LABEL_15:
  if (!v6[234])
  {
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    v17 = physx::shdfnd::Foundation::mInstance;
    v18 = "Unable to create scene.";
    v19 = 16;
    v20 = 299;
    goto LABEL_21;
  }
  v16 = *(unsigned int *)(a1 + 16);
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFFFu) <= v16)
  {
    physx::shdfnd::Array<physx::NpScene *,physx::shdfnd::ReflectionAllocator<physx::NpScene *>>::growAndPushBack(a1 + 8, &v23);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = v6;
    *(_DWORD *)(a1 + 16) = v16 + 1;
  }
LABEL_23:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 160));
  return v6;
}

uint64_t physx::NpPhysics::releaseSceneInternal(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 160));
  v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD **)(v3 + 8);
    v6 = *(unsigned int *)(v3 + 16);
    v7 = v5;
    while (*v7 != a2)
    {
      ++v7;
      if (!--v6)
        goto LABEL_10;
    }
    v8 = v4 - 1;
    *(_DWORD *)(v3 + 16) = v8;
    *v7 = v5[v8];
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
LABEL_10:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 160));
  return result;
}

uint64_t physx::NpPhysics::getNbScenes(pthread_mutex_t **this)
{
  uint64_t v2;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
    return *((unsigned int *)this + 4);
  pthread_mutex_lock(this[20]);
  v2 = *((unsigned int *)this + 4);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[20]);
  return v2;
}

uint64_t physx::NpPhysics::getScenes(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 160));
  v8 = (*(_DWORD *)(a1 + 16) - a4) & ~((int)(*(_DWORD *)(a1 + 16) - a4) >> 31);
  if (v8 >= v5)
    v5 = v5;
  else
    v5 = v8;
  if ((_DWORD)v5)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * a4);
    v10 = v5;
    do
    {
      v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 160));
  return v5;
}

physx::PxRigidStatic *physx::NpPhysics::createRigidStatic(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  physx::PxRigidStatic *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  physx::PxRigidStatic **v18;
  int8x8_t v19;
  float32x4_t v21;
  uint64_t v22;
  __int32 v23;
  unint64_t v24;

  v2 = physx::NpFactory::mInstance;
  _Q0 = *a2;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a2->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned __int128 *)a2);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  v21 = vdivq_f32(*a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  v22 = a2[1].i64[0];
  v23 = a2[1].i32[2];
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 2264));
  v11 = *(physx::PxRigidStatic **)(v2 + 2256);
  if (!v11)
  {
    v12 = *(unsigned int *)(v2 + 2248);
    if ((_DWORD)v12)
    {
      v13 = physx::shdfnd::Foundation::mInstance;
      v14 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::getName() [T = physx::NpRigidStatic]"
          : "<allocation names disabled>";
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v13 + 24) + 16))(v13 + 24, v12, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v15 = 0;
    }
    v24 = v15;
    v16 = *(unsigned int *)(v2 + 2232);
    if ((*(_DWORD *)(v2 + 2236) & 0x7FFFFFFFu) <= v16)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>>::growAndPushBack(v2 + 1704, &v24);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 2224) + 8 * v16) = v15;
      *(_DWORD *)(v2 + 2232) = v16 + 1;
    }
    v17 = v15 + 176 * *(unsigned int *)(v2 + 2240) - 176;
    v11 = *(physx::PxRigidStatic **)(v2 + 2256);
    if (v17 >= v15)
    {
      v18 = (physx::PxRigidStatic **)(v15 + 176 * *(unsigned int *)(v2 + 2240) - 176);
      do
      {
        *v18 = v11;
        v18 -= 22;
        v11 = (physx::PxRigidStatic *)v17;
        v17 = (unint64_t)v18;
      }
      while ((unint64_t)v18 >= v15);
      v11 = (physx::PxRigidStatic *)(v18 + 22);
    }
  }
  *(_QWORD *)(v2 + 2256) = *(_QWORD *)v11;
  ++*(_DWORD *)(v2 + 2244);
  *(float *)v19.i32 = physx::NpRigidStatic::NpRigidStatic((uint64_t)v11, (uint64_t)&v21);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 2264));
  physx::NpFactory::addRigidStatic(v2, v11, 1, v19);
  return v11;
}

uint64_t physx::NpPhysics::createShape(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  uint64_t v10;
  char v11;
  const unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int8x8_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v30;
  _BYTE v31[16];
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v10 = physx::NpFactory::mInstance;
  v11 = *a6;
  v31[8] = 1;
  v32 = (unsigned __int16 *)v31;
  v33 = 0x400000000;
  LOWORD(v30) = 0;
  physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::resize((uint64_t)v31, a4, &v30);
  if (a4 == 1)
  {
    v12 = v32;
    *v32 = *(_WORD *)(*(_QWORD *)a3 + 72);
  }
  else
  {
    v12 = v32;
    if (a4)
    {
      v13 = 0;
      do
      {
        v12[v13] = *(_WORD *)(*(_QWORD *)(a3 + 8 * v13) + 72);
        ++v13;
      }
      while (a4 != v13);
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 2840));
    v12 = v32;
  }
  v14 = *(_QWORD *)(v10 + 2832);
  if (!v14)
  {
    v15 = *(unsigned int *)(v10 + 2824);
    if ((_DWORD)v15)
    {
      v16 = physx::shdfnd::Foundation::mInstance;
      v17 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpShape>::getName() [T = physx::NpShape]"
          : "<allocation names disabled>";
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v16 + 24) + 16))(v16 + 24, v15, v17, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v18 = 0;
    }
    v30 = v18;
    v19 = *(unsigned int *)(v10 + 2808);
    if ((*(_DWORD *)(v10 + 2812) & 0x7FFFFFFFu) <= v19)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpShape>>>::growAndPushBack(v10 + 2280, &v30);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v10 + 2800) + 8 * v19) = v18;
      *(_DWORD *)(v10 + 2808) = v19 + 1;
    }
    v20 = (uint64_t *)(v18 + 272 * *(unsigned int *)(v10 + 2816) - 272);
    v14 = *(_QWORD *)(v10 + 2832);
    if ((unint64_t)v20 >= v18)
    {
      do
      {
        *v20 = v14;
        v21 = v20 - 34;
        v14 = (uint64_t)v20;
        v20 = v21;
      }
      while ((unint64_t)v21 >= v18);
      v14 = (uint64_t)(v21 + 34);
    }
  }
  *(_QWORD *)(v10 + 2832) = *(_QWORD *)v14;
  ++*(_DWORD *)(v10 + 2820);
  LOBYTE(v30) = v11;
  physx::NpShape::NpShape(v14, a2, (char *)&v30, v12, a4, a5);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 2840));
  if (a4)
  {
    v23 = 0;
    do
    {
      if ((*(_BYTE *)(v14 + 56) & 2) != 0)
      {
        v26 = *(_QWORD *)(v14 + 64);
        if (*(_WORD *)(v26 + 148) == 1)
          v25 = v26 + 144;
        else
          v25 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 7792) + 2 * *(unsigned int *)(v26 + 144);
      }
      else
      {
        v24 = *(_DWORD *)(v14 + 152);
        v25 = v14 + 146;
        if ((v24 - 7) >= 0xFFFFFFFE)
        {
          if (v24 == 5)
            v25 = *(_QWORD *)(v14 + 216);
          else
            v25 = *(_QWORD *)(v14 + 192);
        }
      }
      v27 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(physx::NpPhysics::mInstance + 56)
                                       + 8 * *(unsigned __int16 *)(v25 + 2 * v23))
                           + 32);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      ++v23;
    }
    while (v23 != a4);
  }
  physx::NpFactory::addShape(v10, (physx::PxShape *)v14, 1, v22);
  if ((v33 & 0x8000000000000000) == 0 && (v33 & 0x7FFFFFFF00000000) != 0 && v32 != (unsigned __int16 *)v31 && v32)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v14;
}

uint64_t physx::NpPhysics::getNbShapes(physx::NpPhysics *this)
{
  return *(unsigned int *)(physx::NpFactory::mInstance + 1116);
}

uint64_t physx::NpPhysics::getShapes(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (*(_DWORD *)(physx::NpFactory::mInstance + 1116) - a4) & ~((int)(*(_DWORD *)(physx::NpFactory::mInstance + 1116)
                                                                      - a4) >> 31);
  if (v4 >= a3)
    result = a3;
  else
    result = v4;
  if ((_DWORD)result)
  {
    v6 = (uint64_t *)(*(_QWORD *)(physx::NpFactory::mInstance + 1072) + 8 * a4);
    v7 = result;
    do
    {
      v8 = *v6++;
      *a2++ = v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

physx::PxRigidStatic *physx::NpPhysics::createRigidDynamic(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  physx::PxRigidStatic *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  physx::PxRigidStatic **v17;
  physx::PxRigidStatic **v18;
  int8x8_t v19;
  float32x4_t v21;
  uint64_t v22;
  __int32 v23;
  unint64_t v24;

  v2 = physx::NpFactory::mInstance;
  _Q0 = *a2;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a2->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned __int128 *)a2);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  v21 = vdivq_f32(*a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  v22 = a2[1].i64[0];
  v23 = a2[1].i32[2];
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 1688));
  v11 = *(physx::PxRigidStatic **)(v2 + 1680);
  if (!v11)
  {
    v12 = *(unsigned int *)(v2 + 1672);
    if ((_DWORD)v12)
    {
      v13 = physx::shdfnd::Foundation::mInstance;
      v14 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::getName() [T = physx::NpRigidDynamic]"
          : "<allocation names disabled>";
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v13 + 24) + 16))(v13 + 24, v12, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v15 = 0;
    }
    v24 = v15;
    v16 = *(unsigned int *)(v2 + 1656);
    if ((*(_DWORD *)(v2 + 1660) & 0x7FFFFFFFu) <= v16)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>>::growAndPushBack(v2 + 1128, &v24);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 1648) + 8 * v16) = v15;
      *(_DWORD *)(v2 + 1656) = v16 + 1;
    }
    v17 = (physx::PxRigidStatic **)(v15 + 384 * *(unsigned int *)(v2 + 1664) - 384);
    v11 = *(physx::PxRigidStatic **)(v2 + 1680);
    if ((unint64_t)v17 >= v15)
    {
      do
      {
        *v17 = v11;
        v18 = v17 - 48;
        v11 = (physx::PxRigidStatic *)v17;
        v17 = v18;
      }
      while ((unint64_t)v18 >= v15);
      v11 = (physx::PxRigidStatic *)(v18 + 48);
    }
  }
  *(_QWORD *)(v2 + 1680) = *(_QWORD *)v11;
  ++*(_DWORD *)(v2 + 1668);
  LOWORD(v24) = 3;
  physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::NpRigidBodyTemplate((uint64_t)v11, 5, (__int16 *)&v24, 1, (uint64_t)&v21);
  *(_QWORD *)v11 = off_24ED94E98;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 1688));
  physx::NpFactory::addRigidStatic(v2, v11, 1, v19);
  return v11;
}

uint64_t physx::NpPhysics::createConstraint(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, int8x16_t *a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  int8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  BOOL v24;
  _QWORD *v25;
  int8x8_t v26;
  unint64_t v28;
  char v29;

  v11 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3992));
  v12 = *(_QWORD *)(v11 + 3984);
  if (!v12)
  {
    v13 = *(unsigned int *)(v11 + 3976);
    if ((_DWORD)v13)
    {
      v14 = physx::shdfnd::Foundation::mInstance;
      v15 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::getName() [T = physx::NpConstraint]"
          : "<allocation names disabled>";
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24, v13, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v16 = 0;
    }
    v28 = v16;
    v17 = *(unsigned int *)(v11 + 3960);
    if ((*(_DWORD *)(v11 + 3964) & 0x7FFFFFFFu) <= v17)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>>::growAndPushBack(v11 + 3432, &v28);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v11 + 3952) + 8 * v17) = v16;
      *(_DWORD *)(v11 + 3960) = v17 + 1;
    }
    v18 = v16 + 184 * *(unsigned int *)(v11 + 3968) - 184;
    v12 = *(_QWORD *)(v11 + 3984);
    if (v18 >= v16)
    {
      v19 = (uint64_t *)(v16 + 184 * *(unsigned int *)(v11 + 3968) - 184);
      do
      {
        *v19 = v12;
        v19 -= 23;
        v12 = v18;
        v18 = (unint64_t)v19;
      }
      while ((unint64_t)v19 >= v16);
      v12 = (uint64_t)(v19 + 23);
    }
  }
  *(_QWORD *)(v11 + 3984) = *(_QWORD *)v12;
  ++*(_DWORD *)(v11 + 3972);
  *(_DWORD *)(v12 + 8) = 65545;
  *(_QWORD *)v12 = off_24ED947F8;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 48) = 0;
  *(_WORD *)(v12 + 56) = 32;
  *(_QWORD *)(v12 + 68) = 0;
  *(_QWORD *)(v12 + 76) = 0;
  *(_QWORD *)(v12 + 60) = 0;
  *(_QWORD *)(v12 + 88) = a4;
  *(int8x16_t *)(v12 + 96) = vextq_s8(*a5, *a5, 8uLL);
  *(_QWORD *)(v12 + 112) = a5[1].i64[0];
  *(_DWORD *)(v12 + 120) = a6;
  *(int32x2_t *)(v12 + 124) = vdup_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v12 + 132) = 0u;
  *(_OWORD *)(v12 + 148) = 0u;
  *(_QWORD *)(v12 + 162) = 0;
  *(_DWORD *)(v12 + 40) = 100663296;
  *(_BYTE *)(v12 + 176) = 1;
  LOWORD(v28) = a5[1].i32[2];
  physx::Sc::ConstraintCore::setFlags((_QWORD *)(v12 + 56), (__int16 *)&v28, 0);
  if (a2)
    physx::NpActor::addConnector((uint64_t)a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + a2[4]), 0, v12);
  if (a3)
    physx::NpActor::addConnector((uint64_t)a3 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + a3[4]), 0, v12);
  if (!a2
    || ((*(void (**)(unint64_t *__return_ptr, unsigned __int16 *))(*(_QWORD *)a2 + 104))(&v28, a2),
        (v28 & 8) != 0))
  {
    v21 = 0;
    if (!a3)
      goto LABEL_30;
  }
  else
  {
    v21 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a2 + 56))(a2);
    if (!a3)
      goto LABEL_30;
  }
  (*(void (**)(unint64_t *__return_ptr, unsigned __int16 *))(*(_QWORD *)a3 + 104))(&v28, a3);
  if ((v28 & 8) == 0)
  {
    v22 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a3 + 56))(a3);
    if (a2)
      goto LABEL_31;
    goto LABEL_32;
  }
LABEL_30:
  v22 = 0;
  if (a2)
  {
LABEL_31:
    if (!v21)
      goto LABEL_44;
  }
LABEL_32:
  if (v21)
    v23 = (int32x2_t *)v21;
  else
    v23 = (int32x2_t *)v22;
  if (v22)
    v24 = 1;
  else
    v24 = a3 == 0;
  if (v24 && v23)
  {
    v28 = v12;
    v29 = 0;
    v25 = (_QWORD *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v23 + 1136, &v28, &v29, v20);
    if (!v29)
      *v25 = v28;
    physx::Scb::Scene::add<physx::Scb::Constraint>(v23 + 2, (physx::Scb::Base *)(v12 + 32), v23 + 996, v26);
  }
LABEL_44:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 3992));
  physx::NpFactory::addConstraint(v11, (physx::PxConstraint *)v12, 1, v20);
  return v12;
}

_QWORD *physx::NpPhysics::createArticulation(physx::NpPhysics *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *Articulation;
  int8x8_t v10;
  char v12;

  {
    v8 = physx::NpFactory::mInstance;
    if (Articulation)
      physx::NpFactory::addArticulation(v8, (uint64_t)Articulation, 1, v10);
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 263, "Articulations not registered: returned NULL.", a6, a7, a8, v12);
    return 0;
  }
  return Articulation;
}

_QWORD *physx::NpPhysics::createArticulationReducedCoordinate(physx::NpPhysics *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *ArticulationRC;
  int8x8_t v10;
  char v12;

  {
    v8 = physx::NpFactory::mInstance;
    if (ArticulationRC)
      physx::NpFactory::addArticulation(v8, (uint64_t)ArticulationRC, 1, v10);
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 279, "Articulations not registered: returned NULL.", a6, a7, a8, v12);
    return 0;
  }
  return ArticulationRC;
}

physx::NpAggregate *physx::NpPhysics::createAggregate(physx::NpPhysics *this, unsigned int a2, char a3)
{
  uint64_t v5;
  physx::NpAggregate *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  physx::NpAggregate **v13;
  int8x8_t v14;
  unint64_t v16;

  v5 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3416));
  v6 = *(physx::NpAggregate **)(v5 + 3408);
  if (!v6)
  {
    v7 = *(unsigned int *)(v5 + 3400);
    if ((_DWORD)v7)
    {
      v8 = physx::shdfnd::Foundation::mInstance;
      v9 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
         ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::getName() [T = physx::NpAggregate]"
         : "<allocation names disabled>";
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v8 + 24) + 16))(v8 + 24, v7, v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v10 = 0;
    }
    v16 = v10;
    v11 = *(unsigned int *)(v5 + 3384);
    if ((*(_DWORD *)(v5 + 3388) & 0x7FFFFFFFu) <= v11)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>>::growAndPushBack(v5 + 2856, &v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v5 + 3376) + 8 * v11) = v10;
      *(_DWORD *)(v5 + 3384) = v11 + 1;
    }
    v12 = v10 + 80 * *(unsigned int *)(v5 + 3392) - 80;
    v6 = *(physx::NpAggregate **)(v5 + 3408);
    if (v12 >= v10)
    {
      v13 = (physx::NpAggregate **)(v10 + 80 * *(unsigned int *)(v5 + 3392) - 80);
      do
      {
        *v13 = v6;
        v13 -= 10;
        v6 = (physx::NpAggregate *)v12;
        v12 = (unint64_t)v13;
      }
      while ((unint64_t)v13 >= v10);
      v6 = (physx::NpAggregate *)(v13 + 10);
    }
  }
  *(_QWORD *)(v5 + 3408) = *(_QWORD *)v6;
  ++*(_DWORD *)(v5 + 3396);
  physx::NpAggregate::NpAggregate(v6, a2, a3);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 3416));
  physx::NpFactory::addAggregate(v5, v6, 1, v14);
  return v6;
}

BOOL physx::NpMaterialManager::setMaterial(physx::NpMaterialManager *this, physx::NpMaterial *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *((_DWORD *)this + 4);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v5);
    *((_DWORD *)this + 4) = v5;
  }
  else
  {
    v6 = (*(_DWORD *)this)++;
  }
  if (v6 <= 0xFFFE)
  {
    if (*((_DWORD *)this + 8) <= v6)
      physx::NpMaterialManager::resize(this);
    *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v6) = a2;
    *((_WORD *)a2 + 36) = v6;
  }
  return v6 < 0xFFFF;
}

physx::NpMaterial *physx::NpPhysics::createMaterial(pthread_mutex_t **this, float a2, float a3, float a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v18;

  v8 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 4568));
  v9 = *(_QWORD **)(v8 + 4560);
  if (!v9)
  {
    v10 = *(unsigned int *)(v8 + 4552);
    if ((_DWORD)v10)
    {
      v11 = physx::shdfnd::Foundation::mInstance;
      v12 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::getName() [T = physx::NpMaterial]"
          : "<allocation names disabled>";
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v11 + 24) + 16))(v11 + 24, v10, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    }
    else
    {
      v13 = 0;
    }
    v18 = v13;
    v14 = *(unsigned int *)(v8 + 4536);
    if ((*(_DWORD *)(v8 + 4540) & 0x7FFFFFFFu) <= v14)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>>::growAndPushBack(v8 + 4008, &v18);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v8 + 4528) + 8 * v14) = v13;
      *(_DWORD *)(v8 + 4536) = v14 + 1;
    }
    v15 = v13 + 80 * *(unsigned int *)(v8 + 4544) - 80;
    v9 = *(_QWORD **)(v8 + 4560);
    if (v15 >= v13)
    {
      v16 = (_QWORD *)(v13 + 80 * *(unsigned int *)(v8 + 4544) - 80);
      do
      {
        *v16 = v9;
        v16 -= 10;
        v9 = (_QWORD *)v15;
        v15 = (unint64_t)v16;
      }
      while ((unint64_t)v16 >= v13);
      v9 = v16 + 10;
    }
  }
  *(_QWORD *)(v8 + 4560) = *v9;
  ++*(_DWORD *)(v8 + 4548);
  *((_DWORD *)v9 + 2) = 196616;
  *((_DWORD *)v9 + 8) = 1;
  *v9 = off_24ED948E0;
  v9[2] = 0;
  v9[3] = &unk_24ED949B0;
  *((float *)v9 + 12) = a3;
  *((float *)v9 + 13) = a2;
  *((float *)v9 + 14) = a4;
  *((_WORD *)v9 + 30) = 0;
  *((_WORD *)v9 + 31) = -13056;
  *((_DWORD *)v9 + 18) = -842137601;
  v9[8] = v9;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 4568));
  return physx::NpPhysics::addMaterial(this, (physx::NpMaterial *)v9);
}

uint64_t physx::NpPhysics::getNbMaterials(pthread_mutex_t **this)
{
  int v2;
  int v3;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    pthread_mutex_lock(this[20]);
    v2 = *((_DWORD *)this + 8);
    v3 = *((_DWORD *)this + 12);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(this[20]);
  }
  else
  {
    v2 = *((_DWORD *)this + 8);
    v3 = *((_DWORD *)this + 12);
  }
  return (v2 - v3);
}

uint64_t physx::NpPhysics::getMaterials(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 160));
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(unsigned int *)(a1 + 64);
LABEL_5:
  v12 = v10;
  if (v10 <= a4)
    v13 = a4;
  else
    v13 = v10;
  v10 = v13 + 1;
  while (v9 < v11)
  {
    v14 = v9;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
      if (v15)
        break;
      if (v11 == ++v14)
        goto LABEL_18;
    }
    v9 = (v14 + 1);
    if (v12++ == v13)
    {
      if (v8 == a3)
        goto LABEL_19;
      *(_QWORD *)(a2 + 8 * v8++) = v15;
      v9 = (v14 + 1);
      goto LABEL_5;
    }
  }
LABEL_18:
  a3 = v8;
LABEL_19:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 160));
  return a3;
}

uint64_t physx::NpPhysics::updateMaterial(uint64_t this, physx::NpMaterial *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  if (*(_DWORD *)(v3 + 16))
  {
    v4 = 0;
    do
      this = physx::Scb::Scene::updateMaterial(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4++) + 16, (uint64_t)a2 + 48);
    while (v4 < *(unsigned int *)(v3 + 16));
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * *((unsigned __int16 *)a2 + 36)) = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 160));
  return this;
}

physx::Gu::BV4TriangleMesh *physx::NpPhysics::createTriangleMesh(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  return physx::GuMeshFactory::createTriangleMesh((physx::GuMeshFactory *)physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbTriangleMeshes(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbTriangleMeshes((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getTriangleMeshes(physx::NpPhysics *this, physx::PxTriangleMesh **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getTriangleMeshes(physx::NpFactory::mInstance, a2, a3, a4);
}

uint64_t physx::NpPhysics::createHeightField(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  return physx::GuMeshFactory::createHeightField(physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbHeightFields(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbHeightFields((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getHeightFields(physx::NpPhysics *this, physx::PxHeightField **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getHeightFields(physx::NpFactory::mInstance, a2, a3, a4);
}

uint64_t physx::NpPhysics::createConvexMesh(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  return physx::GuMeshFactory::createConvexMesh(physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbConvexMeshes(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbConvexMeshes((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getConvexMeshes(physx::NpPhysics *this, physx::PxConvexMesh **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getConvexMeshes(physx::NpFactory::mInstance, a2, a3, a4);
}

uint64_t physx::NpPhysics::createBVHStructure(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  return physx::GuMeshFactory::createBVHStructure(physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbBVHStructures(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbBVHStructures((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getBVHStructures(physx::NpPhysics *this, physx::PxBVHStructure **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getBVHStructures(physx::NpFactory::mInstance, a2, a3, a4);
}

physx::Sq::PruningStructure *physx::NpPhysics::createPruningStructure(physx::NpPhysics *this, physx::PxRigidActor *const *a2, unsigned int a3)
{
  uint64_t v5;
  const char *v6;
  physx::Sq::PruningStructure *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::PruningStructure>::getName() [T = physx::Sq::P"
         "runingStructure]";
  else
    v6 = "<allocation names disabled>";
  v7 = (physx::Sq::PruningStructure *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, 88, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 565);
  *((_DWORD *)v7 + 2) = 196624;
  *(_QWORD *)v7 = off_24ED90A68;
  *((_DWORD *)v7 + 16) = 0;
  *((_QWORD *)v7 + 9) = 0;
  *((_BYTE *)v7 + 80) = 1;
  *(_QWORD *)((char *)v7 + 12) = 0;
  *(_OWORD *)((char *)v7 + 24) = 0u;
  *(_OWORD *)((char *)v7 + 40) = 0u;
  *((_QWORD *)v7 + 7) = 0;
  if ((physx::Sq::PruningStructure::build(v7, a2, a3, v8, v9, v10, v11, v12) & 1) == 0)
  {
    (*(void (**)(physx::Sq::PruningStructure *))(*(_QWORD *)v7 + 32))(v7);
    return 0;
  }
  return v7;
}

uint64_t physx::NpPhysics::registerDeletionListener(uint64_t result, uint64_t a2, _BYTE *a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int8x8_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v7 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
  if (!*(_DWORD *)(v7 + 140)
    || (v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22),
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8)),
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27),
        v11 = *(unsigned int *)(*(_QWORD *)(v7 + 112)
                              + 4 * ((*(_DWORD *)(v7 + 124) - 1) & ((v10 >> 31) ^ v10))),
        (_DWORD)v11 == -1))
  {
LABEL_8:
    v12 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPhysics::NpDelListenerEntry>::getName() [T = "
            "physx::NpPhysics::NpDelListenerEntry]";
    else
      v13 = "<allocation names disabled>";
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24) + 16))(v12 + 24, 64, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 602);
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_QWORD *)(v14 + 32) = 0;
    *(_DWORD *)(v14 + 40) = 1061158912;
    *(_QWORD *)(v14 + 44) = 0xFFFFFFFFLL;
    *(_DWORD *)(v14 + 52) = 0;
    result = (uint64_t)physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v14, 0x40u, (int8x8_t)0xFFFFFFFFLL);
    *(_BYTE *)(v14 + 56) = *a3;
    *(_BYTE *)(v14 + 57) = a4;
    v16 = *(_DWORD *)(v7 + 124);
    if (v16)
    {
      v17 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = (v16 - 1) & ((v19 >> 31) ^ v19);
      v21 = *(unsigned int *)(*(_QWORD *)(v7 + 112) + 4 * v20);
      if ((_DWORD)v21 != -1)
      {
        while (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 16 * v21) != a2)
        {
          v21 = *(unsigned int *)(*(_QWORD *)(v7 + 104) + 4 * v21);
          if ((_DWORD)v21 == -1)
            goto LABEL_17;
        }
        if (*(_QWORD *)v14)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v14);
        goto LABEL_25;
      }
    }
    else
    {
      v20 = 0;
    }
LABEL_17:
    if (*(_DWORD *)(v7 + 140) == *(_DWORD *)(v7 + 120))
    {
      if (v16)
        v22 = 2 * v16;
      else
        v22 = 16;
      if (v16 < v22)
      {
        result = (uint64_t)physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxDeletionListener * const,physx::NpPhysics::NpDelListenerEntry *>,physx::PxDeletionListener *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::internal::HashMapBase<physx::PxDeletionListener *,physx::NpPhysics::NpDelListenerEntry *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(v7 + 88, v22, v15);
        v16 = *(_DWORD *)(v7 + 124);
      }
      v23 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v20 = (v16 - 1) & ((v25 >> 31) ^ v25);
    }
    v26 = *(unsigned int *)(v7 + 132);
    *(_DWORD *)(v7 + 132) = v26 + 1;
    v27 = *(_QWORD *)(v7 + 112);
    v28 = *(_QWORD *)(v7 + 96);
    *(_DWORD *)(*(_QWORD *)(v7 + 104) + 4 * v26) = *(_DWORD *)(v27 + 4 * v20);
    *(_DWORD *)(v27 + 4 * v20) = v26;
    *(int32x2_t *)(v7 + 136) = vadd_s32(*(int32x2_t *)(v7 + 136), (int32x2_t)0x100000001);
    v29 = (_QWORD *)(v28 + 16 * v26);
    *v29 = a2;
    v29[1] = v14;
    *(_BYTE *)(v7 + 152) = 1;
    goto LABEL_25;
  }
  while (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 16 * v11) != a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)(v7 + 104) + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
LABEL_25:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 80));
  return result;
}

uint64_t physx::NpPhysics::unregisterDeletionListener(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
  if (*(_DWORD *)(v3 + 140))
  {
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = (*(_DWORD *)(v3 + 124) - 1) & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v3 + 112);
    v9 = (unsigned int *)(v8 + 4 * v7);
    v10 = *v9;
    if ((_DWORD)v10 != -1)
    {
      v11 = *(_QWORD *)(v3 + 96);
      v12 = *v9;
      while (*(_QWORD *)(v11 + 16 * v12) != a2)
      {
        v12 = *(_DWORD *)(*(_QWORD *)(v3 + 104) + 4 * v12);
        if (v12 == -1)
          goto LABEL_24;
      }
      v13 = *(_QWORD **)(v11 + 16 * v12 + 8);
      v14 = *(_QWORD *)(v3 + 104);
      if (*(_QWORD *)(v11 + 16 * v10) == a2)
      {
LABEL_14:
        *v9 = *(_DWORD *)(v14 + 4 * v10);
        v16 = *(_DWORD *)(v3 + 140) - 1;
        ++*(_DWORD *)(v3 + 136);
        *(_DWORD *)(v3 + 140) = v16;
        if ((_DWORD)v10 != v16)
        {
          v17 = *(_OWORD *)(v11 + 16 * v16);
          *(_OWORD *)(v11 + 16 * v10) = v17;
          *(_DWORD *)(v14 + 4 * v10) = *(_DWORD *)(v14 + 4 * v16);
          v18 = (~((_QWORD)v17 << 32) + v17) ^ ((~((_QWORD)v17 << 32) + (_QWORD)v17) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = (_DWORD *)(v8 + 4 * ((*(_DWORD *)(v3 + 124) - 1) & ((v20 >> 31) ^ v20)));
          v22 = *(unsigned int *)(v3 + 140);
          v23 = *v21;
          if (v23 != v22)
          {
            do
            {
              v24 = v23;
              v23 = *(unsigned int *)(v14 + 4 * v23);
            }
            while (v23 != v22);
            v21 = (_DWORD *)(v14 + 4 * v24);
          }
          *v21 = v10;
        }
        --*(_DWORD *)(v3 + 132);
      }
      else
      {
        while (1)
        {
          v15 = v10;
          v10 = *(unsigned int *)(v14 + 4 * v10);
          if ((_DWORD)v10 == -1)
            break;
          if (*(_QWORD *)(v11 + 16 * v10) == a2)
          {
            v9 = (unsigned int *)(v14 + 4 * v15);
            goto LABEL_14;
          }
        }
      }
      if (v13)
      {
        if (*v13)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
      }
    }
  }
LABEL_24:
  *(_BYTE *)(v3 + 152) = *(_DWORD *)(v3 + 140) != 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 80));
  return result;
}

pthread_mutex_t **physx::NpPhysics::registerDeletionListenerObjects(pthread_mutex_t **result, uint64_t a2, uint64_t a3, int a4, int8x8_t a5)
{
  pthread_mutex_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  pthread_mutex_t *v13;
  int32x2_t *v14;
  unsigned int v15;
  uint64_t i;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;

  v8 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = (pthread_mutex_t **)pthread_mutex_lock(result[10]);
  if (*((_DWORD *)v8 + 35))
  {
    v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = *((unsigned int *)&v8[14]->__sig
          + ((*((_DWORD *)v8 + 31) - 1) & ((v11 >> 31) ^ v11)));
    if ((_DWORD)v12 != -1)
    {
      v13 = v8[12];
      while (*(&v13->__sig + 2 * v12) != a2)
      {
        v12 = *((unsigned int *)&v8[13]->__sig + v12);
        if ((_DWORD)v12 == -1)
          goto LABEL_31;
      }
      v14 = *(int32x2_t **)&v13->__opaque[16 * v12];
      v15 = v14[6].i32[1] + a4;
      if (v14[4].i32[1] < v15)
        result = (pthread_mutex_t **)physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)v14, v15, a5);
      if (a4)
      {
        for (i = 0; i != a4; ++i)
        {
          v17 = v14[4].u32[1];
          if (v17)
          {
            v18 = *(_QWORD *)(a3 + 8 * i);
            v19 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
            v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
            v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
            v22 = (v17 - 1) & ((v21 >> 31) ^ v21);
            v23 = *(unsigned int *)(*(_QWORD *)&v14[3] + 4 * v22);
            if ((_DWORD)v23 != -1)
            {
              while (*(_QWORD *)(*(_QWORD *)&v14[1] + 8 * v23) != v18)
              {
                v23 = *(unsigned int *)(*(_QWORD *)&v14[2] + 4 * v23);
                if ((_DWORD)v23 == -1)
                  goto LABEL_20;
              }
              continue;
            }
          }
          else
          {
            v22 = 0;
          }
LABEL_20:
          v24 = v14[5].u32[1];
          if ((_DWORD)v24 == -1)
          {
            if (v17)
              v25 = 2 * v17;
            else
              v25 = 16;
            if (v17 >= v25)
            {
              v24 = 0xFFFFFFFFLL;
            }
            else
            {
              result = (pthread_mutex_t **)physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)v14, v25, a5);
              v17 = v14[4].u32[1];
              v24 = v14[5].u32[1];
            }
            v26 = *(_QWORD *)(a3 + 8 * i);
            v27 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
            v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
            v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
            v22 = (v17 - 1) & ((v29 >> 31) ^ v29);
          }
          else
          {
            v26 = *(_QWORD *)(a3 + 8 * i);
          }
          v31 = v14[1];
          v30 = v14[2];
          v14[5].i32[1] = *(_DWORD *)(*(_QWORD *)&v30 + 4 * v24);
          v32 = v14[3];
          *(_DWORD *)(*(_QWORD *)&v30 + 4 * v24) = *(_DWORD *)(*(_QWORD *)&v32 + 4 * v22);
          *(_DWORD *)(*(_QWORD *)&v32 + 4 * v22) = v24;
          a5 = (int8x8_t)vadd_s32(v14[6], (int32x2_t)0x100000001);
          v14[6] = (int32x2_t)a5;
          *(_QWORD *)(*(_QWORD *)&v31 + 8 * v24) = v26;
        }
      }
    }
  }
LABEL_31:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return (pthread_mutex_t **)pthread_mutex_unlock(v8[10]);
  return result;
}

uint64_t physx::NpPhysics::unregisterDeletionListenerObjects(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  uint64_t v23;

  v7 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
  if (*(_DWORD *)(v7 + 140))
  {
    v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = *(unsigned int *)(*(_QWORD *)(v7 + 112)
                          + 4 * ((*(_DWORD *)(v7 + 124) - 1) & ((v10 >> 31) ^ v10)));
    if ((_DWORD)v11 != -1)
    {
      v12 = *(_QWORD *)(v7 + 96);
      while (*(_QWORD *)(v12 + 16 * v11) != a2)
      {
        v11 = *(unsigned int *)(*(_QWORD *)(v7 + 104) + 4 * v11);
        if ((_DWORD)v11 == -1)
          goto LABEL_21;
      }
      if (a4)
      {
        v13 = *(int32x2_t **)(v12 + 16 * v11 + 8);
        if (v13[7].i8[1])
        {
          v14 = 0;
          do
          {
            if (v13[6].i32[1])
            {
              v15 = *(_QWORD *)(a3 + 8 * v14);
              v16 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
              v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
              v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
              v19 = (_DWORD *)(*(_QWORD *)&v13[3]
                             + 4 * ((v13[4].i32[1] - 1) & ((v18 >> 31) ^ v18)));
              v20 = *v19;
              if ((_DWORD)v20 != -1)
              {
                v22 = v13[1];
                v21 = v13[2];
                if (*(_QWORD *)(*(_QWORD *)&v22 + 8 * v20) == v15)
                {
LABEL_19:
                  *v19 = *(_DWORD *)(*(_QWORD *)&v21 + 4 * v20);
                  v13[6] = vadd_s32(v13[6], (int32x2_t)0xFFFFFFFF00000001);
                  *(_DWORD *)(*(_QWORD *)&v21 + 4 * v20) = v13[5].i32[1];
                  v13[5].i32[1] = v20;
                }
                else
                {
                  while (1)
                  {
                    v23 = v20;
                    v20 = *(unsigned int *)(*(_QWORD *)&v21 + 4 * v20);
                    if ((_DWORD)v20 == -1)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)&v22 + 8 * v20) == v15)
                    {
                      v19 = (_DWORD *)(*(_QWORD *)&v21 + 4 * v23);
                      goto LABEL_19;
                    }
                  }
                }
              }
            }
            ++v14;
          }
          while (v14 != a4);
        }
      }
    }
  }
LABEL_21:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 80));
  return result;
}

uint64_t physx::NpPhysics::notifyDeletionListeners(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(result + 152))
  {
    v7 = result;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
    v8 = *(unsigned int *)(v7 + 140);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v7 + 96);
      v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = (v13 >> 31) ^ v13;
      do
      {
        v15 = (_QWORD *)(v10 + 16 * v9);
        v16 = v15[1];
        if ((*(_BYTE *)(v16 + 56) & a4) != 0)
        {
          if (*(_BYTE *)(v16 + 57))
          {
            if (!*(_DWORD *)(v16 + 52))
              goto LABEL_15;
            v17 = *(unsigned int *)(*(_QWORD *)(v16 + 24) + 4 * ((*(_DWORD *)(v16 + 36) - 1) & v14));
            if ((_DWORD)v17 == -1)
              goto LABEL_15;
            while (*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v17) != a2)
            {
              v17 = *(unsigned int *)(*(_QWORD *)(v16 + 16) + 4 * v17);
              if ((_DWORD)v17 == -1)
                goto LABEL_15;
            }
          }
          result = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t))*v15)(*v15, a2, a3, a4);
        }
LABEL_15:
        ++v9;
      }
      while (v9 != v8);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 80));
  }
  return result;
}

uint64_t physx::NpPhysics::getTolerancesScale(physx::NpPhysics *this)
{
  return (uint64_t)this + 24;
}

uint64_t physx::NpPhysics::getFoundation(physx::NpPhysics *this)
{
  return physx::shdfnd::Foundation::mInstance;
}

const char *physx::PxMaterial::getConcreteTypeName(physx::PxMaterial *this)
{
  return "PxMaterial";
}

BOOL physx::PxMaterial::isKindOf(physx::PxMaterial *this, const char *a2)
{
  return !strcmp("PxMaterial", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpBatchQuery::getDesc(physx::NpBatchQuery *this)
{
  return (uint64_t)this + 64;
}

const char *physx::PxConstraint::getConcreteTypeName(physx::PxConstraint *this)
{
  return "PxConstraint";
}

BOOL physx::PxConstraint::isKindOf(physx::PxConstraint *this, const char *a2)
{
  return !strcmp("PxConstraint", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpConstraint::isSubordinate(physx::NpConstraint *this)
{
  return 1;
}

uint64_t physx::NpPhysics::getPhysicsInsertionCallback(physx::NpPhysics *this)
{
  return (uint64_t)this + 72;
}

uint64_t physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(result, a2);
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t physx::NpPtrTableStorageManager::allocate(pthread_mutex_t **this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v28;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[1]);
  if (a2 <= 0x20)
  {
    v4 = (uint64_t)this[72];
    if (!v4)
    {
      v5 = *((unsigned int *)this + 142);
      if ((_DWORD)v5)
      {
        v6 = physx::shdfnd::Foundation::mInstance;
        v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
           ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::getNam"
             "e() [T = physx::NpPtrTableStorageManager::PtrBlock<4>]"
           : "<allocation names disabled>";
        v8 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      }
      else
      {
        v8 = 0;
      }
      v28 = v8;
      v17 = *((unsigned int *)this + 138);
      if ((*((_DWORD *)this + 139) & 0x7FFFFFFFu) <= v17)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>>::growAndPushBack((uint64_t)(this + 3), &v28);
      }
      else
      {
        *(&this[68]->__sig + v17) = v8;
        *((_DWORD *)this + 138) = v17 + 1;
      }
      v18 = v8 + 32 * *((unsigned int *)this + 140) - 32;
      v4 = (uint64_t)this[72];
      if (v18 >= v8)
      {
        v19 = (uint64_t *)(v8 + 32 * *((unsigned int *)this + 140) - 32);
        do
        {
          *v19 = v4;
          v19 -= 4;
          v4 = v18;
          v18 = (unint64_t)v19;
        }
        while ((unint64_t)v19 >= v8);
        v4 = (uint64_t)(v19 + 4);
      }
    }
    this[72] = *(pthread_mutex_t **)v4;
    ++*((_DWORD *)this + 141);
    v20 = 0uLL;
LABEL_52:
    *(_OWORD *)v4 = v20;
    *(_OWORD *)(v4 + 16) = v20;
    goto LABEL_53;
  }
  if (a2 <= 0x80)
  {
    v4 = (uint64_t)this[143];
    if (!v4)
    {
      v9 = *((unsigned int *)this + 284);
      if ((_DWORD)v9)
      {
        v10 = physx::shdfnd::Foundation::mInstance;
        v11 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
            ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::getN"
              "ame() [T = physx::NpPtrTableStorageManager::PtrBlock<16>]"
            : "<allocation names disabled>";
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, v9, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      }
      else
      {
        v12 = 0;
      }
      v28 = v12;
      v21 = *((unsigned int *)this + 280);
      if ((*((_DWORD *)this + 281) & 0x7FFFFFFFu) <= v21)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>>::growAndPushBack((uint64_t)(this + 74), &v28);
      }
      else
      {
        *(&this[139]->__sig + v21) = v12;
        *((_DWORD *)this + 280) = v21 + 1;
      }
      v22 = v12 + ((unint64_t)*((unsigned int *)this + 282) << 7) - 128;
      v4 = (uint64_t)this[143];
      if (v22 >= v12)
      {
        v23 = (uint64_t *)(v12 + ((unint64_t)*((unsigned int *)this + 282) << 7) - 128);
        do
        {
          *v23 = v4;
          v23 -= 16;
          v4 = v22;
          v22 = (unint64_t)v23;
        }
        while ((unint64_t)v23 >= v12);
        v4 = (uint64_t)(v23 + 16);
      }
    }
    this[143] = *(pthread_mutex_t **)v4;
    ++*((_DWORD *)this + 283);
    v20 = 0uLL;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    goto LABEL_52;
  }
  if (a2 <= 0x200)
  {
    v4 = (uint64_t)this[214];
    if (!v4)
    {
      v13 = *((unsigned int *)this + 426);
      if ((_DWORD)v13)
      {
        v14 = physx::shdfnd::Foundation::mInstance;
        v15 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
            ? "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::getN"
              "ame() [T = physx::NpPtrTableStorageManager::PtrBlock<64>]"
            : "<allocation names disabled>";
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24, v13, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      }
      else
      {
        v16 = 0;
      }
      v28 = v16;
      v24 = *((unsigned int *)this + 422);
      if ((*((_DWORD *)this + 423) & 0x7FFFFFFFu) <= v24)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>>::growAndPushBack((uint64_t)(this + 145), &v28);
      }
      else
      {
        *(&this[210]->__sig + v24) = v16;
        *((_DWORD *)this + 422) = v24 + 1;
      }
      v25 = (uint64_t *)(v16 + ((unint64_t)*((unsigned int *)this + 424) << 9) - 512);
      v4 = (uint64_t)this[214];
      if ((unint64_t)v25 >= v16)
      {
        do
        {
          *v25 = v4;
          v26 = v25 - 64;
          v4 = (uint64_t)v25;
          v25 = v26;
        }
        while ((unint64_t)v26 >= v16);
        v4 = (uint64_t)(v26 + 64);
      }
    }
    this[214] = *(pthread_mutex_t **)v4;
    ++*((_DWORD *)this + 425);
    v20 = 0uLL;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
    *(_OWORD *)(v4 + 464) = 0u;
    *(_OWORD *)(v4 + 480) = 0u;
    *(_OWORD *)(v4 + 496) = 0u;
    goto LABEL_52;
  }
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPtrTableStorageManager.h", 60);
LABEL_53:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[1]);
  return v4;
}

uint64_t physx::NpPtrTableStorageManager::deallocate(uint64_t this, void **a2, unsigned int a3)
{
  uint64_t v5;

  v5 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
  if (a3 > 0x20)
  {
    if (a3 > 0x80)
    {
      if (a3 > 0x200)
      {
        if (a2)
          this = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, a2);
      }
      else if (a2)
      {
        --*(_DWORD *)(v5 + 1700);
        *a2 = *(void **)(v5 + 1712);
        *(_QWORD *)(v5 + 1712) = a2;
      }
    }
    else if (a2)
    {
      --*(_DWORD *)(v5 + 1132);
      *a2 = *(void **)(v5 + 1144);
      *(_QWORD *)(v5 + 1144) = a2;
    }
  }
  else if (a2)
  {
    --*(_DWORD *)(v5 + 564);
    *a2 = *(void **)(v5 + 576);
    *(_QWORD *)(v5 + 576) = a2;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
  return this;
}

BOOL physx::NpPtrTableStorageManager::canReuse(physx::NpPtrTableStorageManager *this, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;

  if (a2 < 0x41)
    v3 = 2;
  else
    v3 = 3;
  if (a2 >= 0x11)
    v4 = v3;
  else
    v4 = 1;
  if (a2 < 5)
    v4 = 0;
  if (a3 < 0x41)
    v5 = 2;
  else
    v5 = 3;
  if (a3 < 0x11)
    v5 = 1;
  if (a3 < 5)
    v5 = 0;
  return a3 < 0x41 && v4 == v5;
}

void physx::NpPtrTableStorageManager::~NpPtrTableStorageManager(physx::NpPtrTableStorageManager *this)
{
  uint64_t v2;

  physx::NpPtrTableStorageManager::~NpPtrTableStorageManager(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpPtrTableStorageManager *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                   + 24)
                                                                       + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

{
  uint64_t v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  physx::NpPtrTableStorageManager *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  physx::NpPtrTableStorageManager *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  physx::NpPtrTableStorageManager *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  *(_QWORD *)this = &off_24ED94C70;
  if (*((_DWORD *)this + 425))
  {
    v30 = 0;
    v31 = 0;
    v2 = *((_QWORD *)this + 214);
    if (v2)
    {
      do
      {
        v29 = v2;
        v3 = v31;
        if ((HIDWORD(v31) & 0x7FFFFFFFu) <= v31)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::growAndPushBack((uint64_t)&v30, &v29);
        }
        else
        {
          *(_QWORD *)&v30[8 * v31] = v2;
          LODWORD(v31) = v3 + 1;
        }
        v2 = **((_QWORD **)this + 214);
        *((_QWORD *)this + 214) = v2;
      }
      while (v2);
      v4 = v30;
      v5 = v31;
      v6 = HIDWORD(v31);
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v4 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>(v4, v5);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>(*((char **)this + 210), *((_DWORD *)this + 422));
    if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && v4)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  v7 = (physx::NpPtrTableStorageManager *)*((_QWORD *)this + 210);
  v8 = *((unsigned int *)this + 422);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    do
    {
      if (*(_QWORD *)v7)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v7 = (physx::NpPtrTableStorageManager *)((char *)v7 + 8);
      v9 -= 8;
    }
    while (v9);
    v7 = (physx::NpPtrTableStorageManager *)*((_QWORD *)this + 210);
  }
  v10 = *((_DWORD *)this + 423);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0)
  {
    if (v7 == (physx::NpPtrTableStorageManager *)((char *)this + 1160))
    {
      *((_BYTE *)this + 1672) = 0;
    }
    else if (v7)
    {
      (*(void (**)(uint64_t, physx::NpPtrTableStorageManager *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                     + 24)
                                                                         + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
    }
  }
  if (*((_DWORD *)this + 283))
  {
    v30 = 0;
    v31 = 0;
    v11 = *((_QWORD *)this + 143);
    if (v11)
    {
      do
      {
        v29 = v11;
        v12 = v31;
        if ((HIDWORD(v31) & 0x7FFFFFFFu) <= v31)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::growAndPushBack((uint64_t)&v30, &v29);
        }
        else
        {
          *(_QWORD *)&v30[8 * v31] = v11;
          LODWORD(v31) = v12 + 1;
        }
        v11 = **((_QWORD **)this + 143);
        *((_QWORD *)this + 143) = v11;
      }
      while (v11);
      v13 = v30;
      v14 = v31;
      v15 = HIDWORD(v31);
    }
    else
    {
      v15 = 0;
      v14 = 0;
      v13 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>(v13, v14);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>(*((char **)this + 139), *((_DWORD *)this + 280));
    if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && v13)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
  }
  v16 = (physx::NpPtrTableStorageManager *)*((_QWORD *)this + 139);
  v17 = *((unsigned int *)this + 280);
  if ((_DWORD)v17)
  {
    v18 = 8 * v17;
    do
    {
      if (*(_QWORD *)v16)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v16 = (physx::NpPtrTableStorageManager *)((char *)v16 + 8);
      v18 -= 8;
    }
    while (v18);
    v16 = (physx::NpPtrTableStorageManager *)*((_QWORD *)this + 139);
  }
  v19 = *((_DWORD *)this + 281);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0)
  {
    if (v16 == (physx::NpPtrTableStorageManager *)((char *)this + 592))
    {
      *((_BYTE *)this + 1104) = 0;
    }
    else if (v16)
    {
      (*(void (**)(uint64_t, physx::NpPtrTableStorageManager *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                     + 24)
                                                                         + 24))(physx::shdfnd::Foundation::mInstance + 24, v16);
    }
  }
  if (*((_DWORD *)this + 141))
  {
    v30 = 0;
    v31 = 0;
    v20 = *((_QWORD *)this + 72);
    if (v20)
    {
      do
      {
        v29 = v20;
        v21 = v31;
        if ((HIDWORD(v31) & 0x7FFFFFFFu) <= v31)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::growAndPushBack((uint64_t)&v30, &v29);
        }
        else
        {
          *(_QWORD *)&v30[8 * v31] = v20;
          LODWORD(v31) = v21 + 1;
        }
        v20 = **((_QWORD **)this + 72);
        *((_QWORD *)this + 72) = v20;
      }
      while (v20);
      v22 = v30;
      v23 = v31;
      v24 = HIDWORD(v31);
    }
    else
    {
      v24 = 0;
      v23 = 0;
      v22 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>(v22, v23);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>(*((char **)this + 68), *((_DWORD *)this + 138));
    if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v22);
  }
  v25 = (physx::NpPtrTableStorageManager *)*((_QWORD *)this + 68);
  v26 = *((unsigned int *)this + 138);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    do
    {
      if (*(_QWORD *)v25)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v25 = (physx::NpPtrTableStorageManager *)((char *)v25 + 8);
      v27 -= 8;
    }
    while (v27);
    v25 = (physx::NpPtrTableStorageManager *)*((_QWORD *)this + 68);
  }
  v28 = *((_DWORD *)this + 139);
  if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0)
  {
    if (v25 == (physx::NpPtrTableStorageManager *)((char *)this + 24))
    {
      *((_BYTE *)this + 536) = 0;
    }
    else if (v25)
    {
      (*(void (**)(uint64_t, physx::NpPtrTableStorageManager *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                     + 24)
                                                                         + 24))(physx::shdfnd::Foundation::mInstance + 24, v25);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 1);
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::getName() "
         "[T = physx::NpPtrTableStorageManager::PtrBlock<4>]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::getName()"
         " [T = physx::NpPtrTableStorageManager::PtrBlock<16>]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::getName()"
         " [T = physx::NpPtrTableStorageManager::PtrBlock<64>]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::getName"
           "() [T = physx::NpPtrTableStorageManager::PtrBlock<64>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::getName"
           "() [T = physx::NpPtrTableStorageManager::PtrBlock<64>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::getName"
           "() [T = physx::NpPtrTableStorageManager::PtrBlock<16>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::getName"
           "() [T = physx::NpPtrTableStorageManager::PtrBlock<16>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::getName("
           ") [T = physx::NpPtrTableStorageManager::PtrBlock<4>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::getName("
           ") [T = physx::NpPtrTableStorageManager::PtrBlock<4>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::getName()"
           " [T = physx::NpArticulationJointReducedCoordinate]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::getName()"
           " [T = physx::NpArticulationJointReducedCoordinate]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::getName() [T = physx::NpAr"
           "ticulationJoint]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::getName() [T = physx::NpAr"
           "ticulationJoint]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::getName() [T = physx::NpArticulationLink]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::getName() [T = physx::NpArticulationLink]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::getName() [T ="
           " physx::NpArticulationReducedCoordinate]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::getName() [T ="
           " physx::NpArticulationReducedCoordinate]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::getName() [T = physx::NpArticulation]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::getName() [T = physx::NpArticulation]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::getName() [T = physx::NpMaterial]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::getName() [T = physx::NpMaterial]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::getName() [T = physx::NpConstraint]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::getName() [T = physx::NpConstraint]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::getName() [T = physx::NpAggregate]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::getName() [T = physx::NpAggregate]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpShape>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpShape>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpShape>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpShape>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpShape>::getName() [T = physx::NpShape]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpShape>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpShape>::getName() [T = physx::NpShape]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::getName() [T = physx::NpRigidStatic]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::getName() [T = physx::NpRigidStatic]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::getName() [T = physx::NpRigidDynamic]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::getName() [T = physx::NpRigidDynamic]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::getName() [T = physx::NpConnectorArray]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::getName() [T = physx::NpConnectorArray]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

physx::Gu::ConvexMesh *physx::NpPhysicsInsertionCallback::buildObjectFromData(int a1, int a2, physx::Gu::TriangleMeshData *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if ((a2 - 3) <= 1)
    return physx::GuMeshFactory::createTriangleMesh((physx::GuMeshFactory *)physx::NpFactory::mInstance, a3);
  switch(a2)
  {
    case 1:
      return physx::GuMeshFactory::createHeightField((physx::GuMeshFactory *)physx::NpFactory::mInstance, (uint64_t)a3);
    case 17:
      return (physx::Gu::ConvexMesh *)physx::GuMeshFactory::createBVHStructure(physx::NpFactory::mInstance, (uint64_t)a3);
    case 2:
      return physx::GuMeshFactory::createConvexMesh(physx::NpFactory::mInstance, (uint64_t)a3);
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysicsInsertionCallback.h", 62, "Inserting object failed: Object type not supported for buildObjectFromData.", a6, a7, a8, vars0);
  return 0;
}

void physx::NpPhysicsInsertionCallback::~NpPhysicsInsertionCallback(physx::NpPhysicsInsertionCallback *this)
{
  JUMPOUT(0x2276933B8);
}

void physx::NpPhysics::MeshDeletionListener::~MeshDeletionListener(physx::NpPhysics::MeshDeletionListener *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::NpPhysics::MeshDeletionListener::onGuMeshFactoryBufferRelease(physx::NpPhysics::MeshDeletionListener *this, const physx::PxBase *a2)
{
  return physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)a2, 0, 2);
}

void physx::NpMaterialManager::resize(physx::NpMaterialManager *this)
{
  uint64_t v2;
  int v3;
  char *v4;
  size_t v5;
  uint64_t v6;

  v2 = *((unsigned int *)this + 8);
  v3 = 2 * v2;
  if ((2 * v2) >= 0xFFFF)
    v3 = 0xFFFF;
  *((_DWORD *)this + 8) = v3;
  if (v3)
  {
    v4 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, (8 * v3), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpMaterialManager.h", 126);
    v5 = (8 * *((_DWORD *)this + 8));
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  bzero(v4, v5);
  if ((_DWORD)v2)
  {
    v6 = 0;
    do
    {
      *(_QWORD *)&v4[v6] = *(_QWORD *)(*((_QWORD *)this + 3) + v6);
      v6 += 8;
    }
    while (8 * v2 != v6);
  }
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 3) = v4;
}

void *physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *result;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 44);
  v9 = *(unsigned int *)(a1 + 32);
  v10 = (float)(*(float *)(a1 + 40) * (float)v3);
  v11 = 4 * v3;
  v12 = ((-4 * (v3 + v10)) & 0xC) + 4 * (v3 + v10);
  if ((_DWORD)v12 + 8 * v10)
    v13 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v12 + 8 * v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v13 = 0;
  v14 = &v13[v11];
  v15 = &v13[v12];
  result = memset(v13, 255, 4 * v3);
  if (v8 == -1)
  {
    if (*(_DWORD *)(a1 + 52))
    {
      v24 = 0;
      do
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v24);
        v26 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        LODWORD(v28) = (v3 - 1) & ((v28 >> 31) ^ v28);
        *(_DWORD *)&v14[4 * v24] = *(_DWORD *)&v13[4 * v28];
        *(_DWORD *)&v13[4 * v28] = v24;
        *(_QWORD *)&v15[8 * v24++] = v25;
      }
      while (v24 < *(unsigned int *)(a1 + 52));
    }
  }
  else
  {
    result = memcpy(&v13[v11], *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 32)));
    v17 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v17)
    {
      for (i = 0; i < v17; ++i)
      {
        v19 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * i);
        if ((_DWORD)v19 != -1)
        {
          do
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
            v21 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
            v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
            LODWORD(v23) = (v3 - 1) & ((v23 >> 31) ^ v23);
            *(_DWORD *)&v14[4 * v19] = *(_DWORD *)&v13[4 * v23];
            *(_DWORD *)&v13[4 * v23] = v19;
            *(_QWORD *)&v15[8 * v19] = v20;
            v19 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v19);
          }
          while ((_DWORD)v19 != -1);
          v17 = *(unsigned int *)(a1 + 36);
        }
      }
    }
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v15;
  v29 = v10 - 1;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v3;
  if (v29 > v9)
  {
    v30 = v9;
    do
    {
      *(_DWORD *)&v14[4 * v30] = v30 + 1;
      ++v30;
    }
    while (v29 != v30);
  }
  *(_DWORD *)&v14[4 * v29] = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v9;
  return result;
}

uint64_t *physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT(uint64_t *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>::getName() [T = physx::shdfnd::SyncImpl]";
  else
    v3 = "<allocation names disabled>";
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 120, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSync.h", 95);
  *a1 = v4;
  pthread_mutex_init((pthread_mutex_t *)v4, 0);
  pthread_cond_init((pthread_cond_t *)(v4 + 64), 0);
  *(_BYTE *)(v4 + 116) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  return a1;
}

pthread_mutex_t **physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT(pthread_mutex_t **a1)
{
  pthread_mutex_t *v2;

  v2 = *a1;
  pthread_cond_destroy((pthread_cond_t *)&(*a1)[1]);
  pthread_mutex_destroy(v2);
  if (*a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return a1;
}

BOOL PxOverflowBuffer<physx::PxRaycastHit>::processTouches(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 176);
  if (!*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 92);
    *(_BYTE *)(a1 + 176) = 1;
    *(_QWORD *)(a1 + 80) = a1 + 104;
    *(_DWORD *)(a1 + 88) = 1;
  }
  return v1 == 0;
}

uint64_t PxOverflowBuffer<physx::PxRaycastHit>::finalizeQuery(uint64_t result)
{
  if (*(_BYTE *)(result + 176))
  {
    *(_BYTE *)(result + 96) = *(_DWORD *)(result + 92) != 0;
    *(_DWORD *)(result + 92) = *(_DWORD *)(result + 100);
    *(_QWORD *)(result + 80) = *(_QWORD *)(result + 168);
  }
  return result;
}

void PxOverflowBuffer<physx::PxRaycastHit>::~PxOverflowBuffer()
{
  JUMPOUT(0x2276933B8);
}

BOOL PxOverflowBuffer<physx::PxOverlapHit>::processTouches(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 96);
  if (!*(_BYTE *)(a1 + 96))
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 52);
    *(_BYTE *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 40) = a1 + 64;
    *(_DWORD *)(a1 + 48) = 1;
  }
  return v1 == 0;
}

uint64_t PxOverflowBuffer<physx::PxOverlapHit>::finalizeQuery(uint64_t result)
{
  if (*(_BYTE *)(result + 96))
  {
    *(_BYTE *)(result + 56) = *(_DWORD *)(result + 52) != 0;
    *(_DWORD *)(result + 52) = *(_DWORD *)(result + 60);
    *(_QWORD *)(result + 40) = *(_QWORD *)(result + 88);
  }
  return result;
}

void PxOverflowBuffer<physx::PxOverlapHit>::~PxOverflowBuffer()
{
  JUMPOUT(0x2276933B8);
}

BOOL PxOverflowBuffer<physx::PxSweepHit>::processTouches(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 160);
  if (!*(_BYTE *)(a1 + 160))
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 84);
    *(_BYTE *)(a1 + 160) = 1;
    *(_QWORD *)(a1 + 72) = a1 + 96;
    *(_DWORD *)(a1 + 80) = 1;
  }
  return v1 == 0;
}

uint64_t PxOverflowBuffer<physx::PxSweepHit>::finalizeQuery(uint64_t result)
{
  if (*(_BYTE *)(result + 160))
  {
    *(_BYTE *)(result + 88) = *(_DWORD *)(result + 84) != 0;
    *(_DWORD *)(result + 84) = *(_DWORD *)(result + 92);
    *(_QWORD *)(result + 72) = *(_QWORD *)(result + 152);
  }
  return result;
}

void PxOverflowBuffer<physx::PxSweepHit>::~PxOverflowBuffer()
{
  JUMPOUT(0x2276933B8);
}

void *physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15);
      v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(_QWORD *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>::getName() [T = physx::PxAggregate *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>::getName() [T = physx::PxAggregate *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>::getName() [T = physx::PxConstraint *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>::getName() [T = physx::PxConstraint *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>::getName() [T = physx::PxA"
           "rticulationBase *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>::getName() [T = physx::PxA"
           "rticulationBase *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    v13 = a1[5].u32[1];
    if (v13 == -1)
    {
      if (v6)
        v14 = 2 * v6;
      else
        v14 = 16;
      if (v6 >= v14)
      {
        v13 = -1;
      }
      else
      {
        physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)a1, v14, a4);
        v6 = a1[4].u32[1];
        v13 = a1[5].u32[1];
      }
      v16 = ~(*a2 << 32) + *a2;
      v17 = 9
          * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v10 = (v6 - 1) & ((v18 >> 31) ^ v18);
    }
    v20 = a1[1];
    v19 = a1[2];
    a1[5].i32[1] = *(_DWORD *)(*(_QWORD *)&v19 + 4 * v13);
    v21 = a1[3];
    *(_DWORD *)(*(_QWORD *)&v19 + 4 * v13) = *(_DWORD *)(*(_QWORD *)&v21 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v21 + 4 * v10) = v13;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v20 + 8 * v13;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 8 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::getName() [T = physx::NpArticulation]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::getName() [T = p"
         "hysx::NpArticulationReducedCoordinate]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::getName() [T = physx::NpArticulationLink]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::NpArticulationJoint,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::getName() [T = physx::NpAr"
           "ticulationJoint]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = (_QWORD *)(v5 + 440 * *(unsigned int *)(v1 + 544) - 440);
  if ((unint64_t)v7 >= v5)
  {
    v8 = *(_QWORD **)(v1 + 560);
    do
    {
      *v7 = v8;
      v9 = v7 - 55;
      v8 = v7;
      v7 = v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 55;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::getName() [T = physx::NpArticulationJoint]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::NpArticulationJointReducedCoordinate,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::getName()"
           " [T = physx::NpArticulationJointReducedCoordinate]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = (_QWORD *)(v5 + 440 * *(unsigned int *)(v1 + 544) - 440);
  if ((unint64_t)v7 >= v5)
  {
    v8 = *(_QWORD **)(v1 + 560);
    do
    {
      *v7 = v8;
      v9 = v7 - 55;
      v8 = v7;
      v7 = v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 55;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::getName() ["
         "T = physx::NpArticulationJointReducedCoordinate]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::getName() [T = physx::NpConstraint]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::getName() [T = physx::NpAggregate]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::getName() [T = physx::NpMaterial]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::NpConnectorArray,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::getName() [T = physx::NpConnectorArray]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 88 * *(unsigned int *)(v1 + 544) - 88;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 88 * *(unsigned int *)(v1 + 544) - 88);
    do
    {
      *v9 = v8;
      v9 -= 11;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 11;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::getName() [T = physx::NpConnectorArray]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 *v10;
  _WORD *v11;
  __int16 v12;

  v3 = result;
  if (a2 > 4 || *(_BYTE *)(result + 8))
  {
    if (a2)
    {
      v5 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v6 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
      else
        v6 = "<allocation names disabled>";
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                               + 16))(v5 + 24, 2 * a2, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      v4 = (_WORD *)result;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    *(_BYTE *)(result + 8) = 1;
    v4 = (_WORD *)result;
  }
  v7 = *(unsigned int *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 16);
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v4[v7];
    v10 = *(__int16 **)(v3 + 16);
    v11 = v4;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 28) & 0x80000000) == 0)
  {
    if (v8 == v3)
    {
      *(_BYTE *)(v3 + 8) = 0;
    }
    else if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 28) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpShape>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpShape>::getName() [T = physx::NpShape]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::getName() [T = physx::NpRigidStatic]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::getName() [T = physx::NpRigidDynamic]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxDeletionListener * const,physx::NpPhysics::NpDelListenerEntry *>,physx::PxDeletionListener *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::internal::HashMapBase<physx::PxDeletionListener *,physx::NpPhysics::NpDelListenerEntry *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 16 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 8);
    do
    {
      v17 = *(_OWORD *)(v16 + 16 * v15);
      *(_OWORD *)&v13[16 * v15] = v17;
      v18 = (~((_QWORD)v17 << 32) + v17) ^ ((~((_QWORD)v17 << 32) + (_QWORD)v17) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      LODWORD(v20) = (v3 - 1) & ((v20 >> 31) ^ v20);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v20];
      *(_DWORD *)&v11[4 * v20] = v15++;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::Array<physx::NpScene *,physx::shdfnd::ReflectionAllocator<physx::NpScene *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpScene *>::getName() [T = physx::NpScene *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::NpRigidBodyTemplate(uint64_t a1, __int16 a2, __int16 *a3, int a4, uint64_t a5)
{
  __int16 v6;
  uint64_t v7;
  __int128 v8;

  v6 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0x10000;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24ED95E40;
  *(_QWORD *)(a1 + 96) = 0;
  v7 = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  physx::Sc::BodyCore::BodyCore(a1 + 128, a4, a5);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a1 + 104) & 0xF0FFFFFF | 0x3000000;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 160);
  *(_QWORD *)&v8 = *(_QWORD *)(a1 + 164);
  *((_QWORD *)&v8 + 1) = *(_QWORD *)(a1 + 208);
  *(_OWORD *)(v7 + 244) = v8;
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 224);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a1 + 284);
  *(_QWORD *)(a1 + 376) = 1;
  return a1;
}

void physx::NpRigidDynamic::~NpRigidDynamic(physx::PxActor *this)
{
  *(_QWORD *)this = off_24ED95E40;
  physx::NpRigidActorTemplate<physx::PxRigidDynamic>::~NpRigidActorTemplate(this);
}

void physx::NpRigidDynamic::~NpRigidDynamic(physx::NpRigidDynamic *this)
{
  *(_QWORD *)this = off_24ED95E40;
  physx::NpRigidActorTemplate<physx::PxRigidDynamic>::~NpRigidActorTemplate(this);
  (*(void (**)(uint64_t, physx::NpRigidDynamic *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpRigidDynamic::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned __int16 *)(result + 48);
  if (*(_WORD *)(result + 48))
  {
    v4 = result;
    v5 = 0;
    v6 = (_QWORD *)(result + 40);
    v7 = 8 * v2 - 8;
    while (1)
    {
      v8 = v6;
      if ((_DWORD)v2 != 1)
        v8 = (_QWORD *)*v6;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v8[v5 / 8]);
      if (v7 == v5)
        break;
      LODWORD(v2) = *(unsigned __int16 *)(v4 + 48);
      v5 += 8;
    }
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned __int16 *)(result + 48);
  if (*(_WORD *)(result + 48))
  {
    v4 = result;
    v5 = 0;
    v6 = (_QWORD *)(result + 40);
    v7 = 8 * v2 - 8;
    while (1)
    {
      v8 = v6;
      if ((_DWORD)v2 != 1)
        v8 = (_QWORD *)*v6;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v8[v5 / 8]);
      if (v7 == v5)
        break;
      LODWORD(v2) = *(unsigned __int16 *)(v4 + 48);
      v5 += 8;
    }
  }
  return result;
}

uint64_t physx::NpRigidDynamic::release(physx::NpRigidDynamic *this)
{
  physx::Scb::Body *v2;
  int8x8_t v3;
  unint64_t v4;
  int32x2_t *v5;
  char v6;
  int8x8_t v7;
  __n128 v8;
  unsigned int v10;

  v2 = (physx::NpRigidDynamic *)((char *)this + 96);
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, *((_QWORD *)this + 2), 1);
  v4 = *((unsigned int *)this + 26);
  if ((v4 >> 30) - 1 > 1)
    v5 = 0;
  else
    v5 = *(int32x2_t **)v2;
  v6 = *((_BYTE *)v2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12);
  if (v5 && (*((_BYTE *)v2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12) & 8) != 0)
  {
    physx::NpShapeManager::clearShapesOnRelease((uint64_t)this + 40, (uint64_t)v5);
    physx::NpRigidActorTemplate<physx::PxRigidDynamic>::release(this, v7);
LABEL_8:
    physx::Scb::Scene::removeActor(v5, v2, 1, (v6 & 8) != 0, v8);
    v10 = *((_DWORD *)this + 22);
    physx::NpScene::removeFromRigidActorList((uint64_t)&v5[-2], &v10);
    return physx::Scb::Base::destroy((uint64_t)v2);
  }
  physx::NpRigidActorTemplate<physx::PxRigidDynamic>::release(this, v3);
  if (v5)
    goto LABEL_8;
  return physx::Scb::Base::destroy((uint64_t)v2);
}

_QWORD *physx::NpRigidDynamic::setGlobalPose(uint64_t a1, float *a2, int a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  _QWORD *v36;
  _QWORD *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char v45;
  _DWORD v46[7];

  v6 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v6 + 8) >> 30) - 1) > 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(_QWORD *)v6;
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
  }
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  v12 = sqrtf((float)((float)((float)(v9 * v9) + (float)(*a2 * *a2)) + (float)(v10 * v10)) + (float)(v11 * v11));
  v13 = *a2 / v12;
  v14 = v9 / v12;
  v15 = v10 / v12;
  v16 = v11 / v12;
  v17 = a1 + 96;
  v18 = *(_DWORD *)(a1 + 380);
  if ((v18 & 0x400) != 0)
    v19 = (float *)(*(_QWORD *)(a1 + 112) + 224);
  else
    v19 = (float *)(a1 + 176);
  v20 = v19[4] + v19[4];
  v21 = v19[5] + v19[5];
  v22 = v19[6] + v19[6];
  v23 = (float)(v16 * v16) + -0.5;
  v24 = (float)((float)(v14 * v21) + (float)(v13 * v20)) + (float)(v15 * v22);
  v25 = a2[4]
      + (float)((float)((float)(v16 * (float)((float)(v14 * v22) - (float)(v15 * v21))) + (float)(v20 * v23))
              + (float)(v13 * v24));
  v26 = a2[5]
      + (float)((float)((float)(v16 * (float)((float)(v15 * v20) - (float)(v13 * v22))) + (float)(v21 * v23))
              + (float)(v14 * v24));
  v27 = a2[6]
      + (float)((float)((float)(v16 * (float)((float)(v13 * v21) - (float)(v14 * v20))) + (float)(v22 * v23))
              + (float)(v15 * v24));
  v29 = v19[2];
  v28 = v19[3];
  v30 = v19[1];
  v31 = (float)((float)((float)(v13 * v28) + (float)(v16 * *v19)) + (float)(v14 * v29)) - (float)(v30 * v15);
  v32 = (float)((float)((float)(v14 * v28) + (float)(v16 * v30)) + (float)(v15 * *v19)) - (float)(v29 * v13);
  v33 = (float)((float)((float)(v15 * v28) + (float)(v16 * v29)) + (float)(v13 * v30)) - (float)(*v19 * v14);
  v34 = (float)((float)(v16 * v28) - (float)(v13 * *v19)) - (float)(v14 * v30);
  *(float *)v46 = v31;
  *(float *)&v46[1] = v32;
  *(float *)&a4 = v34 - (float)(v15 * v29);
  *(float *)&v46[2] = v33;
  v46[3] = LODWORD(a4);
  *(float *)&v46[4] = v25;
  *(float *)&v46[5] = v26;
  *(float *)&v46[6] = v27;
  *(float *)(a1 + 320) = v31;
  *(float *)(a1 + 324) = v32;
  *(float *)(a1 + 328) = v33;
  *(_DWORD *)(a1 + 332) = LODWORD(a4);
  *(float *)(a1 + 336) = v25;
  *(float *)(a1 + 340) = v26;
  *(float *)(a1 + 344) = v27;
  v35 = *(_DWORD *)(a1 + 104) >> 30;
  if (v35 == 2)
  {
    v36 = *(_QWORD **)v17;
    if (*(_BYTE *)(*(_QWORD *)v17 + 7689))
    {
LABEL_13:
      *(_DWORD *)(a1 + 380) = v18 & 0xFFDFFFFF;
      result = physx::Scb::Scene::scheduleForUpdate(v36, (physx::Scb::Base *)(a1 + 96), *(int8x8_t *)&a4);
      *(_DWORD *)(a1 + 380) |= 0x100000u;
      if (!v8)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else if (v35 == 3)
  {
    v36 = *(_QWORD **)v17;
    goto LABEL_13;
  }
  result = (_QWORD *)physx::Sc::BodyCore::setBody2World(a1 + 128, (uint64_t)v46);
  if (v8)
  {
LABEL_14:
    result = (_QWORD *)physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v8 + 8640, (_WORD *)a1);
    ++*(_DWORD *)(v8 + 8732);
  }
LABEL_15:
  if (*(_QWORD *)(a1 + 80))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidDynamic.cpp", 102, "PxRigidDynamic::setGlobalPose: Actor is part of a pruning structure, pruning structure is now invalid!", v38, v39, v40, v45);
    result = (_QWORD *)physx::Sq::PruningStructure::invalidate(*(_QWORD *)(a1 + 80), a1);
  }
  if (v8 && a3)
  {
    v42 = *(unsigned int *)(a1 + 104);
    v43 = (v42 & 1) != 0
        ? *(_BYTE **)(a1 + 112)
        : (_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v42 >> 24) & 0xF) + 3) + v17 + 12);
    if ((*v43 & 8) == 0)
    {
      if ((*(_BYTE *)(a1 + 381) & 0x40) != 0)
        v44 = (_BYTE *)(*(_QWORD *)(a1 + 112) + 348);
      else
        v44 = (_BYTE *)(a1 + 172);
      if ((*v44 & 1) == 0)
        return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest((_QWORD *)a1, (physx::Scb::Body *)(a1 + 96), 0, 1, v41);
    }
  }
  return result;
}

uint64_t physx::NpRigidDynamic::setKinematicTarget(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  physx::Scb::Base *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t result;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _DWORD v36[7];

  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = sqrtf((float)((float)((float)(v3 * v3) + (float)(*a2 * *a2)) + (float)(v4 * v4)) + (float)(v5 * v5));
  v7 = *a2 / v6;
  v8 = v3 / v6;
  v9 = v4 / v6;
  v10 = v5 / v6;
  v11 = a2[6];
  v12 = (physx::Scb::Base *)(a1 + 96);
  if ((*(_BYTE *)(a1 + 381) & 4) != 0)
    v13 = (float *)(*(_QWORD *)(a1 + 112) + 224);
  else
    v13 = (float *)(a1 + 176);
  v14 = v13[4] + v13[4];
  v15 = v13[5] + v13[5];
  v16 = v13[6] + v13[6];
  v17 = (float)(v10 * v10) + -0.5;
  v18 = (float)((float)(v8 * v15) + (float)(v7 * v14)) + (float)(v9 * v16);
  v19 = (float)((float)(v10 * (float)((float)(v8 * v16) - (float)(v9 * v15))) + (float)(v14 * v17)) + (float)(v7 * v18);
  v20 = (float)((float)(v10 * (float)((float)(v9 * v14) - (float)(v7 * v16))) + (float)(v15 * v17)) + (float)(v8 * v18);
  v21 = (float)((float)(v10 * (float)((float)(v7 * v15) - (float)(v8 * v14))) + (float)(v16 * v17)) + (float)(v9 * v18);
  v22 = a2[4] + v19;
  v23 = a2[5] + v20;
  v25 = v13[2];
  v24 = v13[3];
  v26 = v13[1];
  v27 = (float)((float)((float)(v8 * v24) + (float)(v10 * v26)) + (float)(v9 * *v13)) - (float)(v25 * v7);
  v28 = (float)((float)((float)(v9 * v24) + (float)(v10 * v25)) + (float)(v7 * v26)) - (float)(*v13 * v8);
  v29 = (float)((float)((float)(v7 * v24) + (float)(v10 * *v13)) + (float)(v8 * v25)) - (float)(v26 * v9);
  v30 = (float)((float)((float)(v10 * v24) - (float)(v7 * *v13)) - (float)(v8 * v26)) - (float)(v9 * v25);
  *(float *)v36 = v29;
  *(float *)&v36[1] = v27;
  *(float *)&v36[2] = v28;
  *(float *)&v36[3] = v30;
  *(float *)&v36[4] = v22;
  *(float *)&v36[5] = v23;
  *(float *)&v36[6] = v11 + v21;
  result = physx::Scb::Body::setKinematicTarget(v12, (uint64_t)v36);
  v32 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v32 + 2) >> 30) - 1) > 1)
  {
    v34 = 0;
  }
  else
  {
    v33 = *v32;
    if (v33)
      v34 = v33 - 16;
    else
      v34 = 0;
  }
  if ((*(_BYTE *)(a1 + 381) & 0x40) != 0)
    v35 = (_BYTE *)(*(_QWORD *)(a1 + 112) + 348);
  else
    v35 = (_BYTE *)(a1 + 172);
  if ((*v35 & 2) != 0)
  {
    if (v34)
    {
      result = physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v34 + 8640, (_WORD *)a1);
      ++*(_DWORD *)(v34 + 8732);
    }
  }
  return result;
}

uint64_t physx::NpRigidDynamic::getKinematicTarget(uint64_t a1, float *a2)
{
  int v2;
  _BYTE *v3;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  v2 = *(_DWORD *)(a1 + 380);
  if ((v2 & 0x4000) != 0)
    v3 = (_BYTE *)(*(_QWORD *)(a1 + 112) + 348);
  else
    v3 = (_BYTE *)(a1 + 172);
  if ((*v3 & 1) == 0)
    return 0;
  if ((v2 & 0x8000) != 0)
  {
    v12 = *(float **)(a1 + 112);
    v5 = v12 + 68;
    v6 = v12 + 69;
    v7 = v12 + 70;
    v8 = v12 + 71;
    v9 = v12 + 72;
    v10 = v12 + 73;
    v11 = v12 + 74;
  }
  else
  {
    if (*(_DWORD *)(a1 + 104) >> 30 == 3)
      return 0;
    v5 = *(float **)(a1 + 304);
    if (!v5 || *((_BYTE *)v5 + 31) != 1 || !*((_BYTE *)v5 + 28))
      return 0;
    v6 = v5 + 1;
    v7 = v5 + 2;
    v8 = v5 + 3;
    v9 = v5 + 4;
    v10 = v5 + 5;
    v11 = v5 + 6;
  }
  v13 = *v5;
  v14 = *v6;
  v15 = *v7;
  v16 = *v8;
  v17 = *v10;
  v18 = *v11;
  if ((v2 & 0x400) != 0)
    v19 = (float *)(*(_QWORD *)(a1 + 112) + 224);
  else
    v19 = (float *)(a1 + 176);
  v20 = v19[4] * -2.0;
  v21 = v19[5] * -2.0;
  v22 = v19[6] * -2.0;
  v24 = v19[2];
  v23 = v19[3];
  v25 = (float)(v23 * v23) + -0.5;
  v26 = v19[1];
  v27 = (float)((float)(v21 * v26) + (float)(*v19 * v20)) + (float)(v24 * v22);
  v28 = (float)((float)(v20 * v25) - (float)((float)((float)(v26 * v22) - (float)(v24 * v21)) * v23))
      + (float)(*v19 * v27);
  v29 = (float)((float)(v21 * v25) - (float)((float)((float)(v24 * v20) - (float)(*v19 * v22)) * v23))
      + (float)(v26 * v27);
  v30 = (float)((float)(v22 * v25) - (float)((float)((float)(*v19 * v21) - (float)(v26 * v20)) * v23))
      + (float)(v24 * v27);
  v31 = v28 + v28;
  v32 = v30 + v30;
  v33 = (float)(v16 * v16) + -0.5;
  v34 = (float)((float)(v14 * (float)(v29 + v29)) + (float)(v13 * (float)(v28 + v28))) + (float)(v15 * v32);
  v35 = (float)((float)(v16 * (float)((float)(v14 * v32) - (float)(v15 * (float)(v29 + v29))))
              + (float)((float)(v28 + v28) * v33))
      + (float)(v13 * v34);
  v36 = (float)((float)(v16 * (float)((float)(v15 * (float)(v28 + v28)) - (float)(v13 * v32)))
              + (float)((float)(v29 + v29) * v33))
      + (float)(v14 * v34);
  v37 = (float)((float)(v16 * (float)((float)(v13 * (float)(v29 + v29)) - (float)(v14 * v31))) + (float)(v32 * v33))
      + (float)(v15 * v34);
  v38 = *v9 + v35;
  v39 = (float)((float)((float)(v13 * v23) - (float)(v16 * *v19)) - (float)(v14 * v24)) + (float)(v26 * v15);
  v40 = (float)((float)((float)(v14 * v23) - (float)(v16 * v26)) - (float)(v15 * *v19)) + (float)(v24 * v13);
  v41 = (float)((float)((float)(v15 * v23) - (float)(v16 * v24)) - (float)(v13 * v26)) + (float)(*v19 * v14);
  v42 = (float)((float)((float)(v13 * *v19) + (float)(v16 * v23)) + (float)(v14 * v26)) + (float)(v15 * v24);
  *a2 = v39;
  a2[1] = v40;
  a2[2] = v41;
  a2[3] = v42;
  a2[4] = v38;
  a2[5] = v17 + v36;
  a2[6] = v18 + v37;
  return 1;
}

uint64_t physx::NpRigidDynamic::setCMassLocalPose(_WORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  _WORD *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int8x8_t v21;
  float v22;
  float v23;
  float v24;
  int v25;
  int v26;
  int8x8_t v27;
  unsigned int v28;
  _QWORD *v29;
  float *v30;
  float *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _BYTE *v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float *v50;
  float *v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101[7];
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;

  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = sqrtf((float)((float)((float)(v3 * v3) + (float)(*a2 * *a2)) + (float)(v4 * v4)) + (float)(v5 * v5));
  v7 = *a2 / v6;
  v8 = v3 / v6;
  v9 = v4 / v6;
  v10 = v5 / v6;
  v101[0] = v7;
  v101[1] = v3 / v6;
  v101[2] = v4 / v6;
  v101[3] = v5 / v6;
  v11 = a2[4];
  v12 = a2[5];
  v101[4] = v11;
  v101[5] = v12;
  v13 = a2[6];
  v101[6] = v13;
  if ((*((_BYTE *)a1 + 381) & 4) != 0)
    v14 = (float *)(*((_QWORD *)a1 + 14) + 224);
  else
    v14 = (float *)(a1 + 88);
  v15 = a1 + 48;
  v100 = v14[1];
  v16 = v14[3];
  v98 = *v14;
  v99 = v14[2];
  v96 = v14[5];
  v97 = v14[4];
  v95 = v14[6];
  (*(void (**)(uint64_t *__return_ptr, _WORD *))(*(_QWORD *)a1 + 152))(&v102, a1);
  v17 = (float)(v104 * v104) + -0.5;
  v18 = (float)((float)((float)(v12 + v12) * *((float *)&v102 + 1)) + (float)(*(float *)&v102 * (float)(v11 + v11)))
      + (float)(v103 * (float)(v13 + v13));
  v19 = v105
      + (float)((float)((float)(v104
                              * (float)((float)(*((float *)&v102 + 1) * (float)(v13 + v13))
                                      - (float)(v103 * (float)(v12 + v12))))
                      + (float)((float)(v11 + v11) * v17))
              + (float)(*(float *)&v102 * v18));
  v20 = v106
      + (float)((float)((float)(v104
                              * (float)((float)(v103 * (float)(v11 + v11))
                                      - (float)(*(float *)&v102 * (float)(v13 + v13))))
                      + (float)((float)(v12 + v12) * v17))
              + (float)(*((float *)&v102 + 1) * v18));
  *(float *)v21.i32 = v107
                    + (float)((float)((float)(v104
                                            * (float)((float)(*(float *)&v102 * (float)(v12 + v12))
                                                    - (float)(*((float *)&v102 + 1) * (float)(v11 + v11))))
                                    + (float)((float)(v13 + v13) * v17))
                            + (float)(v103 * v18));
  v22 = (float)((float)((float)(v10 * *((float *)&v102 + 1)) + (float)(v104 * v8)) + (float)(v103 * v7))
      - (float)(v9 * *(float *)&v102);
  v23 = (float)((float)((float)(v10 * v103) + (float)(v104 * v9)) + (float)(*(float *)&v102 * v8))
      - (float)(v7 * *((float *)&v102 + 1));
  v108 = (float)((float)((float)(v10 * *(float *)&v102) + (float)(v104 * v7)) + (float)(*((float *)&v102 + 1) * v9))
       - (float)(v8 * v103);
  v109 = v22;
  v24 = (float)((float)((float)(v104 * v10) - (float)(*(float *)&v102 * v7)) - (float)(*((float *)&v102 + 1) * v8))
      - (float)(v103 * v9);
  v110 = v23;
  v111 = v24;
  v112 = v19;
  v113 = v20;
  v114 = *(float *)v21.i32;
  *((float *)a1 + 80) = v108;
  *((float *)a1 + 81) = v22;
  *((float *)a1 + 82) = v23;
  *((float *)a1 + 83) = v24;
  *((float *)a1 + 84) = v19;
  *((float *)a1 + 85) = v20;
  *((_DWORD *)a1 + 86) = v21.i32[0];
  v25 = *((_DWORD *)a1 + 26) >> 30;
  if (v25 == 3 || v25 == 2 && *(_BYTE *)(*(_QWORD *)v15 + 7689))
  {
    v26 = *((_DWORD *)a1 + 95);
    if ((v26 & 0x100000) == 0)
      *((_DWORD *)a1 + 95) = v26 | 0x200000;
    physx::Scb::Scene::scheduleForUpdate(*((_QWORD **)a1 + 12), (physx::Scb::Base *)(a1 + 48), v21);
    *((_DWORD *)a1 + 95) |= 0x100000u;
  }
  else
  {
    physx::Sc::BodyCore::setBody2World((uint64_t)(a1 + 64), (uint64_t)&v108);
  }
  v28 = *((_DWORD *)a1 + 26);
  if (v28 >> 30 == 2)
  {
    v29 = *(_QWORD **)v15;
    if (*(_BYTE *)(*(_QWORD *)v15 + 7689))
      goto LABEL_15;
  }
  else if (v28 >> 30 == 3)
  {
    v29 = *(_QWORD **)v15;
LABEL_15:
    v30 = (float *)*((_QWORD *)a1 + 14);
    if (!v30)
    {
      v27 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v29, HIBYTE(v28) & 0xF).n128_u64[0];
      v30 = v31;
      *((_QWORD *)a1 + 14) = v31;
      v29 = (_QWORD *)*((_QWORD *)a1 + 12);
    }
    v30[56] = v7;
    v30[57] = v8;
    v30[58] = v9;
    v30[59] = v10;
    v30[60] = v11;
    v30[61] = v12;
    v30[62] = v13;
    result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(v29, (physx::Scb::Base *)(a1 + 48), v27);
    *((_DWORD *)a1 + 95) |= 0x400u;
    goto LABEL_19;
  }
  result = physx::Sc::BodyCore::setBody2Actor((uint64_t)(a1 + 64), v101);
LABEL_19:
  v33 = *((_QWORD *)a1 + 4);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 72);
    v35 = *(_DWORD *)(v33 + 80);
  }
  else
  {
    v35 = 0;
    v34 = 0;
  }
  v36 = 0;
LABEL_23:
  if (v36 <= v35)
    v37 = v35;
  else
    v37 = v36;
  v38 = (unsigned __int8 *)(v34 + 16 * v36);
  v39 = v37 - v36 + 1;
  while (--v39)
  {
    v40 = v38 + 16;
    ++v36;
    v41 = *v38;
    v38 += 16;
    if (!v41)
    {
      v42 = (_QWORD *)*((_QWORD *)v40 - 1);
      if (!v42)
        break;
      v43 = v42[11];
      if ((_WORD *)v42[2] == a1)
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v43 + 24))(v42[11], 0);
      if ((_WORD *)v42[3] == a1)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 24))(v43, 1);
      goto LABEL_23;
    }
  }
  v44 = *((_DWORD *)a1 + 95);
  if ((v44 & 0x4000) != 0)
    v45 = (_BYTE *)(*((_QWORD *)a1 + 14) + 348);
  else
    v45 = a1 + 86;
  if ((*v45 & 1) != 0)
  {
    if ((v44 & 0x8000) != 0)
    {
      v53 = (float *)*((_QWORD *)a1 + 14);
      v46 = v53 + 68;
      v47 = v53 + 69;
      v48 = v53 + 70;
      v49 = v53 + 71;
      v50 = v53 + 72;
      v51 = v53 + 73;
      v52 = v53 + 74;
    }
    else
    {
      if (*((_DWORD *)a1 + 26) >> 30 == 3)
        return result;
      v46 = (float *)*((_QWORD *)a1 + 38);
      if (!v46 || *((_BYTE *)v46 + 31) != 1 || !*((_BYTE *)v46 + 28))
        return result;
      v47 = v46 + 1;
      v48 = v46 + 2;
      v49 = v46 + 3;
      v50 = v46 + 4;
      v51 = v46 + 5;
      v52 = v46 + 6;
    }
    v54 = (float)(v16 * v16) + -0.5;
    v55 = (float)((float)(v100 * (float)(v96 * -2.0)) + (float)(v98 * (float)(v97 * -2.0)))
        + (float)(v99 * (float)(v95 * -2.0));
    v56 = (float)((float)((float)(v97 * -2.0) * v54)
                - (float)((float)((float)(v100 * (float)(v95 * -2.0)) - (float)(v99 * (float)(v96 * -2.0))) * v16))
        + (float)(v98 * v55);
    v57 = (float)((float)((float)(v96 * -2.0) * v54)
                - (float)((float)((float)(v99 * (float)(v97 * -2.0)) - (float)(v98 * (float)(v95 * -2.0))) * v16))
        + (float)(v100 * v55);
    v58 = (float)((float)((float)(v95 * -2.0) * v54)
                - (float)((float)((float)(v98 * (float)(v96 * -2.0)) - (float)(v100 * (float)(v97 * -2.0))) * v16))
        + (float)(v99 * v55);
    v59 = v56 + v56;
    v60 = v58 + v58;
    v61 = (float)(*v49 * *v49) + -0.5;
    v62 = (float)((float)((float)(v57 + v57) * *v47) + (float)(*v46 * (float)(v56 + v56))) + (float)(*v48 * v60);
    v63 = (float)((float)(*v49 * (float)((float)(*v47 * v60) - (float)(*v48 * (float)(v57 + v57))))
                + (float)((float)(v56 + v56) * v61))
        + (float)(*v46 * v62);
    v64 = (float)((float)(*v49 * (float)((float)(*v48 * (float)(v56 + v56)) - (float)(*v46 * v60)))
                + (float)((float)(v57 + v57) * v61))
        + (float)(*v47 * v62);
    v65 = (float)((float)(*v49 * (float)((float)(*v46 * (float)(v57 + v57)) - (float)(*v47 * v59))) + (float)(v60 * v61))
        + (float)(*v48 * v62);
    v66 = *v50 + v63;
    v67 = *v51 + v64;
    v68 = *v52 + v65;
    v69 = (float)((float)((float)(v16 * *v46) - (float)(*v49 * v98)) - (float)(*v47 * v99)) + (float)(v100 * *v48);
    v70 = (float)((float)((float)(v16 * *v47) - (float)(*v49 * v100)) - (float)(*v48 * v98)) + (float)(v99 * *v46);
    v71 = (float)((float)((float)(v16 * *v48) - (float)(*v49 * v99)) - (float)(*v46 * v100)) + (float)(v98 * *v47);
    v72 = (float)((float)((float)(v98 * *v46) + (float)(*v49 * v16)) + (float)(*v47 * v100)) + (float)(*v48 * v99);
    if ((v44 & 0x400) != 0)
      v73 = (float *)(*((_QWORD *)a1 + 14) + 224);
    else
      v73 = (float *)(a1 + 88);
    v74 = v73[4] + v73[4];
    v75 = v73[5] + v73[5];
    v76 = v73[6] + v73[6];
    v77 = (float)(v72 * v72) + -0.5;
    v78 = (float)((float)(v70 * v75) + (float)(v69 * v74)) + (float)(v71 * v76);
    v79 = (float)((float)(v72 * (float)((float)(v70 * v76) - (float)(v71 * v75))) + (float)(v74 * v77))
        + (float)(v69 * v78);
    v80 = (float)((float)(v72 * (float)((float)(v71 * v74) - (float)(v69 * v76))) + (float)(v75 * v77))
        + (float)(v70 * v78);
    v81 = (float)((float)(v72 * (float)((float)(v69 * v75) - (float)(v70 * v74))) + (float)(v76 * v77))
        + (float)(v71 * v78);
    v82 = v66 + v79;
    v83 = v67 + v80;
    v85 = v73[2];
    v84 = v73[3];
    v86 = v73[1];
    v87 = (float)((float)((float)(v70 * v84) + (float)(v72 * v86)) + (float)(v71 * *v73)) - (float)(v85 * v69);
    v88 = (float)((float)((float)(v71 * v84) + (float)(v72 * v85)) + (float)(v69 * v86)) - (float)(*v73 * v70);
    v89 = (float)((float)((float)(v69 * v84) + (float)(v72 * *v73)) + (float)(v70 * v85)) - (float)(v86 * v71);
    v90 = (float)((float)((float)(v72 * v84) - (float)(v69 * *v73)) - (float)(v70 * v86)) - (float)(v71 * v85);
    v108 = v89;
    v109 = v87;
    v110 = v88;
    v111 = v90;
    v112 = v82;
    v113 = v83;
    v114 = v68 + v81;
    result = physx::Scb::Body::setKinematicTarget((physx::Scb::Base *)(a1 + 48), (uint64_t)&v108);
    v91 = (char *)a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + (unsigned __int16)a1[4] + 18);
    if (((*((_DWORD *)v91 + 2) >> 30) - 1) > 1)
    {
      v93 = 0;
    }
    else
    {
      v92 = *(_QWORD *)v91;
      if (v92)
        v93 = v92 - 16;
      else
        v93 = 0;
    }
    if ((*((_BYTE *)a1 + 381) & 0x40) != 0)
      v94 = (_BYTE *)(*((_QWORD *)a1 + 14) + 348);
    else
      v94 = a1 + 86;
    if ((*v94 & 2) != 0 && v93)
    {
      result = physx::NpShapeManager::markAllSceneQueryForUpdate((uint64_t)(a1 + 20), v93 + 8640, a1);
      ++*(_DWORD *)(v93 + 8732);
    }
  }
  return result;
}

uint64_t *physx::NpRigidDynamic::setLinearDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2;
  uint64_t *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 12);
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 180) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 4u;
    return this;
  }
  v8 = v3[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 48) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 62) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getLinearDamping(physx::NpRigidDynamic *this)
{
  uint64_t v1;
  char *v2;

  if ((*((_BYTE *)this + 380) & 4) != 0)
  {
    v2 = (char *)(*((_QWORD *)this + 14) + 180);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (char *)(v1 + 48);
    else
      v2 = (char *)this + 248;
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidDynamic::setAngularDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2;
  uint64_t *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2.i32[0];
  v3 = this;
  v4 = (physx::Scb::Base *)(this + 12);
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 184) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 8u;
    return this;
  }
  v8 = v3[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 52) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 63) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getAngularDamping(physx::NpRigidDynamic *this)
{
  uint64_t v1;
  char *v2;

  if ((*((_BYTE *)this + 380) & 8) != 0)
  {
    v2 = (char *)(*((_QWORD *)this + 14) + 184);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (char *)(v1 + 52);
    else
      v2 = (char *)this + 252;
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidDynamic::setLinearVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  physx::Scb::Base *v6;
  int8x8_t v7;
  int v8;
  _QWORD *v9;
  uint64_t *result;
  double v11;
  uint64_t v12;
  _BOOL4 v13;

  v6 = (physx::Scb::Base *)(a1 + 96);
  v7 = *a2;
  *(int8x8_t *)(a1 + 348) = *a2;
  v7.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 356) = v7.i32[0];
  v8 = *(_DWORD *)(a1 + 104) >> 30;
  if (v8 == 2)
  {
    v9 = *(_QWORD **)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 7689))
      goto LABEL_5;
LABEL_6:
    *(int8x8_t *)(a1 + 208) = *a2;
    *(_DWORD *)(a1 + 216) = a2[1].i32[0];
    result = updateBodySim((uint64_t *)(a1 + 128));
    goto LABEL_7;
  }
  if (v8 != 3)
    goto LABEL_6;
  v9 = *(_QWORD **)v6;
LABEL_5:
  result = physx::Scb::Scene::scheduleForUpdate(v9, v6, v7);
  *(_DWORD *)(a1 + 380) |= 0x400000u;
LABEL_7:
  v12 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v12 + 8) >> 30) - 1) <= 1 && *(_QWORD *)v12)
  {
    LODWORD(v11) = a2->i32[0];
    v13 = 1;
    if (*(float *)a2->i32 == 0.0)
    {
      LODWORD(v11) = a2->i32[1];
      if (*(float *)&v11 == 0.0)
      {
        LODWORD(v11) = a2[1].i32[0];
        v13 = *(float *)&v11 != 0.0;
      }
    }
    return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest((_QWORD *)a1, v6, v13, a3, v11);
  }
  return result;
}

_QWORD *physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(_QWORD *this, physx::Scb::Body *a2, int a3, int a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  _QWORD *v11;

  v6 = *(_QWORD *)((char *)this + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)this + 4) + 18));
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  LODWORD(a5) = *(_DWORD *)(v7 + 0x2000);
  v8 = a3 | a4;
  if (!*((_DWORD *)a2 + 70))
    v8 = 0;
  v9 = a4 & (*((float *)a2 + 69) < *(float *)&a5);
  if (!v9)
    LODWORD(a5) = *((_DWORD *)a2 + 69);
  if ((v9 & 1) != 0 || v8)
  {
    v10 = *((_DWORD *)a2 + 2) >> 30;
    if (v10 == 2)
    {
      v11 = *(_QWORD **)a2;
      if (*(_BYTE *)(*(_QWORD *)a2 + 7689))
        goto LABEL_14;
    }
    else if (v10 == 3)
    {
      v11 = *(_QWORD **)a2;
LABEL_14:
      *((_DWORD *)a2 + 70) = 0;
      *((_DWORD *)a2 + 69) = LODWORD(a5);
      this = physx::Scb::Scene::scheduleForUpdate(v11, a2, *(int8x8_t *)&a5);
      *((_DWORD *)a2 + 71) = *((_DWORD *)a2 + 71) & 0xF8FFFFFF | 0x5000000;
      return this;
    }
    *((_DWORD *)a2 + 70) = 0;
    *((_DWORD *)a2 + 69) = LODWORD(a5);
    return (_QWORD *)physx::Sc::BodyCore::setWakeCounter((uint64_t)a2 + 32, *(float *)&a5, 1);
  }
  return this;
}

uint64_t *physx::NpRigidDynamic::setAngularVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  physx::Scb::Base *v6;
  int8x8_t v7;
  int v8;
  _QWORD *v9;
  uint64_t *result;
  double v11;
  uint64_t v12;
  _BOOL4 v13;

  v6 = (physx::Scb::Base *)(a1 + 96);
  v7 = *a2;
  *(int8x8_t *)(a1 + 360) = *a2;
  v7.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 368) = v7.i32[0];
  v8 = *(_DWORD *)(a1 + 104) >> 30;
  if (v8 == 2)
  {
    v9 = *(_QWORD **)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 7689))
      goto LABEL_5;
LABEL_6:
    *(int8x8_t *)(a1 + 224) = *a2;
    *(_DWORD *)(a1 + 232) = a2[1].i32[0];
    result = updateBodySim((uint64_t *)(a1 + 128));
    goto LABEL_7;
  }
  if (v8 != 3)
    goto LABEL_6;
  v9 = *(_QWORD **)v6;
LABEL_5:
  result = physx::Scb::Scene::scheduleForUpdate(v9, v6, v7);
  *(_DWORD *)(a1 + 380) |= 0x800000u;
LABEL_7:
  v12 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v12 + 8) >> 30) - 1) <= 1 && *(_QWORD *)v12)
  {
    LODWORD(v11) = a2->i32[0];
    v13 = 1;
    if (*(float *)a2->i32 == 0.0)
    {
      LODWORD(v11) = a2->i32[1];
      if (*(float *)&v11 == 0.0)
      {
        LODWORD(v11) = a2[1].i32[0];
        v13 = *(float *)&v11 != 0.0;
      }
    }
    return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest((_QWORD *)a1, v6, v13, a3, v11);
  }
  return result;
}

uint64_t *physx::NpRigidDynamic::setMaxAngularVelocity(uint64_t *this, double a2)
{
  uint64_t *v2;
  physx::Scb::Base *v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  v3 = (physx::Scb::Base *)(this + 12);
  v4 = *(float *)&a2 * *(float *)&a2;
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    v6 = v2[14];
    if (!v6)
    {
      *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 188) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x10u;
    return this;
  }
  v8 = v2[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 56) = v4;
  }
  else
  {
    *((float *)v2 + 60) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getMaxAngularVelocity(physx::NpRigidDynamic *this)
{
  uint64_t v1;
  float *v2;

  if ((*((_BYTE *)this + 380) & 0x10) != 0)
  {
    v2 = (float *)(*((_QWORD *)this + 14) + 188);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (float *)(v1 + 56);
    else
      v2 = (float *)((char *)this + 240);
  }
  return sqrtf(*v2);
}

uint64_t *physx::NpRigidDynamic::setMaxLinearVelocity(uint64_t *this, double a2)
{
  uint64_t *v2;
  physx::Scb::Base *v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  v3 = (physx::Scb::Base *)(this + 12);
  v4 = *(float *)&a2 * *(float *)&a2;
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_5;
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    v6 = v2[14];
    if (!v6)
    {
      *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 192) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x20u;
    return this;
  }
  v8 = v2[38];
  if (v8 && *(_BYTE *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 60) = v4;
  }
  else
  {
    *((float *)v2 + 61) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getMaxLinearVelocity(physx::NpRigidDynamic *this)
{
  uint64_t v1;
  float *v2;

  if ((*((_BYTE *)this + 380) & 0x20) != 0)
  {
    v2 = (float *)(*((_QWORD *)this + 14) + 192);
  }
  else
  {
    v1 = *((_QWORD *)this + 38);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (float *)(v1 + 60);
    else
      v2 = (float *)((char *)this + 244);
  }
  return sqrtf(*v2);
}

_QWORD *physx::NpRigidDynamic::addForce(float32x4_t *a1, float32x2_t *a2, int a3, int a4, double a5)
{
  double v8;
  _BOOL4 v9;

  physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::addSpatialForce(a1, a2, 0, a3, a5);
  LODWORD(v8) = a2->i32[0];
  v9 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v8) = a2->i32[1];
    if (*(float *)&v8 == 0.0)
    {
      LODWORD(v8) = a2[1].i32[0];
      v9 = *(float *)&v8 != 0.0;
    }
  }
  return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a1, (physx::Scb::Body *)&a1[6], v9, a4, v8);
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::addSpatialForce(float32x4_t *a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  uint64_t v10;
  float *f32;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float v34;
  int8x8_t v35;
  float32x2_t v36;
  float v37;
  int8x8_t v38;
  int8x8_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  float v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  int8x8_t v64;
  float32x2_t v65;
  float v66;
  int8x8_t v67;
  int8x8_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  double v78;
  float v79;
  double v80;
  float v81;

  switch(a4)
  {
    case 0:
      if (a2)
      {
        if ((a1[23].i8[12] & 1) != 0)
        {
          v6 = (float *)(a1[7].i64[0] + 164);
        }
        else
        {
          v5 = a1[19].i64[0];
          if (v5 && *(_BYTE *)(v5 + 31) == 1)
            v6 = (float *)(v5 + 44);
          else
            v6 = &a1[16].f32[3];
        }
        v9 = *v6 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v6));
        v80 = a5;
        v81 = v9;
        a2 = (float32x2_t *)&v80;
      }
      if (a3)
      {
        if ((a1[23].i8[12] & 2) != 0)
        {
          f32 = (float *)(a1[7].i64[0] + 168);
        }
        else
        {
          v10 = a1[19].i64[0];
          if (v10 && *(_BYTE *)(v10 + 31) == 1)
            f32 = (float *)(v10 + 32);
          else
            f32 = a1[16].f32;
        }
        v15 = f32[1];
        v16 = f32[2];
        v17 = a1[20];
        v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1);
        v19 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 2);
        v20 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 3);
        _Q7 = vaddq_f32(v17, v17);
        *(int32x2_t *)v17.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)_Q7.f32), 0);
        v22 = vmul_lane_f32(v18, *(float32x2_t *)_Q7.f32, 1);
        v23 = vmul_laneq_f32(v19, _Q7, 2);
        v24 = vmul_n_f32(v18, _Q7.f32[0]);
        v25 = vmul_n_f32(v19, _Q7.f32[0]);
        v26 = vmul_n_f32(v20, _Q7.f32[0]);
        v27 = vmul_lane_f32(v19, *(float32x2_t *)_Q7.f32, 1);
        v28 = vmul_lane_f32(v20, *(float32x2_t *)_Q7.f32, 1);
        v29 = vmul_laneq_f32(v20, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v17.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v17.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v24, v29);
        v34 = vsub_f32(v25, v28).f32[0];
        v35 = (int8x8_t)vsub_f32(v24, v29);
        v36 = vsub_f32(*(float32x2_t *)v17.f32, v23);
        v37 = vadd_f32(v27, v26).f32[0];
        v38 = (int8x8_t)vadd_f32(v25, v28);
        v39 = (int8x8_t)vsub_f32(v27, v26);
        v17.f32[0] = vsub_f32(*(float32x2_t *)v17.f32, v22).f32[0];
        v26.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v15 * v37) * v37, *f32 * v34, v34), v16 * v17.f32[0], v17.f32[0]);
        v23.i32[0] = a3[1].i32[0];
        v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v40.f32[0] = (float)(1.0 - v22.f32[1]) - v23.f32[1];
        v41 = vmul_n_f32(v40, *f32);
        v42 = (float32x2_t)vext_s8(v35, (int8x8_t)v36, 4uLL);
        v43 = vmul_n_f32(v42, v15);
        v44 = (float32x2_t)vext_s8(v38, v39, 4uLL);
        v45 = vmul_n_f32(v44, v16);
        v46 = vmla_f32(vmla_f32(vmul_f32(v42, v43), v40, v41), v44, v45);
        v36.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v43, v36).f32[0], _Q7.f32[0], v41.f32[0]), *(float *)v39.i32, v45.f32[0]);
        v47 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v43, v37), v41, v34), v45, v17.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v47, v23.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v36.f32[0])), vmul_f32(*a3, v46))));
        v47.f32[0] = (float)(v23.f32[0] * v26.f32[0]) + vaddv_f32(vmul_f32(*a3, v47));
        v78 = a5;
        v79 = v47.f32[0];
        a3 = (float32x2_t *)&v78;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    case 1:
      if (a2)
      {
        if ((a1[23].i8[12] & 1) != 0)
        {
          v8 = (float *)(a1[7].i64[0] + 164);
        }
        else
        {
          v7 = a1[19].i64[0];
          if (v7 && *(_BYTE *)(v7 + 31) == 1)
            v8 = (float *)(v7 + 44);
          else
            v8 = &a1[16].f32[3];
        }
        v12 = *v8 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v8));
        v80 = a5;
        v81 = v12;
        a2 = (float32x2_t *)&v80;
      }
      if (a3)
      {
        if ((a1[23].i8[12] & 2) != 0)
        {
          v14 = (float *)(a1[7].i64[0] + 168);
        }
        else
        {
          v13 = a1[19].i64[0];
          if (v13 && *(_BYTE *)(v13 + 31) == 1)
            v14 = (float *)(v13 + 32);
          else
            v14 = a1[16].f32;
        }
        v48 = v14[1];
        v49 = v14[2];
        v50 = a1[20];
        v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 1);
        v52 = (float32x2_t)vdup_laneq_s32((int32x4_t)v50, 2);
        v53 = (float32x2_t)vdup_laneq_s32((int32x4_t)v50, 3);
        _Q7 = vaddq_f32(v50, v50);
        *(int32x2_t *)v50.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)_Q7.f32), 0);
        v55 = vmul_lane_f32(v51, *(float32x2_t *)_Q7.f32, 1);
        v56 = vmul_laneq_f32(v52, _Q7, 2);
        v57 = vmul_n_f32(v51, _Q7.f32[0]);
        v58 = vmul_n_f32(v52, _Q7.f32[0]);
        v59 = vmul_n_f32(v53, _Q7.f32[0]);
        v60 = vmul_lane_f32(v52, *(float32x2_t *)_Q7.f32, 1);
        v61 = vmul_lane_f32(v53, *(float32x2_t *)_Q7.f32, 1);
        v62 = vmul_laneq_f32(v53, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v50.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v50.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v57, v62);
        v63 = vsub_f32(v58, v61).f32[0];
        v64 = (int8x8_t)vsub_f32(v57, v62);
        v65 = vsub_f32(*(float32x2_t *)v50.f32, v56);
        v66 = vadd_f32(v60, v59).f32[0];
        v67 = (int8x8_t)vadd_f32(v58, v61);
        v68 = (int8x8_t)vsub_f32(v60, v59);
        v50.f32[0] = vsub_f32(*(float32x2_t *)v50.f32, v55).f32[0];
        v59.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v48 * v66) * v66, *v14 * v63, v63), v49 * v50.f32[0], v50.f32[0]);
        v56.i32[0] = a3[1].i32[0];
        v69 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v69.f32[0] = (float)(1.0 - v55.f32[1]) - v56.f32[1];
        v70 = vmul_n_f32(v69, *v14);
        v71 = (float32x2_t)vext_s8(v64, (int8x8_t)v65, 4uLL);
        v72 = vmul_n_f32(v71, v48);
        v73 = (float32x2_t)vext_s8(v67, v68, 4uLL);
        v74 = vmul_n_f32(v73, v49);
        v75 = vmla_f32(vmla_f32(vmul_f32(v71, v72), v69, v70), v73, v74);
        v65.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v72, v65).f32[0], _Q7.f32[0], v70.f32[0]), *(float *)v68.i32, v74.f32[0]);
        v76 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v72, v66), v70, v63), v74, v50.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v76, v56.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v65.f32[0])), vmul_f32(*a3, v75))));
        v76.f32[0] = (float)(v56.f32[0] * v59.f32[0]) + vaddv_f32(vmul_f32(*a3, v76));
        v78 = a5;
        v79 = v76.f32[0];
        a3 = (float32x2_t *)&v78;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    case 2:
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    case 3:
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration((physx::Scb::Base *)&a1[6], a2, a3, a5);
      break;
    default:
      return *(float *)&a5;
  }
  return *(float *)&a5;
}

_QWORD *physx::NpRigidDynamic::setForceAndTorque(physx::NpRigidDynamic *this, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  float32x2_t *v5;
  float32x2_t *v7;
  int v8;
  uint64_t v9;
  float *v10;
  int v11;
  uint64_t v12;
  float *v13;
  physx::Scb::Base *v14;
  physx::Scb::Base *v15;
  unsigned int v16;
  _QWORD *v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float32x2_t *v27;
  int8x8_t v28;
  uint64_t v29;
  physx::Sc::BodySim **v30;
  float32x2_t *v31;
  double *v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float v52;
  int8x8_t v53;
  float32x2_t v54;
  float v55;
  int8x8_t v56;
  int8x8_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  unsigned int v68;
  float v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  int8x8_t v85;
  float32x2_t v86;
  float v87;
  int8x8_t v88;
  int8x8_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t *v98;
  _BOOL4 v99;
  double v101;
  float v102;
  float32x2_t v103;
  float v104;

  v5 = a2;
  v7 = a3;
  switch(a4)
  {
    case 0:
      v8 = *((_DWORD *)this + 95);
      if ((v8 & 1) != 0)
      {
        v10 = (float *)(*((_QWORD *)this + 14) + 164);
      }
      else
      {
        v9 = *((_QWORD *)this + 38);
        if (v9 && *(_BYTE *)(v9 + 31) == 1)
          v10 = (float *)(v9 + 44);
        else
          v10 = (float *)((char *)this + 268);
      }
      v18 = *v10 * a2->f32[0];
      v19 = *v10 * a2->f32[1];
      v20 = *v10 * a2[1].f32[0];
      v103.f32[0] = v18;
      v103.f32[1] = v19;
      v104 = v20;
      if ((v8 & 2) != 0)
      {
        v22 = (float *)(*((_QWORD *)this + 14) + 168);
      }
      else
      {
        v21 = *((_QWORD *)this + 38);
        if (v21 && *(_BYTE *)(v21 + 31) == 1)
          v22 = (float *)(v21 + 32);
        else
          v22 = (float *)((char *)this + 256);
      }
      v33 = v22[1];
      v34 = v22[2];
      v15 = (physx::NpRigidDynamic *)((char *)this + 96);
      v35 = *((float32x4_t *)this + 20);
      v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1);
      v37 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 2);
      v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 3);
      _Q7 = vaddq_f32(v35, v35);
      *(int32x2_t *)v35.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)_Q7.f32), 0);
      v40 = vmul_lane_f32(v36, *(float32x2_t *)_Q7.f32, 1);
      v41 = vmul_laneq_f32(v37, _Q7, 2);
      v42 = vmul_n_f32(v36, _Q7.f32[0]);
      v43 = vmul_n_f32(v37, _Q7.f32[0]);
      v44 = vmul_n_f32(v38, _Q7.f32[0]);
      v45 = vmul_lane_f32(v37, *(float32x2_t *)_Q7.f32, 1);
      v46 = vmul_lane_f32(v38, *(float32x2_t *)_Q7.f32, 1);
      v47 = vmul_laneq_f32(v38, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v35.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v35.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v42, v47);
      v52 = vsub_f32(v43, v46).f32[0];
      v53 = (int8x8_t)vsub_f32(v42, v47);
      v54 = vsub_f32(*(float32x2_t *)v35.f32, v41);
      v55 = vadd_f32(v45, v44).f32[0];
      v56 = (int8x8_t)vadd_f32(v43, v46);
      v57 = (int8x8_t)vsub_f32(v45, v44);
      v35.f32[0] = vsub_f32(*(float32x2_t *)v35.f32, v40).f32[0];
      v41.i32[0] = a3[1].i32[0];
      v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v58.f32[0] = (float)(1.0 - v40.f32[1]) - v41.f32[1];
      v40.f32[0] = v41.f32[0]
                 * vmlas_n_f32(vmlas_n_f32((float)(v33 * v55) * v55, *v22 * v52, v52), v34 * v35.f32[0], v35.f32[0]);
      v59 = vmul_n_f32(v58, *v22);
      v60 = (float32x2_t)vext_s8(v53, (int8x8_t)v54, 4uLL);
      v61 = vmul_n_f32(v60, v33);
      v62 = (float32x2_t)vext_s8(v56, v57, 4uLL);
      v63 = vmul_n_f32(v62, v34);
      v64 = vmla_f32(vmla_f32(vmul_f32(v60, v61), v58, v59), v62, v63);
      v54.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v61, v54).f32[0], _Q7.f32[0], v59.f32[0]), *(float *)v57.i32, v63.f32[0]);
      v65 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v61, v55), v59, v52), v63, v35.f32[0]);
      v66 = vadd_f32(vmul_n_f32(v65, v41.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v54.f32[0])), vmul_f32(*a3, v64)));
      v67 = v40.f32[0] + vaddv_f32(vmul_f32(*a3, v65));
      v101 = *(double *)&v66;
      v102 = v67;
      v68 = *((_DWORD *)this + 26);
      if (v68 >> 30 != 2)
      {
        if (v68 >> 30 == 3)
        {
          v17 = *(_QWORD **)v15;
          goto LABEL_42;
        }
        v17 = *(_QWORD **)v15;
LABEL_47:
        v29 = v17[548];
        v31 = &v103;
        v32 = &v101;
        v30 = (physx::Sc::BodySim **)((char *)this + 128);
        goto LABEL_48;
      }
      v17 = *(_QWORD **)v15;
      if (!*(_BYTE *)(*(_QWORD *)v15 + 7689))
        goto LABEL_47;
LABEL_42:
      v26 = (float32x2_t *)*((_QWORD *)this + 14);
      if (!v26)
      {
        physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v68) & 0xF);
        v26 = v98;
        *((_QWORD *)this + 14) = v98;
        v17 = (_QWORD *)*((_QWORD *)this + 12);
      }
      v26[37].f32[1] = v18;
      v26[38].f32[0] = v19;
      v26[38].f32[1] = v20;
      v28 = (int8x8_t)vadd_f32(v66, v26[39]);
      v26[39] = (float32x2_t)v28;
      *(float *)v28.i32 = v67 + v26[40].f32[0];
LABEL_45:
      v26[40].i32[0] = v28.i32[0];
      physx::Scb::Scene::scheduleForUpdate(v17, v15, v28);
      *((_DWORD *)this + 95) |= 0x30000u;
LABEL_49:
      LODWORD(a5) = v5->i32[0];
      v99 = 1;
      if (v5->f32[0] == 0.0)
      {
        LODWORD(a5) = v5->i32[1];
        if (*(float *)&a5 == 0.0)
        {
          LODWORD(a5) = v5[1].i32[0];
          v99 = *(float *)&a5 != 0.0;
        }
      }
      return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(this, (physx::NpRigidDynamic *)((char *)this + 96), v99, 1, a5);
    case 1:
      v11 = *((_DWORD *)this + 95);
      if ((v11 & 1) != 0)
      {
        v13 = (float *)(*((_QWORD *)this + 14) + 164);
      }
      else
      {
        v12 = *((_QWORD *)this + 38);
        if (v12 && *(_BYTE *)(v12 + 31) == 1)
          v13 = (float *)(v12 + 44);
        else
          v13 = (float *)((char *)this + 268);
      }
      v23 = *v13 * a2[1].f32[0];
      v103 = vmul_n_f32(*a2, *v13);
      v104 = v23;
      if ((v11 & 2) != 0)
      {
        v25 = (float *)(*((_QWORD *)this + 14) + 168);
      }
      else
      {
        v24 = *((_QWORD *)this + 38);
        if (v24 && *(_BYTE *)(v24 + 31) == 1)
          v25 = (float *)(v24 + 32);
        else
          v25 = (float *)((char *)this + 256);
      }
      v69 = v25[1];
      v70 = v25[2];
      v71 = *((float32x4_t *)this + 20);
      v72 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.f32, 1);
      v73 = (float32x2_t)vdup_laneq_s32((int32x4_t)v71, 2);
      v74 = (float32x2_t)vdup_laneq_s32((int32x4_t)v71, 3);
      v14 = (physx::NpRigidDynamic *)((char *)this + 96);
      _Q7 = vaddq_f32(v71, v71);
      *(int32x2_t *)v71.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)_Q7.f32), 0);
      v76 = vmul_lane_f32(v72, *(float32x2_t *)_Q7.f32, 1);
      v77 = vmul_laneq_f32(v73, _Q7, 2);
      v78 = vmul_n_f32(v72, _Q7.f32[0]);
      v79 = vmul_n_f32(v73, _Q7.f32[0]);
      v80 = vmul_n_f32(v74, _Q7.f32[0]);
      v81 = vmul_lane_f32(v73, *(float32x2_t *)_Q7.f32, 1);
      v82 = vmul_lane_f32(v74, *(float32x2_t *)_Q7.f32, 1);
      v83 = vmul_laneq_f32(v74, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v71.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v71.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v78, v83);
      v84 = vsub_f32(v79, v82).f32[0];
      v85 = (int8x8_t)vsub_f32(v78, v83);
      v86 = vsub_f32(*(float32x2_t *)v71.f32, v77);
      v87 = vadd_f32(v81, v80).f32[0];
      v88 = (int8x8_t)vadd_f32(v79, v82);
      v89 = (int8x8_t)vsub_f32(v81, v80);
      v71.f32[0] = vsub_f32(*(float32x2_t *)v71.f32, v76).f32[0];
      v80.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v69 * v87) * v87, *v25 * v84, v84), v70 * v71.f32[0], v71.f32[0]);
      v77.i32[0] = a3[1].i32[0];
      v90 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v90.f32[0] = (float)(1.0 - v76.f32[1]) - v77.f32[1];
      v91 = vmul_n_f32(v90, *v25);
      v92 = (float32x2_t)vext_s8(v85, (int8x8_t)v86, 4uLL);
      v93 = vmul_n_f32(v92, v69);
      v94 = (float32x2_t)vext_s8(v88, v89, 4uLL);
      v95 = vmul_n_f32(v94, v70);
      v96 = vmla_f32(vmla_f32(vmul_f32(v92, v93), v90, v91), v94, v95);
      v86.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v93, v86).f32[0], _Q7.f32[0], v91.f32[0]), *(float *)v89.i32, v95.f32[0]);
      v97 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v93, v87), v91, v84), v95, v71.f32[0]);
      a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v97, v77.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v86.f32[0])), vmul_f32(*a3, v96))));
      v97.f32[0] = (float)(v77.f32[0] * v80.f32[0]) + vaddv_f32(vmul_f32(*a3, v97));
      v101 = a5;
      v102 = v97.f32[0];
      a2 = &v103;
      a3 = (float32x2_t *)&v101;
      goto LABEL_40;
    case 2:
      v14 = (physx::NpRigidDynamic *)((char *)this + 96);
LABEL_40:
      physx::Scb::Body::addSpatialVelocity(v14, a2, a3, a5);
      goto LABEL_49;
    case 3:
      v15 = (physx::NpRigidDynamic *)((char *)this + 96);
      v16 = *((_DWORD *)this + 26);
      if (v16 >> 30 == 2)
      {
        v17 = *(_QWORD **)v15;
        if (*(_BYTE *)(*(_QWORD *)v15 + 7689))
          goto LABEL_29;
      }
      else
      {
        if (v16 >> 30 == 3)
        {
          v17 = *(_QWORD **)v15;
LABEL_29:
          v26 = (float32x2_t *)*((_QWORD *)this + 14);
          if (!v26)
          {
            physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v16) & 0xF);
            v26 = v27;
            *((_QWORD *)this + 14) = v27;
            v17 = (_QWORD *)*((_QWORD *)this + 12);
          }
          *(float32x2_t *)((char *)v26 + 300) = *v5;
          v26[38].i32[1] = v5[1].i32[0];
          v28 = (int8x8_t)vadd_f32(*v7, v26[39]);
          v26[39] = (float32x2_t)v28;
          *(float *)v28.i32 = v7[1].f32[0] + v26[40].f32[0];
          goto LABEL_45;
        }
        v17 = *(_QWORD **)v15;
      }
      v29 = v17[548];
      v30 = (physx::Sc::BodySim **)((char *)this + 128);
      v31 = v5;
      v32 = (double *)v7;
LABEL_48:
      physx::Sc::BodyCore::setSpatialAcceleration(v30, v29, (uint64_t)v31, (uint64_t)v32);
      goto LABEL_49;
    default:
      goto LABEL_49;
  }
}

_QWORD *physx::NpRigidDynamic::addTorque(float32x4_t *a1, float32x2_t *a2, int a3, int a4, double a5)
{
  double v8;
  _BOOL4 v9;

  physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::addSpatialForce(a1, 0, a2, a3, a5);
  LODWORD(v8) = a2->i32[0];
  v9 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v8) = a2->i32[1];
    if (*(float *)&v8 == 0.0)
    {
      LODWORD(v8) = a2[1].i32[0];
      v9 = *(float *)&v8 != 0.0;
    }
  }
  return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a1, (physx::Scb::Body *)&a1[6], v9, a4, v8);
}

void physx::NpRigidDynamic::clearForce(uint64_t a1, int a2, int8x8_t a3)
{
  physx::NpRigidBodyTemplate<physx::PxArticulationLink>::clearSpatialForce(a1, a2, 1, 0, a3);
}

void physx::NpRigidDynamic::clearTorque(uint64_t a1, int a2, int8x8_t a3)
{
  physx::NpRigidBodyTemplate<physx::PxArticulationLink>::clearSpatialForce(a1, a2, 0, 1, a3);
}

BOOL physx::NpRigidDynamic::isSleeping(physx::NpRigidDynamic *this)
{
  return *((_DWORD *)this + 94) != 0;
}

uint64_t *physx::NpRigidDynamic::setSleepThreshold(physx::NpRigidDynamic *this, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;

  v2 = a2.i32[0];
  v4 = (physx::NpRigidDynamic *)((char *)this + 96);
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)this + 69) = a2.i32[0];
    return updateBodySim((uint64_t *)this + 16);
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = *((_QWORD *)this + 14);
  if (!v7)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    v7 = v8;
    *((_QWORD *)this + 14) = v8;
    v6 = (_QWORD *)*((_QWORD *)this + 12);
  }
  *(_DWORD *)(v7 + 196) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(v6, v4, a2);
  *((_DWORD *)this + 95) |= 0x40u;
  return result;
}

float physx::NpRigidDynamic::getSleepThreshold(physx::NpRigidDynamic *this)
{
  char *v1;

  if ((*((_BYTE *)this + 380) & 0x40) != 0)
    v1 = (char *)(*((_QWORD *)this + 14) + 196);
  else
    v1 = (char *)this + 276;
  return *(float *)v1;
}

uint64_t *physx::NpRigidDynamic::setStabilizationThreshold(physx::NpRigidDynamic *this, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;

  v2 = a2.i32[0];
  v4 = (physx::NpRigidDynamic *)((char *)this + 96);
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)this + 70) = a2.i32[0];
    return updateBodySim((uint64_t *)this + 16);
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = *((_QWORD *)this + 14);
  if (!v7)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    v7 = v8;
    *((_QWORD *)this + 14) = v8;
    v6 = (_QWORD *)*((_QWORD *)this + 12);
  }
  *(_DWORD *)(v7 + 256) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(v6, v4, a2);
  *((_DWORD *)this + 95) |= 0x1000u;
  return result;
}

float physx::NpRigidDynamic::getStabilizationThreshold(physx::NpRigidDynamic *this)
{
  char *v1;

  if ((*((_BYTE *)this + 381) & 0x10) != 0)
    v1 = (char *)(*((_QWORD *)this + 14) + 256);
  else
    v1 = (char *)this + 280;
  return *(float *)v1;
}

_QWORD *physx::NpRigidDynamic::setWakeCounter(physx::NpRigidDynamic *this, double a2)
{
  return physx::Scb::Body::setWakeCounter((physx::NpRigidDynamic *)((char *)this + 96), a2);
}

float physx::NpRigidDynamic::getWakeCounter(physx::NpRigidDynamic *this)
{
  return *((float *)this + 93);
}

_QWORD *physx::NpRigidDynamic::wakeUp(physx::NpRigidDynamic *this, double a2)
{
  uint64_t v3;
  physx::Scb::Base *v4;
  int v5;
  _QWORD *result;

  v4 = (physx::NpRigidDynamic *)((char *)this + 96);
  v3 = *((_QWORD *)this + 12);
  LODWORD(a2) = *(_DWORD *)(v3 + 8176);
  v5 = *((_DWORD *)v4 + 2) >> 30;
  if (v5 == 3 || v5 == 2 && *(_BYTE *)(v3 + 7689))
  {
    *((_DWORD *)this + 94) = 0;
    *((_DWORD *)this + 93) = LODWORD(a2);
    result = physx::Scb::Scene::scheduleForUpdate((_QWORD *)v3, v4, *(int8x8_t *)&a2);
    *((_DWORD *)this + 95) = *((_DWORD *)this + 95) & 0xF8FFFFFF | 0x5000000;
  }
  else
  {
    *((_DWORD *)this + 94) = 0;
    *((_DWORD *)this + 93) = LODWORD(a2);
    return (_QWORD *)physx::Sc::BodyCore::setWakeCounter((uint64_t)this + 128, *(float *)&a2, 1);
  }
  return result;
}

_QWORD *physx::NpRigidDynamic::putToSleep(physx::NpRigidDynamic *this, int8x8_t a2)
{
  return physx::Scb::Body::putToSleepInternal((physx::NpRigidDynamic *)((char *)this + 96), a2);
}

_QWORD *physx::NpRigidDynamic::setSolverIterationCounts(_QWORD *this, unsigned __int8 a2, __int16 a3, int8x8_t a4)
{
  _QWORD *v4;
  physx::Scb::Base *v5;
  __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = this;
  v5 = (physx::Scb::Base *)(this + 12);
  v6 = a2 | (unsigned __int16)(a3 << 8);
  v7 = *((_DWORD *)this + 26);
  if (v7 >> 30 == 2)
  {
    this = *(_QWORD **)v5;
    if (*(_BYTE *)(*(_QWORD *)v5 + 7689))
      goto LABEL_5;
  }
  else if (v7 >> 30 == 3)
  {
    this = *(_QWORD **)v5;
LABEL_5:
    v8 = v4[14];
    if (!v8)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v7) & 0xF).n128_u64[0];
      v8 = v9;
      v4[14] = v9;
      this = (_QWORD *)v4[12];
    }
    *(_WORD *)(v8 + 208) = v6;
    this = physx::Scb::Scene::scheduleForUpdate(this, v5, a4);
    *((_DWORD *)v4 + 95) |= 0x200u;
    return this;
  }
  *((_WORD *)v4 + 87) = v6;
  v10 = v4[16];
  if (v10)
    *(_WORD *)(v10 + 126) = v6;
  return this;
}

uint64_t physx::NpRigidDynamic::getSolverIterationCounts(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  unsigned __int16 *v3;
  unsigned int v4;

  if ((*(_BYTE *)(this + 381) & 2) != 0)
    v3 = (unsigned __int16 *)(*(_QWORD *)(this + 112) + 208);
  else
    v3 = (unsigned __int16 *)(this + 174);
  v4 = *v3;
  *a3 = v4 >> 8;
  *a2 = v4;
  return this;
}

float *physx::NpRigidDynamic::setContactReportThreshold(float *this, double a2)
{
  float *v2;
  physx::Scb::Base *v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this;
  v3 = (physx::Scb::Base *)(this + 24);
  if (*(float *)&a2 >= 0.0)
    v4 = *(float *)&a2;
  else
    v4 = 0.0;
  v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(float **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_8;
LABEL_11:
    v2[59] = v4;
    return this;
  }
  if (v5 >> 30 != 3)
    goto LABEL_11;
  this = *(float **)v3;
LABEL_8:
  v6 = *((_QWORD *)v2 + 14);
  if (!v6)
  {
    *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    *((_QWORD *)v2 + 14) = v7;
    this = (float *)*((_QWORD *)v2 + 12);
  }
  *(float *)(v6 + 204) = v4;
  this = (float *)physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
  *((_DWORD *)v2 + 95) |= 0x100u;
  return this;
}

float physx::NpRigidDynamic::getContactReportThreshold(physx::NpRigidDynamic *this)
{
  char *v1;

  if ((*((_BYTE *)this + 381) & 1) != 0)
    v1 = (char *)(*((_QWORD *)this + 14) + 204);
  else
    v1 = (char *)this + 236;
  return *(float *)v1;
}

_QWORD *physx::NpRigidDynamic::switchToNoSim(physx::NpRigidDynamic *this, int8x8_t a2)
{
  physx::Scb::Scene *v3;
  physx::Scb::Body *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v4 = (physx::NpRigidDynamic *)((char *)this + 96);
  v3 = (physx::Scb::Scene *)*((_QWORD *)this + 12);
  if (v3)
  {
    if (*((_BYTE *)v3 + 7689) || (physx::Scb::Scene::switchRigidToNoSim(v3, v4, 1), *(_BYTE *)(*(_QWORD *)v4 + 7689)))
    {
      result = physx::Scb::Body::putToSleepInternal(v4, a2);
    }
    else
    {
      *(_QWORD *)((char *)this + 364) = 0;
      *(_QWORD *)((char *)this + 372) = 0x100000000;
      *(_QWORD *)((char *)this + 348) = 0;
      *(_QWORD *)((char *)this + 356) = 0;
      result = (_QWORD *)physx::Sc::BodyCore::putToSleep((physx::NpRigidDynamic *)((char *)this + 128));
    }
    if (*((_DWORD *)this + 26) >> 30 == 1)
    {
      v6 = *((_QWORD *)this + 38);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)v4 + 4384);
        if (*(_BYTE *)(v6 + 31) == 1)
        {
          return (_QWORD *)physx::Sc::BodyCore::tearDownSimStateData((uint64_t)this + 128, v7, 1);
        }
        else
        {
          --*(_DWORD *)(v7 + 548);
          *(_QWORD *)v6 = *(_QWORD *)(v7 + 560);
          *(_QWORD *)(v7 + 560) = v6;
          *((_QWORD *)this + 38) = 0;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)((char *)this + 364) = 0;
    *(_QWORD *)((char *)this + 372) = 0x100000000;
    *(_QWORD *)((char *)this + 348) = 0;
    *(_QWORD *)((char *)this + 356) = 0;
    return (_QWORD *)physx::Sc::BodyCore::putToSleep((physx::NpRigidDynamic *)((char *)this + 128));
  }
  return result;
}

uint64_t physx::NpRigidDynamic::switchFromNoSim(physx::NpRigidDynamic *this)
{
  uint64_t result;
  physx::Scb::RigidObject *v2;

  v2 = (physx::NpRigidDynamic *)((char *)this + 96);
  result = *((_QWORD *)this + 12);
  if (result)
  {
    if (!*(_BYTE *)(result + 7689))
      return physx::Scb::Scene::switchRigidFromNoSim(result, v2, 1);
  }
  return result;
}

uint64_t physx::NpRigidDynamic::getRigidDynamicLockFlags@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  if ((*(_BYTE *)(this + 381) & 0x40) != 0)
    v2 = (_BYTE *)(*(_QWORD *)(this + 112) + 264);
  else
    v2 = (_BYTE *)(this + 302);
  *a2 = *v2;
  return this;
}

_QWORD *physx::NpRigidDynamic::setRigidDynamicLockFlags(_QWORD *result, char *a2, int8x8_t a3)
{
  _QWORD *v3;
  physx::Scb::Base *v4;
  char v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = (physx::Scb::Base *)(result + 12);
  v5 = *a2;
  v6 = *((_DWORD *)result + 26);
  if (v6 >> 30 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_BYTE *)v3 + 302) = v5;
    return result;
  }
  if (v6 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v4;
LABEL_5:
  v7 = v3[14];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
    v7 = v8;
    v3[14] = v8;
    result = (_QWORD *)v3[12];
  }
  *(_BYTE *)(v7 + 264) = v5;
  result = physx::Scb::Scene::scheduleForUpdate(result, v4, a3);
  *((_DWORD *)v3 + 95) |= 0x4000u;
  return result;
}

_QWORD *physx::NpRigidDynamic::setRigidDynamicLockFlag(_QWORD *result, char a2, int a3, int8x8_t a4)
{
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v4 = result;
  if ((*((_BYTE *)result + 381) & 0x40) != 0)
    v5 = (char *)(result[14] + 264);
  else
    v5 = (char *)result + 302;
  v6 = result + 12;
  v7 = *v5;
  v8 = v7 | a2;
  v9 = v7 & ~a2;
  if (a3)
    v10 = v8;
  else
    v10 = v9;
  v11 = *((_DWORD *)result + 26);
  if (v11 >> 30 == 2)
  {
    result = (_QWORD *)*v6;
    if (*(_BYTE *)(*v6 + 7689))
      goto LABEL_11;
LABEL_14:
    *((_BYTE *)v4 + 302) = v10;
    return result;
  }
  if (v11 >> 30 != 3)
    goto LABEL_14;
  result = (_QWORD *)*v6;
LABEL_11:
  v12 = v4[14];
  if (!v12)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v11) & 0xF).n128_u64[0];
    v12 = v13;
    v4[14] = v13;
    result = (_QWORD *)v4[12];
  }
  *(_BYTE *)(v12 + 264) = v10;
  result = physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)(v4 + 12), a4);
  *((_DWORD *)v4 + 95) |= 0x4000u;
  return result;
}

float physx::NpRigidStatic::NpRigidStatic(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 8) = 196614;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0x10000;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24ED95158;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0xFFFFFF;
  *(_WORD *)(a1 + 140) = 1;
  *(_BYTE *)(a1 + 142) = 0;
  *(_BYTE *)(a1 + 173) = 0;
  *(_WORD *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 168) = result;
  *(_BYTE *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 104) = 83886080;
  return result;
}

physx::PxActor *physx::NpRigidActorTemplate<physx::PxRigidStatic>::~NpRigidActorTemplate(physx::PxActor *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED96668;
  v2 = *(_QWORD *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 40, v2);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 56, v2);
  *(_QWORD *)a1 = off_24ED96780;
  physx::NpFactory::onActorRelease(physx::NpFactory::mInstance, a1);
  return a1;
}

void physx::NpRigidStatic::~NpRigidStatic(physx::PxActor *this)
{
  *(_QWORD *)this = off_24ED95158;
  physx::NpRigidActorTemplate<physx::PxRigidStatic>::~NpRigidActorTemplate(this);
}

void physx::NpRigidStatic::~NpRigidStatic(physx::NpRigidStatic *this)
{
  *(_QWORD *)this = off_24ED95158;
  physx::NpRigidActorTemplate<physx::PxRigidStatic>::~NpRigidActorTemplate(this);
  (*(void (**)(uint64_t, physx::NpRigidStatic *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::NpRigidStatic::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned __int16 *)(result + 48);
  if (*(_WORD *)(result + 48))
  {
    v4 = result;
    v5 = 0;
    v6 = (_QWORD *)(result + 40);
    v7 = 8 * v2 - 8;
    while (1)
    {
      v8 = v6;
      if ((_DWORD)v2 != 1)
        v8 = (_QWORD *)*v6;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v8[v5 / 8]);
      if (v7 == v5)
        break;
      LODWORD(v2) = *(unsigned __int16 *)(v4 + 48);
      v5 += 8;
    }
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned __int16 *)(result + 48);
  if (*(_WORD *)(result + 48))
  {
    v4 = result;
    v5 = 0;
    v6 = (_QWORD *)(result + 40);
    v7 = 8 * v2 - 8;
    while (1)
    {
      v8 = v6;
      if ((_DWORD)v2 != 1)
        v8 = (_QWORD *)*v6;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v8[v5 / 8]);
      if (v7 == v5)
        break;
      LODWORD(v2) = *(unsigned __int16 *)(v4 + 48);
      v5 += 8;
    }
  }
  return result;
}

uint64_t physx::NpRigidStatic::release(physx::NpRigidStatic *this)
{
  physx::Scb::Base *v2;
  int8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  int8x8_t v7;
  __n128 v8;
  unsigned int v10;

  v2 = (physx::NpRigidStatic *)((char *)this + 96);
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, *((_QWORD *)this + 2), 1);
  v4 = *((unsigned int *)this + 26);
  if ((v4 >> 30) - 1 > 1)
    v5 = 0;
  else
    v5 = *(_QWORD *)v2;
  v6 = *((_BYTE *)v2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12);
  if (v5 && (*((_BYTE *)v2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12) & 8) != 0)
  {
    physx::NpShapeManager::clearShapesOnRelease((uint64_t)this + 40, v5);
    physx::NpRigidActorTemplate<physx::PxRigidStatic>::release(this, v7);
LABEL_8:
    physx::Scb::Scene::removeActor(v5, v2, 1, (v6 & 8) != 0, v8);
    v10 = *((_DWORD *)this + 22);
    physx::NpScene::removeFromRigidActorList(v5 - 16, &v10);
    return physx::Scb::Base::destroy((uint64_t)v2);
  }
  physx::NpRigidActorTemplate<physx::PxRigidStatic>::release(this, v3);
  if (v5)
    goto LABEL_8;
  return physx::Scb::Base::destroy((uint64_t)v2);
}

physx::Sc::RigidSim *physx::NpRigidStatic::setGlobalPose(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  physx::Sc::RigidSim *result;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;

  v10 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v10 + 8) >> 30) - 1) > 1)
  {
    v12 = 0;
  }
  else
  {
    v11 = *(_QWORD *)v10;
    if (v11)
      v12 = v11 - 16;
    else
      v12 = 0;
  }
  v13 = a1 + 96;
  LODWORD(a3) = *(_DWORD *)a2;
  v14 = *(float *)(a2 + 4);
  v15 = *(float *)(a2 + 8);
  v16 = *(float *)(a2 + 12);
  v17 = sqrtf((float)((float)((float)(v14 * v14) + (float)(*(float *)&a3 * *(float *)&a3)) + (float)(v15 * v15))+ (float)(v16 * v16));
  v18 = *(float *)a2 / v17;
  v19 = v14 / v17;
  v20 = v15 / v17;
  v21 = v16 / v17;
  v23 = *(_DWORD *)(a2 + 16);
  v22 = *(_DWORD *)(a2 + 20);
  v24 = *(_DWORD *)(a2 + 24);
  v25 = *(_DWORD *)(a1 + 104);
  if (v25 >> 30 == 2)
  {
    v26 = *(_QWORD **)v13;
    if (*(_BYTE *)(*(_QWORD *)v13 + 7689))
      goto LABEL_10;
LABEL_13:
    *(float *)(a1 + 144) = v18;
    *(float *)(a1 + 148) = v19;
    *(float *)(a1 + 152) = v20;
    *(float *)(a1 + 156) = v21;
    *(_DWORD *)(a1 + 160) = v23;
    *(_DWORD *)(a1 + 164) = v22;
    *(_DWORD *)(a1 + 168) = v24;
    result = *(physx::Sc::RigidSim **)(a1 + 128);
    if (result)
      result = (physx::Sc::RigidSim *)physx::Sc::RigidSim::notifyShapesOfTransformChange(result);
    goto LABEL_15;
  }
  if (v25 >> 30 != 3)
    goto LABEL_13;
  v26 = *(_QWORD **)v13;
LABEL_10:
  v27 = *(_QWORD *)(a1 + 112);
  if (!v27)
  {
    *(_QWORD *)&a3 = physx::Scb::Scene::getStream((uint64_t)v26, HIBYTE(v25) & 0xF).n128_u64[0];
    v27 = v28;
    *(_QWORD *)(a1 + 112) = v28;
    v26 = *(_QWORD **)(a1 + 96);
  }
  *(float *)(v27 + 176) = v18;
  *(float *)(v27 + 180) = v19;
  *(float *)(v27 + 184) = v20;
  *(float *)(v27 + 188) = v21;
  *(_DWORD *)(v27 + 192) = v23;
  *(_DWORD *)(v27 + 196) = v22;
  *(_DWORD *)(v27 + 200) = v24;
  result = (physx::Sc::RigidSim *)physx::Scb::Scene::scheduleForUpdate(v26, (physx::Scb::Base *)(a1 + 96), *(int8x8_t *)&a3);
  *(_DWORD *)(a1 + 104) |= 0x40u;
LABEL_15:
  if (v12)
  {
    result = (physx::Sc::RigidSim *)physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v12 + 8640, (_WORD *)a1);
    ++*(_DWORD *)(v12 + 8684);
  }
  if (*(_QWORD *)(a1 + 80))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidStatic.cpp", 101, "PxRigidStatic::setGlobalPose: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v41);
    result = (physx::Sc::RigidSim *)physx::Sq::PruningStructure::invalidate(*(_QWORD *)(a1 + 80), a1);
  }
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 72);
    v32 = *(_DWORD *)(v30 + 80);
  }
  else
  {
    v32 = 0;
    v31 = 0;
  }
  v33 = 0;
LABEL_23:
  if (v33 <= v32)
    v34 = v32;
  else
    v34 = v33;
  v35 = (unsigned __int8 *)(v31 + 16 * v33);
  v36 = v34 - v33 + 1;
  while (--v36)
  {
    v37 = v35 + 16;
    ++v33;
    v38 = *v35;
    v35 += 16;
    if (!v38)
    {
      v39 = (_QWORD *)*((_QWORD *)v37 - 1);
      if (!v39)
        return result;
      v40 = v39[11];
      if (v39[2] == a1)
        result = (physx::Sc::RigidSim *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v40 + 24))(v39[11], 0);
      if (v39[3] == a1)
        result = (physx::Sc::RigidSim *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 24))(v40, 1);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t physx::NpShapeManager::markAllSceneQueryForUpdate(uint64_t result, uint64_t a2, _WORD *a3)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[3];

  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 == -1)
  {
    v6 = result;
    if (*(_WORD *)(result + 8))
    {
      v7 = 0;
      v8 = (uint64_t *)(result + 16);
      v9 = 8 * *(unsigned __int16 *)(result + 8);
      do
      {
        v10 = v6 + 16;
        if (*(_WORD *)(v6 + 24) != 1)
          v10 = *v8;
        v11 = *(_QWORD *)(v10 + v7);
        if (v11 != 0xFFFFFFFF)
        {
          *(_BYTE *)(a2 + 208) = 1;
          result = physx::Sq::PrunerExt::addToDirtyList(a2 + 48 * (v11 & 1), v11 >> 1);
        }
        v7 += 8;
      }
      while (v9 != v7);
    }
  }
  else
  {
    v5 = (a3[4] & 0xFFF7) == 5;
    (*(void (**)(_QWORD *__return_ptr, _WORD *))(*(_QWORD *)a3 + 152))(v12, a3);
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a2 + 96) + 16))(*(_QWORD *)(a2 + 96), v4, v12);
    ++*(_DWORD *)(a2 + 48 * v5 + 44);
  }
  return result;
}

float physx::NpRigidStatic::getGlobalPose@<S0>(physx::NpRigidStatic *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  float result;

  if ((*((_BYTE *)this + 104) & 0x40) != 0)
    v2 = (char *)(*((_QWORD *)this + 14) + 176);
  else
    v2 = (char *)this + 144;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  result = *((float *)v2 + 6);
  *(float *)(a2 + 24) = result;
  return result;
}

void physx::NpRigidStatic::switchToNoSim(physx::NpRigidStatic *this)
{
  physx::Scb::Scene *v1;
  physx::Scb::RigidObject *v2;

  v2 = (physx::NpRigidStatic *)((char *)this + 96);
  v1 = (physx::Scb::Scene *)*((_QWORD *)this + 12);
  if (v1)
  {
    if (!*((_BYTE *)v1 + 7689))
      physx::Scb::Scene::switchRigidToNoSim(v1, v2, 0);
  }
}

uint64_t physx::NpRigidStatic::switchFromNoSim(physx::NpRigidStatic *this)
{
  uint64_t result;
  physx::Scb::RigidObject *v2;

  v2 = (physx::NpRigidStatic *)((char *)this + 96);
  result = *((_QWORD *)this + 12);
  if (result)
  {
    if (!*(_BYTE *)(result + 7689))
      return physx::Scb::Scene::switchRigidFromNoSim(result, v2, 0);
  }
  return result;
}

uint64_t physx::NpScene::NpScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  pthread_key_t v7;

  *(_QWORD *)a1 = off_24ED95270;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 16;
  physx::Scb::Scene::Scene(a1 + 16, a2, a1);
  physx::Sq::SceneQueryManager::SceneQueryManager(a1 + 8640, v4, *(_DWORD *)(a2 + 176), *(_DWORD *)(a2 + 180), *(unsigned int *)(a2 + 184), a2 + 96);
  *(_QWORD *)(a1 + 8856) = gRaycastMap;
  *(_QWORD *)(a1 + 8864) = gGeomSweepFuncs;
  *(_QWORD *)(a1 + 8872) = gGeomOverlapMethodTable;
  *(_OWORD *)(a1 + 8896) = 0u;
  *(_DWORD *)(a1 + 8912) = 0;
  *(_QWORD *)(a1 + 8888) = a1;
  *(_QWORD *)(a1 + 8880) = off_24ED96950;
  *(_QWORD *)(a1 + 8928) = "NpSceneQueries.sceneQueriesStaticPrunerUpdate";
  *(_OWORD *)(a1 + 8952) = 0u;
  *(_DWORD *)(a1 + 8968) = 0;
  *(_QWORD *)(a1 + 8944) = a1;
  *(_QWORD *)(a1 + 8936) = off_24ED969E0;
  *(_QWORD *)(a1 + 8984) = "NpSceneQueries.sceneQueriesDynamicPrunerUpdate";
  *(_DWORD *)(a1 + 8992) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 8920) = a1;
  *(_QWORD *)(a1 + 8976) = a1;
  *(_QWORD *)a1 = off_24ED95638;
  *(_QWORD *)(a1 + 9000) = off_24ED8B800;
  *(_OWORD *)(a1 + 9008) = 0u;
  *(_OWORD *)(a1 + 9024) = 0u;
  *(_OWORD *)(a1 + 9040) = 0u;
  *(_OWORD *)(a1 + 9056) = 0u;
  *(_OWORD *)(a1 + 9072) = 0u;
  *(_OWORD *)(a1 + 9088) = 0u;
  *(_OWORD *)(a1 + 9104) = 0u;
  *(_QWORD *)(a1 + 9120) = 0;
  *(_QWORD *)(a1 + 9128) = -3233808384;
  *(_QWORD *)(a1 + 9136) = 0;
  physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 9088, 0x40u, 0);
  *(_QWORD *)(a1 + 9192) = 0;
  *(_OWORD *)(a1 + 9160) = 0u;
  *(_OWORD *)(a1 + 9176) = 0u;
  *(_OWORD *)(a1 + 9144) = 0u;
  *(_QWORD *)(a1 + 9200) = -3233808384;
  *(_QWORD *)(a1 + 9208) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 9160, 0x40u, 0);
  *(_QWORD *)(a1 + 9248) = 0;
  *(_OWORD *)(a1 + 9232) = 0u;
  *(_OWORD *)(a1 + 9216) = 0u;
  *(_QWORD *)(a1 + 9256) = -3233808384;
  *(_QWORD *)(a1 + 9264) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 9216, 0x40u, 0);
  *(_OWORD *)(a1 + 9272) = 0u;
  *(_QWORD *)(a1 + 9288) = *(_QWORD *)(a2 + 236);
  *(_QWORD *)(a1 + 9296) = *(_QWORD *)(a2 + 244);
  *(_QWORD *)(a1 + 9304) = *(_QWORD *)(a2 + 252);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(a1 + 9312));
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(a1 + 9320));
  v5 = physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(a1 + 9328));
  *(_DWORD *)(a1 + 9340) = 1;
  *(_OWORD *)(a1 + 9344) = 0u;
  *(_QWORD *)(a1 + 9400) = 0;
  *(_QWORD *)(a1 + 9392) = 0;
  *(_DWORD *)(a1 + 9408) = 0;
  *(_QWORD *)(a1 + 9384) = a1;
  *(_QWORD *)(a1 + 9376) = &off_24ED96880;
  *(_QWORD *)(a1 + 9416) = a1 + 9312;
  *(_QWORD *)(a1 + 9448) = 0;
  *(_QWORD *)(a1 + 9440) = 0;
  *(_DWORD *)(a1 + 9456) = 0;
  *(_QWORD *)(a1 + 9432) = a1;
  *(_QWORD *)(a1 + 9424) = &off_24ED96880;
  *(_QWORD *)(a1 + 9464) = a1 + 9320;
  *(_QWORD *)(a1 + 9496) = 0;
  *(_QWORD *)(a1 + 9488) = 0;
  *(_DWORD *)(a1 + 9504) = 0;
  *(_QWORD *)(a1 + 9480) = a1;
  *(_QWORD *)(a1 + 9472) = &off_24ED96880;
  *(_QWORD *)(a1 + 9512) = v5;
  *(_QWORD *)(a1 + 9536) = 0;
  *(_QWORD *)(a1 + 9544) = 0;
  *(_DWORD *)(a1 + 9552) = 0;
  *(_QWORD *)(a1 + 9528) = a1;
  *(_QWORD *)(a1 + 9520) = off_24ED96A70;
  *(_QWORD *)(a1 + 9560) = 0;
  *(_QWORD *)(a1 + 9568) = "NpScene.execution";
  *(_QWORD *)(a1 + 9600) = 0;
  *(_QWORD *)(a1 + 9592) = 0;
  *(_DWORD *)(a1 + 9608) = 0;
  *(_QWORD *)(a1 + 9584) = a1;
  *(_QWORD *)(a1 + 9576) = off_24ED96B00;
  *(_QWORD *)(a1 + 9616) = 0;
  *(_QWORD *)(a1 + 9624) = "NpScene.collide";
  *(_QWORD *)(a1 + 9656) = 0;
  *(_QWORD *)(a1 + 9648) = 0;
  *(_DWORD *)(a1 + 9664) = 0;
  *(_QWORD *)(a1 + 9640) = a1;
  *(_QWORD *)(a1 + 9632) = off_24ED96B90;
  *(_QWORD *)(a1 + 9672) = 0;
  *(_QWORD *)(a1 + 9680) = "NpScene.solve";
  *(_BYTE *)(a1 + 9688) = 0;
  *(_DWORD *)(a1 + 9692) = 0;
  *(_DWORD *)(a1 + 9696) = 0;
  *(_DWORD *)(a1 + 9700) = 0;
  *(_DWORD *)(a1 + 9704) = 0;
  *(_QWORD *)(a1 + 9712) = 0;
  physx::shdfnd::ReadWriteLock::ReadWriteLock((physx::shdfnd::ReadWriteLock *)(a1 + 9720));
  *(_DWORD *)(a1 + 9728) = 0;
  *(_QWORD *)(a1 + 9560) = a1;
  *(_QWORD *)(a1 + 9616) = a1;
  *(_QWORD *)(a1 + 9672) = a1;
  *(_OWORD *)(a1 + 9360) = *(_OWORD *)(a1 + 7488);
  v7 = 0;
  pthread_key_create(&v7, 0);
  *(_DWORD *)(a1 + 9708) = v7;
  return a1;
}

_QWORD *physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

void physx::NpScene::~NpScene(physx::NpScene *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  physx::NpScene *v30;
  int v31;
  physx::NpScene *v32;
  unsigned int v33;
  unint64_t v34;
  void (***v35)(void);
  void (**v36)(void);
  int v37;
  unsigned int v38;
  unint64_t v39;
  void (***v40)(void);
  void (**v41)(void);
  int v42;
  unsigned int v43;
  unint64_t v44;
  void (***v45)(void);
  void (**v46)(void);
  int v47;
  unsigned int v48;
  unint64_t v49;
  void (***v50)(void);
  void (**v51)(void);
  int v52;
  unsigned int v53;
  unint64_t v54;
  void (***v55)(void);
  void (**v56)(void);
  int v57;
  unsigned int v58;
  unint64_t v59;
  void (***v60)(void);
  void (**v61)(void);
  int v62;
  int v63;
  physx::NpScene *v64;
  int v65;
  physx::NpScene *v66;
  int v67;
  physx::NpScene *v68;
  int v69;
  physx::NpScene *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  char *v84;
  int v85;
  int v86;
  physx::NpScene *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  char *v93;
  int v94;
  int v95;
  physx::NpScene *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  char *v102;
  int v103;
  int v104;
  physx::NpScene *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  char *v116;
  int v117;
  int v118;
  physx::NpScene *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  char *v125;
  int v126;
  int v127;
  physx::NpScene *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  char *v134;
  int v135;
  int v136;
  physx::NpScene *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t i;
  int v142;
  int v144;
  int v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;

  *(_QWORD *)this = off_24ED95638;
  v2 = *((_DWORD *)this + 2317);
  if (v2)
  {
    v3 = v2 - 1;
    do
    {
      v4 = v3;
      (*(void (**)(physx::NpScene *, _QWORD, _QWORD))(*(_QWORD *)this + 136))(this, *(_QWORD *)(*((_QWORD *)this + 1153) + 8 * v3--), 0);
    }
    while (v4);
  }
  v5 = *((_DWORD *)this + 2288);
  if (v5)
  {
    v6 = v5 - 1;
    do
    {
      v7 = v6;
      (*(void (**)(physx::NpScene *, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *(_QWORD *)(*((_QWORD *)this + 1143) + 8 * v6--), 0);
    }
    while (v7);
  }
  v8 = *((_DWORD *)this + 2303);
  if (v8)
  {
    v9 = v8 - 1;
    do
    {
      v10 = v9;
      (*(void (**)(physx::NpScene *, _QWORD, _QWORD))(*(_QWORD *)this + 80))(this, *(_QWORD *)(*((_QWORD *)this + 1146) + 8 * v9--), 0);
    }
    while (v10);
  }
  v11 = 8608;
  if ((*((_BYTE *)this + 8624) & 4) == 0)
    v11 = 4300;
  v12 = *(_DWORD *)((char *)this + v11);
  v13 = *((_DWORD *)this + 2320);
  if (v13)
  {
    v14 = v13 - 1;
    do
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 1159) + 8 * v14);
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
    }
    while ((unint64_t)v14--);
  }
  *((_DWORD *)this + 2320) = 0;
  v17 = (_QWORD *)((char *)this + 32);
  physx::Sc::Scene::release((physx::NpScene *)((char *)this + 32));
  *((_DWORD *)this + 1954) = 0;
  *((_DWORD *)this + 1958) = 0;
  *((_DWORD *)this + 1962) = 0;
  physx::Cm::FlushPool::clear((pthread_mutex_t **)this + 964);
  if ((v12 & 0x200) != 0)
    (*(void (**)(physx::NpScene *))(*(_QWORD *)this + 808))(this);
  pthread_key_delete(*((unsigned int *)this + 2427));
  physx::shdfnd::ReadWriteLock::~ReadWriteLock((pthread_mutex_t ***)this + 1215);
  *((_QWORD *)this + 1204) = off_24ED8BB00;
  *((_QWORD *)this + 1206) = 0;
  *((_QWORD *)this + 1197) = off_24ED8BB00;
  *((_QWORD *)this + 1199) = 0;
  *((_QWORD *)this + 1190) = off_24ED8BB00;
  *((_QWORD *)this + 1192) = 0;
  *((_QWORD *)this + 1184) = off_24ED8BB00;
  *((_QWORD *)this + 1186) = 0;
  *((_QWORD *)this + 1178) = off_24ED8BB00;
  *((_QWORD *)this + 1180) = 0;
  *((_QWORD *)this + 1172) = off_24ED8BB00;
  *((_QWORD *)this + 1174) = 0;
  v18 = *((_DWORD *)this + 2339);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1168))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1166);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1165);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1164);
  v19 = *((_DWORD *)this + 2321);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1159))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 1152))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 1145))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v20 = *((_DWORD *)this + 2289);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1143))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 1136))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Cm::RenderBuffer::~RenderBuffer((physx::NpScene *)((char *)this + 9000));
  *(_QWORD *)this = off_24ED95270;
  *((_QWORD *)this + 1117) = off_24ED8BB00;
  *((_QWORD *)this + 1119) = 0;
  *((_QWORD *)this + 1110) = off_24ED8BB00;
  *((_QWORD *)this + 1112) = 0;
  physx::Sq::SceneQueryManager::~SceneQueryManager((pthread_mutex_t **)this + 1080);
  if (*((_QWORD *)this + 1017))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 1010))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 1003))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 996))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 989))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 982))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v21 = *((_DWORD *)this + 1963);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 980))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v22 = *((_DWORD *)this + 1959);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 978))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v23 = *((_DWORD *)this + 1955);
  if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 976))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 969))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Cm::FlushPool::~FlushPool((physx::NpScene *)((char *)this + 7712));
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 962);
  v24 = *((_DWORD *)this + 1923);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 960))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 958) && (*((_DWORD *)this + 1918) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 958) = 0;
  if (*((_QWORD *)this + 956) && (*((_DWORD *)this + 1914) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 956) = 0;
  v25 = *((_DWORD *)this + 1911);
  if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 954))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v26 = *((_DWORD *)this + 1905);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 951))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v27 = *((_DWORD *)this + 1901);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 949))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v28 = *((_DWORD *)this + 1897);
  if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 947))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 940))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Cm::FlushPool::~FlushPool((physx::NpScene *)((char *)this + 7448));
  *((_QWORD *)this + 924) = off_24ED8BB00;
  *((_QWORD *)this + 926) = 0;
  *((_QWORD *)this + 917) = off_24ED8BB00;
  *((_QWORD *)this + 919) = 0;
  *((_QWORD *)this + 910) = off_24ED8BB00;
  *((_QWORD *)this + 912) = 0;
  *((_QWORD *)this + 903) = off_24ED8BB00;
  *((_QWORD *)this + 905) = 0;
  *((_QWORD *)this + 896) = off_24ED8BB00;
  *((_QWORD *)this + 898) = 0;
  *((_QWORD *)this + 889) = off_24ED8BB00;
  *((_QWORD *)this + 891) = 0;
  *((_QWORD *)this + 882) = off_24ED8BB00;
  *((_QWORD *)this + 884) = 0;
  *((_QWORD *)this + 875) = off_24ED8BB00;
  *((_QWORD *)this + 877) = 0;
  *((_QWORD *)this + 853) = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 873);
  v29 = *((_DWORD *)this + 1743);
  if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0)
  {
    v30 = (physx::NpScene *)*((_QWORD *)this + 870);
    if (v30 == (physx::NpScene *)((char *)this + 6920))
    {
      *((_BYTE *)this + 6952) = 0;
    }
    else if (v30)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v31 = *((_DWORD *)this + 1729);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0)
  {
    v32 = (physx::NpScene *)*((_QWORD *)this + 863);
    if (v32 == (physx::NpScene *)((char *)this + 6864))
    {
      *((_BYTE *)this + 6896) = 0;
    }
    else if (v32)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 846) = off_24ED8BB00;
  *((_QWORD *)this + 848) = 0;
  *((_QWORD *)this + 839) = off_24ED8BB00;
  *((_QWORD *)this + 841) = 0;
  *((_QWORD *)this + 832) = off_24ED8BB00;
  *((_QWORD *)this + 834) = 0;
  *((_QWORD *)this + 825) = off_24ED8BB00;
  *((_QWORD *)this + 827) = 0;
  *((_QWORD *)this + 818) = off_24ED8BB00;
  *((_QWORD *)this + 820) = 0;
  *((_QWORD *)this + 811) = off_24ED8BB00;
  *((_QWORD *)this + 813) = 0;
  *((_QWORD *)this + 804) = off_24ED8BB00;
  *((_QWORD *)this + 806) = 0;
  *((_QWORD *)this + 797) = off_24ED8BB00;
  *((_QWORD *)this + 799) = 0;
  *((_QWORD *)this + 790) = off_24ED8BB00;
  *((_QWORD *)this + 792) = 0;
  *((_QWORD *)this + 783) = off_24ED8BB00;
  *((_QWORD *)this + 785) = 0;
  *((_QWORD *)this + 776) = off_24ED8BB00;
  *((_QWORD *)this + 778) = 0;
  *((_QWORD *)this + 769) = off_24ED8BB00;
  *((_QWORD *)this + 771) = 0;
  *((_QWORD *)this + 762) = off_24ED8BB00;
  *((_QWORD *)this + 764) = 0;
  *((_QWORD *)this + 755) = off_24ED8BB00;
  *((_QWORD *)this + 757) = 0;
  *((_QWORD *)this + 748) = off_24ED8BB00;
  *((_QWORD *)this + 750) = 0;
  *((_QWORD *)this + 741) = off_24ED8BB00;
  *((_QWORD *)this + 743) = 0;
  *((_QWORD *)this + 734) = off_24ED8BB00;
  *((_QWORD *)this + 736) = 0;
  *((_QWORD *)this + 727) = off_24ED8BB00;
  *((_QWORD *)this + 729) = 0;
  *((_QWORD *)this + 720) = off_24ED8BB00;
  *((_QWORD *)this + 722) = 0;
  *((_QWORD *)this + 713) = off_24ED8BB00;
  *((_QWORD *)this + 715) = 0;
  *((_QWORD *)this + 706) = off_24ED8BB00;
  *((_QWORD *)this + 708) = 0;
  *((_QWORD *)this + 699) = off_24ED8BB00;
  *((_QWORD *)this + 701) = 0;
  *((_QWORD *)this + 692) = off_24ED8BB00;
  *((_QWORD *)this + 694) = 0;
  *((_QWORD *)this + 685) = off_24ED8BB00;
  *((_QWORD *)this + 687) = 0;
  *((_QWORD *)this + 678) = off_24ED8BB00;
  *((_QWORD *)this + 680) = 0;
  *((_QWORD *)this + 671) = off_24ED8BB00;
  *((_QWORD *)this + 673) = 0;
  *((_QWORD *)this + 664) = off_24ED8BB00;
  *((_QWORD *)this + 666) = 0;
  v33 = *((_DWORD *)this + 1324);
  if (v33)
  {
    v34 = *((_QWORD *)this + 661) + 56 * v33;
    v35 = (void (***)(void))*((_QWORD *)this + 661);
    do
    {
      v36 = *v35;
      v35 += 7;
      (*v36)();
    }
    while ((unint64_t)v35 < v34);
  }
  v37 = *((_DWORD *)this + 1325);
  if ((v37 & 0x80000000) == 0 && (v37 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 661))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v38 = *((_DWORD *)this + 1320);
  if (v38)
  {
    v39 = *((_QWORD *)this + 659) + 56 * v38;
    v40 = (void (***)(void))*((_QWORD *)this + 659);
    do
    {
      v41 = *v40;
      v40 += 7;
      (*v41)();
    }
    while ((unint64_t)v40 < v39);
  }
  v42 = *((_DWORD *)this + 1321);
  if ((v42 & 0x80000000) == 0 && (v42 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 659))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v43 = *((_DWORD *)this + 1316);
  if (v43)
  {
    v44 = *((_QWORD *)this + 657) + 56 * v43;
    v45 = (void (***)(void))*((_QWORD *)this + 657);
    do
    {
      v46 = *v45;
      v45 += 7;
      (*v46)();
    }
    while ((unint64_t)v45 < v44);
  }
  v47 = *((_DWORD *)this + 1317);
  if ((v47 & 0x80000000) == 0 && (v47 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 657))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v48 = *((_DWORD *)this + 1312);
  if (v48)
  {
    v49 = *((_QWORD *)this + 655) + 56 * v48;
    v50 = (void (***)(void))*((_QWORD *)this + 655);
    do
    {
      v51 = *v50;
      v50 += 7;
      (*v51)();
    }
    while ((unint64_t)v50 < v49);
  }
  v52 = *((_DWORD *)this + 1313);
  if ((v52 & 0x80000000) == 0 && (v52 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 655))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v53 = *((_DWORD *)this + 1308);
  if (v53)
  {
    v54 = *((_QWORD *)this + 653) + 56 * v53;
    v55 = (void (***)(void))*((_QWORD *)this + 653);
    do
    {
      v56 = *v55;
      v55 += 7;
      (*v56)();
    }
    while ((unint64_t)v55 < v54);
  }
  v57 = *((_DWORD *)this + 1309);
  if ((v57 & 0x80000000) == 0 && (v57 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 653))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v58 = *((_DWORD *)this + 1304);
  if (v58)
  {
    v59 = *((_QWORD *)this + 651) + 56 * v58;
    v60 = (void (***)(void))*((_QWORD *)this + 651);
    do
    {
      v61 = *v60;
      v60 += 7;
      (*v61)();
    }
    while ((unint64_t)v60 < v59);
  }
  v62 = *((_DWORD *)this + 1305);
  if ((v62 & 0x80000000) == 0 && (v62 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 651))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 644) = off_24ED8BB00;
  *((_QWORD *)this + 646) = 0;
  *((_QWORD *)this + 622) = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 642);
  v63 = *((_DWORD *)this + 1281);
  if ((v63 & 0x80000000) == 0 && (v63 & 0x7FFFFFFF) != 0)
  {
    v64 = (physx::NpScene *)*((_QWORD *)this + 639);
    if (v64 == (physx::NpScene *)((char *)this + 5072))
    {
      *((_BYTE *)this + 5104) = 0;
    }
    else if (v64)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v65 = *((_DWORD *)this + 1267);
  if ((v65 & 0x80000000) == 0 && (v65 & 0x7FFFFFFF) != 0)
  {
    v66 = (physx::NpScene *)*((_QWORD *)this + 632);
    if (v66 == (physx::NpScene *)((char *)this + 5016))
    {
      *((_BYTE *)this + 5048) = 0;
    }
    else if (v66)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 600) = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 620);
  v67 = *((_DWORD *)this + 1237);
  if ((v67 & 0x80000000) == 0 && (v67 & 0x7FFFFFFF) != 0)
  {
    v68 = (physx::NpScene *)*((_QWORD *)this + 617);
    if (v68 == (physx::NpScene *)((char *)this + 4896))
    {
      *((_BYTE *)this + 4928) = 0;
    }
    else if (v68)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v69 = *((_DWORD *)this + 1223);
  if ((v69 & 0x80000000) == 0 && (v69 & 0x7FFFFFFF) != 0)
  {
    v70 = (physx::NpScene *)*((_QWORD *)this + 610);
    if (v70 == (physx::NpScene *)((char *)this + 4840))
    {
      *((_BYTE *)this + 4872) = 0;
    }
    else if (v70)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 593) = off_24ED8BB00;
  *((_QWORD *)this + 595) = 0;
  if (*((_QWORD *)this + 568) && (*((_DWORD *)this + 1138) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 568) = 0;
  v71 = *((_DWORD *)this + 1135);
  if ((v71 & 0x80000000) == 0 && (v71 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 566))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v72 = *((_DWORD *)this + 1131);
  if ((v72 & 0x80000000) == 0 && (v72 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 564))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v73 = *((_DWORD *)this + 1127);
  if ((v73 & 0x80000000) == 0 && (v73 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 562))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v74 = *((_DWORD *)this + 1123);
  if ((v74 & 0x80000000) == 0 && (v74 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 560))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v75 = *((_DWORD *)this + 1119);
  if ((v75 & 0x80000000) == 0 && (v75 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 558))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 556) && (*((_DWORD *)this + 1114) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 556) = 0;
  if (*((_QWORD *)this + 554) && (*((_DWORD *)this + 1110) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 554) = 0;
  v76 = *((_DWORD *)this + 1107);
  if ((v76 & 0x80000000) == 0 && (v76 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 552))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v77 = *((_DWORD *)this + 1067);
  if ((v77 & 0x80000000) == 0 && (v77 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 532))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v78 = *((_DWORD *)this + 1063);
  if ((v78 & 0x80000000) == 0 && (v78 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 530))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v79 = *((_DWORD *)this + 1059);
  if ((v79 & 0x80000000) == 0 && (v79 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 528))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v80 = *((_DWORD *)this + 1055);
  if ((v80 & 0x80000000) == 0 && (v80 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 526))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v81 = *((_DWORD *)this + 1051);
  if ((v81 & 0x80000000) == 0 && (v81 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 524))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 516))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 509))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_DWORD *)this + 1001))
  {
    v148 = 0;
    v149 = 0;
    v82 = *((_QWORD *)this + 502);
    if (v82)
    {
      do
      {
        v147 = v82;
        v83 = v149;
        if ((HIDWORD(v149) & 0x7FFFFFFFu) <= v149)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::growAndPushBack((uint64_t)&v148, &v147);
        }
        else
        {
          *(_QWORD *)&v148[8 * v149] = v82;
          LODWORD(v149) = v83 + 1;
        }
        v82 = **((_QWORD **)this + 502);
        *((_QWORD *)this + 502) = v82;
      }
      while (v82);
      v84 = v148;
      v85 = v149;
      v86 = HIDWORD(v149);
    }
    else
    {
      v86 = 0;
      v85 = 0;
      v84 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>(v84, v85);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>(*((char **)this + 498), *((_DWORD *)this + 998));
    if ((v86 & 0x80000000) == 0 && (v86 & 0x7FFFFFFF) != 0 && v84)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v84);
  }
  v87 = (physx::NpScene *)*((_QWORD *)this + 498);
  v88 = *((unsigned int *)this + 998);
  if ((_DWORD)v88)
  {
    v89 = 8 * v88;
    do
    {
      if (*(_QWORD *)v87)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v87 = (physx::NpScene *)((char *)v87 + 8);
      v89 -= 8;
    }
    while (v89);
    v87 = (physx::NpScene *)*((_QWORD *)this + 498);
  }
  v90 = *((_DWORD *)this + 999);
  if ((v90 & 0x80000000) == 0 && (v90 & 0x7FFFFFFF) != 0)
  {
    if (v87 == (physx::NpScene *)((char *)this + 3464))
    {
      *((_BYTE *)this + 3976) = 0;
    }
    else if (v87)
    {
      (*(void (**)(uint64_t, physx::NpScene *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v87);
    }
  }
  if (*((_DWORD *)this + 859))
  {
    v148 = 0;
    v149 = 0;
    v91 = *((_QWORD *)this + 431);
    if (v91)
    {
      do
      {
        v147 = v91;
        v92 = v149;
        if ((HIDWORD(v149) & 0x7FFFFFFFu) <= v149)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::growAndPushBack((uint64_t)&v148, &v147);
        }
        else
        {
          *(_QWORD *)&v148[8 * v149] = v91;
          LODWORD(v149) = v92 + 1;
        }
        v91 = **((_QWORD **)this + 431);
        *((_QWORD *)this + 431) = v91;
      }
      while (v91);
      v93 = v148;
      v94 = v149;
      v95 = HIDWORD(v149);
    }
    else
    {
      v95 = 0;
      v94 = 0;
      v93 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>(v93, v94);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>(*((char **)this + 427), *((_DWORD *)this + 856));
    if ((v95 & 0x80000000) == 0 && (v95 & 0x7FFFFFFF) != 0 && v93)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v93);
  }
  v96 = (physx::NpScene *)*((_QWORD *)this + 427);
  v97 = *((unsigned int *)this + 856);
  if ((_DWORD)v97)
  {
    v98 = 8 * v97;
    do
    {
      if (*(_QWORD *)v96)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v96 = (physx::NpScene *)((char *)v96 + 8);
      v98 -= 8;
    }
    while (v98);
    v96 = (physx::NpScene *)*((_QWORD *)this + 427);
  }
  v99 = *((_DWORD *)this + 857);
  if ((v99 & 0x80000000) == 0 && (v99 & 0x7FFFFFFF) != 0)
  {
    if (v96 == (physx::NpScene *)((char *)this + 2896))
    {
      *((_BYTE *)this + 3408) = 0;
    }
    else if (v96)
    {
      (*(void (**)(uint64_t, physx::NpScene *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v96);
    }
  }
  if (*((_DWORD *)this + 717))
  {
    v148 = 0;
    v149 = 0;
    v100 = *((_QWORD *)this + 360);
    if (v100)
    {
      do
      {
        v147 = v100;
        v101 = v149;
        if ((HIDWORD(v149) & 0x7FFFFFFFu) <= v149)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::growAndPushBack((uint64_t)&v148, &v147);
        }
        else
        {
          *(_QWORD *)&v148[8 * v149] = v100;
          LODWORD(v149) = v101 + 1;
        }
        v100 = **((_QWORD **)this + 360);
        *((_QWORD *)this + 360) = v100;
      }
      while (v100);
      v102 = v148;
      v103 = v149;
      v104 = HIDWORD(v149);
    }
    else
    {
      v104 = 0;
      v103 = 0;
      v102 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>(v102, v103);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>(*((char **)this + 356), *((_DWORD *)this + 714));
    if ((v104 & 0x80000000) == 0 && (v104 & 0x7FFFFFFF) != 0 && v102)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v102);
  }
  v105 = (physx::NpScene *)*((_QWORD *)this + 356);
  v106 = *((unsigned int *)this + 714);
  if ((_DWORD)v106)
  {
    v107 = 8 * v106;
    do
    {
      if (*(_QWORD *)v105)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v105 = (physx::NpScene *)((char *)v105 + 8);
      v107 -= 8;
    }
    while (v107);
    v105 = (physx::NpScene *)*((_QWORD *)this + 356);
  }
  v108 = *((_DWORD *)this + 715);
  if ((v108 & 0x80000000) == 0 && (v108 & 0x7FFFFFFF) != 0)
  {
    if (v105 == (physx::NpScene *)((char *)this + 2328))
    {
      *((_BYTE *)this + 2840) = 0;
    }
    else if (v105)
    {
      (*(void (**)(uint64_t, physx::NpScene *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v105);
    }
  }
  if (*((_QWORD *)this + 283))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v109 = *((_DWORD *)this + 565);
  if ((v109 & 0x80000000) == 0 && (v109 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 281))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 274))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v110 = *((_DWORD *)this + 543);
  if ((v110 & 0x80000000) == 0 && (v110 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 270))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v111 = *((_DWORD *)this + 539);
  if ((v111 & 0x80000000) == 0 && (v111 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 268))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v112 = *((_DWORD *)this + 535);
  if ((v112 & 0x80000000) == 0 && (v112 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 266))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 254))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v113 = *((_DWORD *)this + 503);
  if ((v113 & 0x80000000) == 0 && (v113 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 250))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_DWORD *)this + 463))
  {
    v148 = 0;
    v149 = 0;
    v114 = *((_QWORD *)this + 233);
    if (v114)
    {
      do
      {
        v147 = v114;
        v115 = v149;
        if ((HIDWORD(v149) & 0x7FFFFFFFu) <= v149)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::growAndPushBack((uint64_t)&v148, &v147);
        }
        else
        {
          *(_QWORD *)&v148[8 * v149] = v114;
          LODWORD(v149) = v115 + 1;
        }
        v114 = **((_QWORD **)this + 233);
        *((_QWORD *)this + 233) = v114;
      }
      while (v114);
      v116 = v148;
      v117 = v149;
      v118 = HIDWORD(v149);
    }
    else
    {
      v118 = 0;
      v117 = 0;
      v116 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>(v116, v117);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>(*((char **)this + 229), *((_DWORD *)this + 460));
    if ((v118 & 0x80000000) == 0 && (v118 & 0x7FFFFFFF) != 0 && v116)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v116);
  }
  v119 = (physx::NpScene *)*((_QWORD *)this + 229);
  v120 = *((unsigned int *)this + 460);
  if ((_DWORD)v120)
  {
    v121 = 8 * v120;
    do
    {
      if (*(_QWORD *)v119)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v119 = (physx::NpScene *)((char *)v119 + 8);
      v121 -= 8;
    }
    while (v121);
    v119 = (physx::NpScene *)*((_QWORD *)this + 229);
  }
  v122 = *((_DWORD *)this + 461);
  if ((v122 & 0x80000000) == 0 && (v122 & 0x7FFFFFFF) != 0)
  {
    if (v119 == (physx::NpScene *)((char *)this + 1312))
    {
      *((_BYTE *)this + 1824) = 0;
    }
    else if (v119)
    {
      (*(void (**)(uint64_t, physx::NpScene *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v119);
    }
  }
  if (*((_DWORD *)this + 321))
  {
    v148 = 0;
    v149 = 0;
    v123 = *((_QWORD *)this + 162);
    if (v123)
    {
      do
      {
        v147 = v123;
        v124 = v149;
        if ((HIDWORD(v149) & 0x7FFFFFFFu) <= v149)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::growAndPushBack((uint64_t)&v148, &v147);
        }
        else
        {
          *(_QWORD *)&v148[8 * v149] = v123;
          LODWORD(v149) = v124 + 1;
        }
        v123 = **((_QWORD **)this + 162);
        *((_QWORD *)this + 162) = v123;
      }
      while (v123);
      v125 = v148;
      v126 = v149;
      v127 = HIDWORD(v149);
    }
    else
    {
      v127 = 0;
      v126 = 0;
      v125 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>(v125, v126);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>(*((char **)this + 158), *((_DWORD *)this + 318));
    if ((v127 & 0x80000000) == 0 && (v127 & 0x7FFFFFFF) != 0 && v125)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v125);
  }
  v128 = (physx::NpScene *)*((_QWORD *)this + 158);
  v129 = *((unsigned int *)this + 318);
  if ((_DWORD)v129)
  {
    v130 = 8 * v129;
    do
    {
      if (*(_QWORD *)v128)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v128 = (physx::NpScene *)((char *)v128 + 8);
      v130 -= 8;
    }
    while (v130);
    v128 = (physx::NpScene *)*((_QWORD *)this + 158);
  }
  v131 = *((_DWORD *)this + 319);
  if ((v131 & 0x80000000) == 0 && (v131 & 0x7FFFFFFF) != 0)
  {
    if (v128 == (physx::NpScene *)((char *)this + 744))
    {
      *((_BYTE *)this + 1256) = 0;
    }
    else if (v128)
    {
      (*(void (**)(uint64_t, physx::NpScene *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v128);
    }
  }
  if (*((_DWORD *)this + 179))
  {
    v148 = 0;
    v149 = 0;
    v132 = *((_QWORD *)this + 91);
    if (v132)
    {
      do
      {
        v147 = v132;
        v133 = v149;
        if ((HIDWORD(v149) & 0x7FFFFFFFu) <= v149)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::growAndPushBack((uint64_t)&v148, &v147);
        }
        else
        {
          *(_QWORD *)&v148[8 * v149] = v132;
          LODWORD(v149) = v133 + 1;
        }
        v132 = **((_QWORD **)this + 91);
        *((_QWORD *)this + 91) = v132;
      }
      while (v132);
      v134 = v148;
      v135 = v149;
      v136 = HIDWORD(v149);
    }
    else
    {
      v136 = 0;
      v135 = 0;
      v134 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>(v134, v135);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>(*((char **)this + 87), *((_DWORD *)this + 176));
    if ((v136 & 0x80000000) == 0 && (v136 & 0x7FFFFFFF) != 0 && v134)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v134);
  }
  v137 = (physx::NpScene *)*((_QWORD *)this + 87);
  v138 = *((unsigned int *)this + 176);
  if ((_DWORD)v138)
  {
    v139 = 8 * v138;
    do
    {
      if (*(_QWORD *)v137)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v137 = (physx::NpScene *)((char *)v137 + 8);
      v139 -= 8;
    }
    while (v139);
    v137 = (physx::NpScene *)*((_QWORD *)this + 87);
  }
  v140 = *((_DWORD *)this + 177);
  if ((v140 & 0x80000000) == 0 && (v140 & 0x7FFFFFFF) != 0)
  {
    if (v137 == (physx::NpScene *)((char *)this + 176))
    {
      *((_BYTE *)this + 688) = 0;
    }
    else if (v137)
    {
      (*(void (**)(uint64_t, physx::NpScene *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v137);
    }
  }
  for (i = 0; i != -48; i -= 16)
  {
    v142 = *(_DWORD *)((char *)this + i + 148);
    if ((v142 & 0x80000000) == 0 && (v142 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + i + 136) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v144 = *((_DWORD *)this + 25);
  if ((v144 & 0x80000000) == 0 && (v144 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 11) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v146 = *((_DWORD *)this + 19);
  if ((v146 & 0x80000000) == 0 && (v146 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 8))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*v17)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *v17 - *(_QWORD *)(*v17 - 8));
}

{
  uint64_t v2;

  physx::NpScene::~NpScene(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpScene *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

_QWORD *physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

void physx::NpScene::SceneCompletion::~SceneCompletion(physx::NpScene::SceneCompletion *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

uint64_t physx::NpScene::release(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  char v12;

  v9 = 8608;
  if ((*((_BYTE *)this + 8624) & 4) == 0)
    v9 = 4300;
  if ((*((_BYTE *)this + v9 + 1) & 2) != 0)
    (*(void (**)(physx::NpScene *, const char *, uint64_t))(*(_QWORD *)this + 800))(this, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 195);
  if (*((_DWORD *)this + 1877))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 203, "PxScene::release(): Scene is still being simulated! PxScene::fetchResults() is called implicitly.", a6, a7, a8, v12);
    v10 = *((_DWORD *)this + 1877);
    if (v10 == 1)
    {
      (*(void (**)(physx::NpScene *, uint64_t))(*(_QWORD *)this + 432))(this, 1);
      v10 = *((_DWORD *)this + 1877);
    }
    if (v10 == 2)
      (*(void (**)(physx::NpScene *, _QWORD))(*(_QWORD *)this + 408))(this, 0);
    (*(void (**)(physx::NpScene *, uint64_t, _QWORD))(*(_QWORD *)this + 440))(this, 1, 0);
  }
  return physx::NpPhysics::releaseSceneInternal(physx::NpPhysics::mInstance, (uint64_t)this);
}

uint64_t physx::NpScene::loadFromDesc(uint64_t a1, uint64_t a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a2 + 96);
  if (v4 && (*(_DWORD *)(a1 + 9156) & 0x7FFFFFFFu) < v4)
  {
    physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::recreate(a1 + 9144, v4);
    v4 = *(_DWORD *)(a2 + 96);
  }
  physx::Sc::Scene::preAllocate((physx::Sc::Scene *)(a1 + 32), v4, *(_DWORD *)(a2 + 100), *(_DWORD *)(a2 + 104), *(_DWORD *)(a2 + 108));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 192);
  return 1;
}

double physx::NpScene::setGravity(uint64_t a1, int *a2)
{
  int v2;
  double result;

  v2 = *a2;
  if (*(_BYTE *)(a1 + 7705))
  {
    *(_DWORD *)(a1 + 8592) = v2;
    result = *(double *)(a2 + 1);
    *(double *)(a1 + 8596) = result;
    *(_DWORD *)(a1 + 8624) |= 1u;
  }
  else
  {
    *(_DWORD *)(a1 + 1984) = v2;
    result = *(double *)(a2 + 1);
    *(double *)(a1 + 1988) = result;
    *(_DWORD *)(a1 + 1996) = 1;
  }
  return result;
}

uint64_t physx::NpScene::getGravity@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = 8592;
  v3 = 8596;
  if ((*(_DWORD *)(this + 8624) & 1) == 0)
    v3 = 1988;
  v4 = 8600;
  if ((*(_DWORD *)(this + 8624) & 1) == 0)
    v4 = 1992;
  v5 = *(_DWORD *)(this + v4);
  v6 = *(_DWORD *)(this + v3);
  if ((*(_DWORD *)(this + 8624) & 1) == 0)
    v2 = 1984;
  *a2 = *(_DWORD *)(this + v2);
  a2[1] = v6;
  a2[2] = v5;
  return this;
}

float physx::NpScene::setBounceThresholdVelocity(physx::NpScene *this, float result)
{
  if (*((_BYTE *)this + 7705))
  {
    *((float *)this + 2151) = result;
    *((_DWORD *)this + 2156) |= 2u;
  }
  else
  {
    result = -result;
    *(float *)(*((_QWORD *)this + 240) + 120) = result;
  }
  return result;
}

float physx::NpScene::getBounceThresholdVelocity(physx::NpScene *this)
{
  if ((*((_BYTE *)this + 8624) & 2) != 0)
    return *((float *)this + 2151);
  else
    return -*(float *)(*((_QWORD *)this + 240) + 120);
}

uint64_t physx::NpScene::setLimits(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)a2;
  if (v4 && (*(_DWORD *)(a1 + 9156) & 0x7FFFFFFFu) < v4)
  {
    physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::recreate(a1 + 9144, v4);
    v4 = *(_DWORD *)a2;
  }
  physx::Sc::Scene::preAllocate((physx::Sc::Scene *)(a1 + 32), v4, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 3));
  v5 = *a2;
  *(_OWORD *)(a1 + 1968) = a2[1];
  *(_OWORD *)(a1 + 1952) = v5;
  v6 = *((unsigned int *)a2 + 2);
  v7 = *((unsigned int *)a2 + 3);
  physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)(a1 + 8640), v6);
  return physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)(a1 + 8688), v7);
}

__n128 physx::NpScene::getLimits@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[122];
  v3 = this[123];
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t physx::NpScene::setFlag(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v3 = *(_DWORD *)(result + 8624);
  v4 = 8608;
  if ((v3 & 4) == 0)
    v4 = 4300;
  v5 = *(_DWORD *)(result + v4);
  v6 = v5 | a2;
  v7 = v5 & ~a2;
  if (a3)
    v7 = v6;
  if (*(_BYTE *)(result + 7705))
  {
    *(_DWORD *)(result + 8608) = v7;
    *(_DWORD *)(result + 8624) = v3 | 4;
  }
  else
  {
    *(_DWORD *)(result + 4300) = v7;
    v8 = *(_QWORD *)(result + 1872);
    *(_BYTE *)(v8 + 2584) = (v7 & 0x40) != 0;
    *(_BYTE *)(v8 + 2585) = (v7 & 0x100) == 0;
  }
  return result;
}

uint64_t physx::NpScene::getFlags@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = 8608;
  if ((*(_DWORD *)(this + 8624) & 4) == 0)
    v2 = 4300;
  *a2 = *(_DWORD *)(this + v2);
  return this;
}

int32x2_t *physx::NpScene::addActor(int32x2_t *this, int32x2_t *a2, const physx::PxBVHStructure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9, char a10)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  int v16;
  uint64_t v17;
  physx::NpScene *v18;

  v10 = a2[1].u16[0];
  if ((_DWORD)v10 == 5)
  {
    if (a2[10])
    {
      v11 = "PxScene::addActor(): actor is in a pruning structure and cannot be added to a scene directly, use addActors("
            "const PxPruningStructure&)";
      v12 = physx::shdfnd::Foundation::mInstance;
      v13 = 352;
      return (int32x2_t *)physx::shdfnd::Foundation::error(v12, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v13, v11, a6, a7, a8, a10);
    }
  }
  else if ((_DWORD)v10 == 6 && *(_QWORD *)&a2[10])
  {
    v11 = "PxScene::addActor(): actor is in a pruning structure and cannot be added to a scene directly, use addActors(co"
          "nst PxPruningStructure&)";
    v12 = physx::shdfnd::Foundation::mInstance;
    v13 = 344;
    return (int32x2_t *)physx::shdfnd::Foundation::error(v12, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v13, v11, a6, a7, a8, a10);
  }
  v15 = (char *)a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v10 + 18);
  v16 = *((_DWORD *)v15 + 2) >> 30;
  if (v16)
  {
    if (v16 != 3
      || ((v17 = *(_QWORD *)v15) != 0 ? (v18 = (physx::NpScene *)(v17 - 16)) : (v18 = 0), v18 != (physx::NpScene *)this))
    {
      v11 = "PxScene::addActor(): Actor already assigned to a scene. Call will be ignored!";
      v12 = physx::shdfnd::Foundation::mInstance;
      v13 = 360;
      return (int32x2_t *)physx::shdfnd::Foundation::error(v12, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v13, v11, a6, a7, a8, a10);
    }
  }
  return physx::NpScene::addActorInternal(this, a2, a3, a9, a4, a5, a6, a7, a8, a10);
}

int32x2_t *physx::NpScene::addActorInternal(int32x2_t *this, int32x2_t *a2, const physx::PxBVHStructure *a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  physx::NpScene *v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v12 = (physx::NpScene *)this;
  if (a3)
  {
    if (!(*(unsigned int (**)(int32x2_t *, const char *))(*(_QWORD *)a2 + 40))(a2, "PxRigidActor")
      || !(*(unsigned int (**)(const physx::PxBVHStructure *))(*(_QWORD *)a3 + 80))(a3)
      || (v13 = (*(uint64_t (**)(const physx::PxBVHStructure *))(*(_QWORD *)a3 + 80))(a3),
          this = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 184))(a2),
          v13 > this))
    {
      v14 = "PxRigidActor::setBVHStructure structure is empty or does not match shapes in the actor.";
      v15 = physx::shdfnd::Foundation::mInstance;
      v16 = 4;
      v17 = 371;
      return (int32x2_t *)physx::shdfnd::Foundation::error(v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v17, v14, a7, a8, a9, a10);
    }
  }
  v18 = a2[1].u16[0];
  switch(v18)
  {
    case 5:
      return physx::NpScene::addRigidDynamic(v12, a2, a3, 0, a4);
    case 13:
      v14 = "PxScene::addActor(): Individual articulation links can not be added to the scene";
      v15 = physx::shdfnd::Foundation::mInstance;
      v16 = 2;
      v17 = 400;
      return (int32x2_t *)physx::shdfnd::Foundation::error(v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v17, v14, a7, a8, a9, a10);
    case 6:
      return physx::NpScene::addRigidStatic((int32x2_t *)v12, a2, a3, 0, a4);
  }
  return this;
}

int32x2_t *physx::NpScene::addRigidStatic(int32x2_t *this, int32x2_t *a2, const physx::Gu::BVHStructure *a3, unsigned int a4, int8x8_t a5)
{
  physx::Scb::Base *v9;
  unint64_t v10;
  _BYTE *v11;
  int32x2_t *v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  int8x16_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int32x4_t v24;
  int32x2_t *result;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  int8x16_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int32x4_t v35;
  uint64_t v36;
  int32x2_t *v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v9 = (physx::Scb::Base *)&a2[12];
  v10 = a2[13].u32[0];
  if ((v10 & 1) != 0)
    v11 = (_BYTE *)a2[14];
  else
    v11 = (char *)v9 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v10 >> 24) & 0xF) + 3) + 12;
  v12 = this + 2;
  if ((*v11 & 8) != 0)
  {
    physx::Scb::Scene::addRigidNoSim<false,physx::Scb::RigidStatic>(v12, v9, this + 982, a5);
    result = (int32x2_t *)physx::NpShapeManager::setupAllSceneQuery((unsigned __int16 *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, 0, a3, v28, v29, v30, v31, v32, v33, v34, v35, v26, v27);
  }
  else
  {
    if (a2[6].u16[0] < 9u && this[963].i8[1] == 0)
      v14 = &v38;
    else
      v14 = 0;
    physx::Scb::Scene::addActor(v12, v9, 0, (uint64_t)v14, a5);
    result = (int32x2_t *)physx::NpShapeManager::setupAllSceneQuery((unsigned __int16 *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, (uint64_t)v14, a3, v17, v18, v19, v20, v21, v22, v23, v24, v15, v16);
    if (a2[4])
      result = physx::NpActor::addConstraintsToSceneInternal(a2 + 3);
  }
  v36 = this[1144].u32[0];
  a2[11].i32[0] = v36;
  v37 = a2;
  if ((this[1144].i32[1] & 0x7FFFFFFFu) <= v36)
    return (int32x2_t *)physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)&this[1143], &v37);
  *(_QWORD *)(*(_QWORD *)&this[1143] + 8 * v36) = a2;
  this[1144].i32[0] = v36 + 1;
  return result;
}

int32x2_t *physx::NpScene::addRigidDynamic(physx::NpScene *this, int32x2_t *a2, const physx::Gu::BVHStructure *a3, unsigned int a4, int8x8_t a5)
{
  physx::Scb::Base *v9;
  unint64_t v10;
  _BYTE *v11;
  int32x2_t *v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  int8x16_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int32x4_t v24;
  int32x2_t *result;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  int8x16_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int32x4_t v35;
  uint64_t v36;
  int32x2_t *v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v9 = (physx::Scb::Base *)&a2[12];
  v10 = a2[13].u32[0];
  if ((v10 & 1) != 0)
    v11 = (_BYTE *)a2[14];
  else
    v11 = (char *)v9 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v10 >> 24) & 0xF) + 3) + 12;
  v12 = (int32x2_t *)((char *)this + 16);
  if ((*v11 & 8) != 0)
  {
    physx::Scb::Scene::addActor(v12, v9, 1, 0, (uint64_t)a3, a5);
    result = (int32x2_t *)physx::NpShapeManager::setupAllSceneQuery((unsigned __int16 *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, 0, a3, v28, v29, v30, v31, v32, v33, v34, v35, v26, v27);
  }
  else
  {
    if (a2[6].u16[0] < 9u && *((_BYTE *)this + 7705) == 0)
      v14 = &v38;
    else
      v14 = 0;
    physx::Scb::Scene::addActor(v12, v9, 0, (uint64_t)v14, (uint64_t)a3, a5);
    result = (int32x2_t *)physx::NpShapeManager::setupAllSceneQuery((unsigned __int16 *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, (uint64_t)v14, a3, v17, v18, v19, v20, v21, v22, v23, v24, v15, v16);
    if (a2[4])
      result = physx::NpActor::addConstraintsToSceneInternal(a2 + 3);
  }
  v36 = *((unsigned int *)this + 2288);
  a2[11].i32[0] = v36;
  v37 = a2;
  if ((*((_DWORD *)this + 2289) & 0x7FFFFFFFu) <= v36)
    return (int32x2_t *)physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)this + 9144, &v37);
  *(_QWORD *)(*((_QWORD *)this + 1143) + 8 * v36) = a2;
  *((_DWORD *)this + 2288) = v36 + 1;
  return result;
}

uint64_t physx::NpScene::updateScbStateAndSetupSq(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v32 = result + 16;
  *(_QWORD *)a3 = result + 16;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a3 + 8) & 0x3FFFFFFF | 0x80000000;
  v16 = *((unsigned __int16 *)a4 + 4);
  if ((_DWORD)v16 == 1)
    v17 = a4;
  else
    v17 = (uint64_t *)*a4;
  if (*((_WORD *)a4 + 4))
  {
    v23 = 0;
    v24 = result + 8640;
    v25 = a4 + 2;
    do
    {
      v26 = v17[v23];
      v27 = *(_BYTE *)(v26 + 144);
      v28 = (unsigned int *)(v26 + 32);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      if ((*(_DWORD *)(v26 + 264) & 0x80000000) != 0)
      {
        *(_QWORD *)(v26 + 48) = v32;
        *(_DWORD *)(v26 + 56) = *(_DWORD *)(v26 + 56) & 0x3FFFFFFF | 0x80000000;
        if ((v27 & 2) != 0)
        {
LABEL_10:
          if (a6)
            v30 = a6 + 24 * v23;
          else
            v30 = 0;
          result = physx::Sq::SceneQueryManager::addPrunerShape(v24, v26 + 48, a2 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a2 + 8) + 18), a5, *((unsigned int *)a4 + 8), v30, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
          if (*((_WORD *)a4 + 12) == 1)
            v31 = v25;
          else
            v31 = (uint64_t *)a4[2];
          v31[v23] = result;
        }
      }
      else if ((v27 & 2) != 0)
      {
        goto LABEL_10;
      }
      ++v23;
    }
    while (v23 != v16);
  }
  return result;
}

void physx::NpScene::addActors(int32x2_t *this, int32x2_t **a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  physx::NpScene::addActorsInternal(this, a2, a3, 0, a5, a6, a7, a8, a9);
}

void physx::NpScene::addActorsInternal(int32x2_t *this, int32x2_t **a2, int a3, const physx::Sq::PruningStructure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v23;
  physx::PxActor *v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  physx::NpScene *v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  float32x4_t v39;
  int8x16_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int32x4_t v55;
  float32x4_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int32x2_t *v68;
  uint64_t v71;
  uint64_t v72;
  char v73;
  int v74;
  unint64_t v75;
  int32x2_t *v76;
  physx::Sc::Scene *v77;
  unsigned __int8 *v78[3];
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  physx::PxActor *v82;
  _BYTE v83[200];
  int v84[2];
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  if (this[938].i32[1])
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 468, "PxScene::addActors() not allowed while simulation is running.", a6, a7, a8, a9);
    return;
  }
  LODWORD(v10) = a3;
  v77 = (physx::Sc::Scene *)&this[4];
  physx::Sc::Scene::startBatchInsertion(&this[4], v78);
  v18 = (int8x8_t)128;
  v79 = xmmword_2261ABA00;
  v80 = xmmword_2261ABA00;
  v81 = 80;
  v83[192] = 1;
  *(_QWORD *)v84 = v83;
  v85 = 0x800000000;
  if (!(_DWORD)v10)
  {
    v20 = 0;
LABEL_57:
    if (a4)
      physx::Sq::SceneQueryManager::addPruningStructure(&this[1080], a4, v13, v14);
    goto LABEL_59;
  }
  v19 = 0;
  v74 = v10;
  v10 = v10;
  v20 = 1;
  v75 = v10;
  v76 = this + 1143;
  while (1)
  {
    v21 = v19++;
    if (v19 < v10)
    {
      _X8 = (unint64_t)a2[v19];
      v23 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
      }
      while (!__CFADD__(v23++, 1));
    }
    v28 = (physx::PxActor *)a2[v21];
    v29 = *((unsigned __int16 *)v28 + 4);
    v30 = (char *)v28 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v29 + 18);
    v31 = *((_DWORD *)v30 + 2) >> 30;
    if (v31)
    {
      if (v31 != 3
        || ((v32 = *(_QWORD *)v30) != 0 ? (v33 = (physx::NpScene *)(v32 - 16)) : (v33 = 0),
            v33 != (physx::NpScene *)this))
      {
        v60 = physx::shdfnd::Foundation::mInstance;
        v61 = "PxScene::addActors(): Actor already assigned to a scene. Call will be ignored!";
        v62 = 8;
        v63 = 495;
        goto LABEL_56;
      }
    }
    if ((_DWORD)v29 != 5)
    {
      if ((_DWORD)v29 == 6)
      {
        if (!a4 && *((_QWORD *)v28 + 10))
        {
          v71 = physx::shdfnd::Foundation::mInstance;
          v72 = 513;
          goto LABEL_75;
        }
        v34 = *((unsigned int *)v28 + 26);
        if ((v34 & 1) != 0)
          v35 = (_BYTE *)*((_QWORD *)v28 + 14);
        else
          v35 = (char *)v28 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v34 >> 24) & 0xF) + 3) + 108;
        if ((*v35 & 8) == 0)
        {
          physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::resizeUninitialized((uint64_t)v83, *((unsigned __int16 *)v28 + 24) + 1);
          physx::Sc::Scene::addStatic((uint64_t)v77, (uint64_t)v28, (uint64_t)v78, *(uint64_t *)v84);
          physx::NpScene::updateScbStateAndSetupSq((uint64_t)this, (uint64_t)v28, (uint64_t)v28 + 96, (uint64_t *)v28 + 5, 0, *(uint64_t *)v84, a4 != 0, v38, v39, v40, v41, v42, v43, v44, v45, v46);
          v47 = this[1144].u32[0];
          *((_DWORD *)v28 + 22) = v47;
          v82 = v28;
          if ((this[1144].i32[1] & 0x7FFFFFFFu) <= v47)
          {
            physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)v76, &v82);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)&this[1143] + 8 * v47) = v28;
            this[1144].i32[0] = v47 + 1;
          }
          v20 = v19 < v10;
          v10 = v75;
          if (!*((_QWORD *)v28 + 4))
            goto LABEL_48;
          goto LABEL_47;
        }
        physx::NpScene::addRigidStatic(this, a2[v21], 0, a4 != 0, v18);
        goto LABEL_41;
      }
      v60 = physx::shdfnd::Foundation::mInstance;
      v61 = "PxScene::addRigidActors(): articulation link not permitted";
      v62 = 2;
      v63 = 553;
LABEL_56:
      physx::shdfnd::Foundation::error(v60, v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v63, v61, v15, v16, v17, v73);
      LODWORD(v10) = v21;
      goto LABEL_57;
    }
    if (!a4 && *((_QWORD *)v28 + 10))
      break;
    v36 = *((unsigned int *)v28 + 26);
    if ((v36 & 1) != 0)
      v37 = (_BYTE *)*((_QWORD *)v28 + 14);
    else
      v37 = (char *)v28 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v36 >> 24) & 0xF) + 3) + 108;
    if ((*v37 & 8) == 0)
    {
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::resizeUninitialized((uint64_t)v83, *((unsigned __int16 *)v28 + 24) + 1);
      physx::Sc::Scene::addBody(v77, (uint64_t)v28, (uint64_t)v78, *(uint64_t *)v84, 0);
      v56.i32[0] = *((_DWORD *)v28 + 93);
      v57 = 0;
      if (v56.f32[0] == 0.0)
      {
        v56.i32[0] = *((_DWORD *)v28 + 87);
        if (v56.f32[0] == 0.0)
        {
          v56.i32[0] = *((_DWORD *)v28 + 88);
          if (v56.f32[0] == 0.0)
          {
            v56.i32[0] = *((_DWORD *)v28 + 89);
            if (v56.f32[0] == 0.0)
            {
              v56.i32[0] = *((_DWORD *)v28 + 90);
              if (v56.f32[0] == 0.0)
              {
                v56.i32[0] = *((_DWORD *)v28 + 91);
                if (v56.f32[0] == 0.0)
                {
                  v56.i32[0] = *((_DWORD *)v28 + 92);
                  if (v56.f32[0] == 0.0)
                    v57 = 1;
                }
              }
            }
          }
        }
      }
      v58 = *(_QWORD *)v84;
      *((_DWORD *)v28 + 94) = v57;
      physx::NpScene::updateScbStateAndSetupSq((uint64_t)this, (uint64_t)v28, (uint64_t)v28 + 96, (uint64_t *)v28 + 5, 1u, v58, a4 != 0, v48, v56, v49, v50, v51, v52, v53, v54, v55);
      v59 = this[1144].u32[0];
      *((_DWORD *)v28 + 22) = v59;
      v82 = v28;
      if ((this[1144].i32[1] & 0x7FFFFFFFu) <= v59)
      {
        physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)v76, &v82);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&this[1143] + 8 * v59) = v28;
        this[1144].i32[0] = v59 + 1;
      }
      v20 = v19 < v10;
      if (!*((_QWORD *)v28 + 4))
        goto LABEL_48;
LABEL_47:
      physx::NpActor::addConstraintsToSceneInternal((int32x2_t *)v28 + 3);
      goto LABEL_48;
    }
    physx::NpScene::addRigidDynamic((physx::NpScene *)this, a2[v21], 0, a4 != 0, v18);
LABEL_41:
    v20 = v19 < v10;
LABEL_48:
    if (v19 == v10)
    {
      v20 = 0;
      LODWORD(v10) = v74;
      goto LABEL_57;
    }
  }
  v71 = physx::shdfnd::Foundation::mInstance;
  v72 = 536;
LABEL_75:
  physx::shdfnd::Foundation::error(v71, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v72, "PxScene::addActors(): actor is in a pruning structure and cannot be added to a scene directly, use addActors(const PxPruningStructure&)", v15, v16, v17, v73);
  LODWORD(v10) = v21;
LABEL_59:
  physx::Sc::Scene::finishBatchInsertion((physx::Cm::PreallocatingRegionManager **)v77, v78);
  if (v20 && (_DWORD)v10)
  {
    v10 = v10;
    do
    {
      v68 = *a2++;
      physx::NpScene::removeActorInternal(this, v68, 0, 1, v64, v65, v66, v67, v73);
      --v10;
    }
    while (v10);
  }
  if ((v85 & 0x8000000000000000) == 0
    && (v85 & 0x7FFFFFFF00000000) != 0
    && *(_QWORD *)v84 != (_QWORD)v83
    && *(_QWORD *)v84 != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

void physx::NpScene::addActors(int32x2_t *this, const physx::PxPruningStructure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_BYTE *)a2 + 80))
    physx::NpScene::addActorsInternal(this, *((int32x2_t ***)a2 + 9), *((_DWORD *)a2 + 16), a2, a5, a6, a7, a8, a9);
  else
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 453, "PxScene::addActors(): Provided pruning structure is not valid.", a6, a7, a8, a9);
}

uint64_t physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 212) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::recreate(result, a2);
  *(_DWORD *)(v3 + 208) = a2;
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getNbShapes(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getNbShapes(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t physx::NpScene::removeActorInternal(int32x2_t *this, int32x2_t *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t *v19;
  unint64_t v20;
  char *v21;
  int32x2_t *v22;
  unint64_t v23;
  char *v24;
  char v25;
  int32x2_t v26;
  uint64_t v27;
  physx::NpAggregate **v28;
  char v29;
  int32x2_t v30;
  uint64_t v31;
  physx::NpAggregate **v32;
  __n128 v33;
  unsigned int *v34;
  __n128 v35;
  __int32 v36;
  unsigned int v37;

  result = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 48))(a2);
  if ((_DWORD)result == 2)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 689, "PxScene::removeActor(): Individual articulation links can not be removed from the scene", v16, v17, v18, a9);
  if ((_DWORD)result == 1)
  {
    v22 = a2 + 12;
    v23 = a2[13].u32[0];
    if ((v23 & 1) != 0)
      v24 = (char *)a2[14];
    else
      v24 = (char *)&v22[1] + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v23 >> 24) & 0xF) + 3) + 4;
    v29 = *v24;
    if (a4)
    {
      v30 = a2[4];
      if (v30)
      {
        v31 = *(unsigned int *)(*(_QWORD *)&v30 + 80);
        if ((_DWORD)v31)
        {
          v32 = (physx::NpAggregate **)(*(_QWORD *)(*(_QWORD *)&v30 + 72) + 8);
          while (*((_BYTE *)v32 - 8) != 1)
          {
            v32 += 2;
            if (!--v31)
              goto LABEL_32;
          }
          if (*v32)
            physx::NpAggregate::removeActorAndReinsert(*v32, (physx::PxActor *)a2, 0, v14, v15, v16, v17, v18);
        }
      }
    }
LABEL_32:
    physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&a2[5], (physx::Sq::SceneQueryManager *)&this[1080], (const physx::PxRigidActor *)a2);
    if ((v29 & 8) == 0)
      physx::NpActor::removeConstraintsFromScene(a2 + 3);
    physx::Scb::Scene::removeActor(this + 2, (physx::Scb::Body *)&a2[12], a3, (v22[1].i8[*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (a2[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v35);
    v37 = a2[11].u32[0];
    v34 = &v37;
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v19 = a2 + 12;
    v20 = a2[13].u32[0];
    if ((v20 & 1) != 0)
      v21 = (char *)a2[14];
    else
      v21 = (char *)&v19[1] + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v20 >> 24) & 0xF) + 3) + 4;
    v25 = *v21;
    if (a4)
    {
      v26 = a2[4];
      if (v26)
      {
        v27 = *(unsigned int *)(*(_QWORD *)&v26 + 80);
        if ((_DWORD)v27)
        {
          v28 = (physx::NpAggregate **)(*(_QWORD *)(*(_QWORD *)&v26 + 72) + 8);
          while (*((_BYTE *)v28 - 8) != 1)
          {
            v28 += 2;
            if (!--v27)
              goto LABEL_27;
          }
          if (*v28)
            physx::NpAggregate::removeActorAndReinsert(*v28, (physx::PxActor *)a2, 0, v14, v15, v16, v17, v18);
        }
      }
    }
LABEL_27:
    physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&a2[5], (physx::Sq::SceneQueryManager *)&this[1080], (const physx::PxRigidActor *)a2);
    if ((v25 & 8) == 0)
      physx::NpActor::removeConstraintsFromScene(a2 + 3);
    physx::Scb::Scene::removeActor((uint64_t)&this[2], (physx::Scb::Base *)&a2[12], a3, (v19[1].i8[*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (a2[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v33);
    v36 = a2[11].i32[0];
    v34 = (unsigned int *)&v36;
  }
  return physx::NpScene::removeFromRigidActorList((uint64_t)this, v34);
}

void physx::NpScene::removeActors(physx::NpScene *this, physx::PxActor *const *a2, unsigned int a3, int a4)
{
  physx::Sc::Scene *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  unsigned __int16 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  int32x2_t *v24;
  unint64_t v25;
  char *v26;
  int32x2_t *v27;
  unint64_t v28;
  char *v29;
  char v30;
  int32x2_t *v31;
  int v33;
  int v36;
  __n128 v38;
  char v39;
  int32x2_t *v40;
  int v42;
  int v45;
  __n128 v47;
  int v48;
  _BYTE *v49;
  char v50;
  physx::Scb::Scene *v51;
  unsigned int v53;
  _BYTE v54[520];
  _BYTE *v55;
  uint64_t v56;
  _BYTE v57[512];
  char v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v7 = (physx::NpScene *)((char *)this + 32);
  physx::Sc::Scene::resizeReleasedBodyIDMaps((physx::NpScene *)((char *)this + 32), *((_DWORD *)this + 2288), a3);
  v56 = 0x4000000000;
  v54[512] = 1;
  v55 = v54;
  v60 = 0x4000000000;
  v58 = 1;
  v59 = v57;
  *((_QWORD *)this + 551) = v54;
  if (!a3)
  {
    v48 = 64;
    v49 = v57;
    goto LABEL_46;
  }
  v8 = 0;
  v51 = (physx::NpScene *)((char *)this + 16);
  v9 = a3;
  while (1)
  {
    v10 = v8 + 1;
    if (v8 + 1 < v9)
    {
      _X8 = (unint64_t)a2[v10];
      v12 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
        _CF = __CFADD__(v12++, 1);
      }
      while (!_CF);
    }
    v18 = (unsigned __int16 *)a2[v8];
    v19 = v18[4];
    if ((physx::NpScene *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v18 + 56))(v18) != this)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v20, v21, v22, (char)"PxScene::removeActors(): Actor");
      goto LABEL_45;
    }
    LODWORD(v56) = 0;
    LODWORD(v60) = 0;
    if (v19 == 5)
    {
      v23 = (int32x2_t *)a2[v8];
      v27 = v23 + 12;
      v28 = v23[13].u32[0];
      if ((v28 & 1) != 0)
        v29 = (char *)v23[14];
      else
        v29 = (char *)&v27[1] + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v28 >> 24) & 0xF) + 3) + 4;
      v39 = *v29;
      if (v23[6].i16[0])
      {
        v40 = v23 + 5;
        if (v23[6].i16[0] != 1)
          v40 = (int32x2_t *)v23[5];
        _X8 = *v40;
        v42 = ~((unint64_t)(*(_QWORD *)&_X8 + 271) >> 5) + (*(_QWORD *)&_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          *(_QWORD *)&_X8 += 32;
          _CF = __CFADD__(v42++, 1);
        }
        while (!_CF);
      }
      physx::Sc::Scene::prefetchForRemove(v7, (const physx::Sc::BodyCore *)&v23[16]);
      _X8 = *(_QWORD *)(*((_QWORD *)this + 1143) + 8 * (*((_DWORD *)this + 2288) - 1));
      v45 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
        _CF = __CFADD__(v45++, 1);
      }
      while (!_CF);
      if ((v39 & 8) == 0)
        physx::NpActor::removeConstraintsFromScene(v23 + 3);
      physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&v23[5], (physx::NpScene *)((char *)this + 8640), (const physx::PxRigidActor *)v23);
      physx::Scb::Scene::removeActor((int32x2_t *)v51, (physx::Scb::Body *)&v23[12], a4, (v27[1].i8[*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (v23[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v47);
      goto LABEL_40;
    }
    if (v19 != 6)
      break;
    v23 = (int32x2_t *)a2[v8];
    v24 = v23 + 12;
    v25 = v23[13].u32[0];
    if ((v25 & 1) != 0)
      v26 = (char *)v23[14];
    else
      v26 = (char *)&v24[1] + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v25 >> 24) & 0xF) + 3) + 4;
    v30 = *v26;
    if (v23[6].i16[0])
    {
      v31 = v23 + 5;
      if (v23[6].i16[0] != 1)
        v31 = (int32x2_t *)v23[5];
      _X8 = *v31;
      v33 = ~((unint64_t)(*(_QWORD *)&_X8 + 271) >> 5) + (*(_QWORD *)&_X8 >> 5);
      do
      {
        __asm { PRFM            #0, [X8] }
        *(_QWORD *)&_X8 += 32;
        _CF = __CFADD__(v33++, 1);
      }
      while (!_CF);
    }
    physx::Sc::Scene::prefetchForRemove((uint64_t)v7, (unint64_t *)&v23[16]);
    _X8 = *(_QWORD *)(*((_QWORD *)this + 1143) + 8 * (*((_DWORD *)this + 2288) - 1));
    v36 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v36++, 1);
    }
    while (!_CF);
    if ((v30 & 8) == 0)
      physx::NpActor::removeConstraintsFromScene(v23 + 3);
    physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&v23[5], (physx::NpScene *)((char *)this + 8640), (const physx::PxRigidActor *)v23);
    physx::Scb::Scene::removeActor((uint64_t)v51, (physx::Scb::Base *)&v23[12], a4, (v24[1].i8[*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (v23[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v38);
LABEL_40:
    v53 = v23[11].u32[0];
    physx::NpScene::removeFromRigidActorList((uint64_t)this, &v53);
    v8 = v10;
    if (v10 == v9)
      goto LABEL_45;
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 651, "PxScene::removeActor(): Individual articulation links can not be removed from the scene", v20, v21, v22, v50);
LABEL_45:
  v49 = v59;
  v48 = HIDWORD(v60);
LABEL_46:
  *((_QWORD *)this + 551) = 0;
  if ((v48 & 0x80000000) == 0 && (v48 & 0x7FFFFFFF) != 0)
  {
    if (v49 == v57)
    {
      v58 = 0;
    }
    else if (v49)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if ((v56 & 0x8000000000000000) == 0 && (v56 & 0x7FFFFFFF00000000) != 0 && v55 != v54)
  {
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::NpShapeManager::teardownAllSceneQuery(uint64_t this, physx::Sq::SceneQueryManager *a2, const physx::PxRigidActor *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = this;
  v5 = *(unsigned __int16 *)(this + 8);
  v6 = *(_DWORD *)(this + 32);
  if ((_DWORD)v5 == 1)
  {
    v7 = this;
    if (v6 == -1)
    {
LABEL_13:
      v12 = 0;
      v13 = (uint64_t *)(this + 16);
      do
      {
        v14 = *(_QWORD *)(v7 + 8 * v12);
        if ((*(_BYTE *)(v14 + 56) & 0x40) != 0)
          v15 = (char *)(*(_QWORD *)(v14 + 64) + 52);
        else
          v15 = (char *)(v14 + 144);
        v16 = *v15;
        v17 = *(unsigned __int16 *)(v4 + 24);
        if ((v16 & 2) != 0)
        {
          v18 = v4 + 16;
          if (v17 != 1)
            v18 = *v13;
          this = physx::Sq::SceneQueryManager::removePrunerShape(a2, 0xFFFFFFFFLL, *(_QWORD *)(v18 + 8 * v12));
          v17 = *(unsigned __int16 *)(v4 + 24);
        }
        v19 = v4 + 16;
        if (v17 != 1)
          v19 = *v13;
        *(_QWORD *)(v19 + 8 * v12++) = 0xFFFFFFFFLL;
      }
      while (v5 != v12);
      return this;
    }
  }
  else if (v6 == -1)
  {
    if (!*(_WORD *)(this + 8))
      return this;
    v7 = *(_QWORD *)this;
    goto LABEL_13;
  }
  v8 = (*((_WORD *)a3 + 4) & 0xFFF7) == 5;
  this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 12) + 8))(*((_QWORD *)a2 + 12));
  ++*((_DWORD *)a2 + 12 * v8 + 11);
  if ((_DWORD)v5)
  {
    v9 = 0;
    v10 = *(unsigned __int16 *)(v4 + 24);
    do
    {
      v11 = v4 + 16;
      if (v10 != 1)
        v11 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v11 + v9) = 0xFFFFFFFFLL;
      v9 += 8;
    }
    while (8 * v5 != v9);
  }
  *(_DWORD *)(v4 + 32) = -1;
  return this;
}

uint64_t physx::NpScene::removeFromRigidActorList(uint64_t this, const unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  _DWORD *v7;

  v2 = *a2;
  v3 = *(_QWORD *)(this + 9144);
  v4 = *(_DWORD *)(this + 9152) - 1;
  *(_DWORD *)(this + 9152) = v4;
  *(_QWORD *)(v3 + 8 * v2) = *(_QWORD *)(v3 + 8 * v4);
  if (v4)
  {
    v6 = *a2;
    if (v4 != (_DWORD)v6)
    {
      v7 = *(_DWORD **)(*(_QWORD *)(this + 9144) + 8 * v6);
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 48))(v7);
      if (this <= 1)
        v7[22] = *a2;
    }
  }
  return this;
}

uint64_t physx::NpScene::removeActor(int32x2_t *this, int32x2_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 56))(a2) == this)
    return physx::NpScene::removeActorInternal(this, a2, a3, 1, v12, v13, v14, v15, a9);
  else
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v13, v14, v15, (char)"PxScene::removeActor(): Actor");
}

void physx::NpScene::addArticulation(int32x2_t *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v14);
  if ((v14 & 0x2000) != 0)
  {
    if (a2[4] != 12)
    {
      v8 = physx::shdfnd::Foundation::mInstance;
      v9 = "PxScene::addArticulation(): Only Reduced coordinate articulations are currently supported when PxSceneFlag::e"
           "ENABLE_GPU_DYNAMICS is set!";
      v10 = 815;
      goto LABEL_13;
    }
    v7 = 1;
  }
  else
  {
    v7 = a2[4] == 12;
  }
  if (a1[938].i32[1] && v7)
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxScene::addArticulation(): this call is not allowed while the simulation is running. Call will be ignored!";
    v10 = 821;
  }
  else
  {
    v11 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)a2 + 200))(a2);
    v12 = *(_DWORD *)(v11 + 8) >> 30;
    if (!v12 || v12 == 3 && (int32x2_t *)(*(_QWORD *)v11 - 16) == a1)
    {
      physx::NpScene::addArticulationInternal(a1, (uint64_t)a2);
      return;
    }
    v8 = physx::shdfnd::Foundation::mInstance;
    v9 = "PxScene::addArticulation(): Articulation already assigned to a scene. Call will be ignored!";
    v10 = 832;
  }
LABEL_13:
  physx::shdfnd::Foundation::error(v8, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v10, v9, v4, v5, v6, v13);
}

void physx::NpScene::addArticulationInternal(int32x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  physx::NpArticulationLink *v6;
  physx::NpArticulationLink *v7;
  int8x8_t v8;
  char v9;
  uint64_t v10;
  int8x8_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t *v16;
  char *v17;
  double v18;
  size_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  physx::NpArticulationLink *v25;
  unint64_t v26;
  char *v27;
  physx::NpScene *v28;
  int8x8_t v29;
  BOOL v30;
  unsigned int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int32x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int32x2_t v65;
  uint64_t *v66;
  int32x2_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[8];
  uint64_t v73;
  _QWORD *v74;
  int32x2_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int32x2_t *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  BOOL v85;
  int v86;
  uint64_t v87;

  v2 = a2;
  v87 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200))(v2);
  if (*(_DWORD *)(v5 + 128))
    v7 = **(physx::NpArticulationLink ***)(v5 + 120);
  else
    v7 = 0;
  v75 = (int32x2_t *)v7;
  checkArticulationLink(v7, v6);
  v8.i32[0] = v75[43].i32[1];
  if (*(float *)v8.i32 == 0.0
    && (v8.i32[0] = v75[44].i32[0], *(float *)v8.i32 == 0.0)
    && (v8.i32[0] = v75[44].i32[1], *(float *)v8.i32 == 0.0)
    && (v8.i32[0] = v75[45].i32[0], *(float *)v8.i32 == 0.0)
    && (v8.i32[0] = v75[45].i32[1], *(float *)v8.i32 == 0.0))
  {
    v8.i32[0] = v75[46].i32[0];
    v9 = *(float *)v8.i32 != 0.0;
  }
  else
  {
    v9 = 1;
  }
  physx::NpScene::addArticulationLinkBody(a1, (physx::NpArticulationLink *)v75, v8);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200))(v2);
  physx::Scb::Scene::add<physx::Scb::Articulation>(a1 + 2, v10, a1 + 1003, v11);
  *(_BYTE *)(v10 + 76) = *(float *)(v10 + 72) == 0.0;
  v12 = v75;
  v74 = (_QWORD *)v10;
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 + 48);
    if ((_DWORD)v14)
    {
      v15 = 0;
      while (*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8 * v15) != *(_QWORD *)&v75[16])
      {
        if (v14 == ++v15)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      LODWORD(v15) = 0x80000000;
    }
    v12 = v75;
    v75[58].i32[0] = v15;
  }
  v12[58].i32[1] = 0;
  v16 = physx::NpScene::addArticulationLinkConstraint(a1, v12);
  v85 = (8 * v4) > 0x400;
  v73 = (8 * v4);
  if ((8 * v4) < 0x401)
  {
    MEMORY[0x24BDAC7A8](v16);
    v17 = &v72[-((v19 + 15) & 0x1FFFFFFF0)];
    bzero(v17, v19);
  }
  else
  {
    v17 = (char *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v86, (8 * v4), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 888);
  }
  v80 = (_QWORD *)v13;
  v84 = v17;
  *(_QWORD *)v17 = v75;
  v78 = (v4 - 1);
  if (v4 == 1)
  {
    v22 = v17;
  }
  else
  {
    v20 = 0;
    v21 = 1;
    v22 = v17;
    v76 = v2;
    do
    {
      v23 = *(_QWORD *)&v22[8 * v20];
      if (*(_DWORD *)(v23 + 456))
        v24 = *(_QWORD *)(v23 + 448);
      else
        v24 = 0;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v23 + 520))(*(_QWORD *)&v22[8 * v20]))
      {
        v26 = 0;
        v27 = v22;
        do
        {
          v28 = *(physx::NpScene **)(v24 + 8 * v26);
          checkArticulationLink(v28, v25);
          if ((v9 & 1) != 0)
          {
            v9 = 1;
          }
          else
          {
            v29.i32[0] = *((_DWORD *)v28 + 87);
            if (*(float *)v29.i32 == 0.0
              && (v29.i32[0] = *((_DWORD *)v28 + 88), *(float *)v29.i32 == 0.0)
              && (v29.i32[0] = *((_DWORD *)v28 + 89), *(float *)v29.i32 == 0.0)
              && (v29.i32[0] = *((_DWORD *)v28 + 90), *(float *)v29.i32 == 0.0)
              && (v29.i32[0] = *((_DWORD *)v28 + 91), *(float *)v29.i32 == 0.0))
            {
              v29.i32[0] = *((_DWORD *)v28 + 92);
              v30 = *(float *)v29.i32 == 0.0;
            }
            else
            {
              v30 = 0;
            }
            v9 = !v30;
          }
          physx::NpScene::addArticulationLink(a1, v28, v29);
          *(_QWORD *)&v27[8 * (v21 + v26)] = v28;
          v22 = v27;
          ++v26;
        }
        while (v26 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 520))(v23));
        v21 += v26;
        v2 = v76;
      }
      ++v20;
    }
    while (v20 != v78);
  }
  LODWORD(v18) = *((_DWORD *)v74 + 18);
  if (*(float *)&v18 == 0.0 && (v9 & 1) != 0)
    physx::PxArticulationImpl::wakeUpInternal(v74, 1, 0, v18);
  v31 = a1[1149].u32[1];
  v32 = v80;
  if (!v31)
  {
    v36 = 0;
    goto LABEL_52;
  }
  v33 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
  v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
  v36 = (v31 - 1) & ((v35 >> 31) ^ v35);
  v37 = *(unsigned int *)(*(_QWORD *)&a1[1148] + 4 * v36);
  if ((_DWORD)v37 == -1)
  {
LABEL_52:
    if (a1[1151].i32[1] == a1[1149].i32[0])
    {
      if (v31)
        v38 = 2 * v31;
      else
        v38 = 16;
      if (v31 < v38)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&a1[1145], v38, *(int8x8_t *)&v18);
        v31 = a1[1149].u32[1];
      }
      v39 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
      v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      v36 = (v31 - 1) & ((v41 >> 31) ^ v41);
    }
    v42 = a1[1150].u32[1];
    a1[1150].i32[1] = v42 + 1;
    v43 = a1[1148];
    *(_DWORD *)(*(_QWORD *)&a1[1147] + 4 * v42) = *(_DWORD *)(*(_QWORD *)&v43 + 4 * v36);
    *(_DWORD *)(*(_QWORD *)&v43 + 4 * v36) = v42;
    a1[1151] = vadd_s32(a1[1151], (int32x2_t)0x100000001);
    *(_QWORD *)(*(_QWORD *)&a1[1146] + 8 * v42) = v2;
    goto LABEL_60;
  }
  while (*(_QWORD *)(*(_QWORD *)&a1[1146] + 8 * v37) != v2)
  {
    v37 = *(unsigned int *)(*(_QWORD *)&a1[1147] + 4 * v37);
    if ((_DWORD)v37 == -1)
      goto LABEL_52;
  }
LABEL_60:
  if (v32)
  {
    physx::Sc::ArticulationSim::checkResize(v32);
    *(_QWORD *)v22 = v75;
    if ((_DWORD)v78)
    {
      v44 = 0;
      v45 = 1;
      v79 = a1;
      do
      {
        v46 = *(_QWORD *)&v22[8 * v44];
        if (*(_DWORD *)(v46 + 456))
          v83 = *(_QWORD *)(v46 + 448);
        else
          v83 = 0;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 520))(v46))
        {
          v77 = v44;
          v47 = 0;
          v48 = v83;
          v81 = v45;
          v82 = v22;
          do
          {
            v49 = *(_DWORD **)(v48 + 8 * v47);
            v50 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 528))(v49);
            v49[117] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v32 + 64))(*v32, v50);
            if (*(_WORD *)(v2 + 8) == 12)
            {
              v51 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 504))(v49);
              v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 120))(v51);
              if (v52 != 3)
              {
                if (v52 == 4)
                {
                  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 952, "PxScene::addArticulation(): The application need to set joint type. defaulting joint type to eFix", v53, v54, v55, v72[0]);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 112))(v51, 3);
                  v49[117] = 0;
                }
                v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 136))(v51, 3);
                v57 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 136))(v51, 4);
                v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 136))(v51, 5);
                v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 136))(v51, 1);
                v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 136))(v51, 2);
                v61 = (v57 | v56 | v58 | v59 | v60 | (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 136))(v51, 0)) == 0;
                a1 = v79;
                v32 = v80;
                LODWORD(v45) = v81;
                v22 = v82;
                v48 = v83;
                if (v61)
                {
                  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 973, "PxScene::addArticulation(): The application need to set joint motion. defaulting joint type to eFix", v62, v63, v64, v72[0]);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 112))(v51, 3);
                  v49[117] = 0;
                }
              }
            }
            *(_QWORD *)&v22[8 * (v45 + v47++)] = v49;
          }
          while (v47 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 520))(v46));
          v45 = (v45 + v47);
          v44 = v77;
        }
        ++v44;
      }
      while (v44 != v78);
    }
  }
  if (*(_WORD *)(v2 + 8) == 12)
  {
    if ((v74[8] & 1) != 0)
    {
      v65 = v75[16];
      if (v65)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v65 + 136) + 159) = 1;
    }
    v66 = (uint64_t *)v74[3];
    if (v66)
    {
      v67 = a1[242];
      v68 = *v66;
      v86 = *((_DWORD *)v66 + 18);
      (*(void (**)(int32x2_t, uint64_t, int *))(**(_QWORD **)&v67 + 64))(v67, v68, &v86);
    }
    if (*(_DWORD *)(v2 + 192))
    {
      v69 = 0;
      do
      {
        v70 = *(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * v69);
        v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 208))(v70);
        physx::Sc::ArticulationSim::addLoopConstraint((uint64_t)v32, *(_QWORD *)(v71 + 136));
        ++v69;
      }
      while (v69 < *(unsigned int *)(v2 + 192));
    }
  }
  if (v73 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v84, v22);
}

_QWORD *checkArticulationLink(physx::NpScene *a1, physx::NpArticulationLink *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  float v19;

  if ((*(float (**)(physx::NpScene *, physx::NpArticulationLink *))(*(_QWORD *)a1 + 240))(a1, a2) == 0.0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 844, "PxScene::addArticulation(): Articulation link with zero mass added to scene; defaulting mass to 1",
      v3,
      v4,
      v5,
      v15);
    (*(void (**)(physx::NpScene *, float))(*(_QWORD *)a1 + 232))(a1, 1.0);
  }
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, physx::NpScene *))(*(_QWORD *)a1 + 264))(&v18, a1);
  if (*(float *)&v18 == 0.0 || *((float *)&v18 + 1) == 0.0 || v19 == 0.0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 851, "PxScene::addArticulation(): Articulation link with zero moment of inertia added to scene; defaulting inertia to (1,1,1)",
      v7,
      v8,
      v9,
      v15);
    __asm { FMOV            V0.2S, #1.0 }
    v16 = _D0;
    v17 = 1065353216;
    return (_QWORD *)(*(uint64_t (**)(physx::NpScene *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v16);
  }
  return result;
}

unsigned __int16 *physx::NpScene::addArticulationLinkBody(int32x2_t *this, physx::NpArticulationLink *a2, int8x8_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  int8x16_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int32x4_t v14;

  physx::Scb::Scene::addActor(this + 2, (physx::NpArticulationLink *)((char *)a2 + 96), 0, 0, 0, a3);
  return physx::NpShapeManager::setupAllSceneQuery((unsigned __int16 *)a2 + 20, (uint64_t)this, a2, 0, 0, 0, v7, v8, v9, v10, v11, v12, v13, v14, v5, v6);
}

int32x2_t *physx::NpScene::addArticulationLinkConstraint(int32x2_t *this, int32x2_t *a2)
{
  int32x2_t *result;
  uint64_t v5;
  int8x8_t v6;

  result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 504))(a2);
  if (result)
  {
    v5 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 96))(result);
    result = physx::Scb::Scene::add<physx::Scb::ArticulationJoint>((uint64_t)&this[2], v5, this + 1010, v6);
  }
  if (a2[4])
    return physx::NpActor::addConstraintsToSceneInternal(a2 + 3);
  return result;
}

uint64_t physx::NpScene::addArticulationLink(int32x2_t *this, physx::NpArticulationLink *a2, int8x8_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  physx::NpScene::addArticulationLinkBody(this, a2, a3);
  physx::NpScene::addArticulationLinkConstraint(this, (int32x2_t *)a2);
  v5 = (*(uint64_t (**)(physx::NpArticulationLink *))(*(_QWORD *)a2 + 496))(a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
  v7 = *(_QWORD *)(result + 24);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 48);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v7 + 40);
      while (*(_QWORD *)(v10 + 8 * v9) != *((_QWORD *)a2 + 16))
      {
        if (v8 == ++v9)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      LODWORD(v9) = 0x80000000;
    }
    *((_DWORD *)a2 + 116) = v9;
  }
  return result;
}

uint64_t physx::NpScene::removeArticulation(int32x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) == a1)
    return physx::NpScene::removeArticulationInternal(a1, a2, a3, 1);
  else
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v6, v7, v8, (char)"PxScene::removeArticulation(): Articulation");
}

uint64_t physx::NpScene::removeArticulationInternal(int32x2_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  physx::Sq::SceneQueryManager *v20;
  int32x2_t *v21;
  int32x2_t *v22;
  unint64_t v23;
  int32x2_t *v24;
  __int8 v25;
  uint64_t v26;
  __n128 v27;
  physx::Sc::ArticulationJointSim **v28;
  int8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  physx::Scb::Articulation *v32;
  int8x8_t v33;
  uint64_t result;
  int32x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[2];
  uint64_t v40[2];

  v38 = a3;
  v5 = a2;
  v40[1] = *MEMORY[0x24BDAC8D0];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
  v8 = v7;
  if (a4)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 192))(v5);
    if (v7)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 192))(v5);
      v7 = physx::NpAggregate::removeArticulationAndReinsert(v9, v5, 0);
    }
  }
  v37 = (8 * v8);
  if ((8 * v8) < 0x401)
  {
    MEMORY[0x24BDAC7A8](v7);
    v10 = (int32x2_t **)((char *)&v35 - ((v11 + 15) & 0x1FFFFFFF0));
    bzero(v10, v11);
  }
  else
  {
    v10 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v39, (8 * v8), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1038);
  }
  v39[0] = v10;
  *v10 = **(_QWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5) + 120);
  v12 = (v8 - 1);
  if (v8 == 1)
    goto LABEL_18;
  v13 = 0;
  v14 = 1;
  do
  {
    v15 = v10[v13];
    if (*(_DWORD *)(v15 + 456))
      v16 = *(_QWORD *)(v15 + 448);
    else
      v16 = 0;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15 + 520))(v10[v13]))
    {
      v17 = 0;
      do
      {
        v10[(v14 + v17)] = *(_QWORD *)(v16 + 8 * v17);
        ++v17;
      }
      while (v17 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 520))(v15));
      v14 += v17;
    }
    ++v13;
  }
  while (v13 != v12);
  if (v8 >= 1)
  {
LABEL_18:
    v35 = a1;
    v36 = v5;
    v18 = 0;
    v19 = v8;
    v20 = (physx::Sq::SceneQueryManager *)&a1[1080];
    v21 = a1 + 2;
    v22 = a1 + 1010;
    v23 = v19 + 1;
    do
    {
      v24 = (int32x2_t *)v10[v12];
      v25 = v24[21].i8[4];
      v26 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v24 + 504))(v24);
      physx::NpActor::removeConstraintsFromScene(v24 + 3);
      physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&v24[5], v20, (const physx::PxRigidActor *)v24);
      if (v26)
      {
        v28 = (physx::Sc::ArticulationJointSim **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
        physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>(v21, v28, v22, v29);
      }
      v18 |= v25;
      physx::Scb::Scene::removeActor(v21, (physx::Scb::Body *)&v24[12], v38, 0, v27);
      --v23;
      LODWORD(v12) = v12 - 1;
    }
    while (v23 > 1);
    a1 = v35;
    v5 = v36;
    if ((v18 & 0x20) != 0)
    {
      v30 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 200))(v36) + 24);
      if (v30)
      {
        v31 = *(unsigned int *)(v30 + 72);
        if (v31 <= 0xFFFFFF7F && 32 * a1[959].i32[0] > v31 >> 7)
          *(_DWORD *)(*(_QWORD *)&a1[958] + ((v31 >> 10) & 0x3FFFFC)) &= ~(1 << (v31 >> 7));
      }
    }
  }
  v32 = (physx::Scb::Articulation *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
  physx::Scb::Scene::removeArticulation(a1 + 2, v32, v33);
  v40[0] = v5;
  result = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&a1[1145], v40);
  if (v37 >= 0x401)
    return physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v39, (char *)v10);
  return result;
}

unsigned __int16 *physx::NpShapeManager::setupAllSceneQuery(unsigned __int16 *this, uint64_t a2, physx::PxRigidActor *a3, unsigned int a4, uint64_t a5, physx::Gu::BVHStructure *a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, uint64_t a16)
{
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  unsigned __int16 **v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned __int16 *v29;

  v18 = this;
  v19 = a2 + 8640;
  v20 = this[4];
  if ((_DWORD)v20 == 1)
  {
    v21 = this;
    if (!a6)
      goto LABEL_8;
    return (unsigned __int16 *)physx::NpShapeManager::addBVHStructureShapes((physx::NpShapeManager *)this, (physx::Sq::SceneQueryManager *)(a2 + 8640), a3, a6);
  }
  if (a6)
    return (unsigned __int16 *)physx::NpShapeManager::addBVHStructureShapes((physx::NpShapeManager *)this, (physx::Sq::SceneQueryManager *)(a2 + 8640), a3, a6);
  if (!this[4])
    return this;
  v21 = *(unsigned __int16 **)this;
LABEL_8:
  v22 = 0;
  v23 = *((_WORD *)a3 + 4) & 0xFFF7;
  v24 = (unsigned __int16 **)(this + 8);
  v25 = a5;
  do
  {
    v26 = *(_QWORD *)&v21[4 * v22];
    if ((*(_BYTE *)(v26 + 56) & 0x40) != 0)
      v27 = (_BYTE *)(*(_QWORD *)(v26 + 64) + 52);
    else
      v27 = (_BYTE *)(v26 + 144);
    if ((*v27 & 2) != 0)
    {
      if (a5)
        v28 = v25;
      else
        v28 = 0;
      this = (unsigned __int16 *)physx::Sq::SceneQueryManager::addPrunerShape(v19, v26 + 48, (uint64_t)a3+ *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18), v23 == 5, *((unsigned int *)v18 + 8), v28, a4, a16, a7, a8, a9, a10, a11, a12, a13, a14);
      v29 = v18 + 8;
      if (v18[12] != 1)
        v29 = *v24;
      *(_QWORD *)&v29[4 * v22] = this;
    }
    ++v22;
    v25 += 24;
  }
  while (v20 != v22);
  return this;
}

int8x8_t physx::NpScene::addAggregate(int32x2_t *this, physx::PxAggregate *a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v12;
  physx::Scb::Base *v13;
  int v14;
  int8x8_t result;
  uint64_t i;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  physx::PxBVHStructure *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int32x2_t v38;
  char v39;
  physx::PxBVHStructure *v40;

  v12 = *((unsigned int *)a2 + 16);
  v13 = (physx::PxAggregate *)((char *)a2 + 16);
  v14 = *((_DWORD *)a2 + 6) >> 30;
  if (v14 && (v14 != 3 || (int32x2_t *)(*(_QWORD *)v13 - 16) != this))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1179, "PxScene::addAggregate(): Aggregate already assigned to a scene. Call will be ignored!", a7, a8, a9, a10);
    return result;
  }
  physx::Scb::Scene::addAggregate(this + 2, v13, a3);
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v17 = *(unsigned __int16 **)(*((_QWORD *)a2 + 9) + 8 * i);
      v18 = (uint64_t)v17 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v17[4]);
      v40 = 0;
      if (physx::NpActor::getConnectors<physx::Gu::BVHStructure>(v18, 3, (uint64_t)&v40, 1u, 0))
        physx::NpActor::removeConnector(v18, (physx::PxActor *)v17, 3, (uint64_t)v40);
      physx::NpAggregate::addActorInternal(a2, (int32x2_t *)v17, this, v40, v19, v20, v21, v22, v39);
      v23 = v40;
      if (v40)
      {
        v24 = (unsigned int *)((char *)v40 + 24);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
          (*(void (**)(uint64_t))(*((_QWORD *)v23 + 2) + 16))((uint64_t)v23 + 16);
      }
    }
  }
  v27 = this[1156].u32[1];
  if (!v27)
  {
    v31 = 0;
    goto LABEL_21;
  }
  v28 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
  v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
  v31 = (v27 - 1) & ((v30 >> 31) ^ v30);
  v32 = *(unsigned int *)(*(_QWORD *)&this[1155] + 4 * v31);
  if ((_DWORD)v32 == -1)
  {
LABEL_21:
    if (this[1158].i32[1] == this[1156].i32[0])
    {
      if (v27)
        v33 = 2 * v27;
      else
        v33 = 16;
      if (v27 < v33)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&this[1152], v33, result);
        v27 = this[1156].u32[1];
      }
      v34 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
      v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
      v31 = (v27 - 1) & ((v36 >> 31) ^ v36);
    }
    v37 = this[1157].u32[1];
    this[1157].i32[1] = v37 + 1;
    v38 = this[1155];
    *(_DWORD *)(*(_QWORD *)&this[1154] + 4 * v37) = *(_DWORD *)(*(_QWORD *)&v38 + 4 * v31);
    *(_DWORD *)(*(_QWORD *)&v38 + 4 * v31) = v37;
    result = (int8x8_t)vadd_s32(this[1158], (int32x2_t)0x100000001);
    this[1158] = (int32x2_t)result;
    *(_QWORD *)(*(_QWORD *)&this[1153] + 8 * v37) = a2;
    return result;
  }
  while (*(physx::PxAggregate **)(*(_QWORD *)&this[1153] + 8 * v32) != a2)
  {
    v32 = *(unsigned int *)(*(_QWORD *)&this[1154] + 4 * v32);
    if ((_DWORD)v32 == -1)
      goto LABEL_21;
  }
  return result;
}

physx::NpScene *physx::NpScene::removeAggregate(physx::NpScene *this, physx::PxAggregate *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  physx::NpScene *result;
  int8x8_t v10;
  uint64_t v11;
  uint64_t i;
  int32x2_t *v13;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  physx::PxAggregate *v24;

  if ((physx::NpScene *)(*(uint64_t (**)(physx::PxAggregate *))(*(_QWORD *)a2 + 104))(a2) != this)
    return (physx::NpScene *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v6, v7, v8, (char)"PxScene::removeAggregate(): Aggregate");
  result = (physx::NpScene *)(*(uint64_t (**)(physx::PxAggregate *))(*(_QWORD *)a2 + 104))(a2);
  if (result == this)
  {
    v11 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(int32x2_t **)(*((_QWORD *)a2 + 9) + 8 * i);
        if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)v13 + 48))(v13) == 2)
        {
          if ((*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v13 + 56))(v13))
          {
            v15 = (uint64_t)v13[48];
            v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 200))(v15) + 120);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 152))(v15))
            {
              v18 = 0;
              do
                physx::Scb::Aggregate::removeActor((_QWORD *)a2 + 2, *(_QWORD *)(v16 + 8 * v18++) + 96, 0, v17);
              while (v18 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 152))(v15));
            }
            physx::NpScene::removeArticulationInternal((int32x2_t *)this, v15, a3, 0);
          }
        }
        else
        {
          physx::Scb::Aggregate::removeActor((_QWORD *)a2 + 2, (uint64_t)v13 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v13[1].u16[0] + 18), 0, v14);
          physx::NpScene::removeActorInternal((int32x2_t *)this, v13, a3, 0, v19, v20, v21, v22, v23);
        }
      }
    }
    physx::Scb::Scene::removeAggregate((int32x2_t *)this + 2, (physx::PxAggregate *)((char *)a2 + 16), v10);
    v24 = a2;
    return (physx::NpScene *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 9216, (uint64_t *)&v24);
  }
  return result;
}

uint64_t physx::NpScene::getNbAggregates(physx::NpScene *this)
{
  return *((unsigned int *)this + 2317);
}

uint64_t physx::NpScene::getAggregates(physx::NpScene *this, physx::PxAggregate **a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  physx::PxAggregate **v7;
  uint64_t v8;
  physx::PxAggregate *v9;

  v5 = (*((_DWORD *)this + 2317) - a4) & ~((int)(*((_DWORD *)this + 2317) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (physx::PxAggregate **)(*((_QWORD *)this + 1153) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

void physx::NpScene::addCollection(int32x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  physx::PxActor **v12;
  physx::PxActor **v14;
  unsigned int v15[2];

  v2 = *(unsigned int *)(a2 + 116);
  v14 = 0;
  *(_QWORD *)v15 = 0;
  if ((_DWORD)v2)
  {
    physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate((uint64_t)&v14, v2);
    v9 = 0;
    v10 = 16 * v2;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v9);
      switch(*(_WORD *)(v11 + 8))
      {
        case 5:
        case 6:
          if (!*(_QWORD *)(v11 + 80))
            physx::NpScene::addCollection(physx::PxCollection const&)::Local::addActorIfNeeded(*(_QWORD *)(*(_QWORD *)(a2 + 72) + v9), (uint64_t)&v14);
          break;
        case 0xA:
          (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11);
          break;
        case 0xB:
        case 0xC:
          if (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 192))(*(_QWORD *)(*(_QWORD *)(a2 + 72) + v9)))
            (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v11);
          break;
        case 0x10:
          (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v11);
          break;
        default:
          break;
      }
      v9 += 16;
    }
    while (v10 != v9);
    v12 = v14;
    if (v15[0])
    {
      physx::NpScene::addActorsInternal(a1, (int32x2_t **)v14, v15[0], 0, v5, v6, v7, v8, (char)v14);
      v12 = v14;
    }
  }
  else
  {
    v12 = 0;
  }
  if ((v15[1] & 0x80000000) == 0 && (v15[1] & 0x7FFFFFFF) != 0 && v12 != 0)
    (*(void (**)(uint64_t, physx::PxActor **))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
}

uint64_t physx::NpScene::addCollection(physx::PxCollection const&)::Local::addActorIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if (!result)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v5)
    {
      return physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(a2, &v6);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = a1;
      *(_DWORD *)(a2 + 8) = v5 + 1;
    }
  }
  return result;
}

uint64_t physx::NpScene::getNbActors(uint64_t a1, __int16 *a2)
{
  __int16 v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;

  v3 = *a2;
  if ((*a2 & 1) != 0 && (v4 = *(_DWORD *)(a1 + 9152)) != 0)
  {
    LODWORD(result) = 0;
    v6 = v4 - 1;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 9144) + 8 * v6);
      if (v7)
        v8 = *(unsigned __int16 *)(v7 + 8) == 6;
      else
        v8 = 0;
      if (v8)
        result = (result + 1);
      else
        result = result;
    }
    while ((unint64_t)v6--);
    if ((v3 & 2) == 0)
      return result;
  }
  else
  {
    result = 0;
    if ((v3 & 2) == 0)
      return result;
  }
  v10 = *(_DWORD *)(a1 + 9152);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 9144);
    v12 = v10 - 1;
    do
    {
      v13 = *(_QWORD *)(v11 + 8 * v12);
      if (v13)
        v14 = *(unsigned __int16 *)(v13 + 8) == 5;
      else
        v14 = 0;
      if (v14)
        result = (result + 1);
      else
        result = result;
    }
    while ((unint64_t)v12--);
  }
  return result;
}

unint64_t physx::NpScene::getActors(uint64_t a1, __int16 *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  __int16 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;

  v5 = *a2;
  if ((*a2 & 3) == 0)
    return 0;
  v6 = 0;
  if (a4)
  {
    v7 = *(unsigned int *)(a1 + 9152);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v6 = 0;
      do
      {
        if ((v5 & 1) != 0
          && ((v10 = *(_QWORD *)(*(_QWORD *)(a1 + 9144) + 8 * v8)) != 0
            ? (v11 = *(unsigned __int16 *)(v10 + 8) == 6)
            : (v11 = 0),
              v11)
          || (v5 & 2) != 0
          && ((v10 = *(_QWORD *)(*(_QWORD *)(a1 + 9144) + 8 * v8)) != 0
            ? (v12 = *(unsigned __int16 *)(v10 + 8) == 5)
            : (v12 = 0),
              v12))
        {
          if (v9 >= a5)
            *(_QWORD *)(a3 + 8 * v6++) = v10;
          ++v9;
        }
        ++v8;
      }
      while (v8 < v7 && v6 < a4);
    }
  }
  return v6;
}

uint64_t physx::NpScene::getActiveActors(physx::NpScene *this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v10;
  char v11;

  if (*((_BYTE *)this + 7705))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 704, "PxScene::getActiveActors() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, v11);
    result = 0;
    *a2 = 0;
  }
  else
  {
    v10 = *((_DWORD *)this + 1054);
    *a2 = v10;
    if (v10)
      return *((_QWORD *)this + 526);
    else
      return 0;
  }
  return result;
}

uint64_t physx::NpScene::getFrozenActors(physx::NpScene *this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v10;
  char v11;

  if (*((_BYTE *)this + 7705))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 721, "PxScene::getFrozenActors() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, v11);
    result = 0;
    *a2 = 0;
  }
  else
  {
    v10 = *((_DWORD *)this + 1058);
    *a2 = v10;
    if (v10)
      return *((_QWORD *)this + 528);
    else
      return 0;
  }
  return result;
}

uint64_t physx::NpScene::setFrozenActorFlag(uint64_t this, char a2)
{
  *(_BYTE *)(this + 9731) = a2;
  return this;
}

uint64_t physx::NpScene::getNbArticulations(physx::NpScene *this)
{
  return *((unsigned int *)this + 2303);
}

uint64_t physx::NpScene::getArticulations(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (*(_DWORD *)(a1 + 9212) - a4) & ~((int)(*(_DWORD *)(a1 + 9212) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 9168) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpScene::getNbConstraints(physx::NpScene *this)
{
  return *((unsigned int *)this + 2285);
}

uint64_t physx::NpScene::getConstraints(physx::NpScene *this, physx::PxConstraint **a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t result;
  physx::PxConstraint **v7;
  uint64_t v8;
  physx::PxConstraint *v9;

  v5 = (*((_DWORD *)this + 2285) - a4) & ~((int)(*((_DWORD *)this + 2285) - a4) >> 31);
  if (v5 >= a3)
    result = a3;
  else
    result = v5;
  if ((_DWORD)result)
  {
    v7 = (physx::PxConstraint **)(*((_QWORD *)this + 1137) + 8 * a4);
    v8 = result;
    do
    {
      v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpScene::getRenderBuffer(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (*((_DWORD *)this + 1877))
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1448, "PxScene::getRenderBuffer() not allowed while simulation is running.", a6, a7, a8, v10);
  return (uint64_t)this + 9000;
}

void physx::NpScene::getSimulationStatistics(physx::NpScene *this, physx::PxSimulationStatistics *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_DWORD *)this + 1877))
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1551, "PxScene::getSimulationStatistics() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  else
    physx::Sc::Scene::getStats((physx::NpScene *)((char *)this + 32), a2);
}

uint64_t physx::NpScene::createClient(physx::NpScene *this)
{
  int v1;
  int v2;

  ++*((_DWORD *)this + 2335);
  if (!*((_BYTE *)this + 7705))
    return physx::Sc::Scene::createClient((physx::NpScene *)((char *)this + 32));
  v1 = *((_DWORD *)this + 1050);
  v2 = *((_DWORD *)this + 2155);
  *((_DWORD *)this + 2155) = v2 + 1;
  return (v2 + v1);
}

uint64_t physx::NpScene::setFrictionType(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 1920) + 148) = a2;
  return result;
}

uint64_t physx::NpScene::getFrictionType(physx::NpScene *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 240) + 148);
}

uint64_t physx::NpScene::setSimulationEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_BYTE *)(a1 + 7705))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 503, "PxScene::setSimulationEventCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  else
    return physx::Sc::Scene::setSimulationEventCallback(a1 + 32, a2);
}

uint64_t physx::NpScene::getSimulationEventCallback(physx::NpScene *this)
{
  return *((_QWORD *)this + 534);
}

uint64_t physx::NpScene::setContactModifyCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;

  if (*(_BYTE *)(a1 + 7705))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 516, "PxScene::setContactModifyCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  v10 = *(_QWORD *)(a1 + 1872);
  *(_QWORD *)(v10 + 1768) = a2;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 1776) + 176))(*(_QWORD *)(v10 + 1776));
}

uint64_t physx::NpScene::getContactModifyCallback(physx::NpScene *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 234) + 1768);
}

uint64_t physx::NpScene::setCCDContactModifyCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_BYTE *)(result + 7705))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 529, "PxScene::setCCDContactModifyCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  *(_QWORD *)(*(_QWORD *)(result + 1896) + 168) = a2;
  return result;
}

uint64_t physx::NpScene::getCCDContactModifyCallback(physx::NpScene *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 237) + 168);
}

uint64_t physx::NpScene::setBroadPhaseCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_BYTE *)(result + 7705))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 555, "PxScene::setBroadPhaseCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  *(_QWORD *)(result + 4280) = a2;
  return result;
}

uint64_t physx::NpScene::getBroadPhaseCallback(physx::NpScene *this)
{
  return *((_QWORD *)this + 535);
}

uint64_t physx::NpScene::setCCDMaxPasses(uint64_t this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_BYTE *)(this + 7705))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 542, "PxScene::setCCDMaxPasses() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  *(_DWORD *)(*(_QWORD *)(this + 1896) + 436) = a2;
  return this;
}

uint64_t physx::NpScene::getCCDMaxPasses(physx::NpScene *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 237) + 436);
}

uint64_t physx::NpScene::getBroadPhaseType(physx::NpScene *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 235) + 392) + 72))(*(_QWORD *)(*((_QWORD *)this + 235) + 392));
}

uint64_t physx::NpScene::getBroadPhaseCaps(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1880) + 392) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 1880) + 392));
}

uint64_t physx::NpScene::getNbBroadPhaseRegions(physx::NpScene *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 235) + 392) + 24))(*(_QWORD *)(*((_QWORD *)this + 235) + 392));
}

uint64_t physx::NpScene::getBroadPhaseRegions(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1880) + 392) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 1880) + 392));
}

uint64_t physx::NpScene::addBroadPhaseRegion(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (*a2 <= a2[3])
    return physx::Scb::Scene::addBroadPhaseRegion(a1 + 16, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1682, "PxScene::addBroadPhaseRegion(): region bounds are empty. Call will be ignored.", a6, a7, a8, vars0);
  return 0xFFFFFFFFLL;
}

uint64_t physx::NpScene::removeBroadPhaseRegion(physx::NpScene *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return physx::Scb::Scene::removeBroadPhaseRegion((physx::NpScene *)((char *)this + 16), a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *physx::NpScene::setFilterShaderData(physx::NpScene *this, const void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_BYTE *)this + 7705))
    return (_QWORD *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 565, "PxScene::setFilterShaderData() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  else
    return physx::Sc::Scene::setFilterShaderData((_QWORD *)this + 4, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::NpScene::getFilterShaderData(physx::NpScene *this)
{
  return *((_QWORD *)this + 504);
}

uint64_t physx::NpScene::getFilterShaderDataSize(physx::NpScene *this)
{
  return *((unsigned int *)this + 1010);
}

uint64_t physx::NpScene::getFilterShader(physx::NpScene *this)
{
  return *((_QWORD *)this + 506);
}

uint64_t physx::NpScene::getFilterCallback(physx::NpScene *this)
{
  return *((_QWORD *)this + 507);
}

void physx::NpScene::resetFiltering(physx::NpScene *this, physx::PxActor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10;
  _QWORD *v11;
  double v12;
  double v13;
  _BYTE *v14;

  v10 = *((unsigned __int16 *)a2 + 4);
  switch(v10)
  {
    case 5:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, 0, 0);
      if ((*((_BYTE *)a2 + 381) & 0x40) != 0)
        v14 = (_BYTE *)(*((_QWORD *)a2 + 14) + 348);
      else
        v14 = (char *)a2 + 172;
      if ((*v14 & 1) == 0)
        physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a2, (physx::PxActor *)((char *)a2 + 96), 0, 1, v13);
      break;
    case 13:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, 0, 0);
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 48) + 200))(*((_QWORD *)a2 + 48));
      physx::PxArticulationImpl::wakeUpInternal(v11, 0, 1, v12);
      break;
    case 6:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, 0, 0);
      break;
    default:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1767, "PxScene::resetFiltering(): only PxRigidActor supports this operation!", a6, a7, a8, a9);
      break;
  }
}

void physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int8x8_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE v30[7];
  char v31;
  _BYTE *v32;
  BOOL v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    a4 = *(unsigned __int16 *)(a1 + 48);
  v8 = (8 * a4);
  v33 = v8 > 0x400;
  if (v8 > 0x400)
  {
    v18 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v31, (8 * a4), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 417);
    v32 = v18;
    if (!v18)
      goto LABEL_46;
    if (!a3)
      goto LABEL_23;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v18 = &v30[-((v8 + 15) & 0x1FFFFFFF0)];
    bzero(v18, (8 * a4));
    v32 = &v30[-((v8 + 15) & 0x1FFFFFFF0)];
    if (!a3)
    {
LABEL_23:
      v20 = (_QWORD *)(a1 + 40);
      if (*(_WORD *)(a1 + 48) != 1)
        v20 = (_QWORD *)*v20;
      if (!a4)
        return;
      v21 = 0;
      v10 = 0;
      while (1)
      {
        v22 = v20[v21];
        v23 = *(_DWORD *)(v22 + 56);
        if ((v23 & 0x40) != 0)
          v24 = (_BYTE *)(*(_QWORD *)(v22 + 64) + 52);
        else
          v24 = (_BYTE *)(v22 + 144);
        if ((*v24 & 5) == 0)
          goto LABEL_42;
        v25 = v22 + 48;
        v26 = *(_DWORD *)(a2 + 8);
        if ((v26 & 8) != 0)
        {
          if ((v23 & 0xF000000) == 0x1000000)
          {
            if (v23 >> 30 == 1)
              goto LABEL_42;
          }
          else
          {
            v27 = *(_QWORD *)(a2 + 16);
            if (!v27)
            {
              v19 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)a2, HIBYTE(v26) & 0xF).n128_u64[0];
              *(_QWORD *)(a2 + 16) = v27;
            }
            v28 = *(unsigned int *)(v27 + 56);
            if ((_DWORD)v28)
            {
              v29 = *(_QWORD **)(v27 + 48);
              while (*v29 != v25)
              {
                ++v29;
                if (!--v28)
                  goto LABEL_41;
              }
              goto LABEL_42;
            }
          }
        }
LABEL_41:
        v18[v10++] = v25;
LABEL_42:
        if (++v21 == a4)
          goto LABEL_43;
      }
    }
  }
  if (!a4)
    return;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * v9);
    v12 = v11 + 48;
    v13 = *(_DWORD *)(a2 + 8);
    if ((v13 & 8) == 0)
    {
LABEL_19:
      v18[v10++] = v12;
      goto LABEL_20;
    }
    v14 = *(_DWORD *)(v11 + 56);
    if ((v14 & 0xF000000) == 0x1000000)
    {
      if (v14 >> 30 != 1)
        goto LABEL_19;
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 16);
      if (!v15)
      {
        v19 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)a2, HIBYTE(v13) & 0xF).n128_u64[0];
        *(_QWORD *)(a2 + 16) = v15;
      }
      v16 = *(unsigned int *)(v15 + 56);
      if (!(_DWORD)v16)
        goto LABEL_19;
      v17 = *(_QWORD **)(v15 + 48);
      while (*v17 != v12)
      {
        ++v17;
        if (!--v16)
          goto LABEL_19;
      }
    }
LABEL_20:
    ++v9;
  }
  while (v9 != a4);
LABEL_43:
  if (v10)
    physx::Scb::RigidObject::resetFiltering((physx::Scb::RigidObject *)a2, (physx::Scb::Shape **)v18, v10, v19);
  if (v8 >= 0x401)
LABEL_46:
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v32, (char *)v18);
}

void physx::NpScene::resetFiltering(physx::NpScene *this, physx::PxRigidActor *a2, physx::PxShape *const *a3, int a4)
{
  int v5;
  _QWORD *v6;
  double v7;
  double v8;
  _BYTE *v9;

  v5 = *((unsigned __int16 *)a2 + 4);
  switch(v5)
  {
    case 5:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, (uint64_t)a3, a4);
      if ((*((_BYTE *)a2 + 381) & 0x40) != 0)
        v9 = (_BYTE *)(*((_QWORD *)a2 + 14) + 348);
      else
        v9 = (char *)a2 + 172;
      if ((*v9 & 1) == 0)
        physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a2, (physx::PxRigidActor *)((char *)a2 + 96), 0, 1, v8);
      break;
    case 13:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, (uint64_t)a3, a4);
      v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 48) + 200))(*((_QWORD *)a2 + 48));
      physx::PxArticulationImpl::wakeUpInternal(v6, 0, 1, v7);
      break;
    case 6:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, (uint64_t)a3, a4);
      break;
  }
}

uint64_t physx::NpScene::getKinematicKinematicFilteringMode(physx::NpScene *this)
{
  return *((unsigned int *)this + 1016);
}

uint64_t physx::NpScene::getStaticKinematicFilteringMode(physx::NpScene *this)
{
  return *((unsigned int *)this + 1017);
}

uint64_t physx::NpScene::getPhysics(physx::NpScene *this)
{
  return physx::NpPhysics::mInstance;
}

uint64_t physx::NpScene::simulateOrCollide(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, char *a6, uint64_t a7, uint64_t a8, float a9, char a10)
{
  int v11;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  unint64_t v27;
  unint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  float *v48;
  float *v49;
  float *v50;
  float *v51;
  float v52;
  int v53;
  float *v54;
  float v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float32x2_t v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float32x2_t v65;
  unint64_t v66;
  _BYTE *v67;
  float v68;
  int32x2_t v69;
  unsigned int v70;
  float v71;
  float v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  uint64_t v78;
  float *v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  float v95;
  float v96;
  int v97;
  float v99;
  int32x2_t v100;
  _BYTE v101[24];
  char v102;
  _BYTE v103[24];
  float v104;
  char v105;
  _OWORD v106[2];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  if (*(_DWORD *)(a1 + 7508))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1859, a6, (uint64_t)a6, a7, a8, a10);
  v11 = a7;
  v17 = (_BYTE *)(a1 + 8292);
  *(_DWORD *)(a1 + 9016) = 0;
  *(_DWORD *)(a1 + 9032) = 0;
  *(_DWORD *)(a1 + 9048) = 0;
  *(_DWORD *)(a1 + 9064) = 0;
  *(_DWORD *)(a1 + 9080) = 0;
  if ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 560))(a1, 0) != 0.0)
  {
    memset(v106, 0, sizeof(v106));
    v108 = 0;
    v109 = 0;
    v107 = 0x3F80000000000000;
    v112 = 0;
    v111 = 0;
    v110 = 1065353216;
    v113 = 1065353216;
    v114 = 0;
    v115 = 0;
    v116 = 1065353216;
    v117 = a1 + 9000;
    v26 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, 1);
    if (v26 != 0.0)
    {
      *(float *)v103 = v26;
      *(float *)&v103[4] = v26;
      *(float *)&v103[8] = v26;
      *(_QWORD *)&v103[12] = 0xFF00FF00FFFF0000;
      *(_DWORD *)&v103[20] = -16776961;
      physx::Cm::operator<<(v106, (uint64_t)v103);
    }
    v27 = *(unsigned int *)(a1 + 9212);
    if ((_DWORD)v27)
    {
      for (i = 0; i < v27; ++i)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 9168) + 8 * i);
        if (*(_DWORD *)(v29 + 152))
        {
          v30 = 0;
          do
            physx::NpArticulationLink::visualize(*(_QWORD *)(*(_QWORD *)(v29 + 144) + 8 * v30++), (uint64_t)v106, a1);
          while (v30 < *(unsigned int *)(v29 + 152));
          v27 = *(unsigned int *)(a1 + 9212);
        }
      }
    }
    v97 = a5;
    v31 = *(unsigned int *)(a1 + 9152);
    if (!(_DWORD)v31)
    {
LABEL_103:
      v86 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, 17);
      v87 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, 18);
      if (v86 != 0.0)
      {
        v88 = *(_QWORD *)(a1 + 8640);
        if (v88)
          (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v88 + 120))(v88, v106, 4278190335);
      }
      if (v87 != 0.0)
      {
        v89 = *(_QWORD *)(a1 + 8688);
        if (v89)
          (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v89 + 120))(v89, v106, 4294901760);
      }
      if ((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, 23) != 0.0)
      {
        *(_OWORD *)v103 = xmmword_2260E5D70;
        *(_QWORD *)&v103[16] = 0;
        v104 = 0.0;
        physx::Cm::RenderOutput::operator<<((uint64_t)v106, (uint64_t)v103);
        v90 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1880) + 392) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 1880) + 392));
        if (v90)
        {
          v91 = v90;
          v92 = 0;
          do
          {
            (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 1880) + 392)
                                                                      + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 1880) + 392), v103, 1, v92);
            if (v105)
              v93 = -256;
            else
              v93 = -16777216;
            DWORD1(v106[0]) = v93;
            *(_OWORD *)v101 = *(_OWORD *)v103;
            *(_QWORD *)&v101[16] = *(_QWORD *)&v103[16];
            v102 = 1;
            physx::Cm::operator<<(v106, (uint64_t *)v101);
            v92 = (v92 + 1);
          }
          while (v91 != (_DWORD)v92);
        }
      }
      a5 = v97;
      if ((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, 22) != 0.0)
      {
        v94 = (*(_BYTE *)(a1 + 8624) & 0x40) != 0 ? a1 + 8316 : *(_QWORD *)(a1 + 1872) + 1888;
        v95 = *(float *)v94;
        v96 = *(float *)(v94 + 12);
        if (*(float *)v94 <= v96)
        {
          DWORD1(v106[0]) = -256;
          *(float *)v103 = v95;
          *(_QWORD *)&v103[4] = *(_QWORD *)(v94 + 4);
          *(float *)&v103[12] = v96;
          *(_QWORD *)&v103[16] = *(_QWORD *)(v94 + 16);
          LOBYTE(v104) = 1;
          physx::Cm::operator<<(v106, (uint64_t *)v103);
        }
      }
      goto LABEL_4;
    }
    v32 = *(uint64_t **)(a1 + 9144);
    __asm { FMOV            V11.2S, #1.0 }
    while (1)
    {
      v38 = *v32;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v32 + 48))(*v32) == 1)
        break;
      physx::NpShapeManager::visualize((uint64_t *)(v38 + 40), (uint64_t)v106, a1, v38);
      v41 = *(unsigned int *)(v38 + 104);
      if ((v41 & 1) != 0)
        v42 = *(_BYTE **)(v38 + 112);
      else
        v42 = (_BYTE *)(v38 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v41 >> 24) & 0xF) + 3) + 108);
      if ((*v42 & 1) != 0)
      {
        if ((*(_BYTE *)(a1 + 8624) & 0x20) == 0)
        {
          v46 = *(_QWORD *)(a1 + 1872);
          v47 = *(float *)(v46 + 1792);
          goto LABEL_99;
        }
        v50 = (float *)(a1 + 8196);
        if (!*v17)
          v50 = (float *)(*(_QWORD *)(a1 + 1872) + 1792);
        v47 = *v50;
        if (v17[10])
        {
          v51 = (float *)(a1 + 8236);
        }
        else
        {
          v46 = *(_QWORD *)(a1 + 1872);
LABEL_99:
          v51 = (float *)(v46 + 1832);
        }
        v85 = v47 * *v51;
        if (v85 != 0.0)
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v38 + 152))(v103, v38);
          physx::Cm::RenderOutput::operator<<((uint64_t)v106, (uint64_t)v103);
          *(float *)v101 = v85;
          *(float *)&v101[4] = v85;
          *(float *)&v101[8] = v85;
          *(_QWORD *)&v101[12] = 0xFF00FF00FFFF0000;
          *(_DWORD *)&v101[20] = -16776961;
          physx::Cm::operator<<(v106, (uint64_t)v101);
        }
      }
LABEL_102:
      ++v32;
      if (!--v31)
        goto LABEL_103;
    }
    physx::NpShapeManager::visualize((uint64_t *)(v38 + 40), (uint64_t)v106, a1, v38);
    v39 = *(unsigned int *)(v38 + 104);
    if ((v39 & 1) != 0)
      v40 = *(_BYTE **)(v38 + 112);
    else
      v40 = (_BYTE *)(v38 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v39 >> 24) & 0xF) + 3) + 108);
    if ((*v40 & 1) == 0)
    {
LABEL_72:
      v66 = *(unsigned int *)(v38 + 104);
      if ((v66 & 1) != 0)
        v67 = *(_BYTE **)(v38 + 112);
      else
        v67 = (_BYTE *)(v38 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v66 >> 24) & 0xF) + 3) + 108);
      if ((*v67 & 1) != 0)
      {
        v68 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 560))(a1, 0);
        if ((float)(v68 * (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, 3)) != 0.0)
        {
          if (*(_DWORD *)(v38 + 376))
          {
            v70 = 16711680;
          }
          else
          {
            v71 = *(float *)(v38 + 372) / *(float *)(a1 + 0x2000);
            if (v71 <= 1.0)
              v72 = v71 * 255.0;
            else
              v72 = 255.0;
            v70 = (v72 << 16) | (v72 << 8) | v72;
          }
          v73 = *(_DWORD *)(v38 + 380);
          if ((v73 & 2) != 0)
          {
            v75 = *(_QWORD *)(v38 + 112) + 168;
          }
          else
          {
            v74 = *(_QWORD *)(v38 + 304);
            if (v74 && *(_BYTE *)(v74 + 31) == 1)
              v75 = v74 + 32;
            else
              v75 = v38 + 256;
          }
          v76 = *(float *)(v75 + 8);
          v77 = 1.0 / v76;
          _ZF = v76 == 0.0;
          v69.i32[0] = 0;
          if (!_ZF)
            *(float *)v69.i32 = v77;
          if ((v73 & 1) != 0)
          {
            v79 = (float *)(*(_QWORD *)(v38 + 112) + 164);
          }
          else
          {
            v78 = *(_QWORD *)(v38 + 304);
            if (v78 && *(_BYTE *)(v78 + 31) == 1)
              v79 = (float *)(v78 + 44);
            else
              v79 = (float *)(v38 + 268);
          }
          v80 = (float32x2_t)vrev64_s32(*(int32x2_t *)v75);
          v81 = (float32x2_t)vbic_s8((int8x8_t)vdiv_f32(_D11, v80), (int8x8_t)vceqz_f32(v80));
          *(float *)v69.i32 = *(float *)v69.i32 * (float)(6.0 / (float)(1.0 / *v79));
          v99 = 6.0 / (float)(1.0 / *v79);
          v100 = v69;
          DWORD1(v106[0]) = v70;
          physx::Cm::RenderOutput::operator<<((uint64_t)v106, v38 + 320);
          v82 = vmul_n_f32(v81, v99);
          v83 = vsqrt_f32(vabs_f32(vadd_f32((float32x2_t)vdup_lane_s32(v100, 0), vsub_f32(v82, (float32x2_t)vrev64_s32((int32x2_t)v82)))));
          v82.f32[0] = sqrtf(vabds_f32(vaddv_f32(v82), *(float *)v100.i32));
          v84 = vmul_f32(v83, (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)v103 = vneg_f32(v84);
          *(float *)&v103[8] = -(float)(v82.f32[0] * 0.5);
          *(float32x2_t *)&v103[12] = v84;
          *(float *)&v103[20] = v82.f32[0] * 0.5;
          LOBYTE(v104) = 1;
          physx::Cm::operator<<(v106, (uint64_t *)v103);
        }
      }
      goto LABEL_102;
    }
    v43 = *(_DWORD *)(a1 + 8624);
    if ((v43 & 0x20) != 0)
    {
      v48 = (float *)(a1 + 8196);
      if (!*v17)
        v48 = (float *)(*(_QWORD *)(a1 + 1872) + 1792);
      v45 = *v48;
      if (v17[10])
      {
        v49 = (float *)(a1 + 8236);
LABEL_55:
        v52 = v45 * *v49;
        if (v52 != 0.0)
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v38 + 152))(v103, v38);
          physx::Cm::RenderOutput::operator<<((uint64_t)v106, (uint64_t)v103);
          *(float *)v101 = v52;
          *(float *)&v101[4] = v52;
          *(float *)&v101[8] = v52;
          *(_QWORD *)&v101[12] = 0xFF00FF00FFFF0000;
          *(_DWORD *)&v101[20] = -16776961;
          physx::Cm::operator<<(v106, (uint64_t)v101);
          v43 = *(_DWORD *)(a1 + 8624);
        }
        v53 = v43 & 0x20;
        if (!v53 || (v54 = (float *)(a1 + 8204), !v17[2]))
          v54 = (float *)(*(_QWORD *)(a1 + 1872) + 1800);
        v55 = v45 * *v54;
        if (v55 != 0.0)
        {
          physx::Cm::RenderOutput::operator<<((uint64_t)v106, v38 + 320);
          *(float *)v103 = v55;
          *(float *)&v103[4] = v55;
          *(float *)&v103[8] = v55;
          *(_QWORD *)&v103[12] = 0xFF00FF00FFFF0000;
          *(_DWORD *)&v103[20] = -16776961;
          physx::Cm::operator<<(v106, (uint64_t)v103);
          v53 = *(_DWORD *)(a1 + 8624) & 0x20;
        }
        if (!v53 || (v56 = (float *)(a1 + 8212), !v17[4]))
          v56 = (float *)(*(_QWORD *)(a1 + 1872) + 1808);
        v57 = v45 * *v56;
        if (v57 != 0.0)
        {
          DWORD1(v106[0]) = 0xFFFFFF;
          HIDWORD(v107) = 1065353216;
          v108 = 0;
          v109 = 0;
          v111 = 0;
          v112 = 0;
          v110 = 1065353216;
          v113 = 1065353216;
          v114 = 0;
          v115 = 0;
          v116 = 1065353216;
          v58 = v57 * *(float *)(v38 + 356);
          v59 = v57 * 0.2;
          *(_DWORD *)&v103[8] = *(_DWORD *)(v38 + 344);
          v60 = vmul_n_f32(*(float32x2_t *)(v38 + 348), v57);
          *(_QWORD *)v103 = *(_QWORD *)(v38 + 336);
          *(float32x2_t *)&v103[12] = vadd_f32(v60, *(float32x2_t *)v103);
          *(float *)&v103[20] = v58 + *(float *)&v103[8];
          v104 = v59;
          physx::Cm::operator<<(v106, (float *)v103);
          v53 = *(_DWORD *)(a1 + 8624) & 0x20;
        }
        if (!v53 || (v61 = (float *)(a1 + 8216), !v17[5]))
          v61 = (float *)(*(_QWORD *)(a1 + 1872) + 1812);
        v62 = v45 * *v61;
        if (v62 != 0.0)
        {
          DWORD1(v106[0]) = 0;
          HIDWORD(v107) = 1065353216;
          v108 = 0;
          v109 = 0;
          v111 = 0;
          v112 = 0;
          v110 = 1065353216;
          v113 = 1065353216;
          v114 = 0;
          v115 = 0;
          v116 = 1065353216;
          v63 = v62 * *(float *)(v38 + 368);
          v64 = v62 * 0.2;
          *(_DWORD *)&v103[8] = *(_DWORD *)(v38 + 344);
          v65 = vmul_n_f32(*(float32x2_t *)(v38 + 360), v62);
          *(_QWORD *)v103 = *(_QWORD *)(v38 + 336);
          *(float32x2_t *)&v103[12] = vadd_f32(v65, *(float32x2_t *)v103);
          *(float *)&v103[20] = v63 + *(float *)&v103[8];
          v104 = v64;
          physx::Cm::operator<<(v106, (float *)v103);
        }
        goto LABEL_72;
      }
      v44 = *(_QWORD *)(a1 + 1872);
    }
    else
    {
      v44 = *(_QWORD *)(a1 + 1872);
      v45 = *(float *)(v44 + 1792);
    }
    v49 = (float *)(v44 + 1832);
    goto LABEL_55;
  }
LABEL_4:
  if (*(_DWORD *)(a1 + 9140))
  {
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 9096);
    do
      physx::NpConstraint::updateConstants(*(_QWORD *)(v19 + 8 * v18++));
    while (v18 < *(unsigned int *)(a1 + 9140));
  }
  physx::PxcScratchAllocator::setBlock(*(_QWORD *)(a1 + 1872), a3, a4);
  *(float *)(a1 + 9336) = a9;
  if (v11 == 1)
  {
    *(float *)(a1 + 2016) = a9;
    v20 = 1.0 / a9;
    if (a9 <= 0.0)
      v20 = 0.0;
    *(float *)(a1 + 2020) = v20;
  }
  v17[1396] = a5;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  physx::Scb::Scene::updateLowLevelMaterial((pthread_mutex_t **)(a1 + 16), *(physx::NpMaterial ***)(v21 + 56));
  *(_DWORD *)(a1 + 7508) = v11;
  *(_BYTE *)(a1 + 7705) = 1;
  v17[1437] = 1;
  if (a5)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 9360) + 16))(*(_QWORD *)(a1 + 9360));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 9360) + 24))(*(_QWORD *)(a1 + 9360));
  }
  v22 = *(_QWORD *)(a1 + 9360);
  if (v11 == 1)
  {
    *(_DWORD *)(a1 + 9456) = 1;
    *(_QWORD *)(a1 + 9448) = a2;
    *(_QWORD *)(a1 + 9440) = v22;
    if (a2)
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v23 = a1 + 9576;
    *(_DWORD *)(a1 + 9608) = 1;
    *(_QWORD *)(a1 + 9600) = a1 + 9424;
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 9424) + 32))(a1 + 9424);
    *(_QWORD *)(a1 + 9592) = *(_QWORD *)(*(_QWORD *)(a1 + 9600) + 16);
    v24 = *(_QWORD *)(a1 + 9360);
    *(_DWORD *)(a1 + 9408) = 1;
    *(_QWORD *)(a1 + 9400) = 0;
    *(_QWORD *)(a1 + 9392) = v24;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 9440) + 144))(*(_QWORD *)(a1 + 9440), a1 + 9424);
    v25 = *(_QWORD *)(a1 + 9592);
  }
  else
  {
    *(_DWORD *)(a1 + 9408) = 1;
    *(_QWORD *)(a1 + 9400) = a2;
    *(_QWORD *)(a1 + 9392) = v22;
    if (a2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v22 = *(_QWORD *)(a1 + 9360);
    }
    v23 = a1 + 9520;
    *(_DWORD *)(a1 + 9552) = 1;
    *(_QWORD *)(a1 + 9544) = a1 + 9376;
    *(_QWORD *)(a1 + 9536) = v22;
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 9376) + 32))(a1 + 9376);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 9392) + 144))(*(_QWORD *)(a1 + 9392), a1 + 9376);
    v25 = *(_QWORD *)(a1 + 9536);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 144))(v25, v23);
}

uint64_t physx::NpScene::simulate(physx::NpScene *this, float a2, physx::PxBaseTask *a3, char *a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return physx::NpScene::simulateOrCollide((uint64_t)this, (uint64_t)a3, a4, a5, a6, "PxScene::simulate: Simulation is still processing last simulate call, you should call fetchResults()!", 3, a9, a2, a10);
}

uint64_t physx::NpScene::advance(physx::NpScene *this, physx::PxBaseTask *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;

  if (*((_DWORD *)this + 1877) != 2)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1950, "PxScene::advance: advance() called illegally! advance() needed to be called after fetchCollision() and before fetchResult()!!", a6, a7, a8, a9);
  physx::Scb::Scene::syncWriteThroughProperties((pthread_mutex_t **)this + 2);
  *((_DWORD *)this + 1877) = 3;
  *((_QWORD *)this + 1175) = a2;
  if (a2)
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
  v11 = *((_QWORD *)this + 1170);
  *((_DWORD *)this + 2416) = 1;
  *((_QWORD *)this + 1207) = (char *)this + 9376;
  *((_QWORD *)this + 1206) = v11;
  (*(void (**)(char *))(*((_QWORD *)this + 1172) + 32))((char *)this + 9376);
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 1174) + 144))(*((_QWORD *)this + 1174), (char *)this + 9376);
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1206) + 144))(*((_QWORD *)this + 1206), (char *)this + 9632);
}

uint64_t physx::NpScene::collide(physx::NpScene *this, float a2, physx::PxBaseTask *a3, char *a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return physx::NpScene::simulateOrCollide((uint64_t)this, (uint64_t)a3, a4, a5, a6, "PxScene::collide: collide() called illegally! If it isn't the first frame, collide() needed to be called between fetchResults() and fetchCollision(). Otherwise, collide() needed to be called before fetchCollision()", 1, a9, a2, a10);
}

BOOL physx::NpScene::checkResults(physx::shdfnd::SyncImpl **this, int a2)
{
  return physx::shdfnd::SyncImpl::wait(this[1164], a2 << 31 >> 31);
}

BOOL physx::NpScene::checkCollision(physx::shdfnd::SyncImpl **this, int a2)
{
  return physx::shdfnd::SyncImpl::wait(this[1165], a2 << 31 >> 31);
}

BOOL physx::NpScene::fetchCollision(physx::shdfnd::SyncImpl **this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  char v10;

  if (*((_DWORD *)this + 1877) == 1)
  {
    result = physx::shdfnd::SyncImpl::wait(this[1165], a2 << 31 >> 31);
    if (result)
    {
      *((_DWORD *)this + 1877) = 2;
      return 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2048, "PxScene::fetchCollision: fetchCollision() should be called after collide() and before advance()!", a6, a7, a8, v10);
    return 0;
  }
  return result;
}

uint64_t physx::NpScene::fetchResultsPreContactCallbacks(physx::NpScene *this)
{
  physx::Scb::Scene *v2;
  physx::Sc::Scene *v3;
  int8x8_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v15;

  v2 = (physx::NpScene *)((char *)this + 16);
  v3 = (physx::NpScene *)((char *)this + 32);
  physx::Sc::Scene::prepareOutOfBoundsCallbacks((uint64_t)this + 32);
  physx::Scb::Scene::processPendingRemove(v2, v4);
  physx::Sc::Scene::endSimulation(v3);
  v8 = physx::Sc::Scene::fireOutOfBoundsCallbacks(v3);
  v9 = *((_QWORD *)this + 235);
  v10 = *(unsigned int *)(v9 + 432);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 424);
    v12 = *((_QWORD *)this + 535);
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v11 + 24) >> 30 == 3 || v12 == 0)
        v8 |= *(_DWORD *)(*(_QWORD *)v11 + 24) >> 30 != 3;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v11 += 8;
      --v10;
    }
    while (v10);
    v9 = *((_QWORD *)this + 235);
  }
  *(_DWORD *)(v9 + 432) = 0;
  if ((v8 & 1) != 0)
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2040, "At least one object is out of the broadphase bounds. To manage those objects, define a PxBroadPhaseCallback for each used client.", v5, v6, v7, v15);
  physx::Sc::Scene::fireBrokenConstraintCallbacks((uint64_t)v3);
  return physx::Sc::Scene::fireTriggerCallbacks((uint64_t)v3);
}

uint64_t physx::NpScene::fetchResultsPostContactCallbacks(physx::NpScene *this)
{
  char *v2;
  physx::Scb::Scene *v3;
  physx::Sc::Scene *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  pthread_mutex_t *v10;
  uint64_t (**v12)(SqRefFinder *__hidden, const physx::PxRigidBody *, const physx::PxShape *);

  v2 = (char *)this + 9688;
  v3 = (physx::NpScene *)((char *)this + 16);
  v4 = (physx::NpScene *)((char *)this + 32);
  physx::Sc::Scene::postCallbacksPreSync((physx::NpScene *)((char *)this + 32));
  physx::Scb::Scene::syncEntireScene(v3);
  v12 = &off_24ED968F0;
  physx::Sc::SqBoundsManager::syncBounds(*((_QWORD *)this + 265), (uint64_t (***)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))this + 1103, (uint64_t (***)(_QWORD, _QWORD, uint64_t))&v12, *(_QWORD *)(*((_QWORD *)this + 262) + 8), *((_QWORD *)this + 7), (uint64_t)this + 4544);
  v5 = *((unsigned int *)this + 24);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 11);
    do
    {
      v7 = *v6++;
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1092) + 16))(*((_QWORD *)this + 1092), *(unsigned int *)(*(_QWORD *)v7 + 88), v7 + 16);
      --v5;
    }
    while (v5);
  }
  ++*((_DWORD *)this + 2183);
  physx::Sq::SceneQueryManager::afterSync((physx::NpScene *)((char *)this + 8640), *((_DWORD *)this + 2248));
  physx::Sc::Scene::fireCallbacksPostSync(v4);
  physx::Sc::Scene::postReportsCleanup(v4);
  v8 = 8608;
  if ((*((_BYTE *)this + 8624) & 4) == 0)
    v8 = 4300;
  if ((*((_BYTE *)this + v8) & 1) != 0)
  {
    if (v2[43])
      physx::Sc::Scene::buildActiveAndFrozenActors((uint64_t)v4);
    else
      physx::Sc::Scene::buildActiveActors((uint64_t)v4);
  }
  physx::Cm::RenderBuffer::append((uint64_t)this + 9000, *((_QWORD *)this + 234) + 296);
  if (*v2)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1170) + 32))(*((_QWORD *)this + 1170));
  *((_DWORD *)this + 1877) = 0;
  v9 = (pthread_mutex_t *)*((_QWORD *)this + 1164);
  pthread_mutex_lock(v9);
  v9[1].__opaque[44] = 0;
  pthread_mutex_unlock(v9);
  v10 = (pthread_mutex_t *)*((_QWORD *)this + 1165);
  pthread_mutex_lock(v10);
  v10[1].__opaque[44] = 0;
  return pthread_mutex_unlock(v10);
}

BOOL physx::NpScene::fetchResults(physx::shdfnd::SyncImpl **this, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  char v11;

  if (*((_DWORD *)this + 1877) == 3)
  {
    result = physx::shdfnd::SyncImpl::wait(this[1164], a2 << 31 >> 31);
    if (result)
    {
      physx::NpScene::fetchResultsPreContactCallbacks((physx::NpScene *)this);
      physx::Sc::Scene::fireQueuedContactCallbacks((uint64_t)(this + 4), 0);
      physx::NpScene::fetchResultsPostContactCallbacks((physx::NpScene *)this);
      if (a3)
        *a3 = 0;
      return 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2159, "PxScene::fetchResults: fetchResults() called illegally! It must be called after advance() or simulate()", a6, a7, a8, v11);
    return 0;
  }
  return result;
}

BOOL physx::NpScene::fetchResultsStart(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  char *QueuedContactPairHeaders;
  char v13;

  if (*(_DWORD *)(a1 + 7508) == 3)
  {
    result = physx::shdfnd::SyncImpl::wait(*(physx::shdfnd::SyncImpl **)(a1 + 9312), a4 << 31 >> 31);
    if (result)
    {
      physx::NpScene::fetchResultsPreContactCallbacks((physx::NpScene *)a1);
      QueuedContactPairHeaders = physx::Sc::Scene::getQueuedContactPairHeaders((physx::Sc::Scene *)(a1 + 32));
      *a3 = *((_DWORD *)QueuedContactPairHeaders + 2);
      *a2 = *(_QWORD *)QueuedContactPairHeaders;
      result = 1;
      *(_BYTE *)(a1 + 9730) = 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2210, "PXScene::fetchResultsStart: fetchResultsStart() called illegally! It must be called after advance() or simulate()", a6, a7, a8, v13);
    return 0;
  }
  return result;
}

uint64_t physx::NpContactCallbackTask::run(physx::NpContactCallbackTask *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 272))(*((_QWORD *)this + 5));
  if (result)
  {
    v3 = result;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 784))(*((_QWORD *)this + 5), 0, 0);
    if (*((_DWORD *)this + 14))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(v3, *((_QWORD *)this + 6) + v4, *(_QWORD *)(*((_QWORD *)this + 6) + v4 + 32), *(unsigned int *)(*((_QWORD *)this + 6) + v4 + 40));
        ++v5;
        v4 += 48;
      }
      while (v5 < *((unsigned int *)this + 14));
    }
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 792))(*((_QWORD *)this + 5));
  }
  return result;
}

char *physx::NpScene::processCallbacks(physx::NpScene *this, physx::PxBaseTask *a2)
{
  char *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  pthread_mutex_t **v8;
  unsigned int v9;
  uint64_t v10;
  void (***v11)(physx::NpContactCallbackTask *__hidden);
  int v12;
  void (**v13)(physx::NpContactCallbackTask *__hidden);

  result = physx::Sc::Scene::getQueuedContactPairHeaders((physx::NpScene *)((char *)this + 32));
  v5 = *((_DWORD *)result + 2);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)result;
    v8 = *(pthread_mutex_t ***)(*((_QWORD *)this + 234) + 1920);
    v9 = *((_DWORD *)result + 2);
    do
    {
      v10 = physx::Cm::FlushPool::allocate(v8, 64, 0x10u);
      v11 = (void (***)(physx::NpContactCallbackTask *__hidden))v10;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_QWORD *)(v10 + 56) = 0;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_DWORD *)(v10 + 32) = 0;
      *(_QWORD *)v10 = &off_24ED95D78;
      if (v9 >= 0x100)
        v12 = 256;
      else
        v12 = v9;
      *(_QWORD *)(v10 + 40) = this;
      *(_QWORD *)(v10 + 48) = v7 + 48 * v6;
      *(_DWORD *)(v10 + 56) = v12;
      *(_DWORD *)(v10 + 32) = 1;
      *(_QWORD *)(v10 + 24) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
        v11[2] = (void (**)(physx::NpContactCallbackTask *__hidden))v11[3][2];
        v13 = *v11;
      }
      else
      {
        v13 = &off_24ED95D78;
      }
      result = (char *)((uint64_t (*)(_QWORD *))v13[5])(v11);
      v6 += 256;
      v9 -= 256;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t physx::NpScene::fetchResultsFinish(physx::NpScene *this, unsigned int *a2)
{
  uint64_t result;

  *((_BYTE *)this + 9730) = 0;
  result = physx::NpScene::fetchResultsPostContactCallbacks(this);
  if (a2)
    *a2 = 0;
  return result;
}

void *physx::NpScene::flushSimulation(physx::NpScene *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  physx::Sc::Scene *v12;
  char *v13;
  uint64_t v14;

  if (*((_DWORD *)this + 1877))
    return (void *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2308, "PxScene::flushSimulation(): This call is not allowed while the simulation is running. Call will be ignored", a6, a7, a8, a9);
  v12 = (physx::NpScene *)((char *)this + 32);
  v13 = (char *)this + 7808;
  LOWORD(v14) = 0;
  physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::resize((uint64_t)this + 7808, 0, &v14);
  physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate((uint64_t)v13, *((_DWORD *)this + 1954));
  v14 = 0;
  physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize((uint64_t)this + 7824, 0, &v14);
  physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::recreate((uint64_t)this + 7824, *((_DWORD *)this + 1958));
  v14 = 0;
  physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize((uint64_t)this + 7840, 0, &v14);
  physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::recreate((uint64_t)this + 7840, *((_DWORD *)this + 1962));
  physx::Sc::Scene::flush(v12, a2);
  return physx::Sq::SceneQueryManager::flushMemory((physx::NpScene *)((char *)this + 8640));
}

uint64_t physx::NpScene::flushQueryUpdates(physx::NpScene *this)
{
  return physx::Sq::SceneQueryManager::flushUpdates((uint64_t)this + 8640);
}

uint64_t physx::NpScene::setDominanceGroupPair(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  char v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  if (!*(_BYTE *)(result + 7705))
    return physx::Sc::Scene::setDominanceGroupPair(result + 32, a2, a3, a4);
  if (a2 <= a3)
    v4 = a3;
  else
    v4 = a2;
  if (a2 >= a3)
    v5 = a3;
  else
    v5 = a2;
  *(_DWORD *)(result + 4 * v5 + 8340) |= 1 << v4;
  v6 = 1 << a3;
  v7 = result + 4 * a2;
  if (*a4)
    v8 = *(_DWORD *)(v7 + 8464) | v6;
  else
    v8 = *(_DWORD *)(v7 + 8464) & ~v6;
  *(_DWORD *)(v7 + 8464) = v8;
  v9 = 1 << a2;
  v10 = result + 4 * a3;
  if (a4[1])
    v11 = *(_DWORD *)(v10 + 8464) | v9;
  else
    v11 = *(_DWORD *)(v10 + 8464) & ~v9;
  *(_DWORD *)(v10 + 8464) = v11;
  *(_DWORD *)(result + 8624) |= 8u;
  return result;
}

uint64_t physx::NpScene::getDominanceGroupPair(physx::NpScene *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  char v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if ((*((_BYTE *)this + 8624) & 8) != 0
    && (a2 >= a3 ? (v3 = a3) : (v3 = a2),
        a2 <= a3 ? (v4 = a3) : (v4 = a2),
        ((*((_DWORD *)this + v3 + 2085) >> v4) & 1) != 0))
  {
    v5 = (char *)this + 8464;
    v6 = (*((_DWORD *)this + a2 + 2116) & (1 << a3)) >> a3;
    v7 = (*(_DWORD *)&v5[4 * a3] & (1 << a2)) >> a2;
  }
  else
  {
    v8 = *((_DWORD *)this + a3 + 1140) >> a2;
    v6 = (*((_DWORD *)this + a2 + 1140) >> a3) & 1;
    v7 = v8 & 1;
  }
  return v6 | (v7 << 8);
}

uint64_t physx::NpScene::setSceneQueryUpdateMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8992) = a2;
  return result;
}

uint64_t physx::NpScene::getSceneQueryUpdateMode(physx::NpScene *this)
{
  return *((unsigned int *)this + 2248);
}

uint64_t physx::NpScene::setDynamicTreeRebuildRateHint(physx::NpScene *this, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  char v6;
  uint64_t result;

  v3 = 0;
  v4 = (char *)this + 8640;
  *((_DWORD *)this + 2200) = a2;
  v5 = 1;
  do
  {
    v6 = v5;
    result = *(_QWORD *)&v4[48 * v3];
    if (result)
    {
      if (*(_DWORD *)&v4[48 * v3 + 40] == 1)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 136))(result, a2);
    }
    v5 = 0;
    v3 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint64_t physx::NpScene::getDynamicTreeRebuildRateHint(physx::NpScene *this)
{
  return *((unsigned int *)this + 2200);
}

uint64_t physx::NpScene::forceDynamicTreeRebuild(physx::NpScene *this, char a2, char a3)
{
  return physx::Sq::SceneQueryManager::forceDynamicTreeRebuild((uint64_t)this + 8640, a2, a3);
}

uint64_t physx::NpScene::setSolverBatchSize(uint64_t this, int a2)
{
  if (*(_BYTE *)(this + 7705))
  {
    *(_DWORD *)(this + 8612) = a2;
    *(_DWORD *)(this + 8624) |= 0x10u;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(this + 1920) + 140) = a2;
  }
  return this;
}

uint64_t physx::NpScene::getSolverBatchSize(physx::NpScene *this)
{
  unsigned int *v1;

  if ((*((_BYTE *)this + 8624) & 0x10) != 0)
    v1 = (unsigned int *)((char *)this + 8612);
  else
    v1 = (unsigned int *)(*((_QWORD *)this + 240) + 140);
  return *v1;
}

uint64_t physx::NpScene::setSolverArticulationBatchSize(uint64_t this, int a2)
{
  if (*(_BYTE *)(this + 7705))
  {
    *(_DWORD *)(this + 8616) = a2;
    *(_DWORD *)(this + 8624) |= 0x80u;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(this + 1920) + 144) = a2;
  }
  return this;
}

uint64_t physx::NpScene::getSolverArticulationBatchSize(physx::NpScene *this)
{
  unsigned int *v1;

  if ((*((_BYTE *)this + 8624) & 0x80) != 0)
    v1 = (unsigned int *)((char *)this + 8612);
  else
    v1 = (unsigned int *)(*((_QWORD *)this + 240) + 144);
  return *v1;
}

uint64_t physx::NpScene::setVisualizationParameter(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char vars0;

  if ((int)a2 >= 24)
  {
    v9 = physx::shdfnd::Foundation::mInstance;
    v10 = "setVisualizationParameter: parameter out of range.";
    v11 = 2477;
LABEL_5:
    physx::shdfnd::Foundation::error(v9, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v11, v10, a7, a8, a9, vars0);
    return 0;
  }
  if (a3 < 0.0)
  {
    v9 = physx::shdfnd::Foundation::mInstance;
    v10 = "setVisualizationParameter: value must be larger or equal to 0.";
    v11 = 2482;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 7705))
  {
    v12 = 1;
    *(_BYTE *)(a1 + 8196 + a2 + 96) = 1;
    *(float *)(a1 + 8196 + 4 * a2) = a3;
    *(_DWORD *)(a1 + 8624) |= 0x20u;
  }
  else
  {
    v12 = 1;
    *(_BYTE *)(a1 + 4692) = 1;
    *(float *)(*(_QWORD *)(a1 + 1872) + 4 * a2 + 1792) = a3;
    if (!a2)
      *(float *)(a1 + 4688) = a3;
  }
  return v12;
}

float physx::NpScene::getVisualizationParameter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if ((int)a2 > 23)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2497, "getVisualizationParameter: param is not an enum.", a6, a7, a8, vars0);
    return 0.0;
  }
  else if ((*(_BYTE *)(a1 + 8624) & 0x20) != 0 && *(_BYTE *)(a1 + a2 + 8292))
  {
    return *(float *)(a1 + 4 * a2 + 8196);
  }
  else
  {
    return *(float *)(*(_QWORD *)(a1 + 1872) + 4 * a2 + 1792);
  }
}

double physx::NpScene::setVisualizationCullingBox(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 7705))
  {
    *(_QWORD *)(a1 + 8316) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8324) = *(_QWORD *)(a2 + 8);
    result = *(double *)(a2 + 16);
    *(double *)(a1 + 8332) = result;
    *(_DWORD *)(a1 + 8624) |= 0x40u;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 1872);
    *(_QWORD *)(v3 + 1888) = *(_QWORD *)a2;
    *(_QWORD *)(v3 + 1896) = *(_QWORD *)(a2 + 8);
    result = *(double *)(a2 + 16);
    *(double *)(v3 + 1904) = result;
  }
  return result;
}

double physx::NpScene::getVisualizationCullingBox@<D0>(physx::NpScene *this@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double result;

  if ((*((_BYTE *)this + 8624) & 0x40) != 0)
    v2 = (double *)((char *)this + 8316);
  else
    v2 = (double *)(*((_QWORD *)this + 234) + 1888);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  result = v2[2];
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t physx::NpScene::setNbContactDataBlocks(physx::NpScene *this, unsigned int a2)
{
  return physx::PxcNpMemBlockPool::setBlockCount(*((_QWORD *)this + 234) + 40, a2);
}

uint64_t physx::NpScene::getNbContactDataBlocksUsed(physx::NpScene *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 234) + 244);
}

uint64_t physx::NpScene::getMaxNbContactDataBlocksUsed(physx::NpScene *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 234) + 248);
}

uint64_t physx::NpScene::getTimestamp(physx::NpScene *this)
{
  return *((unsigned int *)this + 506);
}

uint64_t physx::NpScene::getSceneQueryStaticTimestamp(physx::NpScene *this)
{
  return *((unsigned int *)this + 2171);
}

uint64_t physx::NpScene::getCpuDispatcher(physx::NpScene *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(physx::NpScene *))(*(_QWORD *)this + 776))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t physx::NpScene::getCudaContextManager(physx::NpScene *this)
{
  return *((_QWORD *)this + 1171);
}

{
  return *((_QWORD *)this + 1171);
}

uint64_t physx::NpScene::getStaticStructure(physx::NpScene *this)
{
  return *((unsigned int *)this + 2170);
}

uint64_t physx::NpScene::getDynamicStructure(physx::NpScene *this)
{
  return *((unsigned int *)this + 2182);
}

float physx::NpScene::getFrictionOffsetThreshold(physx::NpScene *this)
{
  return *(float *)(*((_QWORD *)this + 240) + 124);
}

uint64_t physx::NpScene::getContactReportStreamBufferSize(physx::NpScene *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 503) + 80);
}

pthread_mutex_t ***physx::NpScene::lockRead(physx::NpScene *this, const char *a2)
{
  unsigned int v3;
  pthread_mutex_t ***result;
  pthread_mutex_t ***v5;
  pthread_t v6;
  _BOOL4 v7;

  v3 = pthread_getspecific(*((unsigned int *)this + 2427));
  result = (pthread_mutex_t ***)pthread_setspecific(*((unsigned int *)this + 2427), (const void *)((v3 + 0x10000) & 0xFF0000 | (unint64_t)(v3 & 0xFF00FFFF)));
  if ((*(_QWORD *)&v3 & 0xFF0000) == 0)
  {
    v5 = (pthread_mutex_t ***)((char *)this + 9720);
    v6 = (pthread_t)*((_QWORD *)this + 1214);
    v7 = v6 != pthread_self();
    return physx::shdfnd::ReadWriteLock::lockReader(v5, v7);
  }
  return result;
}

uint64_t physx::NpScene::unlockRead(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  v10 = pthread_getspecific(*((unsigned int *)this + 2427));
  if (!BYTE2(v10))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2749, "PxScene::unlockRead() called without matching call to PxScene::lockRead(), behaviour will be undefined.", v11, v12, v13, a9);
  v14 = (BYTE2(v10) - 1);
  result = pthread_setspecific(*((unsigned int *)this + 2427), (const void *)(v10 & 0xFF00FFFF | ((unint64_t)(BYTE2(v10) - 1) << 16)));
  if (!v14)
  {
    v16 = *((_QWORD *)this + 1215);
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
    }
  }
  return result;
}

pthread_t physx::NpScene::lockWrite(physx::NpScene *this, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  pthread_t result;
  const char *v19;
  uint64_t v20;

  v12 = pthread_getspecific(*((unsigned int *)this + 2427));
  v16 = v12 & 0xFF000000;
  if ((*(_QWORD *)&v12 & 0xFF0000) != 0 && v16 == 0)
  {
    if (a2)
      v19 = a2;
    else
      v19 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp";
    if (a2)
      v20 = a3;
    else
      v20 = 2766;
    return (pthread_t)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)v19, v20, "PxScene::lockWrite() detected after a PxScene::lockRead(), lock upgrading is not supported, behaviour will be undefined.", v13, v14, v15, a9);
  }
  else
  {
    pthread_setspecific(*((unsigned int *)this + 2427), (const void *)((v12 + 0x1000000) & 0xFF000000 | *(_QWORD *)&v12 & 0xFFFFFFLL));
    if (!v16)
      physx::shdfnd::ReadWriteLock::lockWriter((uint64_t *)this + 1215);
    result = pthread_self();
    *((_QWORD *)this + 1214) = result;
  }
  return result;
}

uint64_t physx::NpScene::unlockWrite(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  pthread_mutex_t **v16;

  v10 = pthread_getspecific(*((unsigned int *)this + 2427));
  if ((v10 & 0xFF000000) == 0)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2788, "PxScene::unlockWrite() called without matching call to PxScene::lockWrite(), behaviour will be undefined.", v11, v12, v13, a9);
  v14 = (HIBYTE(v10) - 1);
  result = pthread_setspecific(*((unsigned int *)this + 2427), (const void *)(*(_QWORD *)&v10 & 0xFFFFFFLL | ((unint64_t)(HIBYTE(v10) - 1) << 24)));
  if (!v14)
  {
    *((_QWORD *)this + 1214) = 0;
    v16 = (pthread_mutex_t **)*((_QWORD *)this + 1215);
    if (v16)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*v16);
    }
  }
  return result;
}

float physx::NpScene::getWakeCounterResetValue(physx::NpScene *this)
{
  return *((float *)this + 2048);
}

float physx::NpScene::shiftOrigin(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  float result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v28;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t i;
  float32x2_t *v45;
  int v46;
  float32x2_t **v47;
  float32x2_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  float32x2_t *v54;
  __n128 v55;
  float v56;
  uint64_t v58;
  unint64_t v59;
  float32x2_t v60;
  float v61;

  if (*(_BYTE *)(a1 + 7705))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2838, "PxScene::shiftOrigin() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  else
  {
    v11 = a1;
    v12 = *(_DWORD *)(a1 + 9152);
    v13 = *(_QWORD *)(a1 + 9144);
    if (v12 >= 4)
    {
      v58 = *(_QWORD *)(a1 + 9144);
      v15 = 0;
      v16 = 0;
      v59 = *(unsigned int *)(a1 + 9152);
      v17 = v12 >> 2;
      v18 = (v12 >> 2) - 1;
      v19 = (uint64_t *)(v13 + 32);
      v20 = 4;
      do
      {
        v14 = v15 + 4;
        if (v16 >= v18)
        {
          if (v14 < v59)
          {
            v38 = v19;
            v39 = v59;
            do
            {
              v41 = *v38++;
              _X10 = v41;
              __asm
              {
                PRFM            #0, [X10]
                PRFM            #0, [X10,#0x80]
              }
              --v39;
            }
            while (v20 != v39);
          }
        }
        else
        {
          _X9 = *(_QWORD *)(v58 + 8 * v14);
          __asm
          {
            PRFM            #0, [X9]
            PRFM            #0, [X9,#0x80]
          }
          v28 = (_QWORD *)(v58 + 8 * v15);
          _X9 = v28[5];
          __asm
          {
            PRFM            #0, [X9]
            PRFM            #0, [X9,#0x80]
          }
          _X9 = v28[6];
          _X8 = v28[7];
          __asm
          {
            PRFM            #0, [X9]
            PRFM            #0, [X9,#0x80]
            PRFM            #0, [X8]
            PRFM            #0, [X8,#0x80]
          }
        }
        for (i = 0; i != 32; i += 8)
        {
          v45 = *(float32x2_t **)(v13 + i);
          if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)v45 + 48))(v45))
          {
            v45[42] = vsub_f32(v45[42], *a2);
            v45[43].f32[0] = v45[43].f32[0] - a2[1].f32[0];
            physx::Sc::BodyCore::onOriginShift(v45 + 16, a2);
          }
          else
          {
            v45[20] = vsub_f32(v45[20], *a2);
            v45[21].f32[0] = v45[21].f32[0] - a2[1].f32[0];
          }
        }
        ++v16;
        v20 += 4;
        v19 += 4;
        v13 += 32;
        v15 = v14;
      }
      while (v16 != v17);
      v11 = a1;
      v13 = v58;
      v12 = v59;
    }
    else
    {
      LODWORD(v14) = 0;
    }
    if (v14 < v12)
    {
      v46 = v12 - v14;
      v47 = (float32x2_t **)(v13 + 8 * v14);
      do
      {
        v48 = *v47;
        if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)*v47 + 48))(*v47))
        {
          v48[42] = vsub_f32(v48[42], *a2);
          v48[43].f32[0] = v48[43].f32[0] - a2[1].f32[0];
          physx::Sc::BodyCore::onOriginShift(v48 + 16, a2);
        }
        else
        {
          v48[20] = vsub_f32(v48[20], *a2);
          v48[21].f32[0] = v48[21].f32[0] - a2[1].f32[0];
        }
        ++v47;
        --v46;
      }
      while (v46);
    }
    if (*(_DWORD *)(v11 + 9212))
    {
      v49 = 0;
      v50 = *(_QWORD *)(v11 + 9168);
      do
      {
        v51 = *(_QWORD *)(v50 + 8 * v49);
        v52 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 200))(v51) + 120);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 152))(v51))
        {
          v53 = 0;
          do
          {
            v54 = *(float32x2_t **)(v52 + 8 * v53);
            if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)v54 + 48))(v54))
            {
              v54[42] = vsub_f32(v54[42], *a2);
              v54[43].f32[0] = v54[43].f32[0] - a2[1].f32[0];
              v55.n128_f32[0] = physx::Sc::BodyCore::onOriginShift(v54 + 16, a2);
            }
            else
            {
              v55.n128_u64[0] = (unint64_t)vsub_f32(v54[20], *a2);
              v54[20] = (float32x2_t)v55.n128_u64[0];
              v55.n128_f32[0] = v54[21].f32[0] - a2[1].f32[0];
              v54[21].i32[0] = v55.n128_u32[0];
            }
            ++v53;
          }
          while (v53 < (*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v51 + 152))(v51, v55));
        }
        ++v49;
      }
      while (v49 < *(unsigned int *)(v11 + 9212));
    }
    physx::Sc::Scene::shiftOrigin(v11 + 32, a2);
    (*(void (**)(_QWORD, float32x2_t *))(**(_QWORD **)(v11 + 8640) + 96))(*(_QWORD *)(v11 + 8640), a2);
    (*(void (**)(_QWORD, float32x2_t *))(**(_QWORD **)(v11 + 8688) + 96))(*(_QWORD *)(v11 + 8688), a2);
    (*(void (**)(_QWORD, float32x2_t *))(**(_QWORD **)(v11 + 8736) + 88))(*(_QWORD *)(v11 + 8736), a2);
    v56 = -a2[1].f32[0];
    v60 = vneg_f32(*a2);
    v61 = v56;
    return physx::Cm::RenderBuffer::shift(v11 + 9000, &v60);
  }
  return result;
}

float physx::Cm::RenderBuffer::shift(uint64_t a1, float32x2_t *a2)
{
  uint64_t v2;
  float *v3;
  float result;
  uint64_t v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t *v8;
  uint64_t v9;
  float *v10;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v3 = (float *)(*(_QWORD *)(a1 + 8) + 8);
    do
    {
      *((float32x2_t *)v3 - 1) = vadd_f32(*a2, *(float32x2_t *)(v3 - 2));
      result = a2[1].f32[0] + *v3;
      *v3 = result;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  v5 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v5)
  {
    v6 = (float32x2_t *)(*(_QWORD *)(a1 + 24) + 16);
    do
    {
      v6[-2] = vadd_f32(*a2, v6[-2]);
      v6[-1].f32[0] = a2[1].f32[0] + v6[-1].f32[0];
      *v6 = vadd_f32(*a2, *v6);
      result = a2[1].f32[0] + v6[1].f32[0];
      v6[1].f32[0] = result;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  v7 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v7)
  {
    v8 = (float32x2_t *)(*(_QWORD *)(a1 + 40) + 24);
    do
    {
      v8[-3] = vadd_f32(*a2, v8[-3]);
      v8[-2].f32[0] = a2[1].f32[0] + v8[-2].f32[0];
      v8[-1] = vadd_f32(*a2, v8[-1]);
      v8->f32[0] = a2[1].f32[0] + v8->f32[0];
      v8[1] = vadd_f32(*a2, v8[1]);
      result = a2[1].f32[0] + v8[2].f32[0];
      v8[2].f32[0] = result;
      v8 += 6;
      --v7;
    }
    while (v7);
  }
  v9 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v9)
  {
    v10 = (float *)(*(_QWORD *)(a1 + 56) + 8);
    do
    {
      *((float32x2_t *)v10 - 1) = vadd_f32(*a2, *(float32x2_t *)(v10 - 2));
      result = a2[1].f32[0] + *v10;
      *v10 = result;
      v10 += 8;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpScene::getScenePvdClient(physx::NpScene *this)
{
  return 0;
}

uint64_t physx::NpScene::getSimulationController(physx::NpScene *this)
{
  return *((_QWORD *)this + 242);
}

void *physx::NpScene::setActiveActors(physx::NpScene *this, physx::PxActor **a2, unsigned int a3)
{
  uint64_t v7;

  *((_DWORD *)this + 1054) = 0;
  v7 = 0;
  physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::resize((uint64_t)this + 4208, a3, &v7);
  return memcpy(*((void **)this + 526), a2, 8 * a3);
}

physx::Sq::SceneQueryManager *physx::NpScene::forceSceneQueryRebuild(physx::NpScene *this)
{
  physx::Sq::SceneQueryManager *v2;
  uint64_t (**v4)(SqRefFinder *__hidden, const physx::PxRigidBody *, const physx::PxShape *);

  v4 = &off_24ED968F0;
  v2 = (physx::NpScene *)((char *)this + 8640);
  physx::Sc::SqBoundsManager::syncBounds(*((_QWORD *)this + 265), (uint64_t (***)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))this + 1103, (uint64_t (***)(_QWORD, _QWORD, uint64_t))&v4, *(_QWORD *)(*((_QWORD *)this + 262) + 8), *((_QWORD *)this + 7), (uint64_t)this + 4544);
  return physx::Sq::SceneQueryManager::afterSync(v2, *((_DWORD *)this + 2248));
}

uint64_t physx::NpScene::sceneQueriesUpdate(physx::NpScene *this, physx::PxBaseTask *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v9;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;

  v9 = (char *)this + 9728;
  if (*((_BYTE *)this + 9728))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2961, "PxScene::fetchSceneQueries was not called!", a6, a7, a8, a9);
  physx::Sq::SceneQueryManager::flushUpdates((uint64_t)this + 8640);
  v14 = *((_QWORD *)this + 1080);
  if (v14 && *((_DWORD *)this + 2170) == 1)
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14);
  else
    v15 = 0;
  v16 = *((_QWORD *)this + 1086);
  if (v16 && *((_DWORD *)this + 2182) == 1)
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 152))(v16);
  else
    v17 = 0;
  *v9 = 1;
  if (a3)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1170) + 16))(*((_QWORD *)this + 1170));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1170) + 24))(*((_QWORD *)this + 1170));
  }
  v18 = *((_QWORD *)this + 1170);
  *((_DWORD *)this + 2376) = 1;
  *((_QWORD *)this + 1187) = a2;
  *((_QWORD *)this + 1186) = v18;
  if (a2)
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
  v19 = (char *)this + 9472;
  if (v15)
  {
    *((_DWORD *)this + 2228) = 1;
    *((_QWORD *)this + 1113) = v19;
    (*(void (**)(char *))(*((_QWORD *)this + 1184) + 32))((char *)this + 9472);
    *((_QWORD *)this + 1112) = *(_QWORD *)(*((_QWORD *)this + 1113) + 16);
  }
  if (v17)
  {
    *((_DWORD *)this + 2242) = 1;
    *((_QWORD *)this + 1120) = v19;
    (*(void (**)(char *))(*((_QWORD *)this + 1184) + 32))((char *)this + 9472);
    *((_QWORD *)this + 1119) = *(_QWORD *)(*((_QWORD *)this + 1120) + 16);
  }
  result = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1186) + 144))(*((_QWORD *)this + 1186), (char *)this + 9472);
  if (v15)
    result = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1112) + 144))(*((_QWORD *)this + 1112), (char *)this + 8880);
  if (v17)
    return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1119) + 144))(*((_QWORD *)this + 1119), (char *)this + 8936);
  return result;
}

BOOL physx::NpScene::checkQueries(physx::shdfnd::SyncImpl **this, int a2)
{
  return physx::shdfnd::SyncImpl::wait(this[1166], a2 << 31 >> 31);
}

BOOL physx::NpScene::fetchQueries(physx::shdfnd::SyncImpl **this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  _BOOL8 result;
  pthread_mutex_t *v11;
  char v12;

  v8 = this + 1216;
  if (*((_BYTE *)this + 9728))
  {
    result = physx::shdfnd::SyncImpl::wait(this[1166], a2 << 31 >> 31);
    if (result)
    {
      physx::Sq::SceneQueryManager::flushUpdates((uint64_t)(this + 1080));
      v11 = (pthread_mutex_t *)this[1166];
      pthread_mutex_lock(v11);
      v11[1].__opaque[44] = 0;
      pthread_mutex_unlock(v11);
      *v8 = 0;
      return 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 3019, "PxScene::fetchQueries: fetchQueries() called illegally! It must be called after sceneQueriesUpdate()", a6, a7, a8, v12);
    return 0;
  }
  return result;
}

uint64_t physx::NpScene::createBatchQuery(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v14;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery>::getName() [T = physx::NpBatchQuery]";
  else
    v5 = "<allocation names disabled>";
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 176, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 3060);
  *(_QWORD *)v6 = off_24ED94778;
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(v6 + 8));
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 60) = 0;
  v7 = *a2;
  v8 = a2[2];
  *(_OWORD *)(v6 + 80) = a2[1];
  *(_OWORD *)(v6 + 96) = v8;
  *(_OWORD *)(v6 + 64) = v7;
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  *(_QWORD *)(v6 + 160) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(v6 + 128) = v10;
  *(_OWORD *)(v6 + 144) = v11;
  *(_OWORD *)(v6 + 112) = v9;
  *(_DWORD *)(v6 + 168) = -16;
  *(_BYTE *)(v6 + 172) = 0;
  v14 = v6;
  v12 = *(unsigned int *)(a1 + 9280);
  if ((*(_DWORD *)(a1 + 9284) & 0x7FFFFFFFu) <= v12)
  {
    physx::shdfnd::Array<physx::NpBatchQuery *,physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery *>>::growAndPushBack(a1 + 9272, &v14);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 9272) + 8 * v12) = v6;
    *(_DWORD *)(a1 + 9280) = v12 + 1;
  }
  return v6;
}

uint64_t physx::NpScene::releaseBatchQuery(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(unsigned int *)(result + 9280);
  if ((_DWORD)v2)
  {
    v3 = 0;
    while (*(_QWORD *)(*(_QWORD *)(result + 9272) + 8 * v3) != a2)
    {
      if (v2 == ++v3)
        goto LABEL_9;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v2)
  {
    v4 = *(_QWORD *)(result + 9272);
    v5 = v2 - 1;
    *(_DWORD *)(result + 9280) = v5;
    *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
  }
LABEL_9:
  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  return result;
}

BOOL physx::NpSceneQueries::raycast(uint64_t a1, uint64_t _X1, uint64_t _X2, uint64_t a4, __int16 *a5, uint64_t a6, uint64_t a7, _QWORD *a8, float a9)
{
  __int16 v16;
  _QWORD v17[2];
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  __asm
  {
    PRFM            #0, [X1]
    PRFM            #0, [X2]
  }
  v17[0] = _X1;
  v17[1] = _X2;
  v18 = a9;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v16 = *a5;
  return physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(a1, v17, a4, &v16, a8, a6, a7, 0);
}

BOOL physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  __int16 v28;
  __int16 v29;
  unint64_t v30;
  uint64_t *v31;
  float32x4_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _BOOL8 v41;
  int v42;
  int v44;
  __int16 v45;
  float v46;
  _QWORD v47[4];
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  BOOL v55;
  BOOL v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;

  v12 = *(_WORD *)(a6 + 16) & 0x10;
  if (!a5)
  {
    v21 = a4;
    v22 = a7;
    v23 = a8;
    v44 = -1;
    v24 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  v13 = a5[1];
  v14 = *(unsigned __int16 *)(v13 + 8);
  v15 = (uint64_t *)(v13 + 40);
  if (v14 == 5)
    v16 = v15;
  else
    v16 = 0;
  if (v14 == 6)
    v16 = v15;
  if (v14 != 13)
    v15 = v16;
  v17 = *((unsigned __int16 *)v15 + 4);
  v18 = v15;
  if ((_DWORD)v17 == 1)
    goto LABEL_12;
  if (*((_WORD *)v15 + 4))
  {
    v18 = (uint64_t *)*v15;
LABEL_12:
    v19 = 0;
    v20 = 0xFFFFFFFFLL;
    while (v18[v19] != *a5)
    {
      if (v17 == ++v19)
        goto LABEL_19;
    }
    v20 = v19;
    goto LABEL_19;
  }
  v20 = 0xFFFFFFFFLL;
LABEL_19:
  v25 = v15 + 2;
  v44 = *((_DWORD *)v15 + 8);
  v21 = a4;
  v22 = a7;
  v23 = a8;
  if (*((_WORD *)v15 + 12) != 1)
    v25 = (_QWORD *)*v25;
  v24 = v25[v20];
LABEL_22:
  v26 = (_QWORD *)(a1 + 8640);
  physx::Sq::SceneQueryManager::flushUpdates(a1 + 8640);
  *(_BYTE *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 92) = 0;
  v27 = *((_DWORD *)a2 + 4);
  v28 = *v21;
  v47[0] = off_24ED96C20;
  v47[1] = a1;
  v47[2] = a2;
  v47[3] = a3;
  v48 = v28;
  v49 = a6;
  v50 = v22;
  v51 = v27;
  v52 = v23;
  v53 = ((v28 & 0x40 | v12) != 0) << 6;
  v54 = 1;
  v29 = *(_WORD *)(a6 + 16);
  v55 = (v29 & 0x20) != 0;
  v56 = v55;
  v57 = v12 >> 4;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if (v24 != 0xFFFFFFFF && !*(_DWORD *)(a3 + 88))
  {
    v30 = v24 >> 1;
    if (v44 == -1)
    {
      v33 = v26[6 * (v24 & 1)];
      v31 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 72))(v33, v30);
    }
    else
    {
      v31 = (uint64_t *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8736) + 72))(*(_QWORD *)(a1 + 8736), v30);
    }
    v58 = 1;
    v34 = MultiQueryCallback<physx::PxRaycastHit>::invoke((uint64_t)v47, &v46, v31, v32);
    v58 = 0;
    if (!v34)
    {
LABEL_37:
      v40 = *(unsigned int *)(a3 + 92);
      v41 = (*(unsigned __int8 *)(a3 + 72) | v40) != 0;
      if (!*(_BYTE *)(a3 + 72))
      {
LABEL_35:
        if (!(_DWORD)v40)
          goto LABEL_43;
LABEL_40:
        if ((**(unsigned int (***)(uint64_t, _QWORD))a3)(a3, *(_QWORD *)(a3 + 80)))
          *(_DWORD *)(a3 + 92) = 0;
        goto LABEL_43;
      }
LABEL_38:
      if (!(_DWORD)v40)
        goto LABEL_43;
      v42 = physx::clipHitsToNewMaxDist<physx::PxRaycastHit>(*(_QWORD *)(a3 + 80), v40, *(float *)(a3 + 56));
      *(_DWORD *)(a3 + 92) = v42;
      if (!v42)
        goto LABEL_43;
      goto LABEL_40;
    }
    v29 = *(_WORD *)(a6 + 16);
  }
  v35 = *(_QWORD *)(a1 + 8688);
  v36 = *(_QWORD *)(a1 + 8736);
  if ((v29 & 1) != 0
    && ((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, int *, _QWORD *))(*(_QWORD *)*v26 + 48))(*v26, *a2, a2[1], &v51, v47) & 1) == 0)
  {
    goto LABEL_37;
  }
  if ((v29 & 2) != 0
    && ((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, int *, _QWORD *))(*(_QWORD *)v35 + 48))(v35, *a2, a2[1], &v51, v47) & 1) == 0)
  {
    v41 = (*(unsigned __int8 *)(a3 + 72) | *(_DWORD *)(a3 + 92)) != 0;
    goto LABEL_43;
  }
  v37 = *a2;
  v38 = a2[1];
  v45 = *(_WORD *)(a6 + 16);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD *, __int16 *))(*(_QWORD *)v36 + 48))(v36, v37, v38, &v51, v47, &v45);
  v40 = *(unsigned int *)(a3 + 92);
  v41 = (*(unsigned __int8 *)(a3 + 72) | v40) != 0;
  if ((v39 & 1) != 0)
  {
    if (!*(_BYTE *)(a3 + 72))
      goto LABEL_35;
    goto LABEL_38;
  }
LABEL_43:
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  return v41;
}

BOOL physx::NpSceneQueries::overlap(uint64_t a1, uint64_t _X1, uint64_t _X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v13;
  _QWORD v14[5];
  int v15;

  __asm
  {
    PRFM            #0, [X1]
    PRFM            #0, [X2]
  }
  v14[3] = _X1;
  v14[4] = _X2;
  v15 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v13 = 0;
  return physx::NpSceneQueries::multiQuery<physx::PxOverlapHit>(a1, (uint64_t)v14, a4, &v13, 0, a5, a6, 0);
}

BOOL physx::NpSceneQueries::multiQuery<physx::PxOverlapHit>(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  float32x4_t v26;
  float32x4_t v27;
  double v28;
  float32x4_t v29;
  double v30;
  float32x4_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  float32x4_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  _BOOL8 v46;
  int v47;
  __int16 v50;
  _QWORD v51[4];
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  BOOL v59;
  BOOL v60;
  char v61;
  char v62;
  char v63;
  _BYTE *v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v10 = *(_WORD *)(a6 + 16) & 0x10;
  if (!a5)
  {
    v19 = a6;
    v20 = a4;
    v21 = a7;
    v22 = a8;
    v23 = 0xFFFFFFFFLL;
    v24 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  v11 = a5[1];
  v12 = *(unsigned __int16 *)(v11 + 8);
  v13 = (uint64_t *)(v11 + 40);
  if (v12 == 5)
    v14 = v13;
  else
    v14 = 0;
  if (v12 == 6)
    v14 = v13;
  if (v12 != 13)
    v13 = v14;
  v15 = *((unsigned __int16 *)v13 + 4);
  v16 = v13;
  if ((_DWORD)v15 == 1)
    goto LABEL_12;
  if (*((_WORD *)v13 + 4))
  {
    v16 = (uint64_t *)*v13;
LABEL_12:
    v17 = 0;
    v18 = 0xFFFFFFFFLL;
    while (v16[v17] != *a5)
    {
      if (v15 == ++v17)
      {
        v19 = a6;
        v20 = a4;
        v21 = a7;
        v22 = a8;
        goto LABEL_19;
      }
    }
    v19 = a6;
    v20 = a4;
    v21 = a7;
    v22 = a8;
    v18 = v17;
    goto LABEL_19;
  }
  v19 = a6;
  v20 = a4;
  v21 = a7;
  v22 = a8;
  v18 = 0xFFFFFFFFLL;
LABEL_19:
  v23 = *((unsigned int *)v13 + 8);
  v25 = v13 + 2;
  if (*((_WORD *)v13 + 12) != 1)
    v25 = (_QWORD *)*v25;
  v24 = v25[v18];
LABEL_22:
  physx::Sq::SceneQueryManager::flushUpdates(a1 + 8640);
  *(_BYTE *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 52) = 0;
  v32 = *v20;
  v51[0] = off_24ED96C90;
  v51[1] = a1;
  v33 = a2;
  v51[2] = a2;
  v51[3] = a3;
  v52 = v32;
  v53 = v19;
  v54 = v21;
  v55 = 2139095039;
  v56 = v22;
  v57 = ((v32 & 0x40 | v10) != 0) << 6;
  v58 = 1;
  v34 = *(_WORD *)(v19 + 16);
  v59 = (v34 & 0x20) != 0;
  v60 = v59;
  v61 = v10 >> 4;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  if (v24 != 0xFFFFFFFF && !*(_DWORD *)(a3 + 48))
  {
    v35 = v24 >> 1;
    if ((_DWORD)v23 == -1)
    {
      v39 = *(_QWORD *)(a1 + 8640 + 48 * (v24 & 1));
      v36 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 72))(v39, v35);
    }
    else
    {
      v36 = (uint64_t *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8736) + 72))(*(_QWORD *)(a1 + 8736), v35, v23);
    }
    v62 = 1;
    v26 = MultiQueryCallback<physx::PxOverlapHit>::invoke((uint64_t)v51, v38, v37, v36);
    v62 = 0;
    if ((v40 & 1) == 0)
    {
LABEL_36:
      v47 = *(_DWORD *)(a3 + 52);
      v46 = (*(unsigned __int8 *)(a3 + 32) | v47) != 0;
      if (!v47)
        goto LABEL_40;
      goto LABEL_37;
    }
    v34 = *(_WORD *)(v19 + 16);
    v33 = a2;
  }
  v41 = *(_QWORD *)(a1 + 8640);
  v42 = *(_QWORD *)(a1 + 8688);
  v43 = *(_QWORD *)(a1 + 8736);
  v26.i32[0] = *(_DWORD *)(v33 + 40);
  physx::Gu::ShapeData::ShapeData((uint64_t)v65, *(_QWORD *)(v33 + 24), *(_QWORD *)(v33 + 32), *(double *)v26.i64, v27, v28, v29, v30, v31);
  v64 = v65;
  if ((v34 & 1) != 0
    && ((*(uint64_t (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v41 + 56))(v41, v65, v51) & 1) == 0)
  {
    goto LABEL_36;
  }
  if ((v34 & 2) != 0
    && ((*(uint64_t (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v42 + 56))(v42, v65, v51) & 1) == 0)
  {
    v46 = (*(unsigned __int8 *)(a3 + 32) | *(_DWORD *)(a3 + 52)) != 0;
    goto LABEL_40;
  }
  v50 = *(_WORD *)(v19 + 16);
  v44 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD *, __int16 *))(*(_QWORD *)v43 + 56))(v43, v65, v51, &v50);
  v45 = *(_DWORD *)(a3 + 52);
  v46 = (*(unsigned __int8 *)(a3 + 32) | v45) != 0;
  if (v44 && v45)
  {
LABEL_37:
    if ((**(unsigned int (***)(uint64_t, _QWORD))a3)(a3, *(_QWORD *)(a3 + 40)))
      *(_DWORD *)(a3 + 52) = 0;
  }
LABEL_40:
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  return v46;
}

BOOL physx::NpSceneQueries::sweep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8, float a9, float a10, _QWORD *a11)
{
  int v21;
  char v30;
  __int16 v31;
  _QWORD v32[2];
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;

  _X24 = a4;
  _X23 = a3;
  _X25 = a2;
  v21 = (unsigned __int16)*a6;
  if ((~v21 & 0x300) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 130, " Precise sweep doesn't support MTD. Perform MTD with default sweep", (uint64_t)a6, a7, a8, v30);
    v21 = *a6 & 0xFEFF;
    *a6 &= ~0x100u;
  }
  if ((~v21 & 0x210) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 136, " eMTD cannot be used in conjunction with eASSUME_NO_INITIAL_OVERLAP. eASSUME_NO_INITIAL_OVERLAP will be ignored", (uint64_t)a6, a7, a8, v30);
    LOWORD(v21) = *a6 & 0xFFEF;
    *a6 = v21;
  }
  if (a10 > 0.0 && (v21 & 0x100) != 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 144, " Precise sweep doesn't support inflation, inflation will be overwritten to be zero", (uint64_t)a6, a7, a8, v30);
    LOWORD(v21) = *a6;
    a10 = 0.0;
  }
  __asm
  {
    PRFM            #0, [X25]
    PRFM            #0, [X23]
    PRFM            #0, [X24]
  }
  v33 = a9;
  v32[0] = 0;
  v32[1] = _X24;
  v34 = _X25;
  v35 = _X23;
  v36 = a10;
  v31 = v21;
  return physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(a1, (uint64_t)v32, a5, &v31, a11, a7, a8, 0);
}

BOOL physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  double v26;
  float32x4_t v27;
  double v28;
  float32x4_t v29;
  float32x4_t v30;
  double v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  float32x4_t v38;
  double v39;
  float32x4_t v40;
  double v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t *v44;
  float32x4_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _BOOL8 v53;
  int v54;
  __int16 v57;
  float v58;
  _QWORD v59[4];
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  BOOL v67;
  BOOL v68;
  char v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  _BYTE *v74;
  _BYTE v75[72];
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v12 = *(_WORD *)(a6 + 16) & 0x10;
  if (!a5)
  {
    v21 = a7;
    v22 = a8;
    v23 = 0xFFFFFFFFLL;
    v24 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  v13 = a5[1];
  v14 = *(unsigned __int16 *)(v13 + 8);
  v15 = (uint64_t *)(v13 + 40);
  if (v14 == 5)
    v16 = v15;
  else
    v16 = 0;
  if (v14 == 6)
    v16 = v15;
  if (v14 != 13)
    v15 = v16;
  v17 = *((unsigned __int16 *)v15 + 4);
  v18 = v15;
  if ((_DWORD)v17 == 1)
    goto LABEL_12;
  if (*((_WORD *)v15 + 4))
  {
    v18 = (uint64_t *)*v15;
LABEL_12:
    v19 = 0;
    v20 = 0xFFFFFFFFLL;
    while (v18[v19] != *a5)
    {
      if (v17 == ++v19)
      {
        v21 = a7;
        v22 = a8;
        goto LABEL_19;
      }
    }
    v21 = a7;
    v22 = a8;
    v20 = v19;
    goto LABEL_19;
  }
  v21 = a7;
  v22 = a8;
  v20 = 0xFFFFFFFFLL;
LABEL_19:
  v23 = *((unsigned int *)v15 + 8);
  v25 = v15 + 2;
  if (*((_WORD *)v15 + 12) != 1)
    v25 = (_QWORD *)*v25;
  v24 = v25[v20];
LABEL_22:
  physx::Sq::SceneQueryManager::flushUpdates(a1 + 8640);
  *(_BYTE *)(a3 + 64) = 0;
  *(_DWORD *)(a3 + 84) = 0;
  v30.i32[0] = 1287568416;
  *(float *)&v31 = fminf(*(float *)(a2 + 16), 100000000.0);
  v32 = *a4;
  v33 = v12 >> 4;
  v59[0] = off_24ED96CD0;
  v59[1] = a1;
  v59[2] = a2;
  v59[3] = a3;
  v60 = v32;
  v61 = a6;
  v62 = v21;
  v63 = LODWORD(v31);
  v64 = v22;
  v65 = ((v32 & 0x40 | v12) != 0) << 6;
  v66 = 1;
  v34 = *(_WORD *)(a6 + 16);
  v67 = (v34 & 0x20) != 0;
  v68 = v67;
  v69 = v33;
  v70 = 0;
  if (v24 != 0xFFFFFFFF && !*(_DWORD *)(a3 + 80))
  {
    v35 = v24 >> 1;
    if ((_DWORD)v23 == -1)
    {
      v43 = *(_QWORD *)(a1 + 8640 + 48 * (v24 & 1));
      v36 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 72))(v43, v35);
    }
    else
    {
      v36 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8736) + 72))(*(_QWORD *)(a1 + 8736), v35, v23);
    }
    v44 = (uint64_t *)v36;
    v70 = 1;
    LODWORD(v37) = *(_DWORD *)(a2 + 40);
    physx::Gu::ShapeData::ShapeData((uint64_t)v75, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), v37, v38, v39, v40, v41, v42);
    v45.i64[1] = *((_QWORD *)&v76 + 1);
    v71 = v76;
    v45.i64[0] = v77;
    v72 = v77;
    v73 = 1;
    v74 = v75;
    v46 = MultiQueryCallback<physx::PxSweepHit>::invoke((uint64_t)v59, &v58, v44, v45);
    v70 = 0;
    if ((v46 & 1) == 0)
    {
LABEL_37:
      v52 = *(unsigned int *)(a3 + 84);
      v53 = (*(unsigned __int8 *)(a3 + 64) | v52) != 0;
      if (!*(_BYTE *)(a3 + 64))
      {
LABEL_35:
        if (!(_DWORD)v52)
          goto LABEL_43;
LABEL_40:
        if ((**(unsigned int (***)(uint64_t, _QWORD))a3)(a3, *(_QWORD *)(a3 + 72)))
          *(_DWORD *)(a3 + 84) = 0;
        goto LABEL_43;
      }
LABEL_38:
      if (!(_DWORD)v52)
        goto LABEL_43;
      v54 = physx::clipHitsToNewMaxDist<physx::PxSweepHit>(*(_QWORD *)(a3 + 72), v52, *(float *)(a3 + 56));
      *(_DWORD *)(a3 + 84) = v54;
      if (!v54)
        goto LABEL_43;
      goto LABEL_40;
    }
    v34 = *(_WORD *)(a6 + 16);
  }
  v47 = *(_QWORD *)(a1 + 8640);
  v48 = *(_QWORD *)(a1 + 8688);
  v49 = *(_QWORD *)(a1 + 8736);
  LODWORD(v31) = *(_DWORD *)(a2 + 40);
  physx::Gu::ShapeData::ShapeData((uint64_t)v75, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), v31, v30, v26, v27, v28, v29);
  v71 = v76;
  v72 = v77;
  v73 = 1;
  v74 = v75;
  if ((v34 & 1) != 0
    && ((*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, int *, _QWORD *))(*(_QWORD *)v47 + 64))(v47, v75, *(_QWORD *)(a2 + 8), &v63, v59) & 1) == 0)
  {
    goto LABEL_37;
  }
  if ((v34 & 2) != 0
    && ((*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, int *, _QWORD *))(*(_QWORD *)v48 + 64))(v48, v75, *(_QWORD *)(a2 + 8), &v63, v59) & 1) == 0)
  {
    v53 = (*(unsigned __int8 *)(a3 + 64) | *(_DWORD *)(a3 + 84)) != 0;
    goto LABEL_43;
  }
  v50 = *(_QWORD *)(a2 + 8);
  v57 = *(_WORD *)(a6 + 16);
  v51 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, int *, _QWORD *, __int16 *))(*(_QWORD *)v49 + 64))(v49, v75, v50, &v63, v59, &v57);
  v52 = *(unsigned int *)(a3 + 84);
  v53 = (*(unsigned __int8 *)(a3 + 64) | v52) != 0;
  if (v51)
  {
    if (!*(_BYTE *)(a3 + 64))
      goto LABEL_35;
    goto LABEL_38;
  }
LABEL_43:
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  return v53;
}

BOOL MultiQueryCallback<physx::PxRaycastHit>::invoke(uint64_t a1, float *a2, uint64_t *a3, float32x4_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t (*v21)(_BYTE *, float32x4_t *, _QWORD, _QWORD, __int128 *);
  int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  float v28;
  uint64_t (*v29)(float);
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t (*v42)(__int128 *, float32x4_t *, _QWORD, _QWORD, _QWORD *);
  __int128 v43;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  _QWORD *v61;
  float v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  float32x4_t *v68;
  uint64_t v70;
  __int16 v71;
  __int16 v72;
  _BYTE v73[24];
  int v74;
  __int16 v75;
  uint64_t v76;
  _BYTE v77[28];
  char v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int16 v82;
  float32x4_t v83;
  __int128 v84;
  float32x4_t v85[2];
  _QWORD v86[2];
  int v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v86[0] = 0;
  v86[1] = 0;
  v87 = -1;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v92 = 2139095039;
  v93 = 0;
  v5 = *a3;
  v6 = a3[1];
  v8 = (float32x4_t *)(*a3 + 32);
  v9 = (char *)v8 + qword_25582F9E0;
  v10 = *(_QWORD *)(a1 + 40);
  v71 = *(_WORD *)(v10 + 16);
  if (*(_BYTE *)(a1 + 78))
    v11 = 2;
  else
    v11 = 1;
  if (*(__int16 *)(v10 + 16) > -1 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 88) == 0)
    v13 = 2;
  else
    v13 = v11;
  v14 = *(_WORD *)(a1 + 32);
  v7 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v6 + 11) & 0xF) + 3) + v6;
  v70 = v7 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v7 + 13) + 10);
  if (!*(_BYTE *)(a1 + 78))
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 64);
    if (!v16)
    {
      v18 = *(_DWORD *)(v10 + 4);
      v19 = *(_DWORD *)(v10 + 8);
      v20 = *(_DWORD *)(v10 + 12);
      if (v18 | *(_DWORD *)v10 | v19 | v20)
      {
        if (!(*(_DWORD *)(v5 + 36) & v18 | *(_DWORD *)(v5 + 32) & *(_DWORD *)v10 | *(_DWORD *)(v5 + 40) & v19 | *(_DWORD *)(v5 + 44) & v20))
          return 1;
      }
    }
    if ((v71 & 4) != 0 && v15 | v16)
    {
      LOWORD(v81) = v14;
      if (v15)
      {
        v17 = (**(uint64_t (***)(unint64_t))v15)(v15);
LABEL_21:
        v13 = v17;
        if (!v17)
          return 1;
        v14 = v81 & 0x1B0 | v14 & 0xFE4F;
        goto LABEL_23;
      }
      v21 = *(uint64_t (**)(_BYTE *, float32x4_t *, _QWORD, _QWORD, __int128 *))(v16 + 16);
      if (v21)
      {
        *(_OWORD *)v73 = *(_OWORD *)v10;
        v85[0] = *v8;
        v17 = v21(v73, v85, *(_QWORD *)v16, *(unsigned int *)(v16 + 8), &v81);
        goto LABEL_21;
      }
    }
  }
LABEL_23:
  physx::NpActor::getGlobalPose(v85, v5, v6, a4);
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
    v22 = (int *)(*(_QWORD *)(v5 + 16) + 64);
  else
    v22 = (int *)(v5 + 104);
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_DWORD *)(v23 + 88);
  v25 = *(unsigned int *)(v23 + 92);
  v26 = (_QWORD *)(*(_QWORD *)(v23 + 80) + (v25 << 6));
  if (v24 > v25)
    v27 = v26;
  else
    v27 = v86;
  v28 = *(float *)(a1 + 56);
  v29 = *(uint64_t (**)(float))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8856) + 8 * *v22);
  *(_WORD *)v73 = *(_WORD *)(a1 + 72) | v14;
  v30 = v29(v28);
  if (!v30)
    return 1;
  v68 = v8;
  v31 = 0;
  v32 = 0;
  v33 = v30;
  v34 = (unint64_t)v30 << 6;
  v35 = 1;
  v36 = v70;
  while (1)
  {
    v37 = &v27[v31 / 8];
    *v37 = v36;
    v37[1] = (uint64_t)v9;
    v38 = v13;
    if (*(_BYTE *)(a1 + 78))
      goto LABEL_42;
    v39 = *(_QWORD *)(a1 + 48);
    if (v39)
    {
      v38 = v13;
      if ((v71 & 8) == 0)
        goto LABEL_42;
      v38 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(*(_QWORD *)v39 + 8))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), &v27[v31 / 8]);
      goto LABEL_41;
    }
    v40 = *(_QWORD *)(a1 + 64);
    if (v40)
      v41 = (v71 & 8) == 0;
    else
      v41 = 1;
    v38 = v13;
    if (!v41)
    {
      v42 = *(uint64_t (**)(__int128 *, float32x4_t *, _QWORD, _QWORD, _QWORD *))(v40 + 24);
      v38 = v13;
      if (v42)
      {
        v43 = *(_OWORD *)*(_QWORD *)(a1 + 40);
        v83 = *v68;
        v84 = v43;
        v38 = v42(&v84, &v83, *(_QWORD *)v40, *(unsigned int *)(v40 + 8), &v27[v31 / 8]);
LABEL_41:
        v36 = v70;
      }
    }
LABEL_42:
    if (*(_BYTE *)(a1 + 77) && v38 != 0)
      break;
    if (*(_BYTE *)(a1 + 76))
      v45 = 1;
    else
      v45 = v38;
    if (v45 == 2)
    {
      v61 = &v27[v31 / 8];
      v62 = *(float *)&v27[v31 / 8 + 6];
      if (v62 <= *(float *)(a1 + 56))
      {
        *(float *)(a1 + 56) = v62;
        *a2 = v62;
        v63 = *(_QWORD *)(a1 + 24);
        v64 = *(_OWORD *)v37;
        *(_DWORD *)(v63 + 24) = *((_DWORD *)v37 + 4);
        *(_OWORD *)(v63 + 8) = v64;
        *(_WORD *)(v63 + 28) = *((_WORD *)v61 + 10);
        *(_QWORD *)(v63 + 32) = v61[3];
        *(_DWORD *)(v63 + 40) = *((_DWORD *)v61 + 8);
        *(_OWORD *)(v63 + 44) = *(_OWORD *)((char *)v61 + 36);
        *(_QWORD *)(v63 + 60) = *(_QWORD *)((char *)v61 + 52);
        *(_BYTE *)(*(_QWORD *)(a1 + 24) + 72) = 1;
      }
    }
    else if (v45 == 1)
    {
      v46 = *(_QWORD *)(a1 + 24);
      v47 = *(_DWORD *)(v46 + 88);
      if (v47)
      {
        if (*(_BYTE *)(a1 + 74) && *(float *)&v27[v31 / 8 + 6] <= *(float *)(a1 + 56))
        {
          v48 = *(_DWORD *)(v46 + 92);
          if (v48 == v47)
          {
            v49 = *(__int128 **)(a1 + 40);
            v81 = *v49;
            v82 = *((_WORD *)v49 + 8) | 0x8000;
            *(_QWORD *)&v73[8] = 0;
            *(_QWORD *)&v73[16] = 0;
            v74 = -1;
            v75 = 0;
            *(_QWORD *)v77 = 0;
            *(_QWORD *)&v77[8] = 0;
            v76 = 0;
            *(_QWORD *)&v77[16] = 2139095039;
            *(_DWORD *)&v77[24] = 0;
            v78 = 0;
            v79 = 0;
            v80 = 0;
            *(_QWORD *)v73 = off_24ED96C60;
            if (!*(_BYTE *)(a1 + 75) && *(_DWORD *)(v46 + 88))
            {
              v50 = *(_QWORD *)(a1 + 8);
              v51 = *(_QWORD *)(a1 + 16);
              v72 = *(_WORD *)(a1 + 32);
              v52 = physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(v50, v51, v73, &v72, 0, &v81, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));
              v46 = *(_QWORD *)(a1 + 24);
              if (v52)
              {
                v53 = *(_OWORD *)&v73[8];
                *(_DWORD *)(v46 + 24) = v74;
                *(_OWORD *)(v46 + 8) = v53;
                *(_WORD *)(v46 + 28) = v75;
                *(_QWORD *)(v46 + 32) = v76;
                *(_DWORD *)(v46 + 40) = *(_DWORD *)v77;
                *(_OWORD *)(v46 + 44) = *(_OWORD *)&v77[4];
                *(_QWORD *)(v46 + 60) = *(_QWORD *)&v77[20];
                v54 = *(_QWORD *)(a1 + 24);
                *(_BYTE *)(v54 + 72) = 1;
                v55 = physx::clipHitsToNewMaxDist<physx::PxRaycastHit>(*(_QWORD *)(v54 + 80), *(unsigned int *)(v54 + 92), *(float *)&v77[16]);
                v46 = *(_QWORD *)(a1 + 24);
                *(_DWORD *)(v46 + 92) = v55;
                v56 = *(_DWORD *)&v77[16];
                *(_DWORD *)(a1 + 56) = *(_DWORD *)&v77[16];
                *(_DWORD *)a2 = v56;
              }
              v36 = v70;
            }
            *(_BYTE *)(a1 + 75) = 1;
            v48 = *(_DWORD *)(v46 + 92);
            if (v48 == *(_DWORD *)(v46 + 88))
            {
              v57 = (**(uint64_t (***)(uint64_t, _QWORD))v46)(v46, *(_QWORD *)(v46 + 80));
              v36 = v70;
              *(_BYTE *)(a1 + 74) = v57;
              if (!v57)
                return v32;
              v48 = 0;
              v46 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)(v46 + 92) = 0;
            }
          }
          v58 = *(_QWORD *)(v46 + 80);
          *(_DWORD *)(v46 + 92) = v48 + 1;
          v59 = v58 + ((unint64_t)v48 << 6);
          v60 = *(_OWORD *)v37;
          *(_DWORD *)(v59 + 16) = *((_DWORD *)v37 + 4);
          *(_OWORD *)v59 = v60;
          *(_WORD *)(v59 + 20) = WORD2(v27[v31 / 8 + 2]);
          *(_QWORD *)(v59 + 24) = v27[v31 / 8 + 3];
          *(_DWORD *)(v59 + 32) = v27[v31 / 8 + 4];
          *(_OWORD *)(v59 + 36) = *(_OWORD *)((char *)&v27[v31 / 8 + 4] + 4);
          *(_QWORD *)(v59 + 52) = *(_QWORD *)((char *)&v27[v31 / 8 + 6] + 4);
        }
      }
    }
    v32 = v35 >= v33;
    v31 += 64;
    ++v35;
    if (v34 == v31)
      return v32;
  }
  v65 = *(_QWORD *)(a1 + 24);
  v66 = *(_OWORD *)&v27[v31 / 8];
  *(_DWORD *)(v65 + 24) = v27[v31 / 8 + 2];
  *(_OWORD *)(v65 + 8) = v66;
  *(_WORD *)(v65 + 28) = WORD2(v27[v31 / 8 + 2]);
  *(_QWORD *)(v65 + 32) = v27[v31 / 8 + 3];
  *(_DWORD *)(v65 + 40) = v27[v31 / 8 + 4];
  *(_OWORD *)(v65 + 44) = *(_OWORD *)((char *)&v27[v31 / 8 + 4] + 4);
  *(_QWORD *)(v65 + 60) = *(_QWORD *)((char *)&v27[v31 / 8 + 6] + 4);
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + 72) = 1;
  return v32;
}

float32x4_t MultiQueryCallback<physx::PxOverlapHit>::invoke(uint64_t a1, float32x4_t result, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  int v15;
  __int16 v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t (*v23)(float32x4_t *, __int128 *, _QWORD, _QWORD, __int16 *);
  float32x4_t GlobalPose;
  int *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t (*v41)(__int128 *, __int128 *, _QWORD, _QWORD, float32x4_t *);
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  float32x4_t v54[2];
  __int128 v55;
  __int16 v56;
  _QWORD v57[2];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v57[0] = 0;
  v57[1] = 0;
  v58 = -1;
  v5 = *a4;
  v6 = a4[1];
  v7 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v6 + 11) & 0xF) + 3) + v6;
  v8 = v7 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v7 + 13) + 10);
  v9 = (__int128 *)(*a4 + 32);
  v10 = (char *)v9 + qword_25582F9E0;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_WORD *)(v11 + 16);
  if (*(_BYTE *)(a1 + 78))
    v13 = 2;
  else
    v13 = 1;
  if (v12 > -1 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 48) == 0)
    v15 = 2;
  else
    v15 = v13;
  if (!*(_BYTE *)(a1 + 78))
  {
    v16 = *(_WORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 64);
    if (!v18)
    {
      v20 = *(_DWORD *)(v11 + 4);
      v21 = *(_DWORD *)(v11 + 8);
      v22 = *(_DWORD *)(v11 + 12);
      if (v20 | *(_DWORD *)v11 | v21 | v22)
      {
        if (!(*(_DWORD *)(v5 + 36) & v20 | *(_DWORD *)(v5 + 32) & *(_DWORD *)v11 | *(_DWORD *)(v5 + 40) & v21 | *(_DWORD *)(v5 + 44) & v22))
          return result;
      }
    }
    if ((v12 & 4) != 0 && v17 | v18)
    {
      v56 = v16;
      if (v17)
      {
        v19 = (**(uint64_t (***)(unint64_t))v17)(v17);
      }
      else
      {
        v23 = *(uint64_t (**)(float32x4_t *, __int128 *, _QWORD, _QWORD, __int16 *))(v18 + 16);
        if (!v23)
          goto LABEL_22;
        v54[0] = *(float32x4_t *)v11;
        v55 = *v9;
        v19 = v23(v54, &v55, *(_QWORD *)v18, *(unsigned int *)(v18 + 8), &v56);
      }
      v15 = v19;
      if (!v19)
        return result;
    }
  }
LABEL_22:
  GlobalPose = physx::NpActor::getGlobalPose(v54, v5, v6, result);
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
    v25 = (int *)(*(_QWORD *)(v5 + 16) + 64);
  else
    v25 = (int *)(v5 + 104);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = *(_DWORD *)(v26 + 48);
  v28 = *(_DWORD *)(v26 + 52);
  v29 = *(_QWORD *)(v26 + 40) + 24 * v28;
  if (v28 >= v27)
    v30 = (float32x4_t *)v57;
  else
    v30 = (float32x4_t *)(*(_QWORD *)(v26 + 40) + 24 * v28);
  v31 = *v25;
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(int **)(v32 + 24);
  v34 = *(_QWORD *)(v32 + 32);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8872);
  v36 = *v33;
  if ((int)v36 <= (int)v31)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, float32x4_t))(v35 + 56 * (int)v36 + 8 * v31))(v33, v34, GlobalPose))return result;
  }
  else if (((*(uint64_t (**)(int *, float32x4_t *, int *, uint64_t, _QWORD, float32x4_t))(v35
                                                                                                  + 56 * (int)v31
                                                                                                  + 8 * v36))(v25, v54, v33, v34, 0, GlobalPose) & 1) == 0)
  {
    return result;
  }
  v30->i64[0] = v8;
  v37 = v57;
  if (v28 < v27)
    v37 = (_QWORD *)v29;
  v37[1] = v10;
  if (!*(_BYTE *)(a1 + 78))
  {
    v38 = *(_QWORD *)(a1 + 48);
    if (v38)
    {
      if ((v12 & 8) != 0)
      {
        v39 = (*(uint64_t (**)(uint64_t, _QWORD, float32x4_t *))(*(_QWORD *)v38 + 8))(v38, *(_QWORD *)(a1 + 40), v30);
LABEL_42:
        v15 = v39;
      }
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 64);
      if (v40)
      {
        if ((v12 & 8) != 0)
        {
          v41 = *(uint64_t (**)(__int128 *, __int128 *, _QWORD, _QWORD, float32x4_t *))(v40 + 24);
          if (v41)
          {
            v42 = *(_OWORD *)*(_QWORD *)(a1 + 40);
            v52 = *v9;
            v53 = v42;
            v39 = v41(&v53, &v52, *(_QWORD *)v40, *(unsigned int *)(v40 + 8), v30);
            goto LABEL_42;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 77) && v15)
  {
    v43 = *(_QWORD *)(a1 + 24);
    result = *v30;
    *(_QWORD *)(v43 + 24) = v30[1].i64[0];
    *(float32x4_t *)(v43 + 8) = result;
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 32) = 1;
    return result;
  }
  if (*(_BYTE *)(a1 + 76))
    v44 = 1;
  else
    v44 = v15;
  if (v44 == 2)
  {
    result.i32[0] = *(_DWORD *)(a1 + 56);
    if (result.f32[0] >= -1.0)
    {
      v51 = *(_QWORD *)(a1 + 24);
      result = *v30;
      *(_QWORD *)(v51 + 24) = v30[1].i64[0];
      *(float32x4_t *)(v51 + 8) = result;
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + 32) = 1;
    }
  }
  else if (v44 == 1)
  {
    v45 = *(_QWORD *)(a1 + 24);
    v46 = *(_DWORD *)(v45 + 48);
    if (v46)
    {
      if (*(_BYTE *)(a1 + 74))
      {
        result.i32[0] = *(_DWORD *)(a1 + 56);
        if (result.f32[0] >= -1.0)
        {
          v47 = *(_DWORD *)(v45 + 52);
          if (v47 == v46)
          {
            v48 = (**(uint64_t (***)(uint64_t, _QWORD))v45)(v45, *(_QWORD *)(v45 + 40));
            *(_BYTE *)(a1 + 74) = v48;
            if (!v48)
              return result;
            v47 = 0;
            v45 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(v45 + 52) = 0;
          }
          v49 = *(_QWORD *)(v45 + 40);
          *(_DWORD *)(v45 + 52) = v47 + 1;
          v50 = (__n128 *)(v49 + 24 * v47);
          result = *v30;
          v50[1].n128_u64[0] = v30[1].u64[0];
          *v50 = (__n128)result;
        }
      }
    }
  }
  return result;
}

uint64_t MultiQueryCallback<physx::PxSweepHit>::invoke(uint64_t a1, float *a2, uint64_t *a3, float32x4_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  int v15;
  __int16 v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t (*v23)(_BYTE *, _BYTE *, _QWORD, _QWORD, float32x4_t *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t GlobalPose;
  int8x16_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int32x4_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unsigned __int16 v44;
  float v45;
  float *v46;
  _DWORD *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x2_t *v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  int8x16_t v61;
  int8x16_t v62;
  __n128 v63;
  float v64;
  float v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  int8x16_t v69;
  uint64_t (**v70)(int *, _BYTE *, _DWORD *, __n128, __n128);
  uint64_t (*v71)(int *, _BYTE *, _DWORD *, __n128, __n128);
  char v72;
  uint64_t (**v73)(int *, _BYTE *, _DWORD *, __n128, __n128);
  uint64_t (*v74)(int *, _BYTE *, _DWORD *, __n128, __n128);
  uint64_t v75;
  uint64_t (**v76)(int *, _BYTE *, _DWORD *, __n128, __n128);
  uint64_t (**v77)(int *, _BYTE *, _DWORD *, __n128, __n128);
  uint64_t (*v78)(int *, _BYTE *, _DWORD *, uint64_t, float32x2_t *, float *, _WORD *, float, float);
  float *v79;
  float v80;
  float *v81;
  float v82;
  float v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t (*v88)(__int128 *, __int128 *, _QWORD, _QWORD, float *);
  __int128 v89;
  uint64_t result;
  uint64_t v91;
  __int128 v92;
  _DWORD *v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  _DWORD *v109;
  float v110;
  uint64_t v111;
  __int128 v112;
  _DWORD *v113;
  char v114;
  char v115;
  uint64_t v116;
  __int128 *v117;
  char v118;
  uint64_t v119;
  char *v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  float *v127;
  __int16 v128;
  __int16 v129;
  _BYTE v130[24];
  float v131;
  __int16 v132;
  uint64_t v133;
  _BYTE v134[20];
  int v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  float32x4_t v141;
  float32x2_t v142;
  float v143;
  _WORD v144[4];
  _BYTE v145[24];
  int v146;
  _DWORD v147[3];
  float v148;
  float v149;
  float32x2_t v150;
  float v151;
  float32x2_t v152;
  float v153;
  float v154;
  float v155;
  float v156;
  _QWORD v157[2];
  int v158;
  __int16 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _BYTE v164[28];

  *(_QWORD *)&v164[4] = *MEMORY[0x24BDAC8D0];
  v157[0] = 0;
  v157[1] = 0;
  v158 = -1;
  v159 = 0;
  v161 = 0;
  v162 = 0;
  v160 = 0;
  v163 = 2139095039;
  v5 = *a3;
  v6 = a3[1];
  v7 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v6 + 11) & 0xF) + 3) + v6;
  v8 = v7 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v7 + 13) + 10);
  v9 = (__int128 *)(*a3 + 32);
  v10 = (char *)v9 + qword_25582F9E0;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_WORD *)(v11 + 16);
  if (*(_BYTE *)(a1 + 78))
    v13 = 2;
  else
    v13 = 1;
  if (*(__int16 *)(v11 + 16) > -1 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 80) == 0)
    v15 = 2;
  else
    v15 = v13;
  v16 = *(_WORD *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 78))
  {
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 64);
    if (!v18)
    {
      v20 = *(_DWORD *)(v11 + 4);
      v21 = *(_DWORD *)(v11 + 8);
      v22 = *(_DWORD *)(v11 + 12);
      if (v20 | *(_DWORD *)v11 | v21 | v22)
      {
        if (!(*(_DWORD *)(v5 + 36) & v20 | *(_DWORD *)(v5 + 32) & *(_DWORD *)v11 | *(_DWORD *)(v5 + 40) & v21 | *(_DWORD *)(v5 + 44) & v22))
          return 1;
      }
    }
    if ((v12 & 4) != 0 && v17 | v18)
    {
      v141.i16[0] = v16;
      if (v17)
      {
        v19 = (**(uint64_t (***)(unint64_t))v17)(v17);
      }
      else
      {
        v23 = *(uint64_t (**)(_BYTE *, _BYTE *, _QWORD, _QWORD, float32x4_t *))(v18 + 16);
        if (!v23)
          goto LABEL_23;
        *(_OWORD *)v130 = *(_OWORD *)v11;
        *(_OWORD *)v145 = *v9;
        v19 = v23(v130, v145, *(_QWORD *)v18, *(unsigned int *)(v18 + 8), &v141);
      }
      v15 = v19;
      if (!v19)
        return 1;
      v16 = v141.i16[0] & 0x1B0 | v16 & 0xFE4F;
    }
  }
LABEL_23:
  GlobalPose = physx::NpActor::getGlobalPose(&v141, v5, v6, a4);
  v117 = v9;
  v118 = v12;
  v123 = v15;
  v121 = v10;
  v122 = v8;
  v128 = v16;
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
    v36 = (int *)(*(_QWORD *)(v5 + 16) + 64);
  else
    v36 = (int *)(v5 + 104);
  v38 = *(_QWORD *)(a1 + 16);
  v37 = *(_QWORD *)(a1 + 24);
  v39 = *(_DWORD *)(v37 + 84);
  v40 = *(_QWORD *)(v37 + 72);
  v119 = v40;
  v41 = (float *)(v40 + 56 * v39);
  v125 = *(_DWORD *)(v37 + 80);
  v124 = v39;
  if (v39 >= v125)
    v42 = (float *)v157;
  else
    v42 = (float *)(v40 + 56 * v39);
  v43 = *(_QWORD *)(a1 + 8);
  v44 = *(_WORD *)(a1 + 72);
  v45 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 104))
    v46 = (float *)(a1 + 80);
  else
    v46 = 0;
  v47 = *(_DWORD **)(v38 + 24);
  v126 = *(_QWORD *)(v38 + 32);
  v127 = v42;
  v48 = *v46;
  v49 = v46[1];
  v50 = v46[2];
  v51 = v46[3];
  v52 = v46[4];
  v53 = v46[5];
  v54 = 0.0;
  GlobalPose.i32[0] = 0;
  v29.i32[0] = 1.0;
  physx::Gu::computeBounds(&v152, (uint64_t)v36, (uint64_t)&v141, 0, GlobalPose, v29, v30, v31, v32, v33, v34, v35, v24, v25, v26, v27, v114);
  v150.f32[0] = (float)((float)((float)(v51 - v48) * 0.5) + (float)((float)(v154 - v152.f32[0]) * 0.5)) * 1.01;
  v150.f32[1] = (float)((float)((float)(v52 - v49) * 0.5) + (float)((float)(v155 - v152.f32[1]) * 0.5)) * 1.01;
  v151 = (float)((float)((float)(v53 - v50) * 0.5) + (float)((float)(v156 - v153) * 0.5)) * 1.01;
  v148 = 0.0;
  v149 = 0.0;
  *(float *)v130 = -v150.f32[0];
  *(float *)&v130[4] = -v150.f32[1];
  *(float *)&v130[8] = -v151;
  *(float *)v145 = (float)((float)(v48 + v51) * 0.5) - (float)((float)(v154 + v152.f32[0]) * 0.5);
  *(float *)&v145[4] = (float)((float)(v49 + v52) * 0.5) - (float)((float)(v155 + v152.f32[1]) * 0.5);
  *(float *)&v145[8] = (float)((float)(v50 + v53) * 0.5) - (float)((float)(v156 + v153) * 0.5);
  v55 = *(float32x2_t **)(v38 + 8);
  v56 = physx::Gu::intersectRayAABB2((float32x2_t *)v130, &v150, (float32x2_t *)v145, v55, &v149, &v148, v45);
  v63.n128_f32[0] = v148;
  if (!v56 && v149 > v148)
    return 1;
  v64 = v149 + -10.0;
  if (v149 <= 10.0)
    v65 = 0.0;
  else
    v65 = v149 + -10.0;
  v61.i64[0] = 0;
  if (v149 > 10.0)
  {
    v60.n128_u64[0] = (unint64_t)*v55;
    *(float32x2_t *)v61.i8 = vmul_n_f32(*v55, v64);
    v54 = v64 * v55[1].f32[0];
  }
  *(float32x4_t *)v130 = v141;
  *(float32x2_t *)&v130[16] = vsub_f32(v142, *(float32x2_t *)v61.i8);
  v131 = v143 - v54;
  if (v148 >= v45)
    v63.n128_f32[0] = v45;
  v63.n128_f32[0] = v63.n128_f32[0] - v65;
  v60.n128_u32[0] = *(_DWORD *)(v38 + 40);
  v66 = *(_QWORD *)(v43 + 8864);
  switch(*v47)
  {
    case 0xFFFFFFFF:
    case 1:
    case 5:
    case 6:
    case 7:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 306, "PxScene::sweep(): first geometry object parameter must be sphere, capsule, box or convex geometry.", v57, v58, v59, v115);
      return 1;
    case 0:
      v67 = v128;
      v68 = v47[1];
      v147[0] = 2;
      v147[1] = v68;
      v147[2] = 0;
      v116 = v61.i64[0];
      *(_QWORD *)v145 = *(_QWORD *)(v126 + 16);
      v61.i64[0] = *(_QWORD *)v145;
      v62.i32[0] = *(_DWORD *)(v126 + 24);
      v69 = vextq_s8(vextq_s8(v62, v62, 4uLL), v61, 0xCuLL);
      v69.i32[3] = v69.i32[0];
      *(int8x16_t *)&v145[8] = v69;
      v146 = v68;
      v70 = (uint64_t (**)(int *, _BYTE *, _DWORD *, __n128, __n128))(v66 + 8 * *v36);
      if (((v44 | (unsigned __int16)v128) & 0x100) != 0)
        v70 += 7;
      v71 = *v70;
      v144[3] = v44 | v128;
      v72 = v71(v36, v130, v147, v63, v60);
      break;
    case 2:
      v67 = v128;
      v73 = (uint64_t (**)(int *, _BYTE *, _DWORD *, __n128, __n128))(v66 + 8 * *v36);
      if (((v44 | (unsigned __int16)v128) & 0x100) != 0)
        v73 += 7;
      v74 = *v73;
      v144[2] = v44 | v128;
      goto LABEL_52;
    case 3:
      v67 = v128;
      v75 = v66 + 8 * *v36;
      v76 = (uint64_t (**)(int *, _BYTE *, _DWORD *, __n128, __n128))(v75 + 168);
      v77 = (uint64_t (**)(int *, _BYTE *, _DWORD *, __n128, __n128))(v75 + 112);
      if (((v44 | (unsigned __int16)v128) & 0x100) != 0)
        v77 = v76;
      v74 = *v77;
      v144[1] = v44 | v128;
LABEL_52:
      v116 = v61.i64[0];
      v72 = v74(v36, v130, v47, v63, v60);
      break;
    case 4:
      v67 = v128;
      v78 = *(uint64_t (**)(int *, _BYTE *, _DWORD *, uint64_t, float32x2_t *, float *, _WORD *, float, float))(v66 + 8 * *v36 + 224);
      v144[0] = v44 | v128;
      v116 = v61.i64[0];
      v72 = v78(v36, v130, v47, v126, v55, v127, v144, v63.n128_f32[0], v60.n128_f32[0]);
      break;
    default:
      return 1;
  }
  if ((v72 & 1) == 0)
    return 1;
  if (v124 >= v125)
    v79 = (float *)v157;
  else
    v79 = v41;
  v79[12] = v65 + v79[12];
  v80 = *((float *)&v116 + 1) + v127[7];
  v127[6] = *(float *)&v116 + v127[6];
  v127[7] = v80;
  v127[8] = v54 + v127[8];
  *(_QWORD *)v127 = v122;
  *((_QWORD *)v79 + 1) = v121;
  if (v79[12] == 0.0 && (v67 & 0x200) == 0)
  {
    v81 = *(float **)(*(_QWORD *)(a1 + 16) + 8);
    v82 = -v81[1];
    v83 = -v81[2];
    v127[9] = -*v81;
    v127[10] = v82;
    v127[11] = v83;
  }
  v84 = v123;
  if (!*(_BYTE *)(a1 + 78))
  {
    v85 = *(_QWORD *)(a1 + 48);
    if (v85)
    {
      if ((v118 & 8) != 0)
      {
        v86 = (*(uint64_t (**)(uint64_t, _QWORD, float *))(*(_QWORD *)v85 + 8))(v85, *(_QWORD *)(a1 + 40), v127);
LABEL_69:
        v84 = v86;
      }
    }
    else
    {
      v87 = *(_QWORD *)(a1 + 64);
      if (v87)
      {
        if ((v118 & 8) != 0)
        {
          v88 = *(uint64_t (**)(__int128 *, __int128 *, _QWORD, _QWORD, float *))(v87 + 24);
          if (v88)
          {
            v89 = *(_OWORD *)*(_QWORD *)(a1 + 40);
            v139 = *v117;
            v140 = v89;
            v86 = v88(&v140, &v139, *(_QWORD *)v87, *(unsigned int *)(v87 + 8), v127);
            goto LABEL_69;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 77) && v84)
  {
    result = 0;
    v91 = *(_QWORD *)(a1 + 24);
    v92 = *(_OWORD *)v127;
    *(float *)(v91 + 24) = v127[4];
    *(_OWORD *)(v91 + 8) = v92;
    *(_WORD *)(v91 + 28) = *((_WORD *)v127 + 10);
    *(float *)(v91 + 32) = v127[6];
    *(float *)(v91 + 36) = v127[7];
    *(float *)(v91 + 40) = v127[8];
    *(float *)(v91 + 44) = v127[9];
    *(float *)(v91 + 48) = v127[10];
    *(float *)(v91 + 52) = v127[11];
    *(float *)(v91 + 56) = v79[12];
    v93 = (_DWORD *)(v119 + 56 * v124 + 52);
    if (v124 >= v125)
      v93 = v164;
    *(_DWORD *)(v91 + 60) = *v93;
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 64) = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 76))
      v94 = 1;
    else
      v94 = v84;
    if (v94 != 2)
    {
      if (v94 == 1)
      {
        v95 = *(_QWORD *)(a1 + 24);
        v96 = *(_DWORD *)(v95 + 80);
        if (v96)
        {
          if (*(_BYTE *)(a1 + 74) && v79[12] <= *(float *)(a1 + 56))
          {
            v97 = *(_DWORD *)(v95 + 84);
            if (v97 == v96)
            {
              v98 = *(_QWORD *)(a1 + 40);
              *(_OWORD *)v145 = *(_OWORD *)v98;
              *(_WORD *)&v145[16] = *(_WORD *)(v98 + 16) | 0x8000;
              *(_QWORD *)&v130[8] = 0;
              *(_QWORD *)&v130[16] = 0;
              v131 = NAN;
              v132 = 0;
              *(_QWORD *)v134 = 0;
              *(_QWORD *)&v134[8] = 0;
              v133 = 0;
              *(_DWORD *)&v134[16] = 2139095039;
              v136 = 0;
              v137 = 0;
              v138 = 0;
              *(_QWORD *)v130 = off_24ED96D10;
              if (!*(_BYTE *)(a1 + 75))
              {
                v99 = *(_QWORD *)(a1 + 8);
                v100 = *(_QWORD *)(a1 + 16);
                v129 = *(_WORD *)(a1 + 32);
                v101 = physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(v99, v100, v130, &v129, 0, v145, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));
                v95 = *(_QWORD *)(a1 + 24);
                if (v101)
                {
                  v102 = *(_OWORD *)&v130[8];
                  *(float *)(v95 + 24) = v131;
                  *(_OWORD *)(v95 + 8) = v102;
                  *(_WORD *)(v95 + 28) = v132;
                  *(_QWORD *)(v95 + 32) = v133;
                  *(_DWORD *)(v95 + 40) = *(_DWORD *)v134;
                  *(_OWORD *)(v95 + 44) = *(_OWORD *)&v134[4];
                  *(_DWORD *)(v95 + 60) = v135;
                  v103 = *(_QWORD *)(a1 + 24);
                  *(_BYTE *)(v103 + 64) = 1;
                  v104 = physx::clipHitsToNewMaxDist<physx::PxSweepHit>(*(_QWORD *)(v103 + 72), *(unsigned int *)(v103 + 84), *(float *)&v134[16]);
                  v95 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v95 + 84) = v104;
                  v105 = *(_DWORD *)&v134[16];
                  *(_DWORD *)(a1 + 56) = *(_DWORD *)&v134[16];
                  *(_DWORD *)a2 = v105;
                }
              }
              *(_BYTE *)(a1 + 75) = 1;
              v97 = *(_DWORD *)(v95 + 84);
              if (v97 == *(_DWORD *)(v95 + 80))
              {
                result = (**(uint64_t (***)(uint64_t, _QWORD))v95)(v95, *(_QWORD *)(v95 + 72));
                *(_BYTE *)(a1 + 74) = result;
                if (!(_DWORD)result)
                  return result;
                v97 = 0;
                v95 = *(_QWORD *)(a1 + 24);
                *(_DWORD *)(v95 + 84) = 0;
              }
            }
            v106 = *(_QWORD *)(v95 + 72);
            *(_DWORD *)(v95 + 84) = v97 + 1;
            v107 = v106 + 56 * v97;
            v108 = *(_OWORD *)v127;
            *(float *)(v107 + 16) = v127[4];
            *(_OWORD *)v107 = v108;
            *(_WORD *)(v107 + 20) = *((_WORD *)v127 + 10);
            *(float *)(v107 + 24) = v127[6];
            *(float *)(v107 + 28) = v127[7];
            *(float *)(v107 + 32) = v127[8];
            *(float *)(v107 + 36) = v127[9];
            *(float *)(v107 + 40) = v127[10];
            *(float *)(v107 + 44) = v127[11];
            *(float *)(v107 + 48) = v79[12];
            v109 = (_DWORD *)(v119 + 56 * v124 + 52);
            if (v124 >= v125)
              v109 = v164;
            *(_DWORD *)(v107 + 52) = *v109;
          }
        }
      }
      return 1;
    }
    v110 = v79[12];
    result = 1;
    if (v110 <= *(float *)(a1 + 56))
    {
      *(float *)(a1 + 56) = v110;
      *a2 = v110;
      v111 = *(_QWORD *)(a1 + 24);
      v112 = *(_OWORD *)v127;
      *(float *)(v111 + 24) = v127[4];
      *(_OWORD *)(v111 + 8) = v112;
      *(_WORD *)(v111 + 28) = *((_WORD *)v127 + 10);
      *(float *)(v111 + 32) = v127[6];
      *(float *)(v111 + 36) = v127[7];
      *(float *)(v111 + 40) = v127[8];
      *(float *)(v111 + 44) = v127[9];
      *(float *)(v111 + 48) = v127[10];
      *(float *)(v111 + 52) = v127[11];
      *(float *)(v111 + 56) = v79[12];
      v113 = (_DWORD *)(v119 + 56 * v124 + 52);
      if (v124 >= v125)
        v113 = v164;
      *(_DWORD *)(v111 + 60) = *v113;
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + 64) = 1;
    }
  }
  return result;
}

uint64_t physx::NpShape::NpShape(uint64_t a1, uint64_t *a2, char *a3, const unsigned __int16 *a4, unsigned int a5, int a6)
{
  char v8;
  int v9;
  unsigned int v10;
  uint64_t MeshRefCountable;
  unsigned int *v12;
  unsigned int v13;
  char v15;

  *(_DWORD *)(a1 + 8) = 196615;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)a1 = off_24ED95A20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24ED95BA0;
  v8 = *a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v15 = v8;
  physx::Sc::ShapeCore::ShapeCore(a1 + 80, a2, &v15, a4, a5);
  if (a6)
    v9 = 0x1000000;
  else
    v9 = 0x2000000;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 56) & 0xF0FFFFFF | v9;
  *(_QWORD *)(a1 + 256) = 0;
  if (a6)
    v10 = 0x80000000;
  else
    v10 = 0;
  *(_DWORD *)(a1 + 264) = v10;
  *(_QWORD *)(a1 + 16) = 0;
  MeshRefCountable = physx::NpShape::getMeshRefCountable((physx::NpShape *)a1);
  if (MeshRefCountable)
  {
    v12 = (unsigned int *)(MeshRefCountable + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  return a1;
}

void physx::NpShape::~NpShape(physx::NpShape *this)
{
  uint64_t MeshRefCountable;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)this = off_24ED95A20;
  *((_QWORD *)this + 3) = &unk_24ED95BA0;
  MeshRefCountable = physx::NpShape::getMeshRefCountable(this);
  if (MeshRefCountable)
  {
    v3 = (unsigned int *)(MeshRefCountable + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)MeshRefCountable + 16))(MeshRefCountable);
  }
  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
    v8 = (char *)(*((_QWORD *)this + 8) + 148);
    goto LABEL_13;
  }
  v6 = *((_DWORD *)this + 38);
  if ((v6 - 7) >= 0xFFFFFFFE)
  {
    if (v6 == 5)
      v8 = (char *)this + 224;
    else
      v8 = (char *)this + 200;
LABEL_13:
    v7 = *(unsigned __int16 *)v8;
    if (!v7)
      goto LABEL_28;
    goto LABEL_14;
  }
  v7 = 1;
LABEL_14:
  v9 = 0;
  v10 = v7;
  do
  {
    if ((*((_BYTE *)this + 56) & 2) != 0)
    {
      v13 = *((_QWORD *)this + 8);
      if (*(_WORD *)(v13 + 148) == 1)
        v12 = (char *)(v13 + 144);
      else
        v12 = (char *)(*(_QWORD *)(*((_QWORD *)this + 6) + 7792) + 2 * *(unsigned int *)(v13 + 144));
    }
    else
    {
      v11 = *((_DWORD *)this + 38);
      v12 = (char *)this + 146;
      if ((v11 - 7) >= 0xFFFFFFFE)
      {
        if (v11 == 5)
          v12 = (char *)*((_QWORD *)this + 27);
        else
          v12 = (char *)*((_QWORD *)this + 24);
      }
    }
    v14 = *(_QWORD *)(*(_QWORD *)(physx::NpPhysics::mInstance + 56) + 8 * *(unsigned __int16 *)&v12[2 * v9]);
    v15 = (unsigned int *)(v14 + 32);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24);
    ++v9;
  }
  while (v9 != v10);
LABEL_28:
  physx::Sc::ShapeCore::~ShapeCore((physx::NpShape *)((char *)this + 80));
}

{
  uint64_t v2;

  physx::NpShape::~NpShape(this);
  if (v2)
    (*(void (**)(uint64_t, physx::NpShape *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::NpShape::~NpShape(physx::NpShape *this)
{
  physx::NpShape::~NpShape((physx::NpShape *)((char *)this - 24));
}

{
  char *v1;

  v1 = (char *)this - 24;
  physx::NpShape::~NpShape((physx::NpShape *)((char *)this - 24));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

uint64_t physx::NpShape::onRefCountZero(physx::NpShape *this)
{
  physx::NpFactory::onShapeRelease(physx::NpFactory::mInstance, (uint64_t)this);
  return physx::NpDestroy((uint64_t)this + 48);
}

uint64_t `non-virtual thunk to'physx::NpShape::onRefCountZero(physx::NpShape *this)
{
  physx::NpFactory::onShapeRelease(physx::NpFactory::mInstance, (uint64_t)this - 24);
  return physx::NpDestroy((uint64_t)this + 24);
}

uint64_t physx::NpShape::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::Sc::ShapeCore::exportExtraData(a1 + 80, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 256));
}

uint64_t physx::NpShape::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v5 = (_DWORD *)(result + 152);
  v4 = *(_DWORD *)(result + 152);
  switch(v4)
  {
    case 6:
      v8 = result + 152;
      if ((*(_BYTE *)(result + 56) & 1) != 0)
        v8 = *(_QWORD *)(result + 64) + 64;
      v7 = (_QWORD *)(v8 + 8);
      break;
    case 5:
      v9 = result + 152;
      if ((*(_BYTE *)(result + 56) & 1) != 0)
        v9 = *(_QWORD *)(result + 64) + 64;
      v7 = (_QWORD *)(v9 + 40);
      break;
    case 4:
      v6 = result + 152;
      if ((*(_BYTE *)(result + 56) & 1) != 0)
        v6 = *(_QWORD *)(result + 64) + 64;
      v7 = (_QWORD *)(v6 + 32);
      break;
    default:
      goto LABEL_15;
  }
  if (*v7)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
LABEL_15:
  if ((*(_BYTE *)(v3 + 56) & 2) != 0)
  {
    v11 = (unsigned __int16 *)(*(_QWORD *)(v3 + 64) + 148);
    goto LABEL_22;
  }
  if ((*v5 - 7) >= 0xFFFFFFFE)
  {
    if (*v5 == 5)
      v11 = (unsigned __int16 *)(v3 + 224);
    else
      v11 = (unsigned __int16 *)(v3 + 200);
LABEL_22:
    v10 = *v11;
    if (!v10)
      return result;
    goto LABEL_23;
  }
  v10 = 1;
LABEL_23:
  v12 = 0;
  v13 = v10;
  do
  {
    if ((*(_BYTE *)(v3 + 56) & 2) != 0)
    {
      v15 = *(_QWORD *)(v3 + 64);
      if (*(_WORD *)(v15 + 148) == 1)
        v14 = v15 + 144;
      else
        v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 7792) + 2 * *(unsigned int *)(v15 + 144);
    }
    else
    {
      v14 = v3 + 146;
      if ((*v5 - 7) >= 0xFFFFFFFE)
      {
        if (*v5 == 5)
          v14 = *(_QWORD *)(v3 + 216);
        else
          v14 = *(_QWORD *)(v3 + 192);
      }
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)(physx::NpPhysics::mInstance + 56) + 8 * *(unsigned __int16 *)(v14 + 2 * v12++)));
  }
  while (v13 != v12);
  return result;
}

uint64_t physx::NpShape::getReferenceCount(physx::NpShape *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::NpShape::acquireReference(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t physx::NpShape::release(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 24) + 16))(this + 24);
  return this;
}

uint64_t physx::NpShape::updateSQ(uint64_t this, char *a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;

  v9 = *(_QWORD *)(this + 40);
  if (v9)
  {
    v11 = this;
    v12 = (_BYTE *)((*(_BYTE *)(this + 56) & 0x40) != 0 ? *(_QWORD *)(this + 64) + 52 : this + 144);
    if ((*v12 & 2) != 0)
    {
      v13 = *(unsigned __int16 *)(v9 + 8);
      v14 = (uint64_t *)(v9 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v13 + 18));
      if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
      {
        v16 = 0;
      }
      else
      {
        v15 = *v14;
        if (v15)
          v16 = (int32x2_t *)(v15 - 16);
        else
          v16 = 0;
      }
      v17 = (uint64_t *)(v9 + 40);
      if ((_DWORD)v13 == 5)
        v18 = v17;
      else
        v18 = 0;
      if ((_DWORD)v13 == 6)
        v18 = v17;
      if ((_DWORD)v13 == 13)
        v19 = v17;
      else
        v19 = v18;
      if (!v16)
        goto LABEL_32;
      v20 = *((unsigned __int16 *)v19 + 4);
      v21 = v19;
      if ((_DWORD)v20 != 1)
      {
        if (!*((_WORD *)v19 + 4))
        {
          v23 = 0xFFFFFFFFLL;
LABEL_29:
          v24 = v19 + 2;
          if (*((_WORD *)v19 + 12) != 1)
            v24 = (_QWORD *)*v24;
          this = physx::Sq::SceneQueryManager::markForUpdate(v16 + 1080, *((_DWORD *)v19 + 8), v24[v23], a3);
LABEL_32:
          if (v19[5])
          {
            physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 236, a2, a7, a8, a9, v25);
            return physx::Sq::PruningStructure::invalidate(v19[5], *(_QWORD *)(v11 + 40));
          }
          return this;
        }
        v21 = (uint64_t *)*v19;
      }
      v22 = 0;
      v23 = 0xFFFFFFFFLL;
      while (v21[v22] != this)
      {
        if (v20 == ++v22)
          goto LABEL_29;
      }
      v23 = v22;
      goto LABEL_29;
    }
  }
  return this;
}

uint64_t physx::NpShape::getGeometryType(physx::NpShape *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t physx::NpShape::setGeometry(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t MeshRefCountable;
  int8x8_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  physx::Scb::Base *v16;
  int v17;
  _QWORD *v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  unsigned int *v33;
  unsigned int v34;
  char v35;
  int v36;

  if (*(_DWORD *)a2 != *(_DWORD *)(a1 + 152))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 258, "PxShape::setGeometry(): Invalid geometry type. Changing the type of the shape is not supported.", a6, a7, a8, a9);
  MeshRefCountable = physx::NpShape::getMeshRefCountable((physx::NpShape *)a1);
  if (MeshRefCountable)
  {
    v13 = (unsigned int *)(MeshRefCountable + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)MeshRefCountable + 16))(MeshRefCountable);
  }
  v16 = (physx::Scb::Base *)(a1 + 48);
  v17 = *(_DWORD *)(a1 + 56) >> 30;
  if (v17 == 2)
  {
    v18 = *(_QWORD **)v16;
    if (*(_BYTE *)(*(_QWORD *)v16 + 7689))
      goto LABEL_12;
    goto LABEL_16;
  }
  if (v17 != 3)
  {
    v18 = *(_QWORD **)v16;
    if (!*(_QWORD *)v16)
    {
      v22 = a1 + 80;
      physx::Sc::ShapeCore::setGeometry(a1 + 80, a2);
LABEL_18:
      v24 = *(_QWORD *)(a1 + 40);
      if (v24)
      {
        v36 = 1;
        v35 = 0;
        physx::Sc::RigidCore::onShapeChange((_QWORD *)(v24 + 128), v22, &v36, &v35, 0, v23);
      }
      goto LABEL_20;
    }
LABEL_16:
    v22 = a1 + 80;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v18[232] + 1776) + 96))(*(_QWORD *)(v18[232] + 1776), a1 + 112);
    physx::Sc::ShapeCore::setGeometry(a1 + 80, a2);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v18[232] + 1776) + 88))(*(_QWORD *)(v18[232] + 1776), a1 + 112);
    goto LABEL_18;
  }
  v18 = *(_QWORD **)v16;
LABEL_12:
  physx::Scb::Scene::scheduleForUpdate(v18, v16, v12);
  v20 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v20 | 1;
  v21 = *(_QWORD *)(a1 + 64);
  if (!v21)
  {
    physx::Scb::Scene::getStream(*(_QWORD *)(a1 + 48), HIBYTE(v20) & 0xF);
    *(_QWORD *)(a1 + 64) = v21;
  }
  physx::Gu::GeometryUnion::set(v21 + 64, a2);
LABEL_20:
  v25 = physx::NpShape::getMeshRefCountable((physx::NpShape *)a1);
  if (v25)
  {
    v33 = (unsigned int *)(v25 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  return physx::NpShape::updateSQ(a1, "PxShape::setGeometry: Shape is a part of pruning structure, pruning structure is now invalid!", v32, v26, v27, v28, v29, v30, v31);
}

__n128 physx::NpShape::getGeometry@<Q0>(physx::NpShape *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  __int128 v3;
  __n128 result;

  if ((*((_BYTE *)this + 56) & 1) != 0)
    v2 = (char *)(*((_QWORD *)this + 8) + 64);
  else
    v2 = (char *)this + 152;
  v3 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v3;
  result = *((__n128 *)v2 + 2);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

BOOL physx::NpShape::getBoxGeometry(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  v3 = a1 + 152;
  v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 3)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 64);
      v6 = *(_DWORD *)(v5 + 64);
      v3 = v5 + 64;
      v4 = v6;
    }
    else
    {
      v4 = 3;
    }
    *(_DWORD *)a2 = v4;
    *(_QWORD *)(a2 + 4) = *(_QWORD *)(v3 + 4);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
  }
  return v2 == 3;
}

BOOL physx::NpShape::getSphereGeometry(uint64_t a1, _QWORD *a2)
{
  int v2;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 152);
  v2 = *(_DWORD *)(a1 + 152);
  if (!v2)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
      v3 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 64);
    *a2 = *v3;
  }
  return v2 == 0;
}

BOOL physx::NpShape::getCapsuleGeometry(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 152;
  v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 2)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
      v3 = *(_QWORD *)(a1 + 64) + 64;
    v4 = *(_QWORD *)v3;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)a2 = v4;
  }
  return v2 == 2;
}

BOOL physx::NpShape::getPlaneGeometry(uint64_t a1, int *a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 1)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 64);
    else
      v3 = 1;
    *a2 = v3;
  }
  return v2 == 1;
}

BOOL physx::NpShape::getConvexMeshGeometry(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int16 v7;

  v3 = a1 + 152;
  v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 4)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 64);
      v6 = *(_DWORD *)(v5 + 64);
      v3 = v5 + 64;
      v4 = v6;
    }
    else
    {
      v4 = 4;
    }
    *(_DWORD *)a2 = v4;
    *(_OWORD *)(a2 + 4) = *(_OWORD *)(v3 + 4);
    *(_QWORD *)(a2 + 20) = *(_QWORD *)(v3 + 20);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(v3 + 28);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(v3 + 40);
    v7 = *(_WORD *)(v3 + 41);
    *(_BYTE *)(a2 + 43) = *(_BYTE *)(v3 + 43);
    *(_WORD *)(a2 + 41) = v7;
  }
  return v2 == 4;
}

BOOL physx::NpShape::getTriangleMeshGeometry(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v3 = a1 + 152;
  v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 5)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 64);
      v6 = *(_DWORD *)(v5 + 64);
      v3 = v5 + 64;
      v4 = v6;
    }
    else
    {
      v4 = 5;
    }
    *(_DWORD *)a2 = v4;
    *(_OWORD *)(a2 + 4) = *(_OWORD *)(v3 + 4);
    *(_QWORD *)(a2 + 20) = *(_QWORD *)(v3 + 20);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(v3 + 28);
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(v3 + 32);
    v7 = *(_QWORD *)(v3 + 33);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(a2 + 33) = v7;
  }
  return v2 == 5;
}

BOOL physx::NpShape::getHeightFieldGeometry(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int16 v8;

  v3 = a1 + 152;
  v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 6)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 64);
      v6 = *(_DWORD *)(v5 + 64);
      v3 = v5 + 64;
      v4 = v6;
    }
    else
    {
      v4 = 6;
    }
    *(_DWORD *)a2 = v4;
    v7 = *(_OWORD *)(v3 + 8);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 24);
    *(_OWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(v3 + 28);
    v8 = *(_WORD *)(v3 + 29);
    *(_BYTE *)(a2 + 31) = *(_BYTE *)(v3 + 31);
    *(_WORD *)(a2 + 29) = v8;
  }
  return v2 == 6;
}

uint64_t physx::NpShape::getActor(physx::NpShape *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t physx::NpShape::setLocalPose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  physx::Scb::Base *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v30;
  int v31;

  v10 = (physx::Scb::Base *)(a1 + 48);
  LODWORD(a9) = *(_DWORD *)a2;
  v11 = *(float *)(a2 + 4);
  v12 = *(float *)(a2 + 8);
  v13 = *(float *)(a2 + 12);
  v14 = sqrtf((float)((float)((float)(v11 * v11) + (float)(*(float *)&a9 * *(float *)&a9)) + (float)(v12 * v12))+ (float)(v13 * v13));
  v15 = *(float *)a2 / v14;
  v16 = v11 / v14;
  v17 = v12 / v14;
  v18 = v13 / v14;
  v20 = *(_DWORD *)(a2 + 16);
  v19 = *(_DWORD *)(a2 + 20);
  v21 = *(_DWORD *)(a2 + 24);
  v22 = *(_DWORD *)(a1 + 56);
  v23 = v22 >> 30;
  if (v22 >> 30 == 2)
  {
    v24 = *(_QWORD **)v10;
    if (*(_BYTE *)(*(_QWORD *)v10 + 7689))
      goto LABEL_5;
  }
  else if (v23 == 3)
  {
    v24 = *(_QWORD **)v10;
LABEL_5:
    v25 = *(_QWORD *)(a1 + 64);
    if (!v25)
    {
      *(_QWORD *)&a9 = physx::Scb::Scene::getStream((uint64_t)v24, HIBYTE(v22) & 0xF).n128_u64[0];
      v25 = v26;
      *(_QWORD *)(a1 + 64) = v26;
      v24 = *(_QWORD **)(a1 + 48);
    }
    *(float *)v25 = v15;
    *(float *)(v25 + 4) = v16;
    *(float *)(v25 + 8) = v17;
    *(float *)(v25 + 12) = v18;
    *(_DWORD *)(v25 + 16) = v20;
    *(_DWORD *)(v25 + 20) = v19;
    *(_DWORD *)(v25 + 24) = v21;
    physx::Scb::Scene::scheduleForUpdate(v24, v10, *(int8x8_t *)&a9);
    *(_DWORD *)(a1 + 56) |= 4u;
    return physx::NpShape::updateSQ(a1, "PxShape::setLocalPose: Shape is a part of pruning structure, pruning structure is now invalid!", *(int8x8_t *)&a9, a3, a4, a5, a6, a7, a8);
  }
  v27 = *(_BYTE *)(a1 + 144);
  *(float *)(a1 + 112) = v15;
  *(float *)(a1 + 116) = v16;
  *(float *)(a1 + 120) = v17;
  *(float *)(a1 + 124) = v18;
  *(_DWORD *)(a1 + 128) = v20;
  *(_DWORD *)(a1 + 132) = v19;
  *(_DWORD *)(a1 + 136) = v21;
  v28 = *(_QWORD *)(a1 + 40);
  if (v28 && v23 != 1)
  {
    v31 = 4;
    v30 = v27;
    physx::Sc::RigidCore::onShapeChange((_QWORD *)(v28 + 128), a1 + 80, &v31, &v30, 0, *(int8x8_t *)&a9);
  }
  return physx::NpShape::updateSQ(a1, "PxShape::setLocalPose: Shape is a part of pruning structure, pruning structure is now invalid!", *(int8x8_t *)&a9, a3, a4, a5, a6, a7, a8);
}

float physx::NpShape::getLocalPose@<S0>(physx::NpShape *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  float result;

  if ((*((_BYTE *)this + 56) & 4) != 0)
    v2 = (char *)*((_QWORD *)this + 8);
  else
    v2 = (char *)this + 112;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  result = *((float *)v2 + 6);
  *(float *)(a2 + 24) = result;
  return result;
}

void physx::NpShape::setSimulationFilterData(uint64_t a1, __int128 *a2)
{
  physx::Scb::Base *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  int v16;

  v4 = (physx::Scb::Base *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 56);
  v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    v7 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v6 == 3)
  {
    v7 = *(_QWORD **)v4;
LABEL_5:
    v8 = *(_QWORD *)(a1 + 64);
    if (!v8)
    {
      physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF);
      v8 = v9;
      *(_QWORD *)(a1 + 64) = v9;
      v7 = *(_QWORD **)(a1 + 48);
    }
    v10 = *a2;
    *(_OWORD *)(v8 + 28) = *a2;
    physx::Scb::Scene::scheduleForUpdate(v7, v4, *(int8x8_t *)&v10);
    *(_DWORD *)(a1 + 56) |= 8u;
    return;
  }
  v11 = *(_BYTE *)(a1 + 144);
  v12 = *a2;
  *(_OWORD *)(a1 + 96) = *a2;
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v14 = (_QWORD *)(v13 + 128);
    if (v6 != 1)
    {
      v16 = 8;
      v15 = v11;
      physx::Sc::RigidCore::onShapeChange(v14, a1 + 80, &v16, &v15, 0, *(int8x8_t *)&v12);
    }
  }
}

__n128 physx::NpShape::getSimulationFilterData@<Q0>(physx::NpShape *this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;

  if ((*((_BYTE *)this + 56) & 8) != 0)
    v2 = (__n128 *)(*((_QWORD *)this + 8) + 28);
  else
    v2 = (__n128 *)((char *)this + 96);
  result = *v2;
  *a2 = *v2;
  return result;
}

__n128 physx::NpShape::setQueryFilterData(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[5] = *a2;
  return result;
}

__n128 physx::NpShape::getQueryFilterData@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[5];
  *a2 = result;
  return result;
}

uint64_t physx::NpShape::setMaterials(physx::NpShape *this, physx::PxMaterial *const *a2, unsigned int a3)
{
  unsigned int v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  int8x8_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  physx::PxMaterial *const *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  BOOL v44;
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)this + 14);
  if ((v6 & 2) != 0)
  {
    v9 = (char *)(*((_QWORD *)this + 8) + 148);
  }
  else
  {
    v7 = *((_DWORD *)this + 38);
    if ((v7 - 7) <= 0xFFFFFFFD)
    {
      v44 = 0;
      LODWORD(v8) = 1;
      goto LABEL_10;
    }
    if (v7 == 5)
      v9 = (char *)this + 224;
    else
      v9 = (char *)this + 200;
  }
  v8 = *(unsigned __int16 *)v9;
  v44 = v8 > 0x80;
  if (v8 >= 0x81)
  {
    v10 = (char *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v45, 8 * v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 410);
    v6 = *((_DWORD *)this + 14);
    v12 = 1;
    goto LABEL_11;
  }
LABEL_10:
  MEMORY[0x24BDAC7A8](this);
  v10 = (char *)&v43 - v13;
  bzero((char *)&v43 - v13, v14);
  v12 = 0;
LABEL_11:
  v15 = (char *)this + 48;
  v43 = v10;
  if ((v6 & 2) != 0)
  {
    v19 = *((_QWORD *)this + 8);
    LODWORD(v18) = *(unsigned __int16 *)(v19 + 148);
    if ((_DWORD)v18 == 1)
      v17 = (unsigned __int16 *)(v19 + 144);
    else
      v17 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v15 + 7792) + 2 * *(unsigned int *)(v19 + 144));
  }
  else
  {
    v16 = *((_DWORD *)this + 38);
    if ((v16 - 7) >= 0xFFFFFFFE)
    {
      v20 = v16 == 5;
      v21 = 192;
      if (v20)
        v21 = 216;
      v17 = *(unsigned __int16 **)((char *)this + v21);
      v18 = 200;
      if (v20)
        v18 = 224;
      LODWORD(v18) = *(unsigned __int16 *)((char *)this + v18);
    }
    else
    {
      v17 = (unsigned __int16 *)((char *)this + 146);
      LODWORD(v18) = 1;
    }
  }
  if (v18 >= v8)
    v18 = v8;
  else
    v18 = v18;
  if ((_DWORD)v18)
  {
    v22 = physx::NpPhysics::mInstance;
    v23 = v10;
    do
    {
      v24 = *v17++;
      *(_QWORD *)v23 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v24);
      v23 += 8;
      --v18;
    }
    while (v18);
  }
  if (v6 >> 30 != 3 && (v6 >> 30 != 2 || !*(_BYTE *)(*(_QWORD *)v15 + 7689)))
  {
    result = physx::Scb::Shape::setMaterialsHelper((physx::NpShape *)((char *)this + 48), a2, a3);
    if (!(_DWORD)result)
      goto LABEL_54;
    if (a3)
      goto LABEL_43;
    goto LABEL_47;
  }
  v25 = *((_QWORD *)this + 8);
  if (!v25)
  {
    v11 = (int8x8_t)physx::Scb::Scene::getStream(*((_QWORD *)this + 6), HIBYTE(v6) & 0xF).n128_u64[0];
    v25 = v26;
    *((_QWORD *)this + 8) = v26;
  }
  if (a3 == 1)
  {
    v27 = (_WORD *)(v25 + 144);
    *(_WORD *)(v25 + 148) = 1;
  }
  else
  {
    v29 = *(_QWORD *)v15;
    v30 = *(_QWORD *)v15 + 7792;
    v31 = *(unsigned int *)(*(_QWORD *)v15 + 7800);
    v45 = 0;
    physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::resize(v30, v31 + a3, &v45);
    v32 = *(_QWORD *)(v29 + 7792);
    *(_DWORD *)(v25 + 144) = v31;
    *(_WORD *)(v25 + 148) = a3;
    if (!a3)
      goto LABEL_42;
    v27 = (_WORD *)(v32 + 2 * v31);
  }
  v33 = a3;
  v34 = a2;
  do
  {
    v35 = (uint64_t)*v34++;
    *v27++ = *(_WORD *)(v35 + 72);
    --v33;
  }
  while (v33);
LABEL_42:
  result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(*((_QWORD **)this + 6), (physx::NpShape *)((char *)this + 48), v11);
  *((_DWORD *)this + 14) |= 2u;
  if (a3)
  {
LABEL_43:
    v36 = 0;
    do
    {
      v37 = (unsigned int *)((char *)a2[v36] + 32);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
      ++v36;
    }
    while (v36 != a3);
  }
LABEL_47:
  if (!(_DWORD)v8)
    return result;
  v39 = 0;
  do
  {
    result = *(_QWORD *)&v10[8 * v39];
    v40 = (unsigned int *)(result + 32);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 24) + 16))(result + 24);
    ++v39;
  }
  while (v39 != v8);
LABEL_54:
  if (v12)
    return physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v43, v10);
  return result;
}

uint64_t physx::NpShape::getNbMaterials(physx::NpShape *this)
{
  int v1;
  BOOL v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 56) & 2) != 0)
    return *(unsigned __int16 *)(*((_QWORD *)this + 8) + 148);
  v1 = *((_DWORD *)this + 38);
  if ((v1 - 7) < 0xFFFFFFFE)
    return 1;
  v3 = v1 == 5;
  v4 = 200;
  if (v3)
    v4 = 224;
  return *(unsigned __int16 *)((char *)this + v4);
}

uint64_t physx::NpShape::getMaterials(physx::NpShape *this, physx::PxMaterial **a2, unsigned int a3, int a4)
{
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;

  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
    v7 = *((_QWORD *)this + 8);
    v6 = *(unsigned __int16 *)(v7 + 148);
    if (v6 == 1)
      v5 = (char *)(v7 + 144);
    else
      v5 = (char *)(*(_QWORD *)(*((_QWORD *)this + 6) + 7792) + 2 * *(unsigned int *)(v7 + 144));
  }
  else
  {
    v4 = *((_DWORD *)this + 38);
    if ((v4 - 7) >= 0xFFFFFFFE)
    {
      v8 = v4 == 5;
      v9 = 192;
      if (v8)
        v9 = 216;
      v5 = *(char **)((char *)this + v9);
      v10 = 200;
      if (v8)
        v10 = 224;
      v6 = *(unsigned __int16 *)((char *)this + v10);
    }
    else
    {
      v5 = (char *)this + 146;
      v6 = 1;
    }
  }
  v11 = (v6 - a4) & ~((v6 - a4) >> 31);
  if (v11 >= a3)
    result = a3;
  else
    result = v11;
  if ((_DWORD)result)
  {
    v13 = physx::NpPhysics::mInstance;
    v14 = &v5[2 * a4];
    v15 = result;
    do
    {
      v16 = *(unsigned __int16 *)v14;
      v14 += 2;
      *a2++ = *(physx::PxMaterial **)(*(_QWORD *)(v13 + 56) + 8 * v16);
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t physx::NpShape::getMaterialFromInternalFaceIndex(physx::NpShape *this, int a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t (*v16)(void);
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[20];
  _QWORD v23[2];
  _QWORD *v24;

  v4 = (*(uint64_t (**)(physx::NpShape *))(*(_QWORD *)this + 64))(this);
  v5 = (*(uint64_t (**)(physx::NpShape *))(*(_QWORD *)this + 64))(this);
  v10 = v4 == 6 || v5 == 5;
  if (a2 == -1 && v10)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 447, "PxShape::getMaterialFromInternalFaceIndex received 0xFFFFffff as input - returning NULL.", v6, v7, v8, v21);
    return 0;
  }
  if (v4 == 6)
  {
    v21 = 6;
    *(_QWORD *)&v22[4] = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v22[12] = _D0;
    v23[0] = 1065353216;
    (*(void (**)(physx::NpShape *, int *))(*(_QWORD *)this + 136))(this, &v21);
    v16 = *(uint64_t (**)(void))(**(_QWORD **)&v22[4] + 136);
  }
  else
  {
    if (v5 != 5
      || (v21 = 5,
          *(_OWORD *)v22 = xmmword_2260EDC60,
          *(_DWORD *)&v22[16] = 0,
          LODWORD(v23[0]) = 0,
          *(_QWORD *)((char *)v23 + 4) = 1065353216,
          v24 = 0,
          (*(void (**)(physx::NpShape *, int *))(*(_QWORD *)this + 128))(this, &v21),
          !v24[12]))
    {
      v17 = 0;
      goto LABEL_17;
    }
    v16 = *(uint64_t (**)(void))(*v24 + 112);
  }
  v17 = v16();
LABEL_17:
  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
    v20 = *((_QWORD *)this + 8);
    if (*(_WORD *)(v20 + 148) == 1)
      v19 = (char *)(v20 + 144);
    else
      v19 = (char *)(*(_QWORD *)(*((_QWORD *)this + 6) + 7792) + 2 * *(unsigned int *)(v20 + 144));
  }
  else
  {
    v18 = *((_DWORD *)this + 38);
    if ((v18 - 7) > 0xFFFFFFFD)
    {
      if (v18 == 5)
        v19 = (char *)*((_QWORD *)this + 27);
      else
        v19 = (char *)*((_QWORD *)this + 24);
    }
    else
    {
      v19 = (char *)this + 146;
    }
  }
  return *(_QWORD *)(*(_QWORD *)(physx::NpPhysics::mInstance + 56) + 8 * *(unsigned __int16 *)&v19[2 * v17]);
}

void physx::NpShape::setContactOffset(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  int v14;

  v2 = a2.i32[0];
  v4 = (physx::NpShape *)((char *)this + 48);
  v5 = *((_DWORD *)this + 14);
  v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    v7 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v6 == 3)
  {
    v7 = *(_QWORD **)v4;
LABEL_5:
    v8 = *((_QWORD *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      v8 = v9;
      *((_QWORD *)this + 8) = v9;
      v7 = (_QWORD *)*((_QWORD *)this + 6);
    }
    *(_DWORD *)(v8 + 44) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, v4, a2);
    *((_DWORD *)this + 14) |= 0x10u;
    return;
  }
  v10 = *((_BYTE *)this + 144);
  *((_DWORD *)this + 35) = a2.i32[0];
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    v12 = (_QWORD *)(v11 + 128);
    if (v6 != 1)
    {
      v14 = 16;
      v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getContactOffset(physx::NpShape *this)
{
  char *v1;

  if ((*((_BYTE *)this + 56) & 0x10) != 0)
    v1 = (char *)(*((_QWORD *)this + 8) + 44);
  else
    v1 = (char *)this + 140;
  return *(float *)v1;
}

void physx::NpShape::setRestOffset(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  int v14;

  v2 = a2.i32[0];
  v4 = (physx::NpShape *)((char *)this + 48);
  v5 = *((_DWORD *)this + 14);
  v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    v7 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v6 == 3)
  {
    v7 = *(_QWORD **)v4;
LABEL_5:
    v8 = *((_QWORD *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      v8 = v9;
      *((_QWORD *)this + 8) = v9;
      v7 = (_QWORD *)*((_QWORD *)this + 6);
    }
    *(_DWORD *)(v8 + 48) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, v4, a2);
    *((_DWORD *)this + 14) |= 0x20u;
    return;
  }
  v10 = *((_BYTE *)this + 144);
  *((_DWORD *)this + 60) = a2.i32[0];
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    v12 = (_QWORD *)(v11 + 128);
    if (v6 != 1)
    {
      v14 = 32;
      v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getRestOffset(physx::NpShape *this)
{
  char *v1;

  if ((*((_BYTE *)this + 56) & 0x20) != 0)
    v1 = (char *)(*((_QWORD *)this + 8) + 48);
  else
    v1 = (char *)this + 240;
  return *(float *)v1;
}

void physx::NpShape::setTorsionalPatchRadius(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  int v14;

  v2 = a2.i32[0];
  v4 = (physx::NpShape *)((char *)this + 48);
  v5 = *((_DWORD *)this + 14);
  v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    v7 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v6 == 3)
  {
    v7 = *(_QWORD **)v4;
LABEL_5:
    v8 = *((_QWORD *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      v8 = v9;
      *((_QWORD *)this + 8) = v9;
      v7 = (_QWORD *)*((_QWORD *)this + 6);
    }
    *(_DWORD *)(v8 + 56) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, v4, a2);
    *((_DWORD *)this + 14) |= 0x80u;
    return;
  }
  v10 = *((_BYTE *)this + 144);
  *((_DWORD *)this + 61) = a2.i32[0];
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    v12 = (_QWORD *)(v11 + 128);
    if (v6 != 1)
    {
      v14 = 128;
      v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getTorsionalPatchRadius(physx::NpShape *this)
{
  char *v1;

  if ((*((_BYTE *)this + 56) & 0x80) != 0)
    v1 = (char *)(*((_QWORD *)this + 8) + 56);
  else
    v1 = (char *)this + 244;
  return *(float *)v1;
}

void physx::NpShape::setMinTorsionalPatchRadius(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  int v14;

  v2 = a2.i32[0];
  v4 = (physx::NpShape *)((char *)this + 48);
  v5 = *((_DWORD *)this + 14);
  v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    v7 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v6 == 3)
  {
    v7 = *(_QWORD **)v4;
LABEL_5:
    v8 = *((_QWORD *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      v8 = v9;
      *((_QWORD *)this + 8) = v9;
      v7 = (_QWORD *)*((_QWORD *)this + 6);
    }
    *(_DWORD *)(v8 + 60) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, v4, a2);
    *((_DWORD *)this + 14) |= 0x100u;
    return;
  }
  v10 = *((_BYTE *)this + 144);
  *((_DWORD *)this + 62) = a2.i32[0];
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    v12 = (_QWORD *)(v11 + 128);
    if (v6 != 1)
    {
      v14 = 256;
      v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getMinTorsionalPatchRadius(physx::NpShape *this)
{
  char *v1;

  if ((*((_BYTE *)this + 57) & 1) != 0)
    v1 = (char *)(*((_QWORD *)this + 8) + 60);
  else
    v1 = (char *)this + 248;
  return *(float *)v1;
}

void physx::NpShape::setFlagsInternal(uint64_t a1, char *a2, float32x4_t a3, int8x16_t a4, double a5, double a6, double a7, double a8, double a9, int32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned int v17;
  int v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int16 *v27;
  int v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned __int16 *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  physx::Sq::SceneQueryManager *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char v55;
  uint64_t v56;

  v17 = *(_DWORD *)(a1 + 152) - 7;
  v18 = *a2;
  if (v17 >= 0xFFFFFFFE && (v18 & 4) != 0)
  {
    v20 = "PxShape::setFlag(s): triangle mesh and heightfield triggers are not supported!";
    v21 = physx::shdfnd::Foundation::mInstance;
    v22 = 545;
LABEL_8:
    physx::shdfnd::Foundation::error(v21, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", v22, v20, a14, a15, a16, a17);
    return;
  }
  if ((~v18 & 5) == 0)
  {
    v20 = "PxShape::setFlag(s): shapes cannot simultaneously be trigger shapes and simulation shapes.";
    v21 = physx::shdfnd::Foundation::mInstance;
    v22 = 552;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x40) != 0)
    v25 = (unsigned __int8 *)(*(_QWORD *)(a1 + 64) + 52);
  else
    v25 = (unsigned __int8 *)(a1 + 144);
  v26 = *v25;
  v27 = *(unsigned __int16 **)(a1 + 40);
  if (v27)
  {
    v28 = v27[4];
    if (v28 == 5)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v27 + 432))(&v56);
      v29 = v56 & 1;
    }
    else
    {
      v29 = 0;
    }
    if ((v18 & 1) != 0
      && v28 != 6
      && (v29 & 1) == 0
      && (v26 & 1) == 0
      && (v17 > 0xFFFFFFFD || *(_DWORD *)(a1 + 152) == 1))
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 576, "PxShape::setFlag(s): triangle mesh, heightfield and plane shapes can only be simulation shapes if part of a PxRigidStatic!", a14, a15, a16, v55);
      return;
    }
  }
  v30 = a1 + 48;
  v31 = *a2;
  v32 = *(_DWORD *)(a1 + 56);
  v33 = v32 >> 30;
  if (v32 >> 30 == 2)
  {
    v34 = *(_QWORD **)v30;
    if (*(_BYTE *)(*(_QWORD *)v30 + 7689))
      goto LABEL_27;
  }
  else if (v33 == 3)
  {
    v34 = *(_QWORD **)v30;
LABEL_27:
    v35 = *(_QWORD *)(a1 + 64);
    if (!v35)
    {
      a3.i64[0] = physx::Scb::Scene::getStream((uint64_t)v34, HIBYTE(v32) & 0xF).n128_u64[0];
      v35 = v36;
      *(_QWORD *)(a1 + 64) = v36;
      v34 = *(_QWORD **)(a1 + 48);
    }
    *(_BYTE *)(v35 + 52) = v31;
    physx::Scb::Scene::scheduleForUpdate(v34, (physx::Scb::Base *)(a1 + 48), *(int8x8_t *)a3.f32);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    goto LABEL_33;
  }
  v37 = *(_BYTE *)(a1 + 144);
  *(_BYTE *)(a1 + 144) = v31;
  v38 = *(_QWORD *)(a1 + 40);
  if (v38)
  {
    v39 = (_QWORD *)(v38 + 128);
    if (v33 != 1)
    {
      *(_DWORD *)((char *)&v56 + 2) = 64;
      BYTE1(v56) = v37;
      physx::Sc::RigidCore::onShapeChange(v39, a1 + 80, (int *)((char *)&v56 + 2), (char *)&v56 + 1, 0, *(int8x8_t *)a3.f32);
    }
  }
LABEL_33:
  if (((v26 >> 1) & 1) != (v31 & 2) >> 1)
  {
    v40 = *(unsigned __int16 **)(a1 + 40);
    if (v40)
    {
      v41 = v40[4];
      v42 = (char *)v40 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v41 + 18);
      if (((*((_DWORD *)v42 + 2) >> 30) - 1) > 1)
      {
        v44 = 0;
      }
      else
      {
        v43 = *(_QWORD *)v42;
        if (v43)
          v44 = v43 - 16;
        else
          v44 = 0;
      }
      if ((_DWORD)v41 == 5)
        v45 = v40 + 20;
      else
        v45 = 0;
      if ((_DWORD)v41 == 6)
        v45 = v40 + 20;
      if ((_DWORD)v41 == 13)
        v46 = v40 + 20;
      else
        v46 = v45;
      if (!v44)
        goto LABEL_72;
      v47 = (physx::Sq::SceneQueryManager *)(v44 + 8640);
      v48 = v46[4];
      v49 = v46;
      if ((v31 & 2) != 0)
      {
        if ((_DWORD)v48 != 1)
        {
          if (!v46[4])
          {
LABEL_56:
            LODWORD(v50) = -1;
LABEL_57:
            physx::NpShapeManager::setupSceneQuery((physx::NpShapeManager *)v46, v47, (const physx::PxRigidActor *)v40, v50, a3, a4, a5, a6, a7, a8, a9, a10, a13, a14, a15, a16);
LABEL_72:
            if (*((_QWORD *)v46 + 5))
            {
              physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 602, "PxShape::setFlag: Shape is a part of pruning structure, pruning structure is now invalid!", a14, a15, a16, v55);
              physx::Sq::PruningStructure::invalidate(*((_QWORD *)v46 + 5), *(_QWORD *)(a1 + 40));
            }
            return;
          }
          v49 = *(unsigned __int16 **)v46;
        }
        v50 = 0;
        while (*(_QWORD *)&v49[4 * v50] != a1)
        {
          if (v48 == ++v50)
            goto LABEL_56;
        }
        goto LABEL_57;
      }
      if ((_DWORD)v48 != 1)
      {
        if (!v46[4])
        {
          v52 = 0xFFFFFFFFLL;
LABEL_67:
          v53 = v46 + 8;
          v54 = v46 + 8;
          if (v46[12] != 1)
            v54 = (_QWORD *)*v53;
          physx::Sq::SceneQueryManager::removePrunerShape(v47, *((unsigned int *)v46 + 8), v54[v52]);
          if (v46[12] != 1)
            v53 = (_QWORD *)*v53;
          v53[v52] = 0xFFFFFFFFLL;
          goto LABEL_72;
        }
        v49 = *(unsigned __int16 **)v46;
      }
      v51 = 0;
      v52 = 0xFFFFFFFFLL;
      while (*(_QWORD *)&v49[4 * v51] != a1)
      {
        if (v48 == ++v51)
          goto LABEL_67;
      }
      v52 = v51;
      goto LABEL_67;
    }
  }
}

void physx::NpShape::setFlag(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  char *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  if ((*(_BYTE *)(a1 + 56) & 0x40) != 0)
    v16 = (char *)(*(_QWORD *)(a1 + 64) + 52);
  else
    v16 = (char *)(a1 + 144);
  v17 = *v16;
  v18 = v17 | a2;
  v19 = v17 & ~a2;
  if ((_DWORD)a3)
    v19 = v18;
  v21 = v19;
  physx::NpShape::setFlagsInternal(a1, &v21, a9, a10, a11, a12, a13, a14, a15, a16, a3, a4, a5, a6, a7, a8, v20);
}

void physx::NpShape::setFlags(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  char v16;
  char v17;

  v17 = *a2;
  physx::NpShape::setFlagsInternal(a1, &v17, a9, a10, a11, a12, a13, a14, a15, a16, a3, a4, a5, a6, a7, a8, v16);
}

uint64_t physx::NpShape::getFlags@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  if ((*(_BYTE *)(this + 56) & 0x40) != 0)
    v2 = (_BYTE *)(*(_QWORD *)(this + 64) + 52);
  else
    v2 = (_BYTE *)(this + 144);
  *a2 = *v2;
  return this;
}

uint64_t physx::NpShape::isExclusive(physx::NpShape *this)
{
  return *((_DWORD *)this + 66) >> 31;
}

uint64_t physx::NpShape::setName(uint64_t this, const char *a2)
{
  *(_QWORD *)(this + 256) = a2;
  return this;
}

uint64_t physx::NpShape::getName(physx::NpShape *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t physx::NpShape::getMeshRefCountable(physx::NpShape *this)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;

  v1 = (_QWORD *)((char *)this + 152);
  v2 = *((_DWORD *)this + 38);
  switch(v2)
  {
    case 6:
      if ((*((_BYTE *)this + 56) & 1) != 0)
        v1 = (_QWORD *)(*((_QWORD *)this + 8) + 64);
      v3 = v1[1];
      break;
    case 5:
      if ((*((_BYTE *)this + 56) & 1) != 0)
        v1 = (_QWORD *)(*((_QWORD *)this + 8) + 64);
      v3 = v1[5];
      break;
    case 4:
      if ((*((_BYTE *)this + 56) & 1) != 0)
        v1 = (_QWORD *)(*((_QWORD *)this + 8) + 64);
      v3 = v1[4];
      break;
    default:
      return 0;
  }
  if (v3)
    return v3 + 16;
  else
    return 0;
}

uint64_t physx::NpShapeManager::exportExtraData(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  if (*(unsigned __int16 *)(result + 8) >= 2u)
  {
    v3 = result;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)v3, 8 * *(unsigned __int16 *)(v3 + 8));
    v4 = *(unsigned __int16 *)(v3 + 8);
    if (v4 >= 2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
      do
      {
        v5 = 0xFFFFFFFFLL;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v5, 8);
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t physx::NpShapeManager::importExtraData(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(unsigned __int16 *)(result + 8);
  if (v2 >= 2)
  {
    v3 = (*(_QWORD *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a2 + 8) = v3 + 8 * v2;
    *(_QWORD *)result = v3;
  }
  v4 = *(unsigned __int16 *)(result + 24);
  if (v4 >= 2)
  {
    v5 = (*(_QWORD *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a2 + 8) = v5 + 8 * v4;
    *(_QWORD *)(result + 16) = v5;
  }
  return result;
}

uint64_t physx::NpShapeManager::attachShape(physx::NpShapeManager *this, physx::NpShape *a2, physx::PxRigidActor *a3)
{
  uint64_t (***v6)(_QWORD, uint64_t);
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int8x16_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t result;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v6 = *(uint64_t (****)(_QWORD, uint64_t))(physx::NpFactory::mInstance + 832);
  v7 = *((unsigned __int16 *)this + 4);
  physx::Cm::PtrTable::add((uint64_t)this, (uint64_t)a2, v6);
  physx::Cm::PtrTable::add((uint64_t)this + 16, 0xFFFFFFFFLL, v6);
  v20 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
  if (((*(_DWORD *)((char *)a3 + v20 + 8) >> 30) - 1) <= 1)
  {
    v21 = *(_QWORD *)((char *)a3 + v20);
    if (v21)
    {
      v22 = (_BYTE *)(*((_QWORD *)a2 + 8) + 52);
      if ((*((_BYTE *)a2 + 56) & 0x40) == 0)
        v22 = (char *)a2 + 144;
      if ((*v22 & 2) != 0)
      {
        physx::NpShapeManager::setupSceneQuery(this, (physx::Sq::SceneQueryManager *)(v21 + 8624), a3, v7, v12, v13, v14, v15, v16, v17, v18, v19, v8, v9, v10, v11);
        v20 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
      }
    }
  }
  result = physx::Scb::RigidObject::onShapeAttach((uint64_t)a3 + v20, (physx::NpShape *)((char *)a2 + 48), *(int8x8_t *)v12.f32);
  v24 = (unsigned int *)((char *)a2 + 32);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  if ((*((_DWORD *)a2 + 66) & 0x80000000) != 0)
    *((_QWORD *)a2 + 5) = a3;
  v26 = (unsigned int *)((char *)a2 + 264);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  return result;
}

uint64_t physx::NpShapeManager::setupSceneQuery(physx::NpShapeManager *this, physx::Sq::SceneQueryManager *a2, const physx::PxRigidActor *a3, unsigned int a4, float32x4_t a5, int8x16_t a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  physx::NpShapeManager *v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  v17 = this;
  if (*((_WORD *)this + 4) != 1)
    v17 = *(physx::NpShapeManager **)this;
  v18 = a4;
  result = physx::Sq::SceneQueryManager::addPrunerShape((uint64_t)a2, *((_QWORD *)v17 + a4) + 48, (uint64_t)a3 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18), (*((_WORD *)a3 + 4) & 0xFFF7) == 5, *((unsigned int *)this + 8), 0, 0, a16, a5, a6, a7, a8, a9, a10, a11, a12);
  v20 = (_QWORD *)((char *)this + 16);
  if (*((_WORD *)this + 12) != 1)
    v20 = (_QWORD *)*v20;
  v20[v18] = result;
  return result;
}

uint64_t physx::Scb::RigidObject::onShapeAttach(uint64_t this, physx::Scb::Shape *a2, int8x8_t a3)
{
  unint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  physx::Scb::Shape **v10;
  _BYTE *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  physx::Scb::Shape *v23;

  v3 = *(unsigned int *)(this + 8);
  if (v3 >> 30)
  {
    v5 = (_DWORD *)this;
    v6 = *(_QWORD *)this;
    if (*(_BYTE *)(*(_QWORD *)this + 7689))
    {
      if (v3 >> 30 != 1)
      {
        v7 = *(_QWORD *)(this + 16);
        if (!v7)
        {
          a3 = (int8x8_t)physx::Scb::Scene::getStream(v6, BYTE3(v3) & 0xF).n128_u64[0];
          *((_QWORD *)v5 + 2) = v7;
        }
        v8 = *(unsigned int *)(v7 + 144);
        if ((_DWORD)v8)
        {
          v9 = 0;
          v10 = *(physx::Scb::Shape ***)(v7 + 136);
          while (*v10 != a2)
          {
            ++v9;
            v10 += 2;
            if (v8 == v9)
              goto LABEL_23;
          }
        }
        else
        {
          LODWORD(v9) = 0;
        }
        if ((_DWORD)v9 == (_DWORD)v8)
        {
LABEL_23:
          v23 = a2;
          v17 = *(unsigned int *)(v7 + 56);
          if ((*(_DWORD *)(v7 + 60) & 0x7FFFFFFFu) <= v17)
          {
            physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::growAndPushBack(v7 + 8, &v23);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = a2;
            *(_DWORD *)(v7 + 56) = v17 + 1;
          }
        }
        else
        {
          v18 = *(_QWORD *)(v7 + 136);
          v19 = v8 - 1;
          *(_DWORD *)(v7 + 144) = v19;
          v20 = (uint64_t *)(v18 + 16 * v19);
          v21 = *v20;
          v22 = v18 + 16 * v9;
          *(_BYTE *)(v22 + 8) = *((_BYTE *)v20 + 8);
          *(_QWORD *)v22 = v21;
        }
        this = (uint64_t)physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)v5, (physx::Scb::Base *)v5, a3);
        v5[2] |= 8u;
      }
      v15 = *((_DWORD *)a2 + 2);
      if ((v15 & 0xF000000) == 0x1000000)
      {
        v16 = 0x40000000;
        goto LABEL_30;
      }
    }
    else
    {
      if ((v3 & 1) != 0)
        v11 = *(_BYTE **)(this + 16);
      else
        v11 = (_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + this + 12);
      if ((*v11 & 8) == 0)
      {
        v12 = (unsigned int *)((char *)a2 - 16);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        v14 = *(uint64_t **)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(this + 11) & 0xF) + 3) + this);
        if (v14)
          this = physx::Sc::Scene::addShape(v14[9], (physx::Sc::RigidSim *)v14, (physx::Scb::Shape *)((char *)a2 + 32), 0);
      }
      v15 = *((_DWORD *)a2 + 2);
      if ((v15 & 0xF000000) == 0x1000000)
      {
        v16 = 0x80000000;
LABEL_30:
        *((_DWORD *)a2 + 2) = v15 & 0x3FFFFFFF | v16;
        *(_QWORD *)a2 = v6;
      }
    }
  }
  return this;
}

uint64_t physx::NpShapeManager::detachShape(physx::NpShapeManager *this, physx::NpShape *a2, physx::PxRigidActor *a3, char a4, int8x8_t a5)
{
  uint64_t v9;
  physx::NpShapeManager *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  physx::Sq::SceneQueryManager *v15;
  _QWORD *v16;
  int v17;
  physx::Scb::RigidObject *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  v9 = *((unsigned __int16 *)this + 4);
  v10 = this;
  if ((_DWORD)v9 != 1)
  {
    if (!*((_WORD *)this + 4))
      return 0;
    v10 = *(physx::NpShapeManager **)this;
  }
  v11 = 0;
  while (*((physx::NpShape **)v10 + v11) != a2)
  {
    if (v9 == ++v11)
      return 0;
  }
  if ((_DWORD)v11 == -1)
    return 0;
  v12 = (char *)a3 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
  if (((*((_DWORD *)v12 + 2) >> 30) - 1) <= 1)
  {
    v13 = *(_QWORD *)v12;
    if (v13)
    {
      v14 = (_BYTE *)(*((_QWORD *)a2 + 8) + 52);
      if ((*((_BYTE *)a2 + 56) & 0x40) == 0)
        v14 = (char *)a2 + 144;
      if ((*v14 & 2) != 0)
      {
        v15 = (physx::Sq::SceneQueryManager *)(v13 + 8624);
        v16 = (_QWORD *)((char *)this + 16);
        if (*((_WORD *)this + 12) != 1)
          v16 = (_QWORD *)*v16;
        physx::Sq::SceneQueryManager::removePrunerShape(v15, *((unsigned int *)this + 8), v16[v11]);
        if (*((_DWORD *)this + 8) != -1 && *((_WORD *)this + 4) == 1)
        {
          *((_DWORD *)this + 8) = -1;
          v17 = *((unsigned __int16 *)a3 + 4);
          if ((v17 & 0xFFFFFFF7) == 5 && (v17 == 13 || v17 == 5))
            physx::Sc::BodySim::disableCompound(*((_QWORD *)a3 + 16));
        }
      }
    }
  }
  v18 = (physx::PxRigidActor *)((char *)a3
                              + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18));
  v19 = (unsigned int *)((char *)a2 + 32);
  physx::Scb::RigidObject::onShapeDetach(v18, (physx::NpShape *)((char *)a2 + 48), a4, *((_DWORD *)a2 + 8) == 1, a5);
  v20 = *(_QWORD *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::replaceWithLast((uint64_t)this, v11, v20);
  physx::Cm::PtrTable::replaceWithLast((uint64_t)this + 16, v11, v20);
  v21 = (unsigned int *)((char *)a2 + 264);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if ((*v21 & 0x80000000) != 0)
    *((_QWORD *)a2 + 5) = 0;
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (v23 == 1)
    (*(void (**)(char *))(*((_QWORD *)a2 + 3) + 16))((char *)a2 + 24);
  return 1;
}

void physx::Scb::RigidObject::onShapeDetach(physx::Scb::RigidObject *this, physx::Scb::Shape *a2, char a3, int a4, int8x8_t a5)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  __int128 v28;

  v5 = *((unsigned int *)this + 2);
  if (v5 >> 30)
  {
    v9 = *(_QWORD *)this;
    if (*(_BYTE *)(*(_QWORD *)this + 7689))
    {
      if (v5 >> 30 != 1)
      {
        v11 = *((_QWORD *)this + 2);
        if (!v11)
        {
          a5 = (int8x8_t)physx::Scb::Scene::getStream(v9, BYTE3(v5) & 0xF).n128_u64[0];
          *((_QWORD *)this + 2) = v11;
          LODWORD(v5) = *((_DWORD *)this + 2);
        }
        if ((v5 & 0x20) != 0)
        {
          v12 = *(_DWORD *)(v11 + 160);
          if (v12 == 1)
          {
            if (*(physx::Scb::Shape **)(v11 + 152) != a2)
              goto LABEL_31;
            goto LABEL_29;
          }
          if (!v12)
          {
LABEL_29:
            *(_DWORD *)(v11 + 160) = 0;
LABEL_30:
            *(_QWORD *)(v11 + 152) = 0;
            *((_DWORD *)this + 2) &= ~0x20u;
            goto LABEL_31;
          }
          v18 = 0;
          v19 = (_QWORD *)(*(_QWORD *)(v9 + 7808) + 8 * *(unsigned int *)(v11 + 152));
          v20 = *(_DWORD *)(v11 + 160);
          do
          {
            if ((physx::Scb::Shape *)v19[v18] == a2)
              v19[v18] = v19[--v20];
            else
              ++v18;
            --v12;
          }
          while (v12);
          *(_DWORD *)(v11 + 160) = v18;
          if (!v18)
            goto LABEL_30;
          if (v18 == 1)
            *(_QWORD *)(v11 + 152) = *v19;
        }
LABEL_31:
        v21 = *(unsigned int *)(v11 + 56);
        if ((_DWORD)v21)
        {
          v22 = 0;
          while (*(physx::Scb::Shape **)(*(_QWORD *)(v11 + 48) + 8 * v22) != a2)
          {
            if (v21 == ++v22)
              goto LABEL_38;
          }
        }
        else
        {
          LODWORD(v22) = 0;
        }
        if ((_DWORD)v22 != (_DWORD)v21)
        {
          v23 = *(_QWORD *)(v11 + 48);
          v24 = v21 - 1;
          *(_DWORD *)(v11 + 56) = v24;
          *(_QWORD *)(v23 + 8 * v22) = *(_QWORD *)(v23 + 8 * v24);
          v25 = *((_DWORD *)a2 + 2);
          if ((v25 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)a2 + 2) = v25 & 0x3FFFFFFF | 0x80000000;
LABEL_51:
            *(_QWORD *)a2 = v9;
          }
LABEL_52:
          physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)this, this, a5);
          *((_DWORD *)this + 2) |= 8u;
          return;
        }
LABEL_38:
        if ((*((_BYTE *)this
              + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)this + 11) & 0xF) + 3)
              + 12) & 8) != 0)
        {
          if (a4)
          {
            if ((*((_BYTE *)a2 + 11) & 0x10) != 0)
            {
              *(_QWORD *)&v28 = a2;
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v9 + 7736, (uint64_t *)&v28);
              *((_DWORD *)a2 + 2) &= ~0x10000000u;
            }
LABEL_49:
            v27 = *((_DWORD *)a2 + 2);
            if ((v27 & 0xF000000) == 0x1000000)
            {
              *((_DWORD *)a2 + 2) = v27 | 0xC0000000;
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          *(_QWORD *)&v28 = a2;
          BYTE8(v28) = 0;
        }
        else
        {
          *(_QWORD *)&v28 = a2;
          BYTE8(v28) = a3;
        }
        v26 = *(unsigned int *)(v11 + 144);
        if ((*(_DWORD *)(v11 + 148) & 0x7FFFFFFFu) <= v26)
        {
          physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::growAndPushBack(v11 + 64, &v28);
        }
        else
        {
          a5 = *(int8x8_t *)&v28;
          *(_OWORD *)(*(_QWORD *)(v11 + 136) + 16 * v26) = v28;
          ++*(_DWORD *)(v11 + 144);
        }
        goto LABEL_49;
      }
    }
    else
    {
      if ((v5 & 1) != 0)
        v13 = (_BYTE *)*((_QWORD *)this + 2);
      else
        v13 = (char *)this + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3) + 12;
      if ((*v13 & 8) == 0)
      {
        physx::Sc::RigidCore::removeShapeFromScene((physx::Scb::RigidObject *)((char *)this+ *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3)), (physx::Scb::Shape *)((char *)a2 + 32), a3);
        v14 = (unsigned int *)((char *)a2 - 16);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(char *))(*((_QWORD *)a2 - 3) + 16))((char *)a2 - 24);
      }
    }
    v17 = *((_DWORD *)a2 + 2);
    if ((v17 & 0xF000000) == 0x1000000)
    {
      *((_DWORD *)a2 + 2) = v17 & 0x3FFFFFFF;
      *(_QWORD *)a2 = 0;
    }
  }
}

uint64_t physx::NpShapeManager::detachAll(physx::NpShapeManager *this, physx::NpScene *a2, const physx::PxRigidActor *a3)
{
  uint64_t v4;
  physx::NpShapeManager *v5;
  uint64_t i;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *((unsigned __int16 *)this + 4);
  v5 = this;
  if ((_DWORD)v4 != 1)
    v5 = *(physx::NpShapeManager **)this;
  if (a2)
    physx::NpShapeManager::teardownAllSceneQuery((uint64_t)this, (physx::NpScene *)((char *)a2 + 8640), a3);
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v7 = *((_QWORD *)v5 + i);
      v8 = (unsigned int *)(v7 + 264);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if ((*v8 & 0x80000000) != 0)
        *(_QWORD *)(v7 + 40) = 0;
      v10 = (unsigned int *)(v7 + 32);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24);
    }
  }
  v13 = *(_QWORD *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)this, v13);
  return physx::Cm::PtrTable::clear((uint64_t)this + 16, v13);
}

void physx::NpShapeManager::getWorldBounds(physx::NpShapeManager *this@<X0>, const physx::PxRigidActor *a2@<X1>, uint64_t a3@<X8>)
{
  physx::NpShapeManager *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  int8x16_t v11;
  double v12;
  int8x16_t v13;
  double v14;
  double v15;
  double v16;
  int32x4_t v17;
  float32x2_t v18;
  physx::NpShapeManager *v19;
  int v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int16x4_t v30;
  float32x4_t v31;
  float v32[7];
  float32x4_t v33;
  int8x8_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;

  v3 = this;
  v31 = (float32x4_t)xmmword_2261A6E10;
  *(_OWORD *)a3 = xmmword_2261A6E10;
  *(int32x2_t *)(a3 + 16) = vdup_n_s32(0xFE7FFFFF);
  v5 = *((unsigned __int16 *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, const physx::PxRigidActor *))(*(_QWORD *)a2 + 152))(&v35, a2);
  if (*((_WORD *)v3 + 4) != 1)
    v3 = *(physx::NpShapeManager **)v3;
  if ((_DWORD)v5)
  {
    v18 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
    do
    {
      v19 = *(physx::NpShapeManager **)v3;
      v20 = *(_DWORD *)(*(_QWORD *)v3 + 56);
      if ((v20 & 1) != 0)
      {
        v21 = *((_QWORD *)v19 + 8) + 64;
        if ((v20 & 4) == 0)
        {
LABEL_9:
          v22 = (float *)((char *)v19 + 112);
          goto LABEL_10;
        }
      }
      else
      {
        v21 = (uint64_t)v19 + 152;
        if ((v20 & 4) == 0)
          goto LABEL_9;
      }
      v22 = (float *)*((_QWORD *)v19 + 8);
LABEL_10:
      v10.f32[0] = v22[4] + v22[4];
      *(float *)v11.i32 = v22[5] + v22[5];
      *(float *)&v12 = v22[6] + v22[6];
      *(float *)&v14 = v36;
      *(float *)&v15 = (float)(v37 * v37) + -0.5;
      v17.i32[0] = HIDWORD(v35);
      v23 = (float)((float)(*(float *)v11.i32 * *((float *)&v35 + 1)) + (float)(*(float *)&v35 * v10.f32[0]))
          + (float)(v36 * *(float *)&v12);
      v24 = (float)((float)(v37
                          * (float)((float)(*((float *)&v35 + 1) * *(float *)&v12) - (float)(v36 * *(float *)v11.i32)))
                  + (float)(v10.f32[0] * *(float *)&v15))
          + (float)(*(float *)&v35 * v23);
      v25 = (float)((float)(v37 * (float)((float)(v36 * v10.f32[0]) - (float)(*(float *)&v35 * *(float *)&v12)))
                  + (float)(*(float *)v11.i32 * *(float *)&v15))
          + (float)(*((float *)&v35 + 1) * v23);
      v10.f32[0] = (float)((float)(v37
                                 * (float)((float)(*(float *)&v35 * *(float *)v11.i32)
                                         - (float)(*((float *)&v35 + 1) * v10.f32[0])))
                         + (float)(*(float *)&v12 * *(float *)&v15))
                 + (float)(v36 * v23);
      *(float *)&v12 = v39 + v25;
      v26 = v22[2];
      *(float *)&v15 = v22[3];
      v27 = v22[1];
      v28 = (float)((float)((float)(*((float *)&v35 + 1) * *(float *)&v15) + (float)(v37 * v27)) + (float)(v36 * *v22))
          - (float)(v26 * *(float *)&v35);
      v29 = (float)((float)((float)(v36 * *(float *)&v15) + (float)(v37 * v26)) + (float)(*(float *)&v35 * v27))
          - (float)(*v22 * *((float *)&v35 + 1));
      *(float *)&v16 = -(float)(*(float *)&v35 * *v22);
      *(float *)v13.i32 = (float)((float)((float)(v37 * *(float *)&v15) - (float)(*(float *)&v35 * *v22))
                                - (float)(*((float *)&v35 + 1) * v27))
                        - (float)(v36 * v26);
      v32[0] = (float)((float)((float)(*(float *)&v35 * *(float *)&v15) + (float)(v37 * *v22))
                     + (float)(*((float *)&v35 + 1) * v26))
             - (float)(v27 * v36);
      v32[1] = v28;
      v32[2] = v29;
      v32[3] = *(float *)v13.i32;
      v32[4] = v38 + v24;
      v32[5] = v39 + v25;
      v32[6] = v40 + v10.f32[0];
      v10.i32[0] = 0;
      v11.i32[0] = 1.0;
      physx::Gu::computeBounds((float32x2_t *)&v33, v21, (uint64_t)v32, 0, v10, v11, v12, *(double *)v13.i64, v14, v15, v16, v17, v6, v7, v8, v9, v31.i8[0]);
      v10.i64[1] = v33.i64[1];
      v30 = vmovn_s32(vcgtq_f32(v33, v31));
      v12 = COERCE_DOUBLE(vmovn_s32(vcgtq_f32(v31, v33)));
      v30.i16[3] = HIWORD(v12);
      v11 = (int8x16_t)vmovl_s16(v30);
      v13 = vbslq_s8(v11, (int8x16_t)v31, (int8x16_t)v33);
      v31 = (float32x4_t)v13;
      *(int8x16_t *)a3 = v13;
      v10.i32[1] = v34.i32[1];
      *(int32x2_t *)v11.i8 = vcgt_f32(v18, (float32x2_t)v34);
      v18 = (float32x2_t)vbsl_s8(*(int8x8_t *)v11.i8, (int8x8_t)v18, v34);
      *(float32x2_t *)(a3 + 16) = v18;
      v3 = (physx::NpShapeManager *)((char *)v3 + 8);
      --v5;
    }
    while (v5);
  }
}

uint64_t physx::NpShapeManager::clearShapesOnRelease(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned __int16 *)(result + 8);
  if ((_DWORD)v3 != 1)
  {
    if (!*(_WORD *)(result + 8))
      return result;
    v2 = *(_QWORD *)result;
  }
  v4 = a2 + 7736;
  do
  {
    v5 = *(_QWORD *)v2;
    if ((*(_BYTE *)(*(_QWORD *)v2 + 59) & 0x10) != 0)
    {
      v6 = v5 + 48;
      result = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4, &v6);
      *(_DWORD *)(v5 + 56) &= ~0x10000000u;
    }
    v2 += 8;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t physx::NpShapeManager::addBVHStructureShapes(physx::NpShapeManager *this, physx::Sq::SceneQueryManager *a2, const physx::PxRigidActor *a3, const physx::Gu::BVHStructure *a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  char *v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  physx::NpShapeManager *v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  unsigned int v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  int v26;
  physx::NpShapeManager *v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  const physx::Gu::BVHStructure *v32;
  _QWORD v33[3];
  char *v34;
  BOOL v35;
  _QWORD *v36;
  BOOL v37;
  uint64_t v38;

  v32 = a4;
  v38 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
  v8 = (char *)a3 + v7;
  v9 = *((unsigned __int16 *)this + 4);
  v10 = 8 * v9;
  v37 = v9 > 0x80;
  if (v9 < 0x81)
  {
    v14 = v10;
    MEMORY[0x24BDAC7A8](this);
    v11 = (const physx::Gu::BVHStructure **)((char *)&v32 - ((v10 + 15) & 0xFFFF0));
    bzero(v11, v10);
    v36 = v11;
    v35 = v9 > 0x80;
    MEMORY[0x24BDAC7A8](v15);
    v12 = (char *)v11;
    bzero(v11, v14);
    v34 = (char *)v11;
    if (!(_DWORD)v9)
    {
      v21 = 1;
      goto LABEL_15;
    }
    v13 = v9;
  }
  else
  {
    v11 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v33, 8 * v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 357);
    v36 = v11;
    v35 = v9 > 0x80;
    v12 = (char *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v33, 8 * v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 358);
    v34 = v12;
    v13 = *((unsigned __int16 *)this + 4);
  }
  v16 = 0;
  v17 = 0;
  do
  {
    v18 = this;
    if (v13 != 1)
      v18 = *(physx::NpShapeManager **)this;
    v19 = *((_QWORD *)v18 + v16);
    if ((*(_BYTE *)(v19 + 56) & 0x40) != 0)
      v20 = (_BYTE *)(*(_QWORD *)(v19 + 64) + 52);
    else
      v20 = (_BYTE *)(v19 + 144);
    if ((*v20 & 2) != 0)
      v11[v17++] = v19 + 48;
    ++v16;
  }
  while (v9 != v16);
  v21 = 0;
  v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
LABEL_15:
  v22 = *(_DWORD *)(*(_QWORD *)((char *)a3
                              + v7
                              + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)a3 + v7 + 11) & 0xF) + 3))
                  + 88);
  *((_DWORD *)this + 8) = v22;
  (*(void (**)(_QWORD *__return_ptr, const physx::PxRigidActor *))(*(_QWORD *)a3 + 152))(v33, a3);
  result = physx::Sq::SceneQueryManager::addCompoundShape((uint64_t)a2, (uint64_t)v32, v22, (uint64_t)v33, (uint64_t)v12, v11, (uint64_t)v8);
  if ((v21 & 1) == 0)
  {
    v24 = 0;
    v25 = 0;
    v26 = *((unsigned __int16 *)this + 4);
    do
    {
      v27 = this;
      if (v26 != 1)
        v27 = *(physx::NpShapeManager **)this;
      v28 = *((_QWORD *)v27 + v24);
      if ((*(_BYTE *)(v28 + 56) & 0x40) != 0)
        v29 = (_BYTE *)(*(_QWORD *)(v28 + 64) + 52);
      else
        v29 = (_BYTE *)(v28 + 144);
      if ((*v29 & 2) != 0)
      {
        v30 = (char *)this + 16;
        if (*((_WORD *)this + 12) != 1)
          v30 = (char *)*((_QWORD *)this + 2);
        v31 = *(_QWORD *)&v12[8 * v25++];
        *(_QWORD *)&v30[8 * v24] = v31;
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if (v35)
    result = physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v34, v12);
  if (v9 >= 0x81)
    return physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v36, (char *)v11);
  return result;
}

void physx::NpShapeManager::visualize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  __n128 v14;
  float v15;
  _BOOL4 v16;
  _BOOL4 v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  double v24;
  int8x16_t v25;
  double v26;
  double v27;
  double v28;
  int32x4_t v29;
  uint64_t v30;
  float v31;
  float32x2_t v32;
  __n128 v33;
  float v34;
  float32x2_t *v35;
  __int32 v36;
  float32x2_t *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x2_t *v50;
  float32x2_t *v51;
  unsigned int v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int32 v56;
  _DWORD *v57;
  __int32 v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  __int32 v64;
  _DWORD *v65;
  __int128 v66;
  int8x16_t v67;
  __int128 v68;
  __int32 v69;
  float32x2_t v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x2_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float *v178;
  float v179;
  float v180;
  _DWORD *v181;
  float v182;
  float v183;
  float v184;
  float32x2_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned __int8 *v299;
  int v300;
  unint64_t v301;
  float *v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  uint64_t v312;
  float *v313;
  float v314;
  float v315;
  float v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  float v323;
  float v324;
  float v325;
  float v326;
  uint64_t v327;
  float v328;
  float *v329;
  float v330;
  float v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  __int128 v341;
  float v342;
  float v343;
  float v344;
  float v345;
  __int128 v346;
  uint64_t v347;
  float32x2_t v348;
  uint64_t v349;
  int v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  int *v366;
  uint64_t v367;
  int v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  __int16 *v374;
  float v375;
  float v376;
  float v377;
  float *v378;
  int v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  uint64_t v392;
  char *v393;
  unsigned __int8 *v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  uint64_t v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  double v420;
  int v421;
  uint64_t v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  __int128 v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  int v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unsigned int v449;
  char v450;
  uint64_t v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  uint64_t v471;
  int16x4_t v472;
  unsigned int OverlapHeightField;
  uint64_t v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unsigned int *v483;
  unsigned int v484;
  __int128 v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  uint64_t *v489;
  float v490;
  uint64_t *v491;
  float32x2_t v492;
  float v493;
  float v494;
  float v495;
  uint64_t v496;
  float v497;
  float *v498;
  float v499;
  float v500;
  float32x2_t v501;
  _QWORD *v502;
  _QWORD *v503;
  _QWORD *v504;
  _BOOL4 v505;
  int v506;
  float32x4_t v507;
  _BOOL4 v508;
  float v509;
  __int32 v510;
  float v511;
  float v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  float32x2_t v518;
  float v519;
  char v520;
  float v521;
  float v522;
  uint64_t v523;
  float v524;
  float v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  float32x4_t v529;
  float32x2_t v530;
  float v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float v536;
  float v537;
  uint64_t v538;
  float v539;
  float v540;
  float v541;
  float v542;
  float v543;
  uint64_t v544;
  unsigned int v545;
  int v546;
  uint64_t v547;
  _BYTE v548[20];
  int v549;
  float v550;
  float v551;
  float v552;
  float v553;
  float v554;
  float v555;
  _BYTE v556[32];
  _BYTE v557[32];
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  float v563;
  float v564;
  __int32 v565;
  int v566;
  uint64_t v567;

  v567 = *MEMORY[0x24BDAC8D0];
  v8 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 560))(a3, 0);
  if (v8 != 0.0)
  {
    v9 = v8;
    v10 = *((unsigned __int16 *)a1 + 4);
    v508 = (_DWORD)v10 != 1
        && (a1 = (uint64_t *)*a1, (_DWORD)v10)
        && (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 560))(a3, 14) != 0.0;
    if ((*(_BYTE *)(a3 + 8624) & 0x40) != 0)
      v11 = (float *)(a3 + 8316);
    else
      v11 = (float *)(*(_QWORD *)(a3 + 1872) + 1888);
    v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 560))(a3, 11);
    v493 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 560))(a3, 12);
    v13 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 560))(a3, 16);
    v15 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 560))(a3, 15);
    v16 = v15 != 0.0 || v493 != 0.0;
    v490 = v13;
    if (v13 != 0.0)
      v16 = 1;
    v498 = v11;
    v499 = v11[3];
    v500 = *v11;
    v505 = v16;
    v17 = *v11 <= v499 && v16;
    v14.n128_f32[0] = *v11;
    v18 = (*(float (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a3 + 560))(a3, 13, v14);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a4 + 152))(&v538, a4);
    if ((_DWORD)v10)
    {
      v30 = 0;
      v506 = v508 || v17;
      v31 = v9 * v18;
      v497 = v9 * v15;
      v489 = &v547;
      v503 = (_QWORD *)(a2 + 40);
      v504 = (_QWORD *)(a2 + 60);
      v32 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
      v502 = (_QWORD *)(a2 + 80);
      v33 = (__n128)xmmword_2261A6E10;
      v34 = -0.5;
      v507 = (float32x4_t)xmmword_2261A6E10;
      v491 = a1;
      v496 = v10;
      v494 = v31;
      v495 = v12;
      while (1)
      {
        v35 = (float32x2_t *)a1[v30];
        v36 = v35[7].i32[0];
        if ((v36 & 4) != 0)
          v37 = (float32x2_t *)v35[8];
        else
          v37 = v35 + 14;
        v38 = v37[2].f32[0] + v37[2].f32[0];
        v39 = v37[2].f32[1] + v37[2].f32[1];
        v40 = v37[3].f32[0] + v37[3].f32[0];
        *(float *)&v26 = v539;
        v41 = v34 + (float)(v540 * v540);
        v29.i32[0] = HIDWORD(v538);
        v42 = (float)((float)(v39 * *((float *)&v538 + 1)) + (float)(*(float *)&v538 * v38)) + (float)(v539 * v40);
        v43 = (float)((float)(v540 * (float)((float)(*((float *)&v538 + 1) * v40) - (float)(v539 * v39)))
                    + (float)(v38 * v41))
            + (float)(*(float *)&v538 * v42);
        v44 = (float)((float)(v540 * (float)((float)(v539 * v38) - (float)(*(float *)&v538 * v40))) + (float)(v39 * v41))
            + (float)(*((float *)&v538 + 1) * v42);
        v45 = (float)((float)(v540 * (float)((float)(*(float *)&v538 * v39) - (float)(*((float *)&v538 + 1) * v38)))
                    + (float)(v40 * v41))
            + (float)(v539 * v42);
        v46 = v37[1].f32[0];
        LODWORD(v27) = v37[1].i32[1];
        v47 = v37->f32[1];
        v48 = (float)((float)((float)(*((float *)&v538 + 1) * *(float *)&v27) + (float)(v540 * v47))
                    + (float)(v539 * v37->f32[0]))
            - (float)(v46 * *(float *)&v538);
        v49 = (float)((float)((float)(v539 * *(float *)&v27) + (float)(v540 * v46)) + (float)(*(float *)&v538 * v47))
            - (float)(v37->f32[0] * *((float *)&v538 + 1));
        *(float *)&v28 = -(float)(*(float *)&v538 * v37->f32[0]);
        *(float *)v25.i32 = (float)((float)((float)(v540 * *(float *)&v27) - (float)(*(float *)&v538 * v37->f32[0]))
                                  - (float)(*((float *)&v538 + 1) * v47))
                          - (float)(v539 * v46);
        v531 = (float)((float)((float)(*(float *)&v538 * *(float *)&v27) + (float)(v540 * v37->f32[0]))
                     + (float)(*((float *)&v538 + 1) * v46))
             - (float)(v47 * v539);
        v532 = v48;
        v533 = v49;
        v534 = *(float *)v25.i32;
        v535 = v541 + v43;
        v536 = v542 + v44;
        v537 = v543 + v45;
        if ((v36 & 1) != 0)
        {
          v50 = (float32x2_t *)(*(_QWORD *)&v35[8] + 64);
          if ((v36 & 0x40) != 0)
          {
LABEL_24:
            v51 = (float32x2_t *)(*(_QWORD *)&v35[8] + 52);
            goto LABEL_27;
          }
        }
        else
        {
          v50 = v35 + 19;
          if ((v36 & 0x40) != 0)
            goto LABEL_24;
        }
        v51 = v35 + 18;
LABEL_27:
        v52 = v51->u8[0];
        v53 = (v52 >> 3) & 1;
        if (v12 == 0.0)
          v53 = 0;
        if ((v506 | v53) == 1)
        {
          v33.n128_u32[0] = 0;
          v23.i32[0] = 1.0;
          *(float *)&v24 = v542 + v44;
          physx::Gu::computeBounds((float32x2_t *)&v529, (uint64_t)v50, (uint64_t)&v531, 0, (float32x4_t)v33, v23, v24, *(double *)v25.i64, v26, v27, v28, v29, v19, v20, v21, v22, (char)v489);
          if ((v52 & 8) == 0)
            goto LABEL_211;
        }
        else
        {
          v33.n128_u64[1] = 0xFE7FFFFF7E7FFFFFLL;
          v529 = (float32x4_t)xmmword_2261A6E10;
          v33.n128_u64[0] = (unint64_t)vdup_n_s32(0xFE7FFFFF);
          v530 = (float32x2_t)v33.n128_u64[0];
          if ((v52 & 8) == 0)
            goto LABEL_211;
        }
        if (v12 != 0.0)
        {
          *(_DWORD *)(a2 + 4) = -256;
          *(_DWORD *)(a2 + 36) = 1065353216;
          *v503 = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_DWORD *)(a2 + 56) = 1065353216;
          *v504 = 0;
          *(_QWORD *)(a2 + 68) = 0;
          *(_DWORD *)(a2 + 76) = 1065353216;
          *v502 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_DWORD *)(a2 + 96) = 1065353216;
          *(float32x4_t *)v556 = v529;
          *(float32x2_t *)&v556[16] = v530;
          v556[24] = 1;
          physx::Cm::operator<<((_DWORD *)a2, (uint64_t *)v556);
        }
        if (v31 != 0.0)
        {
          physx::PxMat44::PxMat44((uint64_t)v556, (uint64_t)&v531);
          v54 = *(_OWORD *)&v556[16];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v556;
          *(_OWORD *)(a2 + 52) = v54;
          v55 = *(_OWORD *)&v557[16];
          *(_OWORD *)(a2 + 68) = *(_OWORD *)v557;
          *(_OWORD *)(a2 + 84) = v55;
          *(float *)v548 = v31;
          *(float *)&v548[4] = v31;
          *(float *)&v548[8] = v31;
          *(_QWORD *)&v548[12] = 0xCF0000CF0000;
          v549 = 207;
          physx::Cm::operator<<((_DWORD *)a2, (uint64_t)v548);
        }
        if (!v505
          || v500 <= v499
          && (v529.f32[0] > v498[3]
           || *v498 > v529.f32[3]
           || v529.f32[1] > v498[4]
           || v498[1] > v530.f32[0]
           || v529.f32[2] > v498[5]
           || v498[2] > v530.f32[1]))
        {
          goto LABEL_211;
        }
        v56 = v50->i32[0];
        v501 = v32;
        if (v493 != 0.0)
        {
          switch(v56)
          {
            case 0:
              *(_DWORD *)(a2 + 4) = -65281;
              v57 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, (uint64_t)&v531);
              v58 = v50->i32[1];
              *(_DWORD *)v556 = 100;
              *(_DWORD *)&v556[4] = v58;
              physx::Cm::operator<<(v57, (uint64_t)v556);
              physx::PxMat44::PxMat44((uint64_t)v556, (uint64_t)&v531);
              v60 = *(_DWORD *)&v556[20];
              v59 = *(_DWORD *)&v556[16];
              v61 = *(_QWORD *)&v556[24];
              v62 = *(_OWORD *)v557;
              *(_OWORD *)v557 = *(_OWORD *)&v556[16];
              *(float *)&v556[16] = -*(float *)&v62;
              *(float *)&v556[20] = -*((float *)&v62 + 1);
              *(float *)&v556[24] = -*((float *)&v62 + 2);
              *(float *)&v556[28] = -*((float *)&v62 + 3);
              *(_OWORD *)(a2 + 36) = *(_OWORD *)v556;
              *(float *)(a2 + 52) = -*(float *)&v62;
              *(float *)(a2 + 56) = -*((float *)&v62 + 1);
              *(float *)(a2 + 60) = -*((float *)&v62 + 2);
              *(float *)(a2 + 64) = -*((float *)&v62 + 3);
              *(_QWORD *)(a2 + 68) = __PAIR64__(v60, v59);
              *(_QWORD *)(a2 + 76) = v61;
              v63 = *(_DWORD *)&v557[28];
              *(_DWORD *)(a2 + 84) = *(_DWORD *)&v557[16];
              *(_QWORD *)(a2 + 88) = *(_QWORD *)&v557[20];
              *(_DWORD *)(a2 + 96) = v63;
              v64 = v50->i32[1];
              *(_DWORD *)v548 = 100;
              *(_DWORD *)&v548[4] = v64;
              v65 = (_DWORD *)physx::Cm::operator<<((_DWORD *)a2, (uint64_t)v548);
              v66 = *(_OWORD *)v557;
              v67 = *(int8x16_t *)v556;
              v68 = *(_OWORD *)&v556[16];
              *(_OWORD *)v557 = *(_OWORD *)v556;
              *(float *)v556 = -*(float *)&v66;
              *(float *)&v556[4] = -*((float *)&v66 + 1);
              *(float *)&v556[8] = -*((float *)&v66 + 2);
              *(float *)&v556[12] = -*((float *)&v66 + 3);
              *(float *)(a2 + 36) = -*(float *)&v66;
              *(float *)(a2 + 40) = -*((float *)&v66 + 1);
              *(float *)(a2 + 44) = -*((float *)&v66 + 2);
              *(float *)(a2 + 48) = -*((float *)&v66 + 3);
              *(_OWORD *)(a2 + 52) = v68;
              *(_QWORD *)(a2 + 68) = v67.i64[0];
              *(int8x16_t *)(a2 + 76) = vextq_s8(v67, *(int8x16_t *)&v557[16], 8uLL);
              *(_QWORD *)(a2 + 92) = *(_QWORD *)&v557[24];
              v69 = v50->i32[1];
              *(_DWORD *)v548 = 100;
              *(_DWORD *)&v548[4] = v69;
              physx::Cm::operator<<(v65, (uint64_t)v548);
              goto LABEL_211;
            case 1:
              physx::PxMat44::PxMat44((uint64_t)v556, (uint64_t)&v531);
              v340 = 0;
              v341 = *(_OWORD *)&v556[16];
              v342 = -*(float *)v557;
              v343 = -*(float *)&v557[4];
              v344 = -*(float *)&v557[8];
              v345 = -*(float *)&v557[12];
              *(float *)&v556[16] = -*(float *)v557;
              *(float *)&v556[20] = -*(float *)&v557[4];
              *(float *)&v556[24] = -*(float *)&v557[8];
              *(float *)&v556[28] = -*(float *)&v557[12];
              *(_QWORD *)&v346 = *(_QWORD *)&v556[8];
              v347 = *(_QWORD *)v556;
              *(_OWORD *)v557 = *(_OWORD *)v556;
              *(float *)v556 = -*(float *)&v341;
              *(float *)&v556[4] = -*((float *)&v341 + 1);
              *(float *)&v556[8] = -*((float *)&v341 + 2);
              *(float *)&v556[12] = -*((float *)&v341 + 3);
              *(float *)(a2 + 36) = -*(float *)&v341;
              *(float *)(a2 + 40) = -*((float *)&v341 + 1);
              *(float *)(a2 + 44) = -*((float *)&v341 + 2);
              *(float *)(a2 + 48) = -*((float *)&v341 + 3);
              *(float *)(a2 + 52) = v342;
              *(float *)(a2 + 56) = v343;
              *(float *)(a2 + 60) = v344;
              *(float *)(a2 + 64) = v345;
              *(_QWORD *)(a2 + 68) = v347;
              *((_QWORD *)&v346 + 1) = *(_QWORD *)&v557[16];
              *(_OWORD *)(a2 + 76) = v346;
              *(_QWORD *)(a2 + 92) = *(_QWORD *)&v557[24];
              *(_DWORD *)(a2 + 4) = -65281;
              do
              {
                v340 += 2;
                *(_DWORD *)v548 = 100;
                *(float *)&v548[4] = (float)v340 * (float)v340;
                physx::Cm::operator<<((_DWORD *)a2, (uint64_t)v548);
              }
              while (v340 < 0x12);
              goto LABEL_211;
            case 2:
              *(_DWORD *)(a2 + 4) = -65281;
              v179 = v50->f32[1];
              v180 = v50[1].f32[0];
              physx::PxMat44::PxMat44((uint64_t)v556, (uint64_t)&v531);
              physx::Cm::RenderOutput::outputCapsule(a2, (float32x2_t *)v556, v179, v180);
              goto LABEL_211;
            case 3:
              *(_DWORD *)(a2 + 4) = -65281;
              v181 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, (uint64_t)&v531);
              v182 = v50->f32[1];
              v183 = v50[1].f32[0];
              v184 = v50[1].f32[1];
              *(float *)v556 = -v182;
              *(float *)&v556[4] = -v183;
              *(float *)&v556[8] = -v184;
              *(float *)&v556[12] = v182;
              *(float *)&v556[16] = v183;
              *(float *)&v556[20] = v184;
              v556[24] = 1;
              physx::Cm::operator<<(v181, (uint64_t *)v556);
              goto LABEL_211;
            case 4:
              v185 = v50[4];
              v186 = *(_QWORD *)(*(_QWORD *)&v185 + 72);
              v187 = *(unsigned __int8 *)(*(_QWORD *)&v185 + 71);
              v188 = *(unsigned __int8 *)(*(_QWORD *)&v185 + 70);
              v492 = v185;
              v189 = *(__int16 *)(*(_QWORD *)&v185 + 68);
              v190 = v531;
              v191 = v532;
              v192 = v533;
              v193 = v191 + v191;
              v194 = v192 + v192;
              v195 = v191 * (float)(v191 + v191);
              v196 = v192 * (float)(v192 + v192);
              v197 = (float)(v190 + v190) * v532;
              v198 = (float)(v190 + v190) * v533;
              v199 = (float)(v190 + v190) * v534;
              v200 = v193 * v533;
              v201 = v193 * v534;
              v202 = v194 * v534;
              v203 = (float)(1.0 - v195) - v196;
              v204 = v197 + (float)(v194 * v534);
              v205 = v198 - v201;
              v206 = v197 - v202;
              v207 = 1.0 - (float)(v190 * (float)(v190 + v190));
              v208 = v207 - v196;
              v209 = v200 + v199;
              v210 = v198 + v201;
              v211 = v200 - v199;
              v212 = v207 - v195;
              v213 = v50[2].f32[1];
              v214 = v50[3].f32[0];
              v215 = v50[3].f32[1];
              v217 = v50[1].f32[1];
              v216 = v50[2].f32[0];
              v218 = v213 + v213;
              v219 = v214 + v214;
              v220 = v213 * (float)(v213 + v213);
              v221 = v214 * (float)(v214 + v214);
              v222 = (float)(v216 + v216) * v213;
              v223 = (float)(v216 + v216) * v214;
              v224 = (float)(v216 + v216) * v215;
              v225 = v218 * v214;
              v226 = v218 * v215;
              v227 = v219 * v215;
              v228 = (float)(1.0 - v220) - v221;
              v229 = v222 + v227;
              v230 = v223 - v226;
              v231 = v222 - v227;
              v232 = 1.0 - (float)(v216 * (float)(v216 + v216));
              v233 = v232 - v221;
              v234 = v225 + v224;
              v235 = v223 + v226;
              v236 = v225 - v224;
              v237 = v232 - v220;
              v238 = v50->f32[1];
              v239 = v50[1].f32[0];
              v240 = v238 * v228;
              v241 = v238 * v231;
              v242 = v238 * v235;
              v243 = v229 * v239;
              v244 = v233 * v239;
              v245 = v236 * v239;
              v246 = v230 * v217;
              v247 = v234 * v217;
              v248 = v237 * v217;
              v249 = v228 * v241;
              v250 = v229 * v244;
              v251 = (float)(v228 * v240) + (float)(v229 * v243);
              v252 = (float)(v228 * v242) + (float)(v229 * v245);
              v253 = v251 + (float)(v230 * v246);
              v254 = (float)(v249 + v250) + (float)(v230 * v247);
              v255 = v252 + (float)(v230 * v248);
              v256 = (float)(v231 * v240) + (float)(v233 * v243);
              v257 = (float)(v231 * v241) + (float)(v233 * v244);
              v258 = (float)(v231 * v242) + (float)(v233 * v245);
              v259 = v256 + (float)(v234 * v246);
              v260 = v257 + (float)(v234 * v247);
              v34 = -0.5;
              v261 = v258 + (float)(v234 * v248);
              v262 = v235 * v240;
              v263 = v235 * v241;
              v264 = v235 * v242;
              v265 = v236 * v244;
              v266 = v262 + (float)(v236 * v243);
              v267 = v264 + (float)(v236 * v245);
              v268 = v237 * v246;
              v32 = v501;
              v269 = v237 * v247;
              v31 = v494;
              v12 = v495;
              v270 = v237 * v248;
              v271 = v266 + v268;
              v272 = (float)(v263 + v265) + v269;
              v273 = v267 + v270;
              v274 = v204 * v253;
              v275 = (float)(v205 * v253) + (float)(v209 * v254);
              v276 = (float)(v210 * v255) + (float)((float)(v203 * v253) + (float)(v206 * v254));
              v277 = (float)(v211 * v255) + (float)(v274 + (float)(v208 * v254));
              v278 = (float)(v212 * v255) + v275;
              v279 = (float)(v210 * v261) + (float)((float)(v203 * v259) + (float)(v206 * v260));
              v280 = (float)(v211 * v261) + (float)((float)(v204 * v259) + (float)(v208 * v260));
              v281 = (float)(v212 * v261) + (float)((float)(v205 * v259) + (float)(v209 * v260));
              v282 = v203 * v271;
              v283 = v204 * v271;
              v284 = v205 * v271;
              v285 = v535;
              v286 = v536;
              v287 = v282 + (float)(v206 * v272);
              v288 = v283 + (float)(v208 * v272);
              v289 = v210 * v273;
              *(float *)v29.i32 = v537;
              *(float *)(a2 + 36) = v276;
              *(float *)(a2 + 40) = v277;
              *(float *)(a2 + 44) = v278;
              *(_DWORD *)(a2 + 48) = 0;
              *(float *)(a2 + 52) = v279;
              *(float *)(a2 + 56) = v280;
              *(float *)(a2 + 60) = v281;
              v290 = v289 + v287;
              v291 = (float)(v211 * v273) + v288;
              *(_DWORD *)(a2 + 64) = 0;
              *(float *)(a2 + 68) = v289 + v287;
              *(float *)(a2 + 72) = v291;
              v292 = (float)(v212 * v273) + (float)(v284 + (float)(v209 * v272));
              *(float *)(a2 + 76) = v292;
              *(_DWORD *)(a2 + 80) = 0;
              *(float *)(a2 + 84) = v285;
              *(float *)(a2 + 88) = v286;
              *(_DWORD *)(a2 + 92) = v29.i32[0];
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              if (v187)
              {
                v293 = v187;
                v294 = 0;
                v295 = v186 + 20 * v187;
                v296 = v295 + 12 * v188 + 2 * (v189 & 0x7FFF);
                v297 = 3 * v188;
                if (v189 >= 0)
                  v298 = 0;
                else
                  v298 = 4 * (v189 & 0x7FFF);
                v299 = (unsigned __int8 *)(v296 + v297 + v298);
                v300 = -65281;
                v525 = v276;
                v522 = v277;
                v517 = v279;
                v519 = (float)(v212 * v255) + v275;
                v513 = v281;
                v515 = v280;
                v511 = v286;
                v512 = v285;
                v509 = v289 + v287;
                v510 = v29.i32[0];
                do
                {
                  v301 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v492 + 72) + 20 * v294 + 18);
                  v302 = (float *)(v295 + 12 * *v299);
                  v303 = v302[1];
                  v304 = v302[2];
                  v305 = (float)(v277 * *v302) + (float)(v280 * v303);
                  v306 = (float)(v278 * *v302) + (float)(v281 * v303);
                  v307 = (float)((float)(v276 * *v302) + (float)(v279 * v303)) + (float)(v290 * v304);
                  v308 = v306 + (float)(v292 * v304);
                  v309 = v285 + v307;
                  v310 = v286 + (float)(v305 + (float)(v291 * v304));
                  v311 = *(float *)v29.i32 + v308;
                  if (v301 < 2)
                  {
                    v325 = v285 + v307;
                    v326 = v286 + (float)(v305 + (float)(v291 * v304));
                    v328 = *(float *)v29.i32 + v308;
                  }
                  else
                  {
                    v312 = 1;
                    do
                    {
                      v313 = (float *)(v295 + 12 * v299[v312]);
                      v315 = *v313;
                      v314 = v313[1];
                      v316 = v313[2];
                      v317 = *(_QWORD *)(a2 + 104);
                      v318 = *(_DWORD *)(v317 + 32);
                      v319 = *(_DWORD *)(v317 + 36) & 0x7FFFFFFF;
                      v320 = v318 + 1;
                      if (v318 + 1 > v319)
                      {
                        v321 = 2 * *(_DWORD *)(v317 + 36);
                        if (!v319)
                          v321 = 2;
                        if (v320 <= v321)
                          v322 = v321;
                        else
                          v322 = v318 + 1;
                        physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v317 + 24, v322);
                        v290 = v509;
                        v29.i32[0] = v510;
                        v286 = v511;
                        v285 = v512;
                        v281 = v513;
                        v280 = v515;
                        v279 = v517;
                        v278 = v519;
                        v277 = v522;
                        v276 = v525;
                        v318 = *(_DWORD *)(v317 + 32);
                        v300 = *(_DWORD *)(a2 + 4);
                      }
                      v323 = (float)((float)(v277 * v315) + (float)(v280 * v314)) + (float)(v291 * v316);
                      v324 = (float)((float)(v278 * v315) + (float)(v281 * v314)) + (float)(v292 * v316);
                      v325 = v285 + (float)((float)((float)(v276 * v315) + (float)(v279 * v314)) + (float)(v290 * v316));
                      v326 = v286 + v323;
                      v327 = *(_QWORD *)(v317 + 24) + 32 * v318;
                      *(_DWORD *)(v317 + 32) = v320;
                      *(float *)v327 = v309;
                      *(float *)(v327 + 4) = v310;
                      *(float *)(v327 + 8) = v311;
                      v328 = *(float *)v29.i32 + v324;
                      *(float *)(v327 + 16) = v325;
                      *(float *)(v327 + 20) = v286 + v323;
                      *(float *)(v327 + 24) = *(float *)v29.i32 + v324;
                      ++v312;
                      *(_DWORD *)(v327 + 28) = v300;
                      *(_DWORD *)(v327 + 12) = v300;
                      v311 = *(float *)v29.i32 + v324;
                      v310 = v286 + v323;
                      v309 = v325;
                    }
                    while (v301 != v312);
                    v329 = (float *)(v295 + 12 * *v299);
                    v330 = v329[1];
                    v331 = v329[2];
                    v309 = v285 + (float)((float)((float)(v276 * *v329) + (float)(v279 * v330)) + (float)(v290 * v331));
                    v310 = v286 + (float)((float)((float)(v277 * *v329) + (float)(v280 * v330)) + (float)(v291 * v331));
                    v311 = *(float *)v29.i32
                         + (float)((float)((float)(v278 * *v329) + (float)(v281 * v330)) + (float)(v292 * v331));
                    a1 = v491;
                  }
                  v332 = *(_QWORD *)(a2 + 104);
                  v333 = *(_DWORD *)(v332 + 32);
                  v334 = *(_DWORD *)(v332 + 36) & 0x7FFFFFFF;
                  v335 = v333 + 1;
                  if (v333 + 1 > v334)
                  {
                    v336 = 2 * *(_DWORD *)(v332 + 36);
                    if (!v334)
                      v336 = 2;
                    if (v335 <= v336)
                      v337 = v336;
                    else
                      v337 = v333 + 1;
                    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v332 + 24, v337);
                    v290 = v509;
                    v29.i32[0] = v510;
                    v286 = v511;
                    v285 = v512;
                    v281 = v513;
                    v280 = v515;
                    v279 = v517;
                    v278 = v519;
                    v277 = v522;
                    v276 = v525;
                    v333 = *(_DWORD *)(v332 + 32);
                    v300 = *(_DWORD *)(a2 + 4);
                  }
                  v338 = *(_QWORD *)(v332 + 24);
                  *(_DWORD *)(v332 + 32) = v335;
                  v339 = v338 + 32 * v333;
                  *(float *)v339 = v325;
                  *(float *)(v339 + 4) = v326;
                  *(float *)(v339 + 8) = v328;
                  *(float *)(v339 + 16) = v309;
                  *(float *)(v339 + 20) = v310;
                  *(float *)(v339 + 24) = v311;
                  *(_DWORD *)(v339 + 28) = v300;
                  *(_DWORD *)(v339 + 12) = v300;
                  v299 += v301;
                  ++v294;
                  v10 = v496;
                  v31 = v494;
                  v12 = v495;
                  v32 = v501;
                  v34 = -0.5;
                }
                while (v294 != v293);
              }
              goto LABEL_211;
            case 5:
              goto LABEL_49;
            case 6:
              v348 = v50[1];
              v349 = (*(_DWORD *)(*(_QWORD *)&v348 + 60) * *(_DWORD *)(*(_QWORD *)&v348 + 56));
              v350 = 2 * v349;
              *(_DWORD *)(a2 + 36) = 1065353216;
              *v503 = 0;
              *(_QWORD *)(a2 + 48) = 0;
              *(_DWORD *)(a2 + 56) = 1065353216;
              *v504 = 0;
              *(_QWORD *)(a2 + 68) = 0;
              *(_DWORD *)(a2 + 76) = 1065353216;
              *v502 = 0;
              *(_QWORD *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              if (v500 > v499)
              {
                if ((_DWORD)v349)
                {
                  v370 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, float))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v349, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 705, v500);
                  v371 = v370;
                  v372 = 0;
                  v373 = *(_DWORD *)(*(_QWORD *)&v348 + 60);
                  v374 = *(__int16 **)(*(_QWORD *)&v348 + 80);
                  v23.i32[0] = v50[2].i32[0];
                  v33.n128_u32[0] = v50[2].u32[1];
                  LODWORD(v24) = v50[3].i32[0];
                  *(float *)v25.i32 = v534;
                  *(float *)v29.i32 = v532;
                  *(float *)&v26 = v533;
                  *(float *)&v27 = v34 + (float)(*(float *)v25.i32 * *(float *)v25.i32);
                  *(float *)&v28 = v531;
                  v375 = -v533;
                  v376 = -v531;
                  v377 = -v532;
                  v378 = (float *)(v370 + 8);
                  do
                  {
                    v379 = *v374;
                    v374 += 2;
                    v380 = (float)(v33.n128_f32[0] * (float)(v372 / v373))
                         + (float)(v33.n128_f32[0] * (float)(v372 / v373));
                    v381 = (float)(*(float *)v23.i32 * (float)v379) + (float)(*(float *)v23.i32 * (float)v379);
                    v382 = (float)(*(float *)&v24 * (float)(v372 % v373))
                         + (float)(*(float *)&v24 * (float)(v372 % v373));
                    v383 = (float)((float)(*(float *)v29.i32 * v381) + (float)(*(float *)&v28 * v380))
                         + (float)(*(float *)&v26 * v382);
                    v384 = (float)(*(float *)v25.i32 * (float)((float)(v382 * v376) + (float)(*(float *)&v26 * v380)))
                         + (float)(v381 * *(float *)&v27);
                    v385 = (float)((float)(*(float *)v25.i32
                                         * (float)((float)(v381 * v375) + (float)(*(float *)v29.i32 * v382)))
                                 + (float)(v380 * *(float *)&v27))
                         + (float)(*(float *)&v28 * v383);
                    v386 = v537
                         + (float)((float)((float)(*(float *)v25.i32
                                                 * (float)((float)(v380 * v377) + (float)(*(float *)&v28 * v381)))
                                         + (float)(v382 * *(float *)&v27))
                                 + (float)(*(float *)&v26 * v383));
                    v387 = v536 + (float)(v384 + (float)(*(float *)v29.i32 * v383));
                    *(v378 - 2) = v535 + v385;
                    *(v378 - 1) = v387;
                    *v378 = v386;
                    v378 += 3;
                    ++v372;
                  }
                  while (v349 != v372);
                  if (!v350)
                    goto LABEL_148;
                  v388 = 0;
                  v527 = v370;
                  do
                  {
                    v389 = v388 >> 1;
                    v390 = *(_DWORD *)(*(_QWORD *)&v348 + 60);
                    v391 = (v388 >> 1) / v390;
                    if (v391 < *(_DWORD *)(*(_QWORD *)&v348 + 56) - 1 && v389 - v391 * v390 < v390 - 1)
                    {
                      v392 = *(_QWORD *)(*(_QWORD *)&v348 + 80) + 4 * v389;
                      v393 = (char *)(v392 + 2);
                      v394 = (unsigned __int8 *)(v392 + 3);
                      if ((v388 & 1) == 0)
                        v394 = (unsigned __int8 *)v393;
                      if ((~*v394 & 0x7F) != 0)
                      {
                        v395 = *v393;
                        v396 = v389 + 1 + v390;
                        v397 = v390 + v389;
                        if ((v388 & 1) != 0)
                          v398 = v397;
                        else
                          v398 = v389 + 1;
                        if ((v388 & 1) != 0)
                          v399 = v396;
                        else
                          v399 = v388 >> 1;
                        if ((v388 & 1) != 0)
                          v400 = v389 + 1;
                        else
                          v400 = v397;
                        if ((v388 & 1) != 0)
                        {
                          v401 = v389 + 1;
                        }
                        else
                        {
                          v396 = v388 >> 1;
                          v401 = v397;
                        }
                        if ((v388 & 1) == 0)
                          v389 = v397 + 1;
                        if (v395 < 0)
                          v402 = v396;
                        else
                          v402 = v398;
                        if (v395 < 0)
                          v403 = v401;
                        else
                          v403 = v399;
                        if (v395 < 0)
                          v404 = v389;
                        else
                          v404 = v400;
                        v405 = *(_QWORD *)(a2 + 104);
                        v406 = *(_DWORD *)(v405 + 32);
                        v407 = *(_DWORD *)(v405 + 36) & 0x7FFFFFFF;
                        v408 = v406 + 3;
                        if (v406 + 3 > v407)
                        {
                          v409 = 2 * *(_DWORD *)(v405 + 36);
                          if (!v407)
                            v409 = 2;
                          if (v408 <= v409)
                            v410 = v409;
                          else
                            v410 = v408;
                          physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v405 + 24, v410);
                          v371 = v527;
                          v406 = *(_DWORD *)(v405 + 32);
                        }
                        v411 = *(_QWORD *)(v405 + 24) + 32 * v406;
                        *(_DWORD *)(v405 + 32) = v408;
                        v412 = v371 + 12 * v403;
                        v413 = v371 + 12 * v402;
                        v414 = v371 + 12 * v404;
                        v415 = *(_DWORD *)(v413 + 8);
                        v416 = *(_QWORD *)v412;
                        *(_DWORD *)(v411 + 8) = *(_DWORD *)(v412 + 8);
                        *(_DWORD *)(v411 + 12) = -65281;
                        v417 = *(_QWORD *)v413;
                        *(_QWORD *)v411 = v416;
                        *(_QWORD *)(v411 + 16) = v417;
                        *(_DWORD *)(v411 + 24) = v415;
                        *(_DWORD *)(v411 + 28) = -65281;
                        v418 = *(_DWORD *)(v414 + 8);
                        v419 = *(_QWORD *)v413;
                        *(_DWORD *)(v411 + 40) = *(_DWORD *)(v413 + 8);
                        *(_DWORD *)(v411 + 44) = -65281;
                        v420 = *(double *)v414;
                        *(_QWORD *)(v411 + 32) = v419;
                        *(double *)(v411 + 48) = v420;
                        *(_DWORD *)(v411 + 56) = v418;
                        *(_DWORD *)(v411 + 60) = -65281;
                        v421 = *(_DWORD *)(v412 + 8);
                        v24 = *(double *)v414;
                        *(_DWORD *)(v411 + 72) = *(_DWORD *)(v414 + 8);
                        *(_DWORD *)(v411 + 76) = -65281;
                        v33.n128_u64[0] = *(_QWORD *)v412;
                        *(double *)(v411 + 64) = v24;
                        *(_QWORD *)(v411 + 80) = v33.n128_u64[0];
                        *(_DWORD *)(v411 + 88) = v421;
                        *(_DWORD *)(v411 + 92) = -65281;
                        a1 = v491;
                        v10 = v496;
                      }
                    }
                    ++v388;
                  }
                  while (v350 != v388);
                  if (v371)
LABEL_148:
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v371);
                }
                goto LABEL_211;
              }
              v351 = *v498;
              v352 = v498[1];
              v25.i32[0] = (__int32)v498[2];
              v353 = v498[3];
              v354 = v498[4];
              v355 = v498[5];
              v356 = (float)(v353 + *v498) * 0.5;
              *(_OWORD *)v548 = xmmword_2260E5D70;
              *(float *)&v548[16] = v356;
              *(float *)&v549 = (float)(v354 + v352) * 0.5;
              v550 = (float)(v355 + *(float *)v25.i32) * 0.5;
              v33.n128_f32[0] = (float)(v353 - v351) * 0.5;
              *(float *)v23.i32 = (float)(v354 - v352) * 0.5;
              *(float *)&v24 = (float)(v355 - *(float *)v25.i32) * 0.5;
              LODWORD(v558) = 3;
              v559 = v33.n128_f32[0];
              v560 = *(float *)v23.i32;
              v561 = *(float *)&v24;
              if (v350)
                v357 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (2 * v349), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 680);
              else
                v357 = 0;
              LOBYTE(v544) = 0;
              OverlapHeightField = physx::PxMeshQuery::findOverlapHeightField((uint64_t)&v558, (float *)v548, v50, &v531, v357, 2 * (int)v349, 0, &v544, v33.n128_f64[0], *(double *)v23.i64, v24, *(double *)v25.i64);
              v474 = *(_QWORD *)(a2 + 104);
              v475 = *(_DWORD *)(v474 + 32);
              v476 = *(_DWORD *)(v474 + 36) & 0x7FFFFFFF;
              v477 = v475 + 3 * OverlapHeightField;
              if (v477 > v476)
              {
                v478 = 2 * *(_DWORD *)(v474 + 36);
                if (!v476)
                  v478 = 2;
                if (v477 <= v478)
                  v479 = v478;
                else
                  v479 = v477;
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v474 + 24, v479);
                v475 = *(_DWORD *)(v474 + 32);
              }
              v480 = *(_QWORD *)(v474 + 24);
              *(_DWORD *)(v474 + 32) = v477;
              if (OverlapHeightField)
              {
                v481 = v480 + 32 * v475;
                v482 = OverlapHeightField;
                v483 = (unsigned int *)v357;
                do
                {
                  v484 = *v483++;
                  physx::PxMeshQuery::getTriangle(v50, &v531, v484, (uint64_t)v556, 0, 0);
                  v485 = *(_OWORD *)v556;
                  v486 = *(_QWORD *)&v556[16];
                  *(_QWORD *)v481 = *(_QWORD *)v556;
                  *(_DWORD *)(v481 + 8) = DWORD2(v485);
                  *(_DWORD *)(v481 + 12) = -65281;
                  *(_DWORD *)(v481 + 16) = HIDWORD(v485);
                  *(_QWORD *)(v481 + 20) = v486;
                  *(_DWORD *)(v481 + 28) = -65281;
                  v487 = *(_QWORD *)&v556[24];
                  v488 = *(_DWORD *)v557;
                  *(_DWORD *)(v481 + 32) = HIDWORD(v485);
                  *(_QWORD *)(v481 + 36) = v486;
                  *(_DWORD *)(v481 + 44) = -65281;
                  *(_QWORD *)(v481 + 48) = v487;
                  *(_DWORD *)(v481 + 56) = v488;
                  *(_DWORD *)(v481 + 60) = -65281;
                  *(_QWORD *)(v481 + 64) = v487;
                  *(_DWORD *)(v481 + 72) = v488;
                  *(_DWORD *)(v481 + 76) = -65281;
                  *(_QWORD *)(v481 + 80) = v485;
                  *(_DWORD *)(v481 + 88) = DWORD2(v485);
                  *(_DWORD *)(v481 + 92) = -65281;
                  v481 += 96;
                  --v482;
                }
                while (v482);
              }
              else if (!v357)
              {
LABEL_229:
                v10 = v496;
                goto LABEL_211;
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v357);
              goto LABEL_229;
            default:
              goto LABEL_211;
          }
        }
        if (v56 == 5)
        {
LABEL_49:
          v70 = v50[5];
          v71 = v531;
          v72 = v532;
          v73 = v533;
          v74 = v72 * (float)(v72 + v72);
          v75 = v73 * (float)(v73 + v73);
          v76 = (float)(v71 + v71) * v534;
          v77 = (float)(v72 + v72) * v533;
          v78 = (float)(v72 + v72) * v534;
          v79 = (float)(v73 + v73) * v534;
          v80 = (float)(1.0 - v74) - v75;
          v81 = (float)((float)(v71 + v71) * v532) + v79;
          v82 = (float)((float)(v71 + v71) * v533) - v78;
          v83 = (float)((float)(v71 + v71) * v532) - v79;
          v84 = 1.0 - (float)(v71 * (float)(v71 + v71));
          v85 = v84 - v75;
          v86 = v77 + v76;
          v87 = (float)((float)(v71 + v71) * v533) + v78;
          v88 = v77 - v76;
          v90 = v50->f32[1];
          v89 = (float *)v50 + 1;
          v91 = v84 - v74;
          v92 = v89[3];
          v93 = v89[4];
          v94 = v89[5];
          v95 = v89[6];
          v96 = v93 + v93;
          v97 = v94 + v94;
          v98 = v93 * (float)(v93 + v93);
          v99 = v94 * (float)(v94 + v94);
          v100 = (float)(v92 + v92) * v93;
          v101 = (float)(v92 + v92) * v94;
          v102 = (float)(v92 + v92) * v95;
          v103 = v96 * v94;
          v104 = v96 * v95;
          v105 = v97 * v95;
          v106 = (float)(1.0 - v98) - v99;
          v107 = v100 + v105;
          v108 = v101 - v104;
          v109 = v100 - v105;
          v110 = 1.0 - (float)(v92 * (float)(v92 + v92));
          v111 = v110 - v99;
          v112 = v103 + v102;
          v113 = v101 + v104;
          v114 = v103 - v102;
          v115 = v110 - v98;
          v116 = v90 * v106;
          v117 = v90 * v109;
          v118 = v89[1];
          v119 = v89[2];
          v120 = v107 * v118;
          v121 = v111 * v118;
          v122 = v114 * v118;
          v123 = v108 * v119;
          v124 = v112 * v119;
          v125 = v115 * v119;
          v126 = (float)(v106 * (float)(v90 * v106)) + (float)(v107 * v120);
          v127 = (float)(v106 * (float)(v90 * v109)) + (float)(v107 * v121);
          v128 = (float)(v106 * (float)(v90 * v113)) + (float)(v107 * v122);
          v129 = v126 + (float)(v108 * v123);
          v130 = v127 + (float)(v108 * v124);
          v131 = v128 + (float)(v108 * v125);
          v132 = (float)(v109 * v116) + (float)(v111 * v120);
          v133 = (float)(v109 * (float)(v90 * v109)) + (float)(v111 * v121);
          v134 = (float)(v109 * (float)(v90 * v113)) + (float)(v111 * v122);
          v135 = v132 + (float)(v112 * v123);
          v136 = v133 + (float)(v112 * v124);
          v137 = v134 + (float)(v112 * v125);
          v138 = v113 * (float)(v90 * v113);
          v139 = (float)(v113 * v116) + (float)(v114 * v120);
          v140 = (float)(v113 * v117) + (float)(v114 * v121);
          v141 = v138 + (float)(v114 * v122);
          v142 = v139 + (float)(v115 * v123);
          v143 = v140 + (float)(v115 * v124);
          v144 = v141 + (float)(v115 * v125);
          v145 = (float)(v87 * v131) + (float)((float)(v80 * v129) + (float)(v83 * v130));
          v146 = (float)(v88 * v131) + (float)((float)(v81 * v129) + (float)(v85 * v130));
          v147 = (float)(v91 * v131) + (float)((float)(v82 * v129) + (float)(v86 * v130));
          v148 = (float)(v88 * v137) + (float)((float)(v81 * v135) + (float)(v85 * v136));
          v149 = (float)(v91 * v137) + (float)((float)(v82 * v135) + (float)(v86 * v136));
          v150 = (float)(v87 * v144) + (float)((float)(v80 * v142) + (float)(v83 * v143));
          v151 = (float)(v88 * v144) + (float)((float)(v81 * v142) + (float)(v85 * v143));
          v152 = (float)(v91 * v144) + (float)((float)(v82 * v142) + (float)(v86 * v143));
          *(float *)v548 = v145;
          *(float *)&v548[4] = v146;
          *(float *)&v548[8] = v147;
          *(float *)&v548[12] = (float)(v87 * v137) + (float)((float)(v80 * v135) + (float)(v83 * v136));
          *(float *)&v548[16] = v148;
          *(float *)&v549 = v149;
          v550 = v150;
          v551 = v151;
          v153 = v535;
          v154 = v536;
          v552 = v152;
          v553 = v535;
          v155 = v537;
          v554 = v536;
          v555 = v537;
          v156 = *(unsigned int *)(*(_QWORD *)&v70 + 32);
          v157 = *(_QWORD *)(*(_QWORD *)&v70 + 40);
          v158 = *(_QWORD *)(*(_QWORD *)&v70 + 48);
          v159 = (*(unsigned __int8 *)(*(_QWORD *)&v70 + 92) >> 1) & 1;
          v518 = v70;
          if (v500 > v499)
          {
            if (v493 == 0.0)
            {
              v165 = 0;
              v31 = v494;
              v12 = v495;
              v32 = v501;
              v34 = -0.5;
            }
            else
            {
              v166 = *(unsigned int *)(*(_QWORD *)&v70 + 28);
              *(_DWORD *)(a2 + 36) = 1065353216;
              *v503 = 0;
              *(_QWORD *)(a2 + 48) = 0;
              *(_DWORD *)(a2 + 56) = 1065353216;
              *v504 = 0;
              *(_QWORD *)(a2 + 68) = 0;
              *(_DWORD *)(a2 + 76) = 1065353216;
              *v502 = 0;
              *(_QWORD *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              if ((_DWORD)v166)
              {
                v167 = 12 * v166;
                v524 = v145;
                v521 = v146;
                v514 = (float)(v87 * v137) + (float)((float)(v80 * v135) + (float)(v83 * v136));
                v516 = v147;
                v168 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, float))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v166, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 632, v493);
                v169 = v168;
                v170 = 0;
                v171 = v157 + 8;
                do
                {
                  v172 = *(float *)(v157 + v170);
                  v173 = *(float *)(v171 + v170 - 4);
                  v174 = (float)(v524 * v172) + (float)(v514 * v173);
                  v175 = (float)(v521 * v172) + (float)(v148 * v173);
                  v176 = (float)(v516 * v172) + (float)(v149 * v173);
                  v177 = *(float *)(v171 + v170);
                  v178 = (float *)(v168 + v170);
                  *v178 = v153 + (float)(v174 + (float)(v150 * v177));
                  v178[1] = v154 + (float)(v175 + (float)(v151 * v177));
                  v178[2] = v155 + (float)(v176 + (float)(v152 * v177));
                  v170 += 12;
                }
                while (v167 != v170);
              }
              else
              {
                v169 = 0;
              }
              v422 = *(_QWORD *)(a2 + 104);
              v423 = *(_DWORD *)(v422 + 32);
              v424 = *(_DWORD *)(v422 + 36) & 0x7FFFFFFF;
              v425 = v423 + 3 * v156;
              v31 = v494;
              v12 = v495;
              v32 = v501;
              v34 = -0.5;
              if (v425 > v424)
              {
                v426 = 2 * *(_DWORD *)(v422 + 36);
                if (!v424)
                  v426 = 2;
                if (v425 <= v426)
                  v427 = v426;
                else
                  v427 = v425;
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v422 + 24, v427);
                v423 = *(_DWORD *)(v422 + 32);
              }
              v428 = *(_QWORD *)(v422 + 24);
              *(_DWORD *)(v422 + 32) = v425;
              if ((_DWORD)v156)
              {
                v429 = 0;
                v430 = v428 + 32 * v423;
                do
                {
                  getTriangle(v429, (uint64_t)v556, v169, v158, v159);
                  v431 = *(_OWORD *)v556;
                  v432 = *(_QWORD *)&v556[16];
                  *(_QWORD *)v430 = *(_QWORD *)v556;
                  *(_DWORD *)(v430 + 8) = DWORD2(v431);
                  *(_DWORD *)(v430 + 12) = -65281;
                  *(_DWORD *)(v430 + 16) = HIDWORD(v431);
                  *(_QWORD *)(v430 + 20) = v432;
                  *(_DWORD *)(v430 + 28) = -65281;
                  v433 = *(_QWORD *)&v556[24];
                  v434 = *(_DWORD *)v557;
                  *(_DWORD *)(v430 + 32) = HIDWORD(v431);
                  *(_QWORD *)(v430 + 36) = v432;
                  *(_DWORD *)(v430 + 44) = -65281;
                  *(_QWORD *)(v430 + 48) = v433;
                  *(_DWORD *)(v430 + 56) = v434;
                  *(_DWORD *)(v430 + 60) = -65281;
                  *(_QWORD *)(v430 + 64) = v433;
                  *(_DWORD *)(v430 + 72) = v434;
                  *(_DWORD *)(v430 + 76) = -65281;
                  *(_QWORD *)(v430 + 80) = v431;
                  ++v429;
                  *(_DWORD *)(v430 + 88) = DWORD2(v431);
                  *(_DWORD *)(v430 + 92) = -65281;
                  v430 += 96;
                }
                while ((_DWORD)v156 != v429);
              }
              if (v169)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v169);
              v165 = 0;
            }
          }
          else
          {
            v160 = (float32x4_t)vextq_s8(*(int8x16_t *)v498, *(int8x16_t *)v498, 8uLL);
            v161 = (float32x4_t)vextq_s8(*(int8x16_t *)v498, (int8x16_t)v160, 0xCuLL);
            v162 = vsubq_f32(*(float32x4_t *)v498, v161);
            *(uint64_t *)((char *)v161.i64 + 4) = *((_QWORD *)v498 + 2);
            v163 = vaddq_f32(*(float32x4_t *)v498, v161);
            v163.i32[3] = v162.i32[3];
            v164 = vsub_f32(*(float32x2_t *)(v498 + 4), (float32x2_t)vext_s8(*(int8x8_t *)v498, *(int8x8_t *)v160.f32, 4uLL));
            v160.i64[0] = 0x3F0000003F000000;
            v160.i64[1] = 0x3F0000003F000000;
            *(_OWORD *)v556 = xmmword_2260E5F10;
            *(_OWORD *)&v556[16] = xmmword_2260E5F10;
            *(_DWORD *)v557 = 1065353216;
            *(float32x4_t *)&v557[4] = vmulq_f32(v163, v160);
            *(float32x2_t *)&v557[20] = vmul_f32(v164, (float32x2_t)0x3F0000003F000000);
            if ((_DWORD)v156)
              v165 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v156, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 602);
            else
              v165 = 0;
            v31 = v494;
            v12 = v495;
            v32 = v501;
            v34 = -0.5;
            v544 = v165;
            v546 = v156;
            v545 = 0;
            *v489 = 0;
            *((_BYTE *)v489 + 8) = 0;
            ((void (*)(_BYTE *, _QWORD, float *, float *, uint64_t *))physx::Gu::gMidphaseBoxOverlapTable[*(unsigned __int16 *)(*(_QWORD *)&v70 + 8) - 3])(v556, *(_QWORD *)&v70, &v531, v89, &v544);
            v526 = v545;
            if (v493 != 0.0)
            {
              *(_DWORD *)(a2 + 36) = 1065353216;
              *v503 = 0;
              *(_QWORD *)(a2 + 48) = 0;
              *(_DWORD *)(a2 + 56) = 1065353216;
              *v504 = 0;
              *(_QWORD *)(a2 + 68) = 0;
              *(_DWORD *)(a2 + 76) = 1065353216;
              *v502 = 0;
              *(_QWORD *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              v358 = *(_QWORD *)(a2 + 104);
              v359 = *(_DWORD *)(v358 + 32);
              v360 = *(_DWORD *)(v358 + 36) & 0x7FFFFFFF;
              v361 = v359 + 3 * v526;
              if (v361 > v360)
              {
                v362 = 2 * *(_DWORD *)(v358 + 36);
                if (!v360)
                  v362 = 2;
                if (v361 <= v362)
                  v363 = v362;
                else
                  v363 = v361;
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v358 + 24, v363);
                v359 = *(_DWORD *)(v358 + 32);
              }
              v364 = *(_QWORD *)(v358 + 24);
              *(_DWORD *)(v358 + 32) = v361;
              if ((_DWORD)v526)
              {
                v365 = v364 + 32 * v359;
                v366 = (int *)v165;
                v367 = v526;
                do
                {
                  v368 = *v366++;
                  getTriangle(v368, (uint64_t)&v558, v157, v158, (uint64_t)v548, v159);
                  v33.n128_f32[0] = v558;
                  *(float *)v23.i32 = v559;
                  *(float *)&v24 = v560;
                  *(float *)v25.i32 = v561;
                  *(float *)&v26 = v562;
                  *(float *)&v27 = v563;
                  *(float *)v365 = v558;
                  *(_DWORD *)(v365 + 4) = v23.i32[0];
                  *(_DWORD *)(v365 + 8) = LODWORD(v24);
                  *(_DWORD *)(v365 + 12) = -65281;
                  *(_DWORD *)(v365 + 16) = v25.i32[0];
                  *(_DWORD *)(v365 + 20) = LODWORD(v26);
                  *(_DWORD *)(v365 + 24) = LODWORD(v27);
                  *(_DWORD *)(v365 + 28) = -65281;
                  *(float *)&v28 = v564;
                  v29.i32[0] = v565;
                  v369 = v566;
                  *(_DWORD *)(v365 + 32) = v25.i32[0];
                  *(_DWORD *)(v365 + 36) = LODWORD(v26);
                  *(_DWORD *)(v365 + 40) = LODWORD(v27);
                  *(_DWORD *)(v365 + 44) = -65281;
                  *(_DWORD *)(v365 + 48) = LODWORD(v28);
                  *(_DWORD *)(v365 + 52) = v29.i32[0];
                  *(_DWORD *)(v365 + 56) = v369;
                  *(_DWORD *)(v365 + 60) = -65281;
                  *(_DWORD *)(v365 + 64) = LODWORD(v28);
                  *(_DWORD *)(v365 + 68) = v29.i32[0];
                  *(_DWORD *)(v365 + 72) = v369;
                  *(_DWORD *)(v365 + 76) = -65281;
                  *(_DWORD *)(v365 + 80) = v33.n128_u32[0];
                  *(_DWORD *)(v365 + 84) = v23.i32[0];
                  *(_DWORD *)(v365 + 88) = LODWORD(v24);
                  *(_DWORD *)(v365 + 92) = -65281;
                  v365 += 96;
                  --v367;
                }
                while (v367);
              }
            }
            LODWORD(v156) = v526;
          }
          if (v497 != 0.0)
          {
            *(_DWORD *)(a2 + 36) = 1065353216;
            *v503 = 0;
            *(_QWORD *)(a2 + 48) = 0;
            *(_DWORD *)(a2 + 56) = 1065353216;
            *v504 = 0;
            *(_QWORD *)(a2 + 68) = 0;
            *(_DWORD *)(a2 + 76) = 1065353216;
            *v502 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_DWORD *)(a2 + 96) = 1065353216;
            *(_DWORD *)(a2 + 4) = -2004353024;
            if ((_DWORD)v156)
            {
              v435 = 0;
              do
              {
                if (v165)
                  v436 = *(_DWORD *)(v165 + 4 * v435);
                else
                  v436 = v435;
                getTriangle(v436, (uint64_t)v556, v157, v158, (uint64_t)v548, v159);
                v437 = (float)((float)(*(float *)&v556[4] - *(float *)&v556[16])
                             * (float)(*(float *)&v556[8] - *(float *)v557))
                     - (float)((float)(*(float *)&v556[8] - *(float *)&v556[20])
                             * (float)(*(float *)&v556[4] - *(float *)&v556[28]));
                v438 = (float)((float)(*(float *)&v556[8] - *(float *)&v556[20])
                             * (float)(*(float *)v556 - *(float *)&v556[24]))
                     - (float)((float)(*(float *)v556 - *(float *)&v556[12])
                             * (float)(*(float *)&v556[8] - *(float *)v557));
                v439 = (float)((float)(*(float *)v556 - *(float *)&v556[12])
                             * (float)(*(float *)&v556[4] - *(float *)&v556[28]))
                     - (float)((float)(*(float *)&v556[4] - *(float *)&v556[16])
                             * (float)(*(float *)v556 - *(float *)&v556[24]));
                v440 = (float)((float)(v438 * v438) + (float)(v437 * v437)) + (float)(v439 * v439);
                v441 = 0.0;
                v442 = 0.0;
                v443 = 0.0;
                if (v440 > 0.0)
                {
                  v444 = 1.0 / sqrtf(v440);
                  v443 = v437 * v444;
                  v442 = v438 * v444;
                  v441 = v439 * v444;
                }
                v558 = (float)((float)(*(float *)v556 + *(float *)&v556[12]) + *(float *)&v556[24]) * 0.33333;
                v559 = (float)((float)(*(float *)&v556[4] + *(float *)&v556[16]) + *(float *)&v556[28]) * 0.33333;
                v560 = (float)((float)(*(float *)&v556[8] + *(float *)&v556[20]) + *(float *)v557) * 0.33333;
                v561 = v558 + (float)(v497 * v443);
                v562 = v559 + (float)(v497 * v442);
                v563 = v560 + (float)(v497 * v441);
                v564 = sqrtf((float)((float)((float)(v497 * v442) * (float)(v497 * v442))+ (float)((float)(v497 * v443) * (float)(v497 * v443)))+ (float)((float)(v497 * v441) * (float)(v497 * v441)))* 0.15;
                physx::Cm::operator<<((_DWORD *)a2, &v558);
                ++v435;
              }
              while (v156 != v435);
            }
          }
          v33.n128_f32[0] = v490;
          if (v490 == 0.0
            || (v445 = *(_QWORD *)(*(_QWORD *)&v518 + 80)) == 0
            || (v523 = *(_QWORD *)(*(_QWORD *)&v518 + 48),
                v528 = *(_QWORD *)(*(_QWORD *)&v518 + 40),
                *(_DWORD *)(a2 + 4) = -256,
                !(_DWORD)v156))
          {
LABEL_208:
            if (v165)
              (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v165, v33);
            a1 = v491;
            v10 = v496;
            goto LABEL_211;
          }
          v446 = 0;
          v520 = *(_BYTE *)(*(_QWORD *)&v518 + 92);
          v447 = v156;
          v448 = -256;
          while (2)
          {
            if (v165)
              v449 = *(_DWORD *)(v165 + 4 * v446);
            else
              v449 = v446;
            v33.n128_f32[0] = getTriangle(v449, (uint64_t)v556, v528, v523, (uint64_t)v548, (v520 & 2) != 0);
            v450 = *(_BYTE *)(v445 + v449);
            if ((v450 & 8) != 0)
            {
              v451 = *(_QWORD *)(a2 + 104);
              v452 = *(_DWORD *)(v451 + 32);
              v453 = *(_DWORD *)(v451 + 36) & 0x7FFFFFFF;
              v454 = v452 + 1;
              if (v452 + 1 > v453)
              {
                v455 = 2 * *(_DWORD *)(v451 + 36);
                if (!v453)
                  v455 = 2;
                if (v454 <= v455)
                  v456 = v455;
                else
                  v456 = v454;
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v451 + 24, v456);
                v452 = *(_DWORD *)(v451 + 32);
                v448 = *(_DWORD *)(a2 + 4);
              }
              v457 = *(_QWORD *)(v451 + 24) + 32 * v452;
              *(_DWORD *)(v451 + 32) = v454;
              *(_QWORD *)v457 = *(_QWORD *)v556;
              *(_DWORD *)(v457 + 8) = *(_DWORD *)&v556[8];
              v33.n128_u32[1] = *(_DWORD *)&v556[16];
              *(_QWORD *)(v457 + 16) = *(_QWORD *)&v556[12];
              v33.n128_u32[0] = *(_DWORD *)&v556[20];
              *(_DWORD *)(v457 + 24) = *(_DWORD *)&v556[20];
              *(_DWORD *)(v457 + 28) = v448;
              *(_DWORD *)(v457 + 12) = v448;
              if ((v450 & 0x10) != 0)
                goto LABEL_191;
LABEL_181:
              if ((v450 & 0x20) != 0)
              {
LABEL_199:
                v465 = *(_QWORD *)(a2 + 104);
                v466 = *(_DWORD *)(v465 + 32);
                v467 = *(_DWORD *)(v465 + 36) & 0x7FFFFFFF;
                v468 = v466 + 1;
                if (v466 + 1 > v467)
                {
                  v469 = 2 * *(_DWORD *)(v465 + 36);
                  if (!v467)
                    v469 = 2;
                  if (v468 <= v469)
                    v470 = v469;
                  else
                    v470 = v468;
                  physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v465 + 24, v470);
                  v466 = *(_DWORD *)(v465 + 32);
                  v448 = *(_DWORD *)(a2 + 4);
                }
                v471 = *(_QWORD *)(v465 + 24) + 32 * v466;
                *(_DWORD *)(v465 + 32) = v468;
                *(_QWORD *)v471 = *(_QWORD *)v556;
                *(_DWORD *)(v471 + 8) = *(_DWORD *)&v556[8];
                v33.n128_u32[1] = *(_DWORD *)&v556[28];
                *(_QWORD *)(v471 + 16) = *(_QWORD *)&v556[24];
                v33.n128_u32[0] = *(_DWORD *)v557;
                *(_DWORD *)(v471 + 24) = *(_DWORD *)v557;
                *(_DWORD *)(v471 + 28) = v448;
                *(_DWORD *)(v471 + 12) = v448;
              }
            }
            else
            {
              if ((v450 & 0x10) == 0)
                goto LABEL_181;
LABEL_191:
              v458 = *(_QWORD *)(a2 + 104);
              v459 = *(_DWORD *)(v458 + 32);
              v460 = *(_DWORD *)(v458 + 36) & 0x7FFFFFFF;
              v461 = v459 + 1;
              if (v459 + 1 > v460)
              {
                v462 = 2 * *(_DWORD *)(v458 + 36);
                if (!v460)
                  v462 = 2;
                if (v461 <= v462)
                  v463 = v462;
                else
                  v463 = v461;
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v458 + 24, v463);
                v459 = *(_DWORD *)(v458 + 32);
                v448 = *(_DWORD *)(a2 + 4);
              }
              v464 = *(_QWORD *)(v458 + 24) + 32 * v459;
              *(_DWORD *)(v458 + 32) = v461;
              *(_QWORD *)v464 = *(_QWORD *)&v556[12];
              *(_DWORD *)(v464 + 8) = *(_DWORD *)&v556[20];
              v33.n128_u32[1] = *(_DWORD *)&v556[28];
              *(_QWORD *)(v464 + 16) = *(_QWORD *)&v556[24];
              v33.n128_u32[0] = *(_DWORD *)v557;
              *(_DWORD *)(v464 + 24) = *(_DWORD *)v557;
              *(_DWORD *)(v464 + 28) = v448;
              *(_DWORD *)(v464 + 12) = v448;
              if ((v450 & 0x20) != 0)
                goto LABEL_199;
            }
            if (v447 == ++v446)
              goto LABEL_208;
            continue;
          }
        }
LABEL_211:
        if (v508)
        {
          v33.n128_u64[1] = v529.u64[1];
          v472 = vmovn_s32(vcgtq_f32(v529, v507));
          v24 = COERCE_DOUBLE(vmovn_s32(vcgtq_f32(v507, v529)));
          v472.i16[3] = HIWORD(v24);
          v23 = (int8x16_t)vmovl_s16(v472);
          v25 = vbslq_s8(v23, (int8x16_t)v507, (int8x16_t)v529);
          v507 = (float32x4_t)v25;
          v33.n128_u32[1] = v530.u32[1];
          *(int32x2_t *)v23.i8 = vcgt_f32(v32, v530);
          v32 = (float32x2_t)vbsl_s8(*(int8x8_t *)v23.i8, (int8x8_t)v32, (int8x8_t)v530);
        }
        if (++v30 == v10)
        {
          if ((v508 & vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v507, (float32x4_t)vdupq_laneq_s32((int32x4_t)v507, 3)))).u16[0] & 1) != 0)
          {
            *(_DWORD *)(a2 + 4) = -65281;
            *(_DWORD *)(a2 + 36) = 1065353216;
            *v503 = 0;
            *(_QWORD *)(a2 + 48) = 0;
            *(_DWORD *)(a2 + 56) = 1065353216;
            *v504 = 0;
            *(_QWORD *)(a2 + 68) = 0;
            *(_DWORD *)(a2 + 76) = 1065353216;
            *v502 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_DWORD *)(a2 + 96) = 1065353216;
            *(float32x4_t *)v556 = v507;
            *(float32x2_t *)&v556[16] = v32;
            v556[24] = 1;
            physx::Cm::operator<<((_DWORD *)a2, (uint64_t *)v556);
          }
          return;
        }
      }
    }
  }
}

const char *physx::PxRigidDynamic::getConcreteTypeName(physx::PxRigidDynamic *this)
{
  return "PxRigidDynamic";
}

BOOL physx::PxRigidDynamic::isKindOf(physx::PxRigidDynamic *this, const char *a2)
{
  return !strcmp("PxRigidDynamic", a2) || physx::PxRigidBody::isKindOf(this, a2);
}

uint64_t physx::NpRigidDynamic::getType(physx::NpRigidDynamic *this)
{
  return 1;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getScene(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v1 + 2) >> 30) - 1) > 1)
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 16;
  else
    return 0;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

float physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getWorldBounds@<S0>(physx::PxRigidActor *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v4;
  float v5;
  float v6;
  float result;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;

  physx::NpShapeManager::getWorldBounds((physx::PxRigidActor *)((char *)a1 + 40), a1, (uint64_t)&v11);
  v4 = (float)(v12 + v14) * 0.5;
  v5 = (float)((float)(v14 - v12) * 0.5) * a3;
  v6 = v4 - v5;
  result = v4 + v5;
  v8 = vmul_f32(vadd_f32(v11, v13), (float32x2_t)0x3F0000003F000000);
  v9 = vmul_n_f32(vmul_f32(vsub_f32(v13, v11), (float32x2_t)0x3F0000003F000000), a3);
  *(float32x2_t *)a2 = vsub_f32(v8, v9);
  *(float *)(a2 + 8) = v6;
  *(float32x2_t *)(a2 + 12) = vadd_f32(v8, v9);
  *(float *)(a2 + 20) = result;
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::setActorFlag(int32x2_t *result, int a2, int a3, int8x8_t a4)
{
  int32x2_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  int32x2_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int32x2_t **v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  physx::Scb::Base *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  int32x2_t *v24;
  int32x2_t *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  int32x2_t **v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int32x2_t *v34;
  int32x2_t *v35;
  int v36;
  unsigned int v37;
  int32x2_t *v38;
  int32x2_t *v39;

  v6 = result;
  if (a2 != 8)
    goto LABEL_35;
  v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  v8 = (int32x2_t *)((char *)result + v7);
  v9 = *(unsigned int *)((char *)result[1].u32 + v7);
  if ((v9 & 1) != 0)
    v10 = (int32x2_t *)v8[2];
  else
    v10 = (int32x2_t *)((char *)v8 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v9 >> 24) & 0xF) + 3) + 12);
  v11 = (uint64_t)*v8;
  v12 = v10->u8[0];
  if ((v12 & 8) == 0 || (a3 & 1) != 0)
  {
    if ((v12 & 8) != 0 || !a3)
      goto LABEL_35;
    if (v11)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
      LODWORD(v9) = *(__int32 *)((char *)v6[1].i32 + v7);
    }
    v18 = v12 | 8;
    v19 = (physx::Scb::Base *)((char *)v6 + v7);
    v20 = BYTE3(v9) & 0xF;
    v21 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v20 + 3);
    v22 = v9 >> 30;
    if (v22 == 2)
    {
      v23 = *(_QWORD **)v19;
      if (*(_BYTE *)(*(_QWORD *)v19 + 7689))
        goto LABEL_28;
    }
    else if (v22 == 3)
    {
      v23 = *(_QWORD **)v19;
LABEL_28:
      v27 = (_BYTE *)*((_QWORD *)v19 + 2);
      if (!v27)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v23, v20).n128_u64[0];
        v27 = v28;
        *((_QWORD *)v19 + 2) = v28;
        v23 = *(_QWORD **)v19;
      }
      *v27 = v18;
      physx::Scb::Scene::scheduleForUpdate(v23, v19, a4);
      *((_DWORD *)v19 + 2) |= 1u;
LABEL_34:
      result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v6 + 672))(v6);
      goto LABEL_35;
    }
    v29 = (char *)v19 + v21;
    if (v18 != *((unsigned __int8 *)v19 + v21 + 12))
    {
      v29[12] = v18;
      if (*(_QWORD *)v29)
        (*(void (**)(_QWORD))(**(_QWORD **)v29 + 16))(*(_QWORD *)v29);
    }
    goto LABEL_34;
  }
  result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 680))(result);
  v13 = v12 & 0xFFFFFFF7;
  v14 = (int32x2_t **)((char *)v6 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18));
  v15 = *((unsigned int *)v14 + 2);
  v16 = (v15 >> 24) & 0xF;
  v17 = v15 >> 30;
  if (v17 == 2)
  {
    result = *v14;
    if ((*v14)[961].i8[1])
      goto LABEL_18;
LABEL_21:
    v26 = (char *)v14 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v16 + 3);
    if (v13 != v26[12])
    {
      v26[12] = v13;
      result = *(int32x2_t **)v26;
      if (*(_QWORD *)v26)
        result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
    }
    goto LABEL_24;
  }
  if (v17 != 3)
    goto LABEL_21;
  result = *v14;
LABEL_18:
  v24 = v14[2];
  if (!v24)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v16).n128_u64[0];
    v24 = v25;
    v14[2] = v25;
    result = *v14;
  }
  v24->i8[0] = v13;
  result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v14, a4);
  *((_DWORD *)v14 + 2) |= 1u;
LABEL_24:
  if (v11 && *(_QWORD *)&v6[4])
    result = physx::NpActor::addConstraintsToSceneInternal(v6 + 3);
LABEL_35:
  v30 = (int32x2_t **)((char *)v6 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18));
  v31 = *((unsigned int *)v30 + 2);
  if (a3)
  {
    if ((v31 & 1) != 0)
    {
      v34 = v30[2];
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
    }
    else
    {
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
      v34 = (int32x2_t *)(v33 + 12);
    }
    v36 = v34->u8[0] | a2;
  }
  else
  {
    if ((v31 & 1) != 0)
    {
      v35 = v30[2];
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
    }
    else
    {
      LODWORD(v32) = BYTE3(v31) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
      v35 = (int32x2_t *)(v33 + 12);
    }
    v36 = v35->u8[0] & ~a2;
  }
  v37 = v31 >> 30;
  if (v37 == 2)
  {
    result = *v30;
    if ((*v30)[961].i8[1])
      goto LABEL_48;
  }
  else if (v37 == 3)
  {
    result = *v30;
LABEL_48:
    v38 = v30[2];
    if (!v38)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v32).n128_u64[0];
      v38 = v39;
      v30[2] = v39;
      result = *v30;
    }
    v38->i8[0] = v36;
    result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v30, a4);
    *((_DWORD *)v30 + 2) |= 1u;
    return result;
  }
  if (v36 != v33[12])
  {
    v33[12] = v36;
    result = *(int32x2_t **)v33;
    if (*(_QWORD *)v33)
      return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::setActorFlags(int32x2_t *result, _BYTE *a2, int8x8_t a3)
{
  int32x2_t *v4;
  uint64_t v5;
  int32x2_t *v6;
  unint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int32x2_t **v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  physx::Scb::Base *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  int32x2_t *v22;
  int32x2_t *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  int32x2_t **v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int32x2_t *v33;
  int32x2_t *v34;
  char *v35;

  v4 = result;
  v5 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  v6 = (int32x2_t *)((char *)result + v5);
  v7 = *(unsigned int *)((char *)result[1].u32 + v5);
  if ((v7 & 1) != 0)
    v8 = (int32x2_t *)v6[2];
  else
    v8 = (int32x2_t *)((char *)v6 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v7 >> 24) & 0xF) + 3) + 12);
  v9 = (uint64_t)*v6;
  v10 = v8->u8[0];
  if ((*a2 & 8) != 0 || (v10 & 8) == 0)
  {
    if ((*a2 & 8) == 0 || (v10 & 8) != 0)
      goto LABEL_34;
    if (v9)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      v5 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
      LODWORD(v7) = *(__int32 *)((char *)v4[1].i32 + v5);
    }
    v16 = v10 | 8;
    v17 = (physx::Scb::Base *)((char *)v4 + v5);
    v18 = BYTE3(v7) & 0xF;
    v19 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v18 + 3);
    v20 = v7 >> 30;
    if (v20 == 2)
    {
      v21 = *(_QWORD **)v17;
      if (*(_BYTE *)(*(_QWORD *)v17 + 7689))
        goto LABEL_27;
    }
    else if (v20 == 3)
    {
      v21 = *(_QWORD **)v17;
LABEL_27:
      v25 = (_BYTE *)*((_QWORD *)v17 + 2);
      if (!v25)
      {
        a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v21, v18).n128_u64[0];
        v25 = v26;
        *((_QWORD *)v17 + 2) = v26;
        v21 = *(_QWORD **)v17;
      }
      *v25 = v16;
      physx::Scb::Scene::scheduleForUpdate(v21, v17, a3);
      *((_DWORD *)v17 + 2) |= 1u;
LABEL_33:
      result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v4 + 672))(v4);
      goto LABEL_34;
    }
    v27 = (char *)v17 + v19;
    if (v16 != *((unsigned __int8 *)v17 + v19 + 12))
    {
      v27[12] = v16;
      if (*(_QWORD *)v27)
        (*(void (**)(_QWORD))(**(_QWORD **)v27 + 16))(*(_QWORD *)v27);
    }
    goto LABEL_33;
  }
  result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 680))(result);
  v11 = v10 & 0xFFFFFFF7;
  v12 = (int32x2_t **)((char *)v4 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18));
  v13 = *((unsigned int *)v12 + 2);
  v14 = (v13 >> 24) & 0xF;
  v15 = v13 >> 30;
  if (v15 == 2)
  {
    result = *v12;
    if ((*v12)[961].i8[1])
      goto LABEL_17;
LABEL_20:
    v24 = (char *)v12 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v14 + 3);
    if (v11 != v24[12])
    {
      v24[12] = v11;
      result = *(int32x2_t **)v24;
      if (*(_QWORD *)v24)
        result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
    }
    goto LABEL_23;
  }
  if (v15 != 3)
    goto LABEL_20;
  result = *v12;
LABEL_17:
  v22 = v12[2];
  if (!v22)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v14).n128_u64[0];
    v22 = v23;
    v12[2] = v23;
    result = *v12;
  }
  v22->i8[0] = v11;
  result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v12, a3);
  *((_DWORD *)v12 + 2) |= 1u;
LABEL_23:
  if (v9 && *(_QWORD *)&v4[4])
    result = physx::NpActor::addConstraintsToSceneInternal(v4 + 3);
LABEL_34:
  v28 = *a2;
  v29 = (int32x2_t **)((char *)v4 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18));
  v30 = *((unsigned int *)v29 + 2);
  v31 = (v30 >> 24) & 0xF;
  v32 = v30 >> 30;
  if (v32 == 2)
  {
    result = *v29;
    if ((*v29)[961].i8[1])
      goto LABEL_38;
  }
  else if (v32 == 3)
  {
    result = *v29;
LABEL_38:
    v33 = v29[2];
    if (!v33)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v31).n128_u64[0];
      v33 = v34;
      v29[2] = v34;
      result = *v29;
    }
    v33->i8[0] = v28;
    result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v29, a3);
    *((_DWORD *)v29 + 2) |= 1u;
    return result;
  }
  v35 = (char *)v29 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v31 + 3);
  if (v28 != v35[12])
  {
    v35[12] = v28;
    result = *(int32x2_t **)v35;
    if (*(_QWORD *)v35)
      return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getActorFlags@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;

  v2 = result + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  v3 = *(unsigned int *)(v2 + 8);
  if ((v3 & 1) != 0)
    v4 = *(_BYTE **)(v2 + 16);
  else
    v4 = (_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + v2 + 12);
  *a2 = *v4;
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxRigidDynamic>::setDominanceGroup(uint64_t a1, char a2, int8x8_t a3)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  v4 = (_DWORD *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  v5 = v4[2];
  v6 = (v5 >> 24) & 0xF;
  v7 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  v8 = v5 >> 30;
  if (v8 == 2)
  {
    v9 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v8 == 3)
  {
    v9 = *(_QWORD **)v4;
LABEL_5:
    v10 = *((_QWORD *)v4 + 2);
    if (!v10)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v9, v6).n128_u64[0];
      v10 = v11;
      *((_QWORD *)v4 + 2) = v11;
      v9 = *(_QWORD **)v4;
    }
    *(_BYTE *)(v10 + 1) = a2;
    result = physx::Scb::Scene::scheduleForUpdate(v9, (physx::Scb::Base *)v4, a3);
    v4[2] |= 2u;
    return result;
  }
  *((_BYTE *)v4 + v7 + 14) = a2;
  result = *(_QWORD **)((char *)v4 + v7);
  if (result)
    return physx::Sc::ActorSim::setActorsInteractionsDirty(result, 8, 0, 1, a3);
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getDominanceGroup(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 *v3;

  v1 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  v2 = *(unsigned int *)(v1 + 8);
  if ((v2 & 2) != 0)
    v3 = (unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 1);
  else
    v3 = (unsigned __int8 *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v2 >> 24) & 0xF) + 3) + v1 + 14);
  return *v3;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::setOwnerClient(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v9 = result + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  if (*(_QWORD *)v9)
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpActorTemplate.h";
    v11 = "Attempt to set the client id when an actor is already in a scene.";
    v12 = physx::shdfnd::Foundation::mInstance;
    v13 = 196;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  v14 = *(unsigned int *)(v9 + 8);
  if (v14 >> 30 == 3 || v14 >> 30 == 2 && MEMORY[0x1E09])
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbActor.h";
    v11 = "Attempt to set the client id when an actor is buffering";
    v12 = physx::shdfnd::Foundation::mInstance;
    v13 = 182;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  *(_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v14 >> 24) & 0xF) + 3) + v9 + 11) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getOwnerClient(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  return *(unsigned __int8 *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v1 + 11) & 0xF) + 3)
                            + v1
                            + 11);
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getAggregate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 80);
  if (!(_DWORD)v2)
    return 0;
  for (i = *(_QWORD *)(v1 + 72) + 8; *(_BYTE *)(i - 8) != 1; i += 16)
  {
    if (!--v2)
      return 0;
  }
  return *(_QWORD *)i;
}

float physx::NpRigidDynamic::getGlobalPose@<S0>(physx::NpRigidDynamic *this@<X0>, float *a2@<X8>)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float result;

  if ((*((_BYTE *)this + 381) & 4) != 0)
    v2 = (float *)(*((_QWORD *)this + 14) + 224);
  else
    v2 = (float *)((char *)this + 176);
  v3 = v2[4] * -2.0;
  v4 = v2[5] * -2.0;
  v5 = v2[6] * -2.0;
  v7 = v2[2];
  v6 = v2[3];
  v8 = (float)(v6 * v6) + -0.5;
  v9 = v2[1];
  v10 = (float)((float)(v4 * v9) + (float)(*v2 * v3)) + (float)(v7 * v5);
  v11 = (float)((float)(v3 * v8) - (float)((float)((float)(v9 * v5) - (float)(v7 * v4)) * v6)) + (float)(*v2 * v10);
  v12 = (float)((float)(v4 * v8) - (float)((float)((float)(v7 * v3) - (float)(*v2 * v5)) * v6)) + (float)(v9 * v10);
  v13 = (float)((float)(v5 * v8) - (float)((float)((float)(*v2 * v4) - (float)(v9 * v3)) * v6)) + (float)(v7 * v10);
  v14 = v11 + v11;
  v15 = v12 + v12;
  v16 = v13 + v13;
  v17 = *((float *)this + 83);
  v18 = (float)(v17 * v17) + -0.5;
  v19 = *((float *)this + 80);
  v20 = *((float *)this + 81);
  v21 = *((float *)this + 82);
  v22 = (float)((float)(v20 * (float)(v12 + v12)) + (float)(v19 * v14)) + (float)(v21 * v16);
  v23 = (float)((float)(v17 * (float)((float)(v20 * v16) - (float)(v21 * v15))) + (float)(v14 * v18))
      + (float)(v19 * v22);
  v24 = (float)((float)(v17 * (float)((float)(v21 * v14) - (float)(v19 * v16))) + (float)(v15 * v18))
      + (float)(v20 * v22);
  v25 = (float)((float)(v17 * (float)((float)(v19 * v15) - (float)(v20 * v14))) + (float)(v16 * v18))
      + (float)(v21 * v22);
  v26 = *((float *)this + 84) + v23;
  v27 = *((float *)this + 85) + v24;
  v28 = *((float *)this + 86);
  v29 = (float)((float)((float)(v6 * v20) - (float)(v17 * v9)) - (float)(v21 * *v2)) + (float)(v7 * v19);
  v30 = (float)((float)((float)(v6 * v21) - (float)(v17 * v7)) - (float)(v19 * v9)) + (float)(*v2 * v20);
  v31 = *v2 * v19;
  *a2 = (float)((float)((float)(v6 * v19) - (float)(v17 * *v2)) - (float)(v20 * v7)) + (float)(v9 * v21);
  a2[1] = v29;
  a2[2] = v30;
  a2[3] = (float)((float)(v31 + (float)(v17 * v6)) + (float)(v20 * v9)) + (float)(v21 * v7);
  result = v28 + v25;
  a2[4] = v26;
  a2[5] = v27;
  a2[6] = v28 + v25;
  return result;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::NpRigidActorTemplate<physx::PxRigidDynamic>::attachShape(a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::detachShape(physx::PxRigidActor *a1, physx::NpShape *a2, char a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  physx::NpShapeManager *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v13 = (physx::PxRigidActor *)((char *)a1 + 40);
  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 247, "PxRigidActor::detachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v18);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  result = physx::NpShapeManager::detachShape(v13, a2, a1, a3, a4);
  if ((result & 1) == 0)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 253, "PxRigidActor::detachShape: shape is not attached to this actor!", v15, v16, v17, a10);
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getShapes(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1)
    v4 = (_QWORD *)*v4;
  v6 = (v5 - a4) & ~((v5 - a4) >> 31);
  if (v6 >= a3)
    result = a3;
  else
    result = v6;
  if ((_DWORD)result)
  {
    v8 = &v4[a4];
    v9 = result;
    do
    {
      v10 = *v8++;
      *a2++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getNbConstraints(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 80);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(result) = 0;
  v4 = *(unsigned __int8 **)(v1 + 72);
  do
  {
    v5 = *v4;
    v4 += 16;
    if (v5)
      result = result;
    else
      result = (result + 1);
    --v2;
  }
  while (v2);
  return result;
}

unint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getConstraints(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return physx::NpActor::getConnectors<physx::Gu::BVHStructure>(a1 + 24, 0, a2, a3, a4);
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getCMassLocalPose@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  if ((*(_BYTE *)(a1 + 381) & 4) != 0)
    v2 = *(_QWORD *)(a1 + 112) + 224;
  else
    v2 = a1 + 176;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 16);
  result = *(float *)(v2 + 24);
  *(float *)(a2 + 24) = result;
  return result;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMass(uint64_t *result, double a2)
{
  uint64_t *v2;
  physx::Scb::Base *v3;
  float v4;
  BOOL v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v3 = (physx::Scb::Base *)(result + 12);
  v4 = 1.0 / *(float *)&a2;
  v5 = *(float *)&a2 <= 0.0;
  LODWORD(a2) = 0;
  if (v5)
    v6 = 0.0;
  else
    v6 = v4;
  v7 = *((_DWORD *)result + 26);
  if (v7 >> 30 == 2)
  {
    result = *(uint64_t **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_8;
  }
  else if (v7 >> 30 == 3)
  {
    result = *(uint64_t **)v3;
LABEL_8:
    v8 = v2[14];
    if (!v8)
    {
      *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v7) & 0xF).n128_u64[0];
      v8 = v9;
      v2[14] = v9;
      result = (uint64_t *)v2[12];
    }
    *(float *)(v8 + 164) = v6;
    result = physx::Scb::Scene::scheduleForUpdate(result, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 1u;
    return result;
  }
  v10 = v2[38];
  if (v10 && *(_BYTE *)(v10 + 31) == 1)
  {
    *(float *)(v10 + 44) = v6;
  }
  else
  {
    *((float *)v2 + 67) = v6;
    return updateBodySim(v2 + 16);
  }
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMass(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  float result;

  if ((*(_BYTE *)(a1 + 380) & 1) != 0)
  {
    v2 = (float *)(*(_QWORD *)(a1 + 112) + 164);
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 304);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = (float *)(v1 + 44);
    else
      v2 = (float *)(a1 + 268);
  }
  result = 0.0;
  if (*v2 > 0.0)
    return 1.0 / *v2;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getInvMass(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 380) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 112) + 164;
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 304);
    if (v1 && *(_BYTE *)(v1 + 31) == 1)
      v2 = v1 + 44;
    else
      v2 = a1 + 268;
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMassSpaceInertiaTensor(uint64_t a1, float32x2_t *a2)
{
  physx::Scb::Base *v3;
  int8x8_t v9;
  float v10;
  int8x8_t v11;
  float v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *result;
  int8x8_t v18;
  float v19;

  v3 = (physx::Scb::Base *)(a1 + 96);
  __asm { FMOV            V2.2S, #1.0 }
  v11 = (int8x8_t)vdiv_f32(_D2, *a2);
  v9 = vbic_s8(v11, (int8x8_t)vceqz_f32(*a2));
  v11.i32[0] = a2[1].i32[0];
  v10 = 1.0 / *(float *)v11.i32;
  _ZF = *(float *)v11.i32 == 0.0;
  v11.i32[0] = 0;
  if (_ZF)
    v12 = 0.0;
  else
    v12 = v10;
  v18 = v9;
  v19 = v12;
  v13 = *(_DWORD *)(a1 + 104);
  if (v13 >> 30 == 2)
  {
    v14 = *(_QWORD **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_8;
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v18);
  }
  if (v13 >> 30 != 3)
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v18);
  v14 = *(_QWORD **)v3;
LABEL_8:
  v15 = *(_QWORD *)(a1 + 112);
  if (!v15)
  {
    v11 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v14, HIBYTE(v13) & 0xF).n128_u64[0];
    v15 = v16;
    *(_QWORD *)(a1 + 112) = v16;
    v14 = *(_QWORD **)(a1 + 96);
  }
  *(int8x8_t *)(v15 + 168) = v9;
  *(float *)(v15 + 176) = v12;
  result = physx::Scb::Scene::scheduleForUpdate(v14, v3, v11);
  *(_DWORD *)(a1 + 380) |= 2u;
  return result;
}

float32x2_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMassSpaceInertiaTensor@<X0>(float32x2_t *result@<X0>, uint64_t a2@<X8>)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float v4;
  float v5;
  float v7;

  if ((result[47].i8[4] & 2) != 0)
  {
    v3 = (float32x2_t *)(*(_QWORD *)&result[14] + 168);
  }
  else
  {
    v2 = (float32x2_t *)result[38];
    if (v2 && v2[3].i8[7] == 1)
      v3 = v2 + 4;
    else
      v3 = result + 32;
  }
  v4 = v3[1].f32[0];
  v5 = 1.0 / v4;
  _ZF = v4 == 0.0;
  v7 = 0.0;
  if (!_ZF)
    v7 = v5;
  __asm { FMOV            V3.2S, #1.0 }
  *(int8x8_t *)a2 = vbic_s8((int8x8_t)vdiv_f32(_D3, *v3), (int8x8_t)vceqz_f32(*v3));
  *(float *)(a2 + 8) = v7;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMassSpaceInvInertiaTensor@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  if ((*(_BYTE *)(a1 + 380) & 2) != 0)
  {
    v3 = *(_QWORD *)(a1 + 112) + 168;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 304);
    if (v2 && *(_BYTE *)(v2 + 31) == 1)
      v3 = v2 + 32;
    else
      v3 = a1 + 256;
  }
  *(_QWORD *)a2 = *(_QWORD *)v3;
  result = *(float *)(v3 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getLinearVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 348);
  result = *(float *)(a1 + 356);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getAngularVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 360);
  result = *(float *)(a1 + 368);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setRigidBodyFlag(uint64_t a1, int a2, int a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  if ((*(_BYTE *)(a1 + 381) & 0x40) != 0)
    v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 112) + 348);
  else
    v11 = (unsigned __int8 *)(a1 + 172);
  v12 = *v11;
  if (a3)
    v13 = v12 | a2;
  else
    v13 = v12 & ~a2;
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v31);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v31);
    v13 &= ~0x20u;
  }
  v14 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = *v14;
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
  }
  if (v16)
    v17 = v16 + 32;
  else
    v17 = 0;
  if ((v12 & 1) == 0 || (v13 & 1) != 0)
  {
    if ((v12 & 1) == 0 && (v13 & 1) != 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) == 2)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
        return;
      }
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        v28 = *(_QWORD *)(a1 + 304);
        if (v28)
        {
          if (*(_BYTE *)(v28 + 31) != 1)
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), 1, 0);
        }
      }
      if (v16)
      {
        a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a4;
      }
      goto LABEL_64;
    }
LABEL_54:
    if ((v12 & 1) != 0
      && (v13 & 1) != 0
      && ((v13 ^ v12) & 2) != 0
      && ((*(_BYTE *)(a1 + 381) & 0x80) != 0
       || *(_DWORD *)(a1 + 104) >> 30 != 3
       && (v30 = *(_QWORD *)(a1 + 304)) != 0
       && *(_BYTE *)(v30 + 31) == 1
       && *(_BYTE *)(v30 + 28)))
    {
      if (v16)
      {
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
      }
    }
LABEL_64:
    v32 = v13;
    physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v32, *(int8x8_t *)&a4);
    return;
  }
  v18 = *(unsigned __int16 *)(a1 + 48);
  v19 = a1 + 40;
  if ((_DWORD)v18 != 1)
  {
    if (*(_WORD *)(a1 + 48))
    {
      v19 = *(_QWORD *)(a1 + 40);
      goto LABEL_24;
    }
LABEL_28:
    if ((v12 & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 381) & 0x80) != 0)
      {
        if (!v16)
        {
LABEL_51:
          if (*(_DWORD *)(a1 + 104) >> 30 == 1)
          {
            v29 = *(_QWORD *)(a1 + 304);
            if (v29)
              physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), *(unsigned __int8 *)(v29 + 31) == 1);
          }
          goto LABEL_54;
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 104) >> 30 == 3)
          goto LABEL_35;
        v24 = *(_QWORD *)(a1 + 304);
        if (!v24 || *(_BYTE *)(v24 + 31) != 1 || !*(_BYTE *)(v24 + 28) || !v16)
          goto LABEL_35;
      }
      physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
      ++*(_DWORD *)(v16 + 8732);
LABEL_50:
      a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
      *(double *)(v17 + 4668) = a4;
      goto LABEL_51;
    }
LABEL_35:
    if (!v16)
      goto LABEL_51;
    goto LABEL_50;
  }
LABEL_24:
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v19 + 312))(&v33);
    if ((v33 & 1) != 0)
    {
      v23 = *(_DWORD *)(*(_QWORD *)v19 + 152);
      if ((v23 | 4) == 5 || v23 == 6)
        break;
    }
    v19 += 8;
    if (!--v18)
      goto LABEL_28;
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v31);
}

void physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setRigidBodyFlags(uint64_t a1, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  if ((*(_BYTE *)(a1 + 381) & 0x40) != 0)
    v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 112) + 348);
  else
    v11 = (unsigned __int8 *)(a1 + 172);
  v12 = *v11;
  v13 = *a2;
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v31);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v31);
    v13 &= 0xDFu;
  }
  v14 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = *v14;
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
  }
  if (v16)
    v17 = v16 + 32;
  else
    v17 = 0;
  if ((v12 & 1) == 0 || (v13 & 1) != 0)
  {
    if ((v12 & 1) == 0 && (v13 & 1) != 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) == 2)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
        return;
      }
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        v28 = *(_QWORD *)(a1 + 304);
        if (v28)
        {
          if (*(_BYTE *)(v28 + 31) != 1)
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), 1, 0);
        }
      }
      if (v16)
      {
        a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a3;
      }
      goto LABEL_61;
    }
LABEL_51:
    if ((v12 & 1) != 0
      && (v13 & 1) != 0
      && ((v13 ^ v12) & 2) != 0
      && ((*(_BYTE *)(a1 + 381) & 0x80) != 0
       || *(_DWORD *)(a1 + 104) >> 30 != 3
       && (v30 = *(_QWORD *)(a1 + 304)) != 0
       && *(_BYTE *)(v30 + 31) == 1
       && *(_BYTE *)(v30 + 28)))
    {
      if (v16)
      {
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
      }
    }
LABEL_61:
    v32 = v13;
    physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v32, *(int8x8_t *)&a3);
    return;
  }
  v18 = *(unsigned __int16 *)(a1 + 48);
  v19 = a1 + 40;
  if ((_DWORD)v18 != 1)
  {
    if (*(_WORD *)(a1 + 48))
    {
      v19 = *(_QWORD *)(a1 + 40);
      goto LABEL_21;
    }
LABEL_25:
    if ((v12 & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 381) & 0x80) != 0)
      {
        if (!v16)
        {
LABEL_48:
          if (*(_DWORD *)(a1 + 104) >> 30 == 1)
          {
            v29 = *(_QWORD *)(a1 + 304);
            if (v29)
              physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 4384), *(unsigned __int8 *)(v29 + 31) == 1);
          }
          goto LABEL_51;
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 104) >> 30 == 3)
          goto LABEL_32;
        v24 = *(_QWORD *)(a1 + 304);
        if (!v24 || *(_BYTE *)(v24 + 31) != 1 || !*(_BYTE *)(v24 + 28) || !v16)
          goto LABEL_32;
      }
      physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
      ++*(_DWORD *)(v16 + 8732);
LABEL_47:
      a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
      *(double *)(v17 + 4668) = a3;
      goto LABEL_48;
    }
LABEL_32:
    if (!v16)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_21:
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v19 + 312))(&v33);
    if ((v33 & 1) != 0)
    {
      v23 = *(_DWORD *)(*(_QWORD *)v19 + 152);
      if ((v23 | 4) == 5 || v23 == 6)
        break;
    }
    v19 += 8;
    if (!--v18)
      goto LABEL_25;
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v31);
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getRigidBodyFlags@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  if ((*(_BYTE *)(result + 381) & 0x40) != 0)
    v2 = (_BYTE *)(*(_QWORD *)(result + 112) + 348);
  else
    v2 = (_BYTE *)(result + 172);
  *a2 = *v2;
  return result;
}

_QWORD *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMinCCDAdvanceCoefficient(_QWORD *result, int8x8_t a2)
{
  __int32 v2;
  _QWORD *v3;
  physx::Scb::Base *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2.i32[0];
  v3 = result;
  v4 = (physx::Scb::Base *)(result + 12);
  v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *((_DWORD *)v3 + 51) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(_QWORD **)v4;
LABEL_5:
  v6 = v3[14];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    v3[14] = v7;
    result = (_QWORD *)v3[12];
  }
  *(_DWORD *)(v6 + 200) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 95) |= 0x80u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMinCCDAdvanceCoefficient(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 380) & 0x80) != 0)
    v1 = *(_QWORD *)(a1 + 112) + 200;
  else
    v1 = a1 + 204;
  return *(float *)v1;
}

float *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMaxDepenetrationVelocity(float *result, double a2)
{
  float *v2;
  physx::Scb::Base *v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = (physx::Scb::Base *)(result + 24);
  v4 = -*(float *)&a2;
  v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    result = *(float **)v3;
    if (*(_BYTE *)(*(_QWORD *)v3 + 7689))
      goto LABEL_5;
LABEL_8:
    v2[55] = v4;
    return result;
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  result = *(float **)v3;
LABEL_5:
  v6 = *((_QWORD *)v2 + 14);
  if (!v6)
  {
    *(_QWORD *)&a2 = physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    *((_QWORD *)v2 + 14) = v7;
    result = (float *)*((_QWORD *)v2 + 12);
  }
  *(float *)(v6 + 252) = v4;
  result = (float *)physx::Scb::Scene::scheduleForUpdate(result, v3, *(int8x8_t *)&a2);
  *((_DWORD *)v2 + 95) |= 0x800u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMaxDepenetrationVelocity(uint64_t a1)
{
  float *v1;

  if ((*(_BYTE *)(a1 + 381) & 8) != 0)
    v1 = (float *)(*(_QWORD *)(a1 + 112) + 252);
  else
    v1 = (float *)(a1 + 220);
  return -*v1;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMaxContactImpulse(uint64_t a1, int8x8_t a2)
{
  __int32 v2;
  physx::Scb::Base *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;

  v2 = a2.i32[0];
  v4 = (physx::Scb::Base *)(a1 + 96);
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 >> 30 == 2)
  {
    v6 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
LABEL_8:
    *(_DWORD *)(a1 + 272) = a2.i32[0];
    return updateBodySim((uint64_t *)(a1 + 128));
  }
  if (v5 >> 30 != 3)
    goto LABEL_8;
  v6 = *(_QWORD **)v4;
LABEL_5:
  v7 = *(_QWORD *)(a1 + 112);
  if (!v7)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    v7 = v8;
    *(_QWORD *)(a1 + 112) = v8;
    v6 = *(_QWORD **)(a1 + 96);
  }
  *(_DWORD *)(v7 + 260) = v2;
  result = physx::Scb::Scene::scheduleForUpdate(v6, v4, a2);
  *(_DWORD *)(a1 + 380) |= 0x2000u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMaxContactImpulse(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 381) & 0x20) != 0)
    v1 = *(_QWORD *)(a1 + 112) + 260;
  else
    v1 = a1 + 272;
  return *(float *)v1;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getInternalIslandNodeIndex(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    return *(_DWORD *)(v1 + 176) >> 7;
  else
    return 0x1FFFFFFLL;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  return physx::NpActor::exportExtraData((_QWORD *)(a1 + 24), a2);
}

_QWORD *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::importExtraData(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(unsigned __int16 *)(a1 + 48);
  if (v2 >= 2)
  {
    v3 = (*(_QWORD *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a2 + 8) = v3 + 8 * v2;
    *(_QWORD *)(a1 + 40) = v3;
  }
  v4 = *(unsigned __int16 *)(a1 + 64);
  if (v4 >= 2)
  {
    v5 = (*(_QWORD *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a2 + 8) = v5 + 8 * v4;
    *(_QWORD *)(a1 + 56) = v5;
  }
  return physx::NpActor::importExtraData((_QWORD *)(a1 + 24), a2);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::resolveReferences(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = (_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48);
  if ((_DWORD)v5 != 1)
  {
    if (!*(_WORD *)(a1 + 48))
      return physx::NpActor::resolveReferences(a1 + 24, a2);
    v4 = (_QWORD *)*v4;
  }
  v6 = 0;
  do
  {
    if (v4[v6])
    {
      v7 = (**a2)(a2, 0x80000000);
      v4[v6] = v7;
    }
    else
    {
      v7 = 0;
    }
    v8 = (unsigned int *)(v7 + 32);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if ((*(_DWORD *)(v7 + 264) & 0x80000000) != 0)
      *(_QWORD *)(v7 + 40) = a1;
    v10 = (unsigned int *)(v7 + 264);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    ++v6;
  }
  while (v6 != v5);
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

const char *physx::PxRigidStatic::getConcreteTypeName(physx::PxRigidStatic *this)
{
  return "PxRigidStatic";
}

BOOL physx::PxRigidStatic::isKindOf(physx::PxRigidStatic *this, const char *a2)
{
  return !strcmp("PxRigidStatic", a2) || physx::PxRigidActor::isKindOf(this, a2);
}

uint64_t physx::NpRigidStatic::getType(physx::NpRigidStatic *this)
{
  return 0;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getScene(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v1 + 2) >> 30) - 1) > 1)
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 16;
  else
    return 0;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

float physx::NpRigidActorTemplate<physx::PxRigidStatic>::getWorldBounds@<S0>(physx::PxRigidActor *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v4;
  float v5;
  float v6;
  float result;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;

  physx::NpShapeManager::getWorldBounds((physx::PxRigidActor *)((char *)a1 + 40), a1, (uint64_t)&v11);
  v4 = (float)(v12 + v14) * 0.5;
  v5 = (float)((float)(v14 - v12) * 0.5) * a3;
  v6 = v4 - v5;
  result = v4 + v5;
  v8 = vmul_f32(vadd_f32(v11, v13), (float32x2_t)0x3F0000003F000000);
  v9 = vmul_n_f32(vmul_f32(vsub_f32(v13, v11), (float32x2_t)0x3F0000003F000000), a3);
  *(float32x2_t *)a2 = vsub_f32(v8, v9);
  *(float *)(a2 + 8) = v6;
  *(float32x2_t *)(a2 + 12) = vadd_f32(v8, v9);
  *(float *)(a2 + 20) = result;
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidStatic>::setActorFlag(int32x2_t *result, int a2, int a3, int8x8_t a4)
{
  int32x2_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  int32x2_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int32x2_t **v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  physx::Scb::Base *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  int32x2_t *v24;
  int32x2_t *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  int32x2_t **v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int32x2_t *v34;
  int32x2_t *v35;
  int v36;
  unsigned int v37;
  int32x2_t *v38;
  int32x2_t *v39;

  v6 = result;
  if (a2 != 8)
    goto LABEL_35;
  v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  v8 = (int32x2_t *)((char *)result + v7);
  v9 = *(unsigned int *)((char *)result[1].u32 + v7);
  if ((v9 & 1) != 0)
    v10 = (int32x2_t *)v8[2];
  else
    v10 = (int32x2_t *)((char *)v8 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v9 >> 24) & 0xF) + 3) + 12);
  v11 = (uint64_t)*v8;
  v12 = v10->u8[0];
  if ((v12 & 8) == 0 || (a3 & 1) != 0)
  {
    if ((v12 & 8) != 0 || !a3)
      goto LABEL_35;
    if (v11)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      v7 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
      LODWORD(v9) = *(__int32 *)((char *)v6[1].i32 + v7);
    }
    v18 = v12 | 8;
    v19 = (physx::Scb::Base *)((char *)v6 + v7);
    v20 = BYTE3(v9) & 0xF;
    v21 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v20 + 3);
    v22 = v9 >> 30;
    if (v22 == 2)
    {
      v23 = *(_QWORD **)v19;
      if (*(_BYTE *)(*(_QWORD *)v19 + 7689))
        goto LABEL_28;
    }
    else if (v22 == 3)
    {
      v23 = *(_QWORD **)v19;
LABEL_28:
      v27 = (_BYTE *)*((_QWORD *)v19 + 2);
      if (!v27)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v23, v20).n128_u64[0];
        v27 = v28;
        *((_QWORD *)v19 + 2) = v28;
        v23 = *(_QWORD **)v19;
      }
      *v27 = v18;
      physx::Scb::Scene::scheduleForUpdate(v23, v19, a4);
      *((_DWORD *)v19 + 2) |= 1u;
LABEL_34:
      result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v6 + 248))(v6);
      goto LABEL_35;
    }
    v29 = (char *)v19 + v21;
    if (v18 != *((unsigned __int8 *)v19 + v21 + 12))
    {
      v29[12] = v18;
      if (*(_QWORD *)v29)
        (*(void (**)(_QWORD))(**(_QWORD **)v29 + 16))(*(_QWORD *)v29);
    }
    goto LABEL_34;
  }
  result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 256))(result);
  v13 = v12 & 0xFFFFFFF7;
  v14 = (int32x2_t **)((char *)v6 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18));
  v15 = *((unsigned int *)v14 + 2);
  v16 = (v15 >> 24) & 0xF;
  v17 = v15 >> 30;
  if (v17 == 2)
  {
    result = *v14;
    if ((*v14)[961].i8[1])
      goto LABEL_18;
LABEL_21:
    v26 = (char *)v14 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v16 + 3);
    if (v13 != v26[12])
    {
      v26[12] = v13;
      result = *(int32x2_t **)v26;
      if (*(_QWORD *)v26)
        result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
    }
    goto LABEL_24;
  }
  if (v17 != 3)
    goto LABEL_21;
  result = *v14;
LABEL_18:
  v24 = v14[2];
  if (!v24)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v16).n128_u64[0];
    v24 = v25;
    v14[2] = v25;
    result = *v14;
  }
  v24->i8[0] = v13;
  result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v14, a4);
  *((_DWORD *)v14 + 2) |= 1u;
LABEL_24:
  if (v11 && *(_QWORD *)&v6[4])
    result = physx::NpActor::addConstraintsToSceneInternal(v6 + 3);
LABEL_35:
  v30 = (int32x2_t **)((char *)v6 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18));
  v31 = *((unsigned int *)v30 + 2);
  if (a3)
  {
    if ((v31 & 1) != 0)
    {
      v34 = v30[2];
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
    }
    else
    {
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
      v34 = (int32x2_t *)(v33 + 12);
    }
    v36 = v34->u8[0] | a2;
  }
  else
  {
    if ((v31 & 1) != 0)
    {
      v35 = v30[2];
      v32 = (v31 >> 24) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
    }
    else
    {
      LODWORD(v32) = BYTE3(v31) & 0xF;
      v33 = (char *)v30 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3);
      v35 = (int32x2_t *)(v33 + 12);
    }
    v36 = v35->u8[0] & ~a2;
  }
  v37 = v31 >> 30;
  if (v37 == 2)
  {
    result = *v30;
    if ((*v30)[961].i8[1])
      goto LABEL_48;
  }
  else if (v37 == 3)
  {
    result = *v30;
LABEL_48:
    v38 = v30[2];
    if (!v38)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v32).n128_u64[0];
      v38 = v39;
      v30[2] = v39;
      result = *v30;
    }
    v38->i8[0] = v36;
    result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v30, a4);
    *((_DWORD *)v30 + 2) |= 1u;
    return result;
  }
  if (v36 != v33[12])
  {
    v33[12] = v36;
    result = *(int32x2_t **)v33;
    if (*(_QWORD *)v33)
      return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidStatic>::setActorFlags(int32x2_t *result, _BYTE *a2, int8x8_t a3)
{
  int32x2_t *v4;
  uint64_t v5;
  int32x2_t *v6;
  unint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int32x2_t **v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  physx::Scb::Base *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  int32x2_t *v22;
  int32x2_t *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  int32x2_t **v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int32x2_t *v33;
  int32x2_t *v34;
  char *v35;

  v4 = result;
  v5 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  v6 = (int32x2_t *)((char *)result + v5);
  v7 = *(unsigned int *)((char *)result[1].u32 + v5);
  if ((v7 & 1) != 0)
    v8 = (int32x2_t *)v6[2];
  else
    v8 = (int32x2_t *)((char *)v6 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v7 >> 24) & 0xF) + 3) + 12);
  v9 = (uint64_t)*v6;
  v10 = v8->u8[0];
  if ((*a2 & 8) != 0 || (v10 & 8) == 0)
  {
    if ((*a2 & 8) == 0 || (v10 & 8) != 0)
      goto LABEL_34;
    if (v9)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      v5 = *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
      LODWORD(v7) = *(__int32 *)((char *)v4[1].i32 + v5);
    }
    v16 = v10 | 8;
    v17 = (physx::Scb::Base *)((char *)v4 + v5);
    v18 = BYTE3(v7) & 0xF;
    v19 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v18 + 3);
    v20 = v7 >> 30;
    if (v20 == 2)
    {
      v21 = *(_QWORD **)v17;
      if (*(_BYTE *)(*(_QWORD *)v17 + 7689))
        goto LABEL_27;
    }
    else if (v20 == 3)
    {
      v21 = *(_QWORD **)v17;
LABEL_27:
      v25 = (_BYTE *)*((_QWORD *)v17 + 2);
      if (!v25)
      {
        a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v21, v18).n128_u64[0];
        v25 = v26;
        *((_QWORD *)v17 + 2) = v26;
        v21 = *(_QWORD **)v17;
      }
      *v25 = v16;
      physx::Scb::Scene::scheduleForUpdate(v21, v17, a3);
      *((_DWORD *)v17 + 2) |= 1u;
LABEL_33:
      result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v4 + 248))(v4);
      goto LABEL_34;
    }
    v27 = (char *)v17 + v19;
    if (v16 != *((unsigned __int8 *)v17 + v19 + 12))
    {
      v27[12] = v16;
      if (*(_QWORD *)v27)
        (*(void (**)(_QWORD))(**(_QWORD **)v27 + 16))(*(_QWORD *)v27);
    }
    goto LABEL_33;
  }
  result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 256))(result);
  v11 = v10 & 0xFFFFFFF7;
  v12 = (int32x2_t **)((char *)v4 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18));
  v13 = *((unsigned int *)v12 + 2);
  v14 = (v13 >> 24) & 0xF;
  v15 = v13 >> 30;
  if (v15 == 2)
  {
    result = *v12;
    if ((*v12)[961].i8[1])
      goto LABEL_17;
LABEL_20:
    v24 = (char *)v12 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v14 + 3);
    if (v11 != v24[12])
    {
      v24[12] = v11;
      result = *(int32x2_t **)v24;
      if (*(_QWORD *)v24)
        result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
    }
    goto LABEL_23;
  }
  if (v15 != 3)
    goto LABEL_20;
  result = *v12;
LABEL_17:
  v22 = v12[2];
  if (!v22)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v14).n128_u64[0];
    v22 = v23;
    v12[2] = v23;
    result = *v12;
  }
  v22->i8[0] = v11;
  result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v12, a3);
  *((_DWORD *)v12 + 2) |= 1u;
LABEL_23:
  if (v9 && *(_QWORD *)&v4[4])
    result = physx::NpActor::addConstraintsToSceneInternal(v4 + 3);
LABEL_34:
  v28 = *a2;
  v29 = (int32x2_t **)((char *)v4 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18));
  v30 = *((unsigned int *)v29 + 2);
  v31 = (v30 >> 24) & 0xF;
  v32 = v30 >> 30;
  if (v32 == 2)
  {
    result = *v29;
    if ((*v29)[961].i8[1])
      goto LABEL_38;
  }
  else if (v32 == 3)
  {
    result = *v29;
LABEL_38:
    v33 = v29[2];
    if (!v33)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v31).n128_u64[0];
      v33 = v34;
      v29[2] = v34;
      result = *v29;
    }
    v33->i8[0] = v28;
    result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v29, a3);
    *((_DWORD *)v29 + 2) |= 1u;
    return result;
  }
  v35 = (char *)v29 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v31 + 3);
  if (v28 != v35[12])
  {
    v35[12] = v28;
    result = *(int32x2_t **)v35;
    if (*(_QWORD *)v35)
      return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getActorFlags@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;

  v2 = result + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  v3 = *(unsigned int *)(v2 + 8);
  if ((v3 & 1) != 0)
    v4 = *(_BYTE **)(v2 + 16);
  else
    v4 = (_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + v2 + 12);
  *a2 = *v4;
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxRigidStatic>::setDominanceGroup(uint64_t a1, char a2, int8x8_t a3)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  v4 = (_DWORD *)(a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  v5 = v4[2];
  v6 = (v5 >> 24) & 0xF;
  v7 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  v8 = v5 >> 30;
  if (v8 == 2)
  {
    v9 = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v8 == 3)
  {
    v9 = *(_QWORD **)v4;
LABEL_5:
    v10 = *((_QWORD *)v4 + 2);
    if (!v10)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v9, v6).n128_u64[0];
      v10 = v11;
      *((_QWORD *)v4 + 2) = v11;
      v9 = *(_QWORD **)v4;
    }
    *(_BYTE *)(v10 + 1) = a2;
    result = physx::Scb::Scene::scheduleForUpdate(v9, (physx::Scb::Base *)v4, a3);
    v4[2] |= 2u;
    return result;
  }
  *((_BYTE *)v4 + v7 + 14) = a2;
  result = *(_QWORD **)((char *)v4 + v7);
  if (result)
    return physx::Sc::ActorSim::setActorsInteractionsDirty(result, 8, 0, 1, a3);
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getDominanceGroup(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 *v3;

  v1 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  v2 = *(unsigned int *)(v1 + 8);
  if ((v2 & 2) != 0)
    v3 = (unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 1);
  else
    v3 = (unsigned __int8 *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v2 >> 24) & 0xF) + 3) + v1 + 14);
  return *v3;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::setOwnerClient(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v9 = result + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  if (*(_QWORD *)v9)
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpActorTemplate.h";
    v11 = "Attempt to set the client id when an actor is already in a scene.";
    v12 = physx::shdfnd::Foundation::mInstance;
    v13 = 196;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  v14 = *(unsigned int *)(v9 + 8);
  if (v14 >> 30 == 3 || v14 >> 30 == 2 && MEMORY[0x1E09])
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbActor.h";
    v11 = "Attempt to set the client id when an actor is buffering";
    v12 = physx::shdfnd::Foundation::mInstance;
    v13 = 182;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  *(_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v14 >> 24) & 0xF) + 3) + v9 + 11) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getOwnerClient(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  return *(unsigned __int8 *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v1 + 11) & 0xF) + 3)
                            + v1
                            + 11);
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getAggregate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 80);
  if (!(_DWORD)v2)
    return 0;
  for (i = *(_QWORD *)(v1 + 72) + 8; *(_BYTE *)(i - 8) != 1; i += 16)
  {
    if (!--v2)
      return 0;
  }
  return *(_QWORD *)i;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;

  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 233, "PxRigidActor::attachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a6, a7, a8, v11);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  physx::NpShapeManager::attachShape((physx::PxRigidActor *)((char *)a1 + 40), a2, a1);
  return 1;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::detachShape(physx::PxRigidActor *a1, physx::NpShape *a2, char a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  physx::NpShapeManager *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v13 = (physx::PxRigidActor *)((char *)a1 + 40);
  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 247, "PxRigidActor::detachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v18);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  result = physx::NpShapeManager::detachShape(v13, a2, a1, a3, a4);
  if ((result & 1) == 0)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 253, "PxRigidActor::detachShape: shape is not attached to this actor!", v15, v16, v17, a10);
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getShapes(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1)
    v4 = (_QWORD *)*v4;
  v6 = (v5 - a4) & ~((v5 - a4) >> 31);
  if (v6 >= a3)
    result = a3;
  else
    result = v6;
  if ((_DWORD)result)
  {
    v8 = &v4[a4];
    v9 = result;
    do
    {
      v10 = *v8++;
      *a2++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getNbConstraints(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 80);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(result) = 0;
  v4 = *(unsigned __int8 **)(v1 + 72);
  do
  {
    v5 = *v4;
    v4 += 16;
    if (v5)
      result = result;
    else
      result = (result + 1);
    --v2;
  }
  while (v2);
  return result;
}

unint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getConstraints(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return physx::NpActor::getConnectors<physx::Gu::BVHStructure>(a1 + 24, 0, a2, a3, a4);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  return physx::NpActor::exportExtraData((_QWORD *)(a1 + 24), a2);
}

_QWORD *physx::NpRigidActorTemplate<physx::PxRigidStatic>::importExtraData(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(unsigned __int16 *)(a1 + 48);
  if (v2 >= 2)
  {
    v3 = (*(_QWORD *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a2 + 8) = v3 + 8 * v2;
    *(_QWORD *)(a1 + 40) = v3;
  }
  v4 = *(unsigned __int16 *)(a1 + 64);
  if (v4 >= 2)
  {
    v5 = (*(_QWORD *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a2 + 8) = v5 + 8 * v4;
    *(_QWORD *)(a1 + 56) = v5;
  }
  return physx::NpActor::importExtraData((_QWORD *)(a1 + 24), a2);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::resolveReferences(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = (_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48);
  if ((_DWORD)v5 != 1)
  {
    if (!*(_WORD *)(a1 + 48))
      return physx::NpActor::resolveReferences(a1 + 24, a2);
    v4 = (_QWORD *)*v4;
  }
  v6 = 0;
  do
  {
    if (v4[v6])
    {
      v7 = (**a2)(a2, 0x80000000);
      v4[v6] = v7;
    }
    else
    {
      v7 = 0;
    }
    v8 = (unsigned int *)(v7 + 32);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if ((*(_DWORD *)(v7 + 264) & 0x80000000) != 0)
      *(_QWORD *)(v7 + 40) = a1;
    v10 = (unsigned int *)(v7 + 264);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    ++v6;
  }
  while (v6 != v5);
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

uint64_t physx::NpScene::getTaskManager(physx::NpScene *this)
{
  return *((_QWORD *)this + 1170);
}

{
  return *((_QWORD *)this + 1170);
}

uint64_t physx::NpScene::flush(physx::NpScene *this)
{
  return (*(uint64_t (**)(physx::NpScene *))(*(_QWORD *)this + 472))(this);
}

void physx::NpContactCallbackTask::~NpContactCallbackTask(physx::NpContactCallbackTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::NpContactCallbackTask::getName(physx::NpContactCallbackTask *this)
{
  return "NpContactCallbackTask";
}

const char *physx::PxShape::getConcreteTypeName(physx::PxShape *this)
{
  return "PxShape";
}

BOOL physx::PxShape::isKindOf(physx::PxShape *this, const char *a2)
{
  return !strcmp("PxShape", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::release(physx::PxRigidActor *a1, int8x8_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  physx::NpScene *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  physx::NpActor::releaseConstraints((uint64_t)a1 + 24, a1, a2);
  v6 = (char *)a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a1 + 4) + 18);
  if (((*((_DWORD *)v6 + 2) >> 30) - 1) > 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(_QWORD *)v6;
    if (v7)
      v8 = (physx::NpScene *)(v7 - 16);
    else
      v8 = 0;
  }
  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 200, "PxRigidActor::release: Actor is part of a pruning structure, pruning structure is now invalid!", v3, v4, v5, v16);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  result = physx::NpShapeManager::detachAll((physx::PxRigidActor *)((char *)a1 + 40), v8, a1);
  v15 = *((_QWORD *)a1 + 4);
  if (v15)
    return physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(_QWORD *)(v15 + 72) + 8), a1, 0, v10, v11, v12, v13, v14);
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;

  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 233, "PxRigidActor::attachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a6, a7, a8, v11);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  physx::NpShapeManager::attachShape((physx::PxRigidActor *)((char *)a1 + 40), a2, a1);
  return 1;
}

physx::PxActor *physx::NpActorTemplate<physx::PxRigidDynamic>::release(physx::PxActor *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((_QWORD *)result + 4);
  if (v8)
    return (physx::PxActor *)physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(_QWORD *)(v8 + 72) + 8), result, 0, a4, a5, a6, a7, a8);
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxRigidDynamic>::setActorFlag(_QWORD *result, int a2, int a3, int8x8_t a4)
{
  _DWORD *v4;
  unint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;

  v4 = (_DWORD *)((char *)result
                + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18));
  v5 = v4[2];
  if (a3)
  {
    if ((v5 & 1) != 0)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v8 = (v5 >> 24) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
    }
    else
    {
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3);
      v7 = (unsigned __int8 *)(v6 + 12);
      v8 = (v5 >> 24) & 0xF;
    }
    v10 = *v7 | a2;
  }
  else
  {
    if ((v5 & 1) != 0)
    {
      v9 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v8 = (v5 >> 24) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
    }
    else
    {
      LODWORD(v8) = BYTE3(v5) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
      v9 = (unsigned __int8 *)(v6 + 12);
    }
    v10 = *v9 & ~a2;
  }
  v11 = v5 >> 30;
  if (v11 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_14;
  }
  else if (v11 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_14:
    v12 = (_BYTE *)*((_QWORD *)v4 + 2);
    if (!v12)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v8).n128_u64[0];
      v12 = v13;
      *((_QWORD *)v4 + 2) = v13;
      result = *(_QWORD **)v4;
    }
    *v12 = v10;
    result = physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v4, a4);
    v4[2] |= 1u;
    return result;
  }
  if (v10 != v6[12])
  {
    v6[12] = v10;
    result = *(_QWORD **)v6;
    if (*(_QWORD *)v6)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxRigidDynamic>::setActorFlags(_QWORD *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;

  v3 = *a2;
  v4 = (_DWORD *)((char *)result
                + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18));
  v5 = v4[2];
  v6 = (v5 >> 24) & 0xF;
  v7 = v5 >> 30;
  if (v7 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v7 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_5:
    v8 = (_BYTE *)*((_QWORD *)v4 + 2);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v6).n128_u64[0];
      v8 = v9;
      *((_QWORD *)v4 + 2) = v9;
      result = *(_QWORD **)v4;
    }
    *v8 = v3;
    result = physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v4, a3);
    v4[2] |= 1u;
    return result;
  }
  v10 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  if (v3 != v10[12])
  {
    v10[12] = v3;
    result = *(_QWORD **)v10;
    if (*(_QWORD *)v10)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::exportExtraData((_QWORD *)(a1 + 24), a2);
}

_QWORD *physx::NpActorTemplate<physx::PxRigidDynamic>::importExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::importExtraData((_QWORD *)(a1 + 24), a2);
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::resolveReferences(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

uint64_t physx::Scb::Body::setKinematicTarget(physx::Scb::Base *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int v11;
  _QWORD *v12;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  v5 = *(float *)(v4 + 8176);
  v6 = *((_DWORD *)a1 + 2);
  if (v6 >> 30 != 3 && (v6 >> 30 != 2 || !*(_BYTE *)(v4 + 7689)))
  {
    result = physx::Sc::BodyCore::setKinematicTarget((physx::Scb::Base *)((char *)a1 + 32), *(_QWORD *)(v4 + 4384), a2, v5);
    *((_DWORD *)a1 + 70) = 0;
    *((float *)a1 + 69) = v5;
    return result;
  }
  v7 = *((_QWORD *)a1 + 2);
  if (!v7)
  {
    physx::Scb::Scene::getStream(v4, HIBYTE(v6) & 0xF);
    v7 = v8;
    *((_QWORD *)a1 + 2) = v8;
    v4 = *(_QWORD *)a1;
  }
  *(_OWORD *)(v7 + 272) = *(_OWORD *)a2;
  v9 = *(int8x8_t *)(a2 + 16);
  *(int8x8_t *)(v7 + 288) = v9;
  v9.i32[0] = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v7 + 296) = v9.i32[0];
  physx::Scb::Scene::scheduleForUpdate((_QWORD *)v4, a1, v9);
  *((_DWORD *)a1 + 71) |= 0x8000u;
  v11 = *((_DWORD *)a1 + 2) >> 30;
  if (v11 == 2)
  {
    v12 = *(_QWORD **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 7689))
      goto LABEL_11;
  }
  else if (v11 == 3)
  {
    v12 = *(_QWORD **)a1;
LABEL_11:
    *((_DWORD *)a1 + 70) = 0;
    *((float *)a1 + 69) = v5;
    result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(v12, a1, v10);
    *((_DWORD *)a1 + 71) = *((_DWORD *)a1 + 71) & 0xF8FFFFFF | 0x5000000;
    return result;
  }
  *((_DWORD *)a1 + 70) = 0;
  *((float *)a1 + 69) = v5;
  return physx::Sc::BodyCore::setWakeCounter((uint64_t)a1 + 32, v5, 1);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::release(physx::PxRigidActor *a1, int8x8_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  physx::NpScene *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  physx::NpActor::releaseConstraints((uint64_t)a1 + 24, a1, a2);
  v6 = (char *)a1 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a1 + 4) + 18);
  if (((*((_DWORD *)v6 + 2) >> 30) - 1) > 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(_QWORD *)v6;
    if (v7)
      v8 = (physx::NpScene *)(v7 - 16);
    else
      v8 = 0;
  }
  if (*((_QWORD *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 200, "PxRigidActor::release: Actor is part of a pruning structure, pruning structure is now invalid!", v3, v4, v5, v16);
    physx::Sq::PruningStructure::invalidate(*((_QWORD *)a1 + 10), (uint64_t)a1);
  }
  result = physx::NpShapeManager::detachAll((physx::PxRigidActor *)((char *)a1 + 40), v8, a1);
  v15 = *((_QWORD *)a1 + 4);
  if (v15)
    return physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(_QWORD *)(v15 + 72) + 8), a1, 0, v10, v11, v12, v13, v14);
  return result;
}

physx::PxActor *physx::NpActorTemplate<physx::PxRigidStatic>::release(physx::PxActor *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((_QWORD *)result + 4);
  if (v8)
    return (physx::PxActor *)physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(_QWORD *)(v8 + 72) + 8), result, 0, a4, a5, a6, a7, a8);
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxRigidStatic>::setActorFlag(_QWORD *result, int a2, int a3, int8x8_t a4)
{
  _DWORD *v4;
  unint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;

  v4 = (_DWORD *)((char *)result
                + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18));
  v5 = v4[2];
  if (a3)
  {
    if ((v5 & 1) != 0)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v8 = (v5 >> 24) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
    }
    else
    {
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3);
      v7 = (unsigned __int8 *)(v6 + 12);
      v8 = (v5 >> 24) & 0xF;
    }
    v10 = *v7 | a2;
  }
  else
  {
    if ((v5 & 1) != 0)
    {
      v9 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v8 = (v5 >> 24) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
    }
    else
    {
      LODWORD(v8) = BYTE3(v5) & 0xF;
      v6 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3);
      v9 = (unsigned __int8 *)(v6 + 12);
    }
    v10 = *v9 & ~a2;
  }
  v11 = v5 >> 30;
  if (v11 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_14;
  }
  else if (v11 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_14:
    v12 = (_BYTE *)*((_QWORD *)v4 + 2);
    if (!v12)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v8).n128_u64[0];
      v12 = v13;
      *((_QWORD *)v4 + 2) = v13;
      result = *(_QWORD **)v4;
    }
    *v12 = v10;
    result = physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v4, a4);
    v4[2] |= 1u;
    return result;
  }
  if (v10 != v6[12])
  {
    v6[12] = v10;
    result = *(_QWORD **)v6;
    if (*(_QWORD *)v6)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

_QWORD *physx::NpActorTemplate<physx::PxRigidStatic>::setActorFlags(_QWORD *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;

  v3 = *a2;
  v4 = (_DWORD *)((char *)result
                + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18));
  v5 = v4[2];
  v6 = (v5 >> 24) & 0xF;
  v7 = v5 >> 30;
  if (v7 == 2)
  {
    result = *(_QWORD **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 7689))
      goto LABEL_5;
  }
  else if (v7 == 3)
  {
    result = *(_QWORD **)v4;
LABEL_5:
    v8 = (_BYTE *)*((_QWORD *)v4 + 2);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v6).n128_u64[0];
      v8 = v9;
      *((_QWORD *)v4 + 2) = v9;
      result = *(_QWORD **)v4;
    }
    *v8 = v3;
    result = physx::Scb::Scene::scheduleForUpdate(result, (physx::Scb::Base *)v4, a3);
    v4[2] |= 1u;
    return result;
  }
  v10 = (char *)v4 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  if (v3 != v10[12])
  {
    v10[12] = v3;
    result = *(_QWORD **)v10;
    if (*(_QWORD *)v10)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::exportExtraData((_QWORD *)(a1 + 24), a2);
}

_QWORD *physx::NpActorTemplate<physx::PxRigidStatic>::importExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::importExtraData((_QWORD *)(a1 + 24), a2);
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::resolveReferences(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

const char *physx::NpScene::SceneCompletion::getName(physx::NpScene::SceneCompletion *this)
{
  return "NpScene.completion";
}

uint64_t physx::NpScene::SceneCompletion::release(physx::NpScene::SceneCompletion *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 3);
  result = physx::shdfnd::SyncImpl::set(**((physx::shdfnd::SyncImpl ***)this + 5));
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  return result;
}

void physx::Cm::FlushPool::~FlushPool(physx::Cm::FlushPool *this)
{
  unint64_t v2;
  unint64_t i;
  int v4;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 1) + 8 * i))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v2 = *((unsigned int *)this + 4);
      }
    }
  }
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this);
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 384>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 384>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 384>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 384>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 256>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 256>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 256>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 256>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 128>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 128>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 128>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 128>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 32>>::getName() [T = ph"
           "ysx::Sc::Scene::Block<void *, 32>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 32>>::getName() [T = ph"
           "ysx::Sc::Scene::Block<void *, 32>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 16>>::getName() [T = ph"
           "ysx::Sc::Scene::Block<void *, 16>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 16>>::getName() [T = ph"
           "ysx::Sc::Scene::Block<void *, 16>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 8>>::getName() [T = phy"
           "sx::Sc::Scene::Block<void *, 8>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 8>>::getName() [T = phy"
           "sx::Sc::Scene::Block<void *, 8>]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t SqRefFinder::find(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = *(unsigned __int16 *)(a2 + 8);
  if (v3 == 5)
    v4 = (uint64_t *)(a2 + 40);
  else
    v4 = 0;
  if (v3 == 6)
    v4 = (uint64_t *)(a2 + 40);
  if (v3 == 13)
    v5 = (uint64_t *)(a2 + 40);
  else
    v5 = v4;
  v6 = *((unsigned __int16 *)v5 + 4);
  v7 = v5;
  if ((_DWORD)v6 != 1)
  {
    if (!*((_WORD *)v5 + 4))
    {
      v9 = 0xFFFFFFFFLL;
      goto LABEL_18;
    }
    v7 = (uint64_t *)*v5;
  }
  v8 = 0;
  v9 = 0xFFFFFFFFLL;
  while (v7[v8] != a3)
  {
    if (v6 == ++v8)
      goto LABEL_18;
  }
  v9 = v8;
LABEL_18:
  v10 = v5 + 2;
  if (*((_WORD *)v5 + 12) != 1)
    v10 = (_QWORD *)*v10;
  return v10[v9] >> 1;
}

void SqRefFinder::~SqRefFinder(SqRefFinder *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::resize(uint64_t result, unsigned int a2, _WORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _WORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 2 * a2;
    v8 = (_WORD *)(*(_QWORD *)v5 + 2 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::getName() [T = physx::Scb::Shape *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>::getName() [T = physx::Scb::Actor *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x20 && *(_BYTE *)(result + 32) == 0)
  {
    *(_BYTE *)(result + 32) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::getName() [T = physx::Scb::Shape *]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 48);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 40);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 52) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 40);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 32) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 48);
    }
  }
  *(_QWORD *)(v3 + 40) = v9;
  *(_DWORD *)(v3 + 48) = v10 + 1;
  *(_DWORD *)(v3 + 52) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 84);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((16 * v5) <= 0x40 && *(_BYTE *)(result + 64) == 0)
  {
    *(_BYTE *)(result + 64) = 1;
    v9 = (_OWORD *)result;
    goto LABEL_16;
  }
  if (!(16 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>::getName() [T = physx::Scb::RemovedShape]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (16 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_OWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 80);
  if ((_DWORD)v10)
  {
    v11 = (unint64_t)&v9[v10];
    v12 = *(__int128 **)(v3 + 72);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    v15 = *(unsigned int *)(v3 + 80);
  }
  else
  {
    v15 = 0;
  }
  v9[v15] = *a2;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) == 0)
  {
    v16 = *(_QWORD *)(v3 + 72);
    if (v16 == v3)
    {
      *(_BYTE *)(v3 + 64) = 0;
    }
    else if (v16)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 72) = v9;
  ++*(_DWORD *)(v3 + 80);
  *(_DWORD *)(v3 + 84) = v5;
  return result;
}

float getTriangle(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  float v8;
  float v9;
  float v10;
  float result;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  getTriangle(a1, (uint64_t)&v12, a3, a4, a6);
  v8 = v15;
  v9 = (float)((float)((float)(v12 * *(float *)(a5 + 8)) + (float)(v13 * *(float *)(a5 + 20)))
             + (float)(v14 * *(float *)(a5 + 32)))
     + *(float *)(a5 + 44);
  *(float32x2_t *)a2 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v12), vmul_n_f32(*(float32x2_t *)(a5 + 12), v13)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v14)), *(float32x2_t *)(a5 + 36));
  *(float *)(a2 + 8) = v9;
  v10 = (float)((float)((float)(v8 * *(float *)(a5 + 8)) + (float)(v16 * *(float *)(a5 + 20)))
              + (float)(v17 * *(float *)(a5 + 32)))
      + *(float *)(a5 + 44);
  *(float32x2_t *)(a2 + 12) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v8), vmul_n_f32(*(float32x2_t *)(a5 + 12), v16)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v17)), *(float32x2_t *)(a5 + 36));
  *(float *)(a2 + 20) = v10;
  result = (float)((float)((float)(v18 * *(float *)(a5 + 8)) + (float)(v19 * *(float *)(a5 + 20)))
                 + (float)(v20 * *(float *)(a5 + 32)))
         + *(float *)(a5 + 44);
  *(float32x2_t *)(a2 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v18), vmul_n_f32(*(float32x2_t *)(a5 + 12), v19)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v20)), *(float32x2_t *)(a5 + 36));
  *(float *)(a2 + 32) = result;
  return result;
}

float getTriangle(int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float result;

  v5 = (3 * a1);
  if ((a5 & 1) != 0)
  {
    v6 = *(unsigned __int16 *)(a4 + 2 * v5);
    v7 = *(unsigned __int16 *)(a4 + 2 * (v5 + 1));
    v8 = *(unsigned __int16 *)(a4 + 2 * (v5 + 2));
  }
  else
  {
    v6 = *(_DWORD *)(a4 + 4 * v5);
    v7 = *(_DWORD *)(a4 + 4 * (v5 + 1));
    v8 = *(_DWORD *)(a4 + 4 * (v5 + 2));
  }
  v9 = a3 + 12 * v6;
  *(_QWORD *)a2 = *(_QWORD *)v9;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v9 + 8);
  v10 = a3 + 12 * v7;
  *(_QWORD *)(a2 + 12) = *(_QWORD *)v10;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v10 + 8);
  v11 = a3 + 12 * v8;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)v11;
  result = *(float *)(v11 + 8);
  *(float *)(a2 + 32) = result;
  return result;
}

physx::PxActor *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::~NpRigidActorTemplate(physx::PxActor *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED96100;
  v2 = *(_QWORD *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 40, v2);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 56, v2);
  *(_QWORD *)a1 = off_24ED963C0;
  physx::NpFactory::onActorRelease(physx::NpFactory::mInstance, a1);
  return a1;
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 40);
  result = *(_QWORD *)(v1 + 8640);
  if (result && *(_DWORD *)(v1 + 8680) == 1)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 144))(result, 0);
    if ((_DWORD)result)
      *(_BYTE *)(v1 + 8848) = 1;
  }
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 40);
  result = *(_QWORD *)(v1 + 8688);
  if (result && *(_DWORD *)(v1 + 8728) == 1)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 144))(result, 0);
    if ((_DWORD)result)
      *(_BYTE *)(v1 + 8848) = 1;
  }
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::simulate(*(_QWORD *)(a1 + 40) + 32, *(float *)(*(_QWORD *)(a1 + 40) + 9336), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::collide((physx::Sc::Scene *)(*(_QWORD *)(a1 + 40) + 32), *(float *)(*(_QWORD *)(a1 + 40) + 9336), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::advance(*(_QWORD *)(a1 + 40) + 32, *(float *)(*(_QWORD *)(a1 + 40) + 9336), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>::getName() [T = physx::PxRigidActor *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = result;
  if (a2 > 8 || *(_BYTE *)(result + 192))
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBounds3>::getName() [T = physx::PxBounds3]";
    else
      v6 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                             + 16))(v5 + 24, 24 * a2, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v4 = (_QWORD *)result;
  }
  else
  {
    *(_BYTE *)(result + 192) = 1;
    v4 = (_QWORD *)result;
  }
  v7 = *(_DWORD *)(v3 + 208);
  v8 = *(_QWORD *)(v3 + 200);
  if (v7)
  {
    v9 = (unint64_t)&v4[3 * v7];
    v10 = *(_QWORD **)(v3 + 200);
    v11 = v4;
    do
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11 += 3;
      v10 += 3;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 212) & 0x80000000) == 0)
  {
    if (v8 == v3)
    {
      *(_BYTE *)(v3 + 192) = 0;
    }
    else if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 200) = v4;
  *(_DWORD *)(v3 + 212) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>::getName() [T = physx::PxRigidActor *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void physx::Scb::RigidObject::resetFiltering(physx::Scb::RigidObject *this, physx::Scb::Shape **a2, unsigned int a3, int8x8_t a4)
{
  unsigned int v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v4 = a3;
  v7 = *((_DWORD *)this + 2);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(_BYTE *)(*(_QWORD *)this + 7689))
  {
    v8 = *((_QWORD *)this + 2);
    if (!v8)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)this, HIBYTE(v7) & 0xF).n128_u64[0];
      v8 = v9;
      *((_QWORD *)this + 2) = v9;
    }
    v10 = *(_DWORD *)(v8 + 160);
    if (v10)
    {
      v11 = v10 + v4;
      v12 = *(_QWORD *)this;
      v13 = *(_QWORD *)this + 7808;
      v14 = *(unsigned int *)(*(_QWORD *)this + 7816);
      v40 = 0;
      physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize(v13, v14 + v10 + v4, &v40);
      v15 = *(_QWORD *)(v12 + 7808);
      if (!v15)
        return;
      v16 = *(_DWORD *)(v8 + 160);
      if (v16 == 1)
      {
        v17 = (_QWORD *)(v15 + 8 * v14);
        *v17 = *(_QWORD *)(v8 + 152);
        v18 = v17 + 1;
        v19 = v4;
        do
        {
          v20 = (uint64_t)*a2++;
          *v18++ = v20;
          --v19;
        }
        while (v19);
      }
      else
      {
        v24 = (_QWORD *)(v15 + 8 * v14);
        if (v16)
        {
          v25 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)this + 7808) + 8 * *(unsigned int *)(v8 + 152));
          v26 = v24;
          v27 = *(unsigned int *)(v8 + 160);
          do
          {
            v28 = *v25++;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
        v29 = v4;
        do
        {
          v30 = (uint64_t)*a2++;
          v24[v16++] = v30;
          --v29;
        }
        while (v29);
      }
      *(_DWORD *)(v8 + 152) = v14;
      v4 = v11;
    }
    else if (v4 == 1)
    {
      *(_QWORD *)(v8 + 152) = *a2;
    }
    else
    {
      v31 = *(_QWORD *)this;
      v32 = *(_QWORD *)this + 7808;
      v33 = *(unsigned int *)(*(_QWORD *)this + 7816);
      v40 = 0;
      physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize(v32, v33 + v4, &v40);
      v34 = *(_QWORD *)(v31 + 7808);
      if (!v34)
        return;
      v35 = (_QWORD *)(v34 + 8 * v33);
      v36 = v4;
      do
      {
        v37 = (uint64_t)*a2++;
        *v35++ = v37;
        --v36;
      }
      while (v36);
      *(_DWORD *)(v8 + 152) = v33;
    }
    *(_DWORD *)(v8 + 160) = v4;
    physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)this, this, a4);
    *((_DWORD *)this + 2) |= 0x20u;
  }
  else
  {
    v21 = a3;
    do
    {
      v22 = (_QWORD *)((char *)this
                     + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)this + 11) & 0xF) + 3));
      v23 = (uint64_t)*a2++;
      v39 = 128;
      v38 = 0;
      physx::Sc::RigidCore::onShapeChange(v22, v23 + 32, &v39, &v38, 0, a4);
      --v21;
    }
    while (v21);
  }
}

uint64_t physx::shdfnd::Array<physx::NpBatchQuery *,physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery *>::getName() [T = physx::NpBatchQuery *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::clipHitsToNewMaxDist<physx::PxRaycastHit>(uint64_t a1, uint64_t a2, float a3)
{
  unsigned int v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;

  if ((_DWORD)a2)
  {
    v3 = 0;
    do
    {
      v4 = a1 + ((unint64_t)v3 << 6);
      if (*(float *)(v4 + 48) <= a3)
      {
        ++v3;
      }
      else
      {
        a2 = (a2 - 1);
        v5 = (__int128 *)(a1 + (a2 << 6));
        v6 = *v5;
        *(_DWORD *)(v4 + 16) = *((_DWORD *)v5 + 4);
        *(_OWORD *)v4 = v6;
        *(_WORD *)(v4 + 20) = *((_WORD *)v5 + 10);
        *(_OWORD *)(v4 + 24) = *(__int128 *)((char *)v5 + 24);
        *(_QWORD *)(v4 + 40) = *((_QWORD *)v5 + 5);
        *(_DWORD *)(v4 + 48) = *((_DWORD *)v5 + 12);
        *(_QWORD *)(v4 + 52) = *(_QWORD *)((char *)v5 + 52);
      }
    }
    while (v3 != (_DWORD)a2);
  }
  return a2;
}

void MultiQueryCallback<physx::PxRaycastHit>::~MultiQueryCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::PxHitBuffer<physx::PxRaycastHit>::processTouches()
{
  return 0;
}

void physx::PxHitBuffer<physx::PxRaycastHit>::~PxHitBuffer()
{
  JUMPOUT(0x2276933B8);
}

void MultiQueryCallback<physx::PxOverlapHit>::~MultiQueryCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::clipHitsToNewMaxDist<physx::PxSweepHit>(uint64_t a1, uint64_t a2, float a3)
{
  unsigned int v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;

  if ((_DWORD)a2)
  {
    v3 = 0;
    do
    {
      v4 = a1 + 56 * v3;
      if (*(float *)(v4 + 48) <= a3)
      {
        ++v3;
      }
      else
      {
        a2 = (a2 - 1);
        v5 = (__int128 *)(a1 + 56 * a2);
        v6 = *v5;
        *(_DWORD *)(v4 + 16) = *((_DWORD *)v5 + 4);
        *(_OWORD *)v4 = v6;
        *(_WORD *)(v4 + 20) = *((_WORD *)v5 + 10);
        *(_OWORD *)(v4 + 24) = *(__int128 *)((char *)v5 + 24);
        *(_QWORD *)(v4 + 40) = *((_QWORD *)v5 + 5);
        *(_DWORD *)(v4 + 48) = *((_DWORD *)v5 + 12);
        *(_DWORD *)(a1 + 56 * v3 + 52) = *((_DWORD *)v5 + 13);
      }
    }
    while (v3 != (_DWORD)a2);
  }
  return a2;
}

void MultiQueryCallback<physx::PxSweepHit>::~MultiQueryCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::PxHitBuffer<physx::PxSweepHit>::processTouches()
{
  return 0;
}

void physx::PxHitBuffer<physx::PxSweepHit>::~PxHitBuffer()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Scb::Aggregate::addActor(uint64_t result, uint64_t a2, int8x8_t a3)
{
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_DWORD *)result;
  v5 = *(_DWORD *)(result + 8);
  v6 = v5 >> 30;
  if ((v5 >> 30) - 1 >= 2)
  {
    if (v6 == 3)
      return result;
    goto LABEL_13;
  }
  result = *(_QWORD *)result;
  if (!*(_QWORD *)v4 || !*(_BYTE *)(result + 7689))
  {
LABEL_13:
    v14 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(a2 + 11) & 0xF) + 3) + a2;
    *(_DWORD *)(v14 + 8) = v4[8] & 0xFFFFFF | (*(unsigned __int8 *)(v14 + 11) << 24);
    return result;
  }
  v7 = (unsigned int *)*((_QWORD *)v4 + 2);
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream(result, HIBYTE(v5) & 0xF).n128_u64[0];
    v7 = v8;
    *((_QWORD *)v4 + 2) = v8;
    result = *(_QWORD *)v4;
  }
  v9 = v7[2];
  if ((_DWORD)v9 != -1)
  {
    v10 = v7[3];
    if (v10)
    {
      v11 = *(_QWORD *)(result + 7824) + 8 * v9;
      v12 = v7[3];
      v13 = (_QWORD *)v11;
      while (*v13 != a2)
      {
        ++v13;
        if (!--v12)
          goto LABEL_15;
      }
      v15 = v10 - 1;
      *v13 = *(_QWORD *)(v11 + 8 * v15);
      v7[3] = v15;
      result = *(_QWORD *)v4;
    }
  }
LABEL_15:
  v16 = *v7;
  v17 = (_QWORD *)(result + 7824);
  if (*v7 == -1)
  {
    v16 = *(_DWORD *)(result + 7832);
    v18 = v16 + v4[9];
    v20 = 0;
    result = physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize(result + 7824, v18, &v20);
    *v7 = v16;
  }
  v19 = v7[1];
  *(_QWORD *)(*v17 + 8 * v16 + 8 * v19) = a2;
  v7[1] = v19 + 1;
  if (v6 != 1)
    result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)v4, (physx::Scb::Base *)v4, a3);
  v4[2] |= 1u;
  return result;
}

_QWORD *physx::Scb::Aggregate::removeActor(_QWORD *result, uint64_t a2, int a3, int8x8_t a4)
{
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  _DWORD *v17;
  physx::Sc::ShapeSim *i;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v5 = result;
  v6 = *((_DWORD *)result + 2);
  v7 = (v6 >> 30) - 1;
  if (v7 >= 2)
  {
    if (v6 >> 30 == 3)
      return result;
    goto LABEL_14;
  }
  result = (_QWORD *)*result;
  if (!*(_QWORD *)v5 || !*((_BYTE *)result + 7689))
  {
LABEL_14:
    v17 = (_DWORD *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets
                     + (((unint64_t)*(unsigned int *)(a2 + 8) >> 24) & 0xF)
                     + 3)
                   + a2);
    v17[2] |= 0xFFFFFFu;
    if (v7 <= 1)
    {
      if (*(_QWORD *)v5)
      {
        if (a3)
        {
          if (*(_QWORD *)v17)
          {
            for (i = *(physx::Sc::ShapeSim **)(*(_QWORD *)v17 + 56); i; i = *(physx::Sc::ShapeSim **)i)
              result = (_QWORD *)physx::Sc::ShapeSim::reinsertBroadPhase(i);
          }
        }
      }
    }
    return result;
  }
  v8 = (unsigned int *)*((_QWORD *)v5 + 2);
  if (!v8)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
    v8 = v9;
    *((_QWORD *)v5 + 2) = v9;
    result = *(_QWORD **)v5;
  }
  v10 = *v8;
  if ((_DWORD)v10 == -1 || (v11 = v8[1]) == 0)
  {
LABEL_11:
    v15 = v8[2];
    v16 = result + 978;
    if (v15 == -1)
    {
      v15 = *((_DWORD *)result + 1958);
      v19 = v15 + v5[9];
      v22 = 0;
      physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize((uint64_t)(result + 978), v19, &v22);
      v8[2] = v15;
    }
    v20 = v8[3];
    *(_QWORD *)(*v16 + 8 * v15 + 8 * v20) = a2;
    v8[3] = v20 + 1;
    result = physx::Scb::Scene::scheduleForUpdate(*(_QWORD **)v5, (physx::Scb::Base *)v5, a4);
    v5[2] |= 2u;
  }
  else
  {
    v12 = result[978] + 8 * v10;
    v13 = v8[1];
    v14 = (_QWORD *)v12;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v13)
        goto LABEL_11;
    }
    v21 = v11 - 1;
    *v14 = *(_QWORD *)(v12 + 8 * v21);
    v8[1] = v21;
  }
  return result;
}

uint64_t physx::Scb::Base::destroy(uint64_t this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(this + 8);
  if (v1 >> 30 != 3 && (v1 >> 30 != 2 || !*(_BYTE *)(*(_QWORD *)this + 7689)))
    return physx::NpDestroy(this);
  *(_DWORD *)(this + 8) = v1 | 0x20000000;
  return this;
}

int32x2_t *physx::Scb::ObjectTracker::scheduleForInsert(int32x2_t *this, physx::Scb::Base *a2, int8x8_t a3)
{
  unsigned int v3;
  int v4;
  physx::Scb::Base *v5;

  v3 = *((_DWORD *)a2 + 2);
  v4 = v3 & 0x3FFFFFFF;
  if (v3 >> 30 == 3)
  {
    *((_DWORD *)a2 + 2) = v4 | 0x80000000;
    if ((v3 & 0x10000000) == 0)
    {
      v5 = a2;
      return (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this, (uint64_t *)&v5);
    }
  }
  else
  {
    *((_DWORD *)a2 + 2) = v4 | 0x40000000;
    return (int32x2_t *)physx::Scb::ObjectTracker::insert(this, a2, a3);
  }
  return this;
}

_QWORD *physx::Scb::ObjectTracker::insert(int32x2_t *this, physx::Scb::Base *a2, int8x8_t a3)
{
  _QWORD *result;
  physx::Scb::Base *v4;
  char v5;

  v4 = a2;
  v5 = 0;
  result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this, &v4, &v5, a3);
  if (!v5)
    *result = v4;
  return result;
}

int32x2_t *physx::Scb::ObjectTracker::scheduleForRemove(int32x2_t *this, physx::Scb::Base *a2, int8x8_t a3)
{
  unsigned int v3;
  physx::Scb::Base *v4;

  v3 = *((_DWORD *)a2 + 2);
  if (v3 >> 30 == 2)
  {
    *((_DWORD *)a2 + 2) = v3 | 0xC0000000;
    if ((v3 & 0x10000000) == 0)
      return (int32x2_t *)physx::Scb::ObjectTracker::insert(this, a2, a3);
  }
  else if (v3 >> 30 == 1)
  {
    *((_DWORD *)a2 + 2) = v3 & 0x3FFFFFFF;
    v4 = a2;
    return (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this, (uint64_t *)&v4);
  }
  return this;
}

uint64_t physx::Scb::ObjectTracker::clear(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v18;

  if (*(_DWORD *)(this + 52))
  {
    v1 = this;
    v2 = 0;
    v3 = *(_QWORD *)(this + 8);
    do
    {
      v4 = *(_QWORD *)(v3 + 8 * v2);
      v5 = *(_DWORD *)(v4 + 8);
      v6 = v5 & 0xFFFFFFF;
      if ((v5 >> 30) - 1 > 1)
        *(_QWORD *)v4 = 0;
      else
        v6 |= 0x80000000;
      *(_DWORD *)(v4 + 8) = v6;
      if ((v5 & 0x20000000) != 0)
        this = physx::NpDestroy(*(_QWORD *)(v3 + 8 * v2));
      ++v2;
      v7 = *(unsigned int *)(v1 + 52);
    }
    while (v2 < v7);
    v8 = *(_DWORD *)(v1 + 36);
    if (v8 && (_DWORD)v7)
    {
      this = (uint64_t)memset(*(void **)(v1 + 24), 255, (4 * v8));
      v9 = *(_QWORD *)(v1 + 16);
      v10 = (*(_DWORD *)(v1 + 32) - 1);
      if (*(_DWORD *)(v1 + 32) == 1)
      {
        v18 = 0;
      }
      else
      {
        _X10 = v9 + 128;
        v12 = 1;
        do
        {
          __asm { PRFM            #0, [X10] }
          *(_DWORD *)(_X10 - 128) = v12++;
          _X10 += 4;
          --v10;
        }
        while (v10);
        v18 = (*(_DWORD *)(v1 + 32) - 1);
      }
      *(_DWORD *)(v9 + 4 * v18) = -1;
      *(_DWORD *)(v1 + 44) = 0;
      *(_DWORD *)(v1 + 52) = 0;
    }
  }
  return this;
}

uint64_t physx::Scb::Scene::Scene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  pthread_mutex_t *v7;

  physx::Sc::Scene::Scene(a1 + 16, a2, a3);
  *(_OWORD *)(a1 + 7664) = 0u;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v6 = "<allocation names disabled>";
  v7 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, 72, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 7680) = v7;
  physx::shdfnd::MutexImpl::MutexImpl(v7);
  *(_WORD *)(a1 + 7688) = 0;
  physx::Cm::FlushPool::FlushPool((physx::Cm::FlushPool *)(a1 + 7696), 0x4000u);
  *(_QWORD *)(a1 + 7768) = 0;
  *(_OWORD *)(a1 + 7736) = 0u;
  *(_OWORD *)(a1 + 7752) = 0u;
  *(_QWORD *)(a1 + 7776) = -3233808384;
  *(_QWORD *)(a1 + 7784) = 0;
  physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7736, 0x40u, 0);
  *(_QWORD *)(a1 + 7872) = 0;
  *(_OWORD *)(a1 + 7856) = 0u;
  *(_OWORD *)(a1 + 7840) = 0u;
  *(_OWORD *)(a1 + 7824) = 0u;
  *(_OWORD *)(a1 + 7808) = 0u;
  *(_OWORD *)(a1 + 7792) = 0u;
  *(_QWORD *)(a1 + 7880) = -3233808384;
  *(_QWORD *)(a1 + 7888) = 0;
  physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7840, 0x40u, 0);
  *(_QWORD *)(a1 + 7928) = 0;
  *(_OWORD *)(a1 + 7896) = 0u;
  *(_OWORD *)(a1 + 7912) = 0u;
  *(_QWORD *)(a1 + 7936) = -3233808384;
  *(_QWORD *)(a1 + 7944) = 0;
  physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7896, 0x40u, 0);
  *(_QWORD *)(a1 + 7984) = 0;
  *(_OWORD *)(a1 + 7968) = 0u;
  *(_OWORD *)(a1 + 7952) = 0u;
  *(_QWORD *)(a1 + 7992) = -3233808384;
  *(_QWORD *)(a1 + 8000) = 0;
  physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7952, 0x40u, 0);
  *(_QWORD *)(a1 + 8040) = 0;
  *(_OWORD *)(a1 + 8008) = 0u;
  *(_OWORD *)(a1 + 8024) = 0u;
  *(_QWORD *)(a1 + 8048) = -3233808384;
  *(_QWORD *)(a1 + 8056) = 0;
  physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 8008, 0x40u, 0);
  *(_QWORD *)(a1 + 8096) = 0;
  *(_OWORD *)(a1 + 8080) = 0u;
  *(_OWORD *)(a1 + 8064) = 0u;
  *(_QWORD *)(a1 + 8104) = -3233808384;
  *(_QWORD *)(a1 + 8112) = 0;
  physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 8064, 0x40u, 0);
  *(_QWORD *)(a1 + 8152) = 0;
  *(_OWORD *)(a1 + 8120) = 0u;
  *(_OWORD *)(a1 + 8136) = 0u;
  *(_QWORD *)(a1 + 8160) = -3233808384;
  *(_QWORD *)(a1 + 8168) = 0;
  physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 8120, 0x40u, 0);
  *(_DWORD *)(a1 + 8176) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 8592) = 0;
  *(_QWORD *)(a1 + 8604) = 0;
  *(_OWORD *)(a1 + 8324) = 0u;
  *(_OWORD *)(a1 + 8340) = 0u;
  *(_OWORD *)(a1 + 8356) = 0u;
  *(_OWORD *)(a1 + 8372) = 0u;
  *(_OWORD *)(a1 + 8388) = 0u;
  *(_OWORD *)(a1 + 8404) = 0u;
  *(_OWORD *)(a1 + 8420) = 0u;
  *(_OWORD *)(a1 + 8432) = 0u;
  *(_QWORD *)(a1 + 8284) = 0;
  *(_QWORD *)(a1 + 8292) = 0;
  *(_QWORD *)(a1 + 8276) = 0;
  return a1;
}

void physx::Scb::Scene::switchRigidToNoSim(physx::Scb::Scene *this, physx::Scb::RigidObject *a2, int a3)
{
  unint64_t v3;
  physx::Sc::Scene *v4;
  uint64_t *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE v12[520];
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned int *)a2 + 2);
  if (v3 >> 30 == 2)
  {
    v14 = 0x4000000000;
    v12[512] = 1;
    v13 = v12;
    v4 = (physx::Scb::Scene *)((char *)this + 16);
    v5 = (uint64_t *)((char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3));
    if (a3)
      physx::Sc::Scene::removeBody(v4, v5, (uint64_t)v12, 1);
    else
      physx::Sc::Scene::removeStatic(v4, v5, (uint64_t)v12, 1);
    v6 = v13;
    if ((_DWORD)v14)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)&v6[8 * v7];
        v9 = (unsigned int *)(v8 - 48);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 56) + 16))(v8 - 56);
        ++v7;
      }
      while (v7 < v14);
      v6 = v13;
    }
    if ((v14 & 0x8000000000000000) == 0 && (v14 & 0x7FFFFFFF00000000) != 0 && v6 != v12)
    {
      if (v6)
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    }
  }
}

uint64_t physx::Scb::Scene::switchRigidFromNoSim(uint64_t this, physx::Scb::RigidObject *a2, int a3)
{
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  int v6;
  uint64_t **v7;
  char *v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;

  v3 = *((unsigned int *)a2 + 2);
  if (v3 >> 30 != 2)
    return this;
  if (a3)
  {
    v4 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    v5 = v4 + 72;
    v6 = *((unsigned __int16 *)v4 + 40);
    if (v6 != 1)
      v5 = (_QWORD *)*v5;
    this = physx::Sc::Scene::addBody((physx::Sc::Scene *)(this + 16), (physx::Scb::RigidObject *)((char *)a2+ *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3)), v5, *((unsigned __int16 *)v4 + 40), 80, 0, *((_DWORD *)v4 + 26) != -1);
    if (!v6)
      return this;
LABEL_10:
    for (i = 0; i != v6; ++i)
    {
      v10 = (unsigned int *)(v5[i] + 32);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    return this;
  }
  v7 = (uint64_t **)((char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (BYTE3(v3) & 0xF) + 3));
  v8 = (char *)v7 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)v7 + 13) + 10);
  v5 = v8 + 40;
  v6 = *((unsigned __int16 *)v8 + 24);
  if (v6 != 1)
    v5 = (_QWORD *)*v5;
  this = physx::Sc::Scene::addStatic(this + 16, v7, v5, *((unsigned __int16 *)v8 + 24), 80, 0);
  if (v6)
    goto LABEL_10;
  return this;
}

int32x2_t *physx::Scb::Scene::addActor(int32x2_t *a1, physx::Scb::Base *a2, char a3, uint64_t a4, int8x8_t a5)
{
  int32x2_t *v8;
  int32x2_t *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  int v19;
  _BYTE v20[520];
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 980;
  if ((a3 & 1) != 0)
    return physx::Scb::Scene::addRigidNoSim<false,physx::Scb::RigidStatic>(a1, a2, v8, a5);
  result = physx::Scb::Scene::add<physx::Scb::RigidStatic>(a1, a2, v8, a4, a5);
  if (a1[961].i8[1])
  {
    v22 = 0x4000000000;
    v10 = 1;
    v20[512] = 1;
    v21 = v20;
    v11 = *((unsigned int *)a2 + 2);
    v12 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v11 >> 24) & 0xF) + 3);
    v13 = &v12[*((_QWORD *)&physx::Sc::gOffsetTable + v12[13] + 10)];
    v14 = v13 + 40;
    v15 = *((unsigned __int16 *)v13 + 24);
    if ((_DWORD)v15 != 1)
    {
      if (!(_DWORD)v15)
        return result;
      v14 = *(char **)v14;
      v10 = v15;
    }
    v16 = *(_QWORD *)a2;
    v17 = v11 & 0xC0000000;
    do
    {
      v18 = *(char **)v14;
      v19 = *(_DWORD *)(*(_QWORD *)v14 + 56);
      if ((v19 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v18 + 14) = v19 & 0x3FFFFFFF | v17;
        *((_QWORD *)v18 + 6) = v16;
      }
      v14 += 8;
      --v10;
    }
    while (v10);
  }
  return result;
}

int32x2_t *physx::Scb::Scene::addActor(int32x2_t *result, physx::Scb::Base *a2, char a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  _BYTE *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  physx::Sc::Scene *v30;
  physx::Sc::BodyCore *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  BOOL v41;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int v47;
  _BYTE v48[520];
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = result;
  v7 = (char *)&result[961] + 1;
  if ((a3 & 1) != 0)
  {
    if (result[961].i8[1])
    {
      result = physx::Scb::ObjectTracker::scheduleForInsert(result + 987, a2, a6);
      v50 = 0x4000000000;
      v49 = v48;
      v8 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
      v9 = v8 + 72;
      v10 = *((unsigned __int16 *)v8 + 40);
      if ((_DWORD)v10 == 1)
      {
        v10 = 1;
        goto LABEL_25;
      }
      if ((_DWORD)v10)
      {
        v9 = *(char **)v9;
LABEL_25:
        v20 = *(_QWORD *)a2;
        v21 = *((_DWORD *)a2 + 2) & 0xC0000000;
        do
        {
          v22 = *(char **)v9;
          v23 = *(_DWORD *)(*(_QWORD *)v9 + 56);
          if ((v23 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v22 + 14) = v23 & 0x3FFFFFFF | v21;
            *((_QWORD *)v22 + 6) = v20;
          }
          v9 += 8;
          --v10;
        }
        while (v10);
      }
LABEL_42:
      *((_DWORD *)a2 + 70) = *((float *)a2 + 69) == 0.0
                          && *((float *)a2 + 63) == 0.0
                          && *((float *)a2 + 64) == 0.0
                          && *((float *)a2 + 65) == 0.0
                          && *((float *)a2 + 66) == 0.0
                          && *((float *)a2 + 67) == 0.0
                          && *((float *)a2 + 68) == 0.0;
      return result;
    }
    *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFFFF | 0x80000000;
    v50 = 0x4000000000;
    v49 = v48;
    v15 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    v16 = v15 + 72;
    v17 = *((unsigned __int16 *)v15 + 40);
    if ((_DWORD)v17 == 1)
    {
      v17 = 1;
    }
    else
    {
      if (!(_DWORD)v17)
        goto LABEL_42;
      v16 = *(char **)v16;
    }
    do
    {
      v28 = *(char **)v16;
      v29 = *(_DWORD *)(*(_QWORD *)v16 + 56);
      if ((v29 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v28 + 14) = v29 & 0x3FFFFFFF | 0x80000000;
        *((_QWORD *)v28 + 6) = result;
      }
      v16 += 8;
      --v17;
    }
    while (v17);
    goto LABEL_42;
  }
  if (result[961].i8[1])
  {
    result = physx::Scb::ObjectTracker::scheduleForInsert(result + 987, a2, a6);
  }
  else
  {
    v18 = *((unsigned int *)a2 + 2);
    *((_DWORD *)a2 + 2) = v18 & 0xFFFFFFF | 0x80000000;
    if ((v18 & 1) != 0)
      v19 = (_BYTE *)*((_QWORD *)a2 + 2);
    else
      v19 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v18 >> 24) & 0xF) + 3) + 12;
    if ((*v19 & 8) != 0)
    {
      v50 = 0x4000000000;
      v49 = v48;
      v43 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
      v44 = v43 + 72;
      v45 = *((unsigned __int16 *)v43 + 40);
      if ((_DWORD)v45 == 1)
      {
        v45 = 1;
      }
      else
      {
        if (!(_DWORD)v45)
          goto LABEL_7;
        v44 = *(char **)v44;
      }
      do
      {
        v46 = *(char **)v44;
        v47 = *(_DWORD *)(*(_QWORD *)v44 + 56);
        if ((v47 & 0xF000000) == 0x1000000)
        {
          *((_DWORD *)v46 + 14) = v47 & 0x3FFFFFFF | 0x80000000;
          *((_QWORD *)v46 + 6) = result;
        }
        v44 += 8;
        --v45;
      }
      while (v45);
    }
    else
    {
      v30 = (physx::Sc::Scene *)&result[2];
      v31 = (physx::Scb::Base *)((char *)a2 + 32);
      v50 = 0x4000000000;
      v48[512] = 1;
      v49 = v48;
      v32 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10) + 32;
      v33 = v32 + 40;
      v34 = *((unsigned __int16 *)v32 + 24);
      if ((_DWORD)v34 != 1)
        v33 = (_QWORD *)*v33;
      result = (int32x2_t *)physx::Sc::Scene::addBody(v30, v31, v33, *((unsigned __int16 *)v32 + 24), 80, a4, a5 != 0);
      if ((_DWORD)v34)
      {
        v35 = 0;
        v36 = *(_QWORD *)a2;
        do
        {
          v37 = v33[v35];
          v38 = *(_DWORD *)(v37 + 56);
          if ((v38 & 0xF000000) == 0x1000000)
          {
            *(_DWORD *)(v37 + 56) = v38 & 0x3FFFFFFF | 0x80000000;
            *(_QWORD *)(v37 + 48) = v36;
          }
          v39 = (unsigned int *)(v37 + 32);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 + 1, v39));
          ++v35;
        }
        while (v35 != v34);
      }
      if ((v50 & 0x8000000000000000) == 0)
      {
        v41 = (v50 & 0x7FFFFFFF00000000) == 0 || v49 == v48;
        if (!v41 && v49 != 0)
          result = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
  }
LABEL_7:
  v11 = *((float *)a2 + 69) == 0.0
     && *((float *)a2 + 63) == 0.0
     && *((float *)a2 + 64) == 0.0
     && *((float *)a2 + 65) == 0.0
     && *((float *)a2 + 66) == 0.0
     && *((float *)a2 + 67) == 0.0
     && *((float *)a2 + 68) == 0.0;
  *((_DWORD *)a2 + 70) = v11;
  if (*v7)
  {
    v50 = 0x4000000000;
    v49 = v48;
    v12 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    v13 = v12 + 72;
    v14 = *((unsigned __int16 *)v12 + 40);
    if ((_DWORD)v14 == 1)
    {
      v14 = 1;
    }
    else
    {
      if (!(_DWORD)v14)
        return result;
      v13 = *(char **)v13;
    }
    v24 = *(_QWORD *)a2;
    v25 = *((_DWORD *)a2 + 2) & 0xC0000000;
    do
    {
      v26 = *(char **)v13;
      v27 = *(_DWORD *)(*(_QWORD *)v13 + 56);
      if ((v27 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v26 + 14) = v27 & 0x3FFFFFFF | v25;
        *((_QWORD *)v26 + 6) = v24;
      }
      v13 += 8;
      --v14;
    }
    while (v14);
  }
  return result;
}

void physx::Scb::Scene::removeActor(uint64_t a1, physx::Scb::Base *a2, int a3, char a4, __n128 a5)
{
  int32x2_t *v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  int v18;
  _BYTE v19[520];
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = (int32x2_t *)(a1 + 7840);
  if ((a4 & 1) != 0)
  {
    physx::Scb::Scene::removeRigidNoSim<false,physx::Scb::RigidStatic>(a1, a2, v8, a5);
  }
  else
  {
    physx::Scb::Scene::remove<physx::Scb::RigidStatic>(a1, a2, v8, a3, a5);
    if (*(_BYTE *)(a1 + 7689))
    {
      v9 = *((_DWORD *)a2 + 2);
      if (a3)
      {
        v9 |= 0x10u;
        *((_DWORD *)a2 + 2) = v9;
      }
      v21 = 0x4000000000;
      v10 = 1;
      v19[512] = 1;
      v20 = v19;
      v11 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (HIBYTE(v9) & 0xF) + 3);
      v12 = &v11[*((_QWORD *)&physx::Sc::gOffsetTable + v11[13] + 10)];
      v13 = v12 + 40;
      v14 = *((unsigned __int16 *)v12 + 24);
      if ((_DWORD)v14 != 1)
      {
        if (!(_DWORD)v14)
          goto LABEL_13;
        v13 = *(char **)v13;
        v10 = v14;
      }
      v15 = *(_QWORD *)a2;
      v16 = v9 & 0xC0000000;
      do
      {
        v17 = *(char **)v13;
        v18 = *(_DWORD *)(*(_QWORD *)v13 + 56);
        if ((v18 & 0xF000000) == 0x1000000)
        {
          *((_DWORD *)v17 + 14) = v18 & 0x3FFFFFFF | v16;
          *((_QWORD *)v17 + 6) = v15;
        }
        v13 += 8;
        --v10;
      }
      while (v10);
    }
  }
LABEL_13:
  *((_DWORD *)a2 + 2) &= ~0x20u;
}

void physx::Scb::Scene::remove<physx::Scb::RigidStatic>(uint64_t a1, physx::Scb::Base *a2, int32x2_t *this, int a4, __n128 a5)
{
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  __n128 **v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  unsigned int v29;
  int v30;
  __n128 *v31;
  _BYTE v32[512];
  char v33;
  _BYTE *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 7689))
  {
    physx::Scb::ObjectTracker::scheduleForRemove(this, a2, (int8x8_t)a5.n128_u64[0]);
    return;
  }
  v6 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)a2 + 11) & 0xF) + 3);
  if ((v6[12] & 8) == 0)
  {
    v35[0] = 0x4000000000;
    v33 = 1;
    v34 = v32;
    v7 = *(_QWORD *)(a1 + 4392);
    if (v7)
      v8 = (_BYTE *)(v7 + 536);
    else
      v8 = v32;
    v9 = (uint64_t *)((char *)a2 + 32);
    if (v7)
      v10 = (uint64_t *)(v7 + 1056);
    else
      v10 = (uint64_t *)&v34;
    if (v7)
      v11 = (unsigned int *)(v7 + 1064);
    else
      v11 = (unsigned int *)v35;
    physx::Sc::Scene::removeStatic((physx::Sc::Scene *)(a1 + 16), v9, (uint64_t)v8, a4);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *v10;
      v16 = *(_QWORD *)a2 + 7736;
      do
      {
        v17 = *(_QWORD *)(v15 + 8 * v14);
        v18 = *(_DWORD *)(v17 - 24);
        if ((v18 & 0x10000000) != 0)
        {
          physx::Scb::Shape::syncState((__n128 *)(v17 - 32), v12);
          v31 = (__n128 *)(v17 - 32);
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v16, (uint64_t *)&v31);
          v18 = *(_DWORD *)(v17 - 24) & 0xEFFFFFFF;
          *(_DWORD *)(v17 - 24) = v18;
        }
        if ((v18 & 0xF000000) == 0x1000000)
        {
          *(_DWORD *)(v17 - 24) = v18 & 0x3FFFFFFF;
          *(_QWORD *)(v17 - 32) = 0;
        }
        v19 = (unsigned int *)(v17 - 48);
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          (*(void (**)(uint64_t))(*(_QWORD *)(v17 - 56) + 16))(v17 - 56);
        ++v14;
      }
      while (v14 != v13);
    }
    if ((v35[0] & 0x8000000000000000) != 0 || (v35[0] & 0x7FFFFFFF00000000) == 0)
      goto LABEL_41;
    v22 = v34;
    goto LABEL_38;
  }
  v35[0] = 0x4000000000;
  v23 = 1;
  v33 = 1;
  v34 = v32;
  v24 = &v6[*((_QWORD *)&physx::Sc::gOffsetTable + v6[13] + 10)];
  v25 = (__n128 **)(v24 + 40);
  v26 = *((unsigned __int16 *)v24 + 24);
  if ((_DWORD)v26 != 1)
  {
    if (!(_DWORD)v26)
    {
      v22 = v32;
      v30 = 64;
      goto LABEL_37;
    }
    v25 = (__n128 **)*v25;
    v23 = v26;
  }
  v27 = *(_QWORD *)a2 + 7736;
  do
  {
    v28 = *v25;
    v29 = (*v25)[3].n128_u32[2];
    if ((v29 & 0x10000000) != 0)
    {
      physx::Scb::Shape::syncState(v28 + 3, a5);
      v31 = v28 + 3;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v27, (uint64_t *)&v31);
      v29 = v28[3].n128_u32[2] & 0xEFFFFFFF;
      v28[3].n128_u32[2] = v29;
    }
    if ((v29 & 0xF000000) == 0x1000000)
    {
      v28[3].n128_u32[2] = v29 & 0x3FFFFFFF;
      v28[3].n128_u64[0] = 0;
    }
    ++v25;
    --v23;
  }
  while (v23);
  v22 = v34;
  v30 = HIDWORD(v35[0]);
  if ((v35[0] & 0x8000000000000000) != 0)
    goto LABEL_41;
LABEL_37:
  if ((v30 & 0x7FFFFFFF) != 0)
  {
LABEL_38:
    if (v22 != v32)
    {
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
LABEL_41:
  *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
  *(_QWORD *)a2 = 0;
}

uint64_t physx::Scb::Scene::removeRigidNoSim<false,physx::Scb::RigidStatic>(uint64_t result, physx::Scb::Base *a2, int32x2_t *this, __n128 a4)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __n128 **v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  unsigned int v22;
  _BYTE *v23;
  int v24;
  __n128 *v25;
  _BYTE v26[512];
  char v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(result + 7689))
  {
    v29 = 0x4000000000;
    v15 = 1;
    v27 = 1;
    v28 = v26;
    v16 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)a2 + 11) & 0xF) + 3);
    v17 = &v16[*((_QWORD *)&physx::Sc::gOffsetTable + v16[13] + 10)];
    v18 = (__n128 **)(v17 + 40);
    v19 = *((unsigned __int16 *)v17 + 24);
    if ((_DWORD)v19 != 1)
    {
      if (!(_DWORD)v19)
      {
        v23 = v26;
        v24 = 64;
LABEL_20:
        if ((v24 & 0x7FFFFFFF) != 0 && v23 != v26 && v23)
          result = (*(uint64_t (**)(uint64_t, _BYTE *, int32x2_t *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                        + 24)
                                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, v23, this);
LABEL_24:
        *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
        *(_QWORD *)a2 = 0;
        return result;
      }
      v18 = (__n128 **)*v18;
      v15 = v19;
    }
    v20 = *(_QWORD *)a2 + 7736;
    do
    {
      v21 = *v18;
      v22 = (*v18)[3].n128_u32[2];
      if ((v22 & 0x10000000) != 0)
      {
        physx::Scb::Shape::syncState(v21 + 3, a4);
        v25 = v21 + 3;
        result = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v20, (uint64_t *)&v25);
        v22 = v21[3].n128_u32[2] & 0xEFFFFFFF;
        v21[3].n128_u32[2] = v22;
      }
      if ((v22 & 0xF000000) == 0x1000000)
      {
        v21[3].n128_u32[2] = v22 & 0x3FFFFFFF;
        v21[3].n128_u64[0] = 0;
      }
      ++v18;
      --v15;
    }
    while (v15);
    v23 = v28;
    v24 = HIDWORD(v29);
    if (v29 < 0)
      goto LABEL_24;
    goto LABEL_20;
  }
  result = (uint64_t)physx::Scb::ObjectTracker::scheduleForRemove(this, a2, (int8x8_t)a4.n128_u64[0]);
  v29 = 0x4000000000;
  v5 = 1;
  v27 = 1;
  v28 = v26;
  v6 = *((unsigned int *)a2 + 2);
  v7 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3);
  v8 = &v7[*((_QWORD *)&physx::Sc::gOffsetTable + v7[13] + 10)];
  v9 = v8 + 40;
  v10 = *((unsigned __int16 *)v8 + 24);
  if ((_DWORD)v10 != 1)
  {
    if (!(_DWORD)v10)
      return result;
    v9 = *(char **)v9;
    v5 = v10;
  }
  v11 = *(_QWORD *)a2;
  v12 = v6 & 0xC0000000;
  do
  {
    v13 = *(char **)v9;
    v14 = *(_DWORD *)(*(_QWORD *)v9 + 56);
    if ((v14 & 0xF000000) == 0x1000000)
    {
      *((_DWORD *)v13 + 14) = v14 & 0x3FFFFFFF | v12;
      *((_QWORD *)v13 + 6) = v11;
    }
    v9 += 8;
    --v5;
  }
  while (v5);
  return result;
}

void physx::Scb::Scene::removeActor(int32x2_t *this, physx::Scb::Body *a2, int a3, char a4, __n128 a5)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  __n128 **v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  unsigned int v21;
  _BYTE *v22;
  int v23;
  physx::Sc::Scene *v24;
  int32x2_t v25;
  _BYTE *v26;
  uint64_t *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  int v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  unsigned int v51;
  int v52;
  int v53;
  _BYTE *v54;
  unsigned int v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  int v62;
  __n128 *v63;
  _BYTE v64[512];
  char v65;
  _BYTE *v66;
  _QWORD v67[3];

  v67[1] = *MEMORY[0x24BDAC8D0];
  if ((a4 & 1) != 0)
  {
    v7 = (char *)a2 + 32;
    if (this[961].i8[1])
    {
      physx::Scb::ObjectTracker::scheduleForRemove(this + 987, a2, (int8x8_t)a5.n128_u64[0]);
      v67[0] = 0x4000000000;
      v66 = v64;
      v8 = &v7[*((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10)];
      v9 = v8 + 40;
      v10 = *((unsigned __int16 *)v8 + 24);
      if ((_DWORD)v10 == 1)
      {
        v10 = 1;
        goto LABEL_53;
      }
      if ((_DWORD)v10)
      {
        v9 = *(char **)v9;
LABEL_53:
        v39 = *(_QWORD *)a2;
        v40 = *((_DWORD *)a2 + 2) & 0xC0000000;
        do
        {
          v41 = *(char **)v9;
          v42 = *(_DWORD *)(*(_QWORD *)v9 + 56);
          if ((v42 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v41 + 14) = v42 & 0x3FFFFFFF | v40;
            *((_QWORD *)v41 + 6) = v39;
          }
          v9 += 8;
          --v10;
        }
        while (v10);
      }
LABEL_57:
      v43 = *((_DWORD *)a2 + 71);
      v44 = (_BYTE *)(*((_QWORD *)a2 + 2) + 348);
      if ((v43 & 0x4000) == 0)
        v44 = (char *)a2 + 76;
      if ((*v44 & 1) != 0)
      {
        physx::Scb::Body::putToSleepInternal(a2, (int8x8_t)a5.n128_u64[0]);
      }
      else
      {
        *((_DWORD *)a2 + 70) = 1;
        *((_DWORD *)a2 + 71) = v43 & 0xFFF0FFFF;
      }
      *((_DWORD *)a2 + 2) &= ~0x20u;
      return;
    }
    v67[0] = 0x4000000000;
    v15 = 1;
    v65 = 1;
    v66 = v64;
    v16 = &v7[*((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10)];
    v17 = (__n128 **)(v16 + 40);
    v18 = *((unsigned __int16 *)v16 + 24);
    if ((_DWORD)v18 != 1)
    {
      if (!(_DWORD)v18)
      {
        v22 = v64;
        v23 = 64;
LABEL_22:
        if ((v23 & 0x7FFFFFFF) != 0 && v22 != v64 && v22)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_26:
        *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
        *(_QWORD *)a2 = 0;
        goto LABEL_57;
      }
      v17 = (__n128 **)*v17;
      v15 = v18;
    }
    v19 = *(_QWORD *)a2 + 7736;
    do
    {
      v20 = *v17;
      v21 = (*v17)[3].n128_u32[2];
      if ((v21 & 0x10000000) != 0)
      {
        physx::Scb::Shape::syncState(v20 + 3, a5);
        v63 = v20 + 3;
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v19, (uint64_t *)&v63);
        v21 = v20[3].n128_u32[2] & 0xEFFFFFFF;
        v20[3].n128_u32[2] = v21;
      }
      if ((v21 & 0xF000000) == 0x1000000)
      {
        v20[3].n128_u32[2] = v21 & 0x3FFFFFFF;
        v20[3].n128_u64[0] = 0;
      }
      ++v17;
      --v15;
    }
    while (v15);
    v22 = v66;
    v23 = HIDWORD(v67[0]);
    if ((v67[0] & 0x8000000000000000) != 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  v12 = *((_QWORD *)a2 + 26);
  if (*((_DWORD *)a2 + 2) >> 30 == 1 && v12 != 0)
    physx::Sc::BodyCore::tearDownSimStateData((uint64_t)a2 + 32, *(_QWORD *)(*(_QWORD *)a2 + 4384), *(unsigned __int8 *)(v12 + 31) == 1);
  v14 = (char *)&this[961] + 1;
  if (this[961].i8[1])
  {
    physx::Scb::ObjectTracker::scheduleForRemove(this + 987, a2, (int8x8_t)a5.n128_u64[0]);
    goto LABEL_78;
  }
  *((_DWORD *)a2 + 71) &= 0xF9FFFFFF;
  if ((*((_BYTE *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*((_BYTE *)a2 + 11) & 0xF) + 3) + 12) & 8) == 0)
  {
    v24 = (physx::Sc::Scene *)&this[2];
    v67[0] = 0x4000000000;
    v65 = 1;
    v66 = v64;
    v25 = this[549];
    if (v25)
      v26 = (_BYTE *)(*(_QWORD *)&v25 + 536);
    else
      v26 = v64;
    if (v25)
      v27 = (uint64_t *)(*(_QWORD *)&v25 + 1056);
    else
      v27 = (uint64_t *)&v66;
    if (v25)
      v28 = (unsigned int *)(*(_QWORD *)&v25 + 1064);
    else
      v28 = (unsigned int *)v67;
    physx::Sc::Scene::removeBody(v24, (uint64_t *)a2 + 4, (uint64_t)v26, a3);
    v29 = *v28;
    if ((_DWORD)v29)
    {
      v30 = 0;
      v31 = *v27;
      v32 = *(_QWORD *)a2 + 7736;
      do
      {
        v33 = *(_QWORD *)(v31 + 8 * v30);
        v34 = *(_DWORD *)(v33 - 24);
        if ((v34 & 0x10000000) != 0)
        {
          physx::Scb::Shape::syncState((__n128 *)(v33 - 32), a5);
          v63 = (__n128 *)(v33 - 32);
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v32, (uint64_t *)&v63);
          v34 = *(_DWORD *)(v33 - 24) & 0xEFFFFFFF;
          *(_DWORD *)(v33 - 24) = v34;
        }
        if ((v34 & 0xF000000) == 0x1000000)
        {
          *(_DWORD *)(v33 - 24) = v34 & 0x3FFFFFFF;
          *(_QWORD *)(v33 - 32) = 0;
        }
        v35 = (unsigned int *)(v33 - 48);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          (*(void (**)(uint64_t))(*(_QWORD *)(v33 - 56) + 16))(v33 - 56);
        ++v30;
      }
      while (v30 != v29);
    }
    if ((v67[0] & 0x8000000000000000) != 0 || (v67[0] & 0x7FFFFFFF00000000) == 0)
      goto LABEL_77;
    v38 = v66;
    goto LABEL_74;
  }
  v67[0] = 0x4000000000;
  v45 = 1;
  v65 = 1;
  v66 = v64;
  v46 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
  v47 = (__n128 *)(v46 + 72);
  v48 = *((unsigned __int16 *)v46 + 40);
  if ((_DWORD)v48 != 1)
  {
    if (!(_DWORD)v48)
    {
      v38 = v64;
      v52 = 64;
      goto LABEL_73;
    }
    v47 = (__n128 *)v47->n128_u64[0];
    v45 = v48;
  }
  v49 = *(_QWORD *)a2 + 7736;
  do
  {
    v50 = (__n128 *)v47->n128_u64[0];
    v51 = *(_DWORD *)(v47->n128_u64[0] + 56);
    if ((v51 & 0x10000000) != 0)
    {
      physx::Scb::Shape::syncState(v50 + 3, a5);
      v63 = v50 + 3;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v49, (uint64_t *)&v63);
      v51 = v50[3].n128_u32[2] & 0xEFFFFFFF;
      v50[3].n128_u32[2] = v51;
    }
    if ((v51 & 0xF000000) == 0x1000000)
    {
      v50[3].n128_u32[2] = v51 & 0x3FFFFFFF;
      v50[3].n128_u64[0] = 0;
    }
    v47 = (__n128 *)((char *)v47 + 8);
    --v45;
  }
  while (v45);
  v38 = v66;
  v52 = HIDWORD(v67[0]);
  if ((v67[0] & 0x8000000000000000) != 0)
    goto LABEL_77;
LABEL_73:
  if ((v52 & 0x7FFFFFFF) != 0)
  {
LABEL_74:
    if (v38 != v64 && v38)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
LABEL_77:
  *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
  *(_QWORD *)a2 = 0;
LABEL_78:
  v53 = *((_DWORD *)a2 + 71);
  v54 = (_BYTE *)(*((_QWORD *)a2 + 2) + 348);
  if ((v53 & 0x4000) == 0)
    v54 = (char *)a2 + 76;
  if ((*v54 & 1) != 0)
  {
    physx::Scb::Body::putToSleepInternal(a2, (int8x8_t)a5.n128_u64[0]);
  }
  else
  {
    *((_DWORD *)a2 + 70) = 1;
    *((_DWORD *)a2 + 71) = v53 & 0xFFF0FFFF;
  }
  v55 = *((_DWORD *)a2 + 2) & 0xFFFFFFDF;
  *((_DWORD *)a2 + 2) = v55;
  if (*v14)
  {
    if (a3)
    {
      v55 |= 0x10u;
      *((_DWORD *)a2 + 2) = v55;
    }
    v67[0] = 0x4000000000;
    v66 = v64;
    v56 = (char *)a2 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    v57 = v56 + 72;
    v58 = *((unsigned __int16 *)v56 + 40);
    if ((_DWORD)v58 == 1)
    {
      v58 = 1;
    }
    else
    {
      if (!(_DWORD)v58)
        return;
      v57 = *(char **)v57;
    }
    v59 = *(_QWORD *)a2;
    v60 = v55 & 0xC0000000;
    do
    {
      v61 = *(char **)v57;
      v62 = *(_DWORD *)(*(_QWORD *)v57 + 56);
      if ((v62 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v61 + 14) = v62 & 0x3FFFFFFF | v60;
        *((_QWORD *)v61 + 6) = v59;
      }
      v57 += 8;
      --v58;
    }
    while (v58);
  }
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::Constraint>(int32x2_t *a1, physx::Scb::Base *a2, int32x2_t *this, int8x8_t a4)
{
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a2 = a1;
  if (a1[961].i8[1])
    return physx::Scb::ObjectTracker::scheduleForInsert(this, a2, a4);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFFFF | 0x80000000;
  v6 = a1 + 2;
  v9 = 0;
  v10 = 0;
  physx::NpConstraintGetRigidObjectsFromScb((uint64_t)a2, &v10, &v9);
  if (v10)
    v7 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v10 + 11) & 0xF) + 3) + v10;
  else
    v7 = 0;
  if (v9)
    v8 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v9 + 11) & 0xF) + 3) + v9;
  else
    v8 = 0;
  return (int32x2_t *)physx::Sc::Scene::addConstraint(v6, (uint64_t)a2 + 24, v7, v8);
}

int32x2_t *physx::Scb::Scene::removeConstraint(uint64_t a1, physx::Scb::Base *a2, int8x8_t a3)
{
  int32x2_t *result;

  if (*(_BYTE *)(a1 + 7689))
    return physx::Scb::ObjectTracker::scheduleForRemove((int32x2_t *)(a1 + 7952), a2, a3);
  result = (int32x2_t *)physx::Sc::Scene::removeConstraint((int32x2_t **)(a1 + 16), (physx::Scb::Base *)((char *)a2 + 24), a3);
  *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
  *(_QWORD *)a2 = 0;
  return result;
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::Articulation>(int32x2_t *a1, uint64_t a2, int32x2_t *this, int8x8_t a4)
{
  int32x2_t *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = a1;
  if (a1[961].i8[1])
    return physx::Scb::ObjectTracker::scheduleForInsert(this, (physx::Scb::Base *)a2, a4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFFFF | 0x80000000;
  v5 = a1 + 2;
  if (*(_DWORD *)(a2 + 128))
  {
    v6 = **(_QWORD **)(a2 + 120);
    if (v6)
      v7 = v6 + 96;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  return (int32x2_t *)physx::Sc::Scene::addArticulation(v5, (physx::Sc::ArticulationCore *)(a2 + 24), (physx::Sc::BodySim **)(v7 + 32));
}

int32x2_t *physx::Scb::Scene::removeArticulation(int32x2_t *this, physx::Scb::Articulation *a2, int8x8_t a3)
{
  uint64_t *v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t *result;
  int v9;

  v5 = (uint64_t *)*((_QWORD *)a2 + 3);
  if (v5)
  {
    v6 = this[240];
    v7 = *v5;
    v9 = *((_DWORD *)v5 + 18);
    *(double *)&a3 = (*(double (**)(int32x2_t, uint64_t, int *))(**(_QWORD **)&v6 + 72))(v6, v7, &v9);
  }
  result = physx::Scb::Scene::remove<physx::Scb::Articulation>((uint64_t)this, (physx::Sc::ArticulationSim **)a2, this + 1001, a3);
  *((_BYTE *)a2 + 76) = 1;
  return result;
}

int32x2_t *physx::Scb::Scene::remove<physx::Scb::Articulation>(uint64_t a1, physx::Sc::ArticulationSim **a2, int32x2_t *this, int8x8_t a4)
{
  int32x2_t *result;

  if (*(_BYTE *)(a1 + 7689))
    return physx::Scb::ObjectTracker::scheduleForRemove(this, (physx::Scb::Base *)a2, a4);
  *((_DWORD *)a2 + 2) &= 0xFFFFFCFF;
  result = (int32x2_t *)physx::Sc::Scene::removeArticulation((physx::Sc::Scene *)(a1 + 16), a2 + 3);
  *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
  *a2 = 0;
  return result;
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::ArticulationJoint>(uint64_t a1, uint64_t a2, int32x2_t *this, int8x8_t a4)
{
  *(_QWORD *)a2 = a1;
  if (*(_BYTE *)(a1 + 7689))
    return physx::Scb::ObjectTracker::scheduleForInsert(this, (physx::Scb::Base *)a2, a4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFFFF | 0x80000000;
  return (int32x2_t *)physx::Sc::Scene::addArticulationJoint(a1 + 16, a2 + 24, (physx::Sc::ArticulationSim ***)(*(_QWORD *)(a2 + 408) + 128), (physx::Sc::BodySim **)(*(_QWORD *)(a2 + 416) + 128));
}

int32x2_t *physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>(int32x2_t *result, physx::Sc::ArticulationJointSim **a2, int32x2_t *this, int8x8_t a4)
{
  physx::Sc::ArticulationJointSim *v5;

  if (result[961].i8[1])
    return physx::Scb::ObjectTracker::scheduleForRemove(this, (physx::Scb::Base *)a2, a4);
  v5 = a2[3];
  if (v5)
  {
    physx::Sc::ArticulationJointSim::~ArticulationJointSim(a2[3]);
    result = (int32x2_t *)(*(uint64_t (**)(uint64_t, physx::Sc::ArticulationJointSim *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
  }
  *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
  *a2 = 0;
  return result;
}

int32x2_t *physx::Scb::Scene::addAggregate(int32x2_t *a1, physx::Scb::Base *a2, int8x8_t a3)
{
  int32x2_t *result;

  *(_QWORD *)a2 = a1;
  if (a1[961].i8[1])
    return physx::Scb::ObjectTracker::scheduleForInsert(a1 + 1015, a2, a3);
  result = (int32x2_t *)physx::Sc::Scene::createAggregate((physx::Sc::Scene *)&a1[2], *((_QWORD *)a2 + 3), *((unsigned __int8 *)a2 + 40));
  *((_DWORD *)a2 + 8) = (_DWORD)result;
  *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFFFF | 0x80000000;
  return result;
}

void physx::Scb::Scene::removeAggregate(int32x2_t *a1, physx::Scb::Base *a2, int8x8_t a3)
{
  if (a1[961].i8[1])
  {
    physx::Scb::ObjectTracker::scheduleForRemove(a1 + 1015, a2, a3);
  }
  else
  {
    physx::Sc::Scene::deleteAggregate((physx::Sc::Scene *)&a1[2], *((_DWORD *)a2 + 8));
    *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
    *(_QWORD *)a2 = 0;
  }
}

uint64_t physx::Scb::Scene::addMaterial(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 7680));
  LOWORD(v5) = *(_WORD *)(a2 + 24);
  HIDWORD(v5) = 0;
  v4 = *(unsigned int *)(v3 + 7672);
  if ((*(_DWORD *)(v3 + 7676) & 0x7FFFFFFFu) <= v4)
  {
    result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(v3 + 7664, &v5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v3 + 7664) + 8 * v4) = v5;
    ++*(_DWORD *)(v3 + 7672);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 7680));
  return result;
}

uint64_t physx::Scb::Scene::updateMaterial(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 7680));
  LOWORD(v5) = *(_WORD *)(a2 + 24);
  HIDWORD(v5) = 1;
  v4 = *(unsigned int *)(v3 + 7672);
  if ((*(_DWORD *)(v3 + 7676) & 0x7FFFFFFFu) <= v4)
  {
    result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(v3 + 7664, &v5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v3 + 7664) + 8 * v4) = v5;
    ++*(_DWORD *)(v3 + 7672);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 7680));
  return result;
}

uint64_t physx::Scb::Scene::removeMaterial(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int16 *)(a2 + 24);
  if (v2 != 0xFFFF)
  {
    v4 = result;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 7680));
      LOWORD(v2) = *(_WORD *)(a2 + 24);
    }
    LOWORD(v6) = v2;
    HIDWORD(v6) = 2;
    v5 = *(unsigned int *)(v4 + 7672);
    if ((*(_DWORD *)(v4 + 7676) & 0x7FFFFFFFu) <= v5)
    {
      result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(v4 + 7664, &v6);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v4 + 7664) + 8 * v5) = v6;
      ++*(_DWORD *)(v4 + 7672);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 7680));
  }
  return result;
}

uint64_t physx::Scb::Scene::updateLowLevelMaterial(pthread_mutex_t **this, physx::NpMaterial **a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  physx::NpMaterial *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  int v22;
  uint64_t result;
  uint64_t v24;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[960]);
  if (*((_DWORD *)this + 1918))
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = (unsigned __int16 *)((char *)this[958] + v4);
      v7 = *v6;
      v8 = *((_DWORD *)v6 + 1);
      if (v8 == 2)
      {
        if (*((_DWORD *)this + 6) > v7)
        {
          v20 = (uint64_t)this[2] + 32 * v7;
          v22 = *(unsigned __int16 *)(v20 + 24);
          v21 = (_WORD *)(v20 + 24);
          if (v22 == (_DWORD)v7)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&this[232][27].__opaque[40] + 120))(*(_QWORD *)&this[232][27].__opaque[40]);
            *v21 = -1;
          }
        }
        goto LABEL_19;
      }
      v9 = a2[v7];
      if (v8 != 1)
        break;
      if (v9)
      {
        v17 = *((_QWORD *)v9 + 6);
        v16 = (char *)v9 + 48;
        v18 = (uint64_t)this[2] + 32 * *((unsigned __int16 *)v16 + 12);
        *(_DWORD *)(v18 + 8) = *((_DWORD *)v16 + 2);
        *(_QWORD *)v18 = v17;
        *(_WORD *)(v18 + 12) = *((_WORD *)v16 + 6);
        *(_WORD *)(v18 + 14) = *((_WORD *)v16 + 7);
        v19 = *((_QWORD *)v16 + 2);
        *(_DWORD *)(v18 + 24) = *((_DWORD *)v16 + 6);
        *(_QWORD *)(v18 + 16) = v19;
        v15 = *(void (**)(void))(**(_QWORD **)&this[232][27].__opaque[40] + 112);
LABEL_15:
        v15();
      }
LABEL_19:
      ++v5;
      v4 += 8;
      if (v5 >= *((unsigned int *)this + 1918))
        goto LABEL_20;
    }
    if (v8)
      v10 = 1;
    else
      v10 = v9 == 0;
    if (v10)
      goto LABEL_19;
    v11 = *((unsigned __int16 *)v9 + 36);
    physx::PxsMaterialManager::resize((uint64_t)(this + 2), v11 + 1);
    v12 = (uint64_t)this[2] + 32 * v11;
    v13 = *((_QWORD *)v9 + 6);
    *(_DWORD *)(v12 + 8) = *((_DWORD *)v9 + 14);
    *(_QWORD *)v12 = v13;
    *(_WORD *)(v12 + 12) = *((_WORD *)v9 + 30);
    *(_WORD *)(v12 + 14) = *((_WORD *)v9 + 31);
    v14 = *((_QWORD *)v9 + 8);
    *(_DWORD *)(v12 + 24) = *((_DWORD *)v9 + 18);
    *(_QWORD *)(v12 + 16) = v14;
    v15 = *(void (**)(void))(**(_QWORD **)&this[232][27].__opaque[40] + 104);
    goto LABEL_15;
  }
LABEL_20:
  result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::resize((uint64_t)(this + 958), 0, &v24);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(this[960]);
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

void physx::Scb::Scene::syncWriteThroughProperties(pthread_mutex_t **this)
{
  uint64_t v2;
  physx::Scb::Body **v3;
  physx::Scb::Body *v4;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[962]);
  v2 = *((unsigned int *)this + 1987);
  if ((_DWORD)v2)
  {
    v3 = (physx::Scb::Body **)this[988];
    do
    {
      v4 = *v3++;
      physx::Scb::Body::syncCollisionWriteThroughState(v4);
      --v2;
    }
    while (v2);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[962]);
}

void physx::Scb::Body::syncCollisionWriteThroughState(physx::Scb::Body *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_DWORD *)this + 71);
  if ((v2 & 0x400000) != 0)
  {
    *((_QWORD *)this + 14) = *(_QWORD *)((char *)this + 252);
    *((_DWORD *)this + 30) = *((_DWORD *)this + 65);
    updateBodySim((uint64_t *)this + 4);
    v2 &= ~0x400000u;
    if ((v2 & 0x800000) != 0)
    {
LABEL_3:
      *((_QWORD *)this + 16) = *((_QWORD *)this + 33);
      *((_DWORD *)this + 34) = *((_DWORD *)this + 68);
      updateBodySim((uint64_t *)this + 4);
      v2 &= ~0x800000u;
      if ((v2 & 0x8000) == 0)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    *(_QWORD *)((char *)this + 252) = *((_QWORD *)this + 14);
    *((_DWORD *)this + 65) = *((_DWORD *)this + 30);
    if ((v2 & 0x800000) != 0)
      goto LABEL_3;
  }
  *((_QWORD *)this + 33) = *((_QWORD *)this + 16);
  *((_DWORD *)this + 68) = *((_DWORD *)this + 34);
  if ((v2 & 0x8000) == 0)
    goto LABEL_11;
LABEL_7:
  if ((*((_BYTE *)this + 76) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 2);
    if (!v3)
    {
      physx::Scb::Scene::getStream(*(_QWORD *)this, *((_BYTE *)this + 11) & 0xF);
      *((_QWORD *)this + 2) = v3;
    }
    physx::Sc::BodyCore::setKinematicTarget((physx::Scb::Body *)((char *)this + 32), *(_QWORD *)(*(_QWORD *)this + 4384), v3 + 272, *((float *)this + 69));
    v2 &= ~0x8000u;
  }
LABEL_11:
  if ((v2 & 0x18000000) != 0)
  {
    physx::Sc::BodyCore::clearSpatialAcceleration((physx::Sc::BodySim **)this + 4, (v2 >> 27) & 1, (v2 >> 28) & 1);
    v2 &= 0xE7FFFFFF;
  }
  if ((v2 & 0x30000) != 0)
  {
    v4 = *((_QWORD *)this + 2);
    if (!v4)
    {
      physx::Scb::Scene::getStream(*(_QWORD *)this, *((_BYTE *)this + 11) & 0xF);
      v4 = v5;
      *((_QWORD *)this + 2) = v5;
    }
    physx::Sc::BodyCore::addSpatialAcceleration((physx::Sc::BodySim **)this + 4, *(_QWORD *)(*(_QWORD *)this + 4384), (float32x2_t *)(v4 + 300), (float32x2_t *)(v4 + 312));
    *(_QWORD *)(v4 + 308) = 0;
    v2 &= 0xFFFCFFFF;
    *(_QWORD *)(v4 + 300) = 0;
    *(_QWORD *)(v4 + 316) = 0;
  }
  if ((v2 & 0x60000000) != 0)
  {
    physx::Sc::BodyCore::clearSpatialVelocity((physx::Sc::BodySim **)this + 4, (v2 >> 29) & 1, (v2 >> 30) & 1);
    v2 &= 0x9FFFFFFF;
  }
  if ((v2 & 0xC0000) != 0)
  {
    v6 = *((_QWORD *)this + 2);
    if (!v6)
    {
      physx::Scb::Scene::getStream(*(_QWORD *)this, *((_BYTE *)this + 11) & 0xF);
      v6 = v7;
      *((_QWORD *)this + 2) = v7;
    }
    physx::Sc::BodyCore::addSpatialVelocity((physx::Sc::BodySim **)this + 4, *(_QWORD *)(*(_QWORD *)this + 4384), (float32x2_t *)(v6 + 324), (float32x2_t *)(v6 + 336));
    *(_QWORD *)(v6 + 332) = 0;
    v2 &= 0xFFF3FFFF;
    *(_QWORD *)(v6 + 324) = 0;
    *(_QWORD *)(v6 + 340) = 0;
  }
  if ((v2 & 0x1000000) == 0)
  {
    *((_DWORD *)this + 69) = *((_DWORD *)this + 47);
    goto LABEL_34;
  }
  if ((v2 & 0x6000000) == 0)
  {
    physx::Sc::BodyCore::setWakeCounter((uint64_t)this + 32, *((float *)this + 69), 0);
    v2 &= ~0x1000000u;
    goto LABEL_34;
  }
  if ((v2 & 0x4000000) != 0)
  {
    v8 = *((_QWORD *)this + 2);
    if (v8)
    {
      if ((v2 & 0x4000) == 0)
        goto LABEL_33;
    }
    else
    {
      physx::Scb::Scene::getStream(*(_QWORD *)this, *((_BYTE *)this + 11) & 0xF);
      *((_QWORD *)this + 2) = v8;
      if ((v2 & 0x4000) == 0)
        goto LABEL_33;
    }
    if (((*((unsigned __int8 *)this + 76) ^ *(unsigned __int8 *)(v8 + 348)) & 1) != 0)
      goto LABEL_34;
LABEL_33:
    physx::Sc::BodyCore::setWakeCounter((uint64_t)this + 32, *((float *)this + 69), 1);
    v2 &= 0xFAFFFFFF;
  }
LABEL_34:
  *((_DWORD *)this + 71) = v2;
}

uint64_t physx::Scb::Scene::syncEntireScene(physx::Scb::Scene *this)
{
  physx::Scb::ObjectTracker *v2;
  pthread_mutex_t **v3;
  int v4;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  physx::Scb::Body *v42;
  uint64_t v43;
  uint64_t v44;
  physx::Scb::Body *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  physx::Sc::BodyCore *v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  __n128 v69;
  unint64_t v70;
  unint64_t j;
  __n128 *v72;
  float32x2_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  _QWORD *v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t m;
  physx::Sc::ArticulationJointSim *v104;
  uint64_t k;
  physx::Sc::ArticulationJointSim *v106;
  uint64_t n;
  int v108;
  int v109;
  uint64_t v110;
  physx::Sc::ArticulationJointSim *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  physx::Sc::ArticulationJointSim *v116;
  uint64_t result;
  uint64_t i;
  char *v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  char v124;
  int v125;
  int v126;
  uint64_t v127;
  char *v128;
  int v129;
  physx::Scb::ObjectTracker *v130;
  pthread_mutex_t **v131;
  uint64_t v132;
  _QWORD v133[64];
  char v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v2 = (physx::Scb::Scene *)((char *)this + 4676);
  *((_BYTE *)this + 7689) = 0;
  v3 = (pthread_mutex_t **)((char *)this + 7696);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*v3);
  v131 = v3;
  if (*((_DWORD *)this + 2151))
  {
    do
    {
      physx::Sc::Scene::createClient((physx::Scb::Scene *)((char *)this + 16));
      v4 = *((_DWORD *)this + 2151) - 1;
      *((_DWORD *)this + 2151) = v4;
    }
    while (v4);
  }
  v5 = *((_DWORD *)this + 2152);
  if (v5)
  {
    if ((v5 & 1) != 0)
    {
      *((_QWORD *)this + 246) = *((_QWORD *)this + 1072);
      *((_DWORD *)this + 494) = *((_DWORD *)this + 2146);
      *((_DWORD *)this + 495) = 1;
      if ((v5 & 2) == 0)
      {
LABEL_9:
        if ((v5 & 4) == 0)
          goto LABEL_10;
        goto LABEL_245;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_9;
    }
    *(float *)(*((_QWORD *)this + 238) + 120) = -*((float *)this + 2147);
    if ((v5 & 4) == 0)
    {
LABEL_10:
      if ((v5 & 8) == 0)
        goto LABEL_11;
      goto LABEL_246;
    }
LABEL_245:
    *((_DWORD *)this + 1071) = *((_DWORD *)this + 2148);
    if ((v5 & 8) == 0)
    {
LABEL_11:
      if ((v5 & 0x10) == 0)
        goto LABEL_12;
      goto LABEL_260;
    }
LABEL_246:
    v130 = v2;
    for (i = 0; i != 31; ++i)
    {
      v119 = (char *)this + 4 * i;
      if (*((_DWORD *)v119 + 2081))
      {
        v120 = v119 + 8448;
        v121 = i;
        do
        {
          v122 = v121 + 1;
          if (i >= (int)v121 + 1)
            v123 = v121 + 1;
          else
            v123 = i;
          if (i <= (int)v121 + 1)
            v124 = v121 + 1;
          else
            v124 = i;
          if (((*((_DWORD *)this + v123 + 2081) >> v124) & 1) != 0)
          {
            v125 = 2 << v121;
            v126 = *((_DWORD *)this + v121 + 2113);
            LOBYTE(v133[0]) = (*v120 & v125) >> v122;
            BYTE1(v133[0]) = (v126 & (1 << i)) >> i;
            physx::Sc::Scene::setDominanceGroupPair((uint64_t)this + 16, i, v122, v133);
          }
          v121 = v122;
        }
        while (v122 != 31);
      }
    }
    *((_OWORD *)this + 527) = 0u;
    *(_OWORD *)((char *)this + 8404) = 0u;
    *(_OWORD *)((char *)this + 8420) = 0u;
    *(_OWORD *)((char *)this + 8372) = 0u;
    *(_OWORD *)((char *)this + 8388) = 0u;
    *(_OWORD *)((char *)this + 8340) = 0u;
    *(_OWORD *)((char *)this + 8356) = 0u;
    *(_OWORD *)((char *)this + 8324) = 0u;
    v5 = *((_DWORD *)this + 2152);
    v2 = v130;
    if ((v5 & 0x10) == 0)
    {
LABEL_12:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_261;
    }
LABEL_260:
    *(_DWORD *)(*((_QWORD *)this + 238) + 140) = *((_DWORD *)this + 2149);
    if ((v5 & 0x80) == 0)
    {
LABEL_13:
      if ((v5 & 0x20) == 0)
        goto LABEL_14;
      goto LABEL_262;
    }
LABEL_261:
    *(_DWORD *)(*((_QWORD *)this + 238) + 144) = *((_DWORD *)this + 2150);
    if ((v5 & 0x20) == 0)
    {
LABEL_14:
      if ((v5 & 0x40) == 0)
      {
LABEL_16:
        *((_DWORD *)this + 2152) = 0;
        goto LABEL_17;
      }
LABEL_15:
      v6 = (_QWORD *)*((_QWORD *)this + 232);
      v6[236] = *(_QWORD *)((char *)this + 8300);
      v6[237] = *(_QWORD *)((char *)this + 8308);
      v6[238] = *(_QWORD *)((char *)this + 8316);
      goto LABEL_16;
    }
LABEL_262:
    v127 = 0;
    v128 = (char *)this + 8276;
    do
    {
      if (v128[v127])
      {
        v129 = *(_DWORD *)&v128[4 * v127 - 96];
        *(_BYTE *)v2 = 1;
        *(_DWORD *)(*((_QWORD *)this + 232) + 4 * v127 + 1792) = v129;
        if (!v127)
          *((_DWORD *)this + 1168) = v129;
      }
      ++v127;
    }
    while (v127 != 24);
    *(_QWORD *)((char *)this + 8276) = 0;
    *(_QWORD *)((char *)this + 8284) = 0;
    *(_QWORD *)((char *)this + 8292) = 0;
    if ((v5 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:
  v7 = *((unsigned int *)this + 2043);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 1016) + 8 * v8);
      v10 = *(_DWORD *)(v9 + 8);
      if (v10 >> 30 == 1)
        break;
      if ((v10 & 0x10000000) != 0)
        goto LABEL_22;
LABEL_23:
      if (++v8 >= v7)
        goto LABEL_24;
    }
    *(_DWORD *)(v9 + 32) = physx::Sc::Scene::createAggregate((physx::Scb::Scene *)((char *)this + 16), *(_QWORD *)(v9 + 24), *(unsigned __int8 *)(v9 + 40));
LABEL_22:
    physx::Scb::Aggregate::syncState((physx::Scb::Aggregate *)v9, this);
    v7 = *((unsigned int *)this + 2043);
    goto LABEL_23;
  }
LABEL_24:
  physx::Scb::ObjectTracker::clear((uint64_t)this + 8120);
  *((_DWORD *)this + 1958) = 0;
  if (*((_DWORD *)this + 1973))
  {
    v12 = 0;
    v13 = *((_QWORD *)this + 981);
    while (1)
    {
      v14 = *(_QWORD *)(v13 + 8 * v12);
      v15 = *(unsigned int *)(v14 + 8);
      if (v15 >> 30 != 1)
      {
        if ((v15 & 0x10000000) != 0)
        {
          if ((v15 & 1) != 0)
          {
            v17 = *(_BYTE **)(v14 + 16);
            if (!v17)
            {
              v11 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)v14, BYTE3(v15) & 0xF).n128_u64[0];
              *(_QWORD *)(v14 + 16) = v17;
            }
            if ((*(_BYTE *)(v14 + 44) & 8) == 0 || (*v17 & 8) != 0)
            {
              if ((*(_BYTE *)(v14 + 44) & 8) == 0 && (*v17 & 8) != 0)
                physx::Scb::Scene::switchRigidToNoSim(*(physx::Scb::Scene **)v14, (physx::Scb::RigidObject *)v14, 0);
            }
            else
            {
              physx::Scb::Scene::switchRigidFromNoSim(*(_QWORD *)v14, (physx::Scb::RigidObject *)v14, 0);
            }
          }
          physx::Scb::RigidObject::syncState((physx::Scb::RigidObject *)v14, v11);
          if ((v15 & 0x40) != 0)
          {
            v38 = *(_QWORD *)(v14 + 16);
            if (!v38)
            {
              v11 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)v14, *(_BYTE *)(v14 + 11) & 0xF).n128_u64[0];
              *(_QWORD *)(v14 + 16) = v38;
            }
            if ((*(_BYTE *)(v14 + 8) & 0x40) != 0)
              physx::Sc::StaticCore::setActor2World(v14 + 32, v38 + 176);
          }
          *(_QWORD *)(v14 + 16) = 0;
          *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(v14 + 11) << 24;
        }
        goto LABEL_75;
      }
      v16 = (v15 & 1) != 0
          ? *(_BYTE **)(v14 + 16)
          : (_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v15 >> 24) & 0xF) + 3) + v14 + 12);
      if ((*v16 & 8) == 0)
        break;
      v136 = 0x4000000000;
      v134 = 1;
      v135 = v133;
      v23 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v14 + 11) & 0xF) + 3) + v14;
      v24 = v23 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v23 + 13) + 10);
      v25 = (uint64_t *)(v24 + 40);
      v26 = *(unsigned __int16 *)(v24 + 48);
      if ((_DWORD)v26 == 1)
      {
        v26 = 1;
        goto LABEL_61;
      }
      if ((_DWORD)v26)
      {
        v25 = (uint64_t *)*v25;
LABEL_61:
        v35 = *(_QWORD *)v14;
        do
        {
          v36 = (uint64_t *)*v25;
          v37 = *(_DWORD *)(*v25 + 56);
          if ((v37 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v36 + 14) = v37 & 0x3FFFFFFF | 0x80000000;
            v36[6] = v35;
          }
          ++v25;
          --v26;
        }
        while (v26);
      }
LABEL_75:
      if (++v12 >= (unint64_t)*((unsigned int *)this + 1973))
        goto LABEL_76;
    }
    v18 = (uint64_t **)(v14 + 32);
    v136 = 0x4000000000;
    v134 = 1;
    v135 = v133;
    v19 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v14 + 11) & 0xF) + 3) + v14;
    v20 = v19 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v19 + 13) + 10);
    v21 = (_QWORD *)(v20 + 40);
    v22 = *(unsigned __int16 *)(v20 + 48);
    if (v22 == 1)
    {
      physx::Sc::Scene::addStatic((uint64_t)this + 16, v18, (_QWORD *)(v20 + 40), 1u, 80, 0);
    }
    else
    {
      v21 = (_QWORD *)*v21;
      physx::Sc::Scene::addStatic((uint64_t)this + 16, v18, v21, *(unsigned __int16 *)(v20 + 48), 80, 0);
      if (!v22)
      {
LABEL_49:
        if ((v136 & 0x8000000000000000) == 0)
        {
          v33 = (v136 & 0x7FFFFFFF00000000) == 0 || v135 == v133;
          if (!v33 && v135 != 0)
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        goto LABEL_75;
      }
    }
    v27 = 0;
    v28 = *(_QWORD *)v14;
    do
    {
      v29 = v21[v27];
      v30 = *(_DWORD *)(v29 + 56);
      if ((v30 & 0xF000000) == 0x1000000)
      {
        *(_DWORD *)(v29 + 56) = v30 & 0x3FFFFFFF | 0x80000000;
        *(_QWORD *)(v29 + 48) = v28;
      }
      v31 = (unsigned int *)(v29 + 32);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      ++v27;
    }
    while (v27 != v22);
    goto LABEL_49;
  }
LABEL_76:
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7840);
  v39 = *((_DWORD *)this + 14);
  if (v39)
  {
    v40 = (uint64_t *)*((_QWORD *)this + 6);
    do
    {
      v41 = *v40++;
      v42 = (physx::Scb::Body *)(v41 - *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + *(unsigned __int8 *)(v41 + 13)));
      if ((*((_BYTE *)v42 + 11) & 0x10) == 0)
        physx::Scb::Body::syncState(v42);
      --v39;
    }
    while (v39);
  }
  v43 = *((unsigned int *)this + 1027);
  if ((_DWORD)v43)
  {
    v44 = *((_QWORD *)this + 508);
    do
    {
      v45 = (physx::Scb::Body *)(*(_QWORD *)v44
                               - *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets
                                 + *(unsigned __int8 *)(*(_QWORD *)v44 + 13)));
      if ((*((_BYTE *)v45 + 11) & 0x10) == 0)
        physx::Scb::Body::syncState(v45);
      v44 += 8;
      --v43;
    }
    while (v43);
  }
  if (*((_DWORD *)this + 1987))
  {
    v46 = 0;
    v47 = *((_QWORD *)this + 988);
    while (1)
    {
      v48 = *(uint64_t **)(v47 + 8 * v46);
      v49 = *((unsigned int *)v48 + 2);
      if (v49 >> 30 != 1)
      {
        if ((v49 & 0x10000000) != 0)
          physx::Scb::Body::syncState(*(physx::Scb::Body **)(v47 + 8 * v46));
        goto LABEL_122;
      }
      v50 = (v49 & 1) != 0
          ? (char *)v48[2]
          : (char *)v48 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v49 >> 24) & 0xF) + 3) + 12;
      if ((*v50 & 8) == 0)
        break;
      v136 = 0x4000000000;
      v134 = 1;
      v135 = v133;
      v55 = (uint64_t)v48 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)v48 + 45) + 10);
      v56 = (uint64_t *)(v55 + 72);
      v57 = *(unsigned __int16 *)(v55 + 80);
      if ((_DWORD)v57 == 1)
      {
        v57 = 1;
        goto LABEL_118;
      }
      if ((_DWORD)v57)
      {
        v56 = (uint64_t *)*v56;
LABEL_118:
        v66 = *v48;
        do
        {
          v67 = (uint64_t *)*v56;
          v68 = *(_DWORD *)(*v56 + 56);
          if ((v68 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v67 + 14) = v68 & 0x3FFFFFFF | 0x80000000;
            v67[6] = v66;
          }
          ++v56;
          --v57;
        }
        while (v57);
      }
LABEL_122:
      if (++v46 >= (unint64_t)*((unsigned int *)this + 1987))
        goto LABEL_123;
    }
    v51 = (physx::Sc::BodyCore *)(v48 + 4);
    v136 = 0x4000000000;
    v134 = 1;
    v135 = v133;
    v52 = (uint64_t)v48 + *((_QWORD *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)v48 + 45) + 10) + 32;
    v53 = (_QWORD *)(v52 + 40);
    v54 = *(unsigned __int16 *)(v52 + 48);
    if (v54 == 1)
    {
      physx::Sc::Scene::addBody((physx::Scb::Scene *)((char *)this + 16), v51, (_QWORD *)(v52 + 40), 1u, 80, 0, 0);
    }
    else
    {
      v53 = (_QWORD *)*v53;
      physx::Sc::Scene::addBody((physx::Scb::Scene *)((char *)this + 16), v51, v53, *(unsigned __int16 *)(v52 + 48), 80, 0, 0);
      if (!v54)
      {
LABEL_106:
        if ((v136 & 0x8000000000000000) == 0)
        {
          v64 = (v136 & 0x7FFFFFFF00000000) == 0 || v135 == v133;
          if (!v64 && v135 != 0)
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        goto LABEL_122;
      }
    }
    v58 = 0;
    v59 = *v48;
    do
    {
      v60 = v53[v58];
      v61 = *(_DWORD *)(v60 + 56);
      if ((v61 & 0xF000000) == 0x1000000)
      {
        *(_DWORD *)(v60 + 56) = v61 & 0x3FFFFFFF | 0x80000000;
        *(_QWORD *)(v60 + 48) = v59;
      }
      v62 = (unsigned int *)(v60 + 32);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
      ++v58;
    }
    while (v58 != v54);
    goto LABEL_106;
  }
LABEL_123:
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7896);
  *((_DWORD *)this + 1954) = 0;
  v70 = *((unsigned int *)this + 1947);
  if ((_DWORD)v70)
  {
    for (j = 0; j < v70; ++j)
    {
      v72 = *(__n128 **)(*((_QWORD *)this + 968) + 8 * j);
      if ((v72->n128_u8[11] & 0x10) != 0)
      {
        physx::Scb::Shape::syncState(v72, v69);
        v70 = *((unsigned int *)this + 1947);
      }
    }
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7736);
  *((_DWORD *)this + 1950) = 0;
  v74 = *((unsigned int *)this + 517);
  if ((_DWORD)v74)
  {
    v75 = (_QWORD *)*((_QWORD *)this + 253);
    do
    {
      if ((*(_BYTE *)(*v75 - 13) & 0x10) == 0)
        physx::Scb::Constraint::syncState((physx::Scb::Constraint *)(*v75 - 24), v73);
      ++v75;
      --v74;
    }
    while (v74);
  }
  if (*((_DWORD *)this + 2001))
  {
    v76 = 0;
    v77 = *((_QWORD *)this + 995);
    do
    {
      v78 = *(_QWORD *)(v77 + 8 * v76);
      v79 = *(_DWORD *)(v78 + 8);
      if (v79 >> 30 == 1)
      {
        v132 = 0;
        v133[0] = 0;
        physx::NpConstraintGetRigidObjectsFromScb(v78, v133, &v132);
        if (v133[0])
          v80 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v133[0] + 11) & 0xF) + 3) + v133[0];
        else
          v80 = 0;
        if (v132)
          v81 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v132 + 11) & 0xF) + 3) + v132;
        else
          v81 = 0;
        physx::Sc::Scene::addConstraint((int32x2_t *)this + 2, v78 + 24, v80, v81);
      }
      else if ((v79 & 0x10000000) != 0)
      {
        physx::Scb::Constraint::syncState(*(physx::Scb::Constraint **)(v77 + 8 * v76), v73);
      }
      ++v76;
    }
    while (v76 < *((unsigned int *)this + 2001));
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7952);
  v82 = *((unsigned int *)this + 557);
  if ((_DWORD)v82)
  {
    v83 = (_QWORD *)*((_QWORD *)this + 273);
    do
    {
      if ((*(_BYTE *)(*v83 - 13) & 0x10) == 0)
        physx::Scb::Articulation::syncState((physx::Scb::Articulation *)(*v83 - 24));
      ++v83;
      --v82;
    }
    while (v82);
  }
  if (*((_DWORD *)this + 2015))
  {
    v84 = 0;
    v85 = *((_QWORD *)this + 1002);
    do
    {
      v86 = *(_QWORD *)(v85 + 8 * v84);
      v87 = *(_DWORD *)(v86 + 8);
      if (v87 >> 30 == 1)
      {
        if (*(_DWORD *)(v86 + 128))
        {
          v88 = **(_QWORD **)(v86 + 120);
          if (v88)
            v89 = v88 + 96;
          else
            v89 = 0;
        }
        else
        {
          v89 = 0;
        }
        physx::Sc::Scene::addArticulation((int32x2_t *)this + 2, (physx::Sc::ArticulationCore *)(v86 + 24), (physx::Sc::BodySim **)(v89 + 32));
      }
      else if ((v87 & 0x10000000) != 0)
      {
        physx::Scb::Articulation::syncState((physx::Scb::Articulation *)v86);
      }
      ++v84;
    }
    while (v84 < *((unsigned int *)this + 2015));
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 8008);
  if (*((_DWORD *)this + 2029))
  {
    v90 = 0;
    v91 = *((_QWORD *)this + 1009);
    do
    {
      v92 = *(_QWORD *)(v91 + 8 * v90);
      v93 = *(_DWORD *)(v92 + 8);
      if (v93 >> 30 == 1)
      {
        physx::Sc::Scene::addArticulationJoint((uint64_t)this + 16, v92 + 24, (physx::Sc::ArticulationSim ***)(*(_QWORD *)(v92 + 408) + 128), (physx::Sc::BodySim **)(*(_QWORD *)(v92 + 416) + 128));
      }
      else if ((v93 & 0x10000000) != 0)
      {
        if ((v93 & 0xFFFFFF) != 0)
        {
          v94 = *(_QWORD *)(v92 + 16);
          if (!v94)
          {
            physx::Scb::Scene::getStream(*(_QWORD *)v92, HIBYTE(v93) & 0xF);
            v94 = v95;
            *(_QWORD *)(v92 + 16) = v95;
            v93 = *(_DWORD *)(v92 + 8);
          }
          if ((v93 & 1) == 0)
          {
            if ((v93 & 2) == 0)
              goto LABEL_173;
LABEL_189:
            physx::Sc::ArticulationJointCore::setChildPose(v92 + 24, v94 + 28);
            v93 = *(_DWORD *)(v92 + 8);
            if ((v93 & 4) != 0)
              goto LABEL_190;
LABEL_174:
            if ((v93 & 8) == 0)
              goto LABEL_175;
LABEL_191:
            *(_QWORD *)(v92 + 320) = *(_QWORD *)(v94 + 72);
            *(_DWORD *)(v92 + 328) = *(_DWORD *)(v94 + 80);
            if ((v93 & 0x10) != 0)
              goto LABEL_192;
LABEL_176:
            if ((v93 & 0x20) == 0)
              goto LABEL_177;
LABEL_193:
            *(_DWORD *)(v92 + 336) = *(_DWORD *)(v94 + 88);
            if ((v93 & 0x40) != 0)
              goto LABEL_194;
LABEL_178:
            if ((v93 & 0x100) == 0)
              goto LABEL_179;
LABEL_195:
            *(_DWORD *)(v92 + 340) = *(_DWORD *)(v94 + 100);
            if ((v93 & 0x200) != 0)
              goto LABEL_196;
LABEL_180:
            if ((v93 & 0x400) == 0)
              goto LABEL_181;
LABEL_197:
            v96 = *(float *)(v94 + 108);
            *(float *)(v92 + 348) = v96;
            *(float *)(v92 + 376) = tanf(v96 * 0.25);
            if ((v93 & 0x800) != 0)
              goto LABEL_198;
LABEL_182:
            if ((v93 & 0x4000) == 0)
              goto LABEL_183;
LABEL_199:
            v97 = *(float *)(v94 + 124);
            *(float *)(v92 + 364) = v97;
            *(float *)(v92 + 388) = tanf(v97 * 0.25);
            if ((v93 & 0x8000) != 0)
              goto LABEL_200;
LABEL_184:
            if ((v93 & 0x1000) == 0)
              goto LABEL_185;
LABEL_201:
            *(_DWORD *)(v92 + 352) = *(_DWORD *)(v94 + 116);
            if ((v93 & 0x2000) != 0)
              goto LABEL_202;
LABEL_186:
            if ((v93 & 0x80000) == 0)
              goto LABEL_205;
LABEL_203:
            *(_BYTE *)(v92 + 302) = *(_DWORD *)(v94 + 136);
            v98 = **(_QWORD ***)(v92 + 392);
            if (v98)
            {
              *(_BYTE *)(*v98 + 161) = 1;
              (*(void (**)(_QWORD))(**(_QWORD **)(v98[1] + 1904) + 128))(*(_QWORD *)(v98[1] + 1904));
              v93 = *(_DWORD *)(v92 + 8);
            }
            goto LABEL_205;
          }
          physx::Sc::ArticulationJointCore::setParentPose(v92 + 24, v94);
          v93 = *(_DWORD *)(v92 + 8);
          if ((v93 & 2) != 0)
            goto LABEL_189;
LABEL_173:
          if ((v93 & 4) == 0)
            goto LABEL_174;
LABEL_190:
          *(_OWORD *)(v92 + 304) = *(_OWORD *)(v94 + 56);
          if ((v93 & 8) != 0)
            goto LABEL_191;
LABEL_175:
          if ((v93 & 0x10) == 0)
            goto LABEL_176;
LABEL_192:
          *(_DWORD *)(v92 + 332) = *(_DWORD *)(v94 + 84);
          if ((v93 & 0x20) != 0)
            goto LABEL_193;
LABEL_177:
          if ((v93 & 0x40) == 0)
            goto LABEL_178;
LABEL_194:
          *(_DWORD *)(v92 + 280) = *(_DWORD *)(v94 + 92);
          if ((v93 & 0x100) != 0)
            goto LABEL_195;
LABEL_179:
          if ((v93 & 0x200) == 0)
            goto LABEL_180;
LABEL_196:
          *(_DWORD *)(v92 + 344) = *(_DWORD *)(v94 + 104);
          if ((v93 & 0x400) != 0)
            goto LABEL_197;
LABEL_181:
          if ((v93 & 0x800) == 0)
            goto LABEL_182;
LABEL_198:
          *(_BYTE *)(v92 + 360) = *(_BYTE *)(v94 + 112);
          if ((v93 & 0x4000) != 0)
            goto LABEL_199;
LABEL_183:
          if ((v93 & 0x8000) == 0)
            goto LABEL_184;
LABEL_200:
          *(_BYTE *)(v92 + 361) = *(_BYTE *)(v94 + 128);
          if ((v93 & 0x1000) != 0)
            goto LABEL_201;
LABEL_185:
          if ((v93 & 0x2000) == 0)
            goto LABEL_186;
LABEL_202:
          *(_DWORD *)(v92 + 356) = *(_DWORD *)(v94 + 120);
          if ((v93 & 0x80000) != 0)
            goto LABEL_203;
LABEL_205:
          if ((v93 & 0x10000) != 0)
          {
            *(_BYTE *)(v92 + 362) = *(_DWORD *)(v94 + 132);
            if ((v93 & 0x20000) != 0)
              goto LABEL_214;
LABEL_207:
            if ((v93 & 0x40000) == 0)
              goto LABEL_208;
LABEL_215:
            v102 = *(float *)(v94 + 148);
            v101 = *(float *)(v94 + 152);
            *(float *)(v92 + 88) = v102;
            *(float *)(v92 + 92) = v101;
            *(float *)(v92 + 380) = tanf(v101 * 0.25);
            *(float *)(v92 + 384) = tanf(v102 * 0.25);
            if ((v93 & 0x800000) != 0)
              goto LABEL_216;
LABEL_209:
            if ((v93 & 0x100000) == 0)
              goto LABEL_210;
LABEL_221:
            for (k = 0; k != 48; k += 8)
            {
              *(_QWORD *)(v92 + 88 + k) = *(_QWORD *)(v94 + 156 + k);
              *(_BYTE *)(v92 + 301) |= 0x10u;
              v106 = *(physx::Sc::ArticulationJointSim **)(v92 + 24);
              if (v106)
                physx::Sc::ArticulationJointSim::setDirty(v106);
            }
            v93 = *(_DWORD *)(v92 + 8);
            if ((v93 & 0x200000) != 0)
              goto LABEL_226;
LABEL_211:
            if ((v93 & 0x400000) != 0)
            {
LABEL_231:
              v112 = 0;
              v113 = v92 + 232;
              v114 = v94 + 324;
              do
              {
                *(_DWORD *)(v113 + v112) = *(_DWORD *)(v114 + v112 - 24);
                v115 = *(_BYTE *)(v92 + 301) | 4;
                *(_BYTE *)(v92 + 301) = v115;
                v116 = *(physx::Sc::ArticulationJointSim **)(v92 + 24);
                if (v116)
                {
                  physx::Sc::ArticulationJointSim::setDirty(v116);
                  v115 = *(_BYTE *)(v92 + 301);
                  v116 = *(physx::Sc::ArticulationJointSim **)(v92 + 24);
                }
                *(_DWORD *)(v113 + v112 + 24) = *(_DWORD *)(v114 + v112);
                *(_BYTE *)(v92 + 301) = v115 | 8;
                if (v116)
                  physx::Sc::ArticulationJointSim::setDirty(v116);
                v112 += 4;
              }
              while (v112 != 24);
              v93 = *(_DWORD *)(v92 + 8);
            }
          }
          else
          {
            if ((v93 & 0x20000) == 0)
              goto LABEL_207;
LABEL_214:
            v99 = *(float *)(v94 + 140);
            v100 = *(float *)(v94 + 144);
            *(float *)(v92 + 96) = v99;
            *(float *)(v92 + 104) = v100;
            *(float *)(v92 + 368) = tanf(v99 * 0.25);
            *(float *)(v92 + 372) = tanf(v100 * 0.25);
            if ((v93 & 0x40000) != 0)
              goto LABEL_215;
LABEL_208:
            if ((v93 & 0x800000) == 0)
              goto LABEL_209;
LABEL_216:
            for (m = 0; m != 6; ++m)
            {
              *(_BYTE *)(v92 + 290 + m) = *(_DWORD *)(v94 + 348 + 4 * m);
              *(_BYTE *)(v92 + 301) |= 1u;
              v104 = *(physx::Sc::ArticulationJointSim **)(v92 + 24);
              if (v104)
                physx::Sc::ArticulationJointSim::setDirty(v104);
            }
            v93 = *(_DWORD *)(v92 + 8);
            if ((v93 & 0x100000) != 0)
              goto LABEL_221;
LABEL_210:
            if ((v93 & 0x200000) == 0)
              goto LABEL_211;
LABEL_226:
            for (n = 0; n != 96; n += 16)
            {
              v108 = *(_DWORD *)(v94 + n + 212);
              v109 = *(_DWORD *)(v94 + n + 216);
              v110 = v92 + n;
              *(_QWORD *)(v110 + 136) = *(_QWORD *)(v94 + n + 204);
              *(_DWORD *)(v110 + 144) = v108;
              *(_DWORD *)(v110 + 148) = v109;
              *(_BYTE *)(v92 + 301) |= 0x20u;
              v111 = *(physx::Sc::ArticulationJointSim **)(v92 + 24);
              if (v111)
                physx::Sc::ArticulationJointSim::setDirty(v111);
            }
            v93 = *(_DWORD *)(v92 + 8);
            if ((v93 & 0x400000) != 0)
              goto LABEL_231;
          }
        }
        *(_QWORD *)(v92 + 16) = 0;
        *(_DWORD *)(v92 + 8) = v93 & 0xFF000000;
      }
      ++v90;
    }
    while (v90 < *((unsigned int *)this + 2029));
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 8064);
  result = physx::Cm::FlushPool::clearNotThreadSafe((uint64_t)v131);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*v131);
  return result;
}

void physx::Scb::Aggregate::syncState(physx::Scb::Aggregate *this, physx::Scb::Scene *a2)
{
  unsigned int v3;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  physx::Sc::ShapeSim *v19;

  v3 = *((_DWORD *)this + 2);
  if ((v3 & 0xFFFFFF) == 0)
    goto LABEL_18;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v5)
  {
    if ((v3 & 1) == 0)
      goto LABEL_9;
LABEL_6:
    v7 = v5[1];
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)(*((_QWORD *)a2 + 978) + 8 * *v5);
      v9 = *((_DWORD *)this + 8) & 0xFFFFFF;
      do
      {
        v10 = *v8++;
        v11 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v10 + 11) & 0xF) + 3) + v10;
        *(_DWORD *)(v11 + 8) = v9 | (*(unsigned __int8 *)(v11 + 11) << 24);
        --v7;
      }
      while (v7);
    }
    goto LABEL_9;
  }
  physx::Scb::Scene::getStream(*(_QWORD *)this, HIBYTE(v3) & 0xF);
  v5 = v6;
  *((_QWORD *)this + 2) = v6;
  if ((v3 & 1) != 0)
    goto LABEL_6;
LABEL_9:
  if ((v3 & 2) != 0)
  {
    v12 = v5[3];
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *((_QWORD *)a2 + 978) + 8 * v5[2];
      do
      {
        v15 = *(_QWORD *)(v14 + 8 * v13);
        v16 = *(unsigned int *)(v15 + 8);
        v17 = (uint64_t *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v16 >> 24) & 0xF) + 3) + v15);
        *((_DWORD *)v17 + 2) |= 0xFFFFFFu;
        if ((v16 >> 30) - 1 <= 1)
        {
          v18 = *v17;
          if (v18)
          {
            v19 = *(physx::Sc::ShapeSim **)(v18 + 56);
            if (v19)
            {
              do
              {
                physx::Sc::ShapeSim::reinsertBroadPhase(v19);
                v19 = *(physx::Sc::ShapeSim **)v19;
              }
              while (v19);
              v12 = v5[3];
            }
          }
        }
        ++v13;
      }
      while (v13 < v12);
    }
  }
LABEL_18:
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = *((unsigned __int8 *)this + 11) << 24;
}

void physx::Scb::Body::syncState(physx::Scb::Body *this)
{
  int v2;
  unsigned int v3;
  int8x8_t v4;
  char *v5;
  char *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  physx::Sc::BodyCore *v63;
  _BOOL4 v64;
  char v65;
  _DWORD v66[7];

  v2 = *((_DWORD *)this + 71);
  v3 = *((_DWORD *)this + 2);
  if ((v2 & 0x100000) == 0)
  {
    *((_OWORD *)this + 14) = *((_OWORD *)this + 3);
    v4 = *(int8x8_t *)((char *)this + 64);
    *((int8x8_t *)this + 30) = v4;
    v4.i32[0] = *((_DWORD *)this + 18);
    *((_DWORD *)this + 62) = v4.i32[0];
    if ((v3 & 1) == 0)
      goto LABEL_18;
    goto LABEL_10;
  }
  if ((v2 & 0x200000) != 0)
  {
    v7 = (float *)*((_QWORD *)this + 2);
    if (!v7)
    {
      physx::Scb::Scene::getStream(*(_QWORD *)this, HIBYTE(v3) & 0xF);
      *((_QWORD *)this + 2) = v7;
    }
    v8 = *((float *)this + 20);
    v9 = *((float *)this + 21);
    v10 = *((float *)this + 22);
    v11 = *((float *)this + 23);
    v12 = v7[60] - *((float *)this + 24);
    v13 = v7[61] - *((float *)this + 25);
    v14 = v7[62] - *((float *)this + 26);
    v15 = v12 + v12;
    v16 = v13 + v13;
    v17 = v14 + v14;
    v18 = (float)(v11 * v11) + -0.5;
    v19 = (float)((float)-(float)(v9 * v16) - (float)(v8 * v15)) - (float)(v10 * v17);
    v20 = (float)((float)(v11 * (float)((float)(v10 * v16) - (float)(v9 * v17))) + (float)(v15 * v18))
        - (float)(v8 * v19);
    v21 = (float)((float)(v11 * (float)((float)(v8 * v17) - (float)(v10 * v15))) + (float)(v16 * v18))
        - (float)(v9 * v19);
    v22 = (float)((float)(v11 * (float)((float)(v9 * v15) - (float)(v8 * v16))) + (float)(v17 * v18))
        - (float)(v10 * v19);
    v24 = v7[58];
    v23 = v7[59];
    v25 = v7[56];
    v26 = v7[57];
    v27 = (float)((float)((float)(v11 * v25) - (float)(v8 * v23)) - (float)(v9 * v24)) + (float)(v26 * v10);
    v28 = (float)((float)((float)(v11 * v26) - (float)(v9 * v23)) - (float)(v10 * v25)) + (float)(v24 * v8);
    v29 = (float)((float)((float)(v11 * v24) - (float)(v10 * v23)) - (float)(v8 * v26)) + (float)(v25 * v9);
    v30 = (float)((float)((float)(v8 * v25) + (float)(v11 * v23)) + (float)(v9 * v26)) + (float)(v10 * v24);
    v31 = *((float *)this + 12);
    v32 = *((float *)this + 13);
    v33 = *((float *)this + 14);
    v34 = *((float *)this + 15);
    v35 = *((float *)this + 16);
    v36 = *((float *)this + 17);
    v37 = *((float *)this + 18);
    v38 = v20 + v20;
    v39 = v21 + v21;
    v40 = v22 + v22;
    v41 = (float)(v34 * v34) + -0.5;
    v42 = (float)((float)(v32 * v39) + (float)(v31 * v38)) + (float)(v33 * v40);
    v43 = (float)((float)(v34 * (float)((float)(v32 * v40) - (float)(v33 * v39))) + (float)(v38 * v41))
        + (float)(v31 * v42);
    v44 = (float)((float)((float)((float)(v33 * v38) - (float)(v31 * v40)) * v34) + (float)(v39 * v41))
        + (float)(v32 * v42);
    v45 = (float)((float)((float)(v31 * v39) - (float)(v32 * v38)) * v34) + (float)(v40 * v41);
    v46 = (float)((float)((float)(v30 * v31) + (float)(v34 * v27)) + (float)(v32 * v29)) - (float)(v28 * v33);
    v47 = (float)((float)((float)(v30 * v32) + (float)(v34 * v28)) + (float)(v33 * v27)) - (float)(v29 * v31);
    v48 = (float)((float)((float)(v30 * v33) + (float)(v34 * v29)) + (float)(v31 * v28)) - (float)(v27 * v32);
    v49 = (float)((float)((float)(v34 * v30) - (float)(v31 * v27)) - (float)(v32 * v28)) - (float)(v33 * v29);
    *(float *)v66 = v46;
    *(float *)&v66[1] = v47;
    *(float *)&v66[2] = v48;
    *(float *)&v66[3] = v49;
    *(float *)&v66[4] = v35 + v43;
    *(float *)&v66[5] = v36 + v44;
    *(float *)&v66[6] = (float)(v45 + (float)(v33 * v42)) + v37;
    *((float *)this + 56) = v46;
    *((float *)this + 57) = v47;
    *((float *)this + 58) = v48;
    *((float *)this + 59) = v49;
    v5 = (char *)this + 32;
    *((float *)this + 60) = v35 + v43;
    *((float *)this + 61) = v36 + v44;
    *((float *)this + 62) = (float)(v45 + (float)(v33 * v42)) + v37;
    v6 = (char *)v66;
  }
  else
  {
    v5 = (char *)this + 32;
    v6 = (char *)this + 224;
  }
  physx::Sc::BodyCore::setBody2World((uint64_t)v5, (uint64_t)v6);
  if ((v3 & 1) != 0)
  {
LABEL_10:
    v50 = (_BYTE *)*((_QWORD *)this + 2);
    if (!v50)
    {
      v4 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)this, *((_BYTE *)this + 11) & 0xF).n128_u64[0];
      *((_QWORD *)this + 2) = v50;
    }
    if ((*((_BYTE *)this + 44) & 8) == 0 || (*v50 & 8) != 0)
    {
      if ((*((_BYTE *)this + 44) & 8) == 0 && (*v50 & 8) != 0)
        physx::Scb::Scene::switchRigidToNoSim(*(physx::Scb::Scene **)this, this, 1);
    }
    else
    {
      physx::Scb::Scene::switchRigidFromNoSim(*(_QWORD *)this, this, 1);
    }
  }
LABEL_18:
  if ((v2 & 0xF82FFFFF) == 0)
    goto LABEL_67;
  v51 = *((_QWORD *)this + 2);
  if (!v51)
  {
    v4 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)this, *((_BYTE *)this + 11) & 0xF).n128_u64[0];
    v51 = v52;
    *((_QWORD *)this + 2) = v52;
  }
  v53 = *((_DWORD *)this + 71);
  if ((v53 & 1) != 0)
  {
    v4.i32[0] = *(_DWORD *)(v51 + 164);
    v54 = *((_QWORD *)this + 26);
    if (v54 && *(_BYTE *)(v54 + 31) == 1)
    {
      *(_DWORD *)(v54 + 44) = v4.i32[0];
      if ((v53 & 2) != 0)
        goto LABEL_35;
    }
    else
    {
      *((_DWORD *)this + 43) = v4.i32[0];
      updateBodySim((uint64_t *)this + 4);
      v53 = *((_DWORD *)this + 71);
      if ((v53 & 2) != 0)
        goto LABEL_35;
    }
LABEL_23:
    if ((v53 & 4) == 0)
      goto LABEL_24;
    goto LABEL_36;
  }
  if ((v53 & 2) == 0)
    goto LABEL_23;
LABEL_35:
  physx::Sc::BodyCore::setInverseInertia((uint64_t *)this + 4, v51 + 168);
  v53 = *((_DWORD *)this + 71);
  if ((v53 & 4) == 0)
  {
LABEL_24:
    if ((v53 & 8) == 0)
      goto LABEL_25;
LABEL_41:
    v4.i32[0] = *(_DWORD *)(v51 + 184);
    v56 = *((_QWORD *)this + 26);
    if (v56 && *(_BYTE *)(v56 + 31) == 1)
    {
      *(_DWORD *)(v56 + 52) = v4.i32[0];
      if ((v53 & 0x10) != 0)
        goto LABEL_46;
    }
    else
    {
      *((_DWORD *)this + 39) = v4.i32[0];
      updateBodySim((uint64_t *)this + 4);
      v53 = *((_DWORD *)this + 71);
      if ((v53 & 0x10) != 0)
        goto LABEL_46;
    }
LABEL_26:
    if ((v53 & 0x20) == 0)
      goto LABEL_27;
LABEL_51:
    v4.i32[0] = *(_DWORD *)(v51 + 192);
    v58 = *((_QWORD *)this + 26);
    if (v58 && *(_BYTE *)(v58 + 31) == 1)
    {
      *(_DWORD *)(v58 + 60) = v4.i32[0];
      if ((v53 & 0x40) != 0)
        goto LABEL_56;
    }
    else
    {
      *((_DWORD *)this + 37) = v4.i32[0];
      updateBodySim((uint64_t *)this + 4);
      v53 = *((_DWORD *)this + 71);
      if ((v53 & 0x40) != 0)
        goto LABEL_56;
    }
LABEL_28:
    if ((v53 & 0x200) == 0)
      goto LABEL_59;
    goto LABEL_57;
  }
LABEL_36:
  v4.i32[0] = *(_DWORD *)(v51 + 180);
  v55 = *((_QWORD *)this + 26);
  if (v55 && *(_BYTE *)(v55 + 31) == 1)
  {
    *(_DWORD *)(v55 + 48) = v4.i32[0];
    if ((v53 & 8) != 0)
      goto LABEL_41;
  }
  else
  {
    *((_DWORD *)this + 38) = v4.i32[0];
    updateBodySim((uint64_t *)this + 4);
    v53 = *((_DWORD *)this + 71);
    if ((v53 & 8) != 0)
      goto LABEL_41;
  }
LABEL_25:
  if ((v53 & 0x10) == 0)
    goto LABEL_26;
LABEL_46:
  v4.i32[0] = *(_DWORD *)(v51 + 188);
  v57 = *((_QWORD *)this + 26);
  if (v57 && *(_BYTE *)(v57 + 31) == 1)
  {
    *(_DWORD *)(v57 + 56) = v4.i32[0];
    if ((v53 & 0x20) != 0)
      goto LABEL_51;
  }
  else
  {
    *((_DWORD *)this + 36) = v4.i32[0];
    updateBodySim((uint64_t *)this + 4);
    v53 = *((_DWORD *)this + 71);
    if ((v53 & 0x20) != 0)
      goto LABEL_51;
  }
LABEL_27:
  if ((v53 & 0x40) == 0)
    goto LABEL_28;
LABEL_56:
  *((_DWORD *)this + 45) = *(_DWORD *)(v51 + 196);
  updateBodySim((uint64_t *)this + 4);
  v53 = *((_DWORD *)this + 71);
  if ((v53 & 0x200) == 0)
    goto LABEL_59;
LABEL_57:
  v59 = *(_WORD *)(v51 + 208);
  *((_WORD *)this + 39) = v59;
  v60 = *((_QWORD *)this + 4);
  if (v60)
    *(_WORD *)(v60 + 126) = v59;
LABEL_59:
  if ((v53 & 0x100) != 0)
  {
    v4.i32[0] = *(_DWORD *)(v51 + 204);
    *((_DWORD *)this + 35) = v4.i32[0];
    if ((v53 & 0x400) == 0)
    {
LABEL_61:
      if ((v53 & 0x1000) == 0)
        goto LABEL_62;
      goto LABEL_74;
    }
  }
  else if ((v53 & 0x400) == 0)
  {
    goto LABEL_61;
  }
  physx::Sc::BodyCore::setBody2Actor((uint64_t)this + 32, (float *)(v51 + 224));
  v53 = *((_DWORD *)this + 71);
  if ((v53 & 0x1000) == 0)
  {
LABEL_62:
    if ((v53 & 0x800) == 0)
      goto LABEL_63;
    goto LABEL_75;
  }
LABEL_74:
  *((_DWORD *)this + 46) = *(_DWORD *)(v51 + 256);
  updateBodySim((uint64_t *)this + 4);
  v53 = *((_DWORD *)this + 71);
  if ((v53 & 0x800) == 0)
  {
LABEL_63:
    if ((v53 & 0x2000) == 0)
      goto LABEL_64;
    goto LABEL_76;
  }
LABEL_75:
  v4.i32[0] = *(_DWORD *)(v51 + 252);
  *((_DWORD *)this + 31) = v4.i32[0];
  if ((v53 & 0x2000) == 0)
  {
LABEL_64:
    if ((v53 & 0x80) == 0)
      goto LABEL_65;
    goto LABEL_77;
  }
LABEL_76:
  *((_DWORD *)this + 44) = *(_DWORD *)(v51 + 260);
  updateBodySim((uint64_t *)this + 4);
  if ((*((_DWORD *)this + 71) & 0x80) == 0)
  {
LABEL_65:
    if ((v2 & 0x4000) == 0)
      goto LABEL_67;
    goto LABEL_66;
  }
LABEL_77:
  v4.i32[0] = *(_DWORD *)(v51 + 200);
  *((_DWORD *)this + 27) = v4.i32[0];
  if ((v2 & 0x4000) != 0)
  {
LABEL_66:
    v61 = *(_QWORD *)(*(_QWORD *)this + 4384);
    v65 = *(_BYTE *)(v51 + 348);
    physx::Sc::BodyCore::setFlags((physx::Scb::Body *)((char *)this + 32), v61, &v65, v4);
  }
LABEL_67:
  physx::Scb::Body::syncCollisionWriteThroughState(this);
  v63 = (physx::Scb::Body *)((char *)this + 32);
  if ((v2 & 0x2000000) != 0)
  {
    physx::Sc::BodyCore::putToSleep(v63);
  }
  else if (*((_DWORD *)this + 2) >> 30 != 3)
  {
    if (*(_QWORD *)v63)
      v64 = *(_DWORD *)(*(_QWORD *)v63 + 184) > 0xFFFFFFFD;
    else
      v64 = 1;
    *((_DWORD *)this + 70) = v64;
  }
  physx::Scb::RigidObject::syncState(this, v62);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = *((unsigned __int8 *)this + 11) << 24;
  *((_DWORD *)this + 71) = 0;
}

void physx::Scb::Shape::syncState(__n128 *this, __n128 a2)
{
  unsigned __int32 v3;
  int v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  const unsigned __int16 *v10;
  unint64_t v11;
  char v12;
  int v13;

  v3 = this->n128_u32[2];
  v4 = v3 & 0xFFFFFF;
  if ((v3 & 0xFFFFFF) == 0)
    goto LABEL_23;
  v5 = this[6].n128_i8[0];
  v6 = this[1].n128_u64[0];
  if (!v6)
  {
    a2.n128_u64[0] = physx::Scb::Scene::getStream(this->n128_u64[0], HIBYTE(v3) & 0xF).n128_u64[0];
    v6 = v7;
    this[1].n128_u64[0] = v7;
  }
  v8 = this->n128_u64[0];
  if ((v3 & 1) != 0)
  {
    if (!v8)
    {
      physx::Sc::ShapeCore::setGeometry((uint64_t)&this[2], (uint64_t *)(v6 + 64));
      goto LABEL_13;
    }
    (*(void (**)(_QWORD, __n128 *))(**(_QWORD **)(*(_QWORD *)(v8 + 1856) + 1776) + 96))(*(_QWORD *)(*(_QWORD *)(v8 + 1856) + 1776), this + 4);
    physx::Sc::ShapeCore::setGeometry((uint64_t)&this[2], (uint64_t *)(v6 + 64));
    (*(void (**)(_QWORD, __n128 *))(**(_QWORD **)(*(_QWORD *)(v8 + 1856) + 1776) + 88))(*(_QWORD *)(*(_QWORD *)(v8 + 1856) + 1776), this + 4);
  }
  if ((v3 & 2) != 0 && v8)
  {
    v9 = *(unsigned __int16 *)(v6 + 148);
    v10 = (const unsigned __int16 *)(v6 + 144);
    if (v9 != 1)
      v10 = (const unsigned __int16 *)(*(_QWORD *)(v8 + 7792) + 2 * *(unsigned int *)v10);
    physx::Sc::ShapeCore::setMaterialIndices((char *)&this[2], v10, v9);
    (*(void (**)(_QWORD, __n128 *))(**(_QWORD **)(*(_QWORD *)(v8 + 1856) + 1776) + 128))(*(_QWORD *)(*(_QWORD *)(v8 + 1856) + 1776), this + 4);
  }
LABEL_13:
  v3 = this->n128_u32[2];
  if ((v3 & 4) != 0)
  {
    this[4] = *(__n128 *)v6;
    a2.n128_u64[0] = *(_QWORD *)(v6 + 16);
    this[5].n128_u64[0] = a2.n128_u64[0];
    a2.n128_u32[0] = *(_DWORD *)(v6 + 24);
    this[5].n128_u32[2] = a2.n128_u32[0];
    if ((v3 & 8) == 0)
    {
LABEL_15:
      if ((v3 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_15;
  }
  a2 = *(__n128 *)(v6 + 28);
  this[3] = a2;
  if ((v3 & 0x10) == 0)
  {
LABEL_16:
    if ((v3 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_26:
  a2.n128_u32[0] = *(_DWORD *)(v6 + 44);
  this[5].n128_u32[3] = a2.n128_u32[0];
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  a2.n128_u32[0] = *(_DWORD *)(v6 + 48);
  this[12].n128_u32[0] = a2.n128_u32[0];
  if ((v3 & 0x40) == 0)
  {
LABEL_18:
    if ((v3 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  this[6].n128_u8[0] = *(_BYTE *)(v6 + 52);
  if ((v3 & 0x80) == 0)
  {
LABEL_19:
    if ((v3 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_29:
  a2.n128_u32[0] = *(_DWORD *)(v6 + 56);
  this[12].n128_u32[1] = a2.n128_u32[0];
  if ((v3 & 0x100) != 0)
  {
LABEL_20:
    a2.n128_u32[0] = *(_DWORD *)(v6 + 60);
    this[12].n128_u32[2] = a2.n128_u32[0];
  }
LABEL_21:
  v11 = this[-1].n128_u64[1];
  if (v11)
  {
    v13 = v4;
    v12 = v5;
    physx::Sc::RigidCore::onShapeChange((_QWORD *)(v11 + 128), (uint64_t)&this[2], &v13, &v12, 1, (int8x8_t)a2.n128_u64[0]);
    v3 = this->n128_u32[2];
  }
LABEL_23:
  this[1].n128_u64[0] = 0;
  this->n128_u32[2] = v3 & 0xFF000000;
}

void physx::Scb::Scene::processPendingRemove(physx::Scb::Scene *this, int8x8_t a2)
{
  unint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  __n128 v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;

  if (*((_DWORD *)this + 1973))
  {
    v3 = 0;
    do
      physx::Scb::RigidObject::processShapeRemoves(*(_QWORD *)(*((_QWORD *)this + 981) + 8 * v3++));
    while (v3 < *((unsigned int *)this + 1973));
  }
  if (*((_DWORD *)this + 1987))
  {
    v4 = 0;
    do
      physx::Scb::RigidObject::processShapeRemoves(*(_QWORD *)(*((_QWORD *)this + 988) + 8 * v4++));
    while (v4 < *((unsigned int *)this + 1987));
  }
  physx::Scb::Scene::processRemoves<physx::Scb::Constraint,true,false>((uint64_t)this, (uint64_t)this + 7952, a2);
  v6 = *((unsigned int *)this + 2001);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 995);
    do
    {
      v9 = *(_QWORD *)(v8 + 8 * v7);
      if ((~*(_DWORD *)(v9 + 8) & 0x10000001) == 0)
      {
        v10 = *(_QWORD **)(v9 + 104);
        if (v10)
        {
          physx::Sc::ConstraintSim::preBodiesChange(v10, v5);
          v6 = *((unsigned int *)this + 2001);
        }
      }
      ++v7;
    }
    while (v7 < v6);
  }
  physx::Scb::Scene::processRemoves<physx::Scb::ArticulationJoint,false,false>((uint64_t)this, (uint64_t)this + 8064);
  physx::Scb::Scene::processRemoves<physx::Scb::RigidStatic,false,true>((uint64_t)this, (uint64_t)this + 7840, v11);
  physx::Scb::Scene::processRemoves<physx::Scb::Body,true,true>((uint64_t)this, (uint64_t)this + 7896, v12);
  physx::Scb::Scene::processRemoves<physx::Scb::Articulation,true,false>((uint64_t)this, (uint64_t)this + 8008);
  v13 = *((unsigned int *)this + 2043);
  if ((_DWORD)v13)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 1016) + 8 * i);
      if (*(_DWORD *)(v15 + 8) >> 30 == 3)
      {
        physx::Scb::Aggregate::syncState(*(physx::Scb::Aggregate **)(*((_QWORD *)this + 1016) + 8 * i), this);
        physx::Sc::Scene::deleteAggregate((physx::Scb::Scene *)((char *)this + 16), *(_DWORD *)(v15 + 32));
        v13 = *((unsigned int *)this + 2043);
      }
    }
  }
}

void physx::Scb::Scene::processRemoves<physx::Scb::Constraint,true,false>(uint64_t a1, uint64_t a2, int8x8_t a3)
{
  unint64_t v4;
  int32x2_t **v5;
  uint64_t v6;

  if (*(_DWORD *)(a2 + 52))
  {
    v4 = 0;
    v5 = (int32x2_t **)(a1 + 16);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4);
      if (*(_DWORD *)(v6 + 8) >> 30 == 3)
      {
        physx::Sc::Scene::removeConstraint(v5, (physx::Sc::ConstraintCore *)(v6 + 24), a3);
        if ((*(_BYTE *)(v6 + 11) & 0x10) == 0)
          physx::Scb::Constraint::syncState((physx::Scb::Constraint *)v6, (float32x2_t)a3);
      }
      ++v4;
    }
    while (v4 < *(unsigned int *)(a2 + 52));
  }
}

uint64_t physx::Scb::Scene::processRemoves<physx::Scb::ArticulationJoint,false,false>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * i);
      if (*(_DWORD *)(v5 + 8) >> 30 == 3)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          physx::Sc::ArticulationJointSim::~ArticulationJointSim(*(physx::Sc::ArticulationJointSim **)(v5 + 24));
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
          v2 = *(unsigned int *)(a2 + 52);
        }
      }
    }
  }
  return result;
}

void physx::Scb::Scene::processRemoves<physx::Scb::RigidStatic,false,true>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  _BYTE *v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 **v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  unsigned int v30;
  int v31;
  physx::Sc::Scene *v32;
  __n128 *v34;
  _BYTE v35[512];
  char v36;
  _BYTE *v37;
  _QWORD v38[3];

  v38[1] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 52))
  {
    v4 = 0;
    v32 = (physx::Sc::Scene *)(a1 + 16);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4);
      v6 = *(unsigned int *)(v5 + 8);
      if (v6 >> 30 != 3)
        goto LABEL_43;
      if ((*(_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + v5 + 12) & 8) == 0)
      {
        v7 = (v6 >> 4) & 1;
        v38[0] = 0x4000000000;
        v36 = 1;
        v37 = v35;
        v8 = *(_QWORD *)(a1 + 4392);
        v9 = v8 == 0;
        if (v8)
          v10 = (_BYTE *)(v8 + 536);
        else
          v10 = v35;
        if (v8)
          v11 = (uint64_t *)(v8 + 1056);
        else
          v11 = (uint64_t *)&v37;
        v12 = (unsigned int *)(v8 + 1064);
        if (v9)
          v13 = (unsigned int *)v38;
        else
          v13 = v12;
        physx::Sc::Scene::removeStatic(v32, (uint64_t *)(v5 + 32), (uint64_t)v10, v7);
        v14 = *v13;
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = *v11;
          v17 = *(_QWORD *)v5 + 7736;
          do
          {
            v18 = *(_QWORD *)(v16 + 8 * v15);
            v19 = *(_DWORD *)(v18 - 24);
            if ((v19 & 0x10000000) != 0)
            {
              physx::Scb::Shape::syncState((__n128 *)(v18 - 32), a3);
              v34 = (__n128 *)(v18 - 32);
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v17, (uint64_t *)&v34);
              v19 = *(_DWORD *)(v18 - 24) & 0xEFFFFFFF;
              *(_DWORD *)(v18 - 24) = v19;
            }
            if ((v19 & 0xF000000) == 0x1000000)
            {
              *(_DWORD *)(v18 - 24) = v19 & 0x3FFFFFFF;
              *(_QWORD *)(v18 - 32) = 0;
            }
            v20 = (unsigned int *)(v18 - 48);
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
              (*(void (**)(uint64_t))(*(_QWORD *)(v18 - 56) + 16))(v18 - 56);
            ++v15;
          }
          while (v15 != v14);
        }
        if ((v38[0] & 0x8000000000000000) != 0 || (v38[0] & 0x7FFFFFFF00000000) == 0)
          goto LABEL_43;
        v23 = v37;
LABEL_40:
        if (v23 != v35)
        {
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        goto LABEL_43;
      }
      v38[0] = 0x4000000000;
      v36 = 1;
      v37 = v35;
      v24 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(v5 + 11) & 0xF) + 3) + v5;
      v25 = v24 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v24 + 13) + 10);
      v26 = (__n128 **)(v25 + 40);
      v27 = *(unsigned __int16 *)(v25 + 48);
      if ((_DWORD)v27 == 1)
      {
        v27 = 1;
      }
      else
      {
        if (!*(_WORD *)(v25 + 48))
        {
          v23 = v35;
          v31 = 64;
          goto LABEL_39;
        }
        v26 = (__n128 **)*v26;
      }
      v28 = *(_QWORD *)v5 + 7736;
      do
      {
        v29 = *v26;
        v30 = (*v26)[3].n128_u32[2];
        if ((v30 & 0x10000000) != 0)
        {
          physx::Scb::Shape::syncState(v29 + 3, a3);
          v34 = v29 + 3;
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v28, (uint64_t *)&v34);
          v30 = v29[3].n128_u32[2] & 0xEFFFFFFF;
          v29[3].n128_u32[2] = v30;
        }
        if ((v30 & 0xF000000) == 0x1000000)
        {
          v29[3].n128_u32[2] = v30 & 0x3FFFFFFF;
          v29[3].n128_u64[0] = 0;
        }
        ++v26;
        --v27;
      }
      while (v27);
      v23 = v37;
      v31 = HIDWORD(v38[0]);
      if ((v38[0] & 0x8000000000000000) != 0)
        goto LABEL_43;
LABEL_39:
      if ((v31 & 0x7FFFFFFF) != 0)
        goto LABEL_40;
LABEL_43:
      ++v4;
    }
    while (v4 < *(unsigned int *)(a2 + 52));
  }
}

void physx::Scb::Scene::processRemoves<physx::Scb::Body,true,true>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  _BYTE *v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  __n128 **v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  unsigned int v29;
  int v30;
  physx::Sc::Scene *v31;
  __n128 *v33;
  _BYTE v34[512];
  char v35;
  _BYTE *v36;
  _QWORD v37[3];

  v37[1] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 52))
  {
    v4 = 0;
    v31 = (physx::Sc::Scene *)(a1 + 16);
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4);
      v6 = *(unsigned int *)(v5 + 8);
      if (v6 >> 30 == 3)
        break;
LABEL_45:
      if (++v4 >= (unint64_t)*(unsigned int *)(a2 + 52))
        return;
    }
    *(_DWORD *)(v5 + 284) &= 0xF9FFFFFF;
    if ((*(_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + v5 + 12) & 8) == 0)
    {
      v7 = (v6 >> 4) & 1;
      v37[0] = 0x4000000000;
      v35 = 1;
      v36 = v34;
      v8 = *(_QWORD *)(a1 + 4392);
      v9 = v8 == 0;
      if (v8)
        v10 = (_BYTE *)(v8 + 536);
      else
        v10 = v34;
      if (v8)
        v11 = (uint64_t *)(v8 + 1056);
      else
        v11 = (uint64_t *)&v36;
      v12 = (unsigned int *)(v8 + 1064);
      if (v9)
        v13 = (unsigned int *)v37;
      else
        v13 = v12;
      physx::Sc::Scene::removeBody(v31, (uint64_t *)(v5 + 32), (uint64_t)v10, v7);
      v14 = *v13;
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = *v11;
        v17 = *(_QWORD *)v5 + 7736;
        do
        {
          v18 = *(_QWORD *)(v16 + 8 * v15);
          v19 = *(_DWORD *)(v18 - 24);
          if ((v19 & 0x10000000) != 0)
          {
            physx::Scb::Shape::syncState((__n128 *)(v18 - 32), a3);
            v33 = (__n128 *)(v18 - 32);
            physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v17, (uint64_t *)&v33);
            v19 = *(_DWORD *)(v18 - 24) & 0xEFFFFFFF;
            *(_DWORD *)(v18 - 24) = v19;
          }
          if ((v19 & 0xF000000) == 0x1000000)
          {
            *(_DWORD *)(v18 - 24) = v19 & 0x3FFFFFFF;
            *(_QWORD *)(v18 - 32) = 0;
          }
          v20 = (unsigned int *)(v18 - 48);
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(uint64_t))(*(_QWORD *)(v18 - 56) + 16))(v18 - 56);
          ++v15;
        }
        while (v15 != v14);
      }
      if ((v37[0] & 0x8000000000000000) != 0 || (v37[0] & 0x7FFFFFFF00000000) == 0)
        goto LABEL_43;
      v23 = v36;
      goto LABEL_40;
    }
    v37[0] = 0x4000000000;
    v35 = 1;
    v36 = v34;
    v24 = v5 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v5 + 45) + 10);
    v25 = (__n128 **)(v24 + 72);
    v26 = *(unsigned __int16 *)(v24 + 80);
    if ((_DWORD)v26 == 1)
    {
      v26 = 1;
    }
    else
    {
      if (!*(_WORD *)(v24 + 80))
      {
        v23 = v34;
        v30 = 64;
        goto LABEL_39;
      }
      v25 = (__n128 **)*v25;
    }
    v27 = *(_QWORD *)v5 + 7736;
    do
    {
      v28 = *v25;
      v29 = (*v25)[3].n128_u32[2];
      if ((v29 & 0x10000000) != 0)
      {
        physx::Scb::Shape::syncState(v28 + 3, a3);
        v33 = v28 + 3;
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v27, (uint64_t *)&v33);
        v29 = v28[3].n128_u32[2] & 0xEFFFFFFF;
        v28[3].n128_u32[2] = v29;
      }
      if ((v29 & 0xF000000) == 0x1000000)
      {
        v28[3].n128_u32[2] = v29 & 0x3FFFFFFF;
        v28[3].n128_u64[0] = 0;
      }
      ++v25;
      --v26;
    }
    while (v26);
    v23 = v36;
    v30 = HIDWORD(v37[0]);
    if ((v37[0] & 0x8000000000000000) != 0)
      goto LABEL_43;
LABEL_39:
    if ((v30 & 0x7FFFFFFF) == 0)
    {
LABEL_43:
      if ((*(_BYTE *)(v5 + 11) & 0x10) == 0)
        physx::Scb::Body::syncState((physx::Scb::Body *)v5);
      goto LABEL_45;
    }
LABEL_40:
    if (v23 != v34 && v23)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    goto LABEL_43;
  }
}

void physx::Scb::Scene::processRemoves<physx::Scb::Articulation,true,false>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  physx::Sc::Scene *v4;
  uint64_t v5;
  unsigned int v6;

  if (*(_DWORD *)(a2 + 52))
  {
    v3 = 0;
    v4 = (physx::Sc::Scene *)(a1 + 16);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v3);
      v6 = *(_DWORD *)(v5 + 8);
      if (v6 >> 30 == 3)
      {
        *(_DWORD *)(v5 + 8) = v6 & 0xFFFFFCFF;
        physx::Sc::Scene::removeArticulation(v4, (physx::Sc::ArticulationSim **)(v5 + 24));
        if ((*(_BYTE *)(v5 + 11) & 0x10) == 0)
          physx::Scb::Articulation::syncState((physx::Scb::Articulation *)v5);
      }
      ++v3;
    }
    while (v3 < *(unsigned int *)(a2 + 52));
  }
}

_QWORD *physx::Scb::Scene::scheduleForUpdate(_QWORD *this, physx::Scb::Base *a2, int8x8_t a3)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *((_DWORD *)a2 + 2);
  switch(HIBYTE(v3) & 0xF)
  {
    case 1:
    case 2:
      if ((v3 & 0x10000000) == 0)
      {
        *((_DWORD *)a2 + 2) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          v4 = 967;
          goto LABEL_23;
        }
      }
      break;
    case 3:
    case 4:
      if ((v3 & 0x10000000) == 0)
      {
        *((_DWORD *)a2 + 2) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          v4 = 987;
          goto LABEL_23;
        }
      }
      break;
    case 5:
      if ((v3 & 0x10000000) == 0)
      {
        *((_DWORD *)a2 + 2) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          v4 = 980;
          goto LABEL_23;
        }
      }
      break;
    case 6:
      if ((v3 & 0x10000000) == 0)
      {
        *((_DWORD *)a2 + 2) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          v4 = 994;
          goto LABEL_23;
        }
      }
      break;
    case 7:
      if ((v3 & 0x10000000) == 0)
      {
        *((_DWORD *)a2 + 2) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          v4 = 1001;
          goto LABEL_23;
        }
      }
      break;
    case 8:
      if ((v3 & 0x10000000) == 0)
      {
        *((_DWORD *)a2 + 2) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          v4 = 1008;
          goto LABEL_23;
        }
      }
      break;
    case 9:
      if ((v3 & 0x10000000) == 0)
      {
        *((_DWORD *)a2 + 2) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          v4 = 1015;
LABEL_23:
          this = physx::Scb::ObjectTracker::insert((int32x2_t *)&this[v4], a2, a3);
        }
      }
      break;
    default:
      return this;
  }
  return this;
}

__n128 physx::Scb::Scene::getStream(uint64_t a1, int a2)
{
  uint64_t NotThreadSafe;
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  physx::Cm::FlushPool *v6;
  int v7;
  __n128 *v8;

  switch(a2)
  {
    case 1:
    case 2:
      NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 160, 0x10u);
      *(_QWORD *)(NotThreadSafe + 36) = 0;
      *(_QWORD *)(NotThreadSafe + 28) = 0;
      *(_BYTE *)(NotThreadSafe + 52) = 0;
      *(_DWORD *)(NotThreadSafe + 64) = -1;
      *(_DWORD *)(NotThreadSafe + 144) = 0;
      *(_WORD *)(NotThreadSafe + 148) = 0;
      break;
    case 3:
    case 4:
      v4 = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 352, 0x10u);
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 40) = 1;
      *(_QWORD *)(v4 + 48) = v4 + 8;
      *(_QWORD *)(v4 + 56) = 0x400000000;
      *(_BYTE *)(v4 + 128) = 1;
      *(_QWORD *)(v4 + 136) = v4 + 64;
      *(_QWORD *)(v4 + 144) = 0x400000000;
      *(_QWORD *)(v4 + 152) = 0;
      *(_DWORD *)(v4 + 160) = 0;
      *(_BYTE *)(v4 + 264) = 0;
      *(_BYTE *)(v4 + 348) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)(v4 + 300) = 0u;
      *(_OWORD *)(v4 + 316) = 0u;
      *(_OWORD *)(v4 + 332) = 0u;
      break;
    case 5:
      v5 = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 208, 0x10u);
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 40) = 1;
      *(_QWORD *)(v5 + 48) = v5 + 8;
      *(_QWORD *)(v5 + 56) = 0x400000000;
      *(_BYTE *)(v5 + 128) = 1;
      *(_QWORD *)(v5 + 136) = v5 + 64;
      *(_QWORD *)(v5 + 144) = 0x400000000;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      break;
    case 6:
      *(_WORD *)(physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 32, 0x10u) + 24) = 0;
      break;
    case 7:
      v6 = (physx::Cm::FlushPool *)(a1 + 7696);
      v7 = 28;
      goto LABEL_8;
    case 8:
      v6 = (physx::Cm::FlushPool *)(a1 + 7696);
      v7 = 376;
LABEL_8:
      physx::Cm::FlushPool::allocateNotThreadSafe(v6, v7, 0x10u);
      break;
    case 9:
      v8 = (__n128 *)physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 16, 0x10u);
      result.n128_u64[0] = 0xFFFFFFFFLL;
      result.n128_u64[1] = 0xFFFFFFFFLL;
      *v8 = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Scb::Scene::addBroadPhaseRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!*(_BYTE *)(a1 + 7689))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1864)
                                                                                             + 392)
                                                                               + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 1864) + 392), a2, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1864) + 400) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1864) + 280) + 8));
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.cpp", 1184, "PxScene::addBroadPhaseRegion() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, vars0);
  return 0xFFFFFFFFLL;
}

uint64_t physx::Scb::Scene::removeBroadPhaseRegion(physx::Scb::Scene *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!*((_BYTE *)this + 7689))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 233) + 392) + 48))(*(_QWORD *)(*((_QWORD *)this + 233) + 392));
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.cpp", 1193, "PxScene::removeBroadPhaseRegion() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, vars0);
  return 0;
}

uint64_t physx::Scb::Shape::setMaterialsHelper(physx::Scb::Shape *this, physx::PxMaterial *const *a2, unsigned int a3)
{
  char *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17[7];
  char v18;
  unsigned __int16 __src[8];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3 != 1)
  {
    v7 = a3;
    if (a3 < 0x201)
    {
      MEMORY[0x24BDAC7A8](this);
      v11 = (unsigned __int16 *)&v17[-v13];
      bzero(&v17[-v13], v14);
      if (!v7)
      {
        v5 = (char *)this + 32;
        v6 = v11;
        a3 = 0;
        goto LABEL_3;
      }
    }
    else
    {
      v11 = (unsigned __int16 *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v18, 2 * a3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbShape.cpp", 48);
      if (!v11)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbShape.cpp", 57, "PxShape::setMaterials() failed. Out of memory. Call will be ignored.", v8, v9, v10, v17[0]);
        return 0;
      }
    }
    v15 = 0;
    do
    {
      v11[v15] = *((_WORD *)a2[v15] + 36);
      ++v15;
    }
    while (v7 != v15);
    physx::Sc::ShapeCore::setMaterialIndices((char *)this + 32, v11, v7);
    if (v7 >= 0x201)
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)__src, (char *)v11);
    goto LABEL_12;
  }
  __src[0] = *((_WORD *)*a2 + 36);
  v5 = (char *)this + 32;
  v6 = __src;
LABEL_3:
  physx::Sc::ShapeCore::setMaterialIndices(v5, v6, a3);
LABEL_12:
  if (*(_QWORD *)this)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 1856) + 1776);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 128))(v16, (char *)this + 64);
  }
  return 1;
}

void *physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15);
      v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(_QWORD *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::PxsMaterialManager::resize(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;

  v2 = *(unsigned int *)(this + 8);
  if (v2 >= a2)
    return this;
  v3 = this;
  v4 = (a2 + 31) & 0xFFFFFFE0;
  *(_DWORD *)(this + 8) = v4;
  this = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, ((unint64_t)(v4 >> 5) << 10) | 0x17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/api/include/PxsMaterialManager.h", 100);
  if (this)
  {
    v5 = (this + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v5 - 8) = v5 - this;
    if (!(_DWORD)v2)
      goto LABEL_8;
LABEL_6:
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(*(_QWORD *)v3 + v6);
      v8 = v5 + v6;
      v9 = *v7;
      *(_DWORD *)(v8 + 8) = *((_DWORD *)v7 + 2);
      *(_QWORD *)v8 = v9;
      *(_WORD *)(v8 + 12) = *((_WORD *)v7 + 6);
      *(_WORD *)(v8 + 14) = *((_WORD *)v7 + 7);
      v10 = v7[2];
      *(_DWORD *)(v8 + 24) = *((_DWORD *)v7 + 6);
      *(_QWORD *)(v8 + 16) = v10;
      v6 += 32;
    }
    while (32 * v2 != v6);
    goto LABEL_8;
  }
  v5 = 0;
  if ((_DWORD)v2)
    goto LABEL_6;
LABEL_8:
  v11 = *(unsigned int *)(v3 + 8);
  if (v2 < v11)
  {
    v12 = v11 - v2;
    v13 = (_WORD *)(v5 + 32 * v2 + 24);
    do
    {
      *v13 = -1;
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  if (*(_QWORD *)v3)
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(_QWORD *)v3 - *(_QWORD *)(*(_QWORD *)v3 - 8));
  *(_QWORD *)v3 = v5;
  return this;
}

void physx::Scb::RigidObject::syncState(physx::Scb::RigidObject *this, int8x8_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  char v35;
  int v36;

  v3 = *((unsigned int *)this + 2);
  if ((v3 & 0x20) != 0)
  {
    v4 = *(_QWORD *)this;
    v5 = (v3 >> 24) & 0xF;
    v6 = *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v5 + 3);
    v7 = *((_QWORD *)this + 2);
    if (!v7)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)this, v5).n128_u64[0];
      v7 = v8;
      *((_QWORD *)this + 2) = v8;
    }
    v9 = *(unsigned int *)(v7 + 160);
    v10 = (unsigned int *)(v7 + 152);
    if ((_DWORD)v9 != 1)
    {
      if (!*(_DWORD *)(v7 + 160))
        goto LABEL_14;
      v10 = (unsigned int *)(*(_QWORD *)(v4 + 7808) + 8 * *v10);
    }
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)&v10[2 * v11];
      if ((*(_BYTE *)(v12 + 8) & 0x40) != 0)
        v13 = (_BYTE *)(*(_QWORD *)(v12 + 16) + 52);
      else
        v13 = (_BYTE *)(v12 + 96);
      if ((*v13 & 5) != 0)
      {
        v36 = 128;
        v35 = 0;
        physx::Sc::RigidCore::onShapeChange((physx::Scb::RigidObject *)((char *)this + v6), v12 + 32, &v36, &v35, 0, a2);
        v9 = *(unsigned int *)(v7 + 160);
      }
      ++v11;
    }
    while (v11 < v9);
  }
LABEL_14:
  if ((v3 & 8) != 0)
  {
    v14 = *((_QWORD *)this + 2);
    if (!v14)
    {
      physx::Scb::Scene::getStream(*(_QWORD *)this, *((_BYTE *)this + 11) & 0xF);
      v14 = v15;
      *((_QWORD *)this + 2) = v15;
    }
    v16 = *(unsigned int *)(v14 + 56);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *((_DWORD *)this + 2) >> 30;
      do
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v17);
        v20 = *(_DWORD *)(v19 + 8);
        v21 = v20 & 0xF000000;
        if (v18 <= 2)
        {
          if (v21 == 0x1000000)
          {
            v23 = *(_QWORD *)this;
            *(_DWORD *)(v19 + 8) = v20 & 0x3FFFFFFF | 0x80000000;
            *(_QWORD *)v19 = v23;
          }
          v24 = *((unsigned int *)this + 2);
          if ((v24 & 1) != 0)
            v25 = (_BYTE *)*((_QWORD *)this + 2);
          else
            v25 = (char *)this + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v24 >> 24) & 0xF) + 3) + 12;
          if ((*v25 & 8) == 0)
          {
            v26 = *(uint64_t **)((char *)this + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (BYTE3(v24) & 0xF) + 3));
            if (v26)
              physx::Sc::Scene::addShape(v26[9], (physx::Sc::RigidSim *)v26, (physx::Sc::ShapeCore *)(v19 + 32), 0);
            v27 = (unsigned int *)(v19 - 16);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 + 1, v27));
            v16 = *(unsigned int *)(v14 + 56);
          }
        }
        else if (v21 == 0x1000000)
        {
          v22 = *(_QWORD *)this;
          *(_DWORD *)(v19 + 8) = v20 & 0x3FFFFFFF;
          *(_QWORD *)v19 = v22;
        }
        ++v17;
      }
      while (v17 < v16);
    }
    physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::resize(v14 + 8);
    physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::recreate(v14 + 8, *(_DWORD *)(v14 + 56));
  }
  v29 = *((unsigned int *)this + 2);
  if ((v29 & 3) != 0)
  {
    v30 = (v29 >> 24) & 0xF;
    v31 = (unsigned __int8 *)this + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + v30 + 3);
    v32 = (unsigned __int8 *)*((_QWORD *)this + 2);
    if (v32)
    {
      if ((v29 & 1) == 0)
      {
LABEL_43:
        if ((v29 & 2) != 0)
        {
          v31[14] = v32[1];
          if (*(_QWORD *)v31)
            physx::Sc::ActorSim::setActorsInteractionsDirty(*(_QWORD **)v31, 8, 0, 1, a2);
        }
        return;
      }
    }
    else
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream(*(_QWORD *)this, v30).n128_u64[0];
      v32 = v33;
      *((_QWORD *)this + 2) = v33;
      LODWORD(v29) = *((_DWORD *)this + 2);
      if ((v29 & 1) == 0)
        goto LABEL_43;
    }
    v34 = *v32;
    if (v34 != v31[12])
    {
      v31[12] = v34;
      if (*(_QWORD *)v31)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)v31 + 16))(*(_QWORD *)v31);
        LODWORD(v29) = *((_DWORD *)this + 2);
      }
    }
    goto LABEL_43;
  }
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::resize(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (!a2)
    goto LABEL_10;
  if ((8 * a2) <= 0x20 && !*(_BYTE *)(result + 32))
  {
    *(_BYTE *)(result + 32) = 1;
    v4 = (_QWORD *)result;
    goto LABEL_11;
  }
  if (8 * a2)
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::getName() [T = physx::Scb::Shape *]";
    else
      v6 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                             + 16))(v5 + 24, (8 * a2), v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v4 = (_QWORD *)result;
  }
  else
  {
LABEL_10:
    v4 = 0;
  }
LABEL_11:
  v7 = *(unsigned int *)(v3 + 48);
  v8 = *(uint64_t **)(v3 + 40);
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v4[v7];
    v10 = v4;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)(v3 + 40);
  }
  if ((*(_DWORD *)(v3 + 52) & 0x80000000) == 0)
  {
    if (v8 == (uint64_t *)v3)
    {
      *(_BYTE *)(v3 + 32) = 0;
    }
    else if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 40) = v4;
  *(_DWORD *)(v3 + 52) = a2;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Scb::Base *,physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::internal::HashSetBase<physx::Scb::Base *,physx::shdfnd::Hash<physx::Scb::Base *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 8 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::RigidStatic>(int32x2_t *result, physx::Scb::Base *a2, int32x2_t *this, uint64_t a4, int8x8_t a5)
{
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  _BYTE v29[512];
  char v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = result;
  if (result[961].i8[1])
    return physx::Scb::ObjectTracker::scheduleForInsert(this, a2, a5);
  v6 = *((unsigned int *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFF | 0x80000000;
  if ((v6 & 1) != 0)
    v7 = (_BYTE *)*((_QWORD *)a2 + 2);
  else
    v7 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + 12;
  if ((*v7 & 8) == 0)
  {
    v8 = (uint64_t)&result[2];
    v9 = (uint64_t **)((char *)a2 + 32);
    v32 = 0x4000000000;
    v30 = 1;
    v31 = v29;
    v10 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (BYTE3(v6) & 0xF) + 3);
    v11 = &v10[*((_QWORD *)&physx::Sc::gOffsetTable + v10[13] + 10)];
    v12 = v11 + 40;
    v13 = *((unsigned __int16 *)v11 + 24);
    if (v13 == 1)
    {
      result = (int32x2_t *)physx::Sc::Scene::addStatic(v8, v9, (_QWORD *)v11 + 5, 1u, 80, a4);
    }
    else
    {
      v12 = (_QWORD *)*v12;
      result = (int32x2_t *)physx::Sc::Scene::addStatic(v8, v9, v12, *((unsigned __int16 *)v11 + 24), 80, a4);
      if (!v13)
      {
LABEL_23:
        if ((v32 & 0x8000000000000000) == 0 && (v32 & 0x7FFFFFFF00000000) != 0 && v31 != v29 && v31 != 0)
          return (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24);
        return result;
      }
    }
    v21 = 0;
    v22 = *(_QWORD *)a2;
    do
    {
      v23 = v12[v21];
      v24 = *(_DWORD *)(v23 + 56);
      if ((v24 & 0xF000000) == 0x1000000)
      {
        *(_DWORD *)(v23 + 56) = v24 & 0x3FFFFFFF | 0x80000000;
        *(_QWORD *)(v23 + 48) = v22;
      }
      v25 = (unsigned int *)(v23 + 32);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      ++v21;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v32 = 0x4000000000;
  v14 = 1;
  v30 = 1;
  v31 = v29;
  v15 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3);
  v16 = &v15[*((_QWORD *)&physx::Sc::gOffsetTable + v15[13] + 10)];
  v17 = v16 + 40;
  v18 = *((unsigned __int16 *)v16 + 24);
  if ((_DWORD)v18 != 1)
  {
    if (!(_DWORD)v18)
      return result;
    v17 = *(char **)v17;
    v14 = v18;
  }
  do
  {
    v19 = *(char **)v17;
    v20 = *(_DWORD *)(*(_QWORD *)v17 + 56);
    if ((v20 & 0xF000000) == 0x1000000)
    {
      *((_DWORD *)v19 + 14) = v20 & 0x3FFFFFFF | 0x80000000;
      *((_QWORD *)v19 + 6) = result;
    }
    v17 += 8;
    --v14;
  }
  while (v14);
  return result;
}

int32x2_t *physx::Scb::Scene::addRigidNoSim<false,physx::Scb::RigidStatic>(int32x2_t *result, physx::Scb::Base *a2, int32x2_t *this, int8x8_t a4)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  _BYTE v23[512];
  char v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = result;
  if (result[961].i8[1])
  {
    result = physx::Scb::ObjectTracker::scheduleForInsert(this, a2, a4);
    v26 = 0x4000000000;
    v5 = 1;
    v24 = 1;
    v25 = v23;
    v6 = *((unsigned int *)a2 + 2);
    v7 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3);
    v8 = &v7[*((_QWORD *)&physx::Sc::gOffsetTable + v7[13] + 10)];
    v9 = v8 + 40;
    v10 = *((unsigned __int16 *)v8 + 24);
    if ((_DWORD)v10 != 1)
    {
      if (!(_DWORD)v10)
        return result;
      v9 = *(char **)v9;
      v5 = v10;
    }
    v11 = *(_QWORD *)a2;
    v12 = v6 & 0xC0000000;
    do
    {
      v13 = *(char **)v9;
      v14 = *(_DWORD *)(*(_QWORD *)v9 + 56);
      if ((v14 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v13 + 14) = v14 & 0x3FFFFFFF | v12;
        *((_QWORD *)v13 + 6) = v11;
      }
      v9 += 8;
      --v5;
    }
    while (v5);
  }
  else
  {
    v15 = *((unsigned int *)a2 + 2);
    *((_DWORD *)a2 + 2) = v15 & 0xFFFFFFF | 0x80000000;
    v26 = 0x4000000000;
    v16 = 1;
    v24 = 1;
    v25 = v23;
    v17 = (char *)a2 + *((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + ((v15 >> 24) & 0xF) + 3);
    v18 = &v17[*((_QWORD *)&physx::Sc::gOffsetTable + v17[13] + 10)];
    v19 = v18 + 40;
    v20 = *((unsigned __int16 *)v18 + 24);
    if ((_DWORD)v20 != 1)
    {
      if (!(_DWORD)v20)
        return result;
      v19 = *(char **)v19;
      v16 = v20;
    }
    do
    {
      v21 = *(char **)v19;
      v22 = *(_DWORD *)(*(_QWORD *)v19 + 56);
      if ((v22 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v21 + 14) = v22 & 0x3FFFFFFF | 0x80000000;
        *((_QWORD *)v21 + 6) = result;
      }
      v19 += 8;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>::getName() [T = physx::Scb::MaterialEvent]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8 + 8 * v9;
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(v8 + 8 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v15;
}

uint64_t physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>::getName() [T = physx::Scb::MaterialEvent]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

void physx::Scb::Constraint::syncState(physx::Scb::Constraint *this, float32x2_t Force)
{
  float32x2_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  physx::Sc::ConstraintSim *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v3 = (float32x2_t *)((char *)this + 112);
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    Force = physx::Sc::ConstraintSim::getForce(v4, v3, (float32x2_t *)((char *)this + 124));
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  *((_WORD *)this + 68) = *((_WORD *)this + 12) & 1;
  v5 = *((_DWORD *)this + 2);
  if ((v5 & 0xFFFFFF) == 0)
    goto LABEL_19;
  v6 = *((_QWORD *)this + 2);
  if (!v6)
  {
    Force = (float32x2_t)physx::Scb::Scene::getStream(*(_QWORD *)this, HIBYTE(v5) & 0xF).n128_u64[0];
    v6 = v7;
    *((_QWORD *)this + 2) = v7;
    if ((v5 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v8 = (physx::Sc::ConstraintSim *)*((_QWORD *)this + 13);
    if (v8)
      physx::Sc::ConstraintSim::postBodiesChange(v8, *(_QWORD *)v6, *(_QWORD *)(v6 + 8), (int8x8_t)Force);
    goto LABEL_11;
  }
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_11:
  if ((v5 & 2) != 0)
  {
    Force.i32[0] = *(_DWORD *)(v6 + 16);
    v9 = *(float *)(v6 + 20);
    *((_DWORD *)this + 23) = Force.i32[0];
    *((float *)this + 24) = v9;
    v10 = *((_QWORD *)this + 13);
    if (v10)
      physx::Sc::ConstraintSim::setBreakForceLL(v10, *(double *)&Force, v9);
  }
  if ((v5 & 8) != 0)
  {
    Force.i32[0] = *(_DWORD *)(v6 + 28);
    *((_DWORD *)this + 25) = Force.i32[0];
    v11 = *((_QWORD *)this + 13);
    if (v11)
      *(_DWORD *)(v11 + 76) = Force.i32[0];
  }
  if ((v5 & 4) != 0)
  {
    v12 = *((_WORD *)this + 68) | *(_WORD *)(v6 + 24);
    physx::Sc::ConstraintCore::setFlags((_QWORD *)this + 3, &v12, (int8x8_t)Force);
  }
LABEL_19:
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = *((unsigned __int8 *)this + 11) << 24;
}

void physx::Scb::Articulation::syncState(physx::Scb::Articulation *this)
{
  unsigned int v2;
  float v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *((_DWORD *)this + 2);
  if ((v2 & 0x80) != 0)
  {
    if ((v2 & 0x300) == 0)
    {
      v3 = *((float *)this + 18);
      *((float *)this + 15) = v3;
      goto LABEL_9;
    }
LABEL_5:
    if ((v2 & 0x100) != 0)
      *((_DWORD *)this + 15) = 0;
    else
      *((_DWORD *)this + 15) = *((_DWORD *)this + 18);
    goto LABEL_19;
  }
  v3 = *((float *)this + 15);
  *((float *)this + 18) = v3;
  if ((v2 & 0x300) != 0)
    goto LABEL_5;
LABEL_9:
  if (v2 >> 30 != 3)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 48))
        v5 = *(_DWORD *)(**(_QWORD **)(v4 + 40) + 184) > 0xFFFFFFFD;
      else
        v5 = 1;
      v6 = v5;
    }
    else
    {
      v6 = v3 == 0.0;
    }
    *((_BYTE *)this + 76) = v6;
  }
LABEL_19:
  v7 = v2;
  if ((v2 & 0xFFFC7F) == 0)
    goto LABEL_29;
  v8 = *((_QWORD *)this + 2);
  v7 = v2;
  if (v8)
  {
    if ((v2 & 2) == 0)
      goto LABEL_22;
  }
  else
  {
    physx::Scb::Scene::getStream(*(_QWORD *)this, HIBYTE(v2) & 0xF);
    *((_QWORD *)this + 2) = v8;
    v7 = *((_DWORD *)this + 2);
    if ((v7 & 2) == 0)
    {
LABEL_22:
      if ((v7 & 1) == 0)
        goto LABEL_23;
      goto LABEL_35;
    }
  }
  *((_DWORD *)this + 9) = *(_DWORD *)(v8 + 4);
  if ((v7 & 1) == 0)
  {
LABEL_23:
    if ((v7 & 4) == 0)
      goto LABEL_24;
    goto LABEL_36;
  }
LABEL_35:
  *((_DWORD *)this + 8) = *(_DWORD *)v8;
  if ((v7 & 4) == 0)
  {
LABEL_24:
    if ((v7 & 8) == 0)
      goto LABEL_25;
    goto LABEL_37;
  }
LABEL_36:
  *((_DWORD *)this + 10) = *(_DWORD *)(v8 + 8);
  if ((v7 & 8) == 0)
  {
LABEL_25:
    if ((v7 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_38;
  }
LABEL_37:
  *((_DWORD *)this + 12) = *(_DWORD *)(v8 + 12);
  if ((v7 & 0x10) == 0)
  {
LABEL_26:
    if ((v7 & 0x20) == 0)
      goto LABEL_27;
LABEL_39:
    *((_WORD *)this + 22) = *(_WORD *)(v8 + 20);
    if ((v7 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_38:
  *((_DWORD *)this + 13) = *(_DWORD *)(v8 + 16);
  if ((v7 & 0x20) != 0)
    goto LABEL_39;
LABEL_27:
  if ((v7 & 0x40) != 0)
LABEL_28:
    *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 24);
LABEL_29:
  if ((v2 & 0x800) != 0)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 3);
    if (v9)
    {
      physx::Sc::ArticulationSim::checkResize(*((_QWORD **)this + 3));
      (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 200))(*v9);
      v7 = *((_DWORD *)this + 2);
    }
  }
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = v7 & 0xFF000000;
}

uint64_t physx::Scb::RigidObject::processShapeRemoves(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  __n128 *v8;
  unsigned __int32 v9;
  physx::Sc::RigidCore *v10;
  uint64_t v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __n128 *v16;

  v1 = *(_DWORD *)(this + 8);
  if ((v1 & 8) != 0)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 16);
    if (!v3)
    {
      physx::Scb::Scene::getStream(*(_QWORD *)this, HIBYTE(v1) & 0xF);
      v3 = v4;
      *(_QWORD *)(v2 + 16) = v4;
      v1 = *(_DWORD *)(v2 + 8);
    }
    if (v1 >> 30 == 2)
    {
      v5 = *(unsigned int *)(v3 + 144);
      if ((_DWORD)v5)
      {
        for (i = 0; i < v5; ++i)
        {
          v7 = *(_QWORD *)(v3 + 136);
          v8 = *(__n128 **)(v7 + 16 * i);
          v9 = v8->n128_u32[2];
          if ((v9 & 0xF000000) == 0x1000000)
          {
            v8->n128_u32[2] = v9 & 0x3FFFFFFF;
            v8->n128_u64[0] = 0;
          }
          v10 = (physx::Sc::RigidCore *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets
                                         + (*(_BYTE *)(v2 + 11) & 0xF)
                                         + 3)
                                       + v2);
          if ((*((_BYTE *)v10 + 12) & 8) == 0)
          {
            v11 = *(_QWORD *)v2;
            physx::Sc::RigidCore::removeShapeFromScene(v10, (physx::Sc::ShapeCore *)&v8[2], *(_BYTE *)(v7 + 16 * i + 8) != 0);
            if ((v8->n128_u8[11] & 0x10) != 0)
            {
              physx::Scb::Shape::syncState(v8, v12);
              v16 = v8;
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v11 + 7736, (uint64_t *)&v16);
              v8->n128_u32[2] &= ~0x10000000u;
            }
            v13 = (unsigned int *)&v8[-1];
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
              (*(void (**)(uint64_t *))(v8[-2].n128_u64[1] + 16))(&v8[-2].n128_i64[1]);
            v5 = *(unsigned int *)(v3 + 144);
          }
        }
      }
    }
    physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::resize(v3 + 64);
    return physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::recreate(v3 + 64, *(_DWORD *)(v3 + 144));
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::resize(uint64_t result)
{
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;

  v3 = result;
  if (!a2)
    goto LABEL_10;
  if ((16 * a2) <= 0x40 && !*(_BYTE *)(result + 64))
  {
    *(_BYTE *)(result + 64) = 1;
    v4 = (_OWORD *)result;
    goto LABEL_11;
  }
  if (16 * a2)
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>::getName() [T = physx::Scb::RemovedShape]";
    else
      v6 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                             + 16))(v5 + 24, (16 * a2), v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v4 = (_OWORD *)result;
  }
  else
  {
LABEL_10:
    v4 = 0;
  }
LABEL_11:
  v7 = *(unsigned int *)(v3 + 80);
  v8 = *(__int128 **)(v3 + 72);
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v4[v7];
    v10 = v4;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(__int128 **)(v3 + 72);
  }
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) == 0)
  {
    if (v8 == (__int128 *)v3)
    {
      *(_BYTE *)(v3 + 64) = 0;
    }
    else if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 72) = v4;
  *(_DWORD *)(v3 + 84) = a2;
  return result;
}

uint64_t physx::Cct::Controller::Controller(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  const char *v7;
  pthread_mutex_t *v8;
  int v9;
  float v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_24ED970E8;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 63) = 0;
  *(_WORD *)(a1 + 71) = 1;
  v5 = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_BYTE *)(a1 + 304) = v5;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_QWORD *)(a1 + 435) = 0;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_WORD *)(a1 + 443) = 1;
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 468) = 0;
  *(_QWORD *)(a1 + 460) = 0;
  *(_BYTE *)(a1 + 472) = v5;
  *(_QWORD *)(a1 + 480) = 0;
  *(int64x2_t *)(a1 + 168) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 184) = xmmword_2261326C0;
  *(int64x2_t *)(a1 + 200) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 320) = -1;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_DWORD *)(a1 + 448) = 1069547520;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 544) = a3;
  *(_DWORD *)(a1 + 552) = -1;
  *(_WORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v7 = "<allocation names disabled>";
  v8 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 72, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 592) = v8;
  physx::shdfnd::MutexImpl::MutexImpl(v8);
  *(_QWORD *)(a1 + 600) = 0;
  v9 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = v10;
  *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(a2 + 48), *(int8x16_t *)(a2 + 48), 8uLL);
  *(_BYTE *)(a1 + 69) = v10 != 0.0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 488) = 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 512) = v11;
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 586) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  physx::Cct::Controller::setUpDirectionInternal(a1, a2 + 32);
  return a1;
}

uint64_t physx::Cct::Controller::createProxyActor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8;
  uint64_t result;
  void (***v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  float32x2_t v15;
  float v16;
  char v17;
  uint64_t v18;

  v8 = *(double *)(a1 + 512);
  v15 = vcvt_f32_f64(*(float64x2_t *)(a1 + 496));
  v16 = v8;
  v14 = *(_OWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 176))(a2, &v14);
  *(_QWORD *)(a1 + 488) = result;
  if (result)
  {
    v18 = a4;
    v17 = 11;
    v10 = (void (***)(_QWORD))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 192))(a2, a3, &v18, 1, 1, &v17);
    (*(void (**)(_QWORD, void (***)(_QWORD)))(**(_QWORD **)(a1 + 488) + 168))(*(_QWORD *)(a1 + 488), v10);
    (**v10)(v10);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 488) + 416))(*(_QWORD *)(a1 + 488), 1, 1);
    v11 = *(_QWORD *)(a1 + 488);
    LODWORD(v18) = *(_DWORD *)(a1 + 576);
    updateMassAndInertia(0, v11, (float *)&v18, 1u, 0, 0, v12, v13);
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 544) + 88))(*(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 488), 0);
  }
  return result;
}

void physx::Cct::Controller::~Controller(physx::Cct::Controller *this)
{
  void (***v2)(_QWORD);
  int8x8_t v3;
  const physx::PxBase *v4;
  const physx::PxBase *v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_24ED970E8;
  if (*((_QWORD *)this + 68))
  {
    v2 = (void (***)(_QWORD))*((_QWORD *)this + 61);
    if (v2)
      (**v2)(v2);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 74);
  if (*((_BYTE *)this + 280))
  {
    v4 = (const physx::PxBase *)*((_QWORD *)this + 34);
    if (v4)
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 36), v4, v3);
  }
  *((_QWORD *)this + 34) = 0;
  if (*((_BYTE *)this + 304))
  {
    v5 = (const physx::PxBase *)*((_QWORD *)this + 37);
    if (v5)
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 39), v5, v3);
  }
  *((_QWORD *)this + 37) = 0;
  v6 = *((_DWORD *)this + 41);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 19))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v7 = *((_DWORD *)this + 37);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 17))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 33);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

void physx::Cct::BoxController::~BoxController(physx::Cct::BoxController *this)
{
  physx::Cct::Controller::~Controller((physx::Cct::BoxController *)((char *)this + 8));
}

{
  physx::Cct::Controller::~Controller((physx::Cct::BoxController *)((char *)this + 8));
  if (this)
    (*(void (**)(uint64_t, physx::Cct::BoxController *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::Cct::BoxController::~BoxController(physx::Cct::BoxController *this)
{
  char *v1;

  v1 = (char *)this - 8;
  physx::Cct::Controller::~Controller(this);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

void physx::Cct::BoxController::invalidateCache(pthread_mutex_t **this, int8x8_t a2)
{
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    pthread_mutex_lock(this[75]);
  physx::Cct::SweepTest::voidTestCache((physx::Cct::SweepTest *)(this + 14), a2);
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    pthread_mutex_unlock(this[75]);
}

int64x2_t physx::Cct::SweepTest::voidTestCache(physx::Cct::SweepTest *this, int8x8_t a2)
{
  const physx::PxBase *v3;
  const physx::PxBase *v4;
  int64x2_t result;

  if (*((_BYTE *)this + 176))
  {
    v3 = (const physx::PxBase *)*((_QWORD *)this + 21);
    if (v3)
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 23), v3, a2);
  }
  *((_QWORD *)this + 21) = 0;
  if (*((_BYTE *)this + 200))
  {
    v4 = (const physx::PxBase *)*((_QWORD *)this + 24);
    if (v4)
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 26), v4, a2);
  }
  *((_QWORD *)this + 24) = 0;
  *((int64x2_t *)this + 4) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((_OWORD *)this + 5) = xmmword_2261326C0;
  result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *((int64x2_t *)this + 6) = result;
  *((_DWORD *)this + 54) = -1;
  return result;
}

uint64_t physx::Cct::BoxController::getWorldBox(uint64_t a1, uint64_t a2)
{
  float v2;
  float32x2_t v3;
  uint64_t v4;
  float64x2_t v5;
  double v6;
  uint64_t v7;

  v2 = *(float *)(a1 + 624);
  v3 = *(float32x2_t *)(a1 + 616);
  v4 = *(_QWORD *)(a1 + 520);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 504);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = vcvtq_f64_f32(v3);
  *(float64x2_t *)a2 = vsubq_f64(*(float64x2_t *)a2, v5);
  v6 = v2;
  *(double *)(a2 + 16) = *(double *)(a2 + 16) - v6;
  v7 = *(_QWORD *)(a1 + 520);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 504);
  *(_QWORD *)(a2 + 40) = v7;
  *(float64x2_t *)(a2 + 24) = vaddq_f64(*(float64x2_t *)(a2 + 24), v5);
  *(double *)(a2 + 40) = *(double *)(a2 + 40) + v6;
  return 1;
}

uint64_t `non-virtual thunk to'physx::Cct::BoxController::getWorldBox(uint64_t a1, uint64_t a2)
{
  physx::Cct::BoxController::getWorldBox(a1 - 8, a2);
  return 1;
}

float physx::Cct::BoxController::getHalfHeight(physx::Cct::BoxController *this)
{
  return *((float *)this + 154);
}

float physx::Cct::BoxController::getHalfSideExtent(physx::Cct::BoxController *this)
{
  return *((float *)this + 155);
}

float physx::Cct::BoxController::getHalfForwardExtent(physx::Cct::BoxController *this)
{
  return *((float *)this + 156);
}

uint64_t physx::Cct::BoxController::updateKinematicProxy(float32x2_t *this)
{
  uint64_t result;
  uint64_t v3;
  float v4;
  float v5;
  __int128 v6;

  result = (uint64_t)this[62];
  if (result)
  {
    *(_QWORD *)&v6 = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)result + 192))(result, &v6, 1, 0);
    v3 = v6;
    v6 = 3uLL;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 88))(v3, &v6);
    v4 = this[73].f32[1];
    v5 = this[78].f32[0] * v4;
    *(float32x2_t *)((char *)&v6 + 4) = vmul_n_f32(this[77], v4);
    *((float *)&v6 + 3) = v5;
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 72))(v3, &v6);
  }
  return result;
}

BOOL physx::Cct::BoxController::setHalfHeight(float32x2_t *this, float32_t a2)
{
  if (a2 > 0.0)
  {
    this[77].f32[0] = a2;
    physx::Cct::BoxController::updateKinematicProxy(this);
  }
  return a2 > 0.0;
}

BOOL physx::Cct::BoxController::setHalfSideExtent(float32x2_t *this, float32_t a2)
{
  if (a2 > 0.0)
  {
    this[77].f32[1] = a2;
    physx::Cct::BoxController::updateKinematicProxy(this);
  }
  return a2 > 0.0;
}

BOOL physx::Cct::BoxController::setHalfForwardExtent(float32x2_t *this, float32_t a2)
{
  if (a2 > 0.0)
  {
    this[78].f32[0] = a2;
    physx::Cct::BoxController::updateKinematicProxy(this);
  }
  return a2 > 0.0;
}

double physx::Cct::BoxController::getFootPosition(physx::Cct::BoxController *this)
{
  return *((double *)this + 63)
       - (float)(*((float *)this + 10) * (float)(*((float *)this + 154) + *((float *)this + 14)));
}

uint64_t physx::Cct::BoxController::setFootPosition(float32x2_t *a1, float64x2_t *a2)
{
  float v2;
  float v3;
  float64x2_t v5;
  double v6;

  v5 = *a2;
  v6 = a2[1].f64[0];
  v2 = a1[77].f32[0] + a1[7].f32[0];
  v3 = v2 * a1[6].f32[0];
  v5 = vaddq_f64(v5, vcvtq_f64_f32(vmul_n_f32(a1[5], v2)));
  v6 = v6 + v3;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(_QWORD *)a1 + 24))(a1, &v5);
}

__n128 physx::Cct::BoxController::getOBB(uint64_t a1, uint64_t a2)
{
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  float v12;
  __n128 result;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;

  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)a1 + 272))(a1, &v14);
  v4 = (v15 + v17) * 0.5;
  v5 = v14;
  v6 = v16;
  __asm { FMOV            V5.2D, #0.5 }
  v12 = v17 - v15;
  *(float64x2_t *)a2 = vmulq_f64(vaddq_f64(v14, v16), _Q5);
  *(double *)(a2 + 16) = v4;
  *(float32x2_t *)(a2 + 24) = vmul_f32(vcvt_f32_f64(vsubq_f64(v6, v5)), (float32x2_t)0x3F0000003F000000);
  *(float *)(a2 + 32) = v12 * 0.5;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 36) = result;
  return result;
}

uint64_t physx::Cct::BoxController::resize(float32x2_t *this, float a2)
{
  float v4;
  float64x2_t *v5;
  double v6;
  float v7;
  float64x2_t v9;
  double v10;

  v4 = (*(float (**)(float32x2_t *))(*(_QWORD *)this + 216))(this);
  (*(void (**)(float32x2_t *, float))(*(_QWORD *)this + 240))(this, a2);
  v5 = (float64x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 32))(this);
  v6 = v5[1].f64[0];
  v9 = *v5;
  v10 = v6;
  v7 = (float)(a2 - v4) * this[6].f32[0];
  v9 = vaddq_f64(v9, vcvtq_f64_f32(vmul_n_f32(this[5], a2 - v4)));
  v10 = v6 + v7;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(_QWORD *)this + 24))(this, &v9);
}

void physx::Cct::CapsuleController::~CapsuleController(physx::Cct::CapsuleController *this)
{
  physx::Cct::Controller::~Controller((physx::Cct::CapsuleController *)((char *)this + 8));
}

{
  physx::Cct::Controller::~Controller((physx::Cct::CapsuleController *)((char *)this + 8));
  if (this)
    (*(void (**)(uint64_t, physx::Cct::CapsuleController *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::Cct::CapsuleController::~CapsuleController(physx::Cct::CapsuleController *this)
{
  char *v1;

  v1 = (char *)this - 8;
  physx::Cct::Controller::~Controller(this);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

void physx::Cct::CapsuleController::invalidateCache(pthread_mutex_t **this, int8x8_t a2)
{
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    pthread_mutex_lock(this[75]);
  physx::Cct::SweepTest::voidTestCache((physx::Cct::SweepTest *)(this + 14), a2);
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    pthread_mutex_unlock(this[75]);
}

uint64_t physx::Cct::CapsuleController::getWorldBox(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;

  v2 = *(float *)(a1 + 616);
  v3 = v2 + (float)(*(float *)(a1 + 620) * 0.5);
  v4 = *(_QWORD *)(a1 + 520);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 504);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = v2;
  v6 = v3;
  v7 = *(double *)(a2 + 8) - v6;
  *(double *)a2 = *(double *)a2 - v5;
  *(double *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = *(double *)(a2 + 16) - v5;
  v8 = *(_QWORD *)(a1 + 520);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 504);
  v9 = *(double *)(a2 + 24);
  v10 = *(double *)(a2 + 32);
  *(_QWORD *)(a2 + 40) = v8;
  *(double *)(a2 + 24) = v9 + v5;
  *(double *)(a2 + 32) = v10 + v6;
  *(double *)(a2 + 40) = *(double *)(a2 + 40) + v5;
  return 1;
}

uint64_t `non-virtual thunk to'physx::Cct::CapsuleController::getWorldBox(uint64_t a1, uint64_t a2)
{
  physx::Cct::CapsuleController::getWorldBox(a1 - 8, a2);
  return 1;
}

uint64_t physx::Cct::CapsuleController::setRadius(physx::Cct::CapsuleController *this, float a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  int v8;

  *((float *)this + 154) = a2;
  v3 = *((_QWORD *)this + 62);
  if (v3)
  {
    v7 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v3 + 192))(v3, &v7, 1, 0);
    v5 = v7;
    v8 = 0;
    v7 = 2;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 104))(v5, &v7);
    *((float *)&v7 + 1) = *((float *)this + 147) * a2;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 72))(v5, &v7);
  }
  return 1;
}

uint64_t physx::Cct::CapsuleController::setHeight(physx::Cct::CapsuleController *this, float a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  float v8;

  *((float *)this + 155) = a2;
  v3 = *((_QWORD *)this + 62);
  if (v3)
  {
    v7 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v3 + 192))(v3, &v7, 1, 0);
    v5 = v7;
    v8 = 0.0;
    v7 = 2;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 104))(v5, &v7);
    v8 = (float)(a2 * 0.5) * *((float *)this + 147);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 72))(v5, &v7);
  }
  return 1;
}

uint64_t physx::Cct::CapsuleController::getClimbingMode(physx::Cct::CapsuleController *this)
{
  return *((unsigned int *)this + 156);
}

BOOL physx::Cct::CapsuleController::setClimbingMode(uint64_t a1, int a2)
{
  if (a2 <= 1)
    *(_DWORD *)(a1 + 624) = a2;
  return a2 < 2;
}

double physx::Cct::CapsuleController::getFootPosition(physx::Cct::CapsuleController *this)
{
  return *((double *)this + 63)
       - (float)(*((float *)this + 10)
               * (float)((float)(*((float *)this + 14) + *((float *)this + 154)) + (float)(*((float *)this + 155) * 0.5)));
}

uint64_t physx::Cct::CapsuleController::setFootPosition(float32x2_t *a1, float64x2_t *a2)
{
  float v2;
  float v3;
  float64x2_t v5;
  double v6;

  v5 = *a2;
  v6 = a2[1].f64[0];
  v2 = (float)(a1[7].f32[0] + a1[77].f32[0]) + (float)(a1[77].f32[1] * 0.5);
  v3 = v2 * a1[6].f32[0];
  v5 = vaddq_f64(v5, vcvtq_f64_f32(vmul_n_f32(a1[5], v2)));
  v6 = v6 + v3;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(_QWORD *)a1 + 24))(a1, &v5);
}

float physx::Cct::CapsuleController::getCapsule(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  float v5;
  double v6;
  double v7;
  double v8;
  float result;

  v2 = *(double *)(a1 + 504);
  v3 = *(double *)(a1 + 512);
  v4 = *(double *)(a1 + 520);
  v5 = *(float *)(a1 + 620);
  v6 = (float)((float)(v5 * *(float *)(a1 + 40)) * 0.5);
  v7 = (float)((float)(v5 * *(float *)(a1 + 44)) * 0.5);
  v8 = (float)((float)(v5 * *(float *)(a1 + 48)) * 0.5);
  *(double *)a2 = v2 - v6;
  *(double *)(a2 + 8) = v3 - v7;
  *(double *)(a2 + 16) = v4 - v8;
  *(double *)(a2 + 24) = v2 + v6;
  *(double *)(a2 + 32) = v3 + v7;
  *(double *)(a2 + 40) = v4 + v8;
  result = *(float *)(a1 + 616);
  *(float *)(a2 + 48) = result;
  return result;
}

uint64_t physx::Cct::CapsuleController::resize(float32x2_t *this, float a2)
{
  float v4;
  float64x2_t *v5;
  double v6;
  float v7;
  float64x2_t v9;
  double v10;

  v4 = (*(float (**)(float32x2_t *))(*(_QWORD *)this + 232))(this);
  (*(void (**)(float32x2_t *, float))(*(_QWORD *)this + 240))(this, a2);
  v5 = (float64x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 32))(this);
  v6 = v5[1].f64[0];
  v9 = *v5;
  v10 = v6;
  v7 = (float)((float)(a2 - v4) * this[6].f32[0]) * 0.5;
  v9 = vaddq_f64(v9, vcvtq_f64_f32(vmul_f32(vmul_n_f32(this[5], a2 - v4), (float32x2_t)0x3F0000003F000000)));
  v10 = v6 + v7;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(_QWORD *)this + 24))(this, &v9);
}

uint64_t physx::Cct::SweepTest::updateCachedShapesRegistration(uint64_t this, unsigned int a2, int a3, int8x8_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  physx::Cct::CharacterControllerManager *v11;
  const physx::PxBase *v12;

  if (*(_BYTE *)(this + 368))
  {
    v4 = this;
    v5 = *(unsigned int *)(this + 56);
    if ((_DWORD)v5 && (_DWORD)v5 != a2)
    {
      v8 = *(_QWORD *)(this + 48);
      v9 = (unsigned int *)(v8 + 4 * v5);
      v10 = (unsigned int *)(v8 + 4 * a2);
      do
      {
        if (!*(_QWORD *)(v10 + 3))
          break;
        v11 = *(physx::Cct::CharacterControllerManager **)(v4 + 376);
        v12 = *(const physx::PxBase **)(v10 + 1);
        this = a3
             ? physx::Cct::CharacterControllerManager::unregisterObservedObject(v11, v12, a4)
             : physx::Cct::CharacterControllerManager::registerObservedObject(v11, v12, a4);
        v10 = (unsigned int *)((char *)v10 + GeomSizes[*v10]);
      }
      while (v10 != v9);
    }
  }
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::unregisterObservedObject(physx::Cct::CharacterControllerManager *this, const physx::PxBase *a2, int8x8_t a3)
{
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const physx::PxBase *v27;
  char v28;

  v27 = a2;
  if (*((_BYTE *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    pthread_mutex_lock(*((pthread_mutex_t **)this + 33));
  v28 = 0;
  result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)this + 26, &v27, &v28, a3);
  if (v28)
  {
    v6 = *(_DWORD *)(result + 8) - 1;
    *(_DWORD *)(result + 8) = v6;
    if (!v6)
    {
      if (*((_DWORD *)this + 65))
      {
        v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = *((_QWORD *)this + 29);
        v11 = (_DWORD *)(v10 + 4 * ((*((_DWORD *)this + 61) - 1) & ((v9 >> 31) ^ v9)));
        v12 = *v11;
        if ((_DWORD)v12 != -1)
        {
          v14 = *((_QWORD *)this + 27);
          v13 = *((_QWORD *)this + 28);
          if (*(const physx::PxBase **)(v14 + 16 * v12) == a2)
          {
LABEL_13:
            *v11 = *(_DWORD *)(v13 + 4 * v12);
            v16 = *((_DWORD *)this + 65) - 1;
            *((_DWORD *)this + 65) = v16;
            ++*((_DWORD *)this + 64);
            if ((_DWORD)v12 != v16)
            {
              v17 = v14 + 16 * v12;
              v18 = (uint64_t *)(v14 + 16 * v16);
              v19 = *v18;
              *(_QWORD *)v17 = *v18;
              *(_DWORD *)(v17 + 8) = *((_DWORD *)v18 + 2);
              *(_DWORD *)(v13 + 4 * v12) = *(_DWORD *)(v13 + 4 * *((unsigned int *)this + 65));
              v20 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
              v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
              v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
              v23 = (_DWORD *)(v10
                             + 4 * ((*((_DWORD *)this + 61) - 1) & ((v22 >> 31) ^ v22)));
              v24 = *((unsigned int *)this + 65);
              v25 = *v23;
              if (v25 != v24)
              {
                do
                {
                  v26 = v25;
                  v25 = *(unsigned int *)(v13 + 4 * v25);
                }
                while (v25 != v24);
                v23 = (_DWORD *)(v13 + 4 * v26);
              }
              *v23 = v12;
            }
            --*((_DWORD *)this + 63);
          }
          else
          {
            while (1)
            {
              v15 = v12;
              v12 = *(unsigned int *)(v13 + 4 * v12);
              if ((_DWORD)v12 == -1)
                break;
              if (*(const physx::PxBase **)(v14 + 16 * v12) == a2)
              {
                v11 = (_DWORD *)(v13 + 4 * v15);
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(_QWORD *)result = a2;
    *(_DWORD *)(result + 8) = -1;
  }
  if (*((_BYTE *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    return pthread_mutex_unlock(*((pthread_mutex_t **)this + 33));
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::registerObservedObject(physx::Cct::CharacterControllerManager *this, const physx::PxBase *a2, int8x8_t a3)
{
  uint64_t result;
  int v6;
  const physx::PxBase *v7;
  char v8;

  v7 = a2;
  if (*((_BYTE *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    pthread_mutex_lock(*((pthread_mutex_t **)this + 33));
  v8 = 0;
  result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)this + 26, &v7, &v8, a3);
  if (v8)
  {
    v6 = *(_DWORD *)(result + 8) + 1;
  }
  else
  {
    *(_QWORD *)result = a2;
    v6 = 1;
  }
  *(_DWORD *)(result + 8) = v6;
  if (*((_BYTE *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    return pthread_mutex_unlock(*((pthread_mutex_t **)this + 33));
  return result;
}

float physx::Cct::SweepTest::onObstacleAdded(uint64_t a1, int a2, uint64_t a3, float *a4, float32x2_t *a5, float result)
{
  uint64_t v8;
  float v9;
  float v10;
  double v11[3];
  uint64_t v12;
  float v13;
  _QWORD v14[2];
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  v22 = a2;
  if (*(_DWORD *)(a1 + 216) != -1)
  {
    v14[0] = 0;
    v14[1] = 0;
    v15 = -1;
    v16 = 0;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v20 = 2139095039;
    v21 = 0;
    v8 = physx::Cct::ObstacleContext::raycastSingle(a3, (uint64_t)v14, &v22, a4, a5, result);
    if (v8)
    {
      v9 = *((float *)&v17 + 1);
      result = *(float *)&v17;
      v10 = *(float *)&v18;
      if ((float)((float)((float)(*((float *)&v17 + 1) * a5->f32[1]) + (float)(*(float *)&v17 * a5->f32[0]))
                 + (float)(*(float *)&v18 * a5[1].f32[0])) < (float)((float)((float)(a5->f32[1] * *(float *)(a1 + 272))
                                                                           + (float)(*(float *)(a1 + 268) * a5->f32[0]))
                                                                   + (float)(*(float *)(a1 + 276) * a5[1].f32[0])))
      {
        *(_DWORD *)(a1 + 216) = v22;
        *(float *)(a1 + 268) = result;
        *(float *)(a1 + 272) = v9;
        *(float *)(a1 + 276) = v10;
        v11[0] = result;
        v11[1] = v9;
        v11[2] = v10;
        worldToLocal((float *)&v12, v8, v11);
        *(_QWORD *)(a1 + 256) = v12;
        result = v13;
        *(float *)(a1 + 264) = v13;
      }
    }
  }
  return result;
}

float worldToLocal(float *a1, uint64_t a2, double *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float result;

  v3 = *(double *)(a2 + 16);
  v4 = *(double *)(a2 + 24);
  v5 = *(double *)(a2 + 32);
  v6 = *(float *)(a2 + 40);
  v7 = *(float *)(a2 + 44);
  v8 = *(float *)(a2 + 48);
  v9 = *(float *)(a2 + 52);
  v10 = *a3;
  v11 = a3[1];
  v12 = a3[2];
  v13 = (float)(v10 - v3) + (float)(v10 - v3);
  v14 = (float)(v11 - v4) + (float)(v11 - v4);
  v15 = (float)(v12 - v5) + (float)(v12 - v5);
  v16 = (float)(v9 * v9) + -0.5;
  v17 = (float)((float)(v7 * v14) + (float)(v6 * v13)) + (float)(v8 * v15);
  v18 = (float)((float)(v13 * v16) - (float)((float)((float)(v7 * v15) - (float)(v8 * v14)) * v9)) + (float)(v6 * v17);
  v19 = (float)((float)(v14 * v16) - (float)((float)((float)(v8 * v13) - (float)(v6 * v15)) * v9)) + (float)(v7 * v17);
  result = (float)((float)(v15 * v16) - (float)((float)((float)(v6 * v14) - (float)(v7 * v13)) * v9))
         + (float)(v8 * v17);
  *a1 = v18;
  a1[1] = v19;
  a1[2] = result;
  return result;
}

float physx::Cct::SweepTest::onObstacleUpdated(uint64_t a1, int a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, float result)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  double v11[3];
  uint64_t v12;
  float v13;
  int v14;
  _QWORD v15[2];
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  if (*(_DWORD *)(a1 + 216) == a2)
  {
    v15[0] = 0;
    v15[1] = 0;
    v16 = -1;
    v17 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v21 = 2139095039;
    v22 = 0;
    v14 = -1;
    v7 = physx::Cct::ObstacleContext::raycastSingle(a3, (uint64_t)v15, a4, a5, &v14, result);
    if (*(_DWORD *)(a1 + 216) != v14)
    {
      if (v7)
      {
        *(_DWORD *)(a1 + 216) = v14;
        v9 = *((float *)&v18 + 1);
        v8 = *(float *)&v18;
        *(_DWORD *)(a1 + 268) = v18;
        *(float *)(a1 + 272) = v9;
        v10 = *(float *)&v19;
        *(_DWORD *)(a1 + 276) = v19;
        v11[0] = v8;
        v11[1] = v9;
        v11[2] = v10;
        worldToLocal((float *)&v12, v7, v11);
        *(_QWORD *)(a1 + 256) = v12;
        result = v13;
        *(float *)(a1 + 264) = v13;
      }
    }
  }
  return result;
}

uint64_t physx::Cct::SweepTest::findTouchedObstacles(uint64_t result, unsigned int *a2, double *a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float64x2_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _QWORD *v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  __int128 v59;
  float v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unsigned int *v90;
  uint64_t v91;
  double v92;
  double v93;
  __int128 v94;
  float v95[3];
  __int128 v96;
  __int128 v97;
  float v98;
  float32x2_t v99;
  float v100;
  uint64_t v101;
  int v102;
  _OWORD v103[2];
  int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;

  v4 = result;
  v5 = *a3;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  v9 = a3[4];
  v10 = a3[5];
  v93 = (*a3 + v7) * 0.5;
  v92 = (v6 + v9) * 0.5;
  v11 = (v8 + v10) * 0.5;
  v12 = *a2;
  if ((_DWORD)v12)
  {
    v13 = (_QWORD *)*((_QWORD *)a2 + 2);
    v90 = a2;
    v14 = v10;
    v15 = v9;
    v16 = v7;
    v17 = v8;
    v18 = v6;
    v19 = v5;
    v20 = (float)(v19 + v16) * 0.5;
    v21 = (float)(v18 + v15) * 0.5;
    v22 = (float)(v17 + v14) * 0.5;
    v23 = (float)(v16 - v19) * 0.5;
    v24 = (float)(v15 - v18) * 0.5;
    v25 = (float)(v14 - v17) * 0.5;
    v91 = result + 48;
    v26 = (float *)(*((_QWORD *)a2 + 1) + 48);
    do
    {
      v27 = *(float64x2_t *)(v26 - 12);
      v28 = *((double *)v26 - 4);
      v29 = *(v26 - 3);
      v30 = *(v26 - 2);
      v31 = *(v26 - 1);
      v32 = v30 + v30;
      v33 = v31 + v31;
      v34 = v30 * (float)(v30 + v30);
      v35 = v31 * (float)(v31 + v31);
      v36 = (float)(v29 + v29) * v30;
      v37 = (float)(v29 + v29) * v31;
      v38 = (float)(v29 + v29) * *v26;
      v39 = v32 * v31;
      v40 = v32 * *v26;
      v41 = v33 * *v26;
      v42 = 1.0 - (float)(v29 * (float)(v29 + v29));
      *(float *)&v96 = (float)(1.0 - v34) - v35;
      *((float *)&v96 + 1) = v36 + v41;
      *((float *)&v96 + 2) = v37 - v40;
      *((float *)&v96 + 3) = v36 - v41;
      *(float *)&v97 = v42 - v35;
      *((float *)&v97 + 1) = v39 + v38;
      *((float *)&v97 + 2) = v37 + v40;
      *((float *)&v97 + 3) = v39 - v38;
      v98 = v42 - v34;
      v99 = vcvt_f32_f64(v27);
      v100 = v28;
      v101 = *((_QWORD *)v26 - 3);
      v102 = *((_DWORD *)v26 - 4);
      v108 = v20;
      v109 = v21;
      v110 = v22;
      v105 = v23;
      v106 = v24;
      v107 = v25;
      v103[0] = xmmword_2260E5F10;
      v103[1] = xmmword_2260E5F10;
      v104 = 1065353216;
      result = physx::Gu::intersectOBBOBB((float *)&v101, (float *)&v99, (float *)&v96, &v105, &v108, (uint64_t)v103, 1);
      if ((_DWORD)result)
      {
        v43 = *(_DWORD *)(v4 + 56);
        v44 = *(_DWORD *)(v4 + 60) & 0x7FFFFFFF;
        v45 = v43 + 25;
        if (v43 + 25 > v44)
        {
          v46 = 2 * *(_DWORD *)(v4 + 60);
          if (!v44)
            v46 = 2;
          if (v45 <= v46)
            v47 = v46;
          else
            v47 = v45;
          result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v91, v47);
          v43 = *(_DWORD *)(v4 + 56);
        }
        v48 = *(_QWORD *)(v4 + 48) + 4 * v43;
        *(_DWORD *)(v4 + 56) = v45;
        *(_DWORD *)v48 = 0;
        *(_QWORD *)(v48 + 4) = *v13;
        *(_QWORD *)(v48 + 12) = 0;
        *(double *)(v48 + 20) = v93;
        *(double *)(v48 + 28) = v92;
        *(double *)(v48 + 36) = v11;
        v49 = *((_OWORD *)v26 - 3);
        *(_QWORD *)(v48 + 60) = *((_QWORD *)v26 - 4);
        *(_OWORD *)(v48 + 44) = v49;
        *(_OWORD *)(v48 + 68) = *(_OWORD *)(v26 - 6);
        *(_QWORD *)(v48 + 84) = *((_QWORD *)v26 - 1);
        *(float *)(v48 + 92) = *v26;
      }
      ++v13;
      v26 += 14;
      --v12;
    }
    while (v12);
    v5 = *a3;
    v6 = a3[1];
    v8 = a3[2];
    v7 = a3[3];
    v9 = a3[4];
    v10 = a3[5];
    a2 = v90;
  }
  v50 = a2[6];
  v51 = (__int128 *)*((_QWORD *)a2 + 4);
  v52 = (_QWORD *)*((_QWORD *)a2 + 5);
  v53 = v7 - v5;
  v54 = v9 - v6;
  v55 = v10 - v8;
  *(float *)v103 = v53 * 0.5;
  *((float *)v103 + 1) = v54 * 0.5;
  *((float *)v103 + 2) = v55 * 0.5;
  if ((_DWORD)v50)
  {
    v56 = (v7 + v5) * 0.5;
    v57 = (v9 + v6) * 0.5;
    v58 = (v10 + v8) * 0.5;
    v59 = xmmword_2260E5F10;
    do
    {
      v60 = *((float *)v51 + 12);
      v61 = *(double *)v51;
      v62 = *((double *)v51 + 3);
      if (*(double *)v51 >= v62)
        v63 = *((double *)v51 + 3);
      else
        v63 = *(double *)v51;
      v64 = v60;
      if (v63 - v60 <= a3[3])
      {
        v65 = v61 >= v62 ? *(double *)v51 : *((double *)v51 + 3);
        if (*a3 <= v65 + v64)
        {
          v66 = *((double *)v51 + 1);
          v67 = *((double *)v51 + 4);
          v68 = v66 >= v67 ? *((double *)v51 + 4) : *((double *)v51 + 1);
          if (v68 - v64 <= a3[4])
          {
            v69 = v66 >= v67 ? *((double *)v51 + 1) : *((double *)v51 + 4);
            if (a3[1] <= v69 + v64)
            {
              v70 = *((double *)v51 + 2);
              v71 = *((double *)v51 + 5);
              v72 = v70 >= v71 ? *((double *)v51 + 5) : *((double *)v51 + 2);
              if (v72 - v64 <= a3[5])
              {
                v73 = v70 >= v71 ? *((double *)v51 + 2) : *((double *)v51 + 5);
                if (a3[2] <= v73 + v64)
                {
                  v74 = v61;
                  v75 = v66;
                  v76 = v70;
                  v108 = v74;
                  v109 = v75;
                  v110 = v76;
                  v77 = v62;
                  v78 = v67;
                  v79 = v71;
                  v105 = v77;
                  v106 = v78;
                  v107 = v79;
                  v95[0] = v56;
                  v95[1] = v57;
                  v95[2] = v58;
                  v96 = v59;
                  v97 = v59;
                  v98 = 1.0;
                  v94 = v59;
                  result = (uint64_t)physx::Gu::distanceSegmentBoxSquared(&v108, &v105, v95, (float32x2_t *)v103, (float *)&v96, 0, 0);
                  v59 = v94;
                  if (v80 <= (float)(v60 * v60))
                  {
                    v81 = *(_DWORD *)(v4 + 56);
                    v82 = *(_DWORD *)(v4 + 60) & 0x7FFFFFFF;
                    v83 = v81 + 25;
                    if (v81 + 25 > v82)
                    {
                      v84 = 2 * *(_DWORD *)(v4 + 60);
                      if (!v82)
                        v84 = 2;
                      if (v83 <= v84)
                        v85 = v84;
                      else
                        v85 = v83;
                      result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v4 + 48, v85);
                      v59 = v94;
                      v81 = *(_DWORD *)(v4 + 56);
                    }
                    v86 = *(_QWORD *)(v4 + 48) + 4 * v81;
                    *(_DWORD *)(v4 + 56) = v83;
                    *(_DWORD *)v86 = 1;
                    *(_QWORD *)(v86 + 4) = *v52;
                    *(_QWORD *)(v86 + 12) = 0;
                    *(double *)(v86 + 20) = v93;
                    *(double *)(v86 + 28) = v92;
                    *(double *)(v86 + 36) = v11;
                    v87 = *v51;
                    v88 = v51[1];
                    v89 = v51[2];
                    *(_DWORD *)(v86 + 92) = *((_DWORD *)v51 + 12);
                    *(_OWORD *)(v86 + 76) = v89;
                    *(_OWORD *)(v86 + 60) = v88;
                    *(_OWORD *)(v86 + 44) = v87;
                  }
                }
              }
            }
          }
        }
      }
      ++v52;
      v51 = (__int128 *)((char *)v51 + 56);
      --v50;
    }
    while (v50);
  }
  return result;
}

uint64_t physx::Cct::SweepTest::updateTouchedGeoms(uint64_t a1, uint64_t *a2, unsigned int *a3, float64x2_t *a4, __int128 *a5, float *a6)
{
  char v12;
  uint64_t result;
  double v14;
  int v15;
  int v16;
  int8x8_t v17;
  int v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  float64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  double v54;
  float64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  int v66;
  int8x8_t v67;
  uint64_t v68;
  int v69;
  float32x4_t v70;
  float32x2_t v71;
  char v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;

  v87 = 0;
  v86 = 0;
  v85 = *a5;
  v12 = *((_BYTE *)a5 + 16);
  HIWORD(v86) = (v12 & 4) != 0;
  HIBYTE(v86) = (v12 & 8) != 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 720))(*a2);
  if ((_DWORD)result == *(_DWORD *)(a1 + 352))
  {
    if (*(double *)(a1 + 64) <= a4->f64[0]
      && *(double *)(a1 + 72) <= a4->f64[1]
      && *(double *)(a1 + 80) <= a4[1].f64[0]
      && *(double *)(a1 + 88) >= a4[1].f64[1]
      && *(double *)(a1 + 96) >= a4[2].f64[0])
    {
      v14 = *(double *)(a1 + 104);
      if (v14 >= a4[2].f64[1])
      {
        v15 = *(_DWORD *)(a1 + 364);
        if ((v15 & 0x80) != 0)
        {
          *(_DWORD *)(a1 + 364) = v15 & 0xFFFFFF7F;
          physx::Cct::SweepTest::updateCachedShapesRegistration(a1, *(_DWORD *)(a1 + 128), 1, *(int8x8_t *)&v14);
          v16 = *(_DWORD *)(a1 + 132);
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 128);
          *(_DWORD *)(a1 + 24) = v16;
          *(_DWORD *)(a1 + 40) = v16;
          LOBYTE(v86) = 0;
          if ((a5[1] & 2) != 0)
            BYTE1(v86) = 1;
          physx::Cct::findTouchedGeometry(a2, (double *)(a1 + 64), a1 + 16, a1 + 32, a1 + 48, (__int128 **)&v85, a1 + 280, (_WORD *)(a1 + 360));
          physx::Cct::SweepTest::updateCachedShapesRegistration(a1, *(_DWORD *)(a1 + 128), 0, v17);
          result = physx::Cct::SweepTest::findTouchedObstacles(a1, a3, (double *)(a1 + 64));
          ++*(_WORD *)(a1 + 358);
        }
        v18 = -16711936;
        goto LABEL_36;
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 352) = result;
  }
  v19 = a4[2];
  v20 = *a4;
  *(float64x2_t *)(a1 + 80) = a4[1];
  *(float64x2_t *)(a1 + 96) = v19;
  *(float64x2_t *)(a1 + 64) = v20;
  LODWORD(v19.f64[0]) = *(_DWORD *)(a1 + 344);
  v20.f64[0] = *(float64_t *)(a1 + 80);
  v21 = *(double *)(a1 + 104);
  v22 = (v20.f64[0] + v21) * 0.5;
  *(float *)v20.f64 = v21 - v20.f64[0];
  *(float *)v20.f64 = *(float *)v19.f64 * (float)(*(float *)v20.f64 * 0.5);
  v23 = *(float64x2_t *)(a1 + 64);
  v24 = *(float64x2_t *)(a1 + 88);
  __asm { FMOV            V6.2D, #0.5 }
  v30 = vmulq_f64(vaddq_f64(v23, v24), _Q6);
  v31 = vcvtq_f64_f32(vmul_n_f32(vmul_f32(vcvt_f32_f64(vsubq_f64(v24, v23)), (float32x2_t)0x3F0000003F000000), *(float *)v19.f64));
  v32 = vsubq_f64(v30, v31);
  *(float64x2_t *)(a1 + 64) = v32;
  _Q6.f64[0] = *(float *)v20.f64;
  v33 = v22 - *(float *)v20.f64;
  *(double *)(a1 + 80) = v33;
  v34 = vaddq_f64(v30, v31);
  *(float64x2_t *)(a1 + 88) = v34;
  v35 = v22 + _Q6.f64[0];
  *(float64_t *)(a1 + 104) = v22 + _Q6.f64[0];
  v36 = *a6;
  v37 = a6[1];
  v38 = a6[2];
  if (*a6 != 0.0 || v37 != 0.0 || v38 != 0.0)
  {
    v39 = (float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(v38 * v38);
    v40 = 0.0;
    v41 = 0.0;
    v42 = 0.0;
    if (v39 > 0.0)
    {
      v43 = 1.0 / sqrtf(v39);
      v40 = v36 * v43;
      v41 = v37 * v43;
      v42 = v38 * v43;
    }
    v44 = a4[1].f64[1] - a4->f64[0];
    v45 = a4[2].f64[0] - a4->f64[1];
    v46 = a4[2].f64[1] - a4[1].f64[0];
    v47 = fabsf((float)((float)(v41 * v45) + (float)(v44 * v40)) + (float)(v46 * v42));
    v48 = vsubq_f64(v34, v32).f64[0];
    v49 = v34.f64[1] - v32.f64[1];
    v50 = v35 - v33;
    v51 = (float)(fabsf((float)((float)(v41 * v49) + (float)(v48 * v40)) + (float)(v50 * v42)) - v47) * 0.45;
    v52 = v41 * v51;
    v53 = v42 * v51;
    v54 = (float)(v40 * v51);
    v55 = v32.f64[0] + v54;
    v56 = v52;
    v57 = v32.f64[1] + v56;
    *(double *)(a1 + 64) = v32.f64[0] + v54;
    *(double *)(a1 + 72) = v32.f64[1] + v56;
    v58 = v53;
    v59 = v33 + v58;
    v34.f64[0] = v34.f64[0] + v54;
    *(double *)(a1 + 80) = v33 + v58;
    *(float64_t *)(a1 + 88) = v34.f64[0];
    v60 = v34.f64[1] + v56;
    v35 = v35 + v58;
    *(double *)(a1 + 96) = v34.f64[1] + v56;
    *(double *)(a1 + 104) = v35;
    if (v55 > a4->f64[0])
      *(float64_t *)(a1 + 64) = a4->f64[0];
    v61 = a4->f64[1];
    if (v57 > v61)
      *(double *)(a1 + 72) = v61;
    v62 = a4[1].f64[0];
    if (v59 > v62)
      *(double *)(a1 + 80) = v62;
    v63 = a4[1].f64[1];
    if (v34.f64[0] < v63)
      *(double *)(a1 + 88) = v63;
    v64 = a4[2].f64[0];
    if (v60 < v64)
      *(double *)(a1 + 96) = v64;
    v65 = a4[2].f64[1];
    if (v35 < v65)
      *(double *)(a1 + 104) = v65;
  }
  physx::Cct::SweepTest::updateCachedShapesRegistration(a1, 0, 1, *(int8x8_t *)&v35);
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  ++*(_WORD *)(a1 + 356);
  if ((a5[1] & 1) != 0)
    LOBYTE(v86) = 1;
  BYTE1(v86) = 0;
  physx::Cct::findTouchedGeometry(a2, (double *)(a1 + 64), a1 + 16, a1 + 32, a1 + 48, (__int128 **)&v85, a1 + 280, (_WORD *)(a1 + 360));
  v66 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 132) = v66;
  LOBYTE(v86) = 0;
  if ((a5[1] & 2) != 0)
    BYTE1(v86) = 1;
  physx::Cct::findTouchedGeometry(a2, (double *)(a1 + 64), a1 + 16, a1 + 32, a1 + 48, (__int128 **)&v85, a1 + 280, (_WORD *)(a1 + 360));
  physx::Cct::SweepTest::updateCachedShapesRegistration(a1, 0, 0, v67);
  result = physx::Cct::SweepTest::findTouchedObstacles(a1, a3, (double *)(a1 + 64));
  *(_DWORD *)(a1 + 364) &= ~0x80u;
  v18 = -65536;
LABEL_36:
  v68 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    memset(v73, 0, sizeof(v73));
    v75 = 0;
    v76 = 0;
    v74 = 0x3F80000000000000;
    v77 = 1065353216;
    v79 = 0;
    v78 = 0;
    v80 = 1065353216;
    v81 = 0;
    v82 = 0;
    v83 = 1065353216;
    v84 = v68;
    v69 = *(_DWORD *)(a1 + 8);
    if ((v69 & 1) != 0)
    {
      DWORD1(v73[0]) = -65281;
      v70 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a4), a4[1]);
      v71 = vcvt_f32_f64(a4[2]);
      v72 = 1;
      result = physx::Cm::operator<<(v73, (uint64_t *)&v70);
      v69 = *(_DWORD *)(a1 + 8);
    }
    if ((v69 & 2) != 0)
    {
      DWORD1(v73[0]) = v18;
      v70 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 64)), *(float64x2_t *)(a1 + 80));
      v71 = vcvt_f32_f64(*(float64x2_t *)(a1 + 96));
      v72 = 1;
      return physx::Cm::operator<<(v73, (uint64_t *)&v70);
    }
  }
  return result;
}

void physx::Cct::findTouchedGeometry(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 **a6, uint64_t a7, _WORD *a8)
{
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _BYTE *v30;
  float v31;
  float v32;
  unint64_t v33;
  float v34;
  float v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  int v48;
  float32x2_t v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  float v71;
  float v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  double v80;
  float v81;
  double v82;
  float v83;
  double v84;
  uint64_t v85;
  float64x2_t v86;
  float v87;
  float v88;
  double v89;
  float v90;
  int32x4_t v91;
  uint64_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2_t v95;
  int32x2_t v96;
  float v97;
  int32x2_t v98;
  float v99;
  float v100;
  float v101;
  int32x2_t v102;
  float v103;
  int32x2_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  const float *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float *v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  float v130;
  float v131;
  float32x2_t v132;
  float32x2_t v133;
  char *v134;
  __int128 v135;
  char *v136;
  int v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int32x4_t v142;
  float64x2_t v143;
  double v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  float v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int *v153;
  float32x2_t v154;
  int v155;
  float32x4_t v156;
  int32x4_t v157;
  int v158;
  unsigned int v159;
  double v164;
  double v165;
  uint64_t v166;
  int32x4_t v167;
  float64x2_t v168;
  double v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  float v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int *v178;
  float32x2_t v179;
  float32x4_t v180;
  int32x4_t v181;
  int v182;
  unsigned int v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  __int128 v198;
  char *v199;
  char *v200;
  uint64_t v201;
  float32x2_t v202;
  int v203;
  float32x4_t v204;
  int32x4_t v205;
  unsigned int v206;
  float32x2_t v207;
  int v208;
  float32x4_t v209;
  int32x4_t v210;
  unsigned int v211;
  double v212;
  double v213;
  float v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  float *v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  int v263;
  float v264;
  int32x2_t v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  float v277;
  int32x2_t v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  float32x4_t *v295;
  uint64_t v296;
  float32x4_t v297;
  int32x4_t v298;
  unsigned int v299;
  float32x4_t v300;
  uint64_t v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  float32x4_t *v308;
  uint64_t v309;
  float32x4_t v310;
  int32x4_t v311;
  unsigned int v312;
  float32x4_t v313;
  uint64_t v314;
  float v315;
  double v316;
  float v317;
  float v318;
  float v319;
  float32x2_t v320;
  float v321;
  float v322;
  float v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  float v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x2_t v333;
  float32x2_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float v337;
  __int32 v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x2_t v343;
  float32x2_t v344;
  int32x4_t v345;
  float32x4_t v346;
  int32x4_t v347;
  float32x4_t v348;
  _WORD *v349;
  float v351;
  int v352;
  float32x2_t v353;
  uint64_t v354;
  float64x2_t v355;
  float v356;
  float64x2_t v357;
  float v358;
  uint64_t v359;
  float v360;
  float v361;
  float v362;
  float v363;
  _BYTE v364[12];
  uint64_t (**v365)();
  uint64_t v366;
  uint64_t v367;
  int v368;
  unsigned __int8 v369;
  _BYTE *v370;
  uint64_t v371;
  __int128 v372;
  __int16 v373;
  float32x2_t v374;
  float v375;
  float32x2_t v376;
  float v377;
  float64x2_t v378;
  double v379;
  _BYTE v380[32];
  float v381;
  _BYTE v382[36];
  uint64_t v383;
  _BYTE v384[12];
  float32x2_t v385;
  float v386;
  _BYTE v387[24];
  float v388;
  int InvisibleWalls;
  float32x2_t v390;
  float v391;
  __int128 v392;
  float32x2_t v393;
  uint64_t v394;
  _BYTE v395[2400];
  __int128 v396;
  float v397;
  float v398;
  uint64_t v399;
  float v400;
  float v401;
  __int32 v402;
  float v403;
  float v404;
  float v405;
  __int32 v406;
  __int32 v407;
  float v408;
  int32x4_t v409;
  float v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  float32x4x3_t v414;
  float32x4x3_t v415;

  v413 = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  v14 = *a2;
  v15 = a2[1];
  v17 = a2[2];
  v16 = a2[3];
  v19 = a2[4];
  v18 = a2[5];
  v378.f64[0] = (*a2 + v16) * 0.5;
  v378.f64[1] = (v15 + v19) * 0.5;
  v379 = (v17 + v18) * 0.5;
  v20 = *((unsigned __int8 *)a6 + 16);
  if (*((_BYTE *)a6 + 17))
    v20 |= 2u;
  if (a6[1])
  {
    if (*((_BYTE *)a6 + 18))
      v20 |= 4u;
    if (*((_BYTE *)a6 + 19))
      v20 |= 8u;
  }
  v21 = 0;
  v22 = v14;
  v23 = v15;
  v24 = v17;
  v25 = v16;
  v26 = v19;
  v27 = v18;
  v374 = (float32x2_t)__PAIR64__(LODWORD(v23), LODWORD(v22));
  v375 = v24;
  v376 = (float32x2_t)__PAIR64__(LODWORD(v26), LODWORD(v25));
  v377 = v27;
  v28 = (float)(v24 + v27) * 0.5;
  v29 = v27 - v24;
  do
  {
    v30 = &v395[v21];
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_DWORD *)v30 + 4) = -1;
    v21 += 24;
  }
  while (v21 != 2400);
  v31 = (float)(v26 - v23) * 0.5;
  v32 = (float)(v23 + v26) * 0.5;
  if (*a6)
    v372 = **a6;
  else
    v372 = 0uLL;
  v366 = 0;
  v367 = 0;
  v368 = -1;
  v369 = 0;
  v370 = v395;
  v371 = 100;
  v365 = off_24ED410D8;
  v373 = v20 | 0x20;
  *(_DWORD *)v382 = 3;
  *(float *)&v382[4] = (float)(v25 - v22) * 0.5;
  *(float *)&v382[8] = v31;
  *(float *)&v382[12] = v29 * 0.5;
  v396 = xmmword_2260E5D70;
  v397 = (float)(v22 + v25) * 0.5;
  v398 = v32;
  *(float *)&v399 = v28;
  (*(void (**)(uint64_t, _BYTE *, __int128 *, uint64_t (***)(), __int128 *))(*(_QWORD *)v13 + 712))(v13, v382, &v396, &v365, &v372);
  v359 = HIDWORD(v371) + v369;
  if (HIDWORD(v371) + v369)
  {
    v33 = 0;
    v34 = -0.5;
    v35 = 1.0;
    v349 = a8;
    v327 = a5;
    do
    {
      if (v33 >= HIDWORD(v371))
        v36 = &v366;
      else
        v36 = (uint64_t *)&v370[24 * v33];
      v37 = (uint64_t *)&v370[24 * v33 + 8];
      if (v33 >= HIDWORD(v371))
        v37 = &v367;
      v38 = *v37;
      v39 = *v36;
      if (*v37)
        _ZF = v39 == 0;
      else
        _ZF = 1;
      if (!_ZF)
      {
        v41 = a1[2];
        if (!*(_DWORD *)(v41 + 52)
          || (v42 = (~(v38 << 32) + v38) ^ ((unint64_t)(~(v38 << 32) + v38) >> 22),
              v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8)),
              v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27),
              v45 = *(unsigned int *)(*(_QWORD *)(v41 + 24)
                                    + 4
                                    * ((*(_DWORD *)(v41 + 36) - 1) & ((v44 >> 31) ^ v44))),
              (_DWORD)v45 == -1))
        {
LABEL_28:
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v38 + 312))(&v396, v38);
          if ((v396 & 4) == 0)
          {
            (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v39 + 152))(&v396, v39);
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v38 + 160))(v382, v38);
            v46 = v34 + (float)(*((float *)&v396 + 3) * *((float *)&v396 + 3));
            v47 = (float)((float)((float)(*(float *)&v382[20] + *(float *)&v382[20]) * *((float *)&v396 + 1))
                        + (float)(*(float *)&v396 * (float)(*(float *)&v382[16] + *(float *)&v382[16])))
                + (float)(*((float *)&v396 + 2) * (float)(*(float *)&v382[24] + *(float *)&v382[24]));
            v360 = (float)((float)((float)(*(float *)&v396 * *(float *)&v382[12])
                                 + (float)(*((float *)&v396 + 3) * *(float *)v382))
                         + (float)(*((float *)&v396 + 1) * *(float *)&v382[8]))
                 - (float)(*(float *)&v382[4] * *((float *)&v396 + 2));
            v361 = (float)((float)((float)(*((float *)&v396 + 1) * *(float *)&v382[12])
                                 + (float)(*((float *)&v396 + 3) * *(float *)&v382[4]))
                         + (float)(*((float *)&v396 + 2) * *(float *)v382))
                 - (float)(*(float *)&v382[8] * *(float *)&v396);
            v362 = (float)((float)((float)(*((float *)&v396 + 2) * *(float *)&v382[12])
                                 + (float)(*((float *)&v396 + 3) * *(float *)&v382[8]))
                         + (float)(*(float *)&v396 * *(float *)&v382[4]))
                 - (float)(*(float *)v382 * *((float *)&v396 + 1));
            v363 = (float)((float)((float)(*((float *)&v396 + 3) * *(float *)&v382[12])
                                 - (float)(*(float *)&v396 * *(float *)v382))
                         - (float)(*((float *)&v396 + 1) * *(float *)&v382[4]))
                 - (float)(*((float *)&v396 + 2) * *(float *)&v382[8]);
            *(float *)v364 = v397
                           + (float)((float)((float)(*((float *)&v396 + 3)
                                                   * (float)((float)(*((float *)&v396 + 1)
                                                                   * (float)(*(float *)&v382[24] + *(float *)&v382[24]))
                                                           - (float)(*((float *)&v396 + 2)
                                                                   * (float)(*(float *)&v382[20] + *(float *)&v382[20]))))
                                           + (float)((float)(*(float *)&v382[16] + *(float *)&v382[16]) * v46))
                                   + (float)(*(float *)&v396 * v47));
            *(float *)&v364[4] = v398
                               + (float)((float)((float)(*((float *)&v396 + 3)
                                                       * (float)((float)(*((float *)&v396 + 2)
                                                                       * (float)(*(float *)&v382[16]
                                                                               + *(float *)&v382[16]))
                                                               - (float)(*(float *)&v396
                                                                       * (float)(*(float *)&v382[24]
                                                                               + *(float *)&v382[24]))))
                                               + (float)((float)(*(float *)&v382[20] + *(float *)&v382[20]) * v46))
                                       + (float)(*((float *)&v396 + 1) * v47));
            *(float *)&v364[8] = *(float *)&v399
                               + (float)((float)((float)(*((float *)&v396 + 3)
                                                       * (float)((float)(*(float *)&v396
                                                                       * (float)(*(float *)&v382[20]
                                                                               + *(float *)&v382[20]))
                                                               - (float)(*((float *)&v396 + 1)
                                                                       * (float)(*(float *)&v382[16]
                                                                               + *(float *)&v382[16]))))
                                               + (float)((float)(*(float *)&v382[24] + *(float *)&v382[24]) * v46))
                                       + (float)(*((float *)&v396 + 2) * v47));
            switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 64))(v38))
            {
              case 0u:
                *(_QWORD *)&v396 = 0;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 96))(v38, &v396);
                v48 = DWORD1(v396);
                v49 = *(float32x2_t *)v364;
                v50 = *(float *)&v364[8];
                v51 = *(_DWORD *)(a5 + 8);
                v52 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
                v53 = v51 + 15;
                if (v51 + 15 > v52)
                {
                  v54 = 2 * *(_DWORD *)(a5 + 12);
                  if (!v52)
                    v54 = 2;
                  if (v53 <= v54)
                    v55 = v54;
                  else
                    v55 = v53;
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a5, v55);
                  v51 = *(_DWORD *)(a5 + 8);
                }
                v56 = *(_QWORD *)a5 + 4 * v51;
                *(_DWORD *)(a5 + 8) = v53;
                *(_DWORD *)v56 = 4;
                *(_QWORD *)(v56 + 4) = v38;
                *(_QWORD *)(v56 + 12) = v39;
                *(float64x2_t *)(v56 + 20) = v378;
                *(double *)(v56 + 36) = v379;
                *(float32x2_t *)(v56 + 44) = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(v49), v378));
                v57 = v50 - v379;
                *(float *)(v56 + 52) = v57;
                *(_DWORD *)(v56 + 56) = v48;
                goto LABEL_181;
              case 1u:
                v58 = v34 + (float)(v363 * v363);
                v59 = (float)((float)(v361 * 0.0) + (float)(v360 * 2.0)) + (float)(v362 * 0.0);
                v60 = (float)((float)(v363 * (float)((float)(v362 * -0.0) + (float)(v361 * 0.0))) + (float)(v58 * 2.0))
                    + (float)(v360 * v59);
                v61 = (float)((float)(v363 * (float)((float)(v360 * -0.0) + (float)(v362 * 2.0))) + (float)(v58 * 0.0))
                    + (float)(v361 * v59);
                v62 = (float)((float)(v363 * (float)((float)(v361 * -2.0) + (float)(v360 * 0.0))) + (float)(v58 * 0.0))
                    + (float)(v362 * v59);
                if (fabsf(v61) <= 0.9999)
                {
                  v184 = -v60;
                  v185 = 0.0;
                  v186 = sqrtf((float)((float)(v62 * v62) + 0.0) + (float)(v60 * v60));
                  v64 = v62;
                  v187 = -v60;
                  if (v186 > 0.0)
                  {
                    v188 = v35 / v186;
                    v64 = v62 * v188;
                    v185 = v188 * 0.0;
                    v187 = v188 * v184;
                  }
                  v351 = v185;
                  v337 = v61 * v187;
                  v323 = (float)(v187 * v184) + (float)(v62 * v64);
                  v328 = -(float)(v61 * v64);
                }
                else
                {
                  v63 = sqrtf((float)(v62 * v62) + (float)(v61 * v61));
                  if (v63 <= 0.0)
                  {
                    v328 = -v61;
                    v64 = 1.0;
                    v337 = 0.0;
                    v323 = (float)((float)(v363 * (float)((float)(v361 * -2.0) + (float)(v360 * 0.0)))
                                 + (float)(v58 * 0.0))
                         + (float)(v362 * v59);
                    v351 = 0.0;
                  }
                  else
                  {
                    v64 = 1.0;
                    v65 = 1.0 / v63;
                    v351 = 0.0;
                    v337 = v65 * 0.0;
                    v323 = v62 * v65;
                    v328 = v65 * (float)-v61;
                  }
                  v187 = 0.0;
                }
                v321 = v374.f32[1];
                v322 = v374.f32[0];
                v320 = v376;
                v318 = v375;
                v319 = v377;
                v212 = v378.f64[1];
                v316 = v378.f64[0];
                v213 = v379;
                v317 = *(float *)v364;
                v214 = *(float *)&v364[8];
                v315 = *(float *)&v364[4];
                v215 = *(_DWORD *)(a5 + 8);
                v216 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
                v217 = v215 + 13;
                if (v215 + 13 > v216)
                {
                  v218 = 2 * *(_DWORD *)(a5 + 12);
                  if (!v216)
                    v218 = 2;
                  if (v217 <= v218)
                    v219 = v218;
                  else
                    v219 = v217;
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a5, v219);
                  v215 = *(_DWORD *)(a5 + 8);
                }
                v220 = *(_QWORD *)a5 + 4 * v215;
                *(_DWORD *)(a5 + 8) = v217;
                *(_DWORD *)v220 = 2;
                *(_QWORD *)(v220 + 4) = v38;
                *(_QWORD *)(v220 + 12) = v39;
                *(float64x2_t *)(v220 + 20) = v378;
                *(double *)(v220 + 36) = v379;
                *(_DWORD *)(v220 + 44) = 2;
                v221 = *(_DWORD *)(a3 + 8);
                *(_DWORD *)(v220 + 48) = v221;
                v222 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
                v223 = v221 + 3;
                v224 = v221;
                if (v221 + 3 > v222)
                {
                  if (v222)
                    v225 = 2 * *(_DWORD *)(a3 + 12);
                  else
                    v225 = 2;
                  if (v223 <= v225)
                    v226 = v225;
                  else
                    v226 = v223;
                  physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v226);
                  v224 = *(_DWORD *)(a3 + 8);
                }
                v227 = v221 + 2;
                v228 = *(_QWORD *)a3;
                *(_DWORD *)(a3 + 8) = v227;
                LODWORD(v396) = 0;
                v229 = *(unsigned int *)(a4 + 8);
                if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v229)
                {
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, &v396);
                  v230 = *(_DWORD *)(a4 + 8);
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)a4 + 4 * v229) = 0;
                  v230 = *(_DWORD *)(a4 + 8) + 1;
                  *(_DWORD *)(a4 + 8) = v230;
                }
                LODWORD(v396) = 1;
                if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v230)
                {
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, &v396);
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)a4 + 4 * v230) = 1;
                  ++*(_DWORD *)(a4 + 8);
                }
                v231 = (float *)(v228 + 36 * v224);
                v232 = v213;
                v233 = v212;
                v234 = v316;
                v235 = (float)((float)((float)(v61 * v233) + (float)(v234 * v60)) + (float)(v232 * v62))
                     + (float)(0.0 - (float)((float)((float)(v315 * v61) + (float)(v317 * v60)) + (float)(v214 * v62)));
                v236 = v232 - (float)(v62 * v235);
                v237 = sqrtf((float)((float)((float)(v320.f32[1] - v321) * (float)(v320.f32[1] - v321))+ (float)((float)(v320.f32[0] - v322) * (float)(v320.f32[0] - v322)))+ (float)((float)(v319 - v318) * (float)(v319 - v318)));
                v238 = v237 * v187;
                v239 = v236 + (float)(v237 * v187);
                v240 = v237 * v328;
                v241 = (float)(v237 * v328) + v239;
                v242 = v233 - (float)(v61 * v235);
                v243 = v237 * v351;
                v244 = v242 + (float)(v237 * v351);
                v245 = v237 * v323;
                v246 = (float)(v237 * v323) + v244;
                v247 = v234 - (float)(v60 * v235);
                v248 = v237 * v64;
                v249 = v247 + (float)(v237 * v64);
                v250 = v237 * v337;
                v251 = v250 + v249;
                v252 = v249 - v250;
                v253 = v236 - v238;
                v254 = v253 - v240;
                v255 = v242 - v243;
                v256 = v247 - v248;
                v257 = v256 - v250;
                v258 = (float)(v250 + v256) - v234;
                v259 = (float)(v245 + v255) - v233;
                v260 = (float)(v240 + v253) - v232;
                *v231 = v258;
                v231[1] = v259;
                v231[2] = v260;
                v231[3] = v257 - v234;
                v231[4] = (float)(v255 - v245) - v233;
                v231[5] = v254 - v232;
                v261 = (float)(v244 - v245) - v233;
                v231[6] = v252 - v234;
                v231[7] = v261;
                v262 = (float)(v239 - v240) - v232;
                v231[8] = v262;
                v231[9] = v258;
                v231[10] = v259;
                v231[11] = v260;
                v231[12] = v252 - v234;
                v231[13] = v261;
                v231[14] = v262;
                v231[15] = v251 - v234;
                v231[16] = v246 - v233;
                v231[17] = v241 - v232;
                goto LABEL_144;
              case 2u:
                LODWORD(v396) = 2;
                *(_QWORD *)((char *)&v396 + 4) = 0;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 104))(v38, &v396);
                v67 = v362;
                v66 = v363;
                v69 = v360;
                v68 = v361;
                v70 = *(_QWORD *)v364;
                v71 = *(float *)&v364[8];
                v72 = *((float *)&v396 + 2);
                v73 = DWORD1(v396);
                v74 = *(_DWORD *)(a5 + 8);
                v75 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
                v76 = v74 + 18;
                if (v74 + 18 > v75)
                {
                  v77 = 2 * *(_DWORD *)(a5 + 12);
                  if (!v75)
                    v77 = 2;
                  if (v76 <= v77)
                    v78 = v77;
                  else
                    v78 = v76;
                  v352 = DWORD1(v396);
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a5, v78);
                  v73 = v352;
                  v74 = *(_DWORD *)(a5 + 8);
                }
                v79 = v72 * (float)((float)((float)(v69 + v69) * v67) - (float)(v68 * (float)(v66 + v66)));
                v80 = (float)(v71 - v79);
                v81 = v72 * (float)((float)((float)(v69 + v69) * v68) + (float)(v67 * (float)(v66 + v66)));
                v82 = (float)(*((float *)&v70 + 1) - v81);
                v83 = v72
                    * (float)((float)((float)(v66 * (float)(v66 + v66)) + -1.0) + (float)(v69 * (float)(v69 + v69)));
                v84 = (float)(*(float *)&v70 - v83);
                v85 = *(_QWORD *)a5 + 4 * v74;
                *(_DWORD *)(a5 + 8) = v76;
                *(_DWORD *)v85 = 5;
                *(_QWORD *)(v85 + 4) = v38;
                *(_QWORD *)(v85 + 12) = v39;
                *(float64x2_t *)(v85 + 20) = v378;
                *(double *)(v85 + 36) = v379;
                *(_DWORD *)(v85 + 68) = v73;
                v86 = v378;
                v87 = (float)(*(float *)&v70 + v83) - v378.f64[0];
                v88 = (float)(*((float *)&v70 + 1) + v81) - v378.f64[1];
                *(float *)(v85 + 44) = v87;
                *(float *)(v85 + 48) = v88;
                v89 = v379;
                v90 = (float)(v79 + v71) - v379;
                *(float *)&v84 = v84 - v86.f64[0];
                *(float *)(v85 + 52) = v90;
                *(_DWORD *)(v85 + 56) = LODWORD(v84);
                *(float *)&v84 = v82 - v86.f64[1];
                *(float *)&v89 = v80 - v89;
                *(_DWORD *)(v85 + 60) = LODWORD(v84);
                *(_DWORD *)(v85 + 64) = LODWORD(v89);
LABEL_144:
                v34 = -0.5;
                v35 = 1.0;
                goto LABEL_181;
              case 3u:
                v392 = 3uLL;
                v91 = (int32x4_t)((__n128 (*)(uint64_t, __int128 *))*(_QWORD *)(*(_QWORD *)v38 + 88))(v38, &v392);
                v92 = 0;
                v91.i64[0] = *((_QWORD *)&v392 + 1);
                v406 = HIDWORD(v392);
                v410 = -*((float *)&v392 + 1);
                *(float *)&v396 = -*((float *)&v392 + 1);
                *((float *)&v396 + 1) = -*((float *)&v392 + 2);
                HIDWORD(v396) = DWORD1(v392);
                *((float *)&v396 + 2) = -*((float *)&v392 + 3);
                v397 = -*((float *)&v392 + 2);
                v398 = -*((float *)&v392 + 3);
                v399 = *(_QWORD *)((char *)&v392 + 4);
                v401 = -*((float *)&v392 + 1);
                v400 = -*((float *)&v392 + 3);
                v402 = DWORD2(v392);
                v403 = -*((float *)&v392 + 3);
                v404 = -*((float *)&v392 + 1);
                v405 = -*((float *)&v392 + 2);
                v407 = DWORD1(v392);
                v408 = -*((float *)&v392 + 2);
                v93 = vuzp2q_s32(v91, vzip1q_s32(v91, v91));
                v94 = v93;
                v94.i32[1] = DWORD1(v392);
                v94.i32[3] = v93.i32[0];
                v409 = v94;
                v411 = *((_QWORD *)&v392 + 1);
                v95 = vcvt_f32_f64(v378);
                *(float *)v96.i32 = v379;
                *(float *)v98.i32 = v360;
                v97 = v361;
                v99 = -v361;
                v100 = -v360;
                *(float *)v102.i32 = v362;
                v101 = v363;
                v103 = -v362;
                *(float *)v104.i32 = v34 + (float)(v101 * v101);
                v105 = (float32x4_t)vdupq_lane_s32((int32x2_t)__PAIR64__(HIDWORD(v379), LODWORD(v361)), 0);
                v106 = (float32x4_t)vdupq_lane_s32(v98, 0);
                v107 = (float32x4_t)vdupq_lane_s32(v102, 0);
                v108 = (float32x4_t)vdupq_lane_s32(v104, 0);
                v109 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v364, 0);
                v110 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v364[4], 0);
                v111 = (const float *)&v364[8];
                v112 = vld1q_dup_f32(v111);
                v113 = (float32x4_t)vdupq_lane_s32((int32x2_t)v95, 0);
                v114 = (float32x4_t)vdupq_lane_s32((int32x2_t)v95, 1);
                v115 = (float32x4_t)vdupq_lane_s32(v96, 0);
                do
                {
                  v116 = (float *)((char *)&v396 + v92);
                  v414 = vld3q_f32(v116);
                  v117 = vaddq_f32(v414.val[0], v414.val[0]);
                  v118 = vaddq_f32(v414.val[1], v414.val[1]);
                  v414.val[0] = vaddq_f32(v414.val[2], v414.val[2]);
                  v414.val[1] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v118, v97), v117, v106), v414.val[0], v107);
                  v414.val[2] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(vmlaq_f32(vmulq_n_f32(v118, v103), v414.val[0], v105), v101), v108, v117), v414.val[1], v106);
                  v119 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(vmlaq_f32(vmulq_n_f32(v414.val[0], v100), v117, v107), v101), v108, v118), v414.val[1], v105);
                  v120 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(vmlaq_f32(vmulq_n_f32(v117, v99), v118, v106), v101), v108, v414.val[0]), v414.val[1], v107);
                  v414.val[0] = vaddq_f32(v109, v414.val[2]);
                  v414.val[2] = vaddq_f32(v112, v120);
                  v415.val[0] = vsubq_f32(v414.val[0], v113);
                  v415.val[1] = vsubq_f32(vaddq_f32(v110, v119), v114);
                  v415.val[2] = vsubq_f32(v414.val[2], v115);
                  vst3q_f32(v116, v415);
                  v92 += 48;
                }
                while (v92 != 96);
                v121 = *(_DWORD *)(a5 + 8);
                v122 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
                v123 = v121 + 13;
                if (v121 + 13 > v122)
                {
                  v124 = 2 * *(_DWORD *)(a5 + 12);
                  if (!v122)
                    v124 = 2;
                  if (v123 <= v124)
                    v125 = v124;
                  else
                    v125 = v123;
                  v353 = v95;
                  v338 = v96.i32[0];
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a5, v125);
                  v96.i32[0] = v338;
                  v95 = v353;
                  v121 = *(_DWORD *)(a5 + 8);
                }
                v126 = *(_QWORD *)a5 + 4 * v121;
                *(_DWORD *)(a5 + 8) = v123;
                *(_DWORD *)v126 = 2;
                *(_QWORD *)(v126 + 4) = v38;
                *(_QWORD *)(v126 + 12) = v39;
                *(float64x2_t *)(v126 + 20) = v378;
                *(double *)(v126 + 36) = v379;
                v127 = *(_DWORD *)(a3 + 8);
                *(_DWORD *)(v126 + 48) = v127;
                if (*(_BYTE *)(a7 + 56))
                {
                  v354 = v126;
                  v128 = 0;
                  v129 = 0;
                  v130 = (float)(v377 - v375) * 0.5;
                  v131 = (float)((float)(v377 + v375) * 0.5) - *(float *)v96.i32;
                  v132 = vmul_f32(vsub_f32(v376, v374), (float32x2_t)0x3F0000003F000000);
                  v133 = vsub_f32(vmul_f32(vadd_f32(v376, v374), (float32x2_t)0x3F0000003F000000), v95);
                  *(float32x2_t *)v380 = vsub_f32(v133, v132);
                  *(float32x2_t *)&v380[12] = vadd_f32(v132, v133);
                  *(float *)&v380[8] = v131 - v130;
                  *(float *)&v380[20] = v130 + v131;
                  do
                  {
                    v134 = (char *)&v396 + 12 * *(unsigned int *)((char *)&unk_2261ABB90 + v128);
                    *(_QWORD *)&v135 = *(_QWORD *)(v134 + 4);
                    v136 = (char *)&v396 + 12 * *(unsigned int *)((char *)&unk_2261ABB90 + v128 + 4);
                    *((_QWORD *)&v135 + 1) = *(_QWORD *)v136;
                    v137 = *(_DWORD *)v134;
                    *(_OWORD *)&v382[4] = v135;
                    LODWORD(v135) = *((_DWORD *)v136 + 2);
                    *(_DWORD *)v382 = v137;
                    *(_DWORD *)&v382[20] = v135;
                    v138 = (char *)&v396 + 12 * *(unsigned int *)((char *)&unk_2261ABB90 + v128 + 8);
                    *(_QWORD *)&v382[24] = *(_QWORD *)v138;
                    *(_DWORD *)&v382[32] = *((_DWORD *)v138 + 2);
                    *(_DWORD *)v387 = 0;
                    tessellateTriangle(v387, (uint64_t)v382, -1, a3, a4, (int8x16_t *)v380, v349, *(float *)(a7 + 52));
                    v129 += *(_DWORD *)v387;
                    v128 += 12;
                  }
                  while (v128 != 144);
                  *(_DWORD *)(v354 + 44) = v129;
                  a5 = v327;
                  a8 = v349;
                }
                else
                {
                  *(_DWORD *)(v126 + 44) = 12;
                  v189 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
                  v190 = v127 + 13;
                  v191 = v127;
                  a8 = v349;
                  if (v127 + 13 > v189)
                  {
                    v192 = 2 * *(_DWORD *)(a3 + 12);
                    if (!v189)
                      v192 = 2;
                    if (v190 <= v192)
                      v193 = v192;
                    else
                      v193 = v190;
                    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v193);
                    v191 = *(_DWORD *)(a3 + 8);
                  }
                  v194 = 0;
                  v195 = *(_QWORD *)a3;
                  *(_DWORD *)(a3 + 8) = v127 + 12;
                  v196 = v195 + 36 * v191 + 20;
                  do
                  {
                    v197 = (char *)&v396 + 12 * *(unsigned int *)((char *)&unk_2261ABB90 + v194);
                    *(_DWORD *)(v196 - 20) = *(_DWORD *)v197;
                    *(_QWORD *)&v198 = *(_QWORD *)(v197 + 4);
                    v199 = (char *)&v396 + 12 * *(unsigned int *)((char *)&unk_2261ABB90 + v194 + 4);
                    *((_QWORD *)&v198 + 1) = *(_QWORD *)v199;
                    *(_OWORD *)(v196 - 16) = v198;
                    *(_DWORD *)v196 = *((_DWORD *)v199 + 2);
                    v200 = (char *)&v396 + 12 * *(unsigned int *)((char *)&unk_2261ABB90 + v194 + 8);
                    *(_QWORD *)(v196 + 4) = *(_QWORD *)v200;
                    *(_DWORD *)(v196 + 12) = *((_DWORD *)v200 + 2);
                    *(_DWORD *)v382 = -1;
                    v201 = *(unsigned int *)(a4 + 8);
                    if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v201)
                    {
                      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, v382);
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)a4 + 4 * v201) = -1;
                      ++*(_DWORD *)(a4 + 8);
                    }
                    v194 += 12;
                    v196 += 36;
                  }
                  while (v194 != 144);
                }
                goto LABEL_181;
              case 4u:
                outputConvexToStream(v38, v39, &v360, a5, a3, a4, v378.f64, (uint64_t)&v374, a7, a8);
                goto LABEL_181;
              case 5u:
                *(_OWORD *)&v382[4] = xmmword_2260EDC60;
                *(_DWORD *)&v382[24] = 0;
                *(_DWORD *)v382 = 5;
                *(_DWORD *)&v382[20] = 0;
                *(_QWORD *)&v382[28] = 1065353216;
                v383 = 0;
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v38 + 128))(v38, v382);
                *(_DWORD *)v384 = 3;
                *(float *)&v384[4] = (float)(v376.f32[0] - v374.f32[0]) * 0.5;
                *(float *)&v384[8] = (float)(v376.f32[1] - v374.f32[1]) * 0.5;
                v385.f32[0] = (float)(v377 - v375) * 0.5;
                v392 = xmmword_2260E5D70;
                v393.f32[0] = (float)(v376.f32[0] + v374.f32[0]) * 0.5;
                v393.f32[1] = (float)(v376.f32[1] + v374.f32[1]) * 0.5;
                *(float *)&v394 = (float)(v377 + v375) * 0.5;
                *(_QWORD *)&v396 = (char *)&v396 + 8;
                v412 = 0x10000000000;
                LODWORD(v141) = physx::PxMeshOverlapUtil::findOverlap((uint64_t *)&v396, (int *)v384, (float32x4_t *)&v392, (uint64_t)v382, (uint64_t)&v360);
                v143 = v378;
                v144 = v379;
                v145 = *(_DWORD *)(a5 + 8);
                v146 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
                v147 = v145 + 13;
                if (v145 + 13 > v146)
                {
                  v148 = 2 * *(_DWORD *)(a5 + 12);
                  if (!v146)
                    v148 = 2;
                  if (v147 <= v148)
                    v149 = v148;
                  else
                    v149 = v147;
                  v355 = v378;
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a5, v149);
                  v143 = v355;
                  v145 = *(_DWORD *)(a5 + 8);
                }
                *(float32x2_t *)v142.i8 = vcvt_f32_f64(v143);
                v150 = v144;
                v151 = *(_QWORD *)a5 + 4 * v145;
                *(_DWORD *)(a5 + 8) = v147;
                *(_DWORD *)v151 = 2;
                *(_QWORD *)(v151 + 4) = v38;
                *(_QWORD *)(v151 + 12) = v39;
                *(float64x2_t *)(v151 + 20) = v378;
                *(double *)(v151 + 36) = v379;
                *(_DWORD *)(v151 + 44) = v141;
                v152 = *(_DWORD *)(a3 + 8);
                *(_DWORD *)(v151 + 48) = v152;
                v153 = (unsigned int *)v396;
                v356 = v150;
                if (*(float *)(a7 + 32) == 0.0)
                {
                  if (*(_BYTE *)(a7 + 56))
                  {
                    v325 = v151;
                    v202 = vsub_f32(v393, *(float32x2_t *)v142.i8);
                    *(float32x2_t *)v387 = vsub_f32(v202, *(float32x2_t *)&v384[4]);
                    *(float32x2_t *)&v387[12] = vadd_f32(v202, *(float32x2_t *)&v384[4]);
                    *(float *)&v387[8] = (float)(*(float *)&v394 - v150) - v385.f32[0];
                    *(float *)&v387[20] = (float)(*(float *)&v394 - v150) + v385.f32[0];
                    v203 = 0;
                    if ((_DWORD)v141)
                    {
                      v141 = v141;
                      v204.i64[0] = v142.i64[0];
                      v204.i64[1] = __PAIR64__(v142.u32[0], LODWORD(v150));
                      v341 = v204;
                      v205 = vuzp2q_s32(v142, vzip1q_s32(v142, v142));
                      *(float *)&v205.i32[1] = v144;
                      v331 = (float32x4_t)v205;
                      do
                      {
                        v206 = *v153++;
                        physx::PxMeshQuery::getTriangle((uint64_t)v382, (uint64_t)&v360, v206, (float *)v380, 0, 0, v139, v140);
                        *(float32x4_t *)v380 = vsubq_f32(*(float32x4_t *)v380, v341);
                        *(float32x4_t *)&v380[16] = vsubq_f32(*(float32x4_t *)&v380[16], v331);
                        v381 = v381 - v356;
                        InvisibleWalls = 0;
                        tessellateTriangle(&InvisibleWalls, (uint64_t)v380, v206, a3, a4, (int8x16_t *)v387, v349, *(float *)(a7 + 52));
                        v203 += InvisibleWalls;
                        --v141;
                      }
                      while (v141);
                    }
                    *(_DWORD *)(v325 + 44) = v203;
                    goto LABEL_119;
                  }
                  v289 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
                  v290 = v152 + v141;
                  v291 = v152 + v141 + 1;
                  if (v291 > v289)
                  {
                    v292 = 2 * *(_DWORD *)(a3 + 12);
                    if (!v289)
                      v292 = 2;
                    if (v291 <= v292)
                      v293 = v292;
                    else
                      v293 = v291;
                    v345 = v142;
                    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v293);
                    v142 = v345;
                    v152 = *(_DWORD *)(a3 + 8);
                  }
                  v294 = *(_QWORD *)a3;
                  *(_DWORD *)(a3 + 8) = v290;
                  if ((_DWORD)v141)
                  {
                    v295 = (float32x4_t *)(v294 + 36 * v152);
                    v296 = v141;
                    v297.i64[0] = v142.i64[0];
                    v297.i64[1] = __PAIR64__(v142.u32[0], LODWORD(v356));
                    v346 = v297;
                    v298 = vuzp2q_s32(v142, vzip1q_s32(v142, v142));
                    *(float *)&v298.i32[1] = v356;
                    v335 = (float32x4_t)v298;
                    do
                    {
                      v299 = *v153++;
                      *(_DWORD *)v380 = v299;
                      physx::PxMeshQuery::getTriangle((uint64_t)v382, (uint64_t)&v360, v299, v295->f32, 0, 0, v139, v140);
                      v300 = vsubq_f32(v295[1], v335);
                      *v295 = vsubq_f32(*v295, v346);
                      v295[1] = v300;
                      v295[2].f32[0] = v295[2].f32[0] - v356;
                      v301 = *(unsigned int *)(a4 + 8);
                      if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v301)
                      {
                        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, v380);
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)a4 + 4 * v301) = *(_DWORD *)v380;
                        ++*(_DWORD *)(a4 + 8);
                      }
                      v295 = (float32x4_t *)((char *)v295 + 36);
                      --v296;
                    }
                    while (v296);
                  }
                }
                else
                {
                  v324 = v151;
                  if (*(_BYTE *)(a7 + 56))
                  {
                    v154 = vsub_f32(v393, *(float32x2_t *)v142.i8);
                    *(float32x2_t *)v387 = vsub_f32(v154, *(float32x2_t *)&v384[4]);
                    *(float32x2_t *)&v387[12] = vadd_f32(v154, *(float32x2_t *)&v384[4]);
                    *(float *)&v387[8] = (float)(*(float *)&v394 - v150) - v385.f32[0];
                    *(float *)&v387[20] = (float)(*(float *)&v394 - v150) + v385.f32[0];
                    v155 = 0;
                    if ((_DWORD)v141)
                    {
                      v141 = v141;
                      v156.i64[0] = v142.i64[0];
                      v156.i64[1] = __PAIR64__(v142.u32[0], LODWORD(v150));
                      v339 = v156;
                      v157 = vuzp2q_s32(v142, vzip1q_s32(v142, v142));
                      *(float *)&v157.i32[1] = v144;
                      v329 = (float32x4_t)v157;
                      do
                      {
                        v159 = *v153++;
                        v158 = v159;
                        physx::PxMeshQuery::getTriangle((uint64_t)v382, (uint64_t)&v360, v159, (float *)v380, 0, 0, v139, v140);
                        *(float32x4_t *)v380 = vsubq_f32(*(float32x4_t *)v380, v339);
                        *(float32x4_t *)&v380[16] = vsubq_f32(*(float32x4_t *)&v380[16], v329);
                        v381 = v381 - v356;
                        InvisibleWalls = createInvisibleWalls((float *)a7, (float *)v380, a3, a4);
                        v155 += InvisibleWalls;
                        if (!InvisibleWalls)
                        {
                          tessellateTriangle(&InvisibleWalls, (uint64_t)v380, v158, a3, a4, (int8x16_t *)v387, v349, *(float *)(a7 + 52));
                          v155 += InvisibleWalls;
                        }
                        --v141;
                      }
                      while (v141);
                    }
                    goto LABEL_176;
                  }
                  v263 = 0;
                  if ((_DWORD)v141)
                  {
                    v141 = v141;
                    v264 = *(float *)&v142.i32[1];
                    v265 = vdup_lane_s32(*(int32x2_t *)v142.i8, 0);
                    *(float *)v265.i32 = v150;
                    v333 = (float32x2_t)v265;
                    v343 = *(float32x2_t *)v142.i8;
                    do
                    {
                      v266 = *v153++;
                      *(_DWORD *)v387 = v266;
                      physx::PxMeshQuery::getTriangle((uint64_t)v382, (uint64_t)&v360, v266, (float *)v380, 0, 0, v139, v140);
                      *(float32x2_t *)v380 = vsub_f32(*(float32x2_t *)v380, v343);
                      *(float32x2_t *)&v380[8] = vsub_f32(*(float32x2_t *)&v380[8], v333);
                      *(float32x2_t *)&v380[20] = vsub_f32(*(float32x2_t *)&v380[20], v333);
                      *(float *)&v380[16] = *(float *)&v380[16] - v264;
                      *(float *)&v380[28] = *(float *)&v380[28] - v264;
                      v381 = v381 - v356;
                      v267 = createInvisibleWalls((float *)a7, (float *)v380, a3, a4);
                      v263 += v267;
                      if (!v267)
                      {
                        v268 = *(_DWORD *)(a3 + 8);
                        v269 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
                        v270 = v268 + 2;
                        v271 = v268;
                        if (v268 + 2 > v269)
                        {
                          v272 = 2 * *(_DWORD *)(a3 + 12);
                          if (!v269)
                            v272 = 2;
                          if (v270 <= v272)
                            v273 = v272;
                          else
                            v273 = v270;
                          physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v273);
                          v271 = *(_DWORD *)(a3 + 8);
                        }
                        v274 = *(_QWORD *)a3 + 36 * v271;
                        *(_DWORD *)(a3 + 8) = v268 + 1;
                        *(_QWORD *)v274 = *(_QWORD *)v380;
                        *(_QWORD *)(v274 + 8) = *(_QWORD *)&v380[8];
                        *(_QWORD *)(v274 + 16) = *(_QWORD *)&v380[16];
                        *(_QWORD *)(v274 + 24) = *(_QWORD *)&v380[24];
                        *(float *)(v274 + 32) = v381;
                        v275 = *(unsigned int *)(a4 + 8);
                        if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v275)
                        {
                          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, v387);
                        }
                        else
                        {
                          *(_DWORD *)(*(_QWORD *)a4 + 4 * v275) = *(_DWORD *)v387;
                          ++*(_DWORD *)(a4 + 8);
                        }
                        ++v263;
                      }
                      --v141;
                    }
                    while (v141);
                  }
                  *(_DWORD *)(v324 + 44) = v263;
                }
                break;
              case 6u:
                LODWORD(v392) = 6;
                *((_QWORD *)&v392 + 1) = 0;
                __asm { FMOV            V15.2S, #1.0 }
                v393 = _D15;
                v394 = 1065353216;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 136))(v38, &v392);
                InvisibleWalls = 3;
                v390.f32[0] = (float)(v376.f32[0] - v374.f32[0]) * 0.5;
                v390.f32[1] = (float)(v376.f32[1] - v374.f32[1]) * 0.5;
                v391 = (float)(v377 - v375) * 0.5;
                *(float *)&v164 = (float)(v376.f32[1] + v374.f32[1]) * 0.5;
                *(float *)&v165 = (float)(v377 + v375) * 0.5;
                *(_OWORD *)v387 = xmmword_2260E5D70;
                *(float *)&v387[16] = (float)(v376.f32[0] + v374.f32[0]) * 0.5;
                *(float *)&v387[20] = *(float *)&v164;
                v388 = *(float *)&v165;
                *(_QWORD *)&v396 = (char *)&v396 + 8;
                v412 = 0x10000000000;
                LODWORD(v166) = physx::PxMeshOverlapUtil::findOverlap((uint64_t *)&v396, (uint64_t)&InvisibleWalls, (float *)v387, (uint64_t)&v392, &v360, COERCE_DOUBLE(0x10000000000), v164, v165, 0.0);
                v168 = v378;
                v169 = v379;
                v170 = *(_DWORD *)(a5 + 8);
                v171 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
                v172 = v170 + 13;
                if (v170 + 13 > v171)
                {
                  v173 = 2 * *(_DWORD *)(a5 + 12);
                  if (!v171)
                    v173 = 2;
                  if (v172 <= v173)
                    v174 = v173;
                  else
                    v174 = v172;
                  v357 = v378;
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a5, v174);
                  v168 = v357;
                  v170 = *(_DWORD *)(a5 + 8);
                }
                *(float32x2_t *)v167.i8 = vcvt_f32_f64(v168);
                v175 = v169;
                v176 = *(_QWORD *)a5 + 4 * v170;
                *(_DWORD *)(a5 + 8) = v172;
                *(_DWORD *)v176 = 2;
                *(_QWORD *)(v176 + 4) = v38;
                *(_QWORD *)(v176 + 12) = v39;
                *(float64x2_t *)(v176 + 20) = v378;
                *(double *)(v176 + 36) = v379;
                *(_DWORD *)(v176 + 44) = v166;
                v177 = *(_DWORD *)(a3 + 8);
                *(_DWORD *)(v176 + 48) = v177;
                v178 = (unsigned int *)v396;
                v358 = v175;
                if (*(float *)(a7 + 32) == 0.0)
                {
                  if (*(_BYTE *)(a7 + 56))
                  {
                    v326 = v176;
                    v207 = vsub_f32(*(float32x2_t *)&v387[16], *(float32x2_t *)v167.i8);
                    *(float32x2_t *)v384 = vsub_f32(v207, v390);
                    v385 = vadd_f32(v207, v390);
                    *(float *)&v384[8] = (float)(v388 - v175) - v391;
                    v386 = (float)(v388 - v175) + v391;
                    v208 = 0;
                    if ((_DWORD)v166)
                    {
                      v166 = v166;
                      v209.i64[0] = v167.i64[0];
                      v209.i64[1] = __PAIR64__(v167.u32[0], LODWORD(v175));
                      v342 = v209;
                      v210 = vuzp2q_s32(v167, vzip1q_s32(v167, v167));
                      *(float *)&v210.i32[1] = v169;
                      v332 = (float32x4_t)v210;
                      do
                      {
                        v211 = *v178++;
                        *(_QWORD *)&v380[16] = *((_QWORD *)&v392 + 1);
                        *(_QWORD *)&v380[24] = &v392;
                        *(int32x2_t *)v380 = vrev64_s32((int32x2_t)vdiv_f32(_D15, v393));
                        *(float *)&v380[8] = v35 / *(float *)&v394;
                        physx::Gu::HeightFieldUtil::getTriangle((uint64_t)v380, &v360, (uint64_t)v382, 0, 0, v211, 1, 1);
                        *(float32x4_t *)v382 = vsubq_f32(*(float32x4_t *)v382, v342);
                        *(float32x4_t *)&v382[16] = vsubq_f32(*(float32x4_t *)&v382[16], v332);
                        *(float *)&v382[32] = *(float *)&v382[32] - v358;
                        *(_DWORD *)v380 = 0;
                        tessellateTriangle(v380, (uint64_t)v382, v211, a3, a4, (int8x16_t *)v384, v349, *(float *)(a7 + 52));
                        v208 += *(_DWORD *)v380;
                        --v166;
                      }
                      while (v166);
                    }
                    *(_DWORD *)(v326 + 44) = v208;
LABEL_119:
                    a5 = v327;
                  }
                  else
                  {
                    v302 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
                    v303 = v177 + v166;
                    v304 = v177 + v166 + 1;
                    if (v304 > v302)
                    {
                      v305 = 2 * *(_DWORD *)(a3 + 12);
                      if (!v302)
                        v305 = 2;
                      if (v304 <= v305)
                        v306 = v305;
                      else
                        v306 = v304;
                      v347 = v167;
                      physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v306);
                      v167 = v347;
                      v177 = *(_DWORD *)(a3 + 8);
                    }
                    v307 = *(_QWORD *)a3;
                    *(_DWORD *)(a3 + 8) = v303;
                    if ((_DWORD)v166)
                    {
                      v308 = (float32x4_t *)(v307 + 36 * v177);
                      v309 = v166;
                      v310.i64[0] = v167.i64[0];
                      v310.i64[1] = __PAIR64__(v167.u32[0], LODWORD(v358));
                      v348 = v310;
                      v311 = vuzp2q_s32(v167, vzip1q_s32(v167, v167));
                      *(float *)&v311.i32[1] = v358;
                      v336 = (float32x4_t)v311;
                      do
                      {
                        v312 = *v178++;
                        *(_DWORD *)v380 = v312;
                        *(_QWORD *)&v382[16] = *((_QWORD *)&v392 + 1);
                        *(_QWORD *)&v382[24] = &v392;
                        *(int32x2_t *)v382 = vrev64_s32((int32x2_t)vdiv_f32(_D15, v393));
                        *(float *)&v382[8] = v35 / *(float *)&v394;
                        physx::Gu::HeightFieldUtil::getTriangle((uint64_t)v382, &v360, (uint64_t)v308, 0, 0, v312, 1, 1);
                        v313 = vsubq_f32(v308[1], v336);
                        *v308 = vsubq_f32(*v308, v348);
                        v308[1] = v313;
                        v308[2].f32[0] = v308[2].f32[0] - v358;
                        v314 = *(unsigned int *)(a4 + 8);
                        if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v314)
                        {
                          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, v380);
                        }
                        else
                        {
                          *(_DWORD *)(*(_QWORD *)a4 + 4 * v314) = *(_DWORD *)v380;
                          ++*(_DWORD *)(a4 + 8);
                        }
                        v308 = (float32x4_t *)((char *)v308 + 36);
                        --v309;
                      }
                      while (v309);
                    }
                  }
                }
                else
                {
                  v324 = v176;
                  if (*(_BYTE *)(a7 + 56))
                  {
                    v179 = vsub_f32(*(float32x2_t *)&v387[16], *(float32x2_t *)v167.i8);
                    *(float32x2_t *)v384 = vsub_f32(v179, v390);
                    v385 = vadd_f32(v179, v390);
                    *(float *)&v384[8] = (float)(v388 - v175) - v391;
                    v386 = (float)(v388 - v175) + v391;
                    v155 = 0;
                    if ((_DWORD)v166)
                    {
                      v166 = v166;
                      v180.i64[0] = v167.i64[0];
                      v180.i64[1] = __PAIR64__(v167.u32[0], LODWORD(v175));
                      v340 = v180;
                      v181 = vuzp2q_s32(v167, vzip1q_s32(v167, v167));
                      *(float *)&v181.i32[1] = v169;
                      v330 = (float32x4_t)v181;
                      do
                      {
                        v183 = *v178++;
                        v182 = v183;
                        *(_QWORD *)&v380[16] = *((_QWORD *)&v392 + 1);
                        *(_QWORD *)&v380[24] = &v392;
                        *(int32x2_t *)v380 = vrev64_s32((int32x2_t)vdiv_f32(_D15, v393));
                        *(float *)&v380[8] = v35 / *(float *)&v394;
                        physx::Gu::HeightFieldUtil::getTriangle((uint64_t)v380, &v360, (uint64_t)v382, 0, 0, v183, 1, 1);
                        *(float32x4_t *)v382 = vsubq_f32(*(float32x4_t *)v382, v340);
                        *(float32x4_t *)&v382[16] = vsubq_f32(*(float32x4_t *)&v382[16], v330);
                        *(float *)&v382[32] = *(float *)&v382[32] - v358;
                        *(_DWORD *)v380 = createInvisibleWalls((float *)a7, (float *)v382, a3, a4);
                        v155 += *(_DWORD *)v380;
                        if (!*(_DWORD *)v380)
                        {
                          tessellateTriangle(v380, (uint64_t)v382, v182, a3, a4, (int8x16_t *)v384, v349, *(float *)(a7 + 52));
                          v155 += *(_DWORD *)v380;
                        }
                        --v166;
                      }
                      while (v166);
                    }
                  }
                  else
                  {
                    v155 = 0;
                    if ((_DWORD)v166)
                    {
                      v276 = v166;
                      v277 = *(float *)&v167.i32[1];
                      v278 = vdup_lane_s32(*(int32x2_t *)v167.i8, 0);
                      *(float *)v278.i32 = v175;
                      v334 = (float32x2_t)v278;
                      v344 = *(float32x2_t *)v167.i8;
                      do
                      {
                        v279 = *v178++;
                        *(_DWORD *)v384 = v279;
                        *(_QWORD *)&v380[16] = *((_QWORD *)&v392 + 1);
                        *(_QWORD *)&v380[24] = &v392;
                        *(int32x2_t *)v380 = vrev64_s32((int32x2_t)vdiv_f32(_D15, v393));
                        *(float *)&v380[8] = v35 / *(float *)&v394;
                        physx::Gu::HeightFieldUtil::getTriangle((uint64_t)v380, &v360, (uint64_t)v382, 0, 0, v279, 1, 1);
                        *(float32x2_t *)v382 = vsub_f32(*(float32x2_t *)v382, v344);
                        *(float32x2_t *)&v382[8] = vsub_f32(*(float32x2_t *)&v382[8], v334);
                        *(float32x2_t *)&v382[20] = vsub_f32(*(float32x2_t *)&v382[20], v334);
                        *(float *)&v382[16] = *(float *)&v382[16] - v277;
                        *(float *)&v382[28] = *(float *)&v382[28] - v277;
                        *(float *)&v382[32] = *(float *)&v382[32] - v358;
                        v280 = createInvisibleWalls((float *)a7, (float *)v382, a3, a4);
                        v155 += v280;
                        if (!v280)
                        {
                          v281 = *(_DWORD *)(a3 + 8);
                          v282 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
                          v283 = v281 + 2;
                          v284 = v281;
                          if (v281 + 2 > v282)
                          {
                            v285 = 2 * *(_DWORD *)(a3 + 12);
                            if (!v282)
                              v285 = 2;
                            if (v283 <= v285)
                              v286 = v285;
                            else
                              v286 = v283;
                            physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v286);
                            v284 = *(_DWORD *)(a3 + 8);
                          }
                          v287 = *(_QWORD *)a3 + 36 * v284;
                          *(_DWORD *)(a3 + 8) = v281 + 1;
                          *(_QWORD *)v287 = *(_QWORD *)v382;
                          *(_QWORD *)(v287 + 8) = *(_QWORD *)&v382[8];
                          *(_QWORD *)(v287 + 16) = *(_QWORD *)&v382[16];
                          *(_QWORD *)(v287 + 24) = *(_QWORD *)&v382[24];
                          *(_DWORD *)(v287 + 32) = *(_DWORD *)&v382[32];
                          v288 = *(unsigned int *)(a4 + 8);
                          if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v288)
                          {
                            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, v384);
                          }
                          else
                          {
                            *(_DWORD *)(*(_QWORD *)a4 + 4 * v288) = *(_DWORD *)v384;
                            ++*(_DWORD *)(a4 + 8);
                          }
                          ++v155;
                        }
                        --v276;
                      }
                      while (v276);
                    }
                  }
LABEL_176:
                  *(_DWORD *)(v324 + 44) = v155;
                }
                break;
              default:
                goto LABEL_181;
            }
            if ((__int128 *)v396 != (__int128 *)((char *)&v396 + 8) && (_QWORD)v396)
              (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
            a8 = v349;
          }
        }
        else
        {
          while (*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8 * v45) != v38)
          {
            v45 = *(unsigned int *)(*(_QWORD *)(v41 + 16) + 4 * v45);
            if ((_DWORD)v45 == -1)
              goto LABEL_28;
          }
        }
      }
LABEL_181:
      ++v33;
    }
    while (v33 != v359);
  }
}

uint64_t physx::Cct::SweepTest::doSweepTest(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int *a4, uint64_t a5, float *a6, float *a7, int a8, float a9, _DWORD *a10, __int128 *a11, int a12, _QWORD *a13, _QWORD *a14)
{
  float v17;
  float v18;
  float v19;
  char v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  int32x2_t v31;
  float v32;
  int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, unsigned int *, float64x2_t *, float32x2_t *, _BYTE *);
  float v43;
  unsigned __int16 *v44;
  int v45;
  float v46;
  char v47;
  _WORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  _QWORD *v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  float *v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  _BOOL4 v123;
  int v124;
  uint64_t v125;
  void (***v126)(_QWORD, _BYTE *);
  void (***v127)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD);
  char v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  float v140;
  int v141;
  int v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  unsigned int v174;
  float32x2_t v175;
  float v176;
  float32x2_t v177;
  uint64_t v178;
  unsigned int *v179;
  unsigned int *v180;
  char v181;
  unsigned __int16 *v182;
  int v183;
  uint64_t v184;
  float v185;
  float v186;
  float32x2_t v187;
  float32x2_t v188;
  float v189;
  float64x2_t *v190;
  int v197;
  uint64_t v198;
  float v199;
  uint64_t v200;
  float64x2_t v201;
  double v202;
  unint64_t v203;
  float v204;
  _BYTE v205[12];
  unsigned int *v206;
  float32x2_t v207;
  float v208;
  float64x2_t v209;
  double v210;
  float v211;
  _BYTE *v212;
  float v213;
  float v214[7];
  int v215;
  float32x2_t v216;
  float v217;
  float v218;
  float v219;
  float v220;
  __int128 v221;
  float32x2_t v222;
  float v223;
  _BYTE v224[24];
  double v225;
  float v226;
  __int128 v227;
  float v228;
  float v229;
  __int128 v230;
  int v231;
  uint64_t v232;

  v232 = *MEMORY[0x24BDAC8D0];
  v17 = *a6;
  v18 = a6[1];
  v19 = a6[2];
  if (*a6 == 0.0 && v18 == 0.0 && v19 == 0.0)
  {
    v20 = 0;
    return v20 & 1;
  }
  v20 = 0;
  v21 = 0;
  v200 = a1 + 268;
  *(_DWORD *)(a1 + 364) &= 0xFFFFFFCB;
  *a14 = 0;
  *a13 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  v209 = *(float64x2_t *)(a5 + 8);
  v210 = *(double *)(a5 + 24);
  v22 = *(double *)(a5 + 24) + v19;
  v190 = (float64x2_t *)(a5 + 8);
  v23 = *(double *)(a5 + 16) + v18;
  v24 = v209.f64[0] + v17;
  v25 = v209.f64[1];
  v26 = v209.f64[0];
  v27 = v210;
  while (1)
  {
    ++*(_WORD *)(a1 + 362);
    *(float *)&v28 = v24 - v26;
    *(float *)&v29 = v23 - v25;
    v30 = v22 - v27;
    v207 = (float32x2_t)__PAIR64__(v29, v28);
    v208 = v30;
    (*(void (**)(uint64_t, uint64_t, _BYTE *, float64x2_t *, float32x2_t *))(*(_QWORD *)a5 + 16))(a5, a1, v224, &v209, &v207);
    physx::Cct::SweepTest::updateTouchedGeoms(a1, a2, a4, (float64x2_t *)v224, a11, a7);
    v32 = sqrtf((float)((float)(v207.f32[1] * v207.f32[1]) + (float)(v207.f32[0] * v207.f32[0])) + (float)(v208 * v208));
    if (v32 <= a9)
      goto LABEL_113;
    v207.f32[0] = v207.f32[0] * (float)(1.0 / v32);
    v207.f32[1] = v207.f32[1] * (float)(1.0 / v32);
    v208 = v208 * (float)(1.0 / v32);
    if ((float)((float)((float)(v207.f32[1] * a6[1]) + (float)(v207.f32[0] * *a6)) + (float)(v208 * a6[2])) <= 0.0)
      goto LABEL_113;
    v197 = v21;
    *(float *)v205 = v32 + *(float *)(a1 + 316);
    v33 = *(unsigned __int8 *)(a1 + 338);
    *(_QWORD *)&v205[4] = -1;
    v34 = *(unsigned int *)(a1 + 56);
    if (!(_DWORD)v34)
    {
LABEL_112:
      v209.f64[0] = v24;
      v209.f64[1] = v23;
      v20 = 1;
      v210 = v22;
      v21 = v197;
      goto LABEL_113;
    }
    v35 = 0;
    v36 = *(unsigned int **)(a1 + 48);
    v37 = &v36[v34];
    v38 = *((float *)&v203 + 1);
    LODWORD(v39) = v203;
    v40 = v204;
    do
    {
      v41 = *v36;
      v42 = (unsigned int (*)(uint64_t, uint64_t, unsigned int *, float64x2_t *, float32x2_t *, _BYTE *))*(&gSweepMap[6 * *(unsigned int *)(a5 + 36)] + v41);
      if (!v42)
        goto LABEL_23;
      v43 = *(float *)v205;
      LODWORD(v227) = *(_DWORD *)v205;
      *(_QWORD *)((char *)&v227 + 4) = -1;
      if (v42(a1, a5, v36, &v209, &v207, v224))
      {
        if (*(float *)&v227 == 0.0)
        {
          if (v33 && *v36 >= 2)
          {
            v44 = *(unsigned __int16 **)(v36 + 3);
            v45 = v44[4];
            if (v45 != 5)
            {
              if (v45 == 6)
                goto LABEL_80;
              goto LABEL_22;
            }
            (*(void (**)(__int128 *__return_ptr, float))(*(_QWORD *)v44 + 432))(&v221, *(float *)&v227);
            if ((v221 & 1) != 0)
            {
LABEL_80:
              v201 = *(float64x2_t *)v224;
              v202 = *(double *)&v224[16];
              v38 = *((float *)&v225 + 1);
              v39 = *(float *)&v225;
              v203 = *(_QWORD *)&v225;
              v40 = v226;
              v204 = v226;
              *(_QWORD *)v205 = v227;
              *(_DWORD *)&v205[8] = DWORD2(v227);
LABEL_82:
              v206 = v36;
              goto LABEL_25;
            }
          }
        }
        else if (*(float *)&v227 < v43)
        {
          v31.i32[1] = *(_DWORD *)&v224[4];
          v201 = *(float64x2_t *)v224;
          v202 = *(double *)&v224[16];
          v38 = *((float *)&v225 + 1);
          v39 = *(float *)&v225;
          v40 = v226;
          *(_QWORD *)v205 = v227;
          *(_DWORD *)&v205[8] = DWORD2(v227);
          if (*(float *)&v227 <= 0.0)
          {
            v203 = *(_QWORD *)&v225;
            v204 = v226;
            goto LABEL_82;
          }
          v35 = v36;
        }
      }
LABEL_22:
      v41 = *v36;
LABEL_23:
      v36 = (unsigned int *)((char *)v36 + GeomSizes[v41]);
    }
    while (v36 != v37);
    v203 = __PAIR64__(LODWORD(v38), LODWORD(v39));
    v204 = v40;
    v36 = v35;
    v206 = v35;
    if (!v35)
      goto LABEL_112;
LABEL_25:
    v46 = *(float *)v205;
    if (*(_BYTE *)(a1 + 338))
    {
      if (*(float *)v205 == 0.0)
        break;
    }
    if (*v36 > 1)
    {
      v48 = *(_WORD **)(v36 + 3);
      if (a12 == 2)
      {
        v49 = *(_QWORD *)(v36 + 1);
        v50 = *(_DWORD *)(a1 + 364) & 0xFFFFFFCF;
        *(_DWORD *)(a1 + 364) = v50;
        v51 = *(_DWORD *)&v205[4];
        if (v48[4] == 6 && *(_DWORD *)&v205[4] != -1)
        {
          *(_DWORD *)(a1 + 364) = v50 | 4;
          v53 = (float *)(*(_QWORD *)(a1 + 16) + 36 * v51);
          v54 = *(float *)(a1 + 300);
          v55 = *v53;
          v56 = v53[1];
          v57 = *(float *)(a1 + 304);
          v58 = *(float *)(a1 + 308);
          v59 = v53[2];
          v60 = v53[3];
          v61 = (float)((float)(v56 * v57) + (float)(*v53 * v54)) + (float)(v59 * v58);
          v62 = v53[4];
          v63 = v53[5];
          v64 = (float)((float)(v57 * v62) + (float)(v60 * v54)) + (float)(v63 * v58);
          v65 = v53[6];
          v66 = v53[7];
          v67 = v53[8];
          v68 = (float)((float)(v57 * v66) + (float)(v65 * v54)) + (float)(v67 * v58);
          if (v61 >= v64)
            v69 = (float)((float)(v57 * v62) + (float)(v60 * v54)) + (float)(v63 * v58);
          else
            v69 = (float)((float)(v56 * v57) + (float)(*v53 * v54)) + (float)(v59 * v58);
          if (v61 <= v64)
            v61 = (float)((float)(v57 * v62) + (float)(v60 * v54)) + (float)(v63 * v58);
          if (v69 >= v68)
            v70 = (float)((float)(v57 * v66) + (float)(v65 * v54)) + (float)(v67 * v58);
          else
            v70 = v69;
          if (v61 <= v68)
            v61 = (float)((float)(v57 * v66) + (float)(v65 * v54)) + (float)(v67 * v58);
          v71 = (*(double *)(a1 + 64) + *(double *)(a1 + 88)) * 0.5;
          v72 = (*(double *)(a1 + 72) + *(double *)(a1 + 96)) * 0.5;
          v73 = (*(double *)(a1 + 80) + *(double *)(a1 + 104)) * 0.5;
          v74 = (float)((float)(v57 * v72) + (float)(v54 * v71)) + (float)(v58 * v73);
          *(float *)(a1 + 160) = v70 + v74;
          *(float *)(a1 + 164) = v61 + v74;
          v75 = v60 - v55;
          v76 = v62 - v56;
          v77 = v65 - v55;
          v78 = v66 - v56;
          v79 = (float)(v76 * (float)(v67 - v59)) - (float)((float)(v63 - v59) * v78);
          v80 = (float)((float)(v63 - v59) * (float)(v65 - v55)) - (float)(v75 * (float)(v67 - v59));
          v81 = (float)(v75 * v78) - (float)(v76 * v77);
          *(float *)(a1 + 136) = v79;
          *(float *)(a1 + 140) = v80;
          *(float *)(a1 + 144) = v81;
          v82 = sqrtf((float)((float)(v80 * v80) + (float)(v79 * v79)) + (float)(v81 * v81));
          if (v82 > 0.0)
          {
            v83 = 1.0 / v82;
            *(float *)(a1 + 136) = v79 * v83;
            *(float *)(a1 + 140) = v80 * v83;
            *(float *)(a1 + 144) = v81 * v83;
          }
        }
        *a14 = v49;
        *a13 = v48;
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v48 + 152))(v224);
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v49 + 160))(&v221, v49);
        v47 = 0;
        v84 = (float)(*(float *)&v224[12] * *(float *)&v224[12]) + -0.5;
        v85 = (float)((float)((float)(v222.f32[1] + v222.f32[1]) * *(float *)&v224[4])
                    + (float)(*(float *)v224 * (float)(v222.f32[0] + v222.f32[0])))
            + (float)(*(float *)&v224[8] * (float)(v223 + v223));
        v86 = *(float *)&v224[16]
            + (float)((float)((float)(*(float *)&v224[12]
                                    * (float)((float)(*(float *)&v224[4] * (float)(v223 + v223))
                                            - (float)(*(float *)&v224[8] * (float)(v222.f32[1] + v222.f32[1]))))
                            + (float)((float)(v222.f32[0] + v222.f32[0]) * v84))
                    + (float)(*(float *)v224 * v85));
        v87 = *(float *)&v224[20]
            + (float)((float)((float)(*(float *)&v224[12]
                                    * (float)((float)(*(float *)&v224[8] * (float)(v222.f32[0] + v222.f32[0]))
                                            - (float)(*(float *)v224 * (float)(v223 + v223))))
                            + (float)((float)(v222.f32[1] + v222.f32[1]) * v84))
                    + (float)(*(float *)&v224[4] * v85));
        v88 = *(float *)&v225
            + (float)((float)((float)(*(float *)&v224[12]
                                    * (float)((float)(*(float *)v224 * (float)(v222.f32[1] + v222.f32[1]))
                                            - (float)(*(float *)&v224[4] * (float)(v222.f32[0] + v222.f32[0]))))
                            + (float)((float)(v223 + v223) * v84))
                    + (float)(*(float *)&v224[8] * v85));
        v89 = (float)((float)((float)(*(float *)v224 * *((float *)&v221 + 3))
                            + (float)(*(float *)&v224[12] * *(float *)&v221))
                    + (float)(*(float *)&v224[4] * *((float *)&v221 + 2)))
            - (float)(*((float *)&v221 + 1) * *(float *)&v224[8]);
        v90 = (float)((float)((float)(*(float *)&v224[4] * *((float *)&v221 + 3))
                            + (float)(*(float *)&v224[12] * *((float *)&v221 + 1)))
                    + (float)(*(float *)&v224[8] * *(float *)&v221))
            - (float)(*((float *)&v221 + 2) * *(float *)v224);
        v91 = (float)((float)((float)(*(float *)&v224[8] * *((float *)&v221 + 3))
                            + (float)(*(float *)&v224[12] * *((float *)&v221 + 2)))
                    + (float)(*(float *)v224 * *((float *)&v221 + 1)))
            - (float)(*(float *)&v221 * *(float *)&v224[4]);
        v92 = (float)((float)((float)(*(float *)&v224[12] * *((float *)&v221 + 3))
                            - (float)(*(float *)v224 * *(float *)&v221))
                    - (float)(*(float *)&v224[4] * *((float *)&v221 + 1)))
            - (float)(*(float *)&v224[8] * *((float *)&v221 + 2));
        v93 = v201.f64[0];
        v94 = v201.f64[1];
        v95 = v202;
        *(float *)(a1 + 248) = v94;
        *(float *)(a1 + 252) = v95;
        v96 = (float)(v93 - v86) + (float)(v93 - v86);
        v97 = (float)(v94 - v87) + (float)(v94 - v87);
        v98 = (float)(v95 - v88) + (float)(v95 - v88);
        v99 = (float)(v92 * v92) + -0.5;
        v100 = (float)((float)(v90 * v97) + (float)(v89 * v96)) + (float)(v91 * v98);
        *(float *)(a1 + 232) = (float)((float)(v96 * v99)
                                     - (float)((float)((float)(v90 * v98) - (float)(v91 * v97)) * v92))
                             + (float)(v89 * v100);
        *(float *)(a1 + 236) = (float)((float)(v97 * v99)
                                     - (float)((float)((float)(v91 * v96) - (float)(v89 * v98)) * v92))
                             + (float)(v90 * v100);
        *(float *)(a1 + 240) = (float)((float)(v98 * v99)
                                     - (float)((float)((float)(v89 * v97) - (float)(v90 * v96)) * v92))
                             + (float)(v91 * v100);
        *(float *)(a1 + 244) = v93;
        v38 = *((float *)&v203 + 1);
        LODWORD(v39) = v203;
        v40 = v204;
        v36 = v206;
LABEL_66:
        v125 = *a3;
        *(_QWORD *)v224 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3);
        *(float64x2_t *)&v224[8] = v201;
        v225 = v202;
        v226 = v39;
        *(_QWORD *)&v227 = __PAIR64__(LODWORD(v40), LODWORD(v38));
        *((float32x2_t *)&v227 + 1) = v207;
        v228 = v208;
        v229 = v32;
        v230 = *(_OWORD *)(v36 + 1);
        v231 = *(_DWORD *)&v205[8];
        v126 = *(void (****)(_QWORD, _BYTE *))(v125 + 80);
        if (v126)
          (**v126)(v126, v224);
        v127 = *(void (****)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(v125 + 88);
        v124 = v197;
        if (v127)
        {
          (**v127)(&v221, v127, v230, *((_QWORD *)&v230 + 1));
          v128 = v221;
        }
        else
        {
          v128 = 0;
        }
        v123 = (v128 & 2) == 0;
        goto LABEL_90;
      }
      if ((a12 & 0xFFFFFFFD) == 1)
      {
        v47 = 0;
        if (v48[4] != 6 || (v108 = *(_DWORD *)&v205[4], *(_DWORD *)&v205[4] == -1))
        {
LABEL_64:
          if (a12 == 3)
          {
LABEL_65:
            v123 = 1;
            v124 = v197;
            goto LABEL_90;
          }
          goto LABEL_66;
        }
        *(_DWORD *)(a1 + 364) |= 8u;
        v109 = (float *)(*(_QWORD *)(a1 + 16) + 36 * v108);
        v110 = v109[1];
        v111 = v109[2];
        v112 = v109[3] - *v109;
        v113 = v109[6] - *v109;
        v114 = v109[4] - v110;
        v115 = v109[5] - v111;
        v116 = v109[7] - v110;
        v117 = v109[8] - v111;
        v118 = (float)(v114 * v117) - (float)(v115 * v116);
        v119 = (float)(v115 * v113) - (float)(v112 * v117);
        v120 = (float)(v112 * v116) - (float)(v114 * v113);
        *(float *)(a1 + 148) = v118;
        *(float *)(a1 + 152) = v119;
        *(float *)(a1 + 156) = v120;
        v121 = sqrtf((float)((float)(v119 * v119) + (float)(v118 * v118)) + (float)(v120 * v120));
        if (v121 > 0.0)
        {
          v122 = 1.0 / v121;
          v118 = v118 * v122;
          v119 = v119 * v122;
          *(float *)(a1 + 148) = v118;
          *(float *)(a1 + 152) = v119;
          v120 = v120 * v122;
          *(float *)(a1 + 156) = v120;
        }
        if (*(_BYTE *)(a1 + 340)
          && (float)((float)((float)(v119 * *(float *)(a1 + 304)) + (float)(v118 * *(float *)(a1 + 300)))
                   + (float)(v120 * *(float *)(a1 + 308))) < 0.0)
        {
          v47 = 1;
          goto LABEL_64;
        }
      }
      v47 = 0;
      goto LABEL_64;
    }
    if (a12 == 3)
    {
      v47 = 0;
      goto LABEL_65;
    }
    a3[2] = 0;
    *((_DWORD *)a3 + 6) = -1;
    v101 = (_QWORD *)*a3;
    v102 = HIWORD(v36[1]);
    v103 = (unsigned __int16)v36[1];
    if (v103 == 2)
    {
      *(_QWORD *)v224 = (*(uint64_t (**)(_QWORD *))(*v101 + 32))(v101);
      v225 = v202;
      *(float64x2_t *)&v224[8] = v201;
      v226 = v39;
      *(_QWORD *)&v227 = __PAIR64__(LODWORD(v40), LODWORD(v38));
      *((float32x2_t *)&v227 + 1) = v207;
      v228 = v208;
      v229 = v32;
      v130 = a3;
      v131 = *(_QWORD *)(a3[1] + 24);
      v132 = 72;
    }
    else
    {
      if (v103 != 1)
      {
        if ((unsigned __int16)v36[1])
          goto LABEL_72;
        v104 = *(_QWORD *)(*(_QWORD *)(v101[75] + 104) + 8 * v102);
        *(_QWORD *)v224 = (*(uint64_t (**)(_QWORD *))(*v101 + 32))(v101);
        *(float64x2_t *)&v224[8] = v201;
        v225 = v202;
        v226 = v39;
        *(_QWORD *)&v227 = __PAIR64__(LODWORD(v40), LODWORD(v38));
        *((float32x2_t *)&v227 + 1) = v207;
        v228 = v208;
        v229 = v32;
        *(_QWORD *)&v230 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 32))(v104);
        v105 = v101[10];
        if (v105)
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v105 + 8))(v105, v224);
        v106 = v101[11];
        if (!v106)
        {
LABEL_72:
          v107 = 0;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v106 + 8))(&v221, v106, v230);
          v107 = v221;
        }
        v124 = v197;
        v129 = a3;
        goto LABEL_85;
      }
      *(_QWORD *)v224 = (*(uint64_t (**)(_QWORD *))(*v101 + 32))(v101);
      *(float64x2_t *)&v224[8] = v201;
      v225 = v202;
      v226 = v39;
      *(_QWORD *)&v227 = __PAIR64__(LODWORD(v40), LODWORD(v38));
      *((float32x2_t *)&v227 + 1) = v207;
      v228 = v208;
      v229 = v32;
      v130 = a3;
      v131 = *(_QWORD *)(a3[1] + 8);
      v132 = 80;
    }
    v133 = v131 + v102 * (unint64_t)v132;
    v129 = v130;
    v134 = v133 + 8;
    *(_QWORD *)&v230 = *(_QWORD *)(v133 + 16);
    v130[2] = v133 + 8;
    *((_DWORD *)v130 + 6) = *(_DWORD *)v133;
    v135 = v101[10];
    if (v135)
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v135 + 16))(v135, v224);
    v136 = v101[11];
    if (v136)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(&v221, v136, v134);
      v107 = v221;
    }
    else
    {
      v107 = 0;
    }
    v124 = v197;
LABEL_85:
    v123 = (v107 & 2) == 0;
    if (a12 == 2)
    {
      v137 = v129[2];
      v138 = *(_DWORD *)(a1 + 364);
      if (v137)
      {
        v139 = *((_DWORD *)v129 + 6);
        *(_DWORD *)(a1 + 364) = v138 | 0x20;
        *(_DWORD *)(a1 + 216) = v139;
        v140 = v202;
        *(float32x2_t *)v200 = vcvt_f32_f64(v201);
        *(float *)(a1 + 276) = v140;
        worldToLocal((float *)v224, v137, v201.f64);
        v47 = 0;
        *(_QWORD *)(a1 + 256) = *(_QWORD *)v224;
        *(_DWORD *)(a1 + 264) = *(_DWORD *)&v224[8];
      }
      else
      {
        v47 = 0;
        *(_DWORD *)(a1 + 364) = v138 | 0x10;
      }
    }
    else
    {
      v47 = 0;
    }
LABEL_90:
    v141 = a12 != 2 || v123;
    if (v124)
      v141 = 1;
    if (v141)
      v142 = -1;
    else
      v142 = 8;
    v143 = v201.f64[0];
    v144 = v201.f64[1];
    v145 = v202;
    v146 = *(float *)(a1 + 300);
    v147 = *(float *)(a1 + 304);
    v148 = (float)(v147 * v144) + (float)(v143 * v146);
    v149 = *(float *)(a1 + 308);
    *(float *)(a1 + 348) = v148 + (float)(v145 * v149);
    v150 = *(float *)(a1 + 316);
    if (v46 > v150)
    {
      v151 = v46 - v150;
      v209 = vaddq_f64(v209, vcvtq_f64_f32(vmul_n_f32(v207, v151)));
      v210 = v210 + (float)(v151 * v208);
    }
    if ((v47 & 1) != 0 || (*(_BYTE *)(a1 + 364) & 2) != 0 && *(_DWORD *)(a1 + 280) != 1)
    {
      v152 = (float)((float)(v147 * v38) + (float)(v39 * v146)) + (float)(v40 * v149);
      v39 = v39 - (float)(v146 * v152);
      v38 = v38 - (float)(v147 * v152);
      v40 = v40 - (float)(v149 * v152);
      v153 = sqrtf((float)((float)(v38 * v38) + (float)(v39 * v39)) + (float)(v40 * v40));
      if (v153 > 0.0)
      {
        v154 = 1.0 / v153;
        v39 = v39 * v154;
        v38 = v38 * v154;
        v40 = v40 * v154;
      }
    }
    v155 = (float)((float)(v38 * v207.f32[1]) + (float)(v207.f32[0] * v39)) + (float)(v208 * v40);
    v156 = v207.f32[0] - (float)((float)(v39 + v39) * v155);
    v157 = v207.f32[1] - (float)((float)(v38 + v38) * v155);
    v158 = v208 - (float)((float)(v40 + v40) * v155);
    v159 = sqrtf((float)((float)(v157 * v157) + (float)(v156 * v156)) + (float)(v158 * v158));
    if (v159 > 0.0)
    {
      v160 = 1.0 / v159;
      v156 = v156 * v160;
      v157 = v157 * v160;
      v158 = v158 * v160;
    }
    v161 = (float)((float)(v38 * v157) + (float)(v156 * v39)) + (float)(v158 * v40);
    v162 = v38 * v161;
    v163 = v40 * v161;
    v164 = v156 - (float)(v39 * v161);
    v165 = v157 - v162;
    v166 = v158 - v163;
    v25 = v209.f64[1];
    v26 = v209.f64[0];
    v27 = v210;
    if ((*(_DWORD *)(a1 + 364) & 0x40) != 0)
    {
      v167 = sqrtf((float)((float)(v165 * v165) + (float)(v164 * v164)) + (float)(v166 * v166));
      if (v167 > 0.0)
      {
        v168 = 1.0 / v167;
        v164 = v164 * v168;
        v165 = v165 * v168;
        v166 = v166 * v168;
      }
    }
    v21 = v124 + 1;
    v169 = v22 - v210;
    v170 = v24 - v209.f64[0];
    v171 = v23 - v209.f64[1];
    v172 = sqrtf((float)((float)(v171 * v171) + (float)(v170 * v170)) + (float)(v169 * v169));
    v24 = v209.f64[0] + (float)(v172 * v164);
    v23 = v209.f64[1] + (float)(v172 * v165);
    v22 = v210 + (float)(v172 * v166);
    v20 = 1;
    a8 += v142;
    if (!a8)
    {
LABEL_113:
      if (a10)
        *a10 = v21;
      *v190 = v209;
      v190[1].f64[0] = v210;
      return v20 & 1;
    }
  }
  v174 = 0;
  v31.i32[0] = *(_DWORD *)(a1 + 316);
  v175 = vcvt_f32_f64(v209);
  v176 = v210;
  v177 = (float32x2_t)vdup_lane_s32(v31, 0);
  v198 = v31.u32[0] | 0x3F00000000000000;
  v199 = *(float *)v31.i32;
  do
  {
    v178 = *(unsigned int *)(a1 + 56);
    if (!(_DWORD)v178)
      continue;
    v179 = *(unsigned int **)(a1 + 48);
    v180 = &v179[v178];
    v181 = 1;
    do
    {
      if (*v179 >= 2)
      {
        v182 = *(unsigned __int16 **)(v179 + 3);
        v183 = v182[4];
        if (v183 == 6
          || v183 == 5
          && ((*(void (**)(_BYTE *__return_ptr, _QWORD))(*(_QWORD *)v182 + 432))(v224, *(_QWORD *)(v179 + 3)), (v224[0] & 1) != 0))
        {
          v184 = *(_QWORD *)(v179 + 1);
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v184 + 80))(v224, v184);
          (*(void (**)(__int128 *__return_ptr, unsigned __int16 *))(*(_QWORD *)v182 + 152))(&v221, v182);
          (*(void (**)(int *__return_ptr, uint64_t))(*(_QWORD *)v184 + 160))(&v215, v184);
          v185 = (float)(*((float *)&v221 + 3) * *((float *)&v221 + 3)) + -0.5;
          v186 = (float)((float)((float)(v219 + v219) * *((float *)&v221 + 1))
                       + (float)(*(float *)&v221 * (float)(v218 + v218)))
               + (float)(*((float *)&v221 + 2) * (float)(v220 + v220));
          v214[0] = (float)((float)((float)(*(float *)&v221 * v217) + (float)(*((float *)&v221 + 3) * *(float *)&v215))
                          + (float)(*((float *)&v221 + 1) * v216.f32[1]))
                  - (float)(v216.f32[0] * *((float *)&v221 + 2));
          v214[1] = (float)((float)((float)(*((float *)&v221 + 1) * v217) + (float)(*((float *)&v221 + 3) * v216.f32[0]))
                          + (float)(*((float *)&v221 + 2) * *(float *)&v215))
                  - (float)(v216.f32[1] * *(float *)&v221);
          v214[2] = (float)((float)((float)(*((float *)&v221 + 2) * v217) + (float)(*((float *)&v221 + 3) * v216.f32[1]))
                          + (float)(*(float *)&v221 * v216.f32[0]))
                  - (float)(*(float *)&v215 * *((float *)&v221 + 1));
          v214[3] = (float)((float)((float)(*((float *)&v221 + 3) * v217) - (float)(*(float *)&v221 * *(float *)&v215))
                          - (float)(*((float *)&v221 + 1) * v216.f32[0]))
                  - (float)(*((float *)&v221 + 2) * v216.f32[1]);
          v214[4] = v222.f32[0]
                  + (float)((float)((float)(*((float *)&v221 + 3)
                                          * (float)((float)(*((float *)&v221 + 1) * (float)(v220 + v220))
                                                  - (float)(*((float *)&v221 + 2) * (float)(v219 + v219))))
                                  + (float)((float)(v218 + v218) * v185))
                          + (float)(*(float *)&v221 * v186));
          v214[5] = v222.f32[1]
                  + (float)((float)((float)(*((float *)&v221 + 3)
                                          * (float)((float)(*((float *)&v221 + 2) * (float)(v218 + v218))
                                                  - (float)(*(float *)&v221 * (float)(v220 + v220))))
                                  + (float)((float)(v219 + v219) * v185))
                          + (float)(*((float *)&v221 + 1) * v186));
          v214[6] = v223
                  + (float)((float)((float)(*((float *)&v221 + 3)
                                          * (float)((float)(*(float *)&v221 * (float)(v219 + v219))
                                                  - (float)(*((float *)&v221 + 1) * (float)(v218 + v218))))
                                  + (float)((float)(v220 + v220) * v185))
                          + (float)(*((float *)&v221 + 2) * v186));
          v211 = 0.0;
          v221 = *(_OWORD *)(v200 + 16);
          v222 = v175;
          v223 = v176;
          if (*(_DWORD *)(a5 + 36) == 1)
          {
            v215 = 2;
            v187 = *(float32x2_t *)(a5 + 40);
            v188.i32[0] = vadd_f32((float32x2_t)v198, v187).u32[0];
            v188.i32[1] = vmul_f32((float32x2_t)v198, v187).i32[1];
            v216 = v188;
            v212 = v224;
            if ((physx::PxGeometryQuery::computePenetration((float32x2_t *)&v212, (uint64_t)&v211, &v215, (uint64_t)&v221, (int *)v224, (uint64_t)v214) & 1) == 0)goto LABEL_126;
          }
          else
          {
            v189 = v199 + *(float *)(a5 + 48);
            v215 = 3;
            v216 = vadd_f32(v177, *(float32x2_t *)(a5 + 40));
            v217 = v189;
            v212 = v224;
            if (!physx::PxGeometryQuery::computePenetration((float32x2_t *)&v212, (uint64_t)&v211, &v215, (uint64_t)&v221, (int *)v224, (uint64_t)v214))
            {
LABEL_126:
              v181 = 0;
              goto LABEL_129;
            }
          }
          ++v174;
          v175 = vadd_f32(v175, vmul_n_f32((float32x2_t)v212, v211));
          v176 = v176 + (float)(v211 * v213);
          v181 = 1;
        }
      }
LABEL_129:
      v179 = (unsigned int *)((char *)v179 + GeomSizes[*v179]);
    }
    while (v179 != v180);
    if ((v181 & 1) == 0)
      break;
  }
  while (v174 <= 3);
  if (a10)
    *a10 = v197 + 1;
  *(float64x2_t *)(a5 + 8) = vcvtq_f64_f32(v175);
  *(double *)(a5 + 24) = v176;
  v20 = 1;
  return v20 & 1;
}

uint64_t physx::Cct::SweepTest::moveCharacter(char *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, float *a6, unsigned int *a7, __int128 *a8, float a9, char a10, unsigned __int8 a11, _QWORD *a12, _QWORD *a13)
{
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  float64x2_t *v23;
  double v24;
  float v25;
  float v26;
  double v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v42;
  float *v43;
  float v44;
  float v45;
  double v46;
  float v47;
  float v48;
  float v49;
  int v50;
  double v51;
  BOOL v52;
  int v54;
  int v55;
  float v56;
  BOOL v57;
  char v58;
  float v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  double v70;
  uint64_t result;
  int v72;
  float v73;
  int v74;
  float v75;
  float32x2_t v76;
  float v77;
  float v78;
  double v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  int v92;
  uint64_t *v93;
  float v95[3];
  int v96;
  float64x2_t v97;
  uint64_t v98;
  float v99[3];
  uint64_t v100;
  float v101;
  uint64_t v102;
  float v103;

  v19 = a11;
  v20 = *(_DWORD *)(a2 + 364);
  v21 = v20 & 0xFFFFFEFE;
  *a1 = 0;
  if ((v20 & 2) != 0)
  {
    if (*(_DWORD *)(a2 + 280) == 1)
      v22 = 10;
    else
      v22 = 1;
  }
  else
  {
    v22 = 1;
  }
  v92 = v22;
  v24 = *(double *)(a5 + 8);
  v23 = (float64x2_t *)(a5 + 8);
  v25 = *(float *)(a2 + 300);
  v26 = *(float *)(a2 + 304);
  v27 = *(double *)(a5 + 24);
  v28 = *(double *)(a5 + 16) * v26;
  v29 = *(float *)(a2 + 308);
  v30 = *(float *)(a5 + 32);
  v31 = *a6;
  v32 = a6[1];
  v33 = a6[2];
  v34 = (float)((float)(v26 * v32) + (float)(*a6 * v25)) + (float)(v33 * v29);
  v35 = 0.0;
  if (a11)
    v35 = *(float *)(a2 + 320);
  if (v34 <= 0.0)
  {
    v36 = *(float *)(a2 + 320);
  }
  else
  {
    v21 |= 0x100u;
    v36 = v35;
  }
  *(_DWORD *)(a2 + 364) = v21;
  v102 = 0;
  v103 = 0.0;
  v100 = 0;
  v101 = 0.0;
  v37 = v25 * v34;
  v38 = v31 - (float)(v25 * v34);
  v39 = v32 - (float)(v26 * v34);
  v40 = v33 - (float)(v29 * v34);
  v90 = v30;
  if (v34 <= 0.0)
  {
    v42 = (float *)&v102 + 1;
    v43 = &v103;
    *(float *)&v102 = v25 * v34;
    v88 = 0.0;
    v89 = 0.0;
    v87 = 0.0;
    v44 = v29 * v34;
    v45 = v26 * v34;
  }
  else
  {
    v42 = (float *)&v100 + 1;
    v43 = &v101;
    *(float *)&v100 = v25 * v34;
    v44 = 0.0;
    v88 = v26 * v34;
    v89 = v29 * v34;
    v87 = v25 * v34;
    v45 = 0.0;
    v37 = 0.0;
  }
  v46 = v28 + v24 * v25;
  *v42 = v26 * v34;
  *v43 = v29 * v34;
  v99[0] = v38;
  v99[1] = v39;
  v99[2] = v40;
  v86 = v38;
  v47 = fabsf(v38);
  if (v47 > 0.000001)
    v19 = 1;
  v84 = v40;
  v85 = v39;
  v48 = fabsf(v39);
  if (v48 > 0.000001)
    v19 = 1;
  v49 = fabsf(v40);
  if (v49 > 0.000001)
    v50 = 1;
  else
    v50 = v19;
  if (v50 == 1)
  {
    *(float *)&v102 = (float)(v25 * v36) + v37;
    *((float *)&v102 + 1) = (float)(v26 * v36) + v45;
    v103 = (float)(v29 * v36) + v44;
  }
  v51 = v46 + v27 * v29;
  (*(void (**)(uint64_t, uint64_t, float64x2_t *, uint64_t, float *))(*(_QWORD *)a5 + 16))(a5, a2, &v97, a5 + 8, a6);
  physx::Cct::SweepTest::updateTouchedGeoms(a2, a3, a7, &v97, a8, v99);
  *(_DWORD *)(a2 + 112) = 0;
  v96 = 0;
  v93 = a3;
  if ((*(_BYTE *)(a2 + 364) & 2) != 0)
  {
    v58 = 0;
    v56 = a9;
  }
  else
  {
    v52 = v49 <= 0.000001 && v48 <= 0.000001;
    if (v52 && v47 <= 0.000001)
      v54 = 10;
    else
      v54 = 1;
    if (*(_BYTE *)(a2 + 340))
      v55 = 1;
    else
      v55 = v54;
    v56 = a9;
    if (physx::Cct::SweepTest::doSweepTest(a2, a3, a4, a7, a5, (float *)&v102, v99, v55, a9, &v96, a8, 0, a12, a13))v57 = v96 == 0;
    else
      v57 = 1;
    if (v57)
    {
      v58 = 0;
    }
    else
    {
      v58 = 2;
      *a1 = 2;
      v59 = *(double *)(a5 + 16) * *(float *)(a2 + 304)
          + *(double *)(a5 + 8) * *(float *)(a2 + 300)
          + *(double *)(a5 + 24) * *(float *)(a2 + 308)
          - v51;
      if (v36 > v59)
        v36 = *(double *)(a5 + 16) * *(float *)(a2 + 304)
            + *(double *)(a5 + 8) * *(float *)(a2 + 300)
            + *(double *)(a5 + 24) * *(float *)(a2 + 308)
            - v51;
    }
  }
  *(_DWORD *)(a2 + 112) = 1;
  *(_DWORD *)(a2 + 364) &= ~8u;
  v96 = 0;
  if (physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, v99, v99, 10, v56, &v96, a8, 1, a12, a13)
    && v96)
  {
    v58 |= 1u;
    *a1 = v58;
  }
  if (a10)
  {
    if (*(_DWORD *)(a5 + 36) == 1)
    {
      v60 = *(_DWORD *)(a2 + 364);
      if ((v60 & 8) == 0)
      {
        v61 = *(float *)(a5 + 40);
        v62 = (float)((float)(v85 * v85) + (float)(v86 * v86)) + (float)(v84 * v84);
        v63 = sqrtf(v62);
        if (v63 < v61)
        {
          v64 = 0.0;
          v52 = v62 <= 0.0;
          v65 = 0.0;
          v66 = 0.0;
          if (!v52)
          {
            v67 = 1.0 / v63;
            v64 = v86 * v67;
            v65 = v85 * v67;
            v66 = v84 * v67;
          }
          v95[0] = v61 * v64;
          v95[1] = v61 * v65;
          v95[2] = v61 * v66;
          *(_DWORD *)(a2 + 364) = v60 & 0xFFFFFFF7;
          v96 = 0;
          v97 = *v23;
          v98 = *(_QWORD *)(a5 + 24);
          physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, v95, v99, 1, v56, &v96, a8, 3, a12, a13);
          *v23 = v97;
          *(_QWORD *)(a5 + 24) = v98;
        }
      }
    }
  }
  *(_DWORD *)(a2 + 112) = 2;
  v96 = 0;
  if (v50)
  {
    v68 = v36 * *(float *)(a2 + 308);
    v69 = v88 - (float)(v36 * *(float *)(a2 + 304));
    *(float *)&v100 = v87 - (float)(v36 * *(float *)(a2 + 300));
    *((float *)&v100 + 1) = v69;
    v101 = v89 - v68;
  }
  v70 = v51 - v90;
  *(_DWORD *)(a2 + 364) &= ~4u;
  *a13 = 0;
  *a12 = 0;
  *(_DWORD *)(a2 + 216) = -1;
  result = physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, (float *)&v100, v99, v92, v56, &v96, a8, 2, a12, a13);
  if (!(_DWORD)result || !v96)
  {
    if (!*(_BYTE *)(a2 + 337))
      return result;
    v74 = *(_DWORD *)(a2 + 364);
    goto LABEL_72;
  }
  if (v34 <= 0.0)
    *a1 = v58 | 4;
  if (*(_BYTE *)(a2 + 337))
  {
    v72 = *(_DWORD *)(a2 + 364);
    if ((v72 & 0x38) == 8
      && (v73 = (float)((float)(*(float *)(a2 + 152) * *(float *)(a2 + 304))
                      + (float)(*(float *)(a2 + 148) * *(float *)(a2 + 300)))
              + (float)(*(float *)(a2 + 156) * *(float *)(a2 + 308)),
          v73 >= 0.0)
      && v73 < *(float *)(a2 + 312)
      && a10
      && v70 + v36 < *(float *)(a2 + 348))
    {
      v74 = v72 | 1;
      *(_DWORD *)(a2 + 364) = v72 | 1;
      if ((v72 & 2) == 0)
        return result;
    }
    else
    {
      v74 = *(_DWORD *)(a2 + 364);
    }
LABEL_72:
    if ((v74 & 0x30) == 0 && v34 <= 0.0 && (v74 & 4) != 0)
    {
      v75 = *(float *)(a2 + 164) - v70;
      if (*(float *)(a2 + 320) < v75)
      {
        v76 = *(float32x2_t *)(a2 + 300);
        v77 = *(float *)(a2 + 308);
        v78 = vmlas_n_f32(vmuls_lane_f32(*(float *)(a2 + 140), v76, 1), *(float *)(a2 + 136), v76.f32[0])
            + (float)(*(float *)(a2 + 144) * v77);
        if (v78 >= 0.0 && v78 < *(float *)(a2 + 312))
        {
          *(_DWORD *)(a2 + 364) = v74 | 1;
          if ((v74 & 2) != 0)
          {
            *(_DWORD *)(a2 + 364) = v74 | 0x41;
            v79 = *(double *)(a5 + 16) * v76.f32[1] + *(double *)(a5 + 8) * v76.f32[0] + *(double *)(a5 + 24) * v77;
            v80 = v79 - v51;
            v52 = v79 <= v51;
            v81 = 0.0;
            if (!v52)
              v81 = v80;
            v82 = v81 + fabsf((float)((float)(v76.f32[1] * a6[1]) + (float)(*a6 * v76.f32[0])) + (float)(a6[2] * v77));
            v96 = 0;
            v83 = v82 / 10.0;
            if (v82 >= v56)
              v83 = v56;
            *(float32x2_t *)&v97.f64[0] = vmul_n_f32(vneg_f32(v76), v82);
            *(float *)&v97.f64[1] = -(float)(v77 * v82);
            result = physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, (float *)&v97, v99, 10, v83, &v96, a8, 0, a12, a13);
            *(_DWORD *)(a2 + 364) &= ~0x40u;
          }
        }
      }
    }
  }
  return result;
}

uint64_t physx::Cct::Controller::move(_BYTE *a1, _DWORD *a2, double *a3, float32x2_t *a4, uint64_t a5, uint64_t a6, char a7, float a8, __n128 a9, __n128 a10)
{
  float v12;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  uint64_t v22;
  const physx::PxBase **v23;
  int v24;
  int v25;
  uint64_t v26;
  const physx::PxBase *v27;
  physx::Cct::CharacterControllerManager **v28;
  const physx::PxBase *v29;
  char v30;
  float v31;
  __int16 v32;
  uint64_t v33;
  __n128 *v34;
  __int16 v35;
  __n128 v36;
  int v37;
  double v38;
  double v39;
  void (***v40)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD);
  double v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  _BYTE *v62;
  __int128 v63;
  _WORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t *v69;
  _DWORD *v70;
  _DWORD *v71;
  _QWORD *v72;
  const physx::PxBase *v73;
  const physx::PxBase *v74;
  const physx::PxBase *v75;
  const physx::PxBase *v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  BOOL v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  double v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  _DWORD **v126;
  unint64_t v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float64x2_t *v148;
  __int128 v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  float64x2_t v157;
  uint64_t v158;
  float v159;
  float v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  float v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  double v197;
  double v198;
  int8x8_t v199;
  char v200;
  int v201;
  float v202;
  float32x2_t v209;
  const physx::PxBase *v210;
  const physx::PxBase *v211;
  const physx::PxBase *v212;
  const physx::PxBase *v213;
  __int128 v214;
  uint64_t v215;
  float v216;
  float v217;
  float v218;
  float v219;
  unsigned int *v220;
  uint64_t result;
  unsigned int (***v222)(_QWORD, _BYTE *, const physx::PxBase *, const physx::PxBase *, float64x2_t *);
  int v223;
  unsigned __int8 v224;
  uint64_t v225;
  char v226;
  _BYTE *v227;
  double *v228;
  int v229;
  float64_t v230;
  __int128 *v231;
  const physx::PxBase **v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  BOOL v237;
  uint64_t v238;
  _BYTE v240[32];
  __int128 v241;
  uint64_t v242;
  _BYTE v243[48];
  uint64_t v244;
  _BYTE v245[12];
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  _BYTE v252[12];
  uint64_t v253;
  int v254;
  int v255;
  float64x2_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  __int16 v263;
  const physx::PxBase *v264;
  float v265;
  __n128 v266;
  __int16 v267;
  __int128 v268;
  uint64_t v269;
  float v270;

  v12 = a9.n128_f32[0];
  v18 = a2 + 87;
  v19 = *((_QWORD *)a2 + 75);
  v20 = *(unsigned __int8 *)(v19 + 200);
  if (*(_BYTE *)(v19 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
  {
    pthread_mutex_lock(*((pthread_mutex_t **)a2 + 74));
    v19 = *((_QWORD *)a2 + 75);
  }
  v238 = *(_QWORD *)(v19 + 24);
  *((_QWORD *)a2 + 13) = v238;
  *((double *)a2 + 70) = *((double *)a2 + 70) + v12;
  v223 = *(_DWORD *)(v19 + 32);
  a2[28] = v223;
  a2[96] = a2[3];
  *(_OWORD *)(v18 + 10) = *((_OWORD *)a2 + 1);
  *((_QWORD *)v18 + 7) = *((_QWORD *)a2 + 4);
  a2[103] = a2[10];
  *((_OWORD *)a2 + 26) = *(_OWORD *)(a2 + 11);
  v21 = *(__n128 *)((char *)a2 + 57);
  *(__n128 *)((char *)a2 + 429) = v21;
  a2[117] |= 0x80u;
  *((float *)a2 + 109) = *(float *)(v19 + 192) * *(float *)(v19 + 192);
  *((_BYTE *)a2 + 440) = *(_BYTE *)(v19 + 196);
  *((_BYTE *)a2 + 442) = *(_BYTE *)(v19 + 197);
  *((_BYTE *)a2 + 443) = *(_BYTE *)(v19 + 198);
  *((_BYTE *)a2 + 444) = *(_BYTE *)(v19 + 199);
  *((_QWORD *)v18 + 14) = 0;
  v21.n128_f32[0] = a4[1].f32[0] + *((float *)a2 + 135);
  a10.n128_u64[0] = *((_QWORD *)v18 + 23);
  a9.n128_u64[0] = (unint64_t)vadd_f32(*a4, (float32x2_t)a10.n128_u64[0]);
  *(_QWORD *)v252 = a9.n128_u64[0];
  *(_DWORD *)&v252[8] = v21.n128_u32[0];
  *((_QWORD *)v18 + 23) = 0;
  a2[135] = 0;
  v232 = (const physx::PxBase **)(a2 + 74);
  v225 = (uint64_t)(a2 + 26);
  v22 = *((_QWORD *)a2 + 37);
  if (!v22 || !*((_QWORD *)a2 + 34))
    goto LABEL_27;
  v23 = (const physx::PxBase **)(a2 + 68);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 184))(v22);
  if (v24)
  {
    v25 = v24;
    v26 = 0;
    while (1)
    {
      *(_QWORD *)v243 = 0;
      (*(void (**)(const physx::PxBase *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)*v232 + 192))(*v232, v243, 1, v26);
      if (*v23 == *(const physx::PxBase **)v243)
        break;
      v26 = (v26 + 1);
      if (v25 == (_DWORD)v26)
        goto LABEL_11;
    }
    if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 37) + 56))(*((_QWORD *)a2 + 37)) == *((_QWORD *)a2 + 68))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*v23 + 312))(v243);
      if ((v243[0] & 2) != 0)
      {
        v222 = *(unsigned int (****)(_QWORD, _BYTE *, const physx::PxBase *, const physx::PxBase *, float64x2_t *))(a5 + 8);
        if (*(_QWORD *)a5)
          v21 = *(__n128 *)*(_QWORD *)a5;
        else
          v21 = 0uLL;
        *(__n128 *)v243 = v21;
        *(_WORD *)&v243[16] = 6;
        LOWORD(v256.f64[0]) = 0;
        if (!v222 || (**v222)(v222, v243, *v23, *v232, &v256))
          goto LABEL_27;
      }
    }
    if (*((_BYTE *)a2 + 280) && *v23)
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 36), *v23, (int8x8_t)v21.n128_u64[0]);
    *((_QWORD *)a2 + 34) = 0;
    v23 = (const physx::PxBase **)(a2 + 74);
    if (!*((_BYTE *)a2 + 304))
      goto LABEL_26;
    v23 = (const physx::PxBase **)(a2 + 74);
    v27 = *v232;
    if (!*v232)
      goto LABEL_26;
    v28 = (physx::Cct::CharacterControllerManager **)(a2 + 78);
    v23 = (const physx::PxBase **)(a2 + 74);
  }
  else
  {
LABEL_11:
    if (*((_BYTE *)a2 + 304) && *v232)
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 39), *v232, (int8x8_t)v21.n128_u64[0]);
    *((_QWORD *)a2 + 37) = 0;
    if (!*((_BYTE *)a2 + 280))
      goto LABEL_26;
    v27 = *v23;
    if (!*v23)
      goto LABEL_26;
    v28 = (physx::Cct::CharacterControllerManager **)(a2 + 72);
  }
  physx::Cct::CharacterControllerManager::unregisterObservedObject(*v28, v27, (int8x8_t)v21.n128_u64[0]);
LABEL_26:
  *v23 = 0;
LABEL_27:
  v231 = (__int128 *)a5;
  v229 = v20;
  v227 = a1;
  v226 = a7;
  if (*((_QWORD *)a2 + 34))
    goto LABEL_28;
  if (a2[80] != -1)
    goto LABEL_82;
  v32 = *(_WORD *)(a5 + 16);
  if ((v32 & 2) != 0)
  {
    v33 = *((_QWORD *)a2 + 75) + 120;
    *(_QWORD *)v240 = off_24ED974E0;
    *(_QWORD *)&v240[8] = v33;
    v34 = *(__n128 **)a5;
    *(_QWORD *)&v240[16] = *(_QWORD *)(a5 + 8);
    *(_WORD *)&v240[24] = v32;
    v35 = v32 & 8 | 6;
    if (v34)
      v36 = *v34;
    else
      v36 = 0uLL;
    v266 = v36;
    v267 = v35;
    v58 = (*(float (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    v59 = *((double *)a2 + 64);
    v264 = (const physx::PxBase *)vcvt_f32_f64(*((float64x2_t *)a2 + 31));
    v265 = v59;
    *(_QWORD *)&v243[8] = 0;
    *(_QWORD *)&v243[16] = 0;
    *(_DWORD *)&v243[24] = -1;
    *(_WORD *)&v243[28] = 0;
    v244 = 0;
    *(_OWORD *)&v243[32] = 0uLL;
    *(_DWORD *)&v245[8] = 0;
    BYTE4(v246) = 0;
    v248 = 0;
    v249 = 0;
    *(_QWORD *)v243 = off_24ED96C60;
    *(_QWORD *)v245 = 2139095039;
    v60 = *((_QWORD *)a2 + 68);
    v61 = -*((float *)a2 + 10);
    *(float32x2_t *)&v256.f64[0] = vneg_f32(*(float32x2_t *)(a2 + 8));
    *(float *)&v256.f64[1] = v61;
    v263 = 0;
    if ((*(unsigned int (**)(uint64_t, const physx::PxBase **, float64x2_t *, _BYTE *, __int16 *, __n128 *, _BYTE *, _QWORD, float))(*(_QWORD *)v60 + 696))(v60, &v264, &v256, v243, &v263, &v266, v240, 0, v58 + 0.0))
    {
      if (HIDWORD(v249))
        v62 = (_BYTE *)v248;
      else
        v62 = &v243[8];
      v63 = *(_OWORD *)v62;
      *(_DWORD *)&v243[24] = *((_DWORD *)v62 + 4);
      *(_OWORD *)&v243[8] = v63;
      v64 = (_WORD *)(v248 + 20);
      if (!HIDWORD(v249))
        v64 = &v243[28];
      *(_WORD *)&v243[28] = *v64;
      v65 = (_DWORD *)(v248 + 24);
      if (!HIDWORD(v249))
        v65 = &v243[32];
      *(_DWORD *)&v243[32] = *v65;
      v66 = &v243[36];
      if (HIDWORD(v249))
        v66 = (_DWORD *)(v248 + 28);
      *(_DWORD *)&v243[36] = *v66;
      v67 = &v243[40];
      if (HIDWORD(v249))
        v67 = (_DWORD *)(v248 + 32);
      *(_DWORD *)&v243[40] = *v67;
      v68 = &v243[44];
      if (HIDWORD(v249))
        v68 = (_DWORD *)(v248 + 36);
      *(_DWORD *)&v243[44] = *v68;
      v69 = &v244;
      if (HIDWORD(v249))
        v69 = (uint64_t *)(v248 + 40);
      LODWORD(v244) = *(_DWORD *)v69;
      v70 = (_DWORD *)&v244 + 1;
      if (HIDWORD(v249))
        v70 = (_DWORD *)(v248 + 44);
      HIDWORD(v244) = *v70;
      v71 = (_DWORD *)(v248 + 48);
      if (!HIDWORD(v249))
        v71 = v245;
      LODWORD(v63) = *v71;
      *(_DWORD *)v245 = *v71;
      v72 = (_QWORD *)(v248 + 52);
      if (!HIDWORD(v249))
        v72 = &v245[4];
      *(_QWORD *)&v245[4] = *v72;
      v73 = *(const physx::PxBase **)&v243[16];
      if (*((_BYTE *)a2 + 280))
      {
        v74 = (const physx::PxBase *)*((_QWORD *)a2 + 34);
        if (v74 != *(const physx::PxBase **)&v243[16])
        {
          if (v74)
            physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 36), v74, *(int8x8_t *)&v63);
          if (v73)
            physx::Cct::CharacterControllerManager::registerObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 36), v73, *(int8x8_t *)&v63);
        }
      }
      *((_QWORD *)a2 + 34) = v73;
      v75 = *(const physx::PxBase **)&v243[8];
      if (*((_BYTE *)a2 + 304))
      {
        v76 = *v232;
        if (*v232 != *(const physx::PxBase **)&v243[8])
        {
          if (v76)
            physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 39), v76, *(int8x8_t *)&v63);
          if (v75)
            physx::Cct::CharacterControllerManager::registerObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 39), v75, *(int8x8_t *)&v63);
        }
      }
      *((_QWORD *)a2 + 37) = v75;
      v77 = *(_QWORD *)&v243[16];
      (*(void (**)(float64x2_t *__return_ptr))(**(_QWORD **)&v243[8] + 152))(&v256);
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v77 + 160))(&v268, v77);
      v78 = (float)(*((float *)&v256.f64[1] + 1) * *((float *)&v256.f64[1] + 1)) + -0.5;
      v79 = (float)((float)((float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)) * *((float *)v256.f64 + 1))
                  + (float)(*(float *)v256.f64 * (float)(*(float *)&v269 + *(float *)&v269)))
          + (float)(*(float *)&v256.f64[1] * (float)(v270 + v270));
      v80 = *(float *)&v257
          + (float)((float)((float)(*((float *)&v256.f64[1] + 1)
                                  * (float)((float)(*((float *)v256.f64 + 1) * (float)(v270 + v270))
                                          - (float)(*(float *)&v256.f64[1]
                                                  * (float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)))))
                          + (float)((float)(*(float *)&v269 + *(float *)&v269) * v78))
                  + (float)(*(float *)v256.f64 * v79));
      v81 = *((float *)&v257 + 1)
          + (float)((float)((float)(*((float *)&v256.f64[1] + 1)
                                  * (float)((float)(*(float *)&v256.f64[1] * (float)(*(float *)&v269 + *(float *)&v269))
                                          - (float)(*(float *)v256.f64 * (float)(v270 + v270))))
                          + (float)((float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)) * v78))
                  + (float)(*((float *)v256.f64 + 1) * v79));
      v82 = *(float *)&v258
          + (float)((float)((float)(*((float *)&v256.f64[1] + 1)
                                  * (float)((float)(*(float *)v256.f64
                                                  * (float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)))
                                          - (float)(*((float *)v256.f64 + 1) * (float)(*(float *)&v269 + *(float *)&v269))))
                          + (float)((float)(v270 + v270) * v78))
                  + (float)(*(float *)&v256.f64[1] * v79));
      v83 = (float)((float)((float)(*(float *)v256.f64 * *((float *)&v268 + 3))
                          + (float)(*((float *)&v256.f64[1] + 1) * *(float *)&v268))
                  + (float)(*((float *)v256.f64 + 1) * *((float *)&v268 + 2)))
          - (float)(*((float *)&v268 + 1) * *(float *)&v256.f64[1]);
      v84 = (float)((float)((float)(*((float *)v256.f64 + 1) * *((float *)&v268 + 3))
                          + (float)(*((float *)&v256.f64[1] + 1) * *((float *)&v268 + 1)))
                  + (float)(*(float *)&v256.f64[1] * *(float *)&v268))
          - (float)(*((float *)&v268 + 2) * *(float *)v256.f64);
      v85 = (float)((float)((float)(*(float *)&v256.f64[1] * *((float *)&v268 + 3))
                          + (float)(*((float *)&v256.f64[1] + 1) * *((float *)&v268 + 2)))
                  + (float)(*(float *)v256.f64 * *((float *)&v268 + 1)))
          - (float)(*(float *)&v268 * *((float *)v256.f64 + 1));
      v86 = (float)((float)((float)(*((float *)&v256.f64[1] + 1) * *((float *)&v268 + 3))
                          - (float)(*(float *)v256.f64 * *(float *)&v268))
                  - (float)(*((float *)v256.f64 + 1) * *((float *)&v268 + 1)))
          - (float)(*(float *)&v256.f64[1] * *((float *)&v268 + 2));
      v87 = 0.0 - (float)((float)(v58 - *(float *)v245) * *((float *)a2 + 10));
      *(float32x2_t *)v18 = vsub_f32(0, vmul_n_f32(*(float32x2_t *)(a2 + 8), v58 - *(float *)v245));
      *((float *)a2 + 89) = v87;
      v88 = (float)(0.0 - v80) + (float)(0.0 - v80);
      v89 = (float)(0.0 - v81) + (float)(0.0 - v81);
      v90 = (float)(0.0 - v82) + (float)(0.0 - v82);
      v91 = (float)(v86 * v86) + -0.5;
      v92 = (float)((float)(v89 * v84) + (float)(v83 * v88)) + (float)(v85 * v90);
      *((float *)a2 + 84) = (float)((float)(v88 * v91) - (float)((float)((float)(v84 * v90) - (float)(v85 * v89)) * v86))
                          + (float)(v83 * v92);
      *((float *)a2 + 85) = (float)((float)(v89 * v91) - (float)((float)((float)(v85 * v88) - (float)(v83 * v90)) * v86))
                          + (float)(v84 * v92);
      *((float *)a2 + 86) = (float)((float)(v90 * v91) - (float)((float)((float)(v83 * v89) - (float)(v84 * v88)) * v86))
                          + (float)(v85 * v92);
      a2[138] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 68) + 64))(*((_QWORD *)a2 + 68)) - 1;
    }
    if (a6)
    {
      v256 = 0uLL;
      LODWORD(v257) = -1;
      WORD2(v257) = 0;
      v259 = 0;
      v260 = 0;
      v258 = 0;
      v261 = 2139095039;
      v262 = 0;
      v255 = 0;
      v93 = -*((float *)a2 + 10);
      *(float32x2_t *)&v268 = vneg_f32(*(float32x2_t *)(a2 + 8));
      *((float *)&v268 + 2) = v93;
      v94 = physx::Cct::ObstacleContext::raycastSingle(a6, (uint64_t)&v256, (float32x2_t *)&v264, (float32x2_t *)&v268, &v255, v58 + 0.0);
      if (v94)
      {
        v95 = *(float *)&v261;
        a9.n128_u32[0] = *(_DWORD *)v245;
        if (*(float *)&v261 < *(float *)v245)
        {
          a2[80] = v255;
          v96 = v58 - v95;
          v97 = 0.0 - (float)(v96 * *((float *)a2 + 10));
          *((float32x2_t *)v18 + 3) = vsub_f32(0, vmul_n_f32(*(float32x2_t *)(a2 + 8), v96));
          *((float *)a2 + 95) = v97;
          v268 = 0uLL;
          v269 = 0;
          worldToLocal((float *)&v253, v94, (double *)&v268);
          v21.n128_u32[1] = HIDWORD(v253);
          *((_QWORD *)a2 + 45) = v253;
          a2[92] = v254;
        }
      }
    }
    if (*((_QWORD *)a2 + 34))
    {
LABEL_28:
      v29 = *v232;
      if (*((_WORD *)*v232 + 4) == 6)
      {
        v30 = 0;
        v21.n128_u32[0] = 0;
        v31 = 1.0;
        a9.n128_u32[0] = 0;
        a10.n128_u32[0] = 0;
        goto LABEL_87;
      }
      v37 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 68) + 64))(*((_QWORD *)a2 + 68));
      if (v37 == a2[138])
        goto LABEL_39;
      a2[138] = v37;
      v38 = *((double *)a2 + 70);
      v39 = *((double *)a2 + 71);
      *((double *)a2 + 71) = v38;
      v40 = (void (***)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD))*((_QWORD *)a2 + 11);
      if (v40)
      {
        (**v40)(v243, v40, *((_QWORD *)a2 + 34), *((_QWORD *)a2 + 37));
        v30 = v243[0];
      }
      else
      {
        v30 = 0;
      }
      v41 = v38 - v39;
      v42 = *((_QWORD *)a2 + 34);
      (*(void (**)(_BYTE *__return_ptr, const physx::PxBase *))(*(_QWORD *)v29 + 152))(v243, v29);
      (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v42 + 160))(&v256, v42);
      v43 = (float)(*(float *)&v243[12] * *(float *)&v243[12]) + -0.5;
      v44 = (float)((float)((float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)) * *(float *)&v243[4])
                  + (float)(*(float *)v243 * (float)(*(float *)&v257 + *(float *)&v257)))
          + (float)(*(float *)&v243[8] * (float)(*(float *)&v258 + *(float *)&v258));
      a9.n128_f32[0] = *(float *)&v243[16]
                     + (float)((float)((float)(*(float *)&v243[12]
                                             * (float)((float)(*(float *)&v243[4]
                                                             * (float)(*(float *)&v258 + *(float *)&v258))
                                                     - (float)(*(float *)&v243[8]
                                                             * (float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)))))
                                     + (float)((float)(*(float *)&v257 + *(float *)&v257) * v43))
                             + (float)(*(float *)v243 * v44));
      a10.n128_f32[0] = *(float *)&v243[20]
                      + (float)((float)((float)(*(float *)&v243[12]
                                              * (float)((float)(*(float *)&v243[8]
                                                              * (float)(*(float *)&v257 + *(float *)&v257))
                                                      - (float)(*(float *)v243
                                                              * (float)(*(float *)&v258 + *(float *)&v258))))
                                      + (float)((float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)) * v43))
                              + (float)(*(float *)&v243[4] * v44));
      v21.n128_f32[0] = *(float *)&v243[24]
                      + (float)((float)((float)(*(float *)&v243[12]
                                              * (float)((float)(*(float *)v243
                                                              * (float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)))
                                                      - (float)(*(float *)&v243[4]
                                                              * (float)(*(float *)&v257 + *(float *)&v257))))
                                      + (float)((float)(*(float *)&v258 + *(float *)&v258) * v43))
                              + (float)(*(float *)&v243[8] * v44));
      v45 = (float)((float)((float)(*(float *)v243 * *((float *)&v256.f64[1] + 1))
                          + (float)(*(float *)&v243[12] * *(float *)v256.f64))
                  + (float)(*(float *)&v243[4] * *(float *)&v256.f64[1]))
          - (float)(*((float *)v256.f64 + 1) * *(float *)&v243[8]);
      v46 = (float)((float)((float)(*(float *)&v243[4] * *((float *)&v256.f64[1] + 1))
                          + (float)(*(float *)&v243[12] * *((float *)v256.f64 + 1)))
                  + (float)(*(float *)&v243[8] * *(float *)v256.f64))
          - (float)(*(float *)&v256.f64[1] * *(float *)v243);
      v47 = (float)((float)((float)(*(float *)&v243[8] * *((float *)&v256.f64[1] + 1))
                          + (float)(*(float *)&v243[12] * *(float *)&v256.f64[1]))
                  + (float)(*(float *)v243 * *((float *)v256.f64 + 1)))
          - (float)(*(float *)v256.f64 * *(float *)&v243[4]);
      v48 = (float)((float)((float)(*(float *)&v243[12] * *((float *)&v256.f64[1] + 1))
                          - (float)(*(float *)v243 * *(float *)v256.f64))
                  - (float)(*(float *)&v243[4] * *((float *)v256.f64 + 1)))
          - (float)(*(float *)&v243[8] * *(float *)&v256.f64[1]);
      v49 = *((float *)a2 + 84) + *((float *)a2 + 84);
      v50 = *((float *)a2 + 85) + *((float *)a2 + 85);
      v51 = *((float *)a2 + 86) + *((float *)a2 + 86);
      v52 = (float)(v48 * v48) + -0.5;
      v53 = (float)((float)(v46 * v50) + (float)(v45 * v49)) + (float)(v47 * v51);
      v54 = (float)((float)(v48 * (float)((float)(v46 * v51) - (float)(v47 * v50))) + (float)(v49 * v52))
          + (float)(v45 * v53);
      v55 = (float)((float)(v48 * (float)((float)(v47 * v49) - (float)(v45 * v51))) + (float)(v50 * v52))
          + (float)(v46 * v53);
      v56 = (float)((float)(v48 * (float)((float)(v45 * v50) - (float)(v46 * v49))) + (float)(v51 * v52))
          + (float)(v47 * v53);
      v57 = a10.n128_f32[0] + v55;
      a10.n128_f32[0] = (float)(a9.n128_f32[0] + v54) - *((float *)a2 + 87);
      a9.n128_f32[0] = v57 - *((float *)a2 + 88);
      v21.n128_f32[0] = (float)(v21.n128_f32[0] + v56) - *((float *)a2 + 89);
      if ((v30 & 4) != 0)
      {
LABEL_39:
        v224 = *((_BYTE *)a2 + 585) != 0;
        goto LABEL_99;
      }
LABEL_86:
      v113 = v41;
      v31 = 1.0 / v113;
LABEL_87:
      v114 = fabsf(a10.n128_f32[0]) > 0.000001;
      if (fabsf(a9.n128_f32[0]) > 0.000001)
        v114 = 1;
      if (fabsf(v21.n128_f32[0]) > 0.000001)
        v114 = 1;
      v224 = v114;
      if (v114)
      {
        *((_BYTE *)a2 + 585) = 1;
        v115 = *((float *)a2 + 8);
        v116 = *((float *)a2 + 9);
        v117 = *((float *)a2 + 10);
        v118 = (float)((float)(a9.n128_f32[0] * v116) + (float)(a10.n128_f32[0] * v115))
             + (float)(v21.n128_f32[0] * v117);
        v119 = v115 * v118;
        v120 = v116 * v118;
        v121 = v117 * v118;
        if (v118 > 0.0)
        {
          v122 = a3[2];
          a3[1] = a3[1] + v119;
          a3[2] = v122 + v120;
          a3[3] = a3[3] + v121;
          if ((v30 & 1) == 0)
            goto LABEL_98;
          goto LABEL_97;
        }
        *(float *)v252 = v119 + *(float *)v252;
        *(float *)&v252[4] = v120 + *(float *)&v252[4];
        *(float *)&v252[8] = v121 + *(float *)&v252[8];
        if ((v30 & 1) != 0)
        {
LABEL_97:
          *(float *)v252 = (float)(a10.n128_f32[0] - v119) + *(float *)v252;
          *(float *)&v252[4] = (float)(a9.n128_f32[0] - v120) + *(float *)&v252[4];
          *(float *)&v252[8] = (float)(v21.n128_f32[0] - v121) + *(float *)&v252[8];
        }
      }
      else
      {
        *((_BYTE *)a2 + 585) = 0;
      }
LABEL_98:
      a10.n128_f32[0] = v31 * a10.n128_f32[0];
      a9.n128_f32[0] = v31 * a9.n128_f32[0];
      a2[130] = a10.n128_u32[0];
      v21.n128_f32[0] = v31 * v21.n128_f32[0];
      a2[131] = a9.n128_u32[0];
      a2[132] = v21.n128_u32[0];
      goto LABEL_99;
    }
  }
  if (a2[80] != -1)
  {
LABEL_82:
    v98 = *((double *)a2 + 70);
    v99 = *((double *)a2 + 71);
    *((double *)a2 + 71) = v98;
    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 72))(a6);
    v101 = *((_QWORD *)a2 + 11);
    if (v101)
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v243, v101, v100);
      v30 = v243[0];
    }
    else
    {
      v30 = 1;
    }
    v41 = v98 - v99;
    a10.n128_u64[0] = *(_QWORD *)(v100 + 16);
    a10.n128_f32[0] = a10.n128_f64[0];
    v102 = *(double *)(v100 + 24);
    v103 = *(double *)(v100 + 32);
    v104 = *(float *)(v100 + 40);
    v105 = *(float *)(v100 + 44);
    v106 = *(float *)(v100 + 48);
    v107 = *(float *)(v100 + 52);
    v108 = *((float *)a2 + 90) + *((float *)a2 + 90);
    v109 = *((float *)a2 + 91) + *((float *)a2 + 91);
    v110 = *((float *)a2 + 92) + *((float *)a2 + 92);
    v111 = (float)(v107 * v107) + -0.5;
    v112 = (float)((float)(v105 * v109) + (float)(v104 * v108)) + (float)(v106 * v110);
    a10.n128_f32[0] = (float)((float)((float)((float)(v107 * (float)((float)(v105 * v110) - (float)(v106 * v109)))
                                            + (float)(v108 * v111))
                                    + (float)(v104 * v112))
                            + a10.n128_f32[0])
                    - *((float *)a2 + 93);
    a9.n128_f32[0] = (float)((float)((float)((float)(v107 * (float)((float)(v106 * v108) - (float)(v104 * v110)))
                                           + (float)(v109 * v111))
                                   + (float)(v105 * v112))
                           + v102)
                   - *((float *)a2 + 94);
    v21.n128_f32[0] = (float)((float)((float)((float)(v107 * (float)((float)(v104 * v109) - (float)(v105 * v108)))
                                            + (float)(v110 * v111))
                                    + (float)(v106 * v112))
                            + v103)
                    - *((float *)a2 + 95);
    if ((v30 & 4) != 0)
      goto LABEL_39;
    goto LABEL_86;
  }
  v224 = 0;
  *((_BYTE *)a2 + 585) = 0;
  v21.n128_u64[0] = 0;
  *((_QWORD *)a2 + 65) = 0;
  a2[132] = 0;
LABEL_99:
  v123 = *((_QWORD *)a2 + 75);
  v233 = (uint64_t *)(v123 + 56);
  v234 = (uint64_t *)(v123 + 40);
  v235 = (uint64_t *)(v123 + 88);
  v236 = (uint64_t *)(v123 + 72);
  v124 = (*(uint64_t (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)v123 + 16))(v123, v21, a9, a10);
  if (v124)
  {
    v125 = 0;
    v126 = *(_DWORD ***)(*((_QWORD *)a2 + 75) + 104);
    v127 = (unint64_t)v124 << 16;
    do
    {
      v128 = *v126;
      if (*v126 == a2)
        goto LABEL_119;
      v129 = *(_QWORD *)(a5 + 24);
      if (v129)
      {
        v130 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2);
        v131 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v128 + 32))(v128);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v130, v131))
          goto LABEL_119;
      }
      v132 = v128[2];
      if (v132 == 1)
      {
        physx::Cct::CapsuleController::getCapsule((uint64_t)(v128 - 2), (uint64_t)v243);
        v135 = *(_DWORD *)(v123 + 96);
        if ((*(_DWORD *)(v123 + 100) & 0x7FFFFFFFu) <= v135)
        {
          physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::growAndPushBack((uint64_t)v235, (__int128 *)v243);
        }
        else
        {
          v136 = *(_QWORD *)(v123 + 88) + 56 * v135;
          *(_OWORD *)v136 = *(_OWORD *)v243;
          *(_OWORD *)(v136 + 16) = *(_OWORD *)&v243[16];
          *(_OWORD *)(v136 + 32) = *(_OWORD *)&v243[32];
          *(_QWORD *)(v136 + 48) = v244;
          ++*(_DWORD *)(v123 + 96);
        }
        *(_QWORD *)&v256.f64[0] = v125 & 0xFFFF0000;
        v138 = *(unsigned int *)(v123 + 80);
        if ((*(_DWORD *)(v123 + 84) & 0x7FFFFFFFu) <= v138)
        {
          v139 = v123 + 72;
          goto LABEL_118;
        }
        *(_QWORD *)(*(_QWORD *)(v123 + 72) + 8 * v138) = v125 & 0xFFFF0000;
        *(_DWORD *)(v123 + 80) = v138 + 1;
      }
      else if (!v132)
      {
        physx::Cct::BoxController::getOBB((uint64_t)(v128 - 2), (uint64_t)v243);
        v133 = *(_DWORD *)(v123 + 64);
        if ((*(_DWORD *)(v123 + 68) & 0x7FFFFFFFu) <= v133)
        {
          physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::growAndPushBack((uint64_t)v233, (__int128 *)v243);
        }
        else
        {
          v134 = *(_QWORD *)(v123 + 56) + 56 * v133;
          *(_OWORD *)v134 = *(_OWORD *)v243;
          *(_QWORD *)(v134 + 16) = *(_QWORD *)&v243[16];
          *(_OWORD *)(v134 + 24) = *(_OWORD *)&v243[24];
          *(_QWORD *)(v134 + 40) = *(_QWORD *)&v243[40];
          *(_DWORD *)(v134 + 48) = v244;
          ++*(_DWORD *)(v123 + 64);
        }
        *(_QWORD *)&v256.f64[0] = v125 & 0xFFFF0000;
        v137 = *(unsigned int *)(v123 + 48);
        if ((*(_DWORD *)(v123 + 52) & 0x7FFFFFFFu) <= v137)
        {
          v139 = v123 + 40;
LABEL_118:
          physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack(v139, &v256);
          goto LABEL_119;
        }
        *(_QWORD *)(*(_QWORD *)(v123 + 40) + 8 * v137) = v125 & 0xFFFF0000;
        *(_DWORD *)(v123 + 48) = v137 + 1;
      }
LABEL_119:
      v125 += 0x10000;
      ++v126;
    }
    while (v127 != v125);
  }
  v228 = a3;
  v230 = *(double *)&a2;
  if (a6)
  {
    v140 = *(unsigned int *)(a6 + 16);
    if ((_DWORD)v140)
    {
      v141 = 0;
      v142 = 0;
      v144 = (v223 & 4) == 0 || v238 == 0;
      v237 = v144;
      v145 = 80 * v140;
      do
      {
        v146 = *(_QWORD *)(a6 + 8);
        v147 = v146 + v142;
        v148 = (float64x2_t *)(v146 + v142 + 24);
        v256 = *v148;
        v257 = *(_QWORD *)(v146 + v142 + 40);
        *(_QWORD *)&v149 = *(_QWORD *)(v146 + v142 + 64);
        v258 = v149;
        v150 = *(_DWORD *)(v146 + v142 + 72);
        LODWORD(v259) = v150;
        v151 = *(_DWORD *)(v146 + v142 + 48);
        HIDWORD(v259) = v151;
        v152 = *(_DWORD *)(v146 + v142 + 52);
        LODWORD(v260) = v152;
        v153 = *(_DWORD *)(v146 + v142 + 56);
        HIDWORD(v260) = v153;
        v154 = *(_DWORD *)(v146 + v142 + 60);
        LODWORD(v261) = v154;
        v155 = *(_DWORD *)(v123 + 64);
        if ((*(_DWORD *)(v123 + 68) & 0x7FFFFFFFu) <= v155)
        {
          physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::growAndPushBack((uint64_t)v233, (__int128 *)&v256);
        }
        else
        {
          v156 = *(_QWORD *)(v123 + 56) + 56 * v155;
          v157 = *v148;
          *(_QWORD *)(v156 + 16) = *(_QWORD *)(v146 + v142 + 40);
          *(float64x2_t *)v156 = v157;
          *((_QWORD *)&v149 + 1) = __PAIR64__(v151, v150);
          *(_OWORD *)(v156 + 24) = v149;
          *(_DWORD *)(v156 + 40) = v152;
          *(_DWORD *)(v156 + 44) = v153;
          *(_DWORD *)(v156 + 48) = v154;
          ++*(_DWORD *)(v123 + 64);
        }
        *(_QWORD *)v243 = v141 & 0xFFFF0000 | 1;
        v158 = *(unsigned int *)(v123 + 48);
        if ((*(_DWORD *)(v123 + 52) & 0x7FFFFFFFu) <= v158)
        {
          physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack((uint64_t)v234, v243);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v123 + 40) + 8 * v158) = v141 & 0xFFFF0000 | 1;
          *(_DWORD *)(v123 + 48) = v158 + 1;
        }
        if (!v237)
        {
          memset(v243, 0, 32);
          *(_OWORD *)&v243[32] = 0x3F80000000000000uLL;
          v244 = 0;
          *(_QWORD *)&v245[4] = 0;
          v246 = 0;
          *(_DWORD *)v245 = 1065353216;
          v247 = 1065353216;
          v248 = 0;
          v249 = 0;
          v250 = 1065353216;
          v251 = v238;
          *(_DWORD *)&v243[4] = -16711681;
          v159 = *(double *)(v146 + v142 + 40);
          *(_OWORD *)v240 = *(_OWORD *)(v147 + 48);
          *(float32x2_t *)&v240[16] = vcvt_f32_f64(*v148);
          *(float *)&v240[24] = v159;
          physx::Cm::RenderOutput::operator<<((uint64_t)v243, (uint64_t)v240);
          v160 = -*(float *)(v147 + 72);
          *(float32x2_t *)v240 = vneg_f32(*(float32x2_t *)(v147 + 64));
          *(float *)&v240[8] = v160;
          *(_QWORD *)&v240[12] = *(_QWORD *)(v147 + 64);
          *(_DWORD *)&v240[20] = *(_DWORD *)(v147 + 72);
          v240[24] = 1;
          physx::Cm::operator<<(v243, (uint64_t *)v240);
        }
        v142 += 80;
        v141 += 0x10000;
      }
      while (v145 != v142);
    }
    v161 = *(unsigned int *)(a6 + 32);
    if ((_DWORD)v161)
    {
      v162 = 0;
      v163 = 0;
      v165 = (v223 & 4) == 0 || v238 == 0;
      v166 = 72 * v161;
      while (1)
      {
        v167 = *(_QWORD *)(a6 + 24) + v163;
        v168 = *(float *)(v167 + 48);
        v169 = *(float *)(v167 + 52);
        v170 = v168 + v168;
        v172 = *(float *)(v167 + 56);
        v171 = *(float *)(v167 + 60);
        v173 = v171 + v171;
        v174 = (float)((float)(v171 * (float)(v171 + v171)) + -1.0) + (float)(v168 * (float)(v168 + v168));
        v175 = (float)(v170 * v169) + (float)(v172 * (float)(v171 + v171));
        v176 = (float)(v170 * v172) - (float)(v169 * v173);
        v177 = *(float *)(v167 + 64);
        v178 = v177 * v175;
        v179 = v176 * v177;
        v180 = (float)(v174 * v177);
        v181 = *(double *)(v167 + 24);
        v182 = *(double *)(v167 + 32);
        v183 = v178;
        v184 = *(double *)(v167 + 40);
        v185 = v179;
        *(double *)v240 = v181 - v180;
        *(double *)&v240[8] = v182 - v183;
        *(double *)&v240[16] = v184 - v185;
        *(double *)&v240[24] = v181 + v180;
        *(double *)&v241 = v182 + v183;
        *((double *)&v241 + 1) = v184 + v185;
        LODWORD(v242) = *(_DWORD *)(v167 + 68);
        v186 = *(_DWORD *)(v123 + 96);
        if ((*(_DWORD *)(v123 + 100) & 0x7FFFFFFFu) <= v186)
        {
          physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::growAndPushBack((uint64_t)v235, (__int128 *)v240);
        }
        else
        {
          v187 = *(_QWORD *)(v123 + 88) + 56 * v186;
          *(_OWORD *)v187 = *(_OWORD *)v240;
          *(_OWORD *)(v187 + 16) = *(_OWORD *)&v240[16];
          *(_OWORD *)(v187 + 32) = v241;
          *(_QWORD *)(v187 + 48) = v242;
          ++*(_DWORD *)(v123 + 96);
        }
        *(_QWORD *)v243 = v162 & 0xFFFF0000 | 2;
        v188 = *(unsigned int *)(v123 + 80);
        if ((*(_DWORD *)(v123 + 84) & 0x7FFFFFFFu) > v188)
          break;
        physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack((uint64_t)v236, v243);
        if (!v165)
          goto LABEL_153;
LABEL_154:
        v163 += 72;
        v162 += 0x10000;
        if (v166 == v163)
          goto LABEL_155;
      }
      *(_QWORD *)(*(_QWORD *)(v123 + 72) + 8 * v188) = v162 & 0xFFFF0000 | 2;
      *(_DWORD *)(v123 + 80) = v188 + 1;
      if (v165)
        goto LABEL_154;
LABEL_153:
      *(_OWORD *)&v243[32] = 0x3F80000000000000uLL;
      memset(v243, 0, 32);
      v244 = 0;
      *(_QWORD *)&v245[4] = 0;
      v246 = 0;
      *(_DWORD *)v245 = 1065353216;
      v247 = 1065353216;
      v248 = 0;
      v249 = 0;
      v250 = 1065353216;
      v251 = v238;
      *(_DWORD *)&v243[4] = -16711681;
      v190 = *(float *)(v167 + 64);
      v189 = *(float *)(v167 + 68);
      v191 = *(double *)(v167 + 40);
      v268 = *(_OWORD *)(v167 + 48);
      v269 = (uint64_t)vcvt_f32_f64(*(float64x2_t *)(v167 + 24));
      v270 = v191;
      physx::PxMat44::PxMat44((uint64_t)&v256, (uint64_t)&v268);
      physx::Cm::RenderOutput::outputCapsule((uint64_t)v243, (float32x2_t *)&v256, v189, v190);
      goto LABEL_154;
    }
  }
LABEL_155:
  *(_DWORD *)v243 = *(_DWORD *)(v123 + 64);
  if (*(_DWORD *)v243)
  {
    v192 = *v233;
    v193 = *v234;
  }
  else
  {
    v192 = 0;
    v193 = 0;
  }
  *(_QWORD *)&v243[8] = v192;
  *(_QWORD *)&v243[16] = v193;
  *(_DWORD *)&v243[24] = *(_DWORD *)(v123 + 96);
  if (*(_DWORD *)&v243[24])
  {
    v194 = *v235;
    v195 = *v236;
  }
  else
  {
    v194 = 0;
    v195 = 0;
  }
  *(_QWORD *)&v243[32] = v194;
  *(_QWORD *)&v243[40] = v195;
  v256.f64[0] = v230;
  *(_QWORD *)&v256.f64[1] = a6;
  *(_QWORD *)&v268 = *(_QWORD *)(*(_QWORD *)&v230 + 544);
  *((_QWORD *)&v268 + 1) = v238;
  v269 = *(_QWORD *)(*(_QWORD *)&v230 + 600) + 120;
  *(_DWORD *)(*(_QWORD *)&v230 + 468) &= ~2u;
  v266.n128_u64[0] = 0;
  v264 = 0;
  v196 = v228[1];
  v198 = v228[2];
  v197 = v228[3];
  physx::Cct::SweepTest::moveCharacter(v240, v225, (uint64_t *)&v268, &v256, (uint64_t)v228, (float *)v252, (unsigned int *)v243, v231, a8, v226, v224, &v266, &v264);
  v200 = v240[0];
  *v227 = v240[0];
  v201 = *(_DWORD *)(*(_QWORD *)&v230 + 468);
  if ((v201 & 1) != 0)
  {
    *(_DWORD *)(*(_QWORD *)&v230 + 468) = v201 | 2;
    v228[1] = v196;
    v228[2] = v198;
    v228[3] = v197;
    v202 = *(float *)v252;
    if (*(_DWORD *)(*(_QWORD *)&v230 + 12) == 1)
    {
      _S3 = *(_DWORD *)&v252[8];
      _D4 = *(float32x2_t *)(*(_QWORD *)&v230 + 36);
      __asm { FMLA            S2, S3, V4.S[1] }
      v202 = *(float *)(*(_QWORD *)&v230 + 32) * _S2;
      v209 = vmul_n_f32(_D4, _S2);
    }
    else
    {
      v209 = *(float32x2_t *)&v252[4];
    }
    *(float *)v240 = v202;
    *(float32x2_t *)&v240[4] = v209;
    physx::Cct::SweepTest::moveCharacter((char *)&v253, v225, (uint64_t *)&v268, &v256, (uint64_t)v228, (float *)v240, (unsigned int *)v243, v231, a8, v226, v224, &v266, &v264);
    v200 = v253;
    *v227 = v253;
    *(_DWORD *)(*(_QWORD *)&v230 + 468) &= ~2u;
  }
  v210 = (const physx::PxBase *)v266.n128_u64[0];
  if (*(_BYTE *)(*(_QWORD *)&v230 + 304))
  {
    v211 = *v232;
    if (*v232 != (const physx::PxBase *)v266.n128_u64[0])
    {
      if (v211)
        physx::Cct::CharacterControllerManager::unregisterObservedObject(*(physx::Cct::CharacterControllerManager **)(*(_QWORD *)&v230 + 312), v211, v199);
      if (v210)
        physx::Cct::CharacterControllerManager::registerObservedObject(*(physx::Cct::CharacterControllerManager **)(*(_QWORD *)&v230 + 312), v210, v199);
    }
  }
  *(_QWORD *)(*(_QWORD *)&v230 + 296) = v210;
  v212 = v264;
  if (*(_BYTE *)(*(_QWORD *)&v230 + 280))
  {
    v213 = *(const physx::PxBase **)(*(_QWORD *)&v230 + 272);
    if (v213 != v264)
    {
      if (v213)
        physx::Cct::CharacterControllerManager::unregisterObservedObject(*(physx::Cct::CharacterControllerManager **)(*(_QWORD *)&v230 + 288), v213, v199);
      if (v212)
        physx::Cct::CharacterControllerManager::registerObservedObject(*(physx::Cct::CharacterControllerManager **)(*(_QWORD *)&v230 + 288), v212, v199);
    }
  }
  *(_QWORD *)(*(_QWORD *)&v230 + 272) = v212;
  *(_BYTE *)(*(_QWORD *)&v230 + 584) = v200;
  v214 = *(_OWORD *)(v228 + 1);
  *(double *)(*(_QWORD *)&v230 + 512) = v228[3];
  *(_OWORD *)(*(_QWORD *)&v230 + 496) = v214;
  v215 = *(_QWORD *)(*(_QWORD *)&v230 + 488);
  if (v215)
  {
    v216 = v196 - v228[1];
    v217 = v198 - v228[2];
    v218 = v197 - v228[3];
    if ((float)((float)((float)(v217 * v217) + (float)(v216 * v216)) + (float)(v218 * v218)) != 0.0)
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v215 + 152))(v240);
      v219 = *(double *)(*(_QWORD *)&v230 + 512);
      *(float32x2_t *)&v240[16] = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)&v230 + 496));
      *(float *)&v240[24] = v219;
      *(_OWORD *)v240 = *(_OWORD *)(*(_QWORD *)&v230 + 16);
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(*(_QWORD *)&v230 + 488) + 496))(*(_QWORD *)(*(_QWORD *)&v230 + 488), v240);
    }
  }
  v220 = *(unsigned int **)(*(_QWORD *)&v230 + 600);
  resetOrClear<physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>>((uint64_t)(v220 + 10));
  if ((v220[17] & 0x7FFFFFFF) != 0)
  {
    if (v220[16] <= (v220[17] & 0x7FFFFFFF) >> 1)
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v220 + 14));
      physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::recreate((uint64_t)(v220 + 14), v220[16]);
    }
    else
    {
      v220[16] = 0;
    }
  }
  result = resetOrClear<physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>>((uint64_t)(v220 + 18));
  if ((v220[25] & 0x7FFFFFFF) != 0)
  {
    if (v220[24] <= (v220[25] & 0x7FFFFFFF) >> 1)
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v220 + 22));
      result = physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::recreate((uint64_t)(v220 + 22), v220[24]);
      if (!v229)
        return result;
      goto LABEL_191;
    }
    v220[24] = 0;
  }
  if (!v229)
    return result;
LABEL_191:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)&v230 + 592));
  return result;
}

uint64_t physx::Cct::BoxController::move@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>, float a6@<S0>, __n128 a7@<Q1>)
{
  __n128 v7;
  void (**v9)(physx::Cct::SweptBox *__hidden);
  __n128 v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int32 v15;

  v9 = &off_24ED97588;
  v13 = 0;
  v11 = *(_QWORD *)(a1 + 520);
  v10 = *(__n128 *)(a1 + 504);
  v7 = v10;
  v7.n128_u32[0] = *(_DWORD *)(a1 + 624);
  v14 = *(_QWORD *)(a1 + 616);
  v15 = v7.n128_u32[0];
  v12 = v14;
  return physx::Cct::Controller::move(a5, (_DWORD *)(a1 + 8), (double *)&v9, a2, a3, a4, 0, a6, a7, v7);
}

uint64_t physx::Cct::CapsuleController::move@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>, float a6@<S0>, __n128 a7@<Q1>)
{
  __n128 v7;
  float v8;
  void (**v10)(physx::Cct::SweptCapsule *__hidden);
  __n128 v11;
  uint64_t v12;
  float v13;
  int v14;
  float v15;
  float v16;

  v10 = &off_24ED975B0;
  v14 = 1;
  v12 = *(_QWORD *)(a1 + 520);
  v11 = *(__n128 *)(a1 + 504);
  v7 = v11;
  v8 = *(float *)(a1 + 620);
  v15 = *(float *)(a1 + 616);
  v16 = v8;
  v7.n128_f32[0] = v15 + (float)(v8 * 0.5);
  v13 = v7.n128_f32[0];
  return physx::Cct::Controller::move(a5, (_DWORD *)(a1 + 8), (double *)&v10, a2, a3, a4, *(_DWORD *)(a1 + 624) == 1, a6, a7, v7);
}

uint64_t outputConvexToStream(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, uint64_t a9, _WORD *a10)
{
  void (*v14)(uint64_t, int *);
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  _DWORD *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  double v120;
  double *v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  double v129;
  unsigned int v130;
  double v131;
  unsigned int v132;
  unsigned int v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  uint64_t v140;
  __int128 v141;
  uint64_t result;
  uint64_t v143;
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  unsigned int v162;
  unsigned int v163;
  float *v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float *v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float *v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float *v207;
  unsigned int v208;
  unsigned int v209;
  float *v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float *v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float *v228;
  float v229;
  float v230;
  float v231;
  float v232;
  uint64_t v233;
  double v234;
  double v235;
  float64x2_t v236;
  double v237;
  float v238;
  float v239;
  float v240;
  float v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  double *v245;
  uint64_t v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  double v253;
  int v254;
  float v255[4];
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float32x2_t v261;
  float v262;
  float32x2_t v263;
  float v264;
  int v265;
  __int128 v266;
  uint64_t v267;
  float v268;
  uint64_t v269;
  char v270;
  __int16 v271;
  char v272;
  char v273;
  uint64_t v274;

  v245 = a7;
  v242 = a4;
  v244 = a2;
  v274 = *MEMORY[0x24BDAC8D0];
  v265 = 4;
  v266 = xmmword_2260EDC60;
  v267 = 0;
  v268 = 1.0;
  v269 = 0;
  v270 = 1;
  v271 = 0;
  v272 = 0;
  v14 = *(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120);
  v243 = a1;
  v14(a1, &v265);
  v15 = v269;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v269 + 72))(v269);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
  v246 = a9;
  if (v16)
  {
    v18 = (unsigned __int8 *)v17;
    v253 = *(double *)&a8;
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, float *))(*(_QWORD *)v15 + 80))(v15, v20, v255);
      v19 = v19 + LOWORD(v256) - 2;
      v20 = (v20 + 1);
    }
    while (v16 != (_DWORD)v20);
    MEMORY[0x24BDAC7A8](v21);
    v23 = (char *)&v234 - v22;
    bzero((char *)&v234 - v22, v24);
    v25 = 0;
    v26 = v23;
    do
    {
      (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)v15 + 80))(v15, v25, v255);
      v27 = LOWORD(v256);
      if (LOWORD(v256) != 2)
      {
        v28 = *v18;
        v29 = 2;
        do
        {
          v30 = v18[(v29 - 1) % v27];
          v31 = v18[v29 % v27];
          *v26 = v28;
          v26[1] = v30;
          v32 = v26 + 3;
          v26[2] = v31;
          ++v29;
          v26 += 3;
        }
        while (v27 != v29);
        v26 = v32;
      }
      v18 += v27;
      v25 = (v25 + 1);
    }
    while ((_DWORD)v25 != v16);
    a8 = *(_QWORD *)&v253;
  }
  else
  {
    v19 = 0;
    v23 = &v273;
  }
  v33 = *a3;
  v34 = a3[1];
  v35 = v34 + v34;
  v36 = a3[2];
  v37 = a3[3];
  v38 = v34 * (float)(v34 + v34);
  v39 = v36 * (float)(v36 + v36);
  v40 = (float)(v33 + v33) * v34;
  v41 = (float)(v33 + v33) * v36;
  v42 = (float)(v33 + v33) * v37;
  v43 = v35 * v36;
  v44 = v35 * v37;
  v45 = (float)(v36 + v36) * v37;
  v46 = (float)(1.0 - v38) - v39;
  v47 = v40 + v45;
  v48 = v41 - v44;
  v49 = v40 - v45;
  v50 = 1.0 - (float)(v33 * (float)(v33 + v33));
  v51 = v50 - v39;
  v52 = v43 + v42;
  v53 = v41 + v44;
  v54 = v43 - v42;
  v55 = v50 - v38;
  v56 = *(float *)&v267;
  v57 = *((float *)&v266 + 3);
  v58 = v56 + v56;
  v59 = v56 * (float)(v56 + v56);
  v60 = *((float *)&v267 + 1) * (float)(*((float *)&v267 + 1) + *((float *)&v267 + 1));
  v61 = (float)(v57 + v57) * *(float *)&v267;
  v62 = (float)(v57 + v57) * *((float *)&v267 + 1);
  v63 = (float)(v57 + v57) * v268;
  v64 = v58 * *((float *)&v267 + 1);
  v65 = v58 * v268;
  v66 = (float)(*((float *)&v267 + 1) + *((float *)&v267 + 1)) * v268;
  v67 = (float)(1.0 - v59) - v60;
  v68 = v61 + v66;
  v69 = v62 - v65;
  v70 = v61 - v66;
  v71 = 1.0 - (float)(v57 * (float)(v57 + v57));
  v72 = v71 - v60;
  v73 = v64 + v63;
  v74 = v62 + v65;
  v75 = v64 - v63;
  v76 = v71 - v59;
  v77 = *(float *)&v266 * v67;
  v78 = *(float *)&v266 * v70;
  v79 = v68 * *((float *)&v266 + 1);
  v80 = v72 * *((float *)&v266 + 1);
  v81 = v69 * *((float *)&v266 + 2);
  v82 = v73 * *((float *)&v266 + 2);
  v83 = v67 * (float)(*(float *)&v266 * v70);
  v84 = v68 * (float)(v72 * *((float *)&v266 + 1));
  v85 = (float)(v67 * (float)(*(float *)&v266 * v67)) + (float)(v68 * (float)(v68 * *((float *)&v266 + 1)));
  v86 = (float)(v67 * (float)(*(float *)&v266 * v74)) + (float)(v68 * (float)(v75 * *((float *)&v266 + 1)));
  v87 = v85 + (float)(v69 * (float)(v69 * *((float *)&v266 + 2)));
  v88 = (float)(v83 + v84) + (float)(v69 * (float)(v73 * *((float *)&v266 + 2)));
  v89 = v86 + (float)(v69 * (float)(v76 * *((float *)&v266 + 2)));
  v90 = v70 * (float)(*(float *)&v266 * v70);
  v91 = v72 * (float)(v72 * *((float *)&v266 + 1));
  v92 = (float)(v70 * v77) + (float)(v72 * v79);
  v93 = (float)(v70 * (float)(*(float *)&v266 * v74)) + (float)(v72 * (float)(v75 * *((float *)&v266 + 1)));
  v94 = v92 + (float)(v73 * v81);
  v95 = (float)(v90 + v91) + (float)(v73 * (float)(v73 * *((float *)&v266 + 2)));
  v96 = v93 + (float)(v73 * (float)(v76 * *((float *)&v266 + 2)));
  v97 = (float)((float)(v74 * v77) + (float)(v75 * v79)) + (float)(v76 * v81);
  v98 = (float)((float)(v74 * v78) + (float)(v75 * v80)) + (float)(v76 * v82);
  v99 = (float)((float)(v74 * (float)(*(float *)&v266 * v74)) + (float)(v75 * (float)(v75 * *((float *)&v266 + 1))))
      + (float)(v76 * (float)(v76 * *((float *)&v266 + 2)));
  v100 = v47 * v87;
  v101 = v48 * v87;
  v102 = (float)(v46 * v87) + (float)(v49 * v88);
  v103 = v100 + (float)(v51 * v88);
  v104 = v101 + (float)(v52 * v88);
  v105 = v53 * v89;
  v106 = v54 * v89;
  v107 = v55 * v89;
  v108 = (float)(v46 * v94) + (float)(v49 * v95);
  v109 = (float)(v47 * v94) + (float)(v51 * v95);
  v110 = (float)(v48 * v94) + (float)(v52 * v95);
  v111 = v53 * v96;
  v112 = v54 * v96;
  v113 = v55 * v96;
  v114 = (float)(v46 * v97) + (float)(v49 * v98);
  v115 = (float)(v47 * v97) + (float)(v51 * v98);
  v116 = (float)(v48 * v97) + (float)(v52 * v98);
  v117 = v53 * v99;
  v118 = v54 * v99;
  v119 = v55 * v99;
  v120 = a3[5];
  v121 = v245;
  v122 = a3[6];
  v123 = a3[4] - *v245;
  v124 = v245[2];
  v125 = v242;
  v126 = *(_DWORD *)(v242 + 8);
  v127 = *(_DWORD *)(v242 + 12);
  v236 = *(float64x2_t *)v245;
  v128 = v127 & 0x7FFFFFFF;
  v129 = v120 - v236.f64[1];
  v130 = v126 + 13;
  v131 = v122 - v124;
  if (v126 + 13 > v128)
  {
    v132 = 2 * v128;
    if (!v128)
      v132 = 2;
    if (v130 <= v132)
      v133 = v132;
    else
      v133 = v130;
    v253 = v124;
    v252 = v107;
    v251 = v106;
    v241 = v102;
    v239 = v104;
    v134 = (float)(v46 * v94) + (float)(v49 * v95);
    v248 = v109;
    v250 = v111;
    v135 = v112;
    v249 = v113;
    v247 = v115;
    v136 = v116;
    v240 = v117;
    v238 = v119;
    v237 = v123;
    v235 = v129;
    v234 = v131;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v242, v133);
    v131 = v234;
    v129 = v235;
    v123 = v237;
    v119 = v238;
    v117 = v240;
    v116 = v136;
    v115 = v247;
    v113 = v249;
    v112 = v135;
    v111 = v250;
    v109 = v248;
    v108 = v134;
    v104 = v239;
    v102 = v241;
    v106 = v251;
    v107 = v252;
    v124 = v253;
    v126 = *(_DWORD *)(v125 + 8);
  }
  *(float *)&v253 = v105 + v102;
  v252 = v106 + v103;
  v251 = v107 + v104;
  v250 = v111 + v108;
  v241 = v112 + v109;
  v240 = v113 + v110;
  v239 = v117 + v114;
  v238 = v118 + v115;
  *(float *)&v237 = v119 + v116;
  v137 = v123;
  v249 = v137;
  v138 = v129;
  v248 = v138;
  v139 = v131;
  v247 = v139;
  v140 = *(_QWORD *)v125 + 4 * v126;
  *(_DWORD *)(v125 + 8) = v130;
  *(_DWORD *)v140 = 2;
  *(_QWORD *)(v140 + 4) = v243;
  *(_QWORD *)(v140 + 12) = v244;
  v141 = *(_OWORD *)v121;
  *(double *)(v140 + 36) = v121[2];
  *(_OWORD *)(v140 + 20) = v141;
  *(_DWORD *)(v140 + 48) = *(_DWORD *)(a5 + 8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
  v143 = result;
  v144 = v246;
  if (*(_BYTE *)(v246 + 56))
  {
    v145 = v124;
    v146 = *(float *)(a8 + 20);
    v147 = *(float *)(a8 + 8);
    v148 = (float)(v146 - v147) * 0.5;
    v149 = (float)((float)(v146 + v147) * 0.5) - v145;
    v150 = *(float32x2_t *)(a8 + 12);
    v151 = vmul_f32(vsub_f32(v150, *(float32x2_t *)a8), (float32x2_t)0x3F0000003F000000);
    v152 = vsub_f32(vmul_f32(vadd_f32(v150, *(float32x2_t *)a8), (float32x2_t)0x3F0000003F000000), vcvt_f32_f64(v236));
    v261 = vsub_f32(v152, v151);
    v262 = v149 - v148;
    v263 = vadd_f32(v151, v152);
    v264 = v148 + v149;
    v153 = 0;
    if (v19)
    {
      v154 = v241;
      v155 = v240;
      v156 = v239;
      v157 = v238;
      v158 = *(float *)&v237;
      v159 = v249;
      v160 = v248;
      v161 = v247;
      do
      {
        v162 = *((_DWORD *)v23 + 1);
        v163 = *((_DWORD *)v23 + 2);
        v164 = (float *)(v143 + 12 * *(unsigned int *)v23);
        v165 = v164[1];
        v166 = v164[2];
        v167 = v250 * v165;
        v168 = v154 * v165;
        v169 = (float)(v251 * *v164) + (float)(v155 * v165);
        v170 = v156 * v166;
        v171 = v169 + (float)(v158 * v166);
        v172 = (float)((float)((float)(v252 * *v164) + v168) + (float)(v157 * v166)) + v160;
        v255[0] = (float)((float)((float)(*(float *)&v253 * *v164) + v167) + v170) + v159;
        v255[1] = v172;
        v255[2] = v171 + v161;
        v173 = (float *)(v143 + 12 * v162);
        v174 = v173[1];
        v175 = v173[2];
        v176 = v250 * v174;
        v177 = v154 * v174;
        v178 = (float)(v251 * *v173) + (float)(v155 * v174);
        v179 = v156 * v175;
        v180 = v178 + (float)(v158 * v175);
        v181 = (float)((float)((float)(v252 * *v173) + v177) + (float)(v157 * v175)) + v160;
        v255[3] = (float)((float)((float)(*(float *)&v253 * *v173) + v176) + v179) + v159;
        v256 = v181;
        v257 = v180 + v161;
        v182 = (float *)(v143 + 12 * v163);
        v183 = v182[1];
        --v19;
        v184 = v182[2];
        v185 = (float)(v252 * *v182) + (float)(v154 * v183);
        v186 = (float)((float)((float)(v251 * *v182) + (float)(v155 * v183)) + (float)(v158 * v184)) + v161;
        v258 = (float)((float)((float)(*(float *)&v253 * *v182) + (float)(v250 * v183)) + (float)(v156 * v184)) + v159;
        v259 = (float)(v185 + (float)(v157 * v184)) + v160;
        v254 = 0;
        v187 = *(float *)(v144 + 52);
        v260 = v186;
        result = tessellateTriangle(&v254, (uint64_t)v255, -1, a5, a6, (int8x16_t *)&v261, a10, v187);
        v153 += v254;
        v23 += 12;
      }
      while (v19);
    }
    *(_DWORD *)(v140 + 44) = v153;
  }
  else
  {
    v188 = *(_DWORD *)(a5 + 8);
    v189 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
    v190 = v188 + v19;
    v191 = v188 + v19 + 1;
    if (v191 > v189)
    {
      v192 = 2 * *(_DWORD *)(a5 + 12);
      if (!v189)
        v192 = 2;
      if (v191 <= v192)
        v193 = v192;
      else
        v193 = v191;
      result = physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a5, v193);
      v188 = *(_DWORD *)(a5 + 8);
    }
    v194 = *(_QWORD *)a5;
    *(_DWORD *)(a5 + 8) = v190;
    *(_DWORD *)(v140 + 44) = v19;
    v195 = *(float *)&v253;
    v196 = v252;
    v197 = v251;
    v198 = v250;
    v199 = v241;
    v200 = v240;
    v201 = v239;
    v202 = v238;
    v203 = *(float *)&v237;
    v204 = v249;
    v205 = v248;
    v206 = v247;
    if (v19)
    {
      v207 = (float *)(v194 + 36 * v188);
      do
      {
        v208 = *((_DWORD *)v23 + 1);
        v209 = *((_DWORD *)v23 + 2);
        v210 = (float *)(v143 + 12 * *(unsigned int *)v23);
        v211 = v210[1];
        v212 = v210[2];
        v213 = v198 * v211;
        v214 = v199 * v211;
        v215 = (float)(v197 * *v210) + (float)(v200 * v211);
        v216 = v201 * v212;
        v217 = v215 + (float)(v203 * v212);
        v218 = (float)((float)((float)(v196 * *v210) + v214) + (float)(v202 * v212)) + v205;
        *v207 = (float)((float)((float)(v195 * *v210) + v213) + v216) + v204;
        v207[1] = v218;
        v207[2] = v217 + v206;
        v219 = (float *)(v143 + 12 * v208);
        v220 = v219[1];
        v221 = v219[2];
        v222 = v198 * v220;
        v223 = v199 * v220;
        v224 = (float)(v197 * *v219) + (float)(v200 * v220);
        v225 = v201 * v221;
        v226 = v224 + (float)(v203 * v221);
        v227 = (float)((float)((float)(v196 * *v219) + v223) + (float)(v202 * v221)) + v205;
        v207[3] = (float)((float)((float)(v195 * *v219) + v222) + v225) + v204;
        v207[4] = v227;
        v207[5] = v226 + v206;
        v228 = (float *)(v143 + 12 * v209);
        v229 = v228[1];
        v230 = v228[2];
        v231 = (float)((float)(v196 * *v228) + (float)(v199 * v229)) + (float)(v202 * v230);
        v232 = (float)((float)((float)(v197 * *v228) + (float)(v200 * v229)) + (float)(v203 * v230)) + v206;
        v207[6] = (float)((float)((float)(v195 * *v228) + (float)(v198 * v229)) + (float)(v201 * v230)) + v204;
        v207[7] = v231 + v205;
        v207[8] = v232;
        v255[0] = NAN;
        v233 = *(unsigned int *)(a6 + 8);
        if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v233)
        {
          result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a6, v255);
          v206 = v247;
          v205 = v248;
          v204 = v249;
          v195 = *(float *)&v253;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v233) = -1;
          ++*(_DWORD *)(a6 + 8);
        }
        v23 += 12;
        v207 += 9;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::CharacterControllerManager(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  char v12;

  *(_QWORD *)a1 = off_24ED97010;
  *(_QWORD *)(a1 + 8) = &unk_24ED970C0;
  v6 = a1 + 8;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 1061158912;
  *(_QWORD *)(a1 + 164) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 172) = 0;
  physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(a1 + 120, 0x40u, 0);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_DWORD *)(a1 + 196) = 65792;
  *(_BYTE *)(a1 + 200) = a3;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 248) = 1061158912;
  *(_QWORD *)(a1 + 252) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 260) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 208, 0x40u, 0);
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v8 = "<allocation names disabled>";
  v9 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, 72, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 264) = v9;
  physx::shdfnd::MutexImpl::MutexImpl(v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v12 = 1;
  (*(void (**)(uint64_t, uint64_t, char *, _QWORD))(*(_QWORD *)v10 + 264))(v10, v6, &v12, 0);
  return a1;
}

void physx::Cct::CharacterControllerManager::~CharacterControllerManager(physx::Cct::CharacterControllerManager *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_24ED97010;
  *((_QWORD *)this + 1) = &unk_24ED970C0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 33);
  if (*((_QWORD *)this + 26))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v3 = *((_DWORD *)this + 47);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 22))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 15))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 29);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 13))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 11))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 21);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 9))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v7 = *((_DWORD *)this + 17);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 7))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 13);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v2;

  physx::Cct::CharacterControllerManager::~CharacterControllerManager(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Cct::CharacterControllerManager *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                          + 24)
                                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::Cct::CharacterControllerManager::~CharacterControllerManager(physx::Cct::CharacterControllerManager *this)
{
  physx::Cct::CharacterControllerManager::~CharacterControllerManager((physx::Cct::CharacterControllerManager *)((char *)this - 8));
}

{
  char *v1;

  v1 = (char *)this - 8;
  physx::Cct::CharacterControllerManager::~CharacterControllerManager((physx::Cct::CharacterControllerManager *)((char *)this - 8));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

uint64_t physx::Cct::CharacterControllerManager::release(int32x2_t *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int (*i)(void);
  uint64_t (***v11)(uint64_t);
  uint64_t v12;
  physx::shdfnd::Foundation *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  for (i = *(unsigned int (**)(void))(*(_QWORD *)this + 16); i(); i = *(unsigned int (**)(void))(*(_QWORD *)this
                                                                                                  + 16))
  {
    v11 = (uint64_t (***)(uint64_t))(*(uint64_t (**)(int32x2_t *, _QWORD))(*(_QWORD *)this + 24))(this, 0);
    physx::Cct::CharacterControllerManager::releaseController(this, v11);
  }
  while ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)this + 64))(this))
    (*(void (**)(_QWORD))(***(_QWORD ***)&this[22] + 16))(**(_QWORD **)&this[22]);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&this[2] + 56))(*(_QWORD *)&this[2]);
  (*(void (**)(uint64_t, int32x2_t *))(*(_QWORD *)v12 + 272))(v12, this + 1);
  v13 = (physx::shdfnd::Foundation *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 144))(this);
  return physx::shdfnd::Foundation::decRefCount(v13, v14, v15, v16, v17, v18, v19, v20, a9);
}

uint64_t physx::Cct::CharacterControllerManager::releaseController(int32x2_t *a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int32x2_t v8;
  unsigned __int32 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  int v19;
  uint64_t (**v20)(uint64_t);
  uint64_t result;
  uint64_t v22;

  if (a1[14].i32[0])
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)&a1[13] + 8 * v4);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v7 = a1[14].u32[0];
      if ((uint64_t (***)(uint64_t))v6 == a2)
        break;
      if (++v4 >= v7)
        goto LABEL_7;
    }
    v8 = a1[13];
    v9 = v7 - 1;
    a1[14].i32[0] = v9;
    *(_QWORD *)(*(_QWORD *)&v8 + 8 * v4) = *(_QWORD *)(*(_QWORD *)&v8 + 8 * v9);
  }
LABEL_7:
  v22 = 0;
  v10 = (*a2)[7]((uint64_t)a2);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v10 + 192))(v10, &v22, 1, 0);
  if (a1[21].i32[1])
  {
    v11 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = (_DWORD *)(*(_QWORD *)&a1[18] + 4 * ((a1[19].i32[1] - 1) & ((v13 >> 31) ^ v13)));
    v15 = *v14;
    if ((_DWORD)v15 != -1)
    {
      v17 = a1[16];
      v16 = a1[17];
      if (*(_QWORD *)(*(_QWORD *)&v17 + 8 * v15) == v22)
      {
LABEL_13:
        *v14 = *(_DWORD *)(*(_QWORD *)&v16 + 4 * v15);
        a1[21] = vadd_s32(a1[21], (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(*(_QWORD *)&v16 + 4 * v15) = a1[20].i32[1];
        a1[20].i32[1] = v15;
      }
      else
      {
        while (1)
        {
          v18 = v15;
          v15 = *(unsigned int *)(*(_QWORD *)&v16 + 4 * v15);
          if ((_DWORD)v15 == -1)
            break;
          if (*(_QWORD *)(*(_QWORD *)&v17 + 8 * v15) == v22)
          {
            v14 = (_DWORD *)(*(_QWORD *)&v16 + 4 * v18);
            goto LABEL_13;
          }
        }
      }
    }
  }
  v19 = (**a2)((uint64_t)a2);
  v20 = *a2;
  if (v19 != 1)
  {
    result = (*v20)((uint64_t)a2);
    if ((_DWORD)result)
      return result;
    v20 = *a2;
  }
  return v20[26]((uint64_t)a2);
}

uint64_t physx::Cct::CharacterControllerManager::getScene(physx::Cct::CharacterControllerManager *this)
{
  return *((_QWORD *)this + 2);
}

double physx::Cct::CharacterControllerManager::getRenderBuffer(physx::Cct::CharacterControllerManager *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  double result;

  if (!*((_QWORD *)this + 3))
  {
    v2 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::RenderBuffer>::getName() [T = physx::Cm::RenderBuffer]";
    else
      v3 = "<allocation names disabled>";
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 88, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 97);
    *(_QWORD *)v4 = off_24ED8B800;
    result = 0.0;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *((_QWORD *)this + 3) = v4;
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::setDebugRenderingFlags(uint64_t result, _DWORD *a2)
{
  uint64_t v2;

  *(_DWORD *)(result + 32) = *a2;
  if (!*a2)
  {
    v2 = result;
    result = *(_QWORD *)(result + 24);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)(v2 + 24) = 0;
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::getNbControllers(physx::Cct::CharacterControllerManager *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t physx::Cct::CharacterControllerManager::getController(physx::Cct::CharacterControllerManager *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (*((_DWORD *)this + 28) <= a2)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 126, "PxControllerManager::getController(): out-of-range index", a6, a7, a8, vars0);
    return 0;
  }
  else
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
}

uint64_t physx::Cct::CharacterControllerManager::createController(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  float v46;
  float v47;

  if (((**(uint64_t (***)(uint64_t))a2)(a2) & 1) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 138, "PxControllerManager::createController(): desc.isValid() fails.", v4, v5, v6, v43);
    return 0;
  }
  v7 = *(_DWORD *)(a2 + 128);
  if (v7 != 1)
  {
    if (!v7)
    {
      v8 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v9 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::BoxController>::getName() [T = physx::Cct"
             "::BoxController]";
      else
        v9 = "<allocation names disabled>";
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v8 + 24)
                                                                                             + 16))(v8 + 24, 632, v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 147);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
      v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)v10 = &unk_24ED97250;
      v13 = (_QWORD *)(v10 + 8);
      v14 = physx::Cct::Controller::Controller(v10 + 8, a2, v12);
      *(_QWORD *)v10 = off_24ED96D40;
      *(_QWORD *)(v10 + 8) = &unk_24ED96E70;
      *(_DWORD *)(v10 + 16) = 0;
      v15 = *(float *)(a2 + 132);
      *(float *)(v10 + 616) = v15;
      v16 = *(float *)(a2 + 136);
      *(float *)(v10 + 620) = v16;
      v17 = *(float *)(a2 + 140);
      *(float *)(v10 + 624) = v17;
      LODWORD(v45) = 3;
      v18 = *(float *)(v10 + 588);
      *((float *)&v45 + 1) = v15 * v18;
      v46 = v16 * v18;
      v47 = v17 * v18;
      goto LABEL_14;
    }
    return 0;
  }
  v19 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v20 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::CapsuleController>::getName() [T = physx::Cc"
          "t::CapsuleController]";
  else
    v20 = "<allocation names disabled>";
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v19 + 24) + 16))(v19 + 24, 632, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 153);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
  v21 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v10 = &unk_24ED97368;
  v13 = (_QWORD *)(v10 + 8);
  v14 = physx::Cct::Controller::Controller(v10 + 8, a2, v21);
  *(_QWORD *)v10 = off_24ED96EA8;
  *(_QWORD *)(v10 + 8) = &unk_24ED96FD8;
  *(_DWORD *)(v10 + 16) = 1;
  v22 = *(float *)(a2 + 132);
  *(float *)(v10 + 616) = v22;
  v23 = *(float *)(a2 + 136);
  *(float *)(v10 + 620) = v23;
  *(_DWORD *)(v10 + 624) = *(_DWORD *)(a2 + 140);
  LODWORD(v45) = 2;
  v24 = *(float *)(v10 + 588);
  *((float *)&v45 + 1) = v22 * v24;
  v46 = (float)(v23 * 0.5) * v24;
LABEL_14:
  physx::Cct::Controller::createProxyActor(v14, v11, (uint64_t)&v45, *(_QWORD *)(a2 + 104));
  v45 = v13;
  v25 = *(unsigned int *)(a1 + 112);
  if ((*(_DWORD *)(a1 + 116) & 0x7FFFFFFFu) <= v25)
  {
    physx::shdfnd::Array<physx::Cct::Controller *,physx::shdfnd::ReflectionAllocator<physx::Cct::Controller *>>::growAndPushBack(a1 + 104, &v45);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v25) = v13;
    *(_DWORD *)(a1 + 112) = v25 + 1;
  }
  v13[75] = a1;
  v13[60] = a1;
  v13[39] = a1;
  v13[36] = a1;
  v44 = 0;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v26 + 192))(v26, &v44, 1, 0);
  v28 = *(_DWORD *)(a1 + 156);
  if (!v28)
  {
    v32 = 0;
    goto LABEL_23;
  }
  v29 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
  v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  v32 = (v28 - 1) & ((v31 >> 31) ^ v31);
  v33 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * v32);
  if ((_DWORD)v33 == -1)
  {
LABEL_23:
    v34 = *(_DWORD *)(a1 + 164);
    if (v34 == -1)
    {
      if (v28)
        v36 = 2 * v28;
      else
        v36 = 16;
      if (v28 >= v36)
      {
        v34 = -1;
      }
      else
      {
        physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(a1 + 120, v36, v27);
        v28 = *(_DWORD *)(a1 + 156);
        v34 = *(_DWORD *)(a1 + 164);
      }
      v35 = v44;
      v37 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v32 = (v28 - 1) & ((v39 >> 31) ^ v39);
    }
    else
    {
      v35 = v44;
    }
    v40 = *(_QWORD *)(a1 + 136);
    v41 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(v40 + 4 * v34);
    *(_DWORD *)(v40 + 4 * v34) = *(_DWORD *)(v41 + 4 * v32);
    *(_DWORD *)(v41 + 4 * v32) = v34;
    *(int32x2_t *)(a1 + 168) = vadd_s32(*(int32x2_t *)(a1 + 168), (int32x2_t)0x100000001);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v34) = v35;
    return v10;
  }
  while (*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v33) != v44)
  {
    v33 = *(unsigned int *)(*(_QWORD *)(a1 + 136) + 4 * v33);
    if ((_DWORD)v33 == -1)
      goto LABEL_23;
  }
  return v10;
}

uint64_t physx::Cct::CharacterControllerManager::purgeControllers(uint64_t this)
{
  uint64_t v1;
  uint64_t (***v2)(uint64_t);

  if (*(_DWORD *)(this + 112))
  {
    v1 = this;
    do
    {
      v2 = (uint64_t (***)(uint64_t))(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v1 + 104) + 32))(**(_QWORD **)(v1 + 104));
      this = physx::Cct::CharacterControllerManager::releaseController((int32x2_t *)v1, v2);
    }
    while (*(_DWORD *)(v1 + 112));
  }
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::onRelease(uint64_t result, physx::PxBase *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  const physx::PxBase *v16;
  const physx::PxBase **v17;
  const physx::PxBase *v18;
  physx::Cct::CharacterControllerManager **v19;
  int64x2_t v20;
  int64x2_t v21;

  if (*((unsigned __int16 *)a2 + 4) - 5 <= 2)
  {
    v3 = result;
    if (*(_BYTE *)(result + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
      result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 264));
    if (!*(_DWORD *)(v3 + 260)
      || (v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22),
          v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8)),
          v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27),
          v7 = *(unsigned int *)(*(_QWORD *)(v3 + 232)
                               + 4 * ((*(_DWORD *)(v3 + 244) - 1) & ((v6 >> 31) ^ v6))),
          (_DWORD)v7 == -1))
    {
LABEL_11:
      v9 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 216);
      while (*(physx::PxBase **)(v8 + 16 * v7) != a2)
      {
        v7 = *(unsigned int *)(*(_QWORD *)(v3 + 224) + 4 * v7);
        if ((_DWORD)v7 == -1)
          goto LABEL_11;
      }
      v9 = v8 + 16 * v7;
    }
    if (*(_BYTE *)(v3 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
      result = pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 264));
    if (v9 && *(_DWORD *)(v3 + 112))
    {
      v10 = 0;
      v21 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v11 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v20 = v11;
      while (1)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v3 + 104) + 8 * v10);
        if (*(_BYTE *)(v3 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
          result = pthread_mutex_lock(*(pthread_mutex_t **)(v12 + 592));
        if (*(physx::PxBase **)(v12 + 296) == a2)
          break;
        v13 = *(unsigned int *)(v12 + 160);
        if ((_DWORD)v13)
        {
          v14 = *(unsigned int **)(v12 + 152);
          v15 = &v14[v13];
          while (*(physx::PxBase **)(v14 + 1) != a2)
          {
            v14 = (unsigned int *)((char *)v14 + GeomSizes[*v14]);
            if (v14 == v15)
              goto LABEL_36;
          }
          *(int64x2_t *)(v12 + 168) = v21;
          *(_OWORD *)(v12 + 184) = xmmword_2261326C0;
          v11.i64[0] = v20.i64[0];
          *(int64x2_t *)(v12 + 200) = v20;
        }
LABEL_36:
        if (*(physx::PxBase **)(v12 + 272) != a2)
          goto LABEL_41;
        v17 = (const physx::PxBase **)(v12 + 272);
        if (*(_BYTE *)(v12 + 280))
        {
          v19 = (physx::Cct::CharacterControllerManager **)(v12 + 288);
          v18 = a2;
LABEL_39:
          result = physx::Cct::CharacterControllerManager::unregisterObservedObject(*v19, v18, *(int8x8_t *)v11.i8);
        }
LABEL_40:
        *v17 = 0;
LABEL_41:
        if (*(_BYTE *)(v3 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
          result = pthread_mutex_unlock(*(pthread_mutex_t **)(v12 + 592));
        if (++v10 >= (unint64_t)*(unsigned int *)(v3 + 112))
          return result;
      }
      if (*(_BYTE *)(v12 + 280))
      {
        v16 = *(const physx::PxBase **)(v12 + 272);
        if (v16)
          result = physx::Cct::CharacterControllerManager::unregisterObservedObject(*(physx::Cct::CharacterControllerManager **)(v12 + 288), v16, *(int8x8_t *)v11.i8);
      }
      v17 = (const physx::PxBase **)(v12 + 296);
      *(_QWORD *)(v12 + 272) = 0;
      if (!*(_BYTE *)(v12 + 304))
        goto LABEL_40;
      v18 = *v17;
      if (!*v17)
        goto LABEL_40;
      v19 = (physx::Cct::CharacterControllerManager **)(v12 + 312);
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'physx::Cct::CharacterControllerManager::onRelease(uint64_t a1, physx::PxBase *a2)
{
  return physx::Cct::CharacterControllerManager::onRelease(a1 - 8, a2);
}

uint64_t physx::Cct::CharacterControllerManager::getNbObstacleContexts(physx::Cct::CharacterControllerManager *this)
{
  return *((unsigned int *)this + 46);
}

uint64_t physx::Cct::CharacterControllerManager::getObstacleContext(physx::Cct::CharacterControllerManager *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (*((_DWORD *)this + 46) > a2)
    return *(_QWORD *)(*((_QWORD *)this + 22) + 8 * a2);
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 278, "PxControllerManager::getObstacleContext(): out-of-range index", a6, a7, a8, vars0);
  return 0;
}

uint64_t physx::Cct::CharacterControllerManager::createObstacleContext(physx::Cct::CharacterControllerManager *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext>::getName() [T = physx::Cct::"
         "ObstacleContext]";
  else
    v3 = "<allocation names disabled>";
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 96, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 288);
  *(_QWORD *)v4 = off_24ED97528;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  physx::Cct::HandleManager::HandleManager((physx::Cct::HandleManager *)(v4 + 40));
  *(_QWORD *)(v4 + 88) = this;
  v7 = v4;
  v5 = *((unsigned int *)this + 46);
  if ((*((_DWORD *)this + 47) & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<physx::Cct::ObstacleContext *,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext *>>::growAndPushBack((uint64_t)this + 176, &v7);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v5) = v4;
    *((_DWORD *)this + 46) = v5 + 1;
  }
  return v4;
}

uint64_t physx::Cct::CharacterControllerManager::releaseObstacleContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2)
  {
    v3 = 0;
    while (*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v3) != a2)
    {
      if (v2 == ++v3)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v2)
  {
    v4 = *(_QWORD *)(a1 + 176);
    v5 = v2 - 1;
    *(_DWORD *)(a1 + 184) = v5;
    *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
}

void physx::Cct::CharacterControllerManager::onObstacleUpdated(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float32x2_t v12;
  float v13;
  float32x2_t v14;
  float v15;

  if (*(_DWORD *)(a1 + 112))
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v6);
      v8 = v7 + 104;
      v9 = *(double *)(v7 + 512);
      v14 = vcvt_f32_f64(*(float64x2_t *)(v7 + 496));
      v15 = v9;
      v10 = -*(float *)(v7 + 40);
      v12 = vneg_f32(*(float32x2_t *)(v7 + 32));
      v13 = v10;
      v11 = (*(float (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      physx::Cct::SweepTest::onObstacleUpdated(v8, a2, a3, &v14, &v12, v11);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 112));
  }
}

void physx::Cct::CharacterControllerManager::onObstacleAdded(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float32x2_t v12;
  float v13;
  float32x2_t v14;
  float v15;

  if (*(_DWORD *)(a1 + 112))
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v6);
      v8 = v7 + 104;
      v9 = *(double *)(v7 + 512);
      v14 = vcvt_f32_f64(*(float64x2_t *)(v7 + 496));
      v15 = v9;
      v10 = -*(float *)(v7 + 40);
      v12 = vneg_f32(*(float32x2_t *)(v7 + 32));
      v13 = v10;
      v11 = (*(float (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      physx::Cct::SweepTest::onObstacleAdded(v8, a2, a3, (float *)&v14, &v12, v11);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 112));
  }
}

uint64_t resetOrClear<physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>>(uint64_t result)
{
  uint64_t v1;

  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFF) != 0)
  {
    v1 = result;
    if (*(_DWORD *)(result + 8) <= (*(_DWORD *)(result + 12) & 0x7FFFFFFFu) >> 1)
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(result);
      return physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::recreate(v1, *(_DWORD *)(v1 + 8));
    }
    else
    {
      *(_DWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::setTessellation(uint64_t this, char a2, float a3)
{
  *(_BYTE *)(this + 196) = a2;
  *(float *)(this + 192) = a3;
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::setOverlapRecoveryModule(uint64_t this, char a2)
{
  *(_BYTE *)(this + 197) = a2;
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::setPreciseSweeps(uint64_t this, char a2)
{
  *(_BYTE *)(this + 198) = a2;
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::setPreventVerticalSlidingAgainstCeiling(uint64_t this, char a2)
{
  *(_BYTE *)(this + 199) = a2;
  return this;
}

float physx::Cct::CharacterControllerManager::shiftOrigin(uint64_t a1, float32x2_t *a2, float64x2_t a3)
{
  unint64_t i;
  uint64_t v6;
  float v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  float *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  float32x2_t v27;
  float v28;

  if (*(_DWORD *)(a1 + 112))
  {
    for (i = 0; i < *(unsigned int *)(a1 + 112); ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * i);
      v8 = a2->f32[0];
      v7 = a2->f32[1];
      v9 = a2->f32[0];
      v10 = v7;
      v11 = *(double *)(v6 + 504) - v7;
      *(double *)(v6 + 496) = *(double *)(v6 + 496) - v9;
      *(double *)(v6 + 504) = v11;
      LODWORD(a3.f64[0]) = a2[1].i32[0];
      v12 = *(float *)a3.f64;
      *(double *)(v6 + 512) = *(double *)(v6 + 512) - *(float *)a3.f64;
      v13 = *(_QWORD *)(v6 + 600);
      if (v13
        && *(_BYTE *)(v13 + 200)
        && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 592));
        v8 = a2->f32[0];
        v7 = a2->f32[1];
        LODWORD(a3.f64[0]) = a2[1].i32[0];
        v9 = a2->f32[0];
        v10 = v7;
        v12 = *(float *)a3.f64;
      }
      v14 = *(double *)(v6 + 176) - v10;
      *(double *)(v6 + 168) = *(double *)(v6 + 168) - v9;
      *(double *)(v6 + 176) = v14;
      v15 = *(double *)(v6 + 192);
      *(double *)(v6 + 184) = *(double *)(v6 + 184) - v12;
      *(double *)(v6 + 192) = v15 - v9;
      v16 = *(double *)(v6 + 208) - v12;
      *(double *)(v6 + 200) = *(double *)(v6 + 200) - v10;
      *(double *)(v6 + 208) = v16;
      if (*(_QWORD *)(v6 + 272))
      {
        if (*(_WORD *)(*(_QWORD *)(v6 + 296) + 8) != 6)
        {
          *(float *)(v6 + 348) = *(float *)(v6 + 348) - v8;
          *(float *)(v6 + 352) = *(float *)(v6 + 352) - v7;
          v17 = (float *)(v6 + 356);
LABEL_13:
          *(float *)a3.f64 = *v17 - *(float *)a3.f64;
          *v17 = *(float *)a3.f64;
        }
      }
      else if (*(_DWORD *)(v6 + 320) != -1)
      {
        *(float *)(v6 + 372) = *(float *)(v6 + 372) - v8;
        *(float *)(v6 + 376) = *(float *)(v6 + 376) - v7;
        v17 = (float *)(v6 + 380);
        goto LABEL_13;
      }
      v18 = *(unsigned int *)(v6 + 160);
      if ((_DWORD)v18)
      {
        v19 = *(unsigned int **)(v6 + 152);
        v20 = &v19[v18];
        a3 = vcvtq_f64_f32(*a2);
        v21 = a2[1].f32[0];
        do
        {
          *(float64x2_t *)(v19 + 5) = vsubq_f64(*(float64x2_t *)(v19 + 5), a3);
          *(double *)(v19 + 9) = *(double *)(v19 + 9) - v21;
          v19 = (unsigned int *)((char *)v19 + GeomSizes[*v19]);
        }
        while (v19 != v20);
      }
      v22 = *(_QWORD *)(v6 + 600);
      if (v22
        && *(_BYTE *)(v22 + 200)
        && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
      {
        pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 592));
      }
    }
  }
  if (*(_DWORD *)(a1 + 184))
  {
    v23 = 0;
    do
      physx::Cct::ObstacleContext::onOriginShift(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v23++), a2);
    while (v23 < *(unsigned int *)(a1 + 184));
  }
  v24 = *(_QWORD *)(a1 + 24);
  if (v24)
  {
    v25 = -a2[1].f32[0];
    v27 = vneg_f32(*a2);
    v28 = v25;
    *(float *)a3.f64 = physx::Cm::RenderBuffer::shift(v24, &v27);
  }
  return *(float *)a3.f64;
}

void physx::Cct::CharacterControllerManager::computeInteractions(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const float *v12;
  const float *v13;
  uint64_t v14;
  float *v15;
  float v16;
  float64_t v17;
  unint64_t v18;
  float64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned __int32 *v23;
  unsigned __int32 v24;
  unsigned __int32 v25;
  float *v26;
  float v27;
  float *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  float v32;
  float v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  float *v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  float v119;
  uint64_t v120;
  float v121;
  float v122;
  float *v123;
  float v124;
  float v125;
  uint64_t v126;
  float64_t v127;
  float v128;
  float v129;
  uint64_t i;
  float v131;
  float *v132;
  float v133;
  BOOL v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float32x2_t v140;
  float32x2_t *v142;
  unsigned int v144;
  unsigned int *v145;
  uint64_t v146;
  float32x2_t v147;
  float v148[3];
  float v149[3];
  float v150;
  unint64_t v151;
  float v152[3];
  float v153[3];
  float v154;
  float32x2_t v155;
  double v156;
  double v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float32x2_t v165;
  float v166;
  float32x2_t v167;
  float v168;
  int v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  double v173;
  float v174;
  float32x2_t v175;
  float v176;
  float32x2_t v177;
  float v178;
  float64x2_t v179[3];
  uint64_t v180;
  char v181;
  float32x2_t v182;
  float v183[8];
  float32x2_t v184;
  float v185;
  _BYTE v186[28];
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a1 + 104);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 651);
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      LODWORD(v4) = v4 - 1;
      v9 = *v5++;
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v9 + 24))(v9, v179);
      *(float32x4_t *)v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v179[0]), v179[1]);
      *(float32x2_t *)(v8 + 16) = vcvt_f32_f64(v179[2]);
      v7 += 24;
    }
    while ((_DWORD)v4);
    v10 = v6 + v7;
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
  v11 = -1431655765 * ((v10 - v6) >> 3);
  v145 = 0;
  v146 = 0;
  if (v11)
  {
    v12 = (const float *)(*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 0xFFFFFFFEAAAAAAACLL * ((v10 - v6) >> 3), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 611);
    v13 = v12;
    v14 = 0;
    v15 = (float *)v6;
    do
    {
      v16 = *v15;
      v15 += 6;
      v12[v14++] = v16;
    }
    while (v11 != v14);
    v180 = 0;
    memset(&v179[1], 0, 32);
    v181 = 1;
    LODWORD(v179[0].f64[1]) = 0x80000000;
    *(_QWORD *)&v179[0].f64[0] = &off_24ED90D50;
    physx::Cm::RadixSortBuffered::Sort((physx::Cm::RadixSortBuffered *)v179, v12);
    v17 = v179[1].f64[0];
    v18 = *(_QWORD *)&v179[1].f64[0] + 4 * v11;
    v155.i32[0] = 0;
    v19 = v179[1].f64[0];
    while (1)
    {
      v21 = **(_DWORD **)&v19;
      *(_QWORD *)&v19 += 4;
      v20 = v21;
      LODWORD(v170.f64[0]) = v21;
      do
      {
        if (*(_QWORD *)&v17 >= v18)
          break;
        v22 = **(_DWORD **)&v17;
        *(_QWORD *)&v17 += 4;
      }
      while (v13[v22] < v13[v20]);
      if (*(_QWORD *)&v17 >= v18)
        break;
      v23 = *(unsigned __int32 **)&v17;
      do
      {
        v25 = *v23++;
        v24 = v25;
        v155.i32[0] = v25;
        v26 = (float *)(v6 + 24 * LODWORD(v170.f64[0]));
        v27 = v26[3];
        if (v13[v25] > v27)
          break;
        if (LODWORD(v170.f64[0]) != v24)
        {
          v28 = (float *)(v6 + 24 * v24);
          if (*v28 <= v27
            && *v26 <= *(float *)(v6 + 24 * v24 + 12)
            && v28[1] <= *(float *)(v6 + 24 * LODWORD(v170.f64[0]) + 16)
            && v26[1] <= *(float *)(v6 + 24 * v24 + 16)
            && v28[2] <= *(float *)(v6 + 24 * LODWORD(v170.f64[0]) + 20)
            && v26[2] <= *(float *)(v6 + 24 * v24 + 20))
          {
            if ((HIDWORD(v146) & 0x7FFFFFFFu) <= v146)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v145, &v170);
              v29 = v146;
            }
            else
            {
              v145[v146] = LODWORD(v170.f64[0]);
              v29 = v146 + 1;
              LODWORD(v146) = v146 + 1;
            }
            if ((HIDWORD(v146) & 0x7FFFFFFFu) <= v29)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v145, &v155);
            }
            else
            {
              v145[v29] = v155.i32[0];
              LODWORD(v146) = v146 + 1;
            }
          }
        }
      }
      while ((unint64_t)v23 < v18);
      if (*(_QWORD *)&v19 >= v18)
        goto LABEL_33;
    }
    if (!v13)
      goto LABEL_34;
LABEL_33:
    (*(void (**)(uint64_t, const float *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
LABEL_34:
    *(_QWORD *)&v179[0].f64[0] = &off_24ED90D50;
    physx::Cm::RadixSortBuffered::reset((uint64_t)v179);
    if (v146 >= 2)
    {
      v30 = v146 >> 1;
      v31 = v145;
      v32 = a3 * 4.0;
      v33 = 1.0;
      while (1)
      {
        v144 = v30;
        v34 = *(_QWORD *)(a1 + 104);
        v35 = *(_DWORD **)(v34 + 8 * *v31);
        v36 = *(_DWORD **)(v34 + 8 * v31[1]);
        if (!a2)
          break;
        v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v35 + 32))(*(_QWORD *)(v34 + 8 * *v31));
        v38 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v36 + 32))(v36);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v37, v38))
          break;
LABEL_89:
        v31 += 2;
        v30 = v144 - 1;
        if (v144 == 1)
          goto LABEL_90;
      }
      v175 = 0;
      v176 = 0.0;
      v39 = v35[2];
      v40 = v36[2];
      if (v39 <= v40)
        v41 = v36;
      else
        v41 = v35;
      if (v39 <= v40)
        v36 = v35;
      v142 = (float32x2_t *)(v36 + 101);
      v42 = v36[2];
      if (v42)
      {
        if (v42 == 1 && v41[2] == 1)
        {
          v43 = v32;
          physx::Cct::CapsuleController::getCapsule((uint64_t)(v36 - 2), (uint64_t)v179);
          physx::Cct::CapsuleController::getCapsule((uint64_t)(v41 - 2), (uint64_t)&v170);
          v44 = *(float *)&v180 + v174;
          v45 = v179[1].f64[0];
          *(float *)&v156 = v45;
          v46 = v179[2].f64[1];
          v47 = v171;
          v185 = v47;
          v48 = vcvt_f32_f64(*(float64x2_t *)((char *)&v179[1] + 8));
          v49 = vcvt_f32_f64(v172);
          v50 = v173;
          v177.i32[0] = 0;
          v167.i32[0] = 0;
          v155 = vcvt_f32_f64(v179[0]);
          v182 = vsub_f32(v48, v155);
          v183[0] = v46 - v45;
          v184 = vcvt_f32_f64(v170);
          v151 = (unint64_t)vsub_f32(v49, v184);
          v152[0] = v50 - v47;
          v51 = sqrtf(physx::Gu::distanceSegmentSegmentSquared((float *)&v155, (float *)&v182, (float *)&v184, (float *)&v151, (float *)&v177, (float *)&v167));
          v52 = 0.0;
          if (v51 < v44)
          {
            v182 = *v142;
            v183[0] = *((float *)v36 + 103);
            v147 = vsub_f32(vadd_f32(vmul_n_f32(v48, 1.0 - v177.f32[0]), vmul_n_f32(v155, v177.f32[0])), vadd_f32(vmul_n_f32(v49, 1.0 - v167.f32[0]), vmul_n_f32(v184, v167.f32[0])));
            v148[0] = (float)((float)((float)(1.0 - v177.f32[0]) * v46) + (float)(v177.f32[0] * *(float *)&v156))
                    - (float)((float)((float)(1.0 - v167.f32[0]) * v50) + (float)(v167.f32[0] * v185));
            fixDir((float *)&v151, (float *)&v147, (float *)&v182);
            v175 = (float32x2_t)v151;
            v176 = v152[0];
            v52 = v44 - v51;
          }
          v32 = v43;
          v33 = 1.0;
LABEL_84:
          if (v52 != 0.0)
          {
            if (v52 <= v32)
              v138 = v52;
            else
              v138 = v32;
            v139 = (float)(v138 * v176) * 0.5;
            v140 = vmul_f32(vmul_n_f32(v175, v138), (float32x2_t)0x3F0000003F000000);
            *(float32x2_t *)(v36 + 133) = vadd_f32(v140, *(float32x2_t *)(v36 + 133));
            *((float *)v36 + 135) = v139 + *((float *)v36 + 135);
            *(float32x2_t *)(v41 + 133) = vsub_f32(*(float32x2_t *)(v41 + 133), v140);
            *((float *)v41 + 135) = *((float *)v41 + 135) - v139;
          }
          goto LABEL_89;
        }
      }
      else if (v41[2] == 1)
      {
        physx::Cct::BoxController::getOBB((uint64_t)(v36 - 2), (uint64_t)v179);
        physx::Cct::CapsuleController::getCapsule((uint64_t)(v41 - 2), (uint64_t)&v170);
        v53 = v171;
        v184 = vcvt_f32_f64(v170);
        v185 = v53;
        v54 = v173;
        v182 = vcvt_f32_f64(v172);
        v183[0] = v54;
        v169 = 0;
        v55 = *(_QWORD *)((char *)v179[2].f64 + 4);
        v56 = *(float *)&v179[2].f64[1] * (float)(*(float *)&v179[2].f64[1] + *(float *)&v179[2].f64[1]);
        v57 = *((float *)&v179[2].f64[1] + 1)
            * (float)(*((float *)&v179[2].f64[1] + 1) + *((float *)&v179[2].f64[1] + 1));
        v58 = (float)(*(float *)&v55 + *(float *)&v55) * *(float *)&v179[2].f64[1];
        v59 = (float)(*(float *)&v55 + *(float *)&v55) * *((float *)&v179[2].f64[1] + 1);
        v60 = (float)(*(float *)&v55 + *(float *)&v55) * *(float *)&v180;
        v61 = (float)(*(float *)&v179[2].f64[1] + *(float *)&v179[2].f64[1]) * *((float *)&v179[2].f64[1] + 1);
        v62 = (float)(*(float *)&v179[2].f64[1] + *(float *)&v179[2].f64[1]) * *(float *)&v180;
        v155.f32[0] = (float)(v33 - v56) - v57;
        v155.f32[1] = v58
                    + (float)((float)(*((float *)&v179[2].f64[1] + 1) + *((float *)&v179[2].f64[1] + 1))
                            * *(float *)&v180);
        v63 = v33 - (float)(*(float *)&v55 * (float)(*(float *)&v55 + *(float *)&v55));
        *(float *)&v156 = v59 - v62;
        *((float *)&v156 + 1) = v58
                              - (float)((float)(*((float *)&v179[2].f64[1] + 1) + *((float *)&v179[2].f64[1] + 1))
                                      * *(float *)&v180);
        *(float *)&v157 = v63 - v57;
        *((float *)&v157 + 1) = v61 + v60;
        v158 = v59 + v62;
        v159 = v61 - v60;
        v160 = v63 - v56;
        v64 = v179[1].f64[0];
        v147 = vcvt_f32_f64(v179[0]);
        v148[0] = v64;
        physx::Gu::distanceSegmentBoxSquared((float *)&v184, (float *)&v182, (float *)&v147, (float32x2_t *)&v179[1].f64[1], (float *)&v155, &v169, (float32x2_t *)&v151);
        v66 = sqrtf(v65);
        v67 = v174;
        v52 = 0.0;
        if (v66 < v174)
        {
          v177 = *v142;
          v178 = *((float *)v36 + 103);
          v165 = vadd_f32(v147, vmul_f32(vadd_f32(v184, v182), (float32x2_t)0xBF000000BF000000));
          v166 = v148[0] + (float)((float)(v185 + v183[0]) * -0.5);
          fixDir((float *)&v167, (float *)&v165, (float *)&v177);
          v175 = v167;
          v176 = v168;
          v52 = v67 - v66;
        }
        goto LABEL_84;
      }
      physx::Cct::BoxController::getOBB((uint64_t)(v36 - 2), (uint64_t)&v170);
      physx::Cct::BoxController::getOBB((uint64_t)(v41 - 2), (uint64_t)&v155);
      v68 = 0;
      v69 = 0;
      v70 = v170.f64[0];
      v71 = v170.f64[1];
      v72 = v171;
      v73 = *((float *)&v172.f64[1] + 1);
      v74 = *(float *)&v173;
      v75 = v73 * (float)(v73 + v73);
      v76 = v74 * (float)(v74 + v74);
      v77 = *((float *)&v173 + 1) * (float)(*((float *)&v173 + 1) + *((float *)&v173 + 1));
      v78 = (float)(v73 + v73) * *(float *)&v173;
      v79 = (float)(v73 + v73) * *((float *)&v173 + 1);
      v80 = (float)(v73 + v73) * v174;
      v81 = (float)(v74 + v74) * *((float *)&v173 + 1);
      v82 = (float)(v74 + v74) * v174;
      v83 = (float)(v33 - v76) - v77;
      v84 = v78 + (float)((float)(*((float *)&v173 + 1) + *((float *)&v173 + 1)) * v174);
      v151 = __PAIR64__(LODWORD(v84), LODWORD(v83));
      v85 = v78 - (float)((float)(*((float *)&v173 + 1) + *((float *)&v173 + 1)) * v174);
      v86 = v33 - v75;
      v87 = (float)(v33 - v75) - v77;
      v152[0] = v79 - v82;
      v152[1] = v85;
      v152[2] = v87;
      v153[0] = v81 + v80;
      v88 = v79 + v82;
      v89 = v81 - v80;
      v153[1] = v88;
      v153[2] = v89;
      v154 = v86 - v76;
      v90 = *(double *)&v155;
      v91 = v156;
      v92 = v157;
      v93 = v161;
      v94 = v162;
      v95 = v163;
      v96 = v93 * (float)(v93 + v93);
      v97 = v94 * (float)(v94 + v94);
      v98 = v95 * (float)(v95 + v95);
      v99 = (float)(v93 + v93) * v162;
      v100 = (float)(v93 + v93) * v163;
      v101 = (float)(v93 + v93) * v164;
      v102 = (float)(v94 + v94) * v163;
      v103 = (float)(v94 + v94) * v164;
      v104 = (float)(v95 + v95) * v164;
      v105 = (float)(v33 - v97) - v98;
      v106 = v99 + v104;
      v147.f32[0] = v105;
      v147.f32[1] = v99 + v104;
      v107 = v99 - v104;
      v108 = (float)(v33 - v96) - v98;
      v148[0] = v100 - v103;
      v148[1] = v107;
      v148[2] = v108;
      v149[0] = v102 + v101;
      v109 = v100 + v103;
      v149[1] = v109;
      v149[2] = v102 - v101;
      v150 = (float)(v33 - v96) - v97;
      v110 = (float)((float)(v84 * (float)(v91 - v71)) + (float)((float)(v90 - v70) * v83))
           + (float)((float)(v92 - v72) * v152[0]);
      v111 = (float)((float)(v87 * (float)(v91 - v71)) + (float)((float)(v90 - v70) * v85))
           + (float)((float)(v92 - v72) * v153[0]);
      v112 = (float)((float)(v89 * (float)(v91 - v71)) + (float)((float)(v90 - v70) * v88))
           + (float)((float)(v92 - v72) * v154);
      v177.f32[0] = v110;
      v177.f32[1] = v111;
      v178 = v112;
      do
      {
        v113 = 0;
        v114 = &v152[3 * v69 - 2];
        v115 = *v114;
        v116 = v114[1];
        v117 = v114[2];
        v118 = v68;
        do
        {
          v119 = (float)((float)(v116 * v147.f32[v113 + 1]) + (float)(v115 * v147.f32[v113]))
               + (float)(v117 * *(float *)((char *)&v147 + v113 * 4 + 8));
          *(float *)((char *)v184.f32 + v118) = v119;
          *(float *)((char *)v182.f32 + v118) = fabsf(v119) + 0.000001;
          v113 += 3;
          v118 += 4;
        }
        while (v113 != 9);
        ++v69;
        v68 += 12;
      }
      while (v69 != 3);
      v120 = 0;
      v121 = v158;
      v122 = v159;
      v123 = v183;
      v124 = v160;
      while (1)
      {
        v125 = (float)(*(float *)((char *)v172.f64 + v120 * 4)
                     + (float)((float)((float)(v122 * *(v123 - 1)) + (float)(v121 * *(v123 - 2))) + (float)(v124 * *v123)))
             - fabsf(v177.f32[v120]);
        if (v125 < 0.0)
          break;
        *(float *)((char *)v179[0].f64 + v120 * 4) = v125;
        ++v120;
        v123 += 3;
        if (v120 == 3)
        {
          v126 = 0;
          v127 = v172.f64[0];
          v128 = *(float *)&v172.f64[1];
          while (1)
          {
            v129 = (float)(*(float *)((char *)&v158 + v126 * 4)
                         + (float)((float)((float)(*((float *)&v127 + 1) * v183[v126 + 1])
                                         + (float)(*(float *)&v127 * v182.f32[v126]))
                                 + (float)(v128 * v183[v126 + 4])))
                 - fabsf((float)((float)(v111 * *(float *)&v186[v126 * 4]) + (float)(v110 * v184.f32[v126]))+ (float)(v112 * *(float *)&v186[v126 * 4 + 12]));
            if (v129 < 0.0)
              goto LABEL_68;
            *(float *)((char *)&v179[0].f64[1] + v126 * 4 + 4) = v129;
            if (++v126 == 3)
            {
              v52 = *(float *)v179[0].f64;
              for (i = 1; i != 6; ++i)
              {
                v131 = *((float *)v179[0].f64 + i);
                if (v131 < v52)
                  v52 = *((float *)v179[0].f64 + i);
              }
              v132 = v152;
              switch(v152)
              {
                case 0u:
                  goto LABEL_73;
                case 1u:
                  v83 = v85;
                  v84 = v87;
                  v132 = v153;
                  goto LABEL_73;
                case 2u:
                  v83 = v88;
                  v84 = v89;
                  v132 = &v154;
                  goto LABEL_73;
                case 3u:
                  v83 = v105;
                  v84 = v106;
                  v132 = v148;
                  goto LABEL_73;
                case 4u:
                  v83 = v107;
                  v84 = v108;
                  v132 = v149;
                  goto LABEL_73;
                case 5u:
                  v83 = v109;
                  v84 = v102 - v101;
                  v132 = &v150;
LABEL_73:
                  v131 = *v132;
                  break;
                default:
                  break;
              }
              v133 = (float)((float)((float)(v71 - v91) * v84) + (float)(v83 * (float)(v70 - v90)))
                   + (float)(v131 * (float)(v72 - v92));
              v134 = v133 < 0.0;
              if (v133 >= 0.0)
                v135 = v83;
              else
                v135 = -v83;
              if (v134)
                v136 = -v84;
              else
                v136 = v84;
              if (v134)
                v137 = -v131;
              else
                v137 = v131;
              v175 = (float32x2_t)__PAIR64__(LODWORD(v136), LODWORD(v135));
              v176 = v137;
              v179[0].f64[0] = *(float64_t *)v142;
              LODWORD(v179[0].f64[1]) = v36[103];
              fixDir((float *)&v184, (float *)&v175, (float *)v179);
              v175 = v184;
              v176 = v185;
              goto LABEL_84;
            }
          }
        }
      }
LABEL_68:
      v52 = 0.0;
      goto LABEL_84;
    }
  }
LABEL_90:
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  if ((v146 & 0x8000000000000000) == 0 && (v146 & 0x7FFFFFFF00000000) != 0)
  {
    if (v145)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t PxCreateControllerManager(physx::shdfnd::Foundation *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  char v14;

  v8 = a2;
  physx::shdfnd::Foundation::incRefCount(a1, a2, a3, a4, a5, a6, a7, a8, v14);
  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::CharacterControllerManager>::getName() [T = "
          "physx::Cct::CharacterControllerManager]";
  else
    v11 = "<allocation names disabled>";
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 272, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 697);
  return physx::Cct::CharacterControllerManager::CharacterControllerManager(v12, (uint64_t)a1, v8);
}

void physx::Cct::Controller::setUpDirectionInternal(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  uint64_t v6;
  int v7;
  __int128 v8;

  v4 = *(float *)a2;
  if (*(float *)(a1 + 32) != *(float *)a2)
  {
    v5 = *(float *)(a2 + 4);
LABEL_6:
    v6 = 1065353216;
    v7 = 0;
    physx::PxShortestRotation((float *)&v6, (float *)a2, (float *)&v8);
    *(_OWORD *)(a1 + 16) = v8;
    *(float *)(a1 + 32) = v4;
    *(float *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 8);
    return;
  }
  v5 = *(float *)(a2 + 4);
  if (*(float *)(a1 + 36) != v5 || *(float *)(a1 + 40) != *(float *)(a2 + 8))
    goto LABEL_6;
}

uint64_t physx::Cct::Controller::getInternalState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result;
  if (*(_BYTE *)(*(_QWORD *)(result + 600) + 200))
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || (v4 = physx::shdfnd::g_isLockingEnabled) != 0)
    {
      result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 592));
      v4 = *(_BYTE *)(*(_QWORD *)(v3 + 600) + 200) == 0;
    }
  }
  else
  {
    v4 = 1;
  }
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 520);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 528);
  v5 = *(_QWORD *)(v3 + 296);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 272);
  *(_QWORD *)(a2 + 24) = v5;
  v6 = *(_DWORD *)(v3 + 468);
  *(_BYTE *)(a2 + 40) = (v6 & 0x10) != 0;
  *(_BYTE *)(a2 + 41) = (v6 & 0x20) != 0;
  LODWORD(v5) = *(_DWORD *)(v3 + 320);
  *(_BYTE *)(a2 + 42) = BYTE1(v6) & 1;
  v7 = *(unsigned __int8 *)(v3 + 584);
  *(_DWORD *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 36) = v7;
  if ((v4 & 1) == 0 && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 592));
  return result;
}

uint64_t physx::Cct::Controller::setPos(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t result;
  float v5;
  __int128 v6;
  float32x2_t v7;
  float v8;

  v3 = *a2;
  *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 496) = v3;
  result = *(_QWORD *)(a1 + 488);
  if (result)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)result + 152))(&v6);
    v5 = *(double *)(a1 + 512);
    v7 = vcvt_f32_f64(*(float64x2_t *)(a1 + 496));
    v8 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    return (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 488) + 496))(*(_QWORD *)(a1 + 488), &v6);
  }
  return result;
}

uint64_t physx::Cct::BoxController::getType(physx::Cct::BoxController *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t physx::Cct::BoxController::release(physx::Cct::BoxController *this)
{
  int32x2_t *v1;
  uint64_t (***v2)(uint64_t);

  v1 = (int32x2_t *)*((_QWORD *)this + 76);
  v2 = (uint64_t (***)(uint64_t))(*(uint64_t (**)(void))(*((_QWORD *)this + 1) + 32))();
  return physx::Cct::CharacterControllerManager::releaseController(v1, v2);
}

uint64_t physx::Cct::BoxController::setPosition(uint64_t a1, __int128 *a2)
{
  physx::Cct::Controller::setPos(a1 + 8, a2);
  return 1;
}

uint64_t physx::Cct::BoxController::getPosition(physx::Cct::BoxController *this)
{
  return (uint64_t)this + 504;
}

uint64_t physx::Cct::BoxController::getActor(physx::Cct::BoxController *this)
{
  return *((_QWORD *)this + 62);
}

uint64_t physx::Cct::BoxController::setStepOffset(uint64_t this, float a2)
{
  if (a2 >= 0.0)
    *(float *)(this + 60) = a2;
  return this;
}

float physx::Cct::BoxController::getStepOffset(physx::Cct::BoxController *this)
{
  return *((float *)this + 15);
}

uint64_t physx::Cct::BoxController::setNonWalkableMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t physx::Cct::BoxController::getNonWalkableMode(physx::Cct::BoxController *this)
{
  return *((unsigned int *)this + 5);
}

float physx::Cct::BoxController::getContactOffset(physx::Cct::BoxController *this)
{
  return *((float *)this + 14);
}

uint64_t physx::Cct::BoxController::setContactOffset(uint64_t this, float a2)
{
  if (a2 > 0.0)
    *(float *)(this + 56) = a2;
  return this;
}

float physx::Cct::BoxController::getUpDirection@<S0>(physx::Cct::BoxController *this@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = *((_QWORD *)this + 5);
  result = *((float *)this + 12);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::Cct::BoxController::setUpDirection(uint64_t a1, uint64_t a2)
{
  physx::Cct::Controller::setUpDirectionInternal(a1 + 8, a2);
}

float physx::Cct::BoxController::getSlopeLimit(physx::Cct::BoxController *this)
{
  return *((float *)this + 13);
}

uint64_t physx::Cct::BoxController::setSlopeLimit(uint64_t this, float a2)
{
  if (a2 > 0.0)
    *(float *)(this + 52) = a2;
  return this;
}

uint64_t physx::Cct::BoxController::getScene(physx::Cct::BoxController *this)
{
  return *((_QWORD *)this + 69);
}

uint64_t physx::Cct::BoxController::getUserData(physx::Cct::BoxController *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t physx::Cct::BoxController::setUserData(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 104) = a2;
  return this;
}

uint64_t physx::Cct::BoxController::getState(uint64_t a1, uint64_t a2)
{
  return physx::Cct::Controller::getInternalState(a1 + 8, a2);
}

int8x8_t physx::Cct::BoxController::getStats(uint64_t a1, int8x8_t *a2)
{
  int8x8_t result;

  result = vext_s8(*(int8x8_t *)(a1 + 468), *(int8x8_t *)(a1 + 468), 6uLL);
  *a2 = result;
  return result;
}

float physx::Cct::BoxController::getHalfHeightInternal(physx::Cct::BoxController *this)
{
  return *((float *)this + 154);
}

float `non-virtual thunk to'physx::Cct::BoxController::getHalfHeightInternal(physx::Cct::BoxController *this)
{
  return *((float *)this + 152);
}

uint64_t `non-virtual thunk to'physx::Cct::BoxController::getPxController(physx::Cct::BoxController *this)
{
  return (uint64_t)this - 8;
}

uint64_t physx::Cct::CapsuleController::getType(physx::Cct::CapsuleController *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t physx::Cct::CapsuleController::release(physx::Cct::CapsuleController *this)
{
  int32x2_t *v1;
  uint64_t (***v2)(uint64_t);

  v1 = (int32x2_t *)*((_QWORD *)this + 76);
  v2 = (uint64_t (***)(uint64_t))(*(uint64_t (**)(void))(*((_QWORD *)this + 1) + 32))();
  return physx::Cct::CharacterControllerManager::releaseController(v1, v2);
}

uint64_t physx::Cct::CapsuleController::setPosition(uint64_t a1, __int128 *a2)
{
  physx::Cct::Controller::setPos(a1 + 8, a2);
  return 1;
}

uint64_t physx::Cct::CapsuleController::getPosition(physx::Cct::CapsuleController *this)
{
  return (uint64_t)this + 504;
}

uint64_t physx::Cct::CapsuleController::getActor(physx::Cct::CapsuleController *this)
{
  return *((_QWORD *)this + 62);
}

uint64_t physx::Cct::CapsuleController::setStepOffset(uint64_t this, float a2)
{
  if (a2 >= 0.0)
    *(float *)(this + 60) = a2;
  return this;
}

float physx::Cct::CapsuleController::getStepOffset(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 15);
}

uint64_t physx::Cct::CapsuleController::setNonWalkableMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t physx::Cct::CapsuleController::getNonWalkableMode(physx::Cct::CapsuleController *this)
{
  return *((unsigned int *)this + 5);
}

float physx::Cct::CapsuleController::getContactOffset(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 14);
}

uint64_t physx::Cct::CapsuleController::setContactOffset(uint64_t this, float a2)
{
  if (a2 > 0.0)
    *(float *)(this + 56) = a2;
  return this;
}

float physx::Cct::CapsuleController::getUpDirection@<S0>(physx::Cct::CapsuleController *this@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = *((_QWORD *)this + 5);
  result = *((float *)this + 12);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::Cct::CapsuleController::setUpDirection(uint64_t a1, uint64_t a2)
{
  physx::Cct::Controller::setUpDirectionInternal(a1 + 8, a2);
}

float physx::Cct::CapsuleController::getSlopeLimit(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 13);
}

uint64_t physx::Cct::CapsuleController::setSlopeLimit(uint64_t this, float a2)
{
  if (a2 > 0.0)
    *(float *)(this + 52) = a2;
  return this;
}

uint64_t physx::Cct::CapsuleController::getScene(physx::Cct::CapsuleController *this)
{
  return *((_QWORD *)this + 69);
}

uint64_t physx::Cct::CapsuleController::getUserData(physx::Cct::CapsuleController *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t physx::Cct::CapsuleController::setUserData(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 104) = a2;
  return this;
}

uint64_t physx::Cct::CapsuleController::getState(uint64_t a1, uint64_t a2)
{
  return physx::Cct::Controller::getInternalState(a1 + 8, a2);
}

int8x8_t physx::Cct::CapsuleController::getStats(uint64_t a1, int8x8_t *a2)
{
  int8x8_t result;

  result = vext_s8(*(int8x8_t *)(a1 + 468), *(int8x8_t *)(a1 + 468), 6uLL);
  *a2 = result;
  return result;
}

float physx::Cct::CapsuleController::getRadius(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 154);
}

float physx::Cct::CapsuleController::getHeight(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 155);
}

float physx::Cct::CapsuleController::getHalfHeightInternal(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 154) + (float)(*((float *)this + 155) * 0.5);
}

float `non-virtual thunk to'physx::Cct::CapsuleController::getHalfHeightInternal(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 152) + (float)(*((float *)this + 153) * 0.5);
}

uint64_t `non-virtual thunk to'physx::Cct::CapsuleController::getPxController(physx::Cct::CapsuleController *this)
{
  return (uint64_t)this - 8;
}

uint64_t SweepBoxUserBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float64x2_t v13;
  double v14;
  float v15;
  float v16;
  __int128 v17;
  __int16 v18;
  int v19;
  uint64_t result;
  float v21;
  __int16 v22;
  _QWORD v23[2];
  int v24;
  __int16 v25;
  float32x2_t v26;
  __int128 v27;
  float v28;
  __int128 v29;
  float32x2_t v30;
  float v31;
  int v32;
  uint64_t v33;
  int v34;
  float32x4_t v35;
  float32x2_t v36;
  float v37;
  int v38;
  uint64_t v39;
  int v40;

  v38 = 3;
  v39 = *(_QWORD *)(a2 + 40);
  v40 = *(_DWORD *)(a2 + 48);
  v13 = *(float64x2_t *)(a3 + 20);
  v36 = vcvt_f32_f64(vsubq_f64(*a4, v13));
  v14 = *(double *)(a3 + 36);
  v15 = a4[1].f64[0] - v14;
  v37 = v15;
  v35 = *(float32x4_t *)(a1 + 284);
  v32 = 3;
  v33 = *(_QWORD *)(a3 + 68);
  v34 = *(_DWORD *)(a3 + 76);
  v30 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v13));
  v16 = *(double *)(a3 + 60) - v14;
  v31 = v16;
  v17 = *(_OWORD *)(a3 + 80);
  v29 = v17;
  v23[0] = 0;
  v23[1] = 0;
  v24 = -1;
  v25 = 0;
  v27 = 0uLL;
  v26 = 0;
  v28 = 3.4028e38;
  LODWORD(v17) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v18 = 1283;
  else
    v18 = 1027;
  v22 = v18;
  LODWORD(v13.f64[0]) = 0;
  v19 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v38, &v35, &v32, (uint64_t)&v29, (uint64_t)v23, &v22, *(double *)&v17, v13.f64[0], v14, a10, a11);
  result = 0;
  if (v19)
  {
    v21 = v28;
    if (v28 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v27 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v27);
      *(float *)(a6 + 36) = v21;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v26));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v27;
      return 1;
    }
  }
  return result;
}

uint64_t SweepBoxUserCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  float64x2_t v10;
  double v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  __int16 v20;
  int v21;
  uint64_t result;
  float v23;
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  float32x2_t v27;
  __int128 v28;
  float v29;
  __int128 v30;
  uint64_t v31;
  __int32 v32;
  int v33[2];
  float v34;
  float32x4_t v35;
  float32x2_t v36;
  float v37;
  int v38;
  uint64_t v39;
  int v40;
  float32x2_t v41;
  float v42;
  float32x2_t v43;
  float v44;

  v38 = 3;
  v39 = *(_QWORD *)(a2 + 40);
  v40 = *(_DWORD *)(a2 + 48);
  v10 = *(float64x2_t *)(a3 + 20);
  v36 = vcvt_f32_f64(vsubq_f64(*a4, v10));
  v11 = *(double *)(a3 + 36);
  v12 = a4[1].f64[0] - v11;
  v37 = v12;
  v35 = *(float32x4_t *)(a1 + 284);
  v33[0] = 2;
  v34 = 0.0;
  v43 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v10));
  v13 = *(double *)(a3 + 60) - v11;
  v44 = v13;
  v41 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 68), v10));
  v14 = *(double *)(a3 + 84) - v11;
  v42 = v14;
  v33[1] = *(_DWORD *)(a3 + 92);
  physx::PxTransformFromSegment(&v43, &v41, &v34, (uint64_t)&v25);
  v30 = v25;
  HIDWORD(v19) = HIDWORD(v26);
  v31 = v26;
  v32 = v27.i32[0];
  if (v34 == 0.0)
    v34 = 0.00000011921;
  v25 = 0uLL;
  LODWORD(v26) = -1;
  WORD2(v26) = 0;
  v28 = 0uLL;
  v27 = 0;
  v29 = 3.4028e38;
  LODWORD(v19) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v20 = 1283;
  else
    v20 = 1027;
  v24 = v20;
  LODWORD(v15) = 0;
  v21 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v38, &v35, v33, (uint64_t)&v30, (uint64_t)&v25, &v24, v19, v15, v16, v17, v18);
  result = 0;
  if (v21)
  {
    v23 = v29;
    if (v29 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v28 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v28);
      *(float *)(a6 + 36) = v23;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v27));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v28;
      return 1;
    }
  }
  return result;
}

uint64_t SweepBoxMesh(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, uint64_t a6, double a7, double a8, double a9, __n128 a10, double a11, float32x4_t a12, double a13, __n128 a14)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  float64x2_t v18;
  __int128 v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;

  v14 = *(unsigned int *)(a3 + 44);
  if (!(_DWORD)v14)
    return 0;
  v15 = *(_QWORD *)(a1 + 16) + 36 * *(unsigned int *)(a3 + 48);
  v16 = *(_DWORD *)(a1 + 4 * *(unsigned int *)(a1 + 112) + 116);
  if (v16 >= v14)
    v16 = 0;
  v23 = 3;
  v24 = *(_QWORD *)(a2 + 40);
  v25 = *(_DWORD *)(a2 + 48);
  v17 = a4[1].f64[0] - *(double *)(a3 + 36);
  *(float *)&v17 = v17;
  v20 = *(_OWORD *)(a1 + 284);
  v18 = *(float64x2_t *)(a3 + 20);
  v21 = COERCE_DOUBLE(vcvt_f32_f64(vsubq_f64(*a4, v18)));
  v22 = LODWORD(v17);
  return sweepVolumeVsMesh(a1, a3, a6, a5, &v23, (int32x2_t *)&v20, v14, v15, v17, v21, v18.f64[0], a10, a11, a12, a13, a14, v16);
}

uint64_t SweepBoxBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  double v13;
  float v14;
  __int128 v15;
  __int16 v16;
  int v17;
  uint64_t result;
  float v19;
  __int16 v20;
  _QWORD v21[2];
  int v22;
  __int16 v23;
  float32x2_t v24;
  __int128 v25;
  float v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  float32x4_t v33;
  float32x2_t v34;
  float v35;
  int v36;
  uint64_t v37;
  int v38;

  v36 = 3;
  v37 = *(_QWORD *)(a2 + 40);
  v38 = *(_DWORD *)(a2 + 48);
  v34 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  v13 = *(double *)(a3 + 36);
  v14 = a4[1].f64[0] - v13;
  v35 = v14;
  v33 = *(float32x4_t *)(a1 + 284);
  v30 = 3;
  v31 = *(_QWORD *)(a3 + 56);
  v32 = *(_DWORD *)(a3 + 64);
  v28 = *(_QWORD *)(a3 + 44);
  v29 = *(_DWORD *)(a3 + 52);
  v15 = *(_OWORD *)(a3 + 68);
  v27 = v15;
  v21[0] = 0;
  v21[1] = 0;
  v22 = -1;
  v23 = 0;
  v25 = 0uLL;
  v24 = 0;
  v26 = 3.4028e38;
  LODWORD(v15) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v16 = 1283;
  else
    v16 = 1027;
  v20 = v16;
  LODWORD(v13) = 0;
  v17 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v36, &v33, &v30, (uint64_t)&v27, (uint64_t)v21, &v20, *(double *)&v15, v13, a9, a10, a11);
  result = 0;
  if (v17)
  {
    v19 = v26;
    if (v26 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v25 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v25);
      *(float *)(a6 + 36) = v19;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v24));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v25;
      return 1;
    }
  }
  return result;
}

double SweepBoxSphere(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float v13;
  double v14;
  double v15;
  __int16 v16;
  double result;
  __int16 v18;
  _QWORD v19[2];
  int v20;
  __int16 v21;
  float32x2_t v22;
  _BYTE v23[20];
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27[2];
  float32x4_t v28;
  float32x2_t v29;
  float v30;
  int v31;
  uint64_t v32;
  int v33;

  v31 = 3;
  v32 = *(_QWORD *)(a2 + 40);
  v33 = *(_DWORD *)(a2 + 48);
  v29 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  v14 = *(double *)(a3 + 36);
  v13 = a4[1].f64[0] - v14;
  v30 = v13;
  v28 = *(float32x4_t *)(a1 + 284);
  v27[0] = 0;
  LODWORD(v14) = *(_DWORD *)(a3 + 52);
  v27[1] = *(_DWORD *)(a3 + 56);
  v25 = *(_QWORD *)(a3 + 44);
  v26 = LODWORD(v14);
  HIDWORD(v15) = 0;
  v24 = xmmword_2260E5D70;
  v19[0] = 0;
  v19[1] = 0;
  v20 = -1;
  v21 = 0;
  *(_OWORD *)v23 = 0uLL;
  v22 = 0;
  *(_DWORD *)&v23[16] = 2139095039;
  LODWORD(v15) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v16 = 1283;
  else
    v16 = 1027;
  v18 = v16;
  LODWORD(v14) = 0;
  if (physx::PxGeometryQuery::sweep(a5, (uint64_t)&v31, &v28, v27, (uint64_t)&v24, (uint64_t)v19, &v18, v15, v14, a9, a10, a11))
  {
    *(_OWORD *)(a6 + 24) = *(_OWORD *)&v23[4];
    *(_QWORD *)(a6 + 40) = -1;
    *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v22));
    result = *(double *)(a3 + 36) + *(float *)v23;
    *(double *)(a6 + 16) = result;
  }
  return result;
}

uint64_t SweepBoxCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  float v10;
  double v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  double v15;
  __int16 v16;
  int v17;
  uint64_t result;
  float v19;
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  float32x2_t v23;
  __int128 v24;
  float v25;
  __int128 v26;
  uint64_t v27;
  __int32 v28;
  int v29[2];
  float v30;
  float32x4_t v31;
  float32x2_t v32;
  float v33;
  int v34;
  uint64_t v35;
  int v36;

  v34 = 3;
  v35 = *(_QWORD *)(a2 + 40);
  v36 = *(_DWORD *)(a2 + 48);
  v32 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  v10 = a4[1].f64[0] - *(double *)(a3 + 36);
  v33 = v10;
  v31 = *(float32x4_t *)(a1 + 284);
  v29[0] = 2;
  v30 = 0.0;
  v29[1] = *(_DWORD *)(a3 + 68);
  physx::PxTransformFromSegment((float32x2_t *)(a3 + 44), (float32x2_t *)(a3 + 56), &v30, (uint64_t)&v21);
  v26 = v21;
  HIDWORD(v15) = HIDWORD(v22);
  v27 = v22;
  v28 = v23.i32[0];
  if (v30 == 0.0)
    v30 = 0.00000011921;
  v21 = 0uLL;
  LODWORD(v22) = -1;
  WORD2(v22) = 0;
  v24 = 0uLL;
  v23 = 0;
  v25 = 3.4028e38;
  LODWORD(v15) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v16 = 1283;
  else
    v16 = 1027;
  v20 = v16;
  LODWORD(v11) = 0;
  v17 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v34, &v31, v29, (uint64_t)&v26, (uint64_t)&v21, &v20, v15, v11, v12, v13, v14);
  result = 0;
  if (v17)
  {
    v19 = v25;
    if (v25 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v24 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v24);
      *(float *)(a6 + 36) = v19;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v23));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v24;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleUserBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float v13;
  float64x2_t v14;
  double v15;
  float v16;
  float v17;
  __int128 v18;
  __int16 v19;
  int v20;
  uint64_t result;
  float v22;
  __int16 v23;
  _QWORD v24[2];
  int v25;
  __int16 v26;
  float32x2_t v27;
  __int128 v28;
  float v29;
  __int128 v30;
  float32x2_t v31;
  float v32;
  int v33;
  uint64_t v34;
  int v35;
  float32x4_t v36;
  float32x2_t v37;
  float v38;
  float v39[3];

  LODWORD(v39[0]) = 2;
  v13 = *(float *)(a2 + 44) * 0.5;
  v39[1] = *(float *)(a2 + 40);
  v39[2] = v13;
  v14 = *(float64x2_t *)(a3 + 20);
  v37 = vcvt_f32_f64(vsubq_f64(*a4, v14));
  v15 = *(double *)(a3 + 36);
  v16 = a4[1].f64[0] - v15;
  v38 = v16;
  v36 = *(float32x4_t *)(a1 + 284);
  v33 = 3;
  v34 = *(_QWORD *)(a3 + 68);
  v35 = *(_DWORD *)(a3 + 76);
  v31 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v14));
  v17 = *(double *)(a3 + 60) - v15;
  v32 = v17;
  v18 = *(_OWORD *)(a3 + 80);
  v30 = v18;
  v24[0] = 0;
  v24[1] = 0;
  v25 = -1;
  v26 = 0;
  v28 = 0uLL;
  v27 = 0;
  v29 = 3.4028e38;
  LODWORD(v18) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v19 = 1283;
  else
    v19 = 1027;
  v23 = v19;
  LODWORD(v14.f64[0]) = 0;
  v20 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v39, &v36, &v33, (uint64_t)&v30, (uint64_t)v24, &v23, *(double *)&v18, v14.f64[0], v15, a10, a11);
  result = 0;
  if (v20)
  {
    v22 = v29;
    if (v29 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v28 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v28);
      *(float *)(a6 + 36) = v22;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v27));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v28;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleUserCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  float v10;
  float64x2_t v11;
  double v12;
  float v13;
  float v14;
  float v15;
  double v16;
  double v17;
  int8x16_t v18;
  int8x16_t v19;
  double v20;
  __int16 v21;
  int v22;
  uint64_t result;
  float v24;
  __int16 v25;
  __int128 v26;
  uint64_t v27;
  float32x2_t v28;
  __int128 v29;
  float v30;
  __int128 v31;
  uint64_t v32;
  __int32 v33;
  int v34[2];
  float v35;
  float32x4_t v36;
  float32x2_t v37;
  float v38;
  float v39[3];
  float32x2_t v40;
  float v41;
  float32x2_t v42;
  float v43;

  LODWORD(v39[0]) = 2;
  v10 = *(float *)(a2 + 44) * 0.5;
  v39[1] = *(float *)(a2 + 40);
  v39[2] = v10;
  v11 = *(float64x2_t *)(a3 + 20);
  v37 = vcvt_f32_f64(vsubq_f64(*a4, v11));
  v12 = *(double *)(a3 + 36);
  v13 = a4[1].f64[0] - v12;
  v38 = v13;
  v36 = *(float32x4_t *)(a1 + 284);
  v34[0] = 2;
  v35 = 0.0;
  v42 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v11));
  v14 = *(double *)(a3 + 60) - v12;
  v43 = v14;
  v40 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 68), v11));
  v15 = *(double *)(a3 + 84) - v12;
  v41 = v15;
  v34[1] = *(_DWORD *)(a3 + 92);
  physx::PxTransformFromSegment(&v42, &v40, &v35, (uint64_t)&v26);
  v31 = v26;
  HIDWORD(v20) = HIDWORD(v27);
  v32 = v27;
  v33 = v28.i32[0];
  if (v35 == 0.0)
    v35 = 0.00000011921;
  v26 = 0uLL;
  LODWORD(v27) = -1;
  WORD2(v27) = 0;
  v29 = 0uLL;
  v28 = 0;
  v30 = 3.4028e38;
  LODWORD(v20) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v21 = 1283;
  else
    v21 = 1027;
  v25 = v21;
  LODWORD(v16) = 0;
  v22 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v39, &v36, v34, (uint64_t)&v31, (uint64_t)&v26, &v25, v20, v16, v17, v18, v19);
  result = 0;
  if (v22)
  {
    v24 = v30;
    if (v30 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v29 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v29);
      *(float *)(a6 + 36) = v24;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v28));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v29;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleMesh(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, uint64_t a6, double a7, double a8, double a9, __n128 a10, double a11, float32x4_t a12, double a13, __n128 a14)
{
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  float v20;
  __int128 v22;
  float32x2_t v23;
  float v24;
  int v25[3];

  v14 = *(unsigned int *)(a3 + 44);
  if (!(_DWORD)v14)
    return 0;
  v15 = *(_DWORD *)(a2 + 40);
  LODWORD(a9) = 0.5;
  v16 = *(float *)(a2 + 44) * 0.5;
  v17 = *(_QWORD *)(a1 + 16) + 36 * *(unsigned int *)(a3 + 48);
  v18 = *(_DWORD *)(a1 + 4 * *(unsigned int *)(a1 + 112) + 116);
  if (v18 >= v14)
    v18 = 0;
  v25[0] = 2;
  v25[1] = v15;
  *(float *)&v25[2] = v16;
  v23 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  v19 = *(double *)(a3 + 36);
  v20 = a4[1].f64[0] - v19;
  v24 = v20;
  return sweepVolumeVsMesh(a1, a3, a6, a5, v25, (int32x2_t *)&v22, v14, v17, *(double *)(a1 + 284), v19, a9, a10, a11, a12, a13, a14, v18);
}

uint64_t SweepCapsuleBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float v13;
  float v14;
  double v15;
  float v16;
  __int128 v17;
  __int16 v18;
  int v19;
  uint64_t result;
  float v21;
  __int16 v22;
  _QWORD v23[2];
  int v24;
  __int16 v25;
  float32x2_t v26;
  __int128 v27;
  float v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  float32x4_t v35;
  float32x2_t v36;
  float v37;
  float v38[3];

  v13 = *(float *)(a2 + 40);
  LODWORD(a9) = 0.5;
  v14 = *(float *)(a2 + 44) * 0.5;
  LODWORD(v38[0]) = 2;
  v38[1] = v13;
  v38[2] = v14;
  v36 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  v15 = *(double *)(a3 + 36);
  v16 = a4[1].f64[0] - v15;
  v37 = v16;
  v35 = *(float32x4_t *)(a1 + 284);
  v32 = 3;
  v33 = *(_QWORD *)(a3 + 56);
  v34 = *(_DWORD *)(a3 + 64);
  v30 = *(_QWORD *)(a3 + 44);
  v31 = *(_DWORD *)(a3 + 52);
  v17 = *(_OWORD *)(a3 + 68);
  v29 = v17;
  v23[0] = 0;
  v23[1] = 0;
  v24 = -1;
  v25 = 0;
  v27 = 0uLL;
  v26 = 0;
  v28 = 3.4028e38;
  LODWORD(v17) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v18 = 1283;
  else
    v18 = 1027;
  v22 = v18;
  LODWORD(v15) = 0;
  v19 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v38, &v35, &v32, (uint64_t)&v29, (uint64_t)v23, &v22, *(double *)&v17, v15, a9, a10, a11);
  result = 0;
  if (v19)
  {
    v21 = v28;
    if (v28 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v27 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v27);
      *(float *)(a6 + 36) = v21;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v26));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v27;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleSphere(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float v13;
  float v14;
  float v15;
  double v16;
  double v17;
  __int16 v18;
  int v19;
  uint64_t result;
  float v21;
  __int16 v22;
  _QWORD v23[2];
  int v24;
  __int16 v25;
  float32x2_t v26;
  __int128 v27;
  float v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32[2];
  float32x4_t v33;
  float32x2_t v34;
  float v35;
  float v36[3];

  v13 = *(float *)(a2 + 40);
  LODWORD(a9) = 0.5;
  v14 = *(float *)(a2 + 44) * 0.5;
  LODWORD(v36[0]) = 2;
  v36[1] = v13;
  v36[2] = v14;
  v34 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  v16 = *(double *)(a3 + 36);
  v15 = a4[1].f64[0] - v16;
  v35 = v15;
  v33 = *(float32x4_t *)(a1 + 284);
  v32[0] = 0;
  LODWORD(v16) = *(_DWORD *)(a3 + 52);
  v32[1] = *(_DWORD *)(a3 + 56);
  v30 = *(_QWORD *)(a3 + 44);
  v31 = LODWORD(v16);
  HIDWORD(v17) = 0;
  v29 = xmmword_2260E5D70;
  v23[0] = 0;
  v23[1] = 0;
  v24 = -1;
  v25 = 0;
  v27 = 0uLL;
  v26 = 0;
  v28 = 3.4028e38;
  LODWORD(v17) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v18 = 1283;
  else
    v18 = 1027;
  v22 = v18;
  LODWORD(v16) = 0;
  v19 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v36, &v33, v32, (uint64_t)&v29, (uint64_t)v23, &v22, v17, v16, a9, a10, a11);
  result = 0;
  if (v19)
  {
    v21 = v28;
    if (v28 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v27 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v27);
      *(float *)(a6 + 36) = v21;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v26));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v27;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  __int16 v18;
  int v19;
  uint64_t result;
  float v21;
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  float32x2_t v25;
  __int128 v26;
  float v27;
  __int128 v28;
  uint64_t v29;
  __int32 v30;
  int v31[2];
  float v32;
  float32x4_t v33;
  float32x2_t v34;
  float v35;
  float v36[3];

  v10 = *(float *)(a2 + 40);
  v11 = *(float *)(a2 + 44) * 0.5;
  LODWORD(v36[0]) = 2;
  v36[1] = v10;
  v36[2] = v11;
  v34 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  v12 = a4[1].f64[0] - *(double *)(a3 + 36);
  v35 = v12;
  v33 = *(float32x4_t *)(a1 + 284);
  v31[0] = 2;
  v32 = 0.0;
  v31[1] = *(_DWORD *)(a3 + 68);
  physx::PxTransformFromSegment((float32x2_t *)(a3 + 44), (float32x2_t *)(a3 + 56), &v32, (uint64_t)&v23);
  v28 = v23;
  HIDWORD(v17) = HIDWORD(v24);
  v29 = v24;
  v30 = v25.i32[0];
  if (v32 == 0.0)
    v32 = 0.00000011921;
  v23 = 0uLL;
  LODWORD(v24) = -1;
  WORD2(v24) = 0;
  v26 = 0uLL;
  v25 = 0;
  v27 = 3.4028e38;
  LODWORD(v17) = *(_DWORD *)(a6 + 36);
  if (*(_BYTE *)(a1 + 339))
    v18 = 1283;
  else
    v18 = 1027;
  v22 = v18;
  LODWORD(v13) = 0;
  v19 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v36, &v33, v31, (uint64_t)&v28, (uint64_t)&v23, &v22, v17, v13, v14, v15, v16);
  result = 0;
  if (v19)
  {
    v21 = v27;
    if (v27 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a6 + 24) = *(_QWORD *)((char *)&v26 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v26);
      *(float *)(a6 + 36) = v21;
      *(_QWORD *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v25));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v26;
      return 1;
    }
  }
  return result;
}

uint64_t sweepVolumeVsMesh(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, int *a5, int32x2_t *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, __n128 a12, double a13, float32x4_t a14, double a15, __n128 a16, unsigned int a17)
{
  int v20;
  uint64_t result;
  float v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  _QWORD v26[2];
  unsigned int v27;
  __int16 v28;
  float32x2_t v29;
  __int128 v30;
  float v31;

  v26[0] = 0;
  v26[1] = 0;
  v27 = -1;
  v28 = 0;
  v30 = 0uLL;
  v29 = 0;
  v31 = 3.4028e38;
  LODWORD(a9) = *(_DWORD *)(a3 + 36);
  LODWORD(a10) = 0;
  v20 = physx::PxMeshQuery::sweep(a4, a5, a6, a7, a8, (uint64_t)v26, &v25, &a17, a9, a10, a11, a12, a13, a14, a15, a16, 0);
  result = 0;
  if (v20)
  {
    v22 = v31;
    if (v31 >= *(float *)(a3 + 36))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)(a3 + 24) = *(_QWORD *)((char *)&v30 + 4);
      *(_DWORD *)(a3 + 32) = HIDWORD(v30);
      *(float *)(a3 + 36) = v22;
      *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)(a2 + 20), vcvtq_f64_f32(v29));
      *(double *)(a3 + 16) = *(double *)(a2 + 36) + *(float *)&v30;
      v23 = v27;
      *(_DWORD *)(a1 + 4 * *(unsigned int *)(a1 + 112) + 116) = v27;
      v24 = *(unsigned int *)(a2 + 48);
      *(_DWORD *)(a3 + 40) = v24 + v23;
      *(_DWORD *)(a3 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v24 + 4 * v23);
      return 1;
    }
  }
  return result;
}

uint64_t ControllerFilter::preFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (***v15)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 312))(&v17, a3);
  if ((v17 & 4) != 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v10 + 52))
  {
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = *(unsigned int *)(*(_QWORD *)(v10 + 24)
                          + 4 * ((*(_DWORD *)(v10 + 36) - 1) & ((v13 >> 31) ^ v13)));
    if ((_DWORD)v14 != -1)
    {
      while (*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v14) != a3)
      {
        v14 = *(unsigned int *)(*(_QWORD *)(v10 + 16) + 4 * v14);
        if ((_DWORD)v14 == -1)
          goto LABEL_6;
      }
      return 0;
    }
  }
LABEL_6:
  v15 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (v15)
    return (**v15)(v15, a2, a3, a4, a5);
  else
    return 2;
}

uint64_t ControllerFilter::postFilter(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ControllerFilter::~ControllerFilter(ControllerFilter *this)
{
  JUMPOUT(0x2276933B8);
}

BOOL tessellateTriangle(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int8x16_t *a6, _WORD *a7, float a8)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _BOOL8 result;
  _DWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float v22;
  __int16 v23;

  v17[0] = 0;
  v17[1] = a3;
  v10 = *(float32x4_t *)a6;
  v11 = (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
  v12 = (float32x4_t)vextq_s8(*a6, (int8x16_t)v11, 0xCuLL);
  v13 = *(float32x2_t *)a6[1].i8;
  v14 = vsubq_f32(*(float32x4_t *)a6, v12);
  v12.i32[1] = v13.i32[0];
  v18 = a4;
  v19 = a5;
  v12.i32[2] = v13.i32[1];
  v15 = vaddq_f32(v10, v12);
  v15.i32[3] = v14.i32[3];
  *(float32x2_t *)v10.f32 = vsub_f32(v13, (float32x2_t)vext_s8(*(int8x8_t *)v10.f32, *(int8x8_t *)v11.f32, 4uLL));
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v20 = vmulq_f32(v15, v11);
  v21 = vmul_f32(*(float32x2_t *)v10.f32, (float32x2_t)0x3F0000003F000000);
  v22 = a8;
  v23 = 0;
  result = tessellateTriangleRecursive((uint64_t)v17, a2, (float32x4_t *)(a2 + 12), (float32x4_t *)(a2 + 24));
  *a1 += v17[0];
  *a7 += v23;
  return result;
}

BOOL tessellateTriangleRecursive(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  _BOOL8 result;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  float v13;
  unsigned __int32 v14;
  int v15;

  ++*(_WORD *)(a1 + 52);
  result = physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 24), (float32x4_t *)(a1 + 36), (float32x4_t *)a2, a3, a4);
  if (result)
  {
    v9 = *(_QWORD *)(a2 + 4);
    v10 = HIDWORD(a3->i64[0]);
    v11 = a3->f32[2];
    v12 = a4->f32[2];
    v13 = *(float *)(a1 + 48);
    v14 = vsub_f32(*(float32x2_t *)a3->f32, *(float32x2_t *)a4->f32).u32[0];
    v15 = HIDWORD(a4->i64[0]);
    __asm { BR              X10 }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = a2;
  v4 = 36 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTriangle>::getName() [T = physx::PxTriangle]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = result + 36 * v9;
    v12 = *a1;
    v13 = result;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v12;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v12 + 24);
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v12 + 32);
      v13 += 36;
      v12 += 36;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t createInvisibleWalls(float *a1, float *a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v30;
  float v31;
  float v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  float v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  __int128 v99;
  float v100;
  __int128 v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  int v106;

  v4 = a1[11];
  if (v4 == 0.0)
    return 0;
  v8 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  v10 = a2[3];
  v12 = v10 - *a2;
  v14 = a2[4];
  v13 = a2[5];
  v15 = a2[7];
  v16 = a2[6] - *a2;
  v17 = a2[8];
  v18 = (float)((float)(v14 - v9) * (float)(v17 - v11)) - (float)((float)(v13 - v11) * (float)(v15 - v9));
  v19 = (float)((float)(v13 - v11) * v16) - (float)(v12 * (float)(v17 - v11));
  v20 = (float)(v12 * (float)(v15 - v9)) - (float)((float)(v14 - v9) * v16);
  v21 = sqrtf((float)((float)(v19 * v19) + (float)(v18 * v18)) + (float)(v20 * v20));
  if (v21 > 0.0)
  {
    v22 = 1.0 / v21;
    v18 = v18 * v22;
    v19 = v19 * v22;
    v20 = v20 * v22;
  }
  v23 = a1[5];
  v24 = a1[6];
  v25 = (float)(v19 * v24) + (float)(v18 * v23);
  v26 = a1[7];
  v27 = v25 + (float)(v20 * v26);
  if (v27 < 0.0 || v27 >= a1[8])
    return 0;
  v30 = v4 * v23;
  v31 = v4 * v24;
  v32 = v4 * v26;
  v103 = v8 + (float)(v4 * v23);
  v104 = v11 + (float)(v4 * v26);
  v105 = v9 + (float)(v4 * v24);
  v33 = *(_DWORD *)(a3 + 8);
  v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  v35 = v33 + 1;
  v36 = v33 + 2;
  v100 = a2[6];
  v97 = a2[8];
  v98 = a2[7];
  if (v33 + 2 <= v34)
  {
    v40 = *(_DWORD *)(a3 + 8);
  }
  else
  {
    if (v34)
      v37 = 2 * *(_DWORD *)(a3 + 12);
    else
      v37 = 2;
    if (v36 <= v37)
      v38 = v37;
    else
      v38 = v36;
    v96 = v4 * v24;
    v39 = v4 * v26;
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v38);
    v32 = v39;
    v31 = v96;
    v40 = *(_DWORD *)(a3 + 8);
    v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  v41 = v10 + v30;
  v42 = v13 + v32;
  v43 = v14 + v31;
  v44 = *(_QWORD *)a3;
  *(_DWORD *)(a3 + 8) = v35;
  v45 = (float *)(v44 + 36 * v40);
  *v45 = v8;
  v45[1] = v9;
  v45[2] = v11;
  v45[3] = v10;
  v45[4] = v14;
  v45[5] = v13;
  v45[6] = v103;
  v45[7] = v105;
  v45[8] = v104;
  v46 = *(_QWORD *)(a2 + 3);
  v47 = *((_DWORD *)a2 + 5);
  v48 = v33 + 3;
  if (v33 + 3 > v34)
  {
    if (v34)
      v49 = 2 * v34;
    else
      v49 = 2;
    if (v48 <= v49)
      v50 = v49;
    else
      v50 = v48;
    v51 = v13 + v32;
    v52 = v41;
    v53 = v43;
    v54 = v32;
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v50);
    v32 = v54;
    v43 = v53;
    v41 = v52;
    v42 = v51;
    v44 = *(_QWORD *)a3;
    v35 = *(_DWORD *)(a3 + 8);
    v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  v55 = v98 + v31;
  v56 = v100 + v30;
  v57 = v97 + v32;
  *(_DWORD *)(a3 + 8) = v36;
  v58 = v44 + 36 * v35;
  v60 = v103;
  v59 = v104;
  *(float *)v58 = v103;
  *(float *)(v58 + 4) = v105;
  *(float *)(v58 + 8) = v104;
  *(_QWORD *)(v58 + 12) = v46;
  *(_DWORD *)(v58 + 20) = v47;
  *(float *)(v58 + 24) = v41;
  *(float *)(v58 + 28) = v43;
  *(float *)(v58 + 32) = v42;
  v61 = *(_QWORD *)(a2 + 3);
  v62 = *((_DWORD *)a2 + 5);
  v63 = v33 + 4;
  if (v33 + 4 > v34)
  {
    if (v34)
      v64 = 2 * v34;
    else
      v64 = 2;
    if (v63 <= v64)
      v65 = v64;
    else
      v65 = v63;
    v66 = v56;
    v67 = v97 + v32;
    v68 = v55;
    v69 = v42;
    v70 = v41;
    v71 = v43;
    v72 = *((_DWORD *)a2 + 5);
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v65);
    v62 = v72;
    v43 = v71;
    v41 = v70;
    v42 = v69;
    v55 = v68;
    v57 = v67;
    v56 = v66;
    v60 = v103;
    v59 = v104;
    v44 = *(_QWORD *)a3;
    v36 = *(_DWORD *)(a3 + 8);
    v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  *(_DWORD *)(a3 + 8) = v48;
  v73 = v44 + 36 * v36;
  *(float *)v73 = v41;
  *(float *)(v73 + 4) = v43;
  *(float *)(v73 + 8) = v42;
  *(_QWORD *)(v73 + 12) = v61;
  *(_DWORD *)(v73 + 20) = v62;
  *(float *)(v73 + 24) = v56;
  *(float *)(v73 + 28) = v55;
  *(float *)(v73 + 32) = v57;
  v74 = *(_OWORD *)(a2 + 3);
  v75 = *(_QWORD *)(a2 + 7);
  v76 = v33 + 5;
  if (v33 + 5 > v34)
  {
    if (v34)
      v77 = 2 * v34;
    else
      v77 = 2;
    if (v76 <= v77)
      v78 = v77;
    else
      v78 = v76;
    v101 = *(_OWORD *)(a2 + 3);
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v78);
    v74 = v101;
    v44 = *(_QWORD *)a3;
    v48 = *(_DWORD *)(a3 + 8);
    v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  v79 = v44 + 36 * v48;
  *(_DWORD *)(a3 + 8) = v63;
  *(float *)v79 = v56;
  *(float *)(v79 + 4) = v55;
  *(float *)(v79 + 8) = v57;
  *(_OWORD *)(v79 + 12) = v74;
  *(_QWORD *)(v79 + 28) = v75;
  v80 = *((_DWORD *)a2 + 6);
  *(_QWORD *)&v81 = *(_QWORD *)(a2 + 7);
  v82 = *(_OWORD *)a2;
  v83 = *((_DWORD *)a2 + 2);
  v84 = v33 + 6;
  if (v33 + 6 > v34)
  {
    if (v34)
      v85 = 2 * v34;
    else
      v85 = 2;
    if (v84 <= v85)
      v86 = v85;
    else
      v86 = v84;
    v99 = *(_OWORD *)a2;
    v102 = *(_QWORD *)(a2 + 7);
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v86);
    *(_QWORD *)&v82 = v99;
    *(_QWORD *)&v81 = v102;
    v44 = *(_QWORD *)a3;
    v63 = *(_DWORD *)(a3 + 8);
    v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  v87 = v44 + 36 * v63;
  *(_DWORD *)(a3 + 8) = v76;
  *(float *)v87 = v60;
  *(float *)(v87 + 4) = v105;
  *(float *)(v87 + 8) = v59;
  *(_DWORD *)(v87 + 12) = v80;
  *((_QWORD *)&v81 + 1) = v82;
  *(_OWORD *)(v87 + 16) = v81;
  *(_DWORD *)(v87 + 32) = v83;
  v88 = *((_QWORD *)a2 + 3);
  v89 = *((_DWORD *)a2 + 8);
  v90 = v33 + 7;
  if (v33 + 7 > v34)
  {
    if (v34)
      v91 = 2 * v34;
    else
      v91 = 2;
    if (v90 <= v91)
      v92 = v91;
    else
      v92 = v90;
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v92);
    v44 = *(_QWORD *)a3;
    v76 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(a3 + 8) = v84;
  v93 = v44 + 36 * v76;
  *(float *)v93 = v60;
  *(float *)(v93 + 4) = v105;
  *(float *)(v93 + 8) = v59;
  *(float *)(v93 + 12) = v56;
  *(float *)(v93 + 16) = v55;
  *(float *)(v93 + 20) = v57;
  *(_QWORD *)(v93 + 24) = v88;
  *(_DWORD *)(v93 + 32) = v89;
  v106 = -1;
  v94 = 6;
  do
  {
    v95 = *(unsigned int *)(a4 + 8);
    if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v95)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, &v106);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v95) = v106;
      ++*(_DWORD *)(a4 + 8);
    }
    --v94;
  }
  while (v94);
  return 6;
}

float *fixDir(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v3 = a2[1];
  v4 = a3[1];
  v5 = a2[2];
  v6 = a3[2];
  v7 = (float)((float)(v3 * v4) + (float)(*a2 * *a3)) + (float)(v5 * v6);
  v8 = *a2 - (float)(*a3 * v7);
  v9 = v3 - (float)(v4 * v7);
  v10 = v5 - (float)(v6 * v7);
  v11 = (float)((float)(v9 * v9) + (float)(v8 * v8)) + (float)(v10 * v10);
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  if (v11 > 0.0)
  {
    v15 = 1.0 / sqrtf(v11);
    v12 = v8 * v15;
    v13 = v9 * v15;
    v14 = v10 * v15;
  }
  *result = v12;
  result[1] = v13;
  result[2] = v14;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>::getName() [T = physx::PxExtendedBox]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v12 = v13;
      *(_OWORD *)(v12 + 24) = *(__int128 *)((char *)v11 + 24);
      *(_QWORD *)(v12 + 40) = *((_QWORD *)v11 + 5);
      *(_DWORD *)(v12 + 48) = *((_DWORD *)v11 + 12);
      v12 += 56;
      v11 = (__int128 *)((char *)v11 + 56);
    }
    while (v12 < v10);
    v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 56 * v14;
  v16 = *a2;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v15 = v16;
  *(_OWORD *)(v15 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v15 + 40) = *((_QWORD *)a2 + 5);
  *(_DWORD *)(v15 + 48) = *((_DWORD *)a2 + 12);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<const void *>::getName() [T = const void *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>::getName() [T = physx::PxExtendedCapsule]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      v14 = v11[1];
      v15 = v11[2];
      *(_QWORD *)(v12 + 48) = *((_QWORD *)v11 + 6);
      *(_OWORD *)(v12 + 16) = v14;
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)v12 = v13;
      v12 += 56;
      v11 = (__int128 *)((char *)v11 + 56);
    }
    while (v12 < v10);
    v16 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = v8 + 56 * v16;
  v18 = *a2;
  v19 = a2[1];
  v20 = a2[2];
  *(_QWORD *)(v17 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v17 + 16) = v19;
  *(_OWORD *)(v17 + 32) = v20;
  *(_OWORD *)v17 = v18;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::PxShape *,physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::internal::HashSetBase<physx::PxShape *,physx::shdfnd::Hash<physx::PxShape *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *result;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 44);
  v9 = *(unsigned int *)(a1 + 32);
  v10 = (float)(*(float *)(a1 + 40) * (float)v3);
  v11 = 4 * v3;
  v12 = ((-4 * (v3 + v10)) & 0xC) + 4 * (v3 + v10);
  if ((_DWORD)v12 + 8 * v10)
    v13 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v12 + 8 * v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v13 = 0;
  v14 = &v13[v11];
  v15 = &v13[v12];
  result = memset(v13, 255, 4 * v3);
  if (v8 == -1)
  {
    if (*(_DWORD *)(a1 + 52))
    {
      v24 = 0;
      do
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v24);
        v26 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        LODWORD(v28) = (v3 - 1) & ((v28 >> 31) ^ v28);
        *(_DWORD *)&v14[4 * v24] = *(_DWORD *)&v13[4 * v28];
        *(_DWORD *)&v13[4 * v28] = v24;
        *(_QWORD *)&v15[8 * v24++] = v25;
      }
      while (v24 < *(unsigned int *)(a1 + 52));
    }
  }
  else
  {
    result = memcpy(&v13[v11], *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 32)));
    v17 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v17)
    {
      for (i = 0; i < v17; ++i)
      {
        v19 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * i);
        if ((_DWORD)v19 != -1)
        {
          do
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
            v21 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
            v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
            LODWORD(v23) = (v3 - 1) & ((v23 >> 31) ^ v23);
            *(_DWORD *)&v14[4 * v19] = *(_DWORD *)&v13[4 * v23];
            *(_DWORD *)&v13[4 * v23] = v19;
            *(_QWORD *)&v15[8 * v19] = v20;
            v19 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v19);
          }
          while ((_DWORD)v19 != -1);
          v17 = *(unsigned int *)(a1 + 36);
        }
      }
    }
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v15;
  v29 = v10 - 1;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v3;
  if (v29 > v9)
  {
    v30 = v9;
    do
    {
      *(_DWORD *)&v14[4 * v30] = v30 + 1;
      ++v30;
    }
    while (v29 != v30);
  }
  *(_DWORD *)&v14[4 * v29] = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v9;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *result;
  unint64_t v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 16 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v14 = 0;
    v15 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v16 = &v11[v10 + 8];
    do
    {
      v17 = *((_QWORD *)v15 - 1);
      v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      LODWORD(v20) = (v3 - 1) & ((v20 >> 31) ^ v20);
      *(_DWORD *)&v12[4 * v14] = *(_DWORD *)&v11[4 * v20];
      *(_DWORD *)&v11[4 * v20] = v14;
      *((_QWORD *)v16 - 1) = v17;
      v21 = *v15;
      v15 += 4;
      *(_DWORD *)v16 = v21;
      v16 += 16;
      ++v14;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = &v11[v10];
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cct::Controller *,physx::shdfnd::ReflectionAllocator<physx::Cct::Controller *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::Controller *>::getName() [T = physx::Cct::Controller *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 16 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 16 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 16 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cct::ObstacleContext *,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext *>::getName() [T = physx::C"
           "ct::ObstacleContext *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<const void *>::getName() [T = const void *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>::getName() [T = physx::PxExtendedBox]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 56 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = v6 + 56 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 24) = *(__int128 *)((char *)v8 + 24);
      *(_QWORD *)(v10 + 40) = *((_QWORD *)v8 + 5);
      *(_DWORD *)(v10 + 48) = *((_DWORD *)v8 + 12);
      v10 += 56;
      v8 = (__int128 *)((char *)v8 + 56);
    }
    while (v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>::getName() [T = physx::PxExtendedCapsule]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 56 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = v6 + 56 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      v12 = v8[1];
      v13 = v8[2];
      *(_QWORD *)(v10 + 48) = *((_QWORD *)v8 + 6);
      *(_OWORD *)(v10 + 16) = v12;
      *(_OWORD *)(v10 + 32) = v13;
      *(_OWORD *)v10 = v11;
      v10 += 56;
      v8 = (__int128 *)((char *)v8 + 56);
    }
    while (v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

physx::Cct::HandleManager *physx::Cct::HandleManager::HandleManager(physx::Cct::HandleManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = 0x200000000;
  *(_QWORD *)this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 44);
  v2 = *((unsigned int *)this + 3);
  if (!(_DWORD)v2)
  {
    *((_QWORD *)this + 2) = 0;
    goto LABEL_6;
  }
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 45);
  v4 = *((unsigned int *)this + 3);
  *((_QWORD *)this + 2) = v3;
  if (!(_DWORD)v4)
  {
LABEL_6:
    v8 = 0;
    v7 = 0;
    *((_QWORD *)this + 3) = 0;
    goto LABEL_8;
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 46);
  v6 = *((unsigned int *)this + 3);
  *((_QWORD *)this + 3) = v5;
  if ((_DWORD)v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 47);
    v8 = (2 * *((_DWORD *)this + 3));
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
LABEL_8:
  *((_QWORD *)this + 4) = v7;
  memset(*((void **)this + 2), 255, v8);
  memset(*((void **)this + 3), 255, (2 * *((_DWORD *)this + 3)));
  bzero(*((void **)this + 4), (2 * *((_DWORD *)this + 3)));
  return this;
}

_QWORD *physx::Cct::HandleManager::SetupLists(_QWORD *this, void **a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  _QWORD *v9;

  v9 = this;
  if (this[4])
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9[4] = 0;
  if (v9[3])
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9[3] = 0;
  if (v9[2])
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9[2] = 0;
  if (*v9)
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *v9 = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  return this;
}

uint64_t physx::Cct::HandleManager::Add(physx::Cct::HandleManager *this, void *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v4 = *((_DWORD *)this + 10);
  if (v4)
  {
    v5 = *((unsigned int *)this + 2);
    v6 = *(unsigned __int16 *)(*((_QWORD *)this + 3) + 2 * v5);
    *(_QWORD *)(*(_QWORD *)this + 8 * v5) = a2;
    *((_DWORD *)this + 2) = v5 + 1;
    *(_WORD *)(*((_QWORD *)this + 2) + 2 * v6) = v5;
    *((_DWORD *)this + 10) = v4 - 1;
    return v6 | (*(unsigned __int16 *)(*((_QWORD *)this + 4) + 2 * v6) << 16);
  }
  v8 = *((_DWORD *)this + 2);
  if (v8 == *((_DWORD *)this + 3))
  {
    v9 = 2 * v8;
    if (v9 >= 0xFFFF)
      v9 = 0xFFFF;
    *((_DWORD *)this + 3) = v9;
    if (v9)
    {
      v10 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 94);
      v11 = *((unsigned int *)this + 3);
      if ((_DWORD)v11)
      {
        v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 95);
        v13 = *((unsigned int *)this + 3);
        if ((_DWORD)v13)
        {
          v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v13, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 96);
          v15 = *((unsigned int *)this + 3);
          if ((_DWORD)v15)
          {
            v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v15, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 97);
LABEL_15:
            memcpy(v10, *(const void **)this, (8 * *((_DWORD *)this + 2)));
            memcpy(v12, *((const void **)this + 2), (2 * *((_DWORD *)this + 2)));
            memcpy(v14, *((const void **)this + 3), (2 * *((_DWORD *)this + 2)));
            memcpy(v16, *((const void **)this + 4), (2 * *((_DWORD *)this + 2)));
            memset(&v12[2 * *((unsigned int *)this + 2)], 255, (2 * (*((_DWORD *)this + 3) - *((_DWORD *)this + 2))));
            memset(&v14[2 * *((unsigned int *)this + 2)], 255, (2 * (*((_DWORD *)this + 3) - *((_DWORD *)this + 2))));
            bzero(&v16[2 * *((unsigned int *)this + 2)], (2 * (*((_DWORD *)this + 3) - *((_DWORD *)this + 2))));
            physx::Cct::HandleManager::SetupLists(this, (void **)v10, (unsigned __int16 *)v12, (unsigned __int16 *)v14, (unsigned __int16 *)v16);
            v8 = *((_DWORD *)this + 2);
            goto LABEL_16;
          }
        }
        else
        {
          v14 = 0;
        }
LABEL_14:
        v16 = 0;
        goto LABEL_15;
      }
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v10 = 0;
    }
    v12 = 0;
    goto LABEL_14;
  }
LABEL_16:
  *(_QWORD *)(*(_QWORD *)this + 8 * v8) = a2;
  v17 = *((_QWORD *)this + 3);
  *(_WORD *)(*((_QWORD *)this + 2) + 2 * v8) = v8;
  *(_WORD *)(v17 + 2 * v8) = v8;
  *((_DWORD *)this + 2) = v8 + 1;
  return v8 | (*(unsigned __int16 *)(*((_QWORD *)this + 4) + 2 * v8) << 16);
}

uint64_t *physx::Cct::HandleManager::Remove(uint64_t *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_DWORD *)this + 3);
  if ((unsigned __int16)a2 < v2)
  {
    v3 = *(unsigned __int16 *)(this[2] + 2 * (unsigned __int16)a2);
    if (v3 != 0xFFFF && v2 > v3)
    {
      v5 = *((_DWORD *)this + 2);
      if (v5)
      {
        if (*(unsigned __int16 *)(this[4] + 2 * (unsigned __int16)a2) == HIWORD(a2))
        {
          v6 = *this;
          v7 = v5 - 1;
          *((_DWORD *)this + 2) = v7;
          *(_QWORD *)(v6 + 8 * v3) = *(_QWORD *)(v6 + 8 * v7);
          v8 = this[2];
          v9 = this[3];
          *(_WORD *)(v8 + 2 * *(unsigned __int16 *)(v9 + 2 * v7)) = v3;
          *(_WORD *)(v9 + 2 * v3) = *(_WORD *)(v9 + 2 * v7);
          *(_WORD *)(v9 + 2 * v7) = a2;
          *(_WORD *)(v8 + 2 * (unsigned __int16)a2) = -1;
          ++*((_DWORD *)this + 10);
          ++*(_WORD *)(this[4] + 2 * (unsigned __int16)a2);
        }
      }
    }
  }
  return this;
}

void physx::Cct::ObstacleContext::~ObstacleContext(physx::Cct::ObstacleContext *this)
{
  int v2;
  int v4;

  *(_QWORD *)this = off_24ED97528;
  physx::Cct::HandleManager::SetupLists((_QWORD *)this + 5, 0, 0, 0, 0);
  v2 = *((_DWORD *)this + 9);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 3) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

{
  uint64_t v2;

  physx::Cct::ObstacleContext::~ObstacleContext(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Cct::ObstacleContext *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Cct::ObstacleContext::release(physx::Cct::ObstacleContext *this)
{
  return physx::Cct::CharacterControllerManager::releaseObstacleContext(*((_QWORD *)this + 11), (uint64_t)this);
}

uint64_t physx::Cct::ObstacleContext::getControllerManager(physx::Cct::ObstacleContext *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t physx::Cct::ObstacleContext::addObstacle(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;

  if (*(_DWORD *)a2 == 2)
  {
    v18 = physx::Cct::HandleManager::Add((physx::Cct::HandleManager *)(a1 + 40), (void *)(((unint64_t)*(unsigned int *)(a1 + 32) << 16) | 3));
    v5 = v18;
    v30 = v18;
    v19 = a2[1];
    v31 = *a2;
    v32 = v19;
    v33 = *((_QWORD *)a2 + 4);
    v20 = *((_DWORD *)a2 + 10);
    v21 = *((_DWORD *)a2 + 11);
    v34 = v20;
    v35 = v21;
    v22 = *((_DWORD *)a2 + 12);
    v23 = *((_DWORD *)a2 + 13);
    v36 = v22;
    v37 = v23;
    v24 = *((_QWORD *)a2 + 7);
    v25 = *(_DWORD *)(a1 + 32);
    v26 = *(_DWORD *)(a1 + 36) & 0x7FFFFFFF;
    v38 = v24;
    if (v26 <= v25)
    {
      physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalCapsuleObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalCapsuleObstacle>>::growAndPushBack(a1 + 24, (uint64_t)&v30);
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 24) + 72 * v25;
      v28 = v32;
      *(_OWORD *)(v27 + 8) = v31;
      *(_DWORD *)v27 = v18;
      *(_OWORD *)(v27 + 24) = v28;
      *(_QWORD *)(v27 + 40) = v33;
      *(_DWORD *)(v27 + 48) = v20;
      *(_DWORD *)(v27 + 52) = v21;
      *(_DWORD *)(v27 + 56) = v22;
      *(_DWORD *)(v27 + 60) = v23;
      *(_QWORD *)(v27 + 64) = v24;
      ++*(_DWORD *)(a1 + 32);
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)a2 == 3)
  {
    v4 = physx::Cct::HandleManager::Add((physx::Cct::HandleManager *)(a1 + 40), (void *)(((unint64_t)*(unsigned int *)(a1 + 16) << 16) | 4));
    v5 = v4;
    v30 = v4;
    v6 = a2[1];
    v31 = *a2;
    v32 = v6;
    v33 = *((_QWORD *)a2 + 4);
    v7 = *((_DWORD *)a2 + 10);
    v8 = *((_DWORD *)a2 + 11);
    v34 = v7;
    v35 = v8;
    v9 = *((_DWORD *)a2 + 12);
    v10 = *((_DWORD *)a2 + 13);
    v36 = v9;
    v37 = v10;
    v11 = *((_DWORD *)a2 + 14);
    v12 = *((_DWORD *)a2 + 15);
    v38 = __PAIR64__(v12, v11);
    v13 = *((_DWORD *)a2 + 16);
    v14 = *(_DWORD *)(a1 + 16);
    v15 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
    v39 = v13;
    if (v15 <= v14)
    {
      physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalBoxObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalBoxObstacle>>::growAndPushBack(a1 + 8, (uint64_t)&v30);
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 8) + 80 * v14;
      v17 = v32;
      *(_OWORD *)(v16 + 8) = v31;
      *(_DWORD *)v16 = v4;
      *(_OWORD *)(v16 + 24) = v17;
      *(_QWORD *)(v16 + 40) = v33;
      *(_DWORD *)(v16 + 48) = v7;
      *(_DWORD *)(v16 + 52) = v8;
      *(_DWORD *)(v16 + 56) = v9;
      *(_DWORD *)(v16 + 60) = v10;
      *(_DWORD *)(v16 + 64) = v11;
      *(_DWORD *)(v16 + 68) = v12;
      *(_DWORD *)(v16 + 72) = v13;
      ++*(_DWORD *)(a1 + 16);
    }
LABEL_10:
    physx::Cct::CharacterControllerManager::onObstacleAdded(*(_QWORD *)(a1 + 88), v5, a1);
    return v5;
  }
  return 0xFFFFFFFFLL;
}

uint64_t physx::Cct::ObstacleContext::removeObstacle(physx::Cct::ObstacleContext *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;

  v2 = *((_DWORD *)this + 13);
  if ((unsigned __int16)a2 >= v2)
    return 0;
  v4 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 2 * (unsigned __int16)a2);
  if ((_DWORD)v4 == 0xFFFF || v2 <= v4)
    return 0;
  if (*(unsigned __int16 *)(*((_QWORD *)this + 9) + 2 * (unsigned __int16)a2) != HIWORD(a2))
    return 0;
  v7 = (uint64_t *)((char *)this + 40);
  v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4);
  if (!v8)
    return 0;
  if ((unsigned __int16)*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4) == 3)
  {
    v20 = *((_DWORD *)this + 8);
    if (WORD1(v8) < v20)
    {
      physx::Cct::HandleManager::Remove(v7, a2);
      v21 = *((_QWORD *)this + 3);
      if (v20 - 1 != WORD1(v8))
      {
        v22 = (unsigned __int16)*(_DWORD *)(v21 + 72 * (v20 - 1));
        v23 = *((_DWORD *)this + 13);
        if ((unsigned __int16)*(_DWORD *)(v21 + 72 * (v20 - 1)) < v23)
        {
          v24 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 2 * v22);
          v25 = (_DWORD)v24 != 0xFFFF && v23 > v24;
          if (v25
            && *(unsigned __int16 *)(*((_QWORD *)this + 9) + 2 * v22) == HIWORD(*(_DWORD *)(v21 + 72 * (v20 - 1))))
          {
            *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v24) = v8;
            v21 = *((_QWORD *)this + 3);
          }
        }
      }
      v26 = *((_DWORD *)this + 8) - 1;
      *((_DWORD *)this + 8) = v26;
      v27 = v21 + 72 * v26;
      v28 = v21 + 72 * WORD1(v8);
      *(_DWORD *)v28 = *(_DWORD *)v27;
      v29 = *(_QWORD *)(v27 + 40);
      v30 = *(_OWORD *)(v27 + 24);
      *(_OWORD *)(v28 + 8) = *(_OWORD *)(v27 + 8);
      *(_OWORD *)(v28 + 24) = v30;
      *(_QWORD *)(v28 + 40) = v29;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)(v27 + 48);
      *(_QWORD *)(v28 + 64) = *(_QWORD *)(v27 + 64);
      goto LABEL_33;
    }
    return 0;
  }
  if ((unsigned __int16)*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4) != 4)
    return 0;
  v9 = *((_DWORD *)this + 4);
  if (WORD1(v8) >= v9)
    return 0;
  physx::Cct::HandleManager::Remove(v7, a2);
  v10 = *((_QWORD *)this + 1);
  if (v9 - 1 != WORD1(v8))
  {
    v11 = (unsigned __int16)*(_DWORD *)(v10 + 80 * (v9 - 1));
    v12 = *((_DWORD *)this + 13);
    if ((unsigned __int16)*(_DWORD *)(v10 + 80 * (v9 - 1)) < v12)
    {
      v13 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 2 * v11);
      v14 = (_DWORD)v13 != 0xFFFF && v12 > v13;
      if (v14 && *(unsigned __int16 *)(*((_QWORD *)this + 9) + 2 * v11) == HIWORD(*(_DWORD *)(v10 + 80 * (v9 - 1))))
      {
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v13) = v8;
        v10 = *((_QWORD *)this + 1);
      }
    }
  }
  v15 = *((_DWORD *)this + 4) - 1;
  *((_DWORD *)this + 4) = v15;
  v16 = v10 + 80 * v15;
  v17 = v10 + 80 * WORD1(v8);
  *(_DWORD *)v17 = *(_DWORD *)v16;
  v18 = *(_QWORD *)(v16 + 40);
  v19 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(v17 + 24) = v19;
  *(_QWORD *)(v17 + 40) = v18;
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v16 + 48);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v16 + 64);
  *(_DWORD *)(v17 + 72) = *(_DWORD *)(v16 + 72);
LABEL_33:
  v31 = *((_QWORD *)this + 11);
  v32 = *(unsigned int *)(v31 + 112);
  if (!(_DWORD)v32)
    return 1;
  v33 = *(_QWORD *)(v31 + 104);
  result = 1;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)v33 + 320) == a2)
      *(_DWORD *)(*(_QWORD *)v33 + 320) = -1;
    v33 += 8;
    --v32;
  }
  while (v32);
  return result;
}

uint64_t physx::Cct::ObstacleContext::updateObstacle(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_DWORD *)(a1 + 52);
  if ((unsigned __int16)a2 < v3)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)a2);
    if ((_DWORD)v4 != 0xFFFF
      && v3 > v4
      && *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 2 * (unsigned __int16)a2) == HIWORD(a2))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v4);
      if (v6)
      {
        if ((unsigned __int16)v6 - 1 == *(_DWORD *)a3)
        {
          v7 = WORD1(v6);
          if ((unsigned __int16)v6 == 3)
          {
            if (v7 < *(_DWORD *)(a1 + 32))
            {
              v11 = *(_QWORD *)(a1 + 24) + 72 * v7;
              v12 = *a3;
              v13 = a3[1];
              *(_QWORD *)(v11 + 40) = *((_QWORD *)a3 + 4);
              *(_OWORD *)(v11 + 24) = v13;
              *(_OWORD *)(v11 + 8) = v12;
              *(_OWORD *)(v11 + 48) = *(__int128 *)((char *)a3 + 40);
              *(_QWORD *)(v11 + 64) = *((_QWORD *)a3 + 7);
              goto LABEL_16;
            }
          }
          else if ((unsigned __int16)v6 == 4 && v7 < *(_DWORD *)(a1 + 16))
          {
            v8 = *(_QWORD *)(a1 + 8) + 80 * v7;
            v9 = *a3;
            v10 = a3[1];
            *(_QWORD *)(v8 + 40) = *((_QWORD *)a3 + 4);
            *(_OWORD *)(v8 + 24) = v10;
            *(_OWORD *)(v8 + 8) = v9;
            *(_OWORD *)(v8 + 48) = *(__int128 *)((char *)a3 + 40);
            *(_QWORD *)(v8 + 64) = *((_QWORD *)a3 + 7);
            *(_DWORD *)(v8 + 72) = *((_DWORD *)a3 + 16);
LABEL_16:
            physx::Cct::CharacterControllerManager::onObstacleUpdated(*(_QWORD *)(a1 + 88), a2, a1);
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t physx::Cct::ObstacleContext::getNbObstacles(physx::Cct::ObstacleContext *this)
{
  return (*((_DWORD *)this + 8) + *((_DWORD *)this + 4));
}

uint64_t physx::Cct::ObstacleContext::getObstacle(physx::Cct::ObstacleContext *this, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (!v3)
  {
    v5 = *((_QWORD *)this + 1) + 80 * a2;
    return v5 + 8;
  }
  if (v4 < *((_DWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 3) + 72 * v4;
    return v5 + 8;
  }
  return 0;
}

unint64_t physx::Cct::ObstacleContext::getObstacleByHandle(physx::Cct::ObstacleContext *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *((_DWORD *)this + 13);
  if ((unsigned __int16)a2 < v2)
  {
    v3 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 2 * (unsigned __int16)a2);
    if ((_DWORD)v3 != 0xFFFF
      && v2 > v3
      && *(unsigned __int16 *)(*((_QWORD *)this + 9) + 2 * (unsigned __int16)a2) == HIWORD(a2))
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
      if (v5)
      {
        v6 = WORD1(v5);
        if ((unsigned __int16)v5 == 3)
        {
          if (WORD1(v5) < *((_DWORD *)this + 8))
          {
            v7 = *((_QWORD *)this + 3);
            v8 = 72;
            return v7 + v6 * (unint64_t)v8 + 8;
          }
        }
        else if ((unsigned __int16)v5 == 4 && WORD1(v5) < *((_DWORD *)this + 4))
        {
          v7 = *((_QWORD *)this + 1);
          v8 = 80;
          return v7 + v6 * (unint64_t)v8 + 8;
        }
      }
    }
  }
  return 0;
}

uint64_t physx::Cct::ObstacleContext::raycastSingle(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, _DWORD *a5, float a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, float *, float *, float32x2_t *, __int16 *, float, uint64_t, uint64_t);
  uint64_t v15;
  float v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  float v26;
  int v27;
  float v28;
  __int16 v31;
  __int16 v32;
  __int128 v33;
  float32x2_t v34;
  float v35;
  int v36;
  int32x2_t v37;
  int v38;
  __int128 v39;
  int v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[12];

  v39 = 0uLL;
  v40 = -1;
  v41 = 0;
  v43 = 0;
  v42 = 0uLL;
  *(_QWORD *)v44 = 2139095039;
  *(_DWORD *)&v44[8] = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = (unsigned int (*)(uint64_t, float *, float *, float32x2_t *, __int16 *, float, uint64_t, uint64_t))off_255826810[0];
    v15 = 80 * v11;
    v16 = 3.4028e38;
    do
    {
      v17 = *(_QWORD *)(a1 + 8) + v12;
      v18 = *(_DWORD *)(v17 + 72);
      v36 = 3;
      v37 = *(int32x2_t *)(v17 + 64);
      v38 = v18;
      v19 = *(double *)(v17 + 40);
      v33 = *(_OWORD *)(v17 + 48);
      v34 = vcvt_f32_f64(*(float64x2_t *)(v17 + 24));
      v35 = v19;
      v32 = 0;
      if (v14((uint64_t)&v36, (float *)&v33, (float *)a3, a4, &v32, a6, 1, (uint64_t)&v39))
      {
        v20 = *(float *)v44;
        if (*(float *)v44 < v16)
        {
          v13 = v17 + 8;
          *(_OWORD *)a2 = v39;
          *(_DWORD *)(a2 + 16) = v40;
          *(_WORD *)(a2 + 20) = v41;
          *(_OWORD *)(a2 + 24) = v42;
          *(_QWORD *)(a2 + 40) = v43;
          *(float *)(a2 + 48) = v20;
          *(_QWORD *)(a2 + 52) = *(_QWORD *)&v44[4];
          *a5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + v12);
          v16 = v20;
        }
      }
      v12 += 80;
    }
    while (v15 != v12);
  }
  else
  {
    v13 = 0;
    v16 = 3.4028e38;
  }
  v21 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = off_255826808[0];
    v24 = 72 * v21;
    do
    {
      v25 = *(_QWORD *)(a1 + 24) + v22;
      v36 = 2;
      v37 = vrev64_s32(*(int32x2_t *)(v25 + 64));
      v26 = *(double *)(v25 + 40);
      v33 = *(_OWORD *)(v25 + 48);
      v34 = vcvt_f32_f64(*(float64x2_t *)(v25 + 24));
      v35 = v26;
      v31 = 0;
      ((void (*)(uint64_t, float *, float32x2_t *, float32x2_t *, _BYTE *, float, uint64_t, float32x2_t *))v23)((uint64_t)&v36, (float *)&v33, a3, a4, &v31, a6, 1, (float32x2_t *)&v39);
      if (v27)
      {
        v28 = *(float *)v44;
        if (*(float *)v44 < v16)
        {
          v13 = v25 + 8;
          *(_OWORD *)a2 = v39;
          *(_DWORD *)(a2 + 16) = v40;
          *(_WORD *)(a2 + 20) = v41;
          *(_OWORD *)(a2 + 24) = v42;
          *(_QWORD *)(a2 + 40) = v43;
          *(float *)(a2 + 48) = v28;
          *(_QWORD *)(a2 + 52) = *(_QWORD *)&v44[4];
          *a5 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + v22);
          v16 = v28;
        }
      }
      v22 += 72;
    }
    while (v24 != v22);
  }
  return v13;
}

uint64_t physx::Cct::ObstacleContext::raycastSingle(uint64_t a1, uint64_t a2, _DWORD *a3, float *a4, float32x2_t *a5, float a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  float v14;
  int v15;
  float v16;
  __int16 v18;
  __int16 v19;
  __int128 v20;
  float32x2_t v21;
  float v22;
  int v23;
  int32x2_t v24;
  int v25;

  v6 = (unsigned __int16)*a3;
  v7 = *(_DWORD *)(a1 + 52);
  if (v6 >= v7)
    return 0;
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v6);
  if ((_DWORD)v8 == 0xFFFF || v7 <= v8)
    return 0;
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 2 * v6) != HIWORD(*a3))
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8);
  if (!v10)
    return 0;
  v11 = WORD1(v10);
  if ((unsigned __int16)*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8) == 4)
  {
    v12 = *(_QWORD *)(a1 + 8) + 80 * v11;
    v13 = *(_DWORD *)(v12 + 72);
    v23 = 3;
    v24 = *(int32x2_t *)(v12 + 64);
    v25 = v13;
    v14 = *(double *)(v12 + 40);
    v20 = *(_OWORD *)(v12 + 48);
    v21 = vcvt_f32_f64(*(float64x2_t *)(v12 + 24));
    v22 = v14;
    v19 = 0;
    v15 = ((uint64_t (*)(uint64_t, float *, float *, float32x2_t *, __int16 *, float, uint64_t, uint64_t))off_255826810[0])((uint64_t)&v23, (float *)&v20, a4, a5, &v19, a6, 1, a2);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24) + 72 * v11;
    v23 = 2;
    v24 = vrev64_s32(*(int32x2_t *)(v12 + 64));
    v16 = *(double *)(v12 + 40);
    v20 = *(_OWORD *)(v12 + 48);
    v21 = vcvt_f32_f64(*(float64x2_t *)(v12 + 24));
    v22 = v16;
    v18 = 0;
    v15 = ((uint64_t (*)(uint64_t, float *, float *, float32x2_t *, __int16 *, float, uint64_t, uint64_t))off_255826808[0])((uint64_t)&v23, (float *)&v20, a4, a5, &v18, a6, 1, a2);
  }
  if (v15)
    return v12 + 8;
  else
    return 0;
}

uint64_t physx::Cct::ObstacleContext::onOriginShift(uint64_t result, float32x2_t *a2)
{
  uint64_t v2;
  float64x2_t v3;
  double v4;
  double *v5;
  uint64_t v6;
  float64x2_t v7;
  double v8;
  double *v9;

  v2 = *(unsigned int *)(result + 16);
  if ((_DWORD)v2)
  {
    v3 = vcvtq_f64_f32(*a2);
    v4 = a2[1].f32[0];
    v5 = (double *)(*(_QWORD *)(result + 8) + 40);
    do
    {
      *((float64x2_t *)v5 - 1) = vsubq_f64(*(float64x2_t *)(v5 - 2), v3);
      *v5 = *v5 - v4;
      v5 += 10;
      --v2;
    }
    while (v2);
  }
  v6 = *(unsigned int *)(result + 32);
  if ((_DWORD)v6)
  {
    v7 = vcvtq_f64_f32(*a2);
    v8 = a2[1].f32[0];
    v9 = (double *)(*(_QWORD *)(result + 24) + 40);
    do
    {
      *((float64x2_t *)v9 - 1) = vsubq_f64(*(float64x2_t *)(v9 - 2), v7);
      *v9 = *v9 - v8;
      v9 += 9;
      --v6;
    }
    while (v6);
  }
  return result;
}

void physx::Cct::SweptBox::~SweptBox(physx::Cct::SweptBox *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Cct::SweptBox::computeTemporalBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, double a6)
{
  LODWORD(a6) = *(_DWORD *)(a1 + 48);
  if (*(float *)(a1 + 44) > *(float *)&a6)
    LODWORD(a6) = *(_DWORD *)(a1 + 44);
  return physx::Cct::computeTemporalBox(a3, (float32x2_t *)(a2 + 300), a4, a5, a6, *(float *)(a1 + 40) + *(float *)(a1 + 40), *(float *)(a2 + 316), *(float *)(a2 + 328));
}

uint64_t physx::Cct::computeTemporalBox(uint64_t result, float32x2_t *a2, float64x2_t *a3, float32x2_t *a4, double a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float32x2_t v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;

  *(float *)&a5 = *(float *)&a5 + a7;
  v8 = a6 * 0.5;
  v9 = a2[1].f32[0];
  v10 = a3[1].f64[0];
  v11 = (float)(*(float *)&a5 + (float)(fabsf(v9) * v8));
  v12 = v10 + v11;
  v13 = v10 + a4[1].f32[0];
  v14 = v13 - v11;
  v15 = v13 + v11;
  v16 = *a3;
  v17 = vcvtq_f64_f32(vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0), vabs_f32(*a2), v8));
  v18 = vsubq_f64(*a3, v17);
  v19 = vaddq_f64(*a3, vcvtq_f64_f32(*a4));
  v20 = vsubq_f64(v19, v17);
  v21 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v18, v20), (int8x16_t)v20, (int8x16_t)v18);
  if (v10 - v11 <= v14)
    v22 = v10 - v11;
  else
    v22 = v14;
  v23 = vaddq_f64(v16, v17);
  v24 = vaddq_f64(v19, v17);
  v25 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v23), (int8x16_t)v24, (int8x16_t)v23);
  if (v12 < v15)
    v12 = v15;
  if (a8 == 0.0)
    goto LABEL_10;
  v26 = vmul_n_f32(*a2, a8);
  v27 = v10 - (float)(v9 * a8);
  v28 = v27 - v11;
  v29 = v27 + v11;
  v30 = vsubq_f64(v16, vcvtq_f64_f32(v26));
  v31 = vsubq_f64(v30, v17);
  v21 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v21, v31), (int8x16_t)v31, (int8x16_t)v21);
  if (v22 > v28)
    v22 = v28;
  v32 = vaddq_f64(v30, v17);
  v25 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v32, v25), (int8x16_t)v32, (int8x16_t)v25);
  if (v12 >= v29)
LABEL_10:
    v29 = v12;
  *(float64x2_t *)result = v21;
  *(double *)(result + 16) = v22;
  *(float64x2_t *)(result + 24) = v25;
  *(double *)(result + 40) = v29;
  return result;
}

void physx::Cct::SweptCapsule::~SweptCapsule(physx::Cct::SweptCapsule *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Cct::SweptCapsule::computeTemporalBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, double a6)
{
  LODWORD(a6) = *(_DWORD *)(a1 + 40);
  return physx::Cct::computeTemporalBox(a3, (float32x2_t *)(a2 + 300), a4, a5, a6, *(float *)(a1 + 44), *(float *)(a2 + 316), *(float *)(a2 + 328));
}

uint64_t physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalBoxObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalBoxObstacle>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalBoxObstacle>::getN"
           "ame() [T = physx::Cct::ObstacleContext::InternalBoxObstacle]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 80 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 80 * v9;
    v11 = *(_QWORD *)v3;
    v12 = v8;
    do
    {
      *(_DWORD *)v12 = *(_DWORD *)v11;
      v13 = *(_OWORD *)(v11 + 8);
      v14 = *(_OWORD *)(v11 + 24);
      *(_QWORD *)(v12 + 40) = *(_QWORD *)(v11 + 40);
      *(_OWORD *)(v12 + 24) = v14;
      *(_OWORD *)(v12 + 8) = v13;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);
      *(_QWORD *)(v12 + 64) = *(_QWORD *)(v11 + 64);
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v11 + 72);
      v12 += 80;
      v11 += 80;
    }
    while (v12 < v10);
    v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = v8 + 80 * v15;
  *(_DWORD *)v16 = *(_DWORD *)a2;
  v17 = *(_OWORD *)(a2 + 8);
  v18 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v16 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v16 + 24) = v18;
  *(_OWORD *)(v16 + 8) = v17;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v16 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(v16 + 72) = *(_DWORD *)(a2 + 72);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalCapsuleObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalCapsuleObstacle>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalCapsuleObstacle>::"
           "getName() [T = physx::Cct::ObstacleContext::InternalCapsuleObstacle]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 72 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 72 * v9;
    v11 = *(_QWORD *)v3;
    v12 = v8;
    do
    {
      *(_DWORD *)v12 = *(_DWORD *)v11;
      v13 = *(_OWORD *)(v11 + 8);
      v14 = *(_OWORD *)(v11 + 24);
      *(_QWORD *)(v12 + 40) = *(_QWORD *)(v11 + 40);
      *(_OWORD *)(v12 + 24) = v14;
      *(_OWORD *)(v12 + 8) = v13;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);
      *(_QWORD *)(v12 + 64) = *(_QWORD *)(v11 + 64);
      v12 += 72;
      v11 += 72;
    }
    while (v12 < v10);
    v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = v8 + 72 * v15;
  *(_DWORD *)v16 = *(_DWORD *)a2;
  v17 = *(_OWORD *)(a2 + 8);
  v18 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v16 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v16 + 24) = v18;
  *(_OWORD *)(v16 + 8) = v17;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v16 + 64) = *(_QWORD *)(a2 + 64);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

_QWORD *physx::PxD6JointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  float *v13;
  uint64_t v14;

  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::D6Joint>::getName() [T = physx::Ext::D6Joint]";
  else
    v11 = "<allocation names disabled>";
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 120, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtD6Joint.cpp", 49);
  v13 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  physx::Ext::D6Joint::D6Joint((uint64_t)v12, v13, a2, a3, a4, a5);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::D6Joint::sShaders, 480);
  v12[12] = v14;
  if (!v14)
  {
    (*(void (**)(_QWORD *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

uint64_t physx::Ext::D6Joint::D6Joint(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  uint64_t v12;
  __int32 v21;
  float32x4_t v22;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;

  *(_DWORD *)(a1 + 8) = 196869;
  *(_QWORD *)a1 = &off_24ED979A8;
  *(_QWORD *)(a1 + 24) = &unk_24ED97BC0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 480, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  _Q0 = *a4;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a4->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned __int128 *)a4);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  v21 = a4[1].i32[2];
  v22 = vdivq_f32(*a4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  _Q1.i64[0] = a4[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 56) = _Q1.i64[0];
  *(_DWORD *)(a1 + 64) = v21;
  v22.i32[0] = a6[1].i32[2];
  _Q1 = *a6;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a6->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned __int128 *)a6);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  v27 = a6[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  *(_QWORD *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = v22.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v66, a3);
  v28 = v68;
  v29 = (float)(a4[1].f32[0] - v70) + (float)(a4[1].f32[0] - v70);
  v30 = (float)(a4[1].f32[1] - v71) + (float)(a4[1].f32[1] - v71);
  v31 = (float)(a4[1].f32[2] - v72) + (float)(a4[1].f32[2] - v72);
  v32 = (float)(v69 * v69) + -0.5;
  v33 = (float)((float)-(float)(v67 * v30) - (float)(v66 * v29)) - (float)(v68 * v31);
  v34 = (float)((float)(v69 * (float)((float)(v68 * v30) - (float)(v67 * v31))) + (float)(v29 * v32))
      - (float)(v66 * v33);
  v35 = (float)(v69 * (float)((float)(v66 * v31) - (float)(v68 * v29))) + (float)(v30 * v32);
  v36 = (float)(v69 * (float)((float)(v67 * v29) - (float)(v66 * v30))) + (float)(v31 * v32);
  v38 = a4->f32[2];
  v37 = a4->f32[3];
  v39 = a4->f32[1];
  v40 = (float)((float)((float)(v69 * v39) - (float)(v67 * v37)) - (float)(v68 * a4->f32[0])) + (float)(v38 * v66);
  v41 = (float)((float)((float)(v69 * v38) - (float)(v68 * v37)) - (float)(v66 * v39)) + (float)(a4->f32[0] * v67);
  v42 = v35 - (float)(v67 * v33);
  v43 = (float)((float)((float)(v66 * a4->f32[0]) + (float)(v69 * v37)) + (float)(v67 * v39)) + (float)(v68 * v38);
  *(float *)(v12 + 16) = (float)((float)((float)(v69 * a4->f32[0]) - (float)(v66 * v37)) - (float)(v67 * v38))
                       + (float)(v39 * v68);
  *(float *)(v12 + 20) = v40;
  *(float *)(v12 + 24) = v41;
  *(float *)(v12 + 28) = v43;
  *(float *)(v12 + 32) = v34;
  *(float *)(v12 + 36) = v42;
  *(float *)(v12 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v66, a5);
  v44 = 0;
  v45 = (float)(a6[1].f32[0] - v70) + (float)(a6[1].f32[0] - v70);
  v46 = (float)(a6[1].f32[1] - v71) + (float)(a6[1].f32[1] - v71);
  v47 = (float)(a6[1].f32[2] - v72) + (float)(a6[1].f32[2] - v72);
  v48 = (float)(v69 * v69) + -0.5;
  v49 = (float)((float)-(float)(v67 * v46) - (float)(v66 * v45)) - (float)(v68 * v47);
  v50 = (float)((float)(v69 * (float)((float)(v68 * v46) - (float)(v67 * v47))) + (float)(v45 * v48))
      - (float)(v66 * v49);
  v51 = (float)((float)(v69 * (float)((float)(v66 * v47) - (float)(v68 * v45))) + (float)(v46 * v48))
      - (float)(v67 * v49);
  v52 = (float)((float)(v69 * (float)((float)(v67 * v45) - (float)(v66 * v46))) + (float)(v47 * v48))
      - (float)(v68 * v49);
  v54 = a6->f32[2];
  v53 = a6->f32[3];
  v55 = a6->f32[1];
  v56 = (float)((float)((float)(v69 * v55) - (float)(v67 * v53)) - (float)(v68 * a6->f32[0])) + (float)(v54 * v66);
  v57 = (float)((float)((float)(v69 * v54) - (float)(v68 * v53)) - (float)(v66 * v55)) + (float)(a6->f32[0] * v67);
  v58 = (float)((float)((float)(v66 * a6->f32[0]) + (float)(v69 * v53)) + (float)(v67 * v55)) + (float)(v68 * v54);
  *(float *)(v12 + 44) = (float)((float)((float)(v69 * a6->f32[0]) - (float)(v66 * v53)) - (float)(v67 * v54))
                       + (float)(v55 * v68);
  *(float *)(v12 + 48) = v56;
  *(float *)(v12 + 52) = v57;
  *(float *)(v12 + 56) = v58;
  *(float *)(v12 + 60) = v50;
  *(float *)(v12 + 64) = v51;
  *(float *)(v12 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v12 = _Q0;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)a1 = &off_24ED97660;
  *(_QWORD *)(a1 + 24) = &unk_24ED97888;
  *(_BYTE *)(a1 + 112) = 1;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 212) = 0x3F00000000000000;
  *(_QWORD *)(v12 + 220) = 0;
  *(_OWORD *)(v12 + 228) = xmmword_2261ABCB0;
  *(_DWORD *)(v12 + 244) = 1056964608;
  *(_QWORD *)(v12 + 248) = 0;
  *(_OWORD *)(v12 + 256) = xmmword_2261ABCC0;
  *(_DWORD *)(v12 + 272) = 1056964608;
  *(_QWORD *)(v12 + 276) = 0;
  *(_OWORD *)(v12 + 284) = xmmword_2261ABCD0;
  *(_DWORD *)(v12 + 300) = 1070141403;
  *(float *)&_Q0 = *a2 * 0.01;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 112) = 0;
  *(_DWORD *)(v12 + 120) = _Q0;
  *(_DWORD *)(v12 + 124) = 2139095039;
  *(float *)&_Q0 = *a2;
  *(float *)(v12 + 464) = *a2 * 0.000001;
  *(_DWORD *)(v12 + 128) = 0;
  *(float *)(v12 + 132) = *(float *)&_Q0 + *(float *)&_Q0;
  *(_QWORD *)(v12 + 136) = 0;
  *(float *)(v12 + 144) = fminf(*(float *)&_Q0 * 0.01, 1.1116e38);
  *(_QWORD *)(v12 + 148) = 0xFEAAAAAA7EAAAAAALL;
  v60 = fminf(*a2 * 0.01, 1.1116e38);
  v61 = *a2 + *a2;
  *(_DWORD *)(v12 + 156) = 0;
  *(float *)(v12 + 160) = v61;
  *(_QWORD *)(v12 + 164) = 0;
  *(float *)(v12 + 172) = v60;
  *(_QWORD *)(v12 + 176) = 0xFEAAAAAA7EAAAAAALL;
  v62 = fminf(*a2 * 0.01, 1.1116e38);
  v63 = *a2 + *a2;
  *(_DWORD *)(v12 + 184) = 0;
  *(float *)(v12 + 188) = v63;
  *(_QWORD *)(v12 + 192) = 0;
  *(float *)(v12 + 200) = v62;
  *(_QWORD *)(v12 + 204) = 0xFEAAAAAA7EAAAAAALL;
  do
  {
    v64 = v12 + v44;
    *(_QWORD *)(v64 + 304) = 0;
    *(_QWORD *)(v64 + 312) = 2139095039;
    v44 += 16;
  }
  while (v44 != 96);
  *(_OWORD *)(v12 + 400) = xmmword_2260E5D70;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_DWORD *)(v12 + 448) = 0;
  *(_QWORD *)(v12 + 468) = 0x40490FDB501502F9;
  *(_DWORD *)(v12 + 476) = 0;
  return a1;
}

uint64_t physx::Ext::D6Joint::getMotion(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * a2 + 80);
}

uint64_t physx::Ext::D6Joint::setMotion(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * a2 + 80) = a3;
  *(_BYTE *)(a1 + 112) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::D6Joint::getTwistAngle(physx::Ext::D6Joint *this)
{
  float v1;
  float v2;
  float v3;
  _BOOL4 v4;
  float v5;
  float result;
  float v7[3];
  float v8;

  (*(void (**)(float *__return_ptr))(*(_QWORD *)this + 80))(v7);
  v1 = 1.0;
  if (v7[0] == 0.0)
  {
    v4 = 0;
    v3 = 1.0;
  }
  else
  {
    v2 = sqrtf((float)((float)(v7[0] * v7[0]) + 0.0) + (float)(v8 * v8));
    v3 = v8 / v2;
    v4 = (float)(v7[0] / v2) < 0.0;
  }
  if (v3 < -1.0)
    v3 = -1.0;
  if (v3 <= 1.0)
    v1 = v3;
  v5 = acosf(v1);
  result = v5 + v5;
  if (v4)
    return -result;
  return result;
}

float physx::Ext::D6Joint::getSwingYAngle(physx::Ext::D6Joint *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v9;
  float v10;
  float v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    v2 = 0.0;
    v3 = 0.0;
    v4 = 1.0;
  }
  else
  {
    v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    v2 = *(float *)&v9 / v1;
    v3 = 0.0 / v1;
    v4 = v11 / v1;
  }
  v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  v6 = -(float)((float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
              + (float)(v3 * *(float *)&v9));
  v7 = -v5;
  if (v5 >= 0.0)
  {
    v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    v6 = (float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
       + (float)(v3 * *(float *)&v9);
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

float physx::Ext::D6Joint::getSwingZAngle(physx::Ext::D6Joint *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v9;
  float v10;
  float v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    v2 = 0.0;
    v3 = 0.0;
    v4 = 1.0;
  }
  else
  {
    v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    v2 = *(float *)&v9 / v1;
    v3 = 0.0 / v1;
    v4 = v11 / v1;
  }
  v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  v6 = -(float)((float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
              + (float)(v2 * *((float *)&v9 + 1)));
  v7 = -v5;
  if (v5 >= 0.0)
  {
    v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    v6 = (float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
       + (float)(v2 * *((float *)&v9 + 1));
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

float physx::Ext::D6Joint::getDrive@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 104) + 16 * a2;
  *(_QWORD *)a3 = *(_QWORD *)(v3 + 304);
  result = *(float *)(v3 + 312);
  *(float *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(v3 + 316);
  return result;
}

uint64_t physx::Ext::D6Joint::setDrive(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 104) + 16 * a2;
  *(_QWORD *)(v3 + 304) = *(_QWORD *)a3;
  *(_DWORD *)(v3 + 312) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v3 + 316) = *(_DWORD *)(a3 + 12);
  *(_BYTE *)(a1 + 112) = 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::D6Joint::setDistanceLimit(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *a2;
  *(_QWORD *)(v2 + 120) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v2 + 104) = v3;
  v5 = a1 + 96;
  v4 = *(_QWORD *)(a1 + 96);
  *(_BYTE *)(*(_QWORD *)(v5 + 8) + 476) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
}

double physx::Ext::D6Joint::getDistanceLimit@<D0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 104);
  result = *(double *)(v2 + 120);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setLinearLimit(uint64_t result, int a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(result + 104);
  if (a2 == 2)
  {
    v5 = *a3;
    *(_OWORD *)(v3 + 196) = *(__int128 *)((char *)a3 + 12);
    *(_OWORD *)(v3 + 184) = v5;
  }
  else if (a2 == 1)
  {
    v6 = *a3;
    *(_OWORD *)(v3 + 168) = *(__int128 *)((char *)a3 + 12);
    *(_OWORD *)(v3 + 156) = v6;
  }
  else
  {
    if (a2)
      return result;
    v4 = *a3;
    *(_OWORD *)(v3 + 140) = *(__int128 *)((char *)a3 + 12);
    *(_OWORD *)(v3 + 128) = v4;
  }
  *(_BYTE *)(v3 + 477) = 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 96) + 72))(*(_QWORD *)(result + 96));
}

uint64_t physx::Ext::D6Joint::getLinearLimit@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 104);
  switch(a2)
  {
    case 2:
      *(_OWORD *)a3 = *(_OWORD *)(v3 + 184);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v3 + 200);
      v4 = *(_QWORD *)(v3 + 204);
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = *(_OWORD *)(v3 + 156);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v3 + 172);
      v4 = *(_QWORD *)(v3 + 176);
      goto LABEL_7;
    case 0:
      *(_OWORD *)a3 = *(_OWORD *)(v3 + 128);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v3 + 144);
      v4 = *(_QWORD *)(v3 + 148);
LABEL_7:
      *(_QWORD *)(a3 + 20) = v4;
      return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 4) = 0x40000000;
  return result;
}

float physx::Ext::D6Joint::getTwistLimit@<S0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  v2 = *((_QWORD *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 212);
  result = *(float *)(v2 + 228);
  *(float *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 20) = *(_QWORD *)(v2 + 232);
  return result;
}

uint64_t physx::Ext::D6Joint::setTwistLimit(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *a2;
  *(_OWORD *)(v2 + 224) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 212) = v3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

__n128 physx::Ext::D6Joint::getPyramidSwingLimit@<Q0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = *((_QWORD *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 268);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v2 + 284);
  result = *(__n128 *)(v2 + 288);
  *(__n128 *)(a2 + 20) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setPyramidSwingLimit(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *a2;
  v4 = a2[1];
  *(_DWORD *)(v2 + 300) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(v2 + 268) = v3;
  *(_OWORD *)(v2 + 284) = v4;
  *(_WORD *)(*(_QWORD *)(a1 + 104) + 478) = 256;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::D6Joint::getSwingLimit@<S0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  float result;

  v2 = *((_QWORD *)this + 13);
  v3 = *(_OWORD *)(v2 + 240);
  v2 += 240;
  *(_OWORD *)a2 = v3;
  result = *(float *)(v2 + 16);
  *(float *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 20) = *(_QWORD *)(v2 + 20);
  return result;
}

uint64_t physx::Ext::D6Joint::setSwingLimit(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *a2;
  *(_OWORD *)(v2 + 252) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 240) = v3;
  *(_WORD *)(*(_QWORD *)(a1 + 104) + 478) = 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::D6Joint::getDrivePosition@<S0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  v2 = *((_QWORD *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 400);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 416);
  result = *(float *)(v2 + 424);
  *(float *)(a2 + 24) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setDrivePosition(uint64_t a1, float32x4_t *a2, int a3)
{
  __int32 v4;
  float32x4_t *v13;
  uint64_t v14;

  v4 = a2[1].i32[2];
  _Q1 = *a2;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a2->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned __int128 *)a2);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  v13 = *(float32x4_t **)(a1 + 104);
  v14 = a2[1].i64[0];
  v13[25] = vdivq_f32(*a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  v13[26].i64[0] = v14;
  v13[26].i32[2] = v4;
  if (a3)
    physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::wakeUpActors(*(_QWORD *)(a1 + 96));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

_QWORD *physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::wakeUpActors(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  char v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12[0] = 0;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)a1 + 56))(a1, &v11, v12);
  v1 = 0;
  v2 = 1;
  do
  {
    v3 = v2;
    result = (_QWORD *)v12[v1 - 1];
    if (result)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 56))(result);
      if (result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v12[v1 - 1] + 48))(v12[v1 - 1]);
        if ((_DWORD)result == 1)
        {
          v5 = v12[v1 - 1];
          result = (*(_QWORD *(**)(char *__return_ptr, uint64_t))(*(_QWORD *)v5 + 432))(&v10, v5);
          if ((v10 & 1) == 0)
          {
            v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
            v7 = (*(float (**)(uint64_t))(*(_QWORD *)v6 + 880))(v6);
            v8 = (*(float (**)(uint64_t))(*(_QWORD *)v5 + 584))(v5);
            result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 512))(v5);
            if (v8 < v7 || (_DWORD)result != 0)
            {
              if (v8 >= v7)
                v7 = v8;
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 592))(v5);
              result = (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 576))(v5, v7);
            }
          }
        }
      }
    }
    v2 = 0;
    v1 = 1;
  }
  while ((v3 & 1) != 0);
  return result;
}

float physx::Ext::D6Joint::getDriveVelocity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 428);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 436);
  *(_QWORD *)a3 = *(_QWORD *)(v3 + 440);
  result = *(float *)(v3 + 448);
  *(float *)(a3 + 8) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setDriveVelocity(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v5 + 428) = *(_QWORD *)a2;
  *(_DWORD *)(v5 + 436) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 440) = *(_QWORD *)a3;
  *(_DWORD *)(v5 + 448) = *(_DWORD *)(a3 + 8);
  if (a4)
    physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::wakeUpActors(*(_QWORD *)(a1 + 96));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::D6Joint::setProjectionAngularTolerance(physx::Ext::D6Joint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 472) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::D6Joint::getProjectionAngularTolerance(physx::Ext::D6Joint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 472);
}

uint64_t physx::Ext::D6Joint::setProjectionLinearTolerance(physx::Ext::D6Joint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 468) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::D6Joint::getProjectionLinearTolerance(physx::Ext::D6Joint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 468);
}

uint64_t physx::Ext::D6Joint::prepareData(physx::Ext::D6Joint *this)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;

  result = *((_QWORD *)this + 13);
  if (*((_BYTE *)this + 112))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    *((_BYTE *)this + 112) = 0;
    *(_QWORD *)(result + 456) = 0;
    *(_DWORD *)(result + 452) = 0;
    do
    {
      v6 = *(_DWORD *)(result + 80 + 4 * v5);
      if (v6)
      {
        if (v6 == 1)
        {
          v3 |= 1 << v5;
          *(_DWORD *)(result + 456) = v3;
        }
      }
      else
      {
        v4 |= 1 << v5;
        *(_DWORD *)(result + 452) = v4;
      }
      ++v5;
    }
    while (v5 != 6);
    v7 = *(float *)(result + 304) == 0.0 && *(float *)(result + 308) == 0.0;
    v8 = 0;
    if (!v7 && *(_DWORD *)(result + 80))
    {
      v8 = 1;
      *(_DWORD *)(result + 460) = 1;
    }
    if ((*(float *)(result + 320) != 0.0 || *(float *)(result + 324) != 0.0) && *(_DWORD *)(result + 84))
    {
      v8 |= 2u;
      *(_DWORD *)(result + 460) = v8;
    }
    if ((*(float *)(result + 336) != 0.0 || *(float *)(result + 340) != 0.0) && *(_DWORD *)(result + 88))
    {
      v8 |= 4u;
      *(_DWORD *)(result + 460) = v8;
    }
    v9 = *(_DWORD *)(result + 96);
    v10 = v9 == 0;
    if (*(float *)(result + 384) == 0.0)
      v10 = *(float *)(result + 388) == 0.0 || v9 == 0;
    v12 = *(_DWORD *)(result + 100);
    v13 = *(_DWORD *)(result + 92);
    if (!v10 && v12 && v13)
    {
      v14 = v8 | 0x20;
LABEL_43:
      *(_DWORD *)(result + 460) = v14;
      return result;
    }
    if (*(float *)(result + 368) != 0.0 || *(float *)(result + 372) != 0.0)
    {
      if (v13)
      {
        v8 |= 0x10u;
        *(_DWORD *)(result + 460) = v8;
      }
    }
    v15 = v9 | v12;
    if (*(float *)(result + 352) != 0.0)
    {
      if (!v15)
        return result;
LABEL_42:
      v14 = v8 | 8;
      goto LABEL_43;
    }
    v16 = v15 == 0;
    if (*(float *)(result + 356) != 0.0 && !v16)
      goto LABEL_42;
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t `non-virtual thunk to'physx::Ext::D6Joint::prepareData(physx::Ext::D6Joint *this)
{
  return physx::Ext::D6Joint::prepareData((physx::Ext::D6Joint *)((char *)this - 24));
}

uint64_t physx::Ext::D6Joint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 104), 480);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 32));
}

float project(float *a1, float *a2, float *a3, BOOL *a4, float a5)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float result;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30[4];

  v7 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  v9 = a3[1];
  v10 = a3[2];
  v11 = (float)((float)(v6 * v9) + (float)(*a2 * *a3)) + (float)(v8 * v10);
  if (fabsf(v11) >= 0.000001)
  {
    v17 = *a3 * v11;
    v18 = v9 * v11;
    v19 = v10 * v11;
    v12 = a2[3];
    v20 = sqrtf((float)((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19)) + (float)(v12 * v12));
    v14 = v17 / v20;
    v15 = v18 / v20;
    v16 = v19 / v20;
    v13 = v12 / v20;
  }
  else
  {
    v12 = a2[3];
    v13 = 1.0;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
  }
  v30[0] = (float)((float)((float)(v7 * v13) - (float)(v12 * v14)) - (float)(v6 * v16)) + (float)(v15 * v8);
  v30[1] = (float)((float)((float)(v6 * v13) - (float)(v12 * v15)) - (float)(v8 * v14)) + (float)(v16 * v7);
  v30[2] = (float)((float)((float)(v8 * v13) - (float)(v12 * v16)) - (float)(v7 * v15)) + (float)(v14 * v6);
  v30[3] = (float)((float)((float)(v7 * v14) + (float)(v12 * v13)) + (float)(v6 * v15)) + (float)(v8 * v16);
  truncate((uint64_t)&v26, (uint64_t)v30, a4, a5);
  v21 = v28;
  v22 = (float)((float)((float)(v13 * v27) + (float)(v29 * v15)) + (float)(v28 * v14)) - (float)(v16 * v26);
  v23 = (float)((float)((float)(v13 * v28) + (float)(v29 * v16)) + (float)(v26 * v15)) - (float)(v14 * v27);
  v24 = (float)((float)(v29 * v13) - (float)(v26 * v14)) - (float)(v27 * v15);
  *a1 = (float)((float)((float)(v13 * v26) + (float)(v29 * v14)) + (float)(v27 * v16)) - (float)(v15 * v28);
  a1[1] = v22;
  result = v24 - (float)(v21 * v16);
  a1[2] = v23;
  a1[3] = result;
  return result;
}

uint64_t truncate(uint64_t result, uint64_t a2, BOOL *a3, float a4)
{
  float v4;
  float v5;
  float v13;
  float v14;
  float32x2_t v15;
  float v16;

  v4 = *(float *)(a2 + 12);
  v5 = *(float *)a2;
  if (v4 >= 0.0)
  {
    _D2 = *(float32x2_t *)(a2 + 4);
  }
  else
  {
    v5 = -v5;
    _D2 = vneg_f32(*(float32x2_t *)(a2 + 4));
    v4 = -v4;
  }
  *a3 = v4 < a4;
  if (v4 < a4)
  {
    _S4 = _D2.i32[1];
    __asm { FMLA            S3, S4, V2.S[1] }
    if (_S3 <= 0.0)
    {
      v15 = 0;
      v14 = 0.0;
    }
    else
    {
      v13 = 1.0 / sqrtf(_S3);
      v14 = v5 * v13;
      v15 = vmul_n_f32(_D2, v13);
    }
    v16 = sqrtf(1.0 - (float)(a4 * a4));
    v5 = v16 * v14;
    _D2 = vmul_n_f32(v15, v16);
  }
  else
  {
    a4 = v4;
  }
  *(float *)result = v5;
  *(float32x2_t *)(result + 4) = _D2;
  *(float *)(result + 12) = a4;
  return result;
}

uint64_t D6JointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, int a8, float32x2_t *a9, float32x2_t *a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int v26;
  int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  int v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  __int16 v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  int v84;
  uint64_t v85;
  __int16 v86;
  __int16 v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  int v96;
  uint64_t v97;
  __int16 v98;
  __int16 v99;
  float v100;
  float v101;
  float v102;
  float v103;
  int v104;
  uint64_t v105;
  __int16 v106;
  __int16 v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  float *v137;
  float32x2_t *v138;
  uint64_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  __int16 v146;
  __int16 v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  unsigned int v153;
  float v154;
  unsigned int v155;
  float v156;
  int v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  int v164;
  uint64_t v165;
  float v166;
  float *v167;
  int v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  uint64_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  uint64_t v184;
  float v185;
  uint64_t v186;
  float v187;
  float v188;
  float v189;
  float v190;
  uint64_t v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  uint64_t v201;
  float v202;
  float v203;
  float v204;
  float v205;
  uint64_t v206;
  float v207;
  uint64_t v208;
  float v209;
  float v210;
  float v211;
  float v212;
  uint64_t v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  uint64_t v222;
  uint64_t v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  uint64_t v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  uint64_t v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  uint64_t v248;
  float32_t v249;
  float32_t v250;
  char v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270[2];
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278[4];
  float v279;
  float v280;
  float v281;
  uint64_t v282;
  uint64_t v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float32x2_t v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  uint64_t v303;
  int v304;
  int v305;
  float32x2_t v306;
  float v307;
  __int128 v308;
  __int128 v309;
  float v310;
  uint64_t v311;

  v311 = *MEMORY[0x24BDAC8D0];
  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v282, a1, a4, (uint64_t)&v296, &v290, a2, (float *)a5, a6, a7);
  v17 = *(_DWORD *)(a5 + 460);
  v18 = v296;
  v19 = v291;
  if (a8)
  {
    v21 = v297;
    v20 = v298;
    v22 = v299;
    v23 = v292;
    v25 = v290.f32[1];
    v24 = v290.f32[0];
  }
  else
  {
    v25 = v290.f32[1];
    v24 = v290.f32[0];
    v21 = v297;
    v20 = v298;
    v22 = v299;
    v23 = v292;
    if ((float)((float)((float)((float)(v297 * v290.f32[1]) + (float)(v296 * v290.f32[0])) + (float)(v298 * v291))
               + (float)(v299 * v292)) < 0.0)
    {
      v24 = -v290.f32[0];
      v25 = -v290.f32[1];
      v19 = -v291;
      v290.f32[0] = -v290.f32[0];
      v290.f32[1] = -v290.f32[1];
      v23 = -v292;
      v291 = -v291;
      v292 = -v292;
    }
  }
  v26 = *(_DWORD *)(a5 + 452);
  v27 = *(_DWORD *)(a5 + 456);
  v28 = (float)(v293 - v300) + (float)(v293 - v300);
  v29 = (float)(v294 - v301) + (float)(v294 - v301);
  v30 = (float)(v295 - v302) + (float)(v295 - v302);
  v31 = (float)(v22 * v22) + -0.5;
  v32 = (float)((float)-(float)(v21 * v29) - (float)(v296 * v28)) - (float)(v20 * v30);
  v33 = (float)((float)(v22 * (float)((float)(v20 * v29) - (float)(v21 * v30))) + (float)(v28 * v31))
      - (float)(v296 * v32);
  v34 = (float)((float)(v22 * (float)((float)(v296 * v30) - (float)(v20 * v28))) + (float)(v29 * v31))
      - (float)(v21 * v32);
  v35 = (float)((float)(v22 * (float)((float)(v21 * v28) - (float)(v296 * v29))) + (float)(v30 * v31))
      - (float)(v20 * v32);
  v36 = (float)((float)((float)(v22 * v24) - (float)(v296 * v23)) - (float)(v21 * v19)) + (float)(v25 * v20);
  v37 = (float)((float)((float)(v22 * v25) - (float)(v21 * v23)) - (float)(v20 * v24)) + (float)(v19 * v296);
  v38 = (float)((float)((float)(v22 * v19) - (float)(v20 * v23)) - (float)(v296 * v25)) + (float)(v24 * v21);
  v39 = (float)((float)((float)(v296 * v24) + (float)(v22 * v23)) + (float)(v21 * v25)) + (float)(v20 * v19);
  v278[0] = v36;
  v278[1] = v37;
  v278[2] = v38;
  v278[3] = v39;
  v279 = v33;
  v280 = v34;
  v281 = v35;
  v40 = v21 * (float)(v21 + v21);
  v41 = v20 * (float)(v20 + v20);
  v42 = (float)(v296 + v296) * v21;
  v43 = (float)(v296 + v296) * v20;
  v44 = (float)(v296 + v296) * v22;
  v45 = v20 * (float)(v21 + v21);
  v46 = v22 * (float)(v21 + v21);
  v47 = v22 * (float)(v20 + v20);
  v270[0] = (float)(1.0 - v40) - v41;
  v270[1] = v42 + v47;
  v48 = 1.0 - (float)(v296 * (float)(v296 + v296));
  v271 = v43 - v46;
  v272 = v42 - v47;
  v273 = v48 - v41;
  v274 = v44 + v45;
  v275 = v43 + v46;
  v276 = v45 - v44;
  v277 = v48 - v40;
  v49 = v24 + v24;
  v50 = v19 * (float)(v19 + v19);
  v51 = v25 * (float)(v24 + v24);
  v52 = v19 * (float)(v24 + v24);
  v53 = (float)(v25 + v25) * v23;
  v54 = v23 * (float)(v19 + v19);
  v262 = v25 * (float)(v25 + v25);
  if ((v17 & 7) != 0)
  {
    v55 = 0;
    v56 = 0;
    *(float *)&v57 = *(float *)(a5 + 420) - v34;
    *(float *)&v58 = *(float *)(a5 + 424) - v35;
    *(float *)&v308 = *(float *)(a5 + 416) - v33;
    *(_QWORD *)((char *)&v308 + 4) = __PAIR64__(v58, v57);
    v59 = &v271;
    v60 = v283;
    v61 = 304;
    do
    {
      if (((v17 >> v55) & 1) != 0)
      {
        v62 = -*(float *)(a5 + v56 + 428);
        v63 = *(_DWORD *)((char *)&v308 + v56);
        v64 = a5 + v61;
        v283 = v60 + 80;
        *(_WORD *)(v60 + 78) = 0;
        v65 = *(v59 - 2);
        *(float *)v60 = v65;
        v66 = *(v59 - 1);
        *(float *)(v60 + 4) = v66;
        v67 = *v59;
        *(float *)(v60 + 8) = *v59;
        v68 = (float)(v286 * v65) - (float)(v284 * v67);
        v69 = (float)(v284 * v66) - (float)(v285 * v65);
        *(float *)(v60 + 16) = (float)(v285 * v67) - (float)(v286 * v66);
        *(float *)(v60 + 20) = v68;
        *(float *)(v60 + 24) = v69;
        *(float *)(v60 + 32) = v65;
        *(float *)(v60 + 36) = v66;
        *(float *)(v60 + 40) = v67;
        v70 = (float)(v289 * v65) - (float)(v287 * v67);
        v71 = (float)(v287 * v66) - (float)(v288 * v65);
        *(float *)(v60 + 48) = (float)(v288 * v67) - (float)(v289 * v66);
        *(float *)(v60 + 52) = v70;
        *(float *)(v60 + 56) = v71;
        *(_DWORD *)(v60 + 12) = v63;
        *(float *)(v60 + 28) = v62;
        if ((*(_DWORD *)(a5 + 4 * v56 + 316) & 1) != 0)
          v72 = 35;
        else
          v72 = 33;
        *(_WORD *)(v60 + 76) |= v72;
        *(_DWORD *)(v60 + 64) = *(_DWORD *)v64;
        *(_DWORD *)(v60 + 68) = *(_DWORD *)(v64 + 4);
        v73 = *(float *)(v64 + 8);
        *(float *)(v60 + 44) = -v73;
        *(float *)(v60 + 60) = v73;
        v60 += 80;
      }
      v56 += 4;
      ++v55;
      v59 += 3;
      v61 += 16;
    }
    while (v56 != 12);
  }
  v74 = (float)(1.0 - v262) - v50;
  v75 = v54 + v51;
  v76 = v52 - v53;
  if ((v17 & 0x38) != 0)
  {
    v77 = *(float *)(a5 + 400);
    v78 = *(float *)(a5 + 404);
    v79 = *(float *)(a5 + 408);
    v80 = *(float *)(a5 + 412);
    if ((float)((float)((float)((float)(v37 * v78) + (float)(v36 * v77)) + (float)(v38 * v79)) + (float)(v39 * v80)) <= 0.0)
    {
      v77 = -v77;
      v78 = -v78;
      v79 = -v79;
      v80 = -v80;
    }
    v81 = (float)((float)((float)(v80 * v36) - (float)(v77 * v39)) - (float)(v78 * v38)) + (float)(v37 * v79);
    v82 = (float)((float)((float)(v80 * v37) - (float)(v78 * v39)) - (float)(v79 * v36)) + (float)(v38 * v77);
    v83 = (float)((float)((float)(v80 * v38) - (float)(v79 * v39)) - (float)(v77 * v37)) + (float)(v36 * v78);
    if ((v17 & 0x20) != 0)
    {
      v263 = v54 + v51;
      v109 = *(float *)(a5 + 440) + *(float *)(a5 + 440);
      v110 = *(float *)(a5 + 444) + *(float *)(a5 + 444);
      v111 = *(float *)(a5 + 448) + *(float *)(a5 + 448);
      v112 = (float)((float)(v21 * v110) + (float)(v18 * v109)) + (float)(v20 * v111);
      v113 = (float)(v22 * (float)((float)(v110 * (float)-v20) + (float)(v21 * v111))) + (float)(v109 * v31);
      v114 = (float)(v22 * (float)((float)(v111 * (float)-v18) + (float)(v20 * v109))) + (float)(v110 * v31);
      v115 = (float)(v22 * (float)((float)(v109 * (float)-v21) + (float)(v18 * v110))) + (float)(v111 * v31);
      v308 = xmmword_2260E5F10;
      v309 = xmmword_2260E5F10;
      v310 = 1.0;
      if (*(float *)(a5 + 384) != 0.0)
      {
        v257 = v76;
        v116 = (float)((float)((float)(v18 * v80) + (float)(v22 * v77)) + (float)(v21 * v79))
             + (float)((float)-v78 * v20);
        v117 = (float)((float)((float)(v21 * v80) + (float)(v22 * v78)) + (float)(v20 * v77))
             + (float)((float)-v79 * v18);
        v118 = (float)((float)((float)(v20 * v80) + (float)(v22 * v79)) + (float)(v18 * v78))
             + (float)((float)-v77 * v21);
        v119 = (float)((float)((float)(v77 * (float)-v18) + (float)(v22 * v80)) + (float)((float)-v21 * v78))
             + (float)((float)-v20 * v79);
        v120 = (float)(v24 * v119) + (float)(v23 * v116);
        v121 = (float)(v25 * v119) + (float)(v23 * v117);
        v122 = (float)(v19 * v119) + (float)(v23 * v118);
        v123 = v23 * v119;
        v124 = v25 * v117;
        v125 = (float)((float)(v25 * v117) + (float)(v116 * v24)) + (float)(v118 * v19);
        v126 = v24 * v116;
        v127 = (float)(v24 * v117) + (float)(v25 * v116);
        v128 = (float)(v24 * v118) + (float)(v19 * v116);
        v129 = (float)((float)(v126 + v126) + (float)(v123 - v125)) * 0.5;
        *(float *)&v308 = v129;
        *((float *)&v308 + 1) = (float)(v127 + v122) * 0.5;
        v130 = (float)(v25 * v118) + (float)(v19 * v117);
        v131 = (float)((float)(v124 + v124) + (float)(v123 - v125)) * 0.5;
        *((float *)&v308 + 2) = (float)(v128 - v121) * 0.5;
        *((float *)&v308 + 3) = (float)(v127 - v122) * 0.5;
        *(float *)&v309 = v131;
        *((float *)&v309 + 1) = (float)(v120 + v130) * 0.5;
        v132 = (float)((float)((float)(v19 * v118) + (float)(v19 * v118)) + (float)(v123 - v125)) * 0.5;
        *((float *)&v309 + 2) = (float)(v121 + v128) * 0.5;
        *((float *)&v309 + 3) = (float)(v130 - v120) * 0.5;
        v310 = v132;
        v133 = v123 + v125;
        v76 = v257;
        if (v133 == 0.0)
        {
          *(float *)&v308 = v129 + 0.00000011921;
          *(float *)&v309 = v131 + 0.00000011921;
          v310 = v132 + 0.00000011921;
        }
      }
      v134 = 0;
      v135 = v283;
      v136 = -(float)(v115 + (float)(v20 * v112));
      v137 = (float *)&v308 + 2;
      v138 = &v306;
      do
      {
        v139 = v135 + v134;
        v140 = *(v137 - 2);
        v141 = *(v137 - 1);
        v142 = *v137;
        v137 += 3;
        v143 = v142;
        v144 = (float)((float)(v141 * (float)-(float)(v114 + (float)(v21 * v112)))
                     + (float)(v140 * (float)-(float)(v113 + (float)(v18 * v112))))
             + (float)(v142 * v136);
        v306 = (float32x2_t)__PAIR64__(LODWORD(v82), LODWORD(v81));
        v307 = v83;
        v145 = v138->f32[0];
        v138 = (float32x2_t *)((char *)v138 + 4);
        *(_WORD *)(v139 + 78) = 258;
        *(_QWORD *)v139 = 0;
        *(_DWORD *)(v139 + 8) = 0;
        *(_QWORD *)(v139 + 32) = 0;
        *(_DWORD *)(v139 + 40) = 0;
        *(float *)(v139 + 20) = v141;
        *(float *)(v139 + 24) = v143;
        *(float *)(v139 + 48) = v140;
        *(float *)(v139 + 52) = v141;
        *(float *)(v139 + 56) = v143;
        v146 = *(_WORD *)(v135 + v134 + 76);
        *(float *)(v139 + 12) = -v145;
        *(float *)(v139 + 16) = v140;
        *(float *)(v139 + 28) = v144;
        if ((*(_DWORD *)(a5 + 396) & 1) != 0)
          v147 = 35;
        else
          v147 = 33;
        *(_WORD *)(v139 + 76) = v146 | v147 | 0x40;
        *(_DWORD *)(v139 + 64) = *(_DWORD *)(a5 + 384);
        *(_DWORD *)(v139 + 68) = *(_DWORD *)(a5 + 388);
        v148 = *(float *)(a5 + 392);
        *(float *)(v139 + 44) = -v148;
        *(float *)(v139 + 60) = v148;
        v134 += 80;
      }
      while (v134 != 240);
      v283 = v135 + 240;
      v75 = v263;
    }
    else
    {
      if ((v17 & 0x10) != 0)
      {
        v84 = *(_DWORD *)(a5 + 440);
        v85 = v283;
        v283 += 80;
        *(_WORD *)(v85 + 78) = 0;
        *(_QWORD *)v85 = 0;
        *(_DWORD *)(v85 + 8) = 0;
        *(float *)(v85 + 20) = v75;
        *(float *)(v85 + 24) = v76;
        *(_QWORD *)(v85 + 32) = 0;
        *(_DWORD *)(v85 + 40) = 0;
        *(float *)(v85 + 48) = v74;
        *(float *)(v85 + 52) = v75;
        *(float *)(v85 + 56) = v76;
        *(float *)(v85 + 12) = v81 * -2.0;
        *(float *)(v85 + 16) = v74;
        v86 = *(_WORD *)(v85 + 76);
        *(_DWORD *)(v85 + 28) = v84;
        if ((*(_DWORD *)(a5 + 380) & 1) != 0)
          v87 = 35;
        else
          v87 = 33;
        *(_WORD *)(v85 + 76) = v86 | v87 | 0x40;
        *(_DWORD *)(v85 + 64) = *(_DWORD *)(a5 + 368);
        *(_DWORD *)(v85 + 68) = *(_DWORD *)(a5 + 372);
        v88 = *(float *)(a5 + 376);
        *(float *)(v85 + 44) = -v88;
        *(float *)(v85 + 60) = v88;
      }
      if ((v17 & 8) != 0)
      {
        v89 = v23 * v49;
        v90 = v19 * (float)(v25 + v25);
        v91 = 1.0 - (float)(v24 * v49);
        v92 = (float)((float)((float)(v36 * v77) + (float)(v80 * v39)) + (float)(v78 * v37)) + (float)(v79 * v38);
        v93 = (float)(v92 * v92) + -0.5;
        v94 = (float)((float)(v82 * 0.0) + (float)(v81 * 2.0)) + (float)(v83 * 0.0);
        if ((v26 & 0x10) == 0)
        {
          v95 = v51 - v54;
          v96 = *(_DWORD *)(a5 + 444);
          v97 = v283;
          v283 += 80;
          *(_WORD *)(v97 + 78) = 0;
          *(_QWORD *)v97 = 0;
          *(_DWORD *)(v97 + 8) = 0;
          *(float *)(v97 + 20) = v91 - v50;
          *(float *)(v97 + 24) = v90 + v89;
          *(_QWORD *)(v97 + 32) = 0;
          *(_DWORD *)(v97 + 40) = 0;
          *(float *)(v97 + 48) = v95;
          *(float *)(v97 + 52) = v91 - v50;
          *(float *)(v97 + 56) = v90 + v89;
          *(float *)(v97 + 12) = (float)((float)(v92 * (float)((float)(v82 * -2.0) + (float)(v81 * 0.0)))
                                       + (float)(v93 * 0.0))
                               + (float)(v83 * v94);
          *(float *)(v97 + 16) = v95;
          v98 = *(_WORD *)(v97 + 76);
          *(_DWORD *)(v97 + 28) = v96;
          if ((*(_DWORD *)(a5 + 364) & 1) != 0)
            v99 = 35;
          else
            v99 = 33;
          *(_WORD *)(v97 + 76) = v98 | v99 | 0x40;
          *(_DWORD *)(v97 + 64) = *(_DWORD *)(a5 + 352);
          *(_DWORD *)(v97 + 68) = *(_DWORD *)(a5 + 356);
          v100 = *(float *)(a5 + 360);
          *(float *)(v97 + 44) = -v100;
          *(float *)(v97 + 60) = v100;
        }
        if ((v26 & 0x20) == 0)
        {
          v101 = v90 - v89;
          v102 = v91 - v262;
          v103 = (float)((float)(v92 * (float)((float)(v81 * -0.0) + (float)(v83 * 2.0))) + (float)(v93 * 0.0))
               + (float)(v82 * v94);
          v104 = *(_DWORD *)(a5 + 448);
          v105 = v283;
          v283 += 80;
          *(_WORD *)(v105 + 78) = 0;
          *(_QWORD *)v105 = 0;
          *(_DWORD *)(v105 + 8) = 0;
          *(float *)(v105 + 20) = v101;
          *(float *)(v105 + 24) = v102;
          *(_QWORD *)(v105 + 32) = 0;
          *(_DWORD *)(v105 + 40) = 0;
          *(float *)(v105 + 48) = v53 + v52;
          *(float *)(v105 + 52) = v101;
          *(float *)(v105 + 56) = v102;
          *(float *)(v105 + 12) = -v103;
          *(float *)(v105 + 16) = v53 + v52;
          v106 = *(_WORD *)(v105 + 76);
          *(_DWORD *)(v105 + 28) = v104;
          if ((*(_DWORD *)(a5 + 364) & 1) != 0)
            v107 = 35;
          else
            v107 = 33;
          *(_WORD *)(v105 + 76) = v106 | v107 | 0x40;
          *(_DWORD *)(v105 + 64) = *(_DWORD *)(a5 + 352);
          *(_DWORD *)(v105 + 68) = *(_DWORD *)(a5 + 356);
          v108 = *(float *)(a5 + 360);
          *(float *)(v105 + 44) = -v108;
          *(float *)(v105 + 60) = v108;
        }
      }
    }
  }
  if ((v27 & 0x38) != 0)
  {
    if (v36 == 0.0)
    {
      v152 = 1.0;
      v150 = 0.0;
      v151 = 0.0;
    }
    else
    {
      v149 = sqrtf((float)((float)(v36 * v36) + 0.0) + (float)(v39 * v39));
      v150 = v36 / v149;
      v151 = 0.0 / v149;
      v152 = v39 / v149;
    }
    *(float *)&v153 = (float)((float)((float)(v36 * v152) - (float)(v39 * v150)) - (float)(v37 * v151))
                    + (float)(v151 * v38);
    v154 = (float)((float)((float)(v37 * v152) - (float)(v39 * v151)) - (float)(v38 * v150)) + (float)(v151 * v36);
    *(float *)&v155 = (float)((float)((float)(v38 * v152) - (float)(v39 * v151)) - (float)(v36 * v151))
                    + (float)(v150 * v37);
    v156 = (float)((float)((float)(v36 * v150) + (float)(v39 * v152)) + (float)(v37 * v151)) + (float)(v38 * v151);
    *(_QWORD *)&v308 = __PAIR64__(LODWORD(v154), v153);
    *((_QWORD *)&v308 + 1) = __PAIR64__(LODWORD(v156), v155);
    if ((~v27 & 0x30) == 0)
    {
      if (*(_BYTE *)(a5 + 478))
      {
        v157 = *(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0 ? *(_DWORD *)(a5 + 256) : 0;
        v305 = 0;
        v303 = *(_QWORD *)(a5 + 260);
        v304 = v157;
        if (physx::Cm::ConeLimitHelperTanLess::getLimit((float *)&v303, (float *)&v308, (float *)&v306, (float *)&v305))
        {
          v158 = v298;
          v159 = (float)(v299 * v299) + -0.5;
          v160 = (float)((float)((float)(v306.f32[1] + v306.f32[1]) * v297)
                       + (float)(v296 * (float)(v306.f32[0] + v306.f32[0])))
               + (float)(v298 * (float)(v307 + v307));
          v161 = (float)((float)(v299
                               * (float)((float)(v297 * (float)(v307 + v307))
                                       - (float)(v298 * (float)(v306.f32[1] + v306.f32[1]))))
                       + (float)((float)(v306.f32[0] + v306.f32[0]) * v159))
               + (float)(v296 * v160);
          v162 = (float)((float)(v299
                               * (float)((float)(v298 * (float)(v306.f32[0] + v306.f32[0]))
                                       - (float)(v296 * (float)(v307 + v307))))
                       + (float)((float)(v306.f32[1] + v306.f32[1]) * v159))
               + (float)(v297 * v160);
          v163 = (float)(v299
                       * (float)((float)(v296 * (float)(v306.f32[1] + v306.f32[1]))
                               - (float)(v297 * (float)(v306.f32[0] + v306.f32[0]))))
               + (float)((float)(v307 + v307) * v159);
          v164 = v305;
          v165 = v283;
          v283 += 80;
          *(_WORD *)(v165 + 78) = 0;
          *(_QWORD *)v165 = 0;
          v166 = v163 + (float)(v158 * v160);
          *(_DWORD *)(v165 + 8) = 0;
          *(float *)(v165 + 20) = v162;
          *(float *)(v165 + 24) = v166;
          *(_QWORD *)(v165 + 32) = 0;
          *(_DWORD *)(v165 + 40) = 0;
          *(float *)(v165 + 48) = v161;
          *(float *)(v165 + 52) = v162;
          *(float *)(v165 + 56) = v166;
          *(_DWORD *)(v165 + 12) = v164;
          *(float *)(v165 + 16) = v161;
          *(_WORD *)(v165 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v165, a5 + 240);
        }
      }
      if (!*(_BYTE *)(a5 + 479))
        goto LABEL_115;
      v167 = (float *)a5;
      v168 = 1;
      goto LABEL_62;
    }
    if ((v27 & 0x10) != 0)
    {
      if ((v26 & 0x20) != 0)
      {
        if (*(_BYTE *)(a5 + 479))
        {
          setupPyramidSwingLimits((uint64_t)&v282, (float *)a5, (float *)&v308, &v296, 1, 0);
          goto LABEL_86;
        }
        v179 = a5 + 240;
        v265 = *(float *)(a5 + 260);
        v181 = atan2f(v154, v156 + 1.0) * 4.0;
        if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0)
          v182 = *(float *)(a5 + 256);
        else
          v182 = 0.0;
        v187 = v265;
        if ((float)(v182 - v265) > v181)
        {
          v188 = -v272;
          v189 = -v273;
          v190 = -v274;
          v191 = v283;
          v283 += 80;
          *(_WORD *)(v191 + 78) = 0;
          *(_QWORD *)v191 = 0;
          *(_DWORD *)(v191 + 8) = 0;
          *(float *)(v191 + 20) = v189;
          *(float *)(v191 + 24) = v190;
          *(_QWORD *)(v191 + 32) = 0;
          *(_DWORD *)(v191 + 40) = 0;
          *(float *)(v191 + 48) = v188;
          *(float *)(v191 + 52) = v189;
          *(float *)(v191 + 56) = v190;
          *(float *)(v191 + 12) = -(float)((float)-v265 - v181);
          *(float *)(v191 + 16) = v188;
          *(_WORD *)(v191 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v191, a5 + 240);
          v187 = v265;
        }
        if ((float)(v187 - v182) < v181)
        {
          v185 = v187 - v181;
          v186 = v283;
          v283 += 80;
          *(_WORD *)(v186 + 78) = 0;
          *(_QWORD *)v186 = 0;
          *(_DWORD *)(v186 + 8) = 0;
          v175 = v272;
          v176 = v273;
          v177 = v274;
          goto LABEL_85;
        }
      }
      else
      {
        if (*(_BYTE *)(a5 + 479))
        {
          physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtD6Joint.cpp", 1005, "D6JointSolverPrep: invalid joint setup. Double pyramid mode not supported.", v14, v15, v16, v252);
          goto LABEL_86;
        }
        v169 = (float)(v277 * v74) - (float)(v275 * v76);
        v170 = (float)(v275 * v75) - (float)(v276 * v74);
        v171 = (float)((float)(v75 * v276) + (float)(v275 * v74)) + (float)(v277 * v76);
        v172 = -v171;
        v258 = (float)(v276 * v76) - (float)(v277 * v75);
        v264 = *(float *)(a5 + 260);
        if (v171 > 1.0)
          v172 = -1.0;
        if (v172 > 1.0)
          v172 = 1.0;
        v173 = asinf(v172);
        v174 = (float)((float)(v169 * v169) + (float)(v258 * v258)) + (float)(v170 * v170);
        v175 = 0.0;
        v176 = 0.0;
        v177 = 0.0;
        if (v174 > 0.0)
        {
          v178 = 1.0 / sqrtf(v174);
          v175 = v258 * v178;
          v176 = v169 * v178;
          v177 = v170 * v178;
        }
        v179 = a5 + 240;
        if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0)
          v180 = *(float *)(a5 + 256);
        else
          v180 = 0.0;
        v183 = v264;
        if ((float)(v180 - v264) > v173)
        {
          v184 = v283;
          v283 += 80;
          v259 = v176;
          v266 = v175;
          *(_WORD *)(v184 + 78) = 0;
          v253 = v173;
          v255 = v177;
          *(_QWORD *)v184 = 0;
          *(_DWORD *)(v184 + 8) = 0;
          *(float *)(v184 + 20) = -v176;
          *(float *)(v184 + 24) = -v177;
          *(_QWORD *)(v184 + 32) = 0;
          *(_DWORD *)(v184 + 40) = 0;
          *(float *)(v184 + 48) = -v175;
          *(float *)(v184 + 52) = -v176;
          *(float *)(v184 + 56) = -v177;
          *(float *)(v184 + 12) = -(float)((float)-v183 - v173);
          *(float *)(v184 + 16) = -v175;
          *(_WORD *)(v184 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v184, a5 + 240);
          v173 = v253;
          v177 = v255;
          v176 = v259;
          v175 = v266;
        }
        if ((float)(v183 - v180) < v173)
        {
          v185 = v183 - v173;
          v186 = v283;
          v283 += 80;
          *(_WORD *)(v186 + 78) = 0;
          *(_QWORD *)v186 = 0;
          *(_DWORD *)(v186 + 8) = 0;
LABEL_85:
          *(float *)(v186 + 20) = v176;
          *(float *)(v186 + 24) = v177;
          *(_QWORD *)(v186 + 32) = 0;
          *(_DWORD *)(v186 + 40) = 0;
          *(float *)(v186 + 48) = v175;
          *(float *)(v186 + 52) = v176;
          *(float *)(v186 + 56) = v177;
          *(float *)(v186 + 12) = v185;
          *(float *)(v186 + 16) = v175;
          *(_WORD *)(v186 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v186, v179);
        }
      }
    }
LABEL_86:
    if ((v27 & 0x20) == 0)
      goto LABEL_115;
    if ((v26 & 0x10) != 0)
    {
      if (*(_BYTE *)(a5 + 479))
      {
        v167 = (float *)a5;
        v168 = 0;
LABEL_62:
        setupPyramidSwingLimits((uint64_t)&v282, v167, (float *)&v308, &v296, v168, 1);
        goto LABEL_115;
      }
      v201 = a5 + 240;
      v268 = *(float *)(a5 + 264);
      v203 = atan2f(*((float *)&v308 + 2), *((float *)&v308 + 3) + 1.0) * 4.0;
      if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0)
        v204 = *(float *)(a5 + 256);
      else
        v204 = 0.0;
      v209 = v268;
      if ((float)(v204 - v268) > v203)
      {
        v210 = -v275;
        v211 = -v276;
        v212 = -v277;
        v213 = v283;
        v283 += 80;
        *(_WORD *)(v213 + 78) = 0;
        *(_QWORD *)v213 = 0;
        *(_DWORD *)(v213 + 8) = 0;
        *(float *)(v213 + 20) = v211;
        *(float *)(v213 + 24) = v212;
        *(_QWORD *)(v213 + 32) = 0;
        *(_DWORD *)(v213 + 40) = 0;
        *(float *)(v213 + 48) = v210;
        *(float *)(v213 + 52) = v211;
        *(float *)(v213 + 56) = v212;
        *(float *)(v213 + 12) = -(float)((float)-v268 - v203);
        *(float *)(v213 + 16) = v210;
        *(_WORD *)(v213 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v213, a5 + 240);
        v209 = v268;
      }
      if ((float)(v209 - v204) >= v203)
        goto LABEL_115;
      v207 = v209 - v203;
      v208 = v283;
      v283 += 80;
      *(_WORD *)(v208 + 78) = 0;
      *(_QWORD *)v208 = 0;
      *(_DWORD *)(v208 + 8) = 0;
      v197 = v275;
      v198 = v276;
      v199 = v277;
    }
    else
    {
      if (*(_BYTE *)(a5 + 479))
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtD6Joint.cpp", 1021, "D6JointSolverPrep: invalid joint setup. Double pyramid mode not supported.", v14, v15, v16, v252);
        goto LABEL_115;
      }
      v192 = (float)(v274 * v74) - (float)(v272 * v76);
      v193 = (float)(v272 * v75) - (float)(v273 * v74);
      v194 = (float)((float)(v75 * v273) + (float)(v272 * v74)) + (float)(v274 * v76);
      v260 = (float)(v273 * v76) - (float)(v274 * v75);
      v267 = *(float *)(a5 + 264);
      if (v194 < -1.0)
        v194 = -1.0;
      if (v194 > 1.0)
        v194 = 1.0;
      v195 = asinf(v194);
      v196 = (float)((float)(v192 * v192) + (float)(v260 * v260)) + (float)(v193 * v193);
      v197 = 0.0;
      v198 = 0.0;
      v199 = 0.0;
      if (v196 > 0.0)
      {
        v200 = 1.0 / sqrtf(v196);
        v197 = -(float)(v260 * v200);
        v198 = -(float)(v192 * v200);
        v199 = -(float)(v193 * v200);
      }
      v201 = a5 + 240;
      if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0)
        v202 = *(float *)(a5 + 256);
      else
        v202 = 0.0;
      v205 = v267;
      if ((float)(v202 - v267) > v195)
      {
        v206 = v283;
        v283 += 80;
        v261 = v198;
        v269 = v197;
        *(_WORD *)(v206 + 78) = 0;
        v254 = v195;
        v256 = v199;
        *(_QWORD *)v206 = 0;
        *(_DWORD *)(v206 + 8) = 0;
        *(float *)(v206 + 20) = -v198;
        *(float *)(v206 + 24) = -v199;
        *(_QWORD *)(v206 + 32) = 0;
        *(_DWORD *)(v206 + 40) = 0;
        *(float *)(v206 + 48) = -v197;
        *(float *)(v206 + 52) = -v198;
        *(float *)(v206 + 56) = -v199;
        *(float *)(v206 + 12) = -(float)((float)-v205 - v195);
        *(float *)(v206 + 16) = -v197;
        *(_WORD *)(v206 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v206, a5 + 240);
        v195 = v254;
        v199 = v256;
        v198 = v261;
        v197 = v269;
      }
      if ((float)(v205 - v202) >= v195)
        goto LABEL_115;
      v207 = v205 - v195;
      v208 = v283;
      v283 += 80;
      *(_WORD *)(v208 + 78) = 0;
      *(_QWORD *)v208 = 0;
      *(_DWORD *)(v208 + 8) = 0;
    }
    *(float *)(v208 + 20) = v198;
    *(float *)(v208 + 24) = v199;
    *(_QWORD *)(v208 + 32) = 0;
    *(_DWORD *)(v208 + 40) = 0;
    *(float *)(v208 + 48) = v197;
    *(float *)(v208 + 52) = v198;
    *(float *)(v208 + 56) = v199;
    *(float *)(v208 + 12) = v207;
    *(float *)(v208 + 16) = v197;
    *(_WORD *)(v208 + 76) |= 0x40u;
    physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v208, v201);
LABEL_115:
    if ((v27 & 8) != 0)
    {
      v214 = sqrtf((float)((float)((float)(v151 * v151) + (float)(v150 * v150)) + (float)(v151 * v151))+ (float)(v152 * v152));
      if (v214 != 0.0)
      {
        v150 = v150 / v214;
        v152 = v152 / v214;
      }
      v215 = -1.0;
      if (v152 >= -1.0)
        v215 = v152;
      if (v215 > 1.0)
        v215 = 1.0;
      v216 = acosf(v215);
      v217 = v216 + v216;
      if (v150 >= 0.0)
        v218 = v217;
      else
        v218 = -v217;
      v219 = *(float *)(a5 + 236);
      if (*(float *)(a5 + 224) <= 0.0 && *(float *)(a5 + 220) <= 0.0)
        v220 = *(float *)(a5 + 228);
      else
        v220 = 0.0;
      v221 = *(float *)(a5 + 232);
      if ((float)(v219 + v220) > v218)
      {
        v222 = v283;
        v283 += 80;
        *(_WORD *)(v222 + 78) = 0;
        *(_QWORD *)v222 = 0;
        *(_DWORD *)(v222 + 8) = 0;
        *(float *)(v222 + 20) = -v75;
        *(float *)(v222 + 24) = -v76;
        *(_QWORD *)(v222 + 32) = 0;
        *(_DWORD *)(v222 + 40) = 0;
        *(float *)(v222 + 48) = -v74;
        *(float *)(v222 + 52) = -v75;
        *(float *)(v222 + 56) = -v76;
        *(float *)(v222 + 12) = -(float)(v219 - v218);
        *(float *)(v222 + 16) = -v74;
        *(_WORD *)(v222 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v222, a5 + 212);
      }
      if ((float)(v221 - v220) < v218)
      {
        v223 = v283;
        v283 += 80;
        *(_WORD *)(v223 + 78) = 0;
        *(_QWORD *)v223 = 0;
        *(_DWORD *)(v223 + 8) = 0;
        *(float *)(v223 + 20) = v75;
        *(float *)(v223 + 24) = v76;
        *(_QWORD *)(v223 + 32) = 0;
        *(_DWORD *)(v223 + 40) = 0;
        *(float *)(v223 + 48) = v74;
        *(float *)(v223 + 52) = v75;
        *(float *)(v223 + 56) = v76;
        *(float *)(v223 + 12) = v221 - v218;
        *(float *)(v223 + 16) = v74;
        *(_WORD *)(v223 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v223, a5 + 212);
      }
    }
  }
  if ((v27 & 7) != 0)
  {
    if (*(_BYTE *)(a5 + 476))
    {
      v224 = computeLimitedDistance(*(_DWORD *)(a5 + 456), (uint64_t)v278, (uint64_t)v270, (float32x2_t *)&v308);
      if (v224 > *(float *)(a5 + 464))
      {
        v225 = *(float *)(a5 + 124);
        if (*(float *)(a5 + 116) <= 0.0 && *(float *)(a5 + 112) <= 0.0)
          v226 = *(float *)(a5 + 120);
        else
          v226 = 0.0;
        if ((float)(v224 + v226) > v225)
        {
          v227 = (float)(1.0 / v224) * *(float *)&v308;
          v228 = (float)(1.0 / v224) * *((float *)&v308 + 1);
          v229 = (float)(1.0 / v224) * *((float *)&v308 + 2);
          v230 = v225 - v224;
          v231 = v283;
          v283 += 80;
          *(_WORD *)(v231 + 78) = 0;
          *(float *)v231 = v227;
          *(float *)(v231 + 4) = v228;
          *(float *)(v231 + 8) = v229;
          v232 = (float)(v286 * v227) - (float)(v284 * v229);
          v233 = (float)(v284 * v228) - (float)(v285 * v227);
          *(float *)(v231 + 16) = (float)(v285 * v229) - (float)(v286 * v228);
          *(float *)(v231 + 20) = v232;
          *(float *)(v231 + 24) = v233;
          *(float *)(v231 + 32) = v227;
          *(float *)(v231 + 36) = v228;
          *(float *)(v231 + 40) = v229;
          v234 = (float)(v288 * v229) - (float)(v289 * v228);
          v235 = (float)(v289 * v227) - (float)(v287 * v229);
          v236 = (float)(v287 * v228) - (float)(v288 * v227);
          *(float *)(v231 + 48) = v234;
          *(float *)(v231 + 52) = v235;
          *(float *)(v231 + 56) = v236;
          *(float *)(v231 + 12) = v230;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v231, a5 + 104);
        }
      }
    }
    if (*(_BYTE *)(a5 + 477))
    {
      if ((v27 & 1) != 0 && *(float *)(a5 + 152) <= *(float *)(a5 + 148))
        setupLinearLimit((uint64_t)&v282, (float *)(a5 + 128), v270, v279);
      if ((v27 & 2) != 0 && *(float *)(a5 + 180) <= *(float *)(a5 + 176))
        setupLinearLimit((uint64_t)&v282, (float *)(a5 + 156), &v272, v280);
      if ((v27 & 4) != 0 && *(float *)(a5 + 208) <= *(float *)(a5 + 204))
        setupLinearLimit((uint64_t)&v282, (float *)(a5 + 184), &v275, v281);
    }
  }
  if ((v26 & 0x38) == 0x20)
  {
    v26 &= ~0x20u;
    v243 = v274;
    v244 = (float)(v75 * v274) - (float)(v76 * v273);
    v245 = (float)(v76 * v272) - (float)(v74 * v274);
    v246 = (float)(v74 * v273) - (float)(v75 * v272);
    v247 = (float)(v75 * v273) + (float)(v74 * v272);
    v248 = v283;
    v283 += 80;
    *(_WORD *)(v248 + 78) = 2048;
    *(_QWORD *)v248 = 0;
    *(_DWORD *)(v248 + 8) = 0;
    *(float *)(v248 + 20) = v245;
    *(float *)(v248 + 24) = v246;
    *(_QWORD *)(v248 + 32) = 0;
    *(_DWORD *)(v248 + 40) = 0;
    *(float *)(v248 + 48) = v244;
    *(float *)(v248 + 52) = v245;
    *(float *)(v248 + 56) = v246;
    *(float *)(v248 + 12) = -(float)(v247 + (float)(v76 * v243));
    *(float *)(v248 + 16) = v244;
    *(_WORD *)(v248 + 76) |= 0x50u;
  }
  else if ((v26 & 0x38) == 0x10)
  {
    v237 = v277;
    v238 = (float)(v75 * v277) - (float)(v76 * v276);
    v239 = (float)(v76 * v275) - (float)(v74 * v277);
    v240 = (float)(v74 * v276) - (float)(v75 * v275);
    v241 = (float)(v75 * v276) + (float)(v74 * v275);
    v242 = v283;
    v283 += 80;
    *(_WORD *)(v242 + 78) = 2048;
    *(_QWORD *)v242 = 0;
    *(_DWORD *)(v242 + 8) = 0;
    *(float *)(v242 + 20) = v239;
    *(float *)(v242 + 24) = v240;
    *(_QWORD *)(v242 + 32) = 0;
    *(_DWORD *)(v242 + 40) = 0;
    *(float *)(v242 + 48) = v238;
    *(float *)(v242 + 52) = v239;
    *(float *)(v242 + 56) = v240;
    *(float *)(v242 + 12) = -(float)(v241 + (float)(v76 * v237));
    *(float *)(v242 + 16) = v238;
    *(_WORD *)(v242 + 76) |= 0x50u;
    v26 &= ~0x10u;
  }
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v282, &v296, (float *)&v290, &v279, v26 & 7, v26 >> 3, (float *)&v308, (float *)&v306);
  v249 = *((float *)&v308 + 2) + a6[3].f32[0];
  *a9 = vadd_f32(*(float32x2_t *)&v308, a6[2]);
  a9[1].f32[0] = v249;
  v250 = v307 + a7[3].f32[0];
  *a10 = vadd_f32(v306, a7[2]);
  a10[1].f32[0] = v250;
  return -858993459 * ((unint64_t)(v283 - v282) >> 4);
}

void D6JointProject(uint64_t a1, float *a2, float *a3, int a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;
  float v32;
  uint64_t v33;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  __int128 v131;
  BOOL v132;
  float v133[7];
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  uint64_t v148;
  int v149;

  physx::Ext::joint::computeJointFrames(&v141, &v134, (float *)a1, a2, a3);
  v9 = v141;
  v8 = v142;
  v11 = v143;
  v10 = v144;
  v114 = v145;
  v115 = v138;
  v12 = (float)(v138 - v114) + (float)(v138 - v114);
  v13 = (float)(v139 - v146) + (float)(v139 - v146);
  v14 = (float)(v140 - v147) + (float)(v140 - v147);
  v15 = (float)(v10 * v10) + -0.5;
  v16 = (float)((float)-(float)(v142 * v13) - (float)(v141 * v12)) - (float)(v143 * v14);
  v17 = (float)((float)(v144 * (float)((float)(v143 * v13) - (float)(v142 * v14))) + (float)(v12 * v15))
      - (float)(v141 * v16);
  v18 = (float)((float)(v144 * (float)((float)(v141 * v14) - (float)(v143 * v12))) + (float)(v13 * v15))
      - (float)(v142 * v16);
  v113 = v15;
  v19 = (float)((float)(v144 * (float)((float)(v142 * v12) - (float)(v141 * v13))) + (float)(v14 * v15))
      - (float)(v143 * v16);
  v20 = (float)((float)((float)(v144 * v134) - (float)(v141 * v137)) - (float)(v142 * v136)) + (float)(v135 * v143);
  v21 = (float)((float)((float)(v144 * v135) - (float)(v142 * v137)) - (float)(v143 * v134)) + (float)(v136 * v141);
  v22 = (float)((float)((float)(v144 * v136) - (float)(v143 * v137)) - (float)(v141 * v135)) + (float)(v134 * v142);
  v116 = v134;
  v117 = v135;
  v118 = v137;
  v119 = v136;
  v23 = (float)((float)((float)(v141 * v134) + (float)(v144 * v137)) + (float)(v142 * v135)) + (float)(v143 * v136);
  v133[0] = v20;
  v133[1] = v21;
  v133[2] = v22;
  v133[3] = v23;
  v133[4] = v17;
  v133[5] = v18;
  v133[6] = v19;
  v24 = *(_DWORD *)(a1 + 452);
  v124 = v18;
  v125 = v17;
  if ((v24 & 1) != 0)
    v25 = v17;
  else
    v25 = 0.0;
  if ((v24 & 2) != 0)
    v26 = v18;
  else
    v26 = 0.0;
  v123 = v19;
  if ((v24 & 4) != 0)
    v27 = v19;
  else
    v27 = 0.0;
  v28 = *(float *)(a1 + 468);
  v29 = (float)((float)(v26 * v26) + (float)(v25 * v25)) + (float)(v27 * v27);
  v126 = v28 * v28;
  v127 = v27;
  v128 = v26;
  v129 = v25;
  if (v29 > (float)(v28 * v28))
  {
    v30 = 1.0 / sqrtf(v29);
    v25 = v28 * (float)(v25 * v30);
    v26 = v28 * (float)(v26 * v30);
    v27 = v28 * (float)(v27 * v30);
  }
  v120 = v27;
  v121 = v26;
  v122 = v25;
  v130 = v29;
  v31 = v24 >> 3;
  v32 = cosf(*(float *)(a1 + 472) * 0.5);
  v132 = 0;
  switch(v31)
  {
    case 0u:
    case 1u:
    case 2u:
    case 4u:
      *(_QWORD *)&v131 = __PAIR64__(LODWORD(v21), LODWORD(v20));
      *((_QWORD *)&v131 + 1) = __PAIR64__(LODWORD(v23), LODWORD(v22));
      break;
    case 3u:
      v148 = 0;
      v149 = 1065353216;
      goto LABEL_19;
    case 5u:
      v33 = 0x3F80000000000000;
      goto LABEL_18;
    case 6u:
      v33 = 1065353216;
LABEL_18:
      v148 = v33;
      v149 = 0;
LABEL_19:
      project((float *)&v131, v133, (float *)&v148, &v132, v32);
      break;
    case 7u:
      truncate((uint64_t)&v131, (uint64_t)v133, &v132, v32);
      break;
    default:
      v131 = xmmword_2260E5D70;
      break;
  }
  if (v130 > v126 || v132)
  {
    v35 = (float)(v125 - v129) + v122;
    v36 = (float)(v124 - v128) + v121;
    v37 = (float)(v123 - v127) + v120;
    if (a4)
    {
      v38 = *(float *)(a1 + 60) * -2.0;
      v39 = *(float *)(a1 + 64) * -2.0;
      v40 = *(float *)(a1 + 68) * -2.0;
      v42 = *(float *)(a1 + 52);
      v41 = *(float *)(a1 + 56);
      v43 = (float)(v41 * v41) + -0.5;
      v44 = *(float *)(a1 + 44);
      v45 = *(float *)(a1 + 48);
      v46 = (float)((float)(v39 * v45) + (float)(v44 * v38)) + (float)(v42 * v40);
      v47 = (float)((float)(v38 * v43) - (float)((float)((float)(v45 * v40) - (float)(v42 * v39)) * v41))
          + (float)(v44 * v46);
      v48 = (float)((float)(v39 * v43) - (float)((float)((float)(v42 * v38) - (float)(v44 * v40)) * v41))
          + (float)(v45 * v46);
      v49 = (float)((float)(v40 * v43) - (float)((float)((float)(v44 * v39) - (float)(v45 * v38)) * v41))
          + (float)(v42 * v46);
      v50 = v47 + v47;
      v51 = v49 + v49;
      v52 = (float)(*((float *)&v131 + 3) * *((float *)&v131 + 3)) + -0.5;
      v53 = (float)((float)(*((float *)&v131 + 1) * (float)(v48 + v48)) + (float)(*(float *)&v131 * (float)(v47 + v47)))
          + (float)(*((float *)&v131 + 2) * v51);
      v54 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 1) * v51)
                                  - (float)(*((float *)&v131 + 2) * (float)(v48 + v48))))
                  + (float)((float)(v47 + v47) * v52))
          + (float)(*(float *)&v131 * v53);
      v55 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 2) * (float)(v47 + v47)) - (float)(*(float *)&v131 * v51)))
                  + (float)((float)(v48 + v48) * v52))
          + (float)(*((float *)&v131 + 1) * v53);
      v56 = v37
          + (float)((float)((float)(*((float *)&v131 + 3)
                                  * (float)((float)(*(float *)&v131 * (float)(v48 + v48))
                                          - (float)(*((float *)&v131 + 1) * v50)))
                          + (float)(v51 * v52))
                  + (float)(*((float *)&v131 + 2) * v53));
      v57 = (float)((float)((float)(*(float *)&v131 * v41) - (float)(*((float *)&v131 + 3) * v44))
                  - (float)(*((float *)&v131 + 1) * v42))
          + (float)(v45 * *((float *)&v131 + 2));
      v58 = (float)((float)((float)(*((float *)&v131 + 1) * v41) - (float)(*((float *)&v131 + 3) * v45))
                  - (float)(*((float *)&v131 + 2) * v44))
          + (float)(v42 * *(float *)&v131);
      v59 = (float)((float)((float)(*((float *)&v131 + 2) * v41) - (float)(*((float *)&v131 + 3) * v42))
                  - (float)(*(float *)&v131 * v45))
          + (float)(v44 * *((float *)&v131 + 1));
      v60 = (float)((float)((float)(*(float *)&v131 * v44) + (float)(*((float *)&v131 + 3) * v41))
                  + (float)(*((float *)&v131 + 1) * v45))
          + (float)(*((float *)&v131 + 2) * v42);
      v61 = (float)(v35 + v54) + (float)(v35 + v54);
      v62 = (float)(v36 + v55) + (float)(v36 + v55);
      v63 = v56 + v56;
      v64 = (float)((float)(v8 * v62) + (float)(v9 * v61)) + (float)(v11 * (float)(v56 + v56));
      v65 = (float)((float)(v10 * (float)((float)(v62 * (float)-v11) + (float)(v8 * v63))) + (float)(v61 * v113))
          + (float)(v9 * v64);
      v66 = (float)((float)(v10 * (float)((float)(v63 * (float)-v9) + (float)(v11 * v61))) + (float)(v62 * v113))
          + (float)(v8 * v64);
      v67 = (float)((float)(v10 * (float)((float)(v61 * (float)-v8) + (float)(v9 * v62))) + (float)(v63 * v113))
          + (float)(v11 * v64);
      v68 = v114 + v65;
      v69 = v146 + v66;
      v70 = v147 + v67;
      v71 = (float)((float)((float)(v9 * v60) + (float)(v10 * v57)) + (float)(v8 * v59)) - (float)(v58 * v11);
      v72 = (float)((float)((float)(v8 * v60) + (float)(v10 * v58)) + (float)(v11 * v57)) - (float)(v59 * v9);
      v73 = (float)((float)((float)(v11 * v60) + (float)(v10 * v59)) + (float)(v9 * v58)) - (float)(v57 * v8);
      v74 = (float)((float)((float)(v57 * (float)-v9) + (float)(v10 * v60)) + (float)((float)-v8 * v58))
          + (float)((float)-v11 * v59);
      *a3 = v71;
      a3[1] = v72;
      a3[2] = v73;
      a3[3] = v74;
      a3[4] = v68;
      a3[5] = v69;
      a3[6] = v70;
      v75 = sqrtf((float)((float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73)) + (float)(v74 * v74));
      if (v75 != 0.0)
      {
        *a3 = v71 / v75;
        a3[1] = v72 / v75;
        a3[2] = v73 / v75;
        a3[3] = v74 / v75;
      }
    }
    else
    {
      v76 = *(float *)(a1 + 32) * -2.0;
      v77 = *(float *)(a1 + 36) * -2.0;
      v78 = *(float *)(a1 + 40) * -2.0;
      v80 = *(float *)(a1 + 24);
      v79 = *(float *)(a1 + 28);
      v81 = (float)(v79 * v79) + -0.5;
      v82 = *(float *)(a1 + 16);
      v83 = *(float *)(a1 + 20);
      v84 = (float)((float)(v77 * v83) + (float)(v82 * v76)) + (float)(v80 * v78);
      v85 = (float)((float)(v76 * v81) - (float)((float)((float)(v83 * v78) - (float)(v80 * v77)) * v79))
          + (float)(v82 * v84);
      v86 = (float)((float)(v77 * v81) - (float)((float)((float)(v80 * v76) - (float)(v82 * v78)) * v79))
          + (float)(v83 * v84);
      v87 = (float)((float)((float)(v78 * v81) - (float)((float)((float)(v82 * v77) - (float)(v83 * v76)) * v79))
                  + (float)(v80 * v84))
          - v37;
      v88 = (float)(v85 - v35) + (float)(v85 - v35);
      v89 = (float)(v86 - v36) + (float)(v86 - v36);
      v90 = v87 + v87;
      v91 = (float)(*((float *)&v131 + 3) * *((float *)&v131 + 3)) + -0.5;
      v92 = (float)((float)-(float)(*((float *)&v131 + 1) * v89) - (float)(*(float *)&v131 * v88))
          - (float)(*((float *)&v131 + 2) * v90);
      v93 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 2) * v89) - (float)(*((float *)&v131 + 1) * v90)))
                  + (float)(v88 * v91))
          - (float)(*(float *)&v131 * v92);
      v94 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*(float *)&v131 * v90) - (float)(*((float *)&v131 + 2) * v88)))
                  + (float)(v89 * v91))
          - (float)(*((float *)&v131 + 1) * v92);
      v95 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 1) * v88) - (float)(*(float *)&v131 * v89)))
                  + (float)(v90 * v91))
          - (float)(*((float *)&v131 + 2) * v92);
      v96 = (float)((float)((float)-(float)(*(float *)&v131 * v79) - (float)(*((float *)&v131 + 3) * v82))
                  + (float)(*((float *)&v131 + 1) * v80))
          - (float)(v83 * *((float *)&v131 + 2));
      v97 = (float)((float)((float)-(float)(*((float *)&v131 + 1) * v79) - (float)(*((float *)&v131 + 3) * v83))
                  + (float)(*((float *)&v131 + 2) * v82))
          - (float)(v80 * *(float *)&v131);
      v98 = (float)((float)((float)-(float)(*((float *)&v131 + 2) * v79) - (float)(*((float *)&v131 + 3) * v80))
                  + (float)(*(float *)&v131 * v83))
          - (float)(v82 * *((float *)&v131 + 1));
      v99 = (float)((float)((float)(*((float *)&v131 + 3) * v79) - (float)(v82 * *(float *)&v131))
                  - (float)(*((float *)&v131 + 1) * v83))
          - (float)(*((float *)&v131 + 2) * v80);
      v100 = v95 + v95;
      v101 = (float)(v118 * v118) + -0.5;
      v102 = (float)((float)(v117 * (float)(v94 + v94)) + (float)(v116 * (float)(v93 + v93)))
           + (float)(v119 * (float)(v95 + v95));
      v103 = (float)((float)(v118 * (float)((float)(v119 * (float)(v93 + v93)) - (float)(v116 * v100)))
                   + (float)((float)(v94 + v94) * v101))
           + (float)(v117 * v102);
      v104 = (float)((float)(v118 * (float)((float)(v116 * (float)(v94 + v94)) - (float)(v117 * (float)(v93 + v93))))
                   + (float)(v100 * v101))
           + (float)(v119 * v102);
      v105 = v115
           + (float)((float)((float)(v118 * (float)((float)(v117 * v100) - (float)(v119 * (float)(v94 + v94))))
                           + (float)((float)(v93 + v93) * v101))
                   + (float)(v116 * v102));
      v106 = v139 + v103;
      v107 = v140 + v104;
      v108 = (float)((float)((float)(v116 * v99) + (float)(v118 * v96)) + (float)(v117 * v98)) - (float)(v97 * v119);
      v109 = (float)((float)((float)(v117 * v99) + (float)(v118 * v97)) + (float)(v119 * v96)) - (float)(v98 * v116);
      v110 = (float)((float)((float)(v119 * v99) + (float)(v118 * v98)) + (float)(v116 * v97)) - (float)(v96 * v117);
      v111 = (float)((float)((float)(v118 * v99) - (float)(v116 * v96)) - (float)(v117 * v97)) - (float)(v119 * v98);
      *a2 = v108;
      a2[1] = v109;
      a2[2] = v110;
      a2[3] = v111;
      a2[4] = v105;
      a2[5] = v106;
      a2[6] = v107;
      v112 = sqrtf((float)((float)((float)(v109 * v109) + (float)(v108 * v108)) + (float)(v110 * v110))+ (float)(v111 * v111));
      if (v112 != 0.0)
      {
        *a2 = v108 / v112;
        a2[1] = v109 / v112;
        a2[2] = v110 / v112;
        a2[3] = v111 / v112;
      }
    }
  }
}

void D6JointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  float *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  BOOL v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  unsigned int v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  _BOOL8 v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  __n128 v147;
  float v148;
  float v149;
  uint64_t v150;
  float *v151;
  int v152;
  char v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  uint64_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  __int128 v168;
  float v169;
  float v170;
  float v171;
  __int128 v172;
  uint64_t v173;
  int v174;
  __int128 v175;
  uint64_t v176;
  int v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182[3];
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210[7];
  float v211[3];
  float v212[3];
  float v213[3];

  v8 = physx::Ext::joint::computeJointFrames(&v203, &v196, (float *)a2, a3, a4);
  if ((a5 & 1) != 0)
    (*(void (**)(uint64_t, float *, float *, float))(*(_QWORD *)a1 + 16))(a1, &v203, &v196, v8);
  if ((a5 & 2) == 0)
    return;
  v10 = v203;
  v9 = v204;
  v11 = v205;
  v12 = (float)(v200 - v207) + (float)(v200 - v207);
  v13 = (float)(v201 - v208) + (float)(v201 - v208);
  v14 = (float)(v202 - v209) + (float)(v202 - v209);
  v15 = (float)(v206 * v206) + -0.5;
  v16 = (float)((float)-(float)(v204 * v13) - (float)(v203 * v12)) - (float)(v205 * v14);
  v17 = (float)((float)(v206 * (float)((float)(v205 * v13) - (float)(v204 * v14))) + (float)(v12 * v15))
      - (float)(v203 * v16);
  v18 = (float)((float)(v206 * (float)((float)(v203 * v14) - (float)(v205 * v12))) + (float)(v13 * v15))
      - (float)(v204 * v16);
  v19 = (float)((float)(v206 * (float)((float)(v204 * v12) - (float)(v203 * v13))) + (float)(v14 * v15))
      - (float)(v205 * v16);
  v21 = v198;
  v20 = v199;
  v23 = v196;
  v22 = v197;
  v189 = (float)((float)((float)(v206 * v196) - (float)(v203 * v199)) - (float)(v204 * v198)) + (float)(v197 * v205);
  v190 = (float)((float)((float)(v206 * v197) - (float)(v204 * v199)) - (float)(v205 * v196)) + (float)(v198 * v203);
  v191 = (float)((float)((float)(v206 * v198) - (float)(v205 * v199)) - (float)(v203 * v197)) + (float)(v196 * v204);
  v192 = (float)((float)((float)(v203 * v196) + (float)(v206 * v199)) + (float)(v204 * v197)) + (float)(v205 * v198);
  v193 = v17;
  v194 = v18;
  v195 = v19;
  v24 = v9 + v9;
  v25 = v11 + v11;
  v26 = v9 * (float)(v9 + v9);
  v27 = v11 * (float)(v11 + v11);
  v28 = (float)(v10 + v10) * v204;
  v29 = (float)(v10 + v10) * v205;
  v30 = (float)(v10 + v10) * v206;
  v31 = v24 * v205;
  v32 = v24 * v206;
  v33 = v25 * v206;
  v34 = (float)(1.0 - v26) - v27;
  v35 = v28 + v33;
  v36 = v29 - v32;
  v182[0] = v34;
  v182[1] = v28 + v33;
  v37 = v28 - v33;
  v38 = 1.0 - (float)(v10 * (float)(v10 + v10));
  v39 = v38 - v27;
  v40 = v31 + v30;
  v182[2] = v29 - v32;
  v183 = v37;
  v184 = v39;
  v185 = v31 + v30;
  v41 = v29 + v32;
  v42 = v31 - v30;
  v43 = v38 - v26;
  v186 = v41;
  v187 = v31 - v30;
  v188 = v43;
  if (*(_BYTE *)(a2 + 477))
  {
    v44 = &v186;
    switch(*(_DWORD *)(a2 + 456))
    {
      case 1:
        v45 = (float *)(a2 + 128);
        v46 = v182;
        v47 = a1;
        goto LABEL_10;
      case 2:
        v45 = (float *)(a2 + 156);
        v47 = a1;
        v46 = &v183;
        v17 = v18;
        goto LABEL_10;
      case 3:
        v48 = (float *)(a2 + 128);
        v49 = (float *)(a2 + 156);
        v50 = v182;
        v51 = a1;
        v44 = &v183;
        v19 = v18;
        goto LABEL_13;
      case 4:
        v45 = (float *)(a2 + 184);
        v47 = a1;
        v46 = &v186;
        v17 = v19;
LABEL_10:
        visualizeLine(v47, &v207, v46, v45, v17);
        break;
      case 5:
        v48 = (float *)(a2 + 128);
        v49 = (float *)(a2 + 184);
        v50 = v182;
        v51 = a1;
        goto LABEL_13;
      case 6:
        v48 = (float *)(a2 + 156);
        v49 = (float *)(a2 + 184);
        v51 = a1;
        v50 = &v183;
        v17 = v18;
LABEL_13:
        visualizeQuad(v51, &v207, v50, v48, v44, v49, v17, v19);
        break;
      case 7:
        if (*(float *)(a2 + 140) <= 0.0 && *(float *)(a2 + 136) <= 0.0)
          v52 = *(float *)(a2 + 144);
        else
          v52 = 0.0;
        if (*(float *)(a2 + 168) <= 0.0 && *(float *)(a2 + 164) <= 0.0)
          v53 = *(float *)(a2 + 172);
        else
          v53 = 0.0;
        v54 = *(float *)(a2 + 148);
        v55 = *(float *)(a2 + 152);
        v56 = *(float *)(a2 + 176);
        v57 = *(float *)(a2 + 180);
        if (*(float *)(a2 + 196) <= 0.0 && *(float *)(a2 + 192) <= 0.0)
          v58 = *(float *)(a2 + 200);
        else
          v58 = 0.0;
        v59 = v53 + v57;
        v60 = v56 - v53;
        v61 = *(float *)(a2 + 204);
        v62 = *(float *)(a2 + 208);
        v67 = (float)(v61 - v58) >= v19
           && (float)(v58 + v62) <= v19
           && v60 >= v18
           && v59 <= v18
           && (float)(v54 - v52) >= v17
           && (float)(v52 + v55) <= v17;
        v68 = v34 * v55;
        v69 = v35 * v55;
        v70 = v36 * v55;
        v71 = v34 * v54;
        v72 = v35 * v54;
        v73 = v36 * v54;
        v74 = v37 * v57;
        v75 = v39 * v57;
        v76 = v40 * v57;
        v77 = v37 * v56;
        v78 = v39 * v56;
        v79 = v41 * v62;
        v80 = v42 * v62;
        v81 = v43 * v62;
        v82 = v207 + v68;
        v83 = v208 + v69;
        v84 = v209 + v70;
        if (v67)
          v85 = 0xFFFFFFLL;
        else
          v85 = 16711680;
        v86 = v82 + v74;
        v87 = v83 + v75;
        v88 = v84 + v76;
        *(float *)&v175 = (float)(v82 + v74) + v79;
        *((float *)&v175 + 1) = (float)(v83 + v75) + v80;
        *((float *)&v175 + 2) = (float)(v84 + v76) + v81;
        v89 = v207 + v71;
        v90 = v208 + v72;
        v91 = v209 + v73;
        v92 = v89 + v74;
        v93 = v90 + v75;
        v94 = v91 + v76;
        *(float *)&v172 = (float)(v89 + v74) + v79;
        *((float *)&v172 + 1) = (float)(v90 + v75) + v80;
        *((float *)&v172 + 2) = (float)(v91 + v76) + v81;
        v95 = v89 + v77;
        v96 = v90 + v78;
        *(float *)&v168 = v95 + v79;
        *((float *)&v168 + 1) = v96 + v80;
        v97 = v40 * v56;
        v98 = v41 * v61;
        v99 = v42 * v61;
        v100 = v43 * v61;
        v101 = v91 + v97;
        *((float *)&v168 + 2) = v101 + v81;
        v102 = v82 + v77;
        v103 = v83 + v78;
        v104 = v84 + v97;
        v210[0] = v102 + v79;
        v210[1] = v103 + v80;
        v210[2] = v104 + v81;
        v178 = v86 + v98;
        v179 = v87 + v99;
        v180 = v88 + v100;
        v213[0] = v92 + v98;
        v213[1] = v93 + v99;
        v213[2] = v94 + v100;
        v212[0] = v95 + v98;
        v212[1] = v96 + v99;
        v212[2] = v101 + v100;
        v211[0] = v102 + v98;
        v211[1] = v103 + v99;
        v211[2] = v104 + v100;
        (*(void (**)(uint64_t, __int128 *, __int128 *, uint64_t, float *))(*(_QWORD *)a1 + 56))(a1, &v175, &v172, v85, &v186);
        (*(void (**)(uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v172, &v168, v85);
        (*(void (**)(uint64_t, __int128 *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v168, v210, v85);
        (*(void (**)(uint64_t, float *, __int128 *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v210, &v175, v85);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v178, v213, v85);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v213, v212, v85);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v212, v211, v85);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v211, &v178, v85);
        (*(void (**)(uint64_t, __int128 *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v175, &v178, v85);
        (*(void (**)(uint64_t, __int128 *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v172, v213, v85);
        (*(void (**)(uint64_t, __int128 *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v168, v212, v85);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v210, v211, v85);
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a2 + 476))
  {
    v105 = computeLimitedDistance(*(_DWORD *)(a2 + 456), (uint64_t)&v189, (uint64_t)v182, (float32x2_t *)&v175);
    if (v105 > *(float *)(a2 + 464))
    {
      if (v105 <= *(float *)(a2 + 124))
        v106 = 65280;
      else
        v106 = 16711680;
      (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v207, &v200, v106);
    }
  }
  if (v189 == 0.0)
  {
    v110 = 1.0;
    v108 = 0.0;
    v109 = 0.0;
  }
  else
  {
    v107 = sqrtf((float)((float)(v189 * v189) + 0.0) + (float)(v192 * v192));
    v108 = v189 / v107;
    v109 = 0.0 / v107;
    v110 = v192 / v107;
  }
  v111 = (float)((float)((float)(v110 * v190) - (float)(v192 * v109)) - (float)(v191 * v108)) + (float)(v109 * v189);
  v112 = (float)((float)((float)(v110 * v191) - (float)(v192 * v109)) - (float)(v189 * v109)) + (float)(v108 * v190);
  v113 = (float)((float)((float)(v189 * v108) + (float)(v192 * v110)) + (float)(v190 * v109)) + (float)(v191 * v109);
  v178 = (float)((float)((float)(v189 * v110) - (float)(v192 * v108)) - (float)(v190 * v109)) + (float)(v109 * v191);
  v179 = v111;
  v180 = v112;
  v181 = v113;
  v114 = *(_DWORD *)(a2 + 456);
  if ((v114 & 8) != 0)
  {
    v115 = sqrtf((float)((float)((float)(v109 * v109) + (float)(v108 * v108)) + (float)(v109 * v109)) + (float)(v110 * v110));
    if (v115 != 0.0)
    {
      v108 = v108 / v115;
      v110 = v110 / v115;
    }
    if (v110 < -1.0)
      v110 = -1.0;
    if (v110 > 1.0)
      v110 = 1.0;
    v116 = acosf(v110);
    v117 = v116 + v116;
    if (v108 >= 0.0)
      v118 = v117;
    else
      v118 = -v117;
    if (*(float *)(a2 + 224) <= 0.0 && *(float *)(a2 + 220) <= 0.0)
      v119 = *(float *)(a2 + 228);
    else
      v119 = 0.0;
    v120 = (float)(*(float *)(a2 + 236) + v119) > v118 || (float)(*(float *)(a2 + 232) - v119) < v118;
    (*(void (**)(uint64_t, float *, _BOOL8))(*(_QWORD *)a1 + 32))(a1, &v203, v120);
    v114 = *(_DWORD *)(a2 + 456);
  }
  if ((~v114 & 0x30) != 0)
  {
    if (((v114 >> 5) & 1) == (v114 & 0x10) >> 4)
      return;
    v122 = (float)(v23 + v23) * v21;
    v123 = v20 * (float)(v22 + v22);
    v124 = v20 * (float)(v21 + v21);
    v125 = (float)(1.0 - (float)(v22 * (float)(v22 + v22))) - (float)(v21 * (float)(v21 + v21));
    v126 = (float)((float)(v23 + v23) * v22) + v124;
    v127 = v122 - v123;
    v175 = xmmword_2261AB230;
    v176 = 0;
    v177 = 0;
    v172 = xmmword_2261A9340;
    v173 = 0;
    v174 = 0;
    v128 = *(_DWORD *)(a2 + 452);
    if ((v114 & 0x10) != 0)
    {
      if ((v128 & 0x20) == 0)
      {
        if (*(_BYTE *)(a2 + 479))
          return;
        v136 = (float)(v206 * v206) + -0.5;
        v137 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
        v138 = v207
             + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v136 * 0.0))
                     + (float)(v203 * v137));
        v139 = v208
             + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v136 * 0.0))
                     + (float)(v204 * v137));
        v140 = v209
             + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v136 * 0.0))
                     + (float)(v205 * v137));
        physx::PxQuat::operator*(&v203, (float *)&v172, v210);
        v168 = *(_OWORD *)v210;
        v169 = v138;
        v170 = v139;
        v171 = v140;
        v134 = (float)((float)(v126 * v187) + (float)(v186 * v125)) + (float)(v188 * v127);
        v135 = *(float *)(a2 + 260);
LABEL_85:
        visualizeDoubleCone(a1, (float *)a2, (uint64_t)&v168, v134, v135);
        return;
      }
      if (*(_BYTE *)(a2 + 479))
      {
        v150 = a1;
        v151 = (float *)a2;
        v152 = 1;
        v153 = 0;
        goto LABEL_91;
      }
      v163 = (float)(v206 * v206) + -0.5;
      v164 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
      v165 = v207
           + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v163 * 0.0))
                   + (float)(v203 * v164));
      v166 = v208
           + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v163 * 0.0))
                   + (float)(v204 * v164));
      v167 = v209
           + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v163 * 0.0))
                   + (float)(v205 * v164));
      physx::PxQuat::operator*(&v203, (float *)&v175, v210);
      v168 = *(_OWORD *)v210;
      v169 = v165;
      v170 = v166;
      v171 = v167;
      v159 = *(float *)(a2 + 260);
      v160 = *(float *)(a2 + 256);
      v161 = a1;
      v162 = v111;
    }
    else
    {
      if ((v128 & 0x10) == 0)
      {
        if (*(_BYTE *)(a2 + 479))
          return;
        v129 = (float)(v206 * v206) + -0.5;
        v130 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
        v131 = v207
             + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v129 * 0.0))
                     + (float)(v203 * v130));
        v132 = v208
             + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v129 * 0.0))
                     + (float)(v204 * v130));
        v133 = v209
             + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v129 * 0.0))
                     + (float)(v205 * v130));
        physx::PxQuat::operator*(&v203, (float *)&v175, v210);
        v168 = *(_OWORD *)v210;
        v169 = v131;
        v170 = v132;
        v171 = v133;
        v134 = (float)((float)(v126 * v184) + (float)(v183 * v125)) + (float)(v185 * v127);
        v135 = *(float *)(a2 + 264);
        goto LABEL_85;
      }
      if (*(_BYTE *)(a2 + 479))
      {
        v150 = a1;
        v151 = (float *)a2;
        v152 = 0;
        goto LABEL_90;
      }
      v154 = (float)(v206 * v206) + -0.5;
      v155 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
      v156 = v207
           + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v154 * 0.0))
                   + (float)(v203 * v155));
      v157 = v208
           + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v154 * 0.0))
                   + (float)(v204 * v155));
      v158 = v209
           + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v154 * 0.0))
                   + (float)(v205 * v155));
      physx::PxQuat::operator*(&v203, (float *)&v172, v210);
      v168 = *(_OWORD *)v210;
      v169 = v156;
      v170 = v157;
      v171 = v158;
      v159 = *(float *)(a2 + 264);
      v160 = *(float *)(a2 + 256);
      v161 = a1;
      v162 = v112;
    }
    visualizeAngularLimit(v161, (uint64_t)&v168, v160, v162, v113, v159);
    return;
  }
  if (*(_BYTE *)(a2 + 478))
  {
    if (*(float *)(a2 + 252) <= 0.0 && *(float *)(a2 + 248) <= 0.0)
      v121 = *(float *)(a2 + 256);
    else
      v121 = 0.0;
    v141 = v113 + 1.0;
    v142 = atan2f(v112, v141) * 4.0;
    v143 = atan2f(v111, v141) * 4.0;
    v144 = *(float *)(a2 + 260);
    v145 = *(float *)(a2 + 264);
    v146 = tanf(v145 * 0.25);
    v147.n128_u32[0] = tanf(v144 * 0.25);
    v148 = fabsf(v143);
    v149 = fabsf(v142);
    (*(void (**)(uint64_t, float *, BOOL, float, __n128))(*(_QWORD *)a1 + 40))(a1, &v203, (float)((float)((float)((float)(v121 + v149) / v145) * (float)((float)(v121 + v149) / v145))+ (float)((float)((float)(v121 + v148) / v144) * (float)((float)(v121 + v148) / v144))) > 1.0, v146, v147);
  }
  if (*(_BYTE *)(a2 + 479))
  {
    v150 = a1;
    v151 = (float *)a2;
    v152 = 1;
LABEL_90:
    v153 = 1;
LABEL_91:
    drawPyramid(v150, v151, &v203, &v178, v152, v153);
  }
}

void physx::PxDefaultErrorCallback::~PxDefaultErrorCallback(physx::PxDefaultErrorCallback *this)
{
  JUMPOUT(0x2276933B8);
}

void physx::PxDefaultErrorCallback::reportError(uint64_t a1, int a2, const char *a3, const char *a4, int a5)
{
  const char *v6;
  timespec __rmtp;
  char v8[1024];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2 > 15)
  {
    if (a2 > 63)
    {
      if (a2 == 64)
      {
        v6 = "abort";
      }
      else
      {
        if (a2 != 128)
          return;
        v6 = "performance warning";
      }
    }
    else if (a2 == 16)
    {
      v6 = "out of memory";
    }
    else
    {
      if (a2 != 32)
        return;
      v6 = "internal error";
    }
LABEL_17:
    sprintf(v8, "%s (%d) : %s : %s\n", a4, a5, v6, a3);
    puts(v8);
    if (a2 == 64)
    {
      while (1)
      {
        puts(v8);
        __rmtp = (timespec)xmmword_2261ABCE0;
        while (nanosleep(&__rmtp, &__rmtp) == -1)
          ;
      }
    }
  }
  else
  {
    v6 = "no error";
    switch(a2)
    {
      case -1:
        v6 = "unknown error";
        goto LABEL_17;
      case 0:
        goto LABEL_17;
      case 1:
        v6 = "info";
        goto LABEL_17;
      case 2:
        v6 = "warning";
        goto LABEL_17;
      case 4:
        v6 = "invalid parameter";
        goto LABEL_17;
      case 8:
        v6 = "invalid operation";
        goto LABEL_17;
      default:
        return;
    }
  }
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96));
}

const char *physx::PxD6Joint::getConcreteTypeName(physx::PxD6Joint *this)
{
  return "PxD6Joint";
}

void physx::Ext::D6Joint::~D6Joint(physx::Ext::D6Joint *this)
{
  *(_QWORD *)this = &off_24ED979A8;
  *((_QWORD *)this + 3) = &unk_24ED97BC0;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
}

{
  *(_QWORD *)this = &off_24ED979A8;
  *((_QWORD *)this + 3) = &unk_24ED97BC0;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
  (*(void (**)(uint64_t, physx::Ext::D6Joint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL physx::PxD6Joint::isKindOf(physx::PxD6Joint *this, const char *a2)
{
  return !strcmp("PxD6Joint", a2) || physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 64))(*(_QWORD *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  v6 = v43;
  v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  v10 = (float)(v44 * v44) + -0.5;
  v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  v16 = *(float *)(a1 + 48);
  v15 = *(float *)(a1 + 52);
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  v21 = v13 - (float)(v42 * v11);
  v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  v27 = (float)(v44 * v44) + -0.5;
  v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  v33 = *(float *)(a1 + 76);
  v32 = *(float *)(a1 + 80);
  v34 = *(float *)(a1 + 68);
  v35 = *(float *)(a1 + 72);
  v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActors(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  v9 = *a3 / v8;
  v10 = v5 / v8;
  v11 = v6 / v8;
  v12 = v7 / v8;
  v13 = a3[4];
  v14 = a3[5];
  v15 = a3[6];
  v16 = 28 * a2;
  v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  v38 = 0;
  v39[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  v18 = (float)(v13 - v35) + (float)(v13 - v35);
  v19 = (float)(v14 - v36) + (float)(v14 - v36);
  v20 = (float)(v15 - v37) + (float)(v15 - v37);
  v21 = (float)(v34 * v34) + -0.5;
  v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  v29 = (float *)(*(_QWORD *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 56);
  result = *(float *)(v3 + 64);
  *(float *)(a3 + 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float result;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v73, &v72);
  v4 = 1.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v73 + 152))(&v66);
    v5 = 0.0;
    v4 = 1.0;
    v10 = *((float *)&v66 + 1);
    v11 = *(float *)&v66;
    v9 = v67;
    v12 = v68;
    v8 = v69;
    v7 = v70;
    v6 = v71;
  }
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = *(float *)(a1 + 64);
  v16 = *(float *)(a1 + 48);
  v17 = *(float *)(a1 + 52);
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = *(float *)(a1 + 40);
  v22 = *(float *)(a1 + 44);
  v23 = 0.0;
  v24 = 0.0;
  if (v72)
  {
    v64 = v7;
    v65 = v8;
    v62 = *(float *)(a1 + 56);
    v63 = v6;
    v60 = *(float *)(a1 + 64);
    v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v72 + 152))(&v66);
    v15 = v60;
    v14 = v61;
    v13 = v62;
    v6 = v63;
    v7 = v64;
    v8 = v65;
    v23 = *((float *)&v66 + 1);
    v24 = *(float *)&v66;
    v20 = v67;
    v4 = v68;
    v19 = v69;
    v18 = v70;
    v5 = v71;
  }
  v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  v29 = v15 + v15;
  v30 = v14 + v14;
  v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  v32 = (float)(v12 * v12) + -0.5;
  v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v39 = (float)(v4 * v4) + -0.5;
  v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  v45 = *(float *)(a1 + 76);
  v44 = *(float *)(a1 + 80);
  v46 = *(float *)(a1 + 68);
  v47 = *(float *)(a1 + 72);
  v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  v52 = (float)(v41 - v35) + (float)(v41 - v35);
  v53 = (float)(v42 - v34) + (float)(v42 - v34);
  v54 = (float)(v43 - v33) + (float)(v43 - v33);
  v55 = (float)(v25 * v25) + -0.5;
  v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44[3];
  float v45;
  float v46;
  float v47;
  float v48[3];
  _WORD *v49;
  _WORD *v50;

  v49 = 0;
  v50 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  v7 = (float)(v37 * v37) + -0.5;
  v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v15 = (float)(v33 * v33) + -0.5;
  v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  v20 = (float)(v46 * v11) - (float)(v47 * v10);
  v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  v24 = v22 + v22;
  v25 = (float)(v21 - v39) + (float)(v21 - v39);
  v26 = v23 + v23;
  v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BYTE v21[12];
  float v22;
  float v23;
  float v24;
  _BYTE v25[12];
  _WORD *v26;
  _WORD *v27;

  v26 = 0;
  v27 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  v6 = (float)(v14 * v14) + -0.5;
  v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 120))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 128))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  __int16 v4;

  v2 = *(_QWORD *)(a1 + 96);
  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 96));
  v5 = 0;
  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v6, &v5);
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  v4 = 28 * a2;
  v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  v8 = (float)(v25 * v25) + -0.5;
  v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  v14 = *(float *)(a1 + v4 + 48);
  v13 = *(float *)(a1 + v4 + 52);
  v15 = *(float *)(a1 + v4 + 40);
  v16 = *(float *)(a1 + v4 + 44);
  v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  v20 = (float *)(*(_QWORD *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  uint64_t result;
  float *v5;
  uint64_t v6;
  float *v7;
  float32x2_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10[0] = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0])
      return result;
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    v6 = *(_QWORD *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    v7 = (float *)&v8[5];
  }
  *v7 = *v7 - *v5;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

void physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onConstraintRelease(_QWORD *a1)
{
  if (a1[13])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[13] = 0;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t physx::Ext::D6Joint::getPrep(physx::Ext::D6Joint *this)
{
  return physx::Ext::D6Joint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 80))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v3 = *(_QWORD *)(a1 - 24);
  v2 = a1 - 24;
  *(_QWORD *)(v2 + 104) = 0;
  return (*(uint64_t (**)(uint64_t))(v3 + 32))(v2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t `non-virtual thunk to'physx::Ext::D6Joint::getPrep(physx::Ext::D6Joint *this)
{
  return physx::Ext::D6Joint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void `non-virtual thunk to'physx::Ext::D6Joint::~D6Joint(physx::Ext::D6Joint *this)
{
  *((_QWORD *)this - 3) = &off_24ED979A8;
  *(_QWORD *)this = &unk_24ED97BC0;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
}

{
  char *v1;

  *((_QWORD *)this - 3) = &off_24ED979A8;
  v1 = (char *)this - 24;
  *(_QWORD *)this = &unk_24ED97BC0;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

BOOL physx::PxJoint::isKindOf(physx::PxJoint *this, const char *a2)
{
  return !strcmp("PxJoint", a2) || strcmp(a2, "PxBase") == 0;
}

void setupPyramidSwingLimits(uint64_t a1, float *a2, float *a3, float *a4, int a5, int a6)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;

  v10 = a4[1];
  v12 = a3[2];
  v11 = a3[3];
  v13 = a3[1];
  v15 = a4[2];
  v14 = a4[3];
  v16 = (float)((float)((float)(v11 * *a4) + (float)(v14 * *a3)) + (float)(v10 * v12)) - (float)(v13 * v15);
  v17 = (float)((float)((float)(v11 * v10) + (float)(v14 * v13)) + (float)(v15 * *a3)) - (float)(v12 * *a4);
  v18 = (float)((float)((float)(v11 * v15) + (float)(v14 * v12)) + (float)(*a4 * v13)) - (float)(*a3 * v10);
  v19 = (float)((float)((float)(v14 * v11) - (float)(*a4 * *a3)) - (float)(v10 * v13)) - (float)(v15 * v12);
  v20 = (uint64_t)(a2 + 67);
  if (a5)
  {
    v21 = atan2f(v13, v11 + 1.0) * 4.0;
    v22 = a2[72];
    v23 = v19 + v19;
    if (a2[70] <= 0.0 && a2[69] <= 0.0)
      v24 = a2[71];
    else
      v24 = 0.0;
    v25 = a2[73];
    v26 = (float)(v16 * (float)(v17 + v17)) - (float)(v18 * v23);
    v27 = (float)((float)(v19 * (float)(v19 + v19)) + -1.0) + (float)(v17 * (float)(v17 + v17));
    v28 = (float)((float)(v17 + v17) * v18) + (float)(v16 * v23);
    if ((float)(v22 + v24) > v21)
    {
      v29 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v29 + 80;
      v43 = (float)(v16 * (float)(v17 + v17)) - (float)(v18 * v23);
      *(_WORD *)(v29 + 78) = 0;
      *(_QWORD *)v29 = 0;
      *(_DWORD *)(v29 + 8) = 0;
      *(float *)(v29 + 20) = -v27;
      *(float *)(v29 + 24) = -v28;
      *(_QWORD *)(v29 + 32) = 0;
      *(_DWORD *)(v29 + 40) = 0;
      *(float *)(v29 + 48) = -v26;
      *(float *)(v29 + 52) = -v27;
      *(float *)(v29 + 56) = -v28;
      *(float *)(v29 + 12) = -(float)(v22 - v21);
      *(float *)(v29 + 16) = -v26;
      *(_WORD *)(v29 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v29, v20);
      v27 = (float)((float)(v19 * (float)(v19 + v19)) + -1.0) + (float)(v17 * (float)(v17 + v17));
      v26 = v43;
    }
    if ((float)(v25 - v24) < v21)
    {
      v30 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v30 + 80;
      *(_WORD *)(v30 + 78) = 0;
      *(_QWORD *)v30 = 0;
      *(_DWORD *)(v30 + 8) = 0;
      *(float *)(v30 + 20) = v27;
      *(float *)(v30 + 24) = v28;
      *(_QWORD *)(v30 + 32) = 0;
      *(_DWORD *)(v30 + 40) = 0;
      *(float *)(v30 + 48) = v26;
      *(float *)(v30 + 52) = v27;
      *(float *)(v30 + 56) = v28;
      *(float *)(v30 + 12) = v25 - v21;
      *(float *)(v30 + 16) = v26;
      *(_WORD *)(v30 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v30, v20);
    }
  }
  if (a6)
  {
    v31 = atan2f(a3[2], a3[3] + 1.0) * 4.0;
    v32 = a2[74];
    v33 = v19 + v19;
    v34 = v17 * (float)(v18 + v18);
    v35 = (float)(v19 * (float)(v19 + v19)) + -1.0;
    if (a2[70] <= 0.0 && a2[69] <= 0.0)
      v36 = a2[71];
    else
      v36 = 0.0;
    v37 = a2[75];
    v38 = (float)(v16 * (float)(v18 + v18)) + (float)(v17 * v33);
    v39 = v34 - (float)(v16 * v33);
    v40 = v35 + (float)(v18 * (float)(v18 + v18));
    if ((float)(v32 + v36) > v31)
    {
      v41 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v41 + 80;
      *(_WORD *)(v41 + 78) = 0;
      *(_QWORD *)v41 = 0;
      *(_DWORD *)(v41 + 8) = 0;
      *(float *)(v41 + 20) = -v39;
      *(float *)(v41 + 24) = -v40;
      *(_QWORD *)(v41 + 32) = 0;
      *(_DWORD *)(v41 + 40) = 0;
      *(float *)(v41 + 48) = -v38;
      *(float *)(v41 + 52) = -v39;
      *(float *)(v41 + 56) = -v40;
      *(float *)(v41 + 12) = -(float)(v32 - v31);
      *(float *)(v41 + 16) = -v38;
      *(_WORD *)(v41 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v41, v20);
    }
    if ((float)(v37 - v36) < v31)
    {
      v42 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v42 + 80;
      *(_WORD *)(v42 + 78) = 0;
      *(_QWORD *)v42 = 0;
      *(_DWORD *)(v42 + 8) = 0;
      *(float *)(v42 + 20) = v39;
      *(float *)(v42 + 24) = v40;
      *(_QWORD *)(v42 + 32) = 0;
      *(_DWORD *)(v42 + 40) = 0;
      *(float *)(v42 + 48) = v38;
      *(float *)(v42 + 52) = v39;
      *(float *)(v42 + 56) = v40;
      *(float *)(v42 + 12) = v37 - v31;
      *(float *)(v42 + 16) = v38;
      *(_WORD *)(v42 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v42, v20);
    }
  }
}

float computeLimitedDistance(unsigned int a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v4;
  float *v5;
  float32x2_t v6;
  float v7;
  float v8;

  v4 = 0;
  v5 = (float *)(a3 + 8);
  v6 = 0;
  v7 = 0.0;
  do
  {
    if (((a1 >> v4) & 1) != 0)
    {
      v8 = *(float *)(a2 + 16 + 4 * v4);
      v6 = vadd_f32(v6, vmul_n_f32(*(float32x2_t *)(v5 - 2), v8));
      v7 = v7 + (float)(v8 * *v5);
    }
    ++v4;
    v5 += 3;
  }
  while (v4 != 3);
  *a4 = v6;
  a4[1].f32[0] = v7;
  return sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v6, v6).i32[1]), v6.f32[0], v6.f32[0]) + (float)(v7 * v7));
}

void setupLinearLimit(uint64_t a1, float *a2, float *a3, float a4)
{
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;

  v8 = a2[5];
  v9 = a2[3];
  if (v9 <= 0.0 && a2[2] <= 0.0)
    v10 = a2[4];
  else
    v10 = 0.0;
  if ((float)(v10 + a4) > v8)
  {
    v11 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11 + 80;
    *(_WORD *)(v11 + 78) = 0;
    *(_QWORD *)v11 = *(_QWORD *)a3;
    *(float *)(v11 + 8) = a3[2];
    v13 = a3[1];
    v12 = a3[2];
    v15 = *(float *)(a1 + 20);
    v14 = *(float *)(a1 + 24);
    v16 = *(float *)(a1 + 16);
    v17 = (float)(v15 * v12) - (float)(v14 * v13);
    v18 = (float)(v14 * *a3) - (float)(v16 * v12);
    v19 = (float)(v16 * v13) - (float)(v15 * *a3);
    *(float *)(v11 + 16) = v17;
    *(float *)(v11 + 20) = v18;
    *(float *)(v11 + 24) = v19;
    *(_QWORD *)(v11 + 32) = *(_QWORD *)a3;
    *(float *)(v11 + 40) = a3[2];
    v21 = a3[1];
    v20 = a3[2];
    v23 = *(float *)(a1 + 32);
    v22 = *(float *)(a1 + 36);
    v24 = *(float *)(a1 + 28);
    v25 = (float)(v23 * v20) - (float)(v22 * v21);
    v26 = (float)(v22 * *a3) - (float)(v24 * v20);
    v27 = (float)(v24 * v21) - (float)(v23 * *a3);
    *(float *)(v11 + 48) = v25;
    *(float *)(v11 + 52) = v26;
    *(float *)(v11 + 56) = v27;
    *(float *)(v11 + 12) = v8 - a4;
    physx::Ext::joint::ConstraintHelper::addLimit(a1, v11, (uint64_t)a2);
    v9 = a2[3];
  }
  v28 = a2[6];
  if (v9 <= 0.0 && a2[2] <= 0.0)
    v29 = a2[4];
  else
    v29 = 0.0;
  if ((float)(v29 - a4) > (float)-v28)
  {
    v30 = *a3;
    v31 = a3[1];
    v32 = a3[2];
    v33 = -*a3;
    v34 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v34 + 80;
    *(_WORD *)(v34 + 78) = 0;
    *(float *)v34 = v33;
    *(float *)(v34 + 4) = -v31;
    *(float *)(v34 + 8) = -v32;
    v36 = *(float *)(a1 + 20);
    v35 = *(float *)(a1 + 24);
    v37 = *(float *)(a1 + 16);
    *(float *)(v34 + 16) = (float)(v31 * v35) + (float)(v36 * (float)-v32);
    *(float *)(v34 + 20) = (float)(v32 * v37) + (float)(v35 * v33);
    *(float *)(v34 + 24) = (float)(v30 * v36) + (float)(v37 * (float)-v31);
    *(float *)(v34 + 32) = v33;
    *(float *)(v34 + 36) = -v31;
    *(float *)(v34 + 40) = -v32;
    v39 = *(float *)(a1 + 32);
    v38 = *(float *)(a1 + 36);
    v40 = *(float *)(a1 + 28);
    *(float *)(v34 + 48) = (float)(v31 * v38) + (float)(v39 * (float)-v32);
    *(float *)(v34 + 52) = (float)(v32 * v40) + (float)(v38 * v33);
    *(float *)(v34 + 56) = (float)(v30 * v39) + (float)(v40 * (float)-v31);
    *(float *)(v34 + 12) = a4 - v28;
    physx::Ext::joint::ConstraintHelper::addLimit(a1, v34, (uint64_t)a2);
  }
}

uint64_t physx::Ext::joint::ConstraintHelper::prepareLockedAxes(uint64_t result, float *a2, float *a3, float *a4, int a5, int a6, float *a7, float *a8)
{
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;

  v8 = *(_QWORD *)(result + 8);
  v9 = *(float *)(result + 16);
  v10 = *(float *)(result + 20);
  v12 = *(float *)(result + 24);
  v11 = *(float *)(result + 28);
  v13 = *(float *)(result + 32);
  v14 = *(float *)(result + 36);
  if (a5)
  {
    v15 = *a2;
    v16 = a2[1];
    v17 = a2[2];
    v18 = a2[3];
    v19 = v15 + v15;
    v20 = v16 + v16;
    v21 = v15 * (float)(v15 + v15);
    v22 = v16 * (float)(v16 + v16);
    v23 = v17 * (float)(v17 + v17);
    v24 = v19 * v16;
    v25 = v19 * v17;
    v26 = v19 * v18;
    v27 = v20 * v17;
    v28 = v20 * v18;
    v29 = (float)(v17 + v17) * v18;
    v30 = (float)(1.0 - v22) - v23;
    v31 = v24 + v29;
    v32 = v25 - v28;
    v33 = 1.0 - v21;
    v34 = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    if ((a5 & 1) != 0)
    {
      v34 = 0.0 - (float)(v30 * *a4);
      v35 = 0.0 - (float)(v31 * *a4);
      v36 = 0.0 - (float)(v32 * *a4);
    }
    v37 = v24 - v29;
    v38 = v33 - v23;
    v39 = v27 + v26;
    if ((a5 & 2) != 0)
    {
      v40 = a4[1];
      v34 = v34 - (float)(v37 * v40);
      v35 = v35 - (float)(v38 * v40);
      v36 = v36 - (float)(v39 * v40);
    }
    v41 = v25 + v28;
    v42 = v27 - v26;
    v43 = v33 - v22;
    if ((a5 & 4) != 0)
    {
      v44 = a4[2];
      v34 = v34 - (float)(v41 * v44);
      v35 = v35 - (float)(v42 * v44);
      v36 = v36 - (float)(v43 * v44);
    }
    v9 = v9 + v34;
    v10 = v10 + v35;
    v12 = v12 + v36;
    v45 = *(_QWORD *)(result + 8);
    if ((a5 & 1) != 0)
    {
      v46 = -*a4;
      v45 = v8 + 80;
      *(_WORD *)(v8 + 78) = 2048;
      *(float *)v8 = v30;
      *(float *)(v8 + 4) = v31;
      *(float *)(v8 + 16) = (float)(v10 * v32) - (float)(v12 * v31);
      *(float *)(v8 + 20) = (float)(v12 * v30) - (float)(v9 * v32);
      *(float *)(v8 + 24) = (float)(v9 * v31) - (float)(v10 * v30);
      *(float *)(v8 + 32) = v30;
      *(float *)(v8 + 36) = v31;
      *(float *)(v8 + 40) = v32;
      *(float *)(v8 + 48) = (float)(v13 * v32) - (float)(v14 * v31);
      *(float *)(v8 + 52) = (float)(v14 * v30) - (float)(v11 * v32);
      *(float *)(v8 + 56) = (float)(v11 * v31) - (float)(v13 * v30);
      *(float *)(v8 + 8) = v32;
      *(float *)(v8 + 12) = v46;
      if ((a5 & 2) == 0)
      {
LABEL_10:
        if ((a5 & 4) == 0)
          goto LABEL_11;
        goto LABEL_17;
      }
    }
    else if ((a5 & 2) == 0)
    {
      goto LABEL_10;
    }
    v47 = -a4[1];
    *(_WORD *)(v45 + 78) = 2048;
    *(float *)v45 = v37;
    *(float *)(v45 + 4) = v38;
    *(float *)(v45 + 16) = (float)(v10 * v39) - (float)(v12 * v38);
    *(float *)(v45 + 20) = (float)(v12 * v37) - (float)(v9 * v39);
    *(float *)(v45 + 24) = (float)(v9 * v38) - (float)(v10 * v37);
    *(float *)(v45 + 32) = v37;
    *(float *)(v45 + 36) = v38;
    *(float *)(v45 + 40) = v39;
    *(float *)(v45 + 48) = (float)(v13 * v39) - (float)(v14 * v38);
    *(float *)(v45 + 52) = (float)(v14 * v37) - (float)(v11 * v39);
    *(float *)(v45 + 56) = (float)(v11 * v38) - (float)(v13 * v37);
    *(float *)(v45 + 8) = v39;
    *(float *)(v45 + 12) = v47;
    v45 += 80;
    if ((a5 & 4) == 0)
    {
LABEL_11:
      if (!a6)
        goto LABEL_28;
      goto LABEL_18;
    }
LABEL_17:
    v48 = -a4[2];
    *(_WORD *)(v45 + 78) = 2048;
    *(float *)v45 = v41;
    *(float *)(v45 + 4) = v42;
    *(float *)(v45 + 16) = (float)(v10 * v43) - (float)(v12 * v42);
    *(float *)(v45 + 20) = (float)(v12 * v41) - (float)(v9 * v43);
    *(float *)(v45 + 24) = (float)(v9 * v42) - (float)(v10 * v41);
    *(float *)(v45 + 32) = v41;
    *(float *)(v45 + 36) = v42;
    *(float *)(v45 + 40) = v43;
    *(float *)(v45 + 48) = (float)(v13 * v43) - (float)(v14 * v42);
    *(float *)(v45 + 52) = (float)(v14 * v41) - (float)(v11 * v43);
    *(float *)(v45 + 56) = (float)(v11 * v42) - (float)(v13 * v41);
    *(float *)(v45 + 8) = v43;
    *(float *)(v45 + 12) = v48;
    v45 += 80;
    if (!a6)
      goto LABEL_28;
    goto LABEL_18;
  }
  v45 = *(_QWORD *)(result + 8);
  if (!a6)
    goto LABEL_28;
LABEL_18:
  v50 = *a2;
  v49 = a2[1];
  v51 = a2[2];
  v52 = a2[3];
  v54 = a3[2];
  v53 = a3[3];
  v55 = *a3;
  v56 = a3[1];
  v57 = v52 * *a3;
  v58 = *a2 * v53;
  v59 = (float)(v49 * v53) + (float)(v52 * v56);
  v60 = (float)(v51 * v53) + (float)(v52 * v54);
  v61 = (float)((float)(v49 * v56) + (float)(*a2 * *a3)) + (float)(v51 * v54);
  v62 = (float)(v52 * v53) - v61;
  v63 = (float)(v49 * *a3) + (float)(*a2 * v56);
  v64 = (float)(v51 * *a3) + (float)(*a2 * v54);
  v65 = (float)(v52 * v53) + v61;
  v66 = (float)((float)((float)((float)(v49 * v56) + (float)(v49 * v56)) + v62) * 0.5) + 0.00000011921;
  v67 = (float)((float)((float)((float)(v51 * v54) + (float)(v51 * v54)) + v62) * 0.5) + 0.00000011921;
  if (v65 != 0.0)
  {
    v67 = (float)((float)((float)(v51 * v54) + (float)(v51 * v54)) + v62) * 0.5;
    v66 = (float)((float)((float)(v49 * v56) + (float)(v49 * v56)) + v62) * 0.5;
  }
  if ((a6 & 1) != 0)
  {
    v68 = (float)((float)((float)(v50 * v55) + (float)(v50 * v55)) + v62) * 0.5;
    if (v65 == 0.0)
      v68 = v68 + 0.00000011921;
    v69 = (float)(v64 - v59) * 0.5;
    v70 = (float)(v60 + v63) * 0.5;
    *(_WORD *)(v45 + 78) = 2048;
    *(_QWORD *)v45 = 0;
    *(_DWORD *)(v45 + 8) = 0;
    *(float *)(v45 + 20) = v70;
    *(float *)(v45 + 24) = v69;
    *(_QWORD *)(v45 + 32) = 0;
    *(_DWORD *)(v45 + 40) = 0;
    *(float *)(v45 + 48) = v68;
    *(float *)(v45 + 52) = v70;
    *(float *)(v45 + 56) = v69;
    *(float *)(v45 + 12) = -(float)((float)((float)((float)(v53 * (float)-v50) + (float)(v52 * v55))
                                          + (float)((float)-v49 * v54))
                                  + (float)(v56 * v51));
    *(float *)(v45 + 16) = v68;
    *(_WORD *)(v45 + 76) |= 0x40u;
    v45 += 80;
  }
  v71 = v57 + v58;
  v72 = (float)(v49 * v54) + (float)(v51 * v56);
  if ((a6 & 2) != 0)
  {
    v73 = (float)(v63 - v60) * 0.5;
    v74 = (float)(v71 + v72) * 0.5;
    *(_WORD *)(v45 + 78) = 2048;
    *(_QWORD *)v45 = 0;
    *(_DWORD *)(v45 + 8) = 0;
    *(float *)(v45 + 20) = v66;
    *(float *)(v45 + 24) = v74;
    *(_QWORD *)(v45 + 32) = 0;
    *(_DWORD *)(v45 + 40) = 0;
    *(float *)(v45 + 48) = v73;
    *(float *)(v45 + 52) = v66;
    *(float *)(v45 + 56) = v74;
    *(float *)(v45 + 12) = -(float)((float)((float)((float)(v52 * v56) - (float)(v49 * v53)) - (float)(v51 * v55))
                                  + (float)(v54 * v50));
    *(float *)(v45 + 16) = v73;
    *(_WORD *)(v45 + 76) |= 0x40u;
    v45 += 80;
  }
  if ((a6 & 4) != 0)
  {
    v75 = (float)((float)((float)(v52 * v54) - (float)(v51 * v53)) - (float)(v50 * v56)) + (float)(v55 * v49);
    v76 = (float)(v64 + v59) * 0.5;
    v77 = (float)(v72 - v71) * 0.5;
    *(_WORD *)(v45 + 78) = 2048;
    *(_QWORD *)v45 = 0;
    *(_DWORD *)(v45 + 8) = 0;
    *(float *)(v45 + 20) = v77;
    *(float *)(v45 + 24) = v67;
    *(_QWORD *)(v45 + 32) = 0;
    *(_DWORD *)(v45 + 40) = 0;
    *(float *)(v45 + 48) = v76;
    *(float *)(v45 + 52) = v77;
    *(float *)(v45 + 56) = v67;
    *(float *)(v45 + 12) = -v75;
    *(float *)(v45 + 16) = v76;
    *(_WORD *)(v45 + 76) |= 0x40u;
    v45 += 80;
  }
LABEL_28:
  *a7 = v9;
  a7[1] = v10;
  a7[2] = v12;
  *a8 = v11;
  a8[1] = v13;
  a8[2] = v14;
  while (v8 < v45)
  {
    *(_WORD *)(v8 + 76) |= 0x10u;
    v8 += 80;
  }
  *(_QWORD *)(result + 8) = v45;
  return result;
}

uint64_t physx::Ext::joint::ConstraintHelper::ConstraintHelper(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6, float *a7, float32x2_t *a8, float32x2_t *a9)
{
  float32_t v14;
  float v15;
  float v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *a3 = *(_OWORD *)a7;
  physx::Ext::joint::computeJointFrames((float *)a4, (float *)a5, a7, (float *)a8, (float *)a9);
  v14 = a5[3].f32[0] - a8[3].f32[0];
  *a6 = vsub_f32(a5[2], a8[2]);
  a6[1].f32[0] = v14;
  v15 = a5[3].f32[0] - a8[3].f32[0];
  *(float32x2_t *)(a1 + 16) = vsub_f32(a5[2], a8[2]);
  *(float *)(a1 + 24) = v15;
  v16 = a5[3].f32[0] - a9[3].f32[0];
  *(float32x2_t *)(a1 + 28) = vsub_f32(a5[2], a9[2]);
  *(float *)(a1 + 36) = v16;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a4 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a4 + 24);
  *(float32x2_t *)(a1 + 52) = a5[2];
  *(_DWORD *)(a1 + 60) = a5[3].i32[0];
  return a1;
}

float physx::Ext::joint::computeJointFrames(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float result;

  v5 = a3[8] + a3[8];
  v6 = a3[9] + a3[9];
  v7 = *a4;
  v8 = a4[1];
  v10 = a4[2];
  v9 = a4[3];
  v12 = a3[6];
  v11 = a3[7];
  v13 = a3[4];
  v14 = a3[5];
  v15 = (float)((float)((float)(v8 * v11) + (float)(v9 * v14)) + (float)(v10 * v13)) - (float)(v12 * *a4);
  *a1 = (float)((float)((float)(*a4 * v11) + (float)(v9 * v13)) + (float)(v8 * v12)) - (float)(v14 * v10);
  v16 = a3[11];
  v17 = a3[10] + a3[10];
  v18 = (float)(v9 * v9) + -0.5;
  v19 = (float)(v6 * v8) + (float)(v7 * v5);
  v20 = (float)(v9 * (float)((float)(v8 * v17) - (float)(v10 * v6))) + (float)(v5 * v18);
  v21 = (float)(v9 * (float)((float)(v10 * v5) - (float)(v7 * v17))) + (float)(v6 * v18);
  v22 = (float)(v9 * (float)((float)(v7 * v6) - (float)(v8 * v5))) + (float)(v17 * v18);
  v23 = v19 + (float)(v10 * v17);
  v24 = v21 + (float)(v8 * v23);
  v25 = v22 + (float)(v10 * v23);
  v26 = a4[5];
  v27 = a4[4] + (float)(v20 + (float)(v7 * v23));
  v28 = a4[6] + v25;
  a1[1] = v15;
  a1[2] = (float)((float)((float)(v10 * v11) + (float)(v9 * v12)) + (float)(v7 * v14)) - (float)(v13 * v8);
  a1[3] = (float)((float)((float)(v9 * v11) - (float)(v7 * v13)) - (float)(v8 * v14)) - (float)(v10 * v12);
  a1[4] = v27;
  a1[5] = v26 + v24;
  a1[6] = v28;
  v29 = a3[14];
  v30 = a3[15] + a3[15];
  v31 = a3[16] + a3[16];
  v32 = a3[17] + a3[17];
  v34 = a5[2];
  v33 = a5[3];
  v35 = (float)(v33 * v33) + -0.5;
  v36 = a5[1];
  v37 = (float)((float)(v31 * v36) + (float)(*a5 * v30)) + (float)(v34 * v32);
  v38 = (float)((float)(v33 * (float)((float)(v36 * v32) - (float)(v34 * v31))) + (float)(v30 * v35))
      + (float)(*a5 * v37);
  v39 = (float)((float)(v33 * (float)((float)(v34 * v30) - (float)(*a5 * v32))) + (float)(v31 * v35))
      + (float)(v36 * v37);
  v40 = (float)((float)(v33 * (float)((float)(*a5 * v31) - (float)(v36 * v30))) + (float)(v32 * v35))
      + (float)(v34 * v37);
  v41 = a5[4] + v38;
  v42 = a5[5] + v39;
  v43 = a5[6];
  v45 = a3[12];
  v44 = a3[13];
  v46 = (float)((float)((float)(*a5 * v29) + (float)(v33 * v16)) + (float)(v36 * v44)) - (float)(v45 * v34);
  v47 = (float)((float)((float)(v36 * v29) + (float)(v33 * v45)) + (float)(v34 * v16)) - (float)(v44 * *a5);
  v48 = (float)((float)((float)(v34 * v29) + (float)(v33 * v44)) + (float)(*a5 * v45)) - (float)(v16 * v36);
  v49 = (float)((float)((float)(v33 * v29) - (float)(*a5 * v16)) - (float)(v36 * v45)) - (float)(v34 * v44);
  *a2 = v46;
  a2[1] = v47;
  a2[2] = v48;
  a2[3] = v49;
  result = v43 + v40;
  a2[4] = v41;
  a2[5] = v42;
  a2[6] = result;
  return result;
}

BOOL physx::Cm::ConeLimitHelperTanLess::getLimit(float *a1, float *a2, float *a3, float *a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v65;
  float v66;

  v7 = a2[2];
  v8 = a2[3];
  v10 = *a2;
  v9 = a2[1];
  v11 = atan2f(v9, v8 + 1.0) * 4.0;
  v12 = atan2f(v7, v8 + 1.0) * 4.0;
  v13 = fabsf(v11);
  v15 = a1[1];
  v14 = a1[2];
  v16 = v13 + v14;
  v17 = fabsf(v12);
  v18 = v14 + v17;
  v19 = *a1;
  v20 = (float)((float)(v16 / *a1) * (float)(v16 / *a1)) + (float)((float)(v18 / v15) * (float)(v18 / v15));
  if (v20 > 1.0)
  {
    v21 = v10 + v10;
    v22 = (float)((float)(v8 * (float)(v8 + v8)) + -1.0) + (float)(v10 * (float)(v10 + v10));
    v65 = (float)(v21 * v7) - (float)(v9 * (float)(v8 + v8));
    v66 = (float)(v21 * v9) + (float)(v7 * (float)(v8 + v8));
    if (v19 >= v15)
    {
      if (v17 < 0.000001)
      {
        v24 = -v19;
        if (v11 > 0.0)
          v24 = *a1;
        v23 = 0.0;
        goto LABEL_19;
      }
    }
    else if (v13 < 0.000001)
    {
      if (v12 <= 0.0)
        v23 = -v15;
      else
        v23 = a1[1];
      v24 = 0.0;
LABEL_19:
      v41 = v24 / (float)(v19 * v19);
      v42 = v23 / (float)(v15 * v15);
      v43 = tanf(v24 * 0.25);
      v44 = tanf(v23 * 0.25);
      v45 = (float)(v43 * v43) + (float)(v44 * v44);
      v46 = 1.0 - v45;
      v47 = 1.0 / (float)(v45 + 1.0);
      v48 = (float)(v46 + v46) * (float)(v47 * v47);
      v49 = v44 + v44;
      v50 = (float)(v44 + v44) * v48;
      v51 = (float)(v43 * -2.0) * v48;
      v52 = (float)((float)(1.0 - v45) * v48) + -1.0;
      v53 = (float)((float)(v41 * v43) + 0.0) + (float)(v44 * v42);
      v54 = v47 * (float)((float)((float)(3.0 - v45) * (float)(v53 * -4.0)) * (float)(v47 * v47));
      v55 = (float)(v46 * v54) - (float)((float)(v53 + v53) * v48);
      v56 = (float)((float)(v42 + v42) * v48) + (float)(v49 * v54);
      v57 = (float)((float)(v43 * -2.0) * v54) - (float)((float)(v41 + v41) * v48);
      v58 = (float)(v51 * v55) - (float)(v52 * v57);
      v59 = (float)(v52 * v56) - (float)(v50 * v55);
      v60 = 1.0 / sqrtf((float)((float)(v56 * v56) + (float)(v55 * v55)) + (float)(v57 * v57));
      v61 = (float)((float)(v50 * v57) - (float)(v51 * v56)) * v60;
      v62 = v58 * v60;
      v63 = v59 * v60;
      *a3 = v61;
      a3[1] = v62;
      a3[2] = v63;
      *a4 = (float)((float)(v66 * (float)((float)(v51 * v61) - (float)(v52 * v63)))
                  + (float)((float)((float)(v50 * v63) - (float)(v51 * v62)) * v22))
          + (float)((float)((float)(v52 * v62) - (float)(v50 * v61)) * v65);
      return v20 > 1.0;
    }
    v25 = v19 * v19;
    v26 = v15 * v15;
    v27 = v13 * v19;
    v28 = v17 * v15;
    v29 = v27 - (float)(v19 * v19);
    if (v29 <= (float)(v28 - (float)(v15 * v15)))
      v29 = v28 - (float)(v15 * v15);
    v30 = 20;
    while (1)
    {
      v31 = 1.0 / (float)(v25 + v29);
      v32 = 1.0 / (float)(v26 + v29);
      v33 = (float)(v27 * v31) * (float)(v27 * v31);
      v34 = (float)(v28 * v32) * (float)(v28 * v32);
      v35 = (float)(v33 + v34) + -1.0;
      if (v35 < 0.0001)
        break;
      v29 = v29
          + (float)(v35
                  / (float)((float)((float)((float)(v31 * v33) + 0.0) + (float)(v34 * v32))
                          + (float)((float)((float)(v31 * v33) + 0.0) + (float)(v34 * v32))));
      if (!--v30)
      {
        v36 = v12 * v26;
        v37 = (float)(v11 * v25) * v31;
        v38 = v36 * v32;
        v39 = 1.0
            / sqrtf((float)((float)(v37 / v19) * (float)(v37 / v19)) + (float)((float)(v38 / v15) * (float)(v38 / v15)));
        v24 = v37 * v39;
        v23 = v38 * v39;
        goto LABEL_19;
      }
    }
    v40 = v12 * v26;
    v24 = (float)(v11 * v25) * v31;
    v23 = v40 * v32;
    goto LABEL_19;
  }
  return v20 > 1.0;
}

void physx::Ext::joint::ConstraintHelper::addLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  float v4;
  __int16 v5;
  __int16 v6;

  v3 = *(_WORD *)(a2 + 76);
  v4 = *(float *)(a3 + 8);
  if (*(float *)(a3 + 12) > 0.0 || v4 > 0.0)
  {
    v6 = v3 | 0x11;
    *(float *)(a2 + 64) = v4;
    *(_DWORD *)(a2 + 68) = *(_DWORD *)(a3 + 12);
  }
  else
  {
    *(_WORD *)(a2 + 78) = 2049;
    *(_DWORD *)(a2 + 64) = *(_DWORD *)a3;
    *(_DWORD *)(a2 + 68) = *(_DWORD *)(a3 + 4);
    if (*(float *)(a2 + 12) <= 0.0)
      v5 = 16;
    else
      v5 = 24;
    v6 = v5 | v3;
    if (*(float *)a3 > 0.0)
      v6 |= 4u;
  }
  *(_WORD *)(a2 + 76) = v6;
  *(_DWORD *)(a2 + 44) = 0;
}

uint64_t visualizeLine(uint64_t a1, float *a2, float *a3, float *a4, float a5)
{
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v17[3];
  float v18[3];

  if (a4[3] <= 0.0 && a4[2] <= 0.0)
    v5 = a4[4];
  else
    v5 = 0.0;
  v7 = a4[5];
  v6 = a4[6];
  v8 = (float)(v7 - v5) >= a5 && (float)(v5 + v6) <= a5;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v18[0] = (float)(v6 * *a3) + *a2;
  v18[1] = (float)(v6 * v10) + v13;
  v18[2] = (float)(v6 * v11) + v14;
  v17[0] = (float)(v7 * v9) + v12;
  v17[1] = (float)(v7 * v10) + v13;
  v17[2] = (float)(v7 * v11) + v14;
  if (v8)
    v15 = 0xFFFFFFLL;
  else
    v15 = 16711680;
  return (*(uint64_t (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v18, v17, v15);
}

uint64_t visualizeQuad(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47[3];
  float v48[3];
  float v49[3];
  float v50[3];

  if (a4[3] <= 0.0 && a4[2] <= 0.0)
    v9 = a4[4];
  else
    v9 = 0.0;
  v10 = a4[5];
  v11 = a4[6];
  if (a6[3] <= 0.0 && a6[2] <= 0.0)
    v12 = a6[4];
  else
    v12 = 0.0;
  v13 = v9 + v11;
  v14 = v10 - v9;
  v16 = a6[5];
  v15 = a6[6];
  if ((float)(v16 - v12) >= a8 && (float)(v12 + v15) <= a8 && v14 >= a7 && v13 <= a7)
    v20 = 0xFFFFFFLL;
  else
    v20 = 16711680;
  v21 = a3[1];
  v22 = v11 * *a3;
  v23 = v11 * v21;
  v24 = a3[2];
  v25 = v11 * v24;
  v26 = v10 * *a3;
  v27 = v10 * v21;
  v28 = v10 * v24;
  v29 = a5[1];
  v30 = v15 * *a5;
  v31 = v15 * v29;
  v32 = a5[2];
  v33 = v15 * v32;
  v34 = v16 * *a5;
  v35 = v16 * v29;
  v36 = v16 * v32;
  v37 = *a2;
  v38 = a2[1];
  v39 = v22 + *a2;
  v40 = v23 + v38;
  v41 = a2[2];
  v42 = v25 + v41;
  v50[0] = v30 + v39;
  v50[1] = v31 + v40;
  v50[2] = v33 + v42;
  v43 = v26 + v37;
  v44 = v27 + v38;
  v45 = v28 + v41;
  v49[0] = v30 + v43;
  v49[1] = v31 + v44;
  v49[2] = v33 + v45;
  v48[0] = v34 + v43;
  v48[1] = v35 + v44;
  v48[2] = v36 + v45;
  v47[0] = v34 + v39;
  v47[1] = v35 + v40;
  v47[2] = v36 + v42;
  (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v50, v49, v20);
  (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v49, v48, v20);
  (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v48, v47, v20);
  return (*(uint64_t (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v47, v50, v20);
}

uint64_t drawPyramid(uint64_t a1, float *a2, float *a3, float *a4, int a5, char a6)
{
  float v11;
  float v12;
  _BOOL4 v13;
  _BOOL4 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;

  if (a5)
  {
    v11 = atan2f(a4[1], a4[3] + 1.0) * 4.0;
    if (a2[70] <= 0.0 && a2[69] <= 0.0)
      v12 = a2[71];
    else
      v12 = 0.0;
    v13 = (float)(a2[72] + v12) > v11 || (float)(a2[73] - v12) < v11;
    if ((a6 & 1) != 0)
      goto LABEL_12;
LABEL_6:
    v14 = 0;
    v15 = a2[74];
    v16 = a2[75];
    goto LABEL_18;
  }
  v13 = 0;
  if ((a6 & 1) == 0)
    goto LABEL_6;
LABEL_12:
  v17 = atan2f(a4[2], a4[3] + 1.0) * 4.0;
  v15 = a2[74];
  v16 = a2[75];
  if (a2[70] <= 0.0 && a2[69] <= 0.0)
    v18 = a2[71];
  else
    v18 = 0.0;
  v14 = (float)(v16 - v18) < v17;
  if ((float)(v15 + v18) > v17)
    v14 = 1;
LABEL_18:
  if (v13 || v14)
    v19 = 4294901760;
  else
    v19 = 4286611584;
  drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, a2[72], a2[72], v15, v16);
  drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, a2[73], a2[73], a2[74], a2[75]);
  drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, a2[72], a2[73], a2[74], a2[74]);
  return drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, a2[72], a2[73], a2[75], a2[75]);
}

uint64_t visualizeAngularLimit(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  _BOOL8 v9;

  v9 = fabsf(atan2f(a4, a5 + 1.0) * 4.0) > (float)(a6 - a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, _BOOL8, float, float))(*(_QWORD *)a1 + 32))(a1, a2, v9, -a6, a6);
}

uint64_t visualizeDoubleCone(uint64_t a1, float *a2, uint64_t a3, float a4, float a5)
{
  float v8;
  float v9;
  _BOOL8 v10;

  if (a2[63] <= 0.0 && a2[62] <= 0.0)
    v8 = a2[64];
  else
    v8 = 0.0;
  if (a4 < -1.0)
    a4 = -1.0;
  if (a4 > 1.0)
    a4 = 1.0;
  v9 = asinf(a4);
  v10 = (float)(v8 - a5) > v9 || (float)(a5 - v8) < v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BOOL8, float))(*(_QWORD *)a1 + 48))(a1, a3, v10, a5);
}

uint64_t drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(uint64_t a1, float *a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  unsigned int v13;
  float *v14;
  float v15;
  float v16;
  __float2 v17;
  __float2 v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t result;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;

  v13 = 0;
  v39 = 0;
  v40 = 0.0;
  v14 = a2 + 4;
  do
  {
    v15 = (float)v13 / 7.0;
    v16 = (float)((float)(1.0 - v15) * a4) + (float)(v15 * a5);
    v17 = __sincosf_stret((float)((float)(1.0 - v15) * a6) + (float)(v15 * a7));
    v18 = __sincosf_stret(v16);
    v19 = (float)(v18.__cosval * 0.0) + (float)((float)(v17.__cosval * v18.__sinval) + (float)(v17.__sinval * -0.0));
    v20 = (float)((float)(v18.__sinval * -0.0)
                + (float)((float)(v17.__cosval * v18.__cosval) + (float)(v17.__sinval * -0.0)))
        + (float)((float)((float)((float)(v17.__cosval * 0.0) - v17.__sinval) + 0.0) * 0.0);
    v21 = (float)((float)((float)(v18.__cosval * 0.0)
                        + (float)((float)(v17.__sinval * v18.__sinval) + (float)(v17.__cosval * 0.0)))
                * 0.0)
        + (float)((float)((float)(v18.__sinval * -0.0)
                        + (float)((float)(v17.__sinval * v18.__cosval) + (float)(v17.__cosval * 0.0)))
                + (float)((float)((float)(v17.__cosval + (float)(v17.__sinval * 0.0)) + 0.0) * 0.0));
    v22 = (float)((float)(v19 * 0.0) + v20) + (float)((float)(v19 * 0.0) + v20);
    v23 = v21 + v21;
    v24 = (float)((float)((float)((float)(v18.__cosval * 0.0) + 0.0) - v18.__sinval)
                + (float)((float)(v18.__cosval + (float)((float)(v18.__sinval * 0.0) + 0.0)) * 0.0))
        + (float)((float)((float)((float)(v18.__cosval * 0.0) + 0.0) - v18.__sinval)
                + (float)((float)(v18.__cosval + (float)((float)(v18.__sinval * 0.0) + 0.0)) * 0.0));
    v26 = a2[2];
    v25 = a2[3];
    v27 = (float)(v25 * v25) + -0.5;
    v28 = a2[1];
    v29 = (float)((float)(v28 * v23) + (float)(*a2 * v22)) + (float)(v26 * v24);
    v30 = (float)((float)(v25 * (float)((float)(v28 * v24) - (float)(v26 * v23))) + (float)(v22 * v27))
        + (float)(*a2 * v29);
    v31 = (float)((float)(v25 * (float)((float)(v26 * v22) - (float)(*a2 * v24))) + (float)(v23 * v27))
        + (float)(v28 * v29);
    v32 = (float)((float)(v25 * (float)((float)(*a2 * v23) - (float)(v28 * v22))) + (float)(v24 * v27))
        + (float)(v26 * v29);
    v33 = a2[5] + v31;
    v34 = a2[6] + v32;
    *(float *)&v37 = a2[4] + v30;
    *((float *)&v37 + 1) = v33;
    v38 = v34;
    result = (*(uint64_t (**)(uint64_t, float *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v14, &v37, a3);
    if (v13)
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v39, &v37, a3);
    v39 = v37;
    v40 = v38;
    ++v13;
  }
  while (v13 != 8);
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(float *a1, uint64_t a2)
{
  float result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  if (a2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) == 2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 152))(&v14, a2);
      v6 = v15;
      v5 = v16;
      v7 = (float)(v5 * v5) + -0.5;
      v8 = (float)((float)((float)(v18 * -2.0) * *((float *)&v14 + 1)) + (float)(*(float *)&v14 * (float)(v17 * -2.0)))
         + (float)(v15 * (float)(v19 * -2.0));
      v9 = -v15;
      v10 = (float)((float)((float)(v17 * -2.0) * v7)
                  - (float)((float)((float)(*((float *)&v14 + 1) * (float)(v19 * -2.0))
                                  - (float)(v15 * (float)(v18 * -2.0)))
                          * v16))
          + (float)(*(float *)&v14 * v8);
      v11 = (float)((float)((float)(v18 * -2.0) * v7)
                  - (float)((float)((float)(v15 * (float)(v17 * -2.0)) - (float)(*(float *)&v14 * (float)(v19 * -2.0)))
                          * v16))
          + (float)(*((float *)&v14 + 1) * v8);
      v12 = -*((float *)&v14 + 1);
      v13 = (float)((float)(v19 * -2.0) * v7)
          - (float)((float)((float)(*(float *)&v14 * (float)(v18 * -2.0))
                          - (float)(*((float *)&v14 + 1) * (float)(v17 * -2.0)))
                  * v16);
      *a1 = -*(float *)&v14;
      a1[1] = v12;
      a1[2] = v9;
      a1[3] = v5;
      result = v13 + (float)(v6 * v8);
      a1[4] = v10;
      a1[5] = v11;
      a1[6] = result;
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_2260E5D70;
    *((_QWORD *)a1 + 2) = 0;
    a1[6] = 0.0;
  }
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(_WORD *a1, uint64_t a2, uint64_t a3)
{
  float result;
  uint64_t v7;
  float v8;

  if (a1 && a1[4] != 6)
  {
    (*(void (**)(uint64_t *__return_ptr, _WORD *))(*(_QWORD *)a1 + 312))(&v7, a1);
    *(_QWORD *)a2 = v7;
    *(float *)(a2 + 8) = v8;
    (*(void (**)(uint64_t *__return_ptr, _WORD *))(*(_QWORD *)a1 + 328))(&v7, a1);
    *(_QWORD *)a3 = v7;
    result = v8;
    *(float *)(a3 + 8) = v8;
  }
  else
  {
    result = 0.0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return result;
}

void physx::PxDefaultMemoryOutputStream::~PxDefaultMemoryOutputStream(physx::PxDefaultMemoryOutputStream *this)
{
  *(_QWORD *)this = &off_24ED97C50;
  if (*((_QWORD *)this + 2))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

{
  *(_QWORD *)this = &off_24ED97C50;
  if (*((_QWORD *)this + 2))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t physx::PxDefaultMemoryOutputStream::write(physx::PxDefaultMemoryOutputStream *this, const void *a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  char *v11;

  v6 = *((_DWORD *)this + 6);
  if ((v6 + a3) <= *((_DWORD *)this + 7))
  {
    v11 = (char *)*((_QWORD *)this + 2);
  }
  else
  {
    v7 = (v6 + a3) | ((v6 + a3) >> 1) | (((v6 + (_DWORD)a3) | ((v6 + a3) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if ((v9 + 1) > 0x1000)
      v10 = v9 + 1;
    else
      v10 = 4096;
    *((_DWORD *)this + 7) = v10;
    v11 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    memcpy(v11, *((const void **)this + 2), *((unsigned int *)this + 6));
    if (*((_QWORD *)this + 2))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
    *((_QWORD *)this + 2) = v11;
    v6 = *((_DWORD *)this + 6);
  }
  memcpy(&v11[v6], a2, a3);
  *((_DWORD *)this + 6) += a3;
  return a3;
}

size_t physx::PxDefaultMemoryInputData::read(physx::PxDefaultMemoryInputData *this, void *__dst, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;

  v4 = *((unsigned int *)this + 6);
  v5 = *((_DWORD *)this + 2) - v4;
  if (a3 >= v5)
    v6 = v5;
  else
    v6 = a3;
  memcpy(__dst, (const void *)(*((_QWORD *)this + 2) + v4), v6);
  *((_DWORD *)this + 6) += v6;
  return v6;
}

uint64_t physx::PxDefaultMemoryInputData::getLength(physx::PxDefaultMemoryInputData *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t physx::PxDefaultMemoryInputData::seek(uint64_t this, unsigned int a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(this + 8);
  if (v2 >= a2)
    v2 = a2;
  *(_DWORD *)(this + 24) = v2;
  return this;
}

uint64_t physx::PxDefaultMemoryInputData::tell(physx::PxDefaultMemoryInputData *this)
{
  return *((unsigned int *)this + 6);
}

_QWORD *physx::PxDistanceJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  float *v13;
  float v14;
  uint64_t v15;

  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::DistanceJoint>::getName() [T = physx::Ext::DistanceJoint]";
  else
    v11 = "<allocation names disabled>";
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtDistanceJoint.cpp", 45);
  v13 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = physx::Ext::DistanceJoint::DistanceJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t, float))(*(_QWORD *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::DistanceJoint::sShaders, 112, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(_QWORD *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

float physx::Ext::DistanceJoint::getDistance(physx::Ext::DistanceJoint *this)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v2);
  return sqrtf((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5));
}

uint64_t physx::Ext::DistanceJoint::setMinDistance(physx::Ext::DistanceJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 80) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::DistanceJoint::getMinDistance(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 80);
}

uint64_t physx::Ext::DistanceJoint::setMaxDistance(physx::Ext::DistanceJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 84) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::DistanceJoint::getMaxDistance(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 84);
}

uint64_t physx::Ext::DistanceJoint::setTolerance(physx::Ext::DistanceJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 88) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::DistanceJoint::getTolerance(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 88);
}

uint64_t physx::Ext::DistanceJoint::setStiffness(physx::Ext::DistanceJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 92) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::DistanceJoint::getStiffness(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 92);
}

uint64_t physx::Ext::DistanceJoint::setDamping(physx::Ext::DistanceJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 96) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::DistanceJoint::getDamping(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 96);
}

uint64_t physx::Ext::DistanceJoint::getDistanceJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(_QWORD *)(this + 104) + 100);
  return this;
}

uint64_t physx::Ext::DistanceJoint::setDistanceJointFlags(uint64_t a1, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 96;
  v2 = *(_QWORD *)(a1 + 96);
  *(_WORD *)(*(_QWORD *)(v3 + 8) + 100) = *a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
}

uint64_t physx::Ext::DistanceJoint::setDistanceJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *(_QWORD *)(a1 + 104);
  if (a3)
    v4 = *(_WORD *)(v3 + 100) | a2;
  else
    v4 = *(_WORD *)(v3 + 100) & ~a2;
  *(_WORD *)(v3 + 100) = v4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::DistanceJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 104), 112);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t DistanceJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float *a9, float *a10)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __int16 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int16 v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t result;
  __int16 v36;
  char v37[16];
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44[2];
  float v45;
  float v46;
  float v47;
  char v48[16];
  float v49;
  float v50;
  float v51;

  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)v37, a1, a4, (uint64_t)v48, v44, a2, (float *)a5, a6, a7);
  v12 = v45;
  v13 = v46;
  *a9 = v45;
  a9[1] = v13;
  v14 = v47;
  a9[2] = v47;
  v15 = v50;
  v16 = v49 - v12;
  *a10 = v12;
  a10[1] = v13;
  a10[2] = v14;
  v17 = v15 - v13;
  v18 = v51 - v14;
  v19 = sqrtf((float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18));
  if (v19 > 0.0)
  {
    v16 = v16 * (float)(1.0 / v19);
    v17 = v17 * (float)(1.0 / v19);
    v18 = v18 * (float)(1.0 / v19);
  }
  v20 = *(_WORD *)(a5 + 100);
  if (v19 < 0.00000011921)
  {
    v16 = 1.0;
    v17 = 0.0;
    v18 = 0.0;
  }
  v21 = v41;
  v22 = (float)(v39 * v18) - (float)(v40 * v17);
  v23 = (float)(v40 * v16) - (float)(v38 * v18);
  v24 = (float)(v38 * v17) - (float)(v39 * v16);
  v25 = (float)(v42 * v18) - (float)(v43 * v17);
  v26 = (float)(v43 * v16) - (float)(v41 * v18);
  v27 = -(float)(v42 * v16);
  *(_WORD *)(a1 + 76) = 16;
  *(float *)a1 = v16;
  *(float *)(a1 + 4) = v17;
  *(float *)(a1 + 8) = v18;
  v28 = v27 + (float)(v21 * v17);
  *(float *)(a1 + 16) = v22;
  *(float *)(a1 + 20) = v23;
  *(float *)(a1 + 24) = v24;
  *(float *)(a1 + 32) = v16;
  *(float *)(a1 + 36) = v17;
  *(float *)(a1 + 40) = v18;
  *(float *)(a1 + 48) = v25;
  *(float *)(a1 + 52) = v26;
  *(float *)(a1 + 56) = v28;
  if ((v20 & 8) != 0)
  {
    *(_WORD *)(a1 + 76) = 17;
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a5 + 92);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a5 + 96);
    v29 = 25;
  }
  else
  {
    v29 = 24;
  }
  v31 = *(float *)(a5 + 80);
  v30 = *(float *)(a5 + 84);
  if (v31 == v30 && (v20 & 4) != 0 && (v20 & 2) != 0)
  {
    v32 = v19 - v30;
    v33 = *(float *)(a5 + 88);
    if (v32 <= v33)
    {
      v34 = 0.0;
      if (v32 < (float)-v33)
        v34 = v32 + v33;
    }
    else
    {
      v34 = v32 - v33;
    }
    *(float *)(a1 + 12) = v34;
    return 1;
  }
  if ((v20 & 2) == 0)
  {
    if ((v20 & 4) != 0)
    {
      if (v19 >= v31)
      {
        result = 0;
        *(float *)(a1 + 12) = v19 - v31;
        *(_DWORD *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 60) = 2139095039;
LABEL_25:
        *(_WORD *)(a1 + 76) = v29;
        return result;
      }
LABEL_27:
      *(float *)(a1 + 12) = (float)(v19 - v31) + *(float *)(a5 + 88);
      *(_DWORD *)(a1 + 44) = 0;
    }
    return 1;
  }
  if (v19 > v30)
  {
    *(float *)(a1 + 12) = (float)(v19 - v30) - *(float *)(a5 + 88);
    *(_DWORD *)(a1 + 60) = 0;
    return 1;
  }
  if ((v20 & 4) == 0)
  {
    result = 0;
    *(float *)(a1 + 12) = v19 - v30;
    *(_DWORD *)(a1 + 44) = -8388609;
    *(_DWORD *)(a1 + 60) = 0;
    goto LABEL_25;
  }
  if (v19 < v31)
    goto LABEL_27;
  *(float *)(a1 + 12) = v19 - v31;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 2139095039;
  *(_WORD *)(a1 + 76) = v29;
  *(float *)(a1 + 80) = v16;
  *(float *)(a1 + 84) = v17;
  *(float *)(a1 + 88) = v18;
  *(float *)(a1 + 96) = v22;
  *(float *)(a1 + 100) = v23;
  *(float *)(a1 + 104) = v24;
  *(float *)(a1 + 112) = v16;
  *(float *)(a1 + 116) = v17;
  *(float *)(a1 + 120) = v18;
  *(float *)(a1 + 128) = v25;
  *(float *)(a1 + 132) = v26;
  *(float *)(a1 + 136) = v28;
  if ((*(_BYTE *)(a5 + 100) & 8) != 0)
  {
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a5 + 92);
    *(_DWORD *)(a1 + 148) = *(_DWORD *)(a5 + 96);
    v30 = *(float *)(a5 + 84);
    v36 = 25;
  }
  else
  {
    v36 = 24;
  }
  *(float *)(a1 + 92) = v19 - v30;
  *(_DWORD *)(a1 + 124) = -8388609;
  *(_DWORD *)(a1 + 140) = 0;
  *(_WORD *)(a1 + 156) = v36;
  return 2;
}

void DistanceJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8;
  __int16 v9;
  float v10;
  uint64_t v11;
  float v12[4];
  float v13;
  float v14;
  float v15;
  float v16[4];
  float v17;
  float v18;
  float v19;

  v8 = physx::Ext::joint::computeJointFrames(v16, v12, (float *)a2, a3, a4);
  if ((a5 & 1) != 0)
    (*(void (**)(uint64_t, float *, float *, float))(*(_QWORD *)a1 + 16))(a1, v16, v12, v8);
  if ((a5 & 2) != 0)
  {
    v9 = *(_WORD *)(a2 + 100);
    if ((v9 & 6) != 0)
    {
      v10 = sqrtf((float)((float)((float)(v14 - v18) * (float)(v14 - v18)) + (float)((float)(v13 - v17) * (float)(v13 - v17)))+ (float)((float)(v15 - v19) * (float)(v15 - v19)));
      if ((v9 & 2) != 0 && v10 > *(float *)(a2 + 84))
      {
        v11 = 16711680;
        if ((v9 & 4) == 0)
          goto LABEL_12;
      }
      else
      {
        v11 = 65280;
        if ((v9 & 4) == 0)
        {
LABEL_12:
          (*(void (**)(uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v17, &v13, v11);
          return;
        }
      }
      if (v10 < *(float *)(a2 + 80))
        v11 = 255;
      goto LABEL_12;
    }
  }
}

_QWORD *physx::PxFixedJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  __int16 v15;

  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::FixedJoint>::getName() [T = physx::Ext::FixedJoint]";
  else
    v11 = "<allocation names disabled>";
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtFixedJoint.cpp", 45);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v15 = 3;
  physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::Joint((uint64_t)v12, 259, &v15, a2, a3, a4, a5, 0x60u);
  *v12 = &off_24ED97FC0;
  v12[3] = &unk_24ED98140;
  *(_QWORD *)(v12[13] + 80) = 0x40490FDB501502F9;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::FixedJoint::sShaders, 96);
  v12[12] = v13;
  if (!v13)
  {
    (*(void (**)(_QWORD *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

float physx::Ext::FixedJoint::getProjectionLinearTolerance(physx::Ext::FixedJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 80);
}

uint64_t physx::Ext::FixedJoint::setProjectionLinearTolerance(physx::Ext::FixedJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 80) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::FixedJoint::getProjectionAngularTolerance(physx::Ext::FixedJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 84);
}

uint64_t physx::Ext::FixedJoint::setProjectionAngularTolerance(physx::Ext::FixedJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 84) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

uint64_t physx::Ext::FixedJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 104), 96);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t FixedJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, float *a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float32x2_t *a9, float32x2_t *a10)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32_t v17;
  float32_t v18;
  float v20[3];
  float32x2_t v21;
  float v22;
  float32x2_t v23;
  float v24;
  _QWORD v25[8];
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;

  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)v25, a1, a4, (uint64_t)&v32, &v26, a2, a5, a6, a7);
  if ((float)((float)((float)((float)(v33 * v26.f32[1]) + (float)(v32 * v26.f32[0])) + (float)(v34 * v27))
             + (float)(v35 * v28)) < 0.0)
  {
    v26.f32[0] = -v26.f32[0];
    v26.f32[1] = -v26.f32[1];
    v27 = -v27;
    v28 = -v28;
  }
  v12 = (float)(v29 - v36) + (float)(v29 - v36);
  v13 = (float)(v30 - v37) + (float)(v30 - v37);
  v14 = (float)(v31 - v38) + (float)(v31 - v38);
  v15 = (float)(v35 * v35) + -0.5;
  v16 = (float)((float)(v33 * v13) + (float)(v32 * v12)) + (float)(v34 * v14);
  v20[0] = (float)((float)(v12 * v15) - (float)((float)((float)(v33 * v14) - (float)(v34 * v13)) * v35))
         + (float)(v32 * v16);
  v20[1] = (float)((float)(v13 * v15) - (float)((float)((float)(v34 * v12) - (float)(v32 * v14)) * v35))
         + (float)(v33 * v16);
  v20[2] = (float)((float)(v14 * v15) - (float)((float)((float)(v32 * v13) - (float)(v33 * v12)) * v35))
         + (float)(v34 * v16);
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)v25, &v32, (float *)&v26, v20, 7, 7, (float *)&v23, (float *)&v21);
  v17 = v24 + a6[3].f32[0];
  *a9 = vadd_f32(v23, a6[2]);
  a9[1].f32[0] = v17;
  v18 = v22 + a7[3].f32[0];
  *a10 = vadd_f32(v21, a7[2]);
  a10[1].f32[0] = v18;
  return -858993459 * ((v25[1] - v25[0]) >> 4);
}

void FixedJointProject(float *a1, float *a2, float *a3, int a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  __float2 v15;
  float v16;
  float v17;
  float cosval;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;

  physx::Ext::joint::computeDerived(a1, a2, a3, &v118, &v111, &v104, 1);
  v8 = a1[20];
  v10 = v108;
  v9 = v109;
  v11 = v110;
  v12 = (float)((float)(v9 * v9) + (float)(v10 * v10)) + (float)(v11 * v11);
  v13 = v8 * v8;
  if (v12 > (float)(v8 * v8))
  {
    v14 = 1.0 / sqrtf(v12);
    v10 = v8 * (float)(v108 * v14);
    v9 = v8 * (float)(v109 * v14);
    v11 = v8 * (float)(v110 * v14);
  }
  v15 = __sincosf_stret(a1[21] * 0.5);
  if (v15.__sinval > 0.9999)
  {
    v16 = v104;
    v17 = v105;
    v19 = v106;
    cosval = v107;
    goto LABEL_10;
  }
  cosval = v107;
  v16 = v104;
  if (v107 >= 0.0)
  {
    v17 = v105;
    v19 = v106;
    v20 = v104;
    v21 = v105;
    v22 = v106;
  }
  else
  {
    v20 = -v104;
    v17 = v105;
    v19 = v106;
    v21 = -v105;
    v22 = -v106;
  }
  v23 = (float)((float)(v21 * v21) + (float)(v20 * v20)) + (float)(v22 * v22);
  if (v23 <= (float)(v15.__sinval * v15.__sinval))
  {
LABEL_10:
    if (v12 <= v13)
      return;
    goto LABEL_11;
  }
  v24 = 1.0 / sqrtf(v23);
  v16 = (float)(v15.__sinval * v20) * v24;
  v17 = (float)(v15.__sinval * v21) * v24;
  v19 = (float)(v15.__sinval * v22) * v24;
  cosval = v15.__cosval;
LABEL_11:
  if (a4)
  {
    v25 = a1[15] * -2.0;
    v26 = a1[16] * -2.0;
    v27 = a1[17] * -2.0;
    v29 = a1[13];
    v28 = a1[14];
    v30 = (float)(v28 * v28) + -0.5;
    v31 = a1[11];
    v32 = a1[12];
    v33 = (float)((float)(v26 * v32) + (float)(v31 * v25)) + (float)(v29 * v27);
    v34 = (float)((float)(v25 * v30) - (float)((float)((float)(v32 * v27) - (float)(v29 * v26)) * v28))
        + (float)(v31 * v33);
    v35 = (float)((float)(v26 * v30) - (float)((float)((float)(v29 * v25) - (float)(v31 * v27)) * v28))
        + (float)(v32 * v33);
    v36 = (float)((float)(v27 * v30) - (float)((float)((float)(v31 * v26) - (float)(v32 * v25)) * v28))
        + (float)(v29 * v33);
    v37 = v34 + v34;
    v38 = v35 + v35;
    v39 = v36 + v36;
    v40 = (float)(cosval * cosval) + -0.5;
    v41 = (float)((float)(v17 * (float)(v35 + v35)) + (float)(v16 * (float)(v34 + v34))) + (float)(v19 * v39);
    v42 = (float)((float)(cosval * (float)((float)(v17 * v39) - (float)(v19 * (float)(v35 + v35))))
                + (float)((float)(v34 + v34) * v40))
        + (float)(v16 * v41);
    v43 = (float)((float)(cosval * (float)((float)(v19 * v37) - (float)(v16 * v39))) + (float)((float)(v35 + v35) * v40))
        + (float)(v17 * v41);
    v44 = (float)((float)(cosval * (float)((float)(v16 * v38) - (float)(v17 * v37))) + (float)(v39 * v40))
        + (float)(v19 * v41);
    v45 = v10 + v42;
    v46 = (float)((float)((float)(v16 * v28) - (float)(cosval * v31)) - (float)(v17 * v29)) + (float)(v32 * v19);
    v47 = (float)((float)((float)(v17 * v28) - (float)(cosval * v32)) - (float)(v19 * v31)) + (float)(v29 * v16);
    v48 = (float)((float)((float)(v19 * v28) - (float)(cosval * v29)) - (float)(v16 * v32)) + (float)(v31 * v17);
    v49 = (float)((float)((float)(v16 * v31) + (float)(cosval * v28)) + (float)(v17 * v32)) + (float)(v19 * v29);
    v50 = (float)(v9 + v43) + (float)(v9 + v43);
    v51 = (float)(v11 + v44) + (float)(v11 + v44);
    v52 = (float)(v121 * v121) + -0.5;
    v53 = (float)((float)(v119 * v50) + (float)(v118 * (float)(v45 + v45))) + (float)(v120 * v51);
    v54 = (float)((float)(v121 * (float)((float)(v119 * v51) - (float)(v120 * v50))) + (float)((float)(v45 + v45) * v52))
        + (float)(v118 * v53);
    v55 = (float)((float)(v121 * (float)((float)(v120 * (float)(v45 + v45)) - (float)(v118 * v51))) + (float)(v50 * v52))
        + (float)(v119 * v53);
    v56 = (float)((float)(v121 * (float)((float)(v118 * v50) - (float)(v119 * (float)(v45 + v45)))) + (float)(v51 * v52))
        + (float)(v120 * v53);
    v57 = v122 + v54;
    v58 = v123 + v55;
    v59 = v124 + v56;
    v60 = (float)((float)((float)(v49 * v118) + (float)(v121 * v46)) + (float)(v119 * v48)) - (float)(v47 * v120);
    v61 = (float)((float)((float)(v49 * v119) + (float)(v121 * v47)) + (float)(v120 * v46)) - (float)(v48 * v118);
    v62 = (float)((float)((float)(v49 * v120) + (float)(v121 * v48)) + (float)(v118 * v47)) - (float)(v46 * v119);
    v63 = (float)((float)((float)(v121 * v49) - (float)(v118 * v46)) - (float)(v119 * v47)) - (float)(v120 * v48);
    *a3 = v60;
    a3[1] = v61;
    a3[2] = v62;
    a3[3] = v63;
    a3[4] = v57;
    a3[5] = v58;
    a3[6] = v59;
    v64 = sqrtf((float)((float)((float)(v61 * v61) + (float)(v60 * v60)) + (float)(v62 * v62)) + (float)(v63 * v63));
    if (v64 != 0.0)
    {
      *a3 = v60 / v64;
      a3[1] = v61 / v64;
      a3[2] = v62 / v64;
      a3[3] = v63 / v64;
    }
  }
  else
  {
    v65 = a1[8] * -2.0;
    v66 = a1[9] * -2.0;
    v67 = a1[10] * -2.0;
    v69 = a1[6];
    v68 = a1[7];
    v70 = (float)(v68 * v68) + -0.5;
    v71 = a1[4];
    v72 = a1[5];
    v73 = (float)((float)(v66 * v72) + (float)(v71 * v65)) + (float)(v69 * v67);
    v74 = (float)((float)(v65 * v70) - (float)((float)((float)(v72 * v67) - (float)(v69 * v66)) * v68))
        + (float)(v71 * v73);
    v75 = (float)((float)(v66 * v70) - (float)((float)((float)(v69 * v65) - (float)(v71 * v67)) * v68))
        + (float)(v72 * v73);
    v76 = (float)((float)(v67 * v70) - (float)((float)((float)(v71 * v66) - (float)(v72 * v65)) * v68))
        + (float)(v69 * v73);
    v77 = (float)(v74 - v10) + (float)(v74 - v10);
    v78 = (float)(v75 - v9) + (float)(v75 - v9);
    v79 = (float)(v76 - v11) + (float)(v76 - v11);
    v80 = (float)(cosval * cosval) + -0.5;
    v81 = (float)((float)-(float)(v17 * v78) - (float)(v16 * v77)) - (float)(v19 * v79);
    v82 = (float)((float)(cosval * (float)((float)(v19 * v78) - (float)(v17 * v79))) + (float)(v77 * v80))
        - (float)(v16 * v81);
    v83 = (float)((float)(cosval * (float)((float)(v16 * v79) - (float)(v19 * v77))) + (float)(v78 * v80))
        - (float)(v17 * v81);
    v84 = (float)((float)(cosval * (float)((float)(v17 * v77) - (float)(v16 * v78))) + (float)(v79 * v80))
        - (float)(v19 * v81);
    v85 = (float)((float)((float)-(float)(v16 * v68) - (float)(cosval * v71)) + (float)(v17 * v69)) - (float)(v72 * v19);
    v86 = (float)((float)((float)-(float)(v17 * v68) - (float)(cosval * v72)) + (float)(v19 * v71)) - (float)(v69 * v16);
    v87 = (float)((float)((float)-(float)(v19 * v68) - (float)(cosval * v69)) + (float)(v16 * v72)) - (float)(v71 * v17);
    v88 = (float)((float)((float)(cosval * v68) - (float)(v71 * v16)) - (float)(v17 * v72)) - (float)(v19 * v69);
    v89 = v82 + v82;
    v90 = v84 + v84;
    v91 = (float)(v114 * v114) + -0.5;
    v92 = (float)((float)(v112 * (float)(v83 + v83)) + (float)(v111 * (float)(v82 + v82))) + (float)(v113 * v90);
    v93 = (float)((float)(v114 * (float)((float)(v112 * v90) - (float)(v113 * (float)(v83 + v83))))
                + (float)((float)(v82 + v82) * v91))
        + (float)(v111 * v92);
    v94 = (float)((float)(v114 * (float)((float)(v113 * (float)(v82 + v82)) - (float)(v111 * v90)))
                + (float)((float)(v83 + v83) * v91))
        + (float)(v112 * v92);
    v95 = (float)((float)(v114 * (float)((float)(v111 * (float)(v83 + v83)) - (float)(v112 * v89))) + (float)(v90 * v91))
        + (float)(v113 * v92);
    v96 = v115 + v93;
    v97 = v116 + v94;
    v98 = v117 + v95;
    v99 = (float)((float)((float)(v88 * v111) + (float)(v114 * v85)) + (float)(v112 * v87)) - (float)(v86 * v113);
    v100 = (float)((float)((float)(v88 * v112) + (float)(v114 * v86)) + (float)(v113 * v85)) - (float)(v87 * v111);
    v101 = (float)((float)((float)(v88 * v113) + (float)(v114 * v87)) + (float)(v111 * v86)) - (float)(v85 * v112);
    v102 = (float)((float)((float)(v114 * v88) - (float)(v111 * v85)) - (float)(v112 * v86)) - (float)(v113 * v87);
    *a2 = v99;
    a2[1] = v100;
    a2[2] = v101;
    a2[3] = v102;
    a2[4] = v96;
    a2[5] = v97;
    a2[6] = v98;
    v103 = sqrtf((float)((float)((float)(v100 * v100) + (float)(v99 * v99)) + (float)(v101 * v101)) + (float)(v102 * v102));
    if (v103 != 0.0)
    {
      *a2 = v99 / v103;
      a2[1] = v100 / v103;
      a2[2] = v101 / v103;
      a2[3] = v102 / v103;
    }
  }
}

uint64_t FixedJointVisualize(uint64_t result, float *a2, float *a3, float *a4, char a5)
{
  uint64_t v5;
  float v6;
  float v7[7];
  float v8[7];

  if ((a5 & 1) != 0)
  {
    v5 = result;
    v6 = physx::Ext::joint::computeJointFrames(v8, v7, a2, a3, a4);
    return (*(uint64_t (**)(uint64_t, float *, float *, float))(*(_QWORD *)v5 + 16))(v5, v8, v7, v6);
  }
  return result;
}

uint64_t physx::PxDefaultMemoryOutputStream::getSize(physx::PxDefaultMemoryOutputStream *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::PxDefaultMemoryOutputStream::getData(physx::PxDefaultMemoryOutputStream *this)
{
  return *((_QWORD *)this + 2);
}

void physx::PxDefaultMemoryInputData::~PxDefaultMemoryInputData(physx::PxDefaultMemoryInputData *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96));
}

const char *physx::PxDistanceJoint::getConcreteTypeName(physx::PxDistanceJoint *this)
{
  return "PxDistanceJoint";
}

void physx::Ext::DistanceJoint::~DistanceJoint(physx::Ext::DistanceJoint *this)
{
  *(_QWORD *)this = &off_24ED98220;
  *((_QWORD *)this + 3) = &unk_24ED983E0;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
}

{
  *(_QWORD *)this = &off_24ED98220;
  *((_QWORD *)this + 3) = &unk_24ED983E0;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
  (*(void (**)(uint64_t, physx::Ext::DistanceJoint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL physx::PxDistanceJoint::isKindOf(physx::PxDistanceJoint *this, const char *a2)
{
  return !strcmp("PxDistanceJoint", a2) || physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 64))(*(_QWORD *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  v6 = v43;
  v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  v10 = (float)(v44 * v44) + -0.5;
  v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  v16 = *(float *)(a1 + 48);
  v15 = *(float *)(a1 + 52);
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  v21 = v13 - (float)(v42 * v11);
  v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  v27 = (float)(v44 * v44) + -0.5;
  v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  v33 = *(float *)(a1 + 76);
  v32 = *(float *)(a1 + 80);
  v34 = *(float *)(a1 + 68);
  v35 = *(float *)(a1 + 72);
  v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getActors(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  v9 = *a3 / v8;
  v10 = v5 / v8;
  v11 = v6 / v8;
  v12 = v7 / v8;
  v13 = a3[4];
  v14 = a3[5];
  v15 = a3[6];
  v16 = 28 * a2;
  v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  v38 = 0;
  v39[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  v18 = (float)(v13 - v35) + (float)(v13 - v35);
  v19 = (float)(v14 - v36) + (float)(v14 - v36);
  v20 = (float)(v15 - v37) + (float)(v15 - v37);
  v21 = (float)(v34 * v34) + -0.5;
  v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  v29 = (float *)(*(_QWORD *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 56);
  result = *(float *)(v3 + 64);
  *(float *)(a3 + 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float result;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v73, &v72);
  v4 = 1.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v73 + 152))(&v66);
    v5 = 0.0;
    v4 = 1.0;
    v10 = *((float *)&v66 + 1);
    v11 = *(float *)&v66;
    v9 = v67;
    v12 = v68;
    v8 = v69;
    v7 = v70;
    v6 = v71;
  }
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = *(float *)(a1 + 64);
  v16 = *(float *)(a1 + 48);
  v17 = *(float *)(a1 + 52);
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = *(float *)(a1 + 40);
  v22 = *(float *)(a1 + 44);
  v23 = 0.0;
  v24 = 0.0;
  if (v72)
  {
    v64 = v7;
    v65 = v8;
    v62 = *(float *)(a1 + 56);
    v63 = v6;
    v60 = *(float *)(a1 + 64);
    v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v72 + 152))(&v66);
    v15 = v60;
    v14 = v61;
    v13 = v62;
    v6 = v63;
    v7 = v64;
    v8 = v65;
    v23 = *((float *)&v66 + 1);
    v24 = *(float *)&v66;
    v20 = v67;
    v4 = v68;
    v19 = v69;
    v18 = v70;
    v5 = v71;
  }
  v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  v29 = v15 + v15;
  v30 = v14 + v14;
  v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  v32 = (float)(v12 * v12) + -0.5;
  v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v39 = (float)(v4 * v4) + -0.5;
  v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  v45 = *(float *)(a1 + 76);
  v44 = *(float *)(a1 + 80);
  v46 = *(float *)(a1 + 68);
  v47 = *(float *)(a1 + 72);
  v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  v52 = (float)(v41 - v35) + (float)(v41 - v35);
  v53 = (float)(v42 - v34) + (float)(v42 - v34);
  v54 = (float)(v43 - v33) + (float)(v43 - v33);
  v55 = (float)(v25 * v25) + -0.5;
  v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44[3];
  float v45;
  float v46;
  float v47;
  float v48[3];
  _WORD *v49;
  _WORD *v50;

  v49 = 0;
  v50 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  v7 = (float)(v37 * v37) + -0.5;
  v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v15 = (float)(v33 * v33) + -0.5;
  v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  v20 = (float)(v46 * v11) - (float)(v47 * v10);
  v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  v24 = v22 + v22;
  v25 = (float)(v21 - v39) + (float)(v21 - v39);
  v26 = v23 + v23;
  v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BYTE v21[12];
  float v22;
  float v23;
  float v24;
  _BYTE v25[12];
  _WORD *v26;
  _WORD *v27;

  v26 = 0;
  v27 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  v6 = (float)(v14 * v14) + -0.5;
  v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 120))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 128))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  __int16 v4;

  v2 = *(_QWORD *)(a1 + 96);
  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 96));
  v5 = 0;
  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v6, &v5);
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  v4 = 28 * a2;
  v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  v8 = (float)(v25 * v25) + -0.5;
  v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  v14 = *(float *)(a1 + v4 + 48);
  v13 = *(float *)(a1 + v4 + 52);
  v15 = *(float *)(a1 + v4 + 40);
  v16 = *(float *)(a1 + v4 + 44);
  v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  v20 = (float *)(*(_QWORD *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  uint64_t result;
  float *v5;
  uint64_t v6;
  float *v7;
  float32x2_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10[0] = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0])
      return result;
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    v6 = *(_QWORD *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    v7 = (float *)&v8[5];
  }
  *v7 = *v7 - *v5;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onConstraintRelease(_QWORD *a1)
{
  if (a1[13])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[13] = 0;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t physx::Ext::DistanceJoint::getPrep(physx::Ext::DistanceJoint *this)
{
  return physx::Ext::DistanceJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 80))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v3 = *(_QWORD *)(a1 - 24);
  v2 = a1 - 24;
  *(_QWORD *)(v2 + 104) = 0;
  return (*(uint64_t (**)(uint64_t))(v3 + 32))(v2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t `non-virtual thunk to'physx::Ext::DistanceJoint::getPrep(physx::Ext::DistanceJoint *this)
{
  return physx::Ext::DistanceJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void `non-virtual thunk to'physx::Ext::DistanceJoint::~DistanceJoint(physx::Ext::DistanceJoint *this)
{
  *((_QWORD *)this - 3) = &off_24ED98220;
  *(_QWORD *)this = &unk_24ED983E0;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
}

{
  char *v1;

  *((_QWORD *)this - 3) = &off_24ED98220;
  v1 = (char *)this - 24;
  *(_QWORD *)this = &unk_24ED983E0;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96));
}

const char *physx::PxFixedJoint::getConcreteTypeName(physx::PxFixedJoint *this)
{
  return "PxFixedJoint";
}

void physx::Ext::FixedJoint::~FixedJoint(physx::Ext::FixedJoint *this)
{
  *(_QWORD *)this = &off_24ED98448;
  *((_QWORD *)this + 3) = &unk_24ED985B8;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
}

{
  *(_QWORD *)this = &off_24ED98448;
  *((_QWORD *)this + 3) = &unk_24ED985B8;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
  (*(void (**)(uint64_t, physx::Ext::FixedJoint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL physx::PxFixedJoint::isKindOf(physx::PxFixedJoint *this, const char *a2)
{
  return !strcmp("PxFixedJoint", a2) || physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 64))(*(_QWORD *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  v6 = v43;
  v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  v10 = (float)(v44 * v44) + -0.5;
  v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  v16 = *(float *)(a1 + 48);
  v15 = *(float *)(a1 + 52);
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  v21 = v13 - (float)(v42 * v11);
  v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  v27 = (float)(v44 * v44) + -0.5;
  v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  v33 = *(float *)(a1 + 76);
  v32 = *(float *)(a1 + 80);
  v34 = *(float *)(a1 + 68);
  v35 = *(float *)(a1 + 72);
  v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getActors(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  v9 = *a3 / v8;
  v10 = v5 / v8;
  v11 = v6 / v8;
  v12 = v7 / v8;
  v13 = a3[4];
  v14 = a3[5];
  v15 = a3[6];
  v16 = 28 * a2;
  v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  v38 = 0;
  v39[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  v18 = (float)(v13 - v35) + (float)(v13 - v35);
  v19 = (float)(v14 - v36) + (float)(v14 - v36);
  v20 = (float)(v15 - v37) + (float)(v15 - v37);
  v21 = (float)(v34 * v34) + -0.5;
  v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  v29 = (float *)(*(_QWORD *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 56);
  result = *(float *)(v3 + 64);
  *(float *)(a3 + 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float result;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v73, &v72);
  v4 = 1.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v73 + 152))(&v66);
    v5 = 0.0;
    v4 = 1.0;
    v10 = *((float *)&v66 + 1);
    v11 = *(float *)&v66;
    v9 = v67;
    v12 = v68;
    v8 = v69;
    v7 = v70;
    v6 = v71;
  }
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = *(float *)(a1 + 64);
  v16 = *(float *)(a1 + 48);
  v17 = *(float *)(a1 + 52);
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = *(float *)(a1 + 40);
  v22 = *(float *)(a1 + 44);
  v23 = 0.0;
  v24 = 0.0;
  if (v72)
  {
    v64 = v7;
    v65 = v8;
    v62 = *(float *)(a1 + 56);
    v63 = v6;
    v60 = *(float *)(a1 + 64);
    v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v72 + 152))(&v66);
    v15 = v60;
    v14 = v61;
    v13 = v62;
    v6 = v63;
    v7 = v64;
    v8 = v65;
    v23 = *((float *)&v66 + 1);
    v24 = *(float *)&v66;
    v20 = v67;
    v4 = v68;
    v19 = v69;
    v18 = v70;
    v5 = v71;
  }
  v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  v29 = v15 + v15;
  v30 = v14 + v14;
  v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  v32 = (float)(v12 * v12) + -0.5;
  v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v39 = (float)(v4 * v4) + -0.5;
  v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  v45 = *(float *)(a1 + 76);
  v44 = *(float *)(a1 + 80);
  v46 = *(float *)(a1 + 68);
  v47 = *(float *)(a1 + 72);
  v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  v52 = (float)(v41 - v35) + (float)(v41 - v35);
  v53 = (float)(v42 - v34) + (float)(v42 - v34);
  v54 = (float)(v43 - v33) + (float)(v43 - v33);
  v55 = (float)(v25 * v25) + -0.5;
  v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44[3];
  float v45;
  float v46;
  float v47;
  float v48[3];
  _WORD *v49;
  _WORD *v50;

  v49 = 0;
  v50 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  v7 = (float)(v37 * v37) + -0.5;
  v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v15 = (float)(v33 * v33) + -0.5;
  v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  v20 = (float)(v46 * v11) - (float)(v47 * v10);
  v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  v24 = v22 + v22;
  v25 = (float)(v21 - v39) + (float)(v21 - v39);
  v26 = v23 + v23;
  v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BYTE v21[12];
  float v22;
  float v23;
  float v24;
  _BYTE v25[12];
  _WORD *v26;
  _WORD *v27;

  v26 = 0;
  v27 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  v6 = (float)(v14 * v14) + -0.5;
  v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 120))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 128))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  __int16 v4;

  v2 = *(_QWORD *)(a1 + 96);
  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 96));
  v5 = 0;
  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v6, &v5);
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  v4 = 28 * a2;
  v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  v8 = (float)(v25 * v25) + -0.5;
  v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  v14 = *(float *)(a1 + v4 + 48);
  v13 = *(float *)(a1 + v4 + 52);
  v15 = *(float *)(a1 + v4 + 40);
  v16 = *(float *)(a1 + v4 + 44);
  v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  v20 = (float *)(*(_QWORD *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  uint64_t result;
  float *v5;
  uint64_t v6;
  float *v7;
  float32x2_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10[0] = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0])
      return result;
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    v6 = *(_QWORD *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    v7 = (float *)&v8[5];
  }
  *v7 = *v7 - *v5;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onConstraintRelease(_QWORD *a1)
{
  if (a1[13])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[13] = 0;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t physx::Ext::FixedJoint::getPrep(physx::Ext::FixedJoint *this)
{
  return physx::Ext::FixedJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 80))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v3 = *(_QWORD *)(a1 - 24);
  v2 = a1 - 24;
  *(_QWORD *)(v2 + 104) = 0;
  return (*(uint64_t (**)(uint64_t))(v3 + 32))(v2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t `non-virtual thunk to'physx::Ext::FixedJoint::getPrep(physx::Ext::FixedJoint *this)
{
  return physx::Ext::FixedJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void `non-virtual thunk to'physx::Ext::FixedJoint::~FixedJoint(physx::Ext::FixedJoint *this)
{
  *((_QWORD *)this - 3) = &off_24ED98448;
  *(_QWORD *)this = &unk_24ED985B8;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
}

{
  char *v1;

  *((_QWORD *)this - 3) = &off_24ED98448;
  v1 = (char *)this - 24;
  *(_QWORD *)this = &unk_24ED985B8;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

float physx::Ext::DistanceJoint::DistanceJoint(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  _QWORD *v7;
  uint64_t v8;
  float result;
  __int16 v10;

  v10 = 3;
  v7 = (_QWORD *)physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::Joint(a1, 260, &v10, a3, a4, a5, a6, 0x70u);
  *v7 = &off_24ED97D10;
  v7[3] = &unk_24ED97EE0;
  v8 = v7[13];
  *(_QWORD *)(v8 + 92) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  result = *a2 * 0.025;
  *(float *)(v8 + 88) = result;
  *(_WORD *)(v8 + 100) = 2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13;
  uint64_t v14;
  __int32 v15;
  float32x4_t v24;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(_QWORD *)a1 = &off_24ED98220;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24ED983E0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a8)
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else
    v14 = 0;
  v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned __int128 *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned __int128 *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(_QWORD *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  v28 = v63;
  v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  v32 = (float)(v64 * v64) + -0.5;
  v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  v38 = a5->f32[2];
  v37 = a5->f32[3];
  v39 = a5->f32[1];
  v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  v42 = v35 - (float)(v62 * v33);
  v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  v44 = v63;
  v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  v48 = (float)(v64 * v64) + -0.5;
  v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  v54 = a7->f32[2];
  v53 = a7->f32[3];
  v55 = a7->f32[1];
  v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v14 = _Q0;
  *(_QWORD *)(a1 + 104) = v14;
  return a1;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13;
  uint64_t v14;
  __int32 v15;
  float32x4_t v24;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(_QWORD *)a1 = &off_24ED98448;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24ED985B8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a8)
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else
    v14 = 0;
  v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned __int128 *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned __int128 *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(_QWORD *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  v28 = v63;
  v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  v32 = (float)(v64 * v64) + -0.5;
  v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  v38 = a5->f32[2];
  v37 = a5->f32[3];
  v39 = a5->f32[1];
  v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  v42 = v35 - (float)(v62 * v33);
  v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  v44 = v63;
  v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  v48 = (float)(v64 * v64) + -0.5;
  v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  v54 = a7->f32[2];
  v53 = a7->f32[3];
  v55 = a7->f32[1];
  v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v14 = _Q0;
  *(_QWORD *)(a1 + 104) = v14;
  return a1;
}

float physx::Ext::joint::computeDerived(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, char a7)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float result;

  physx::Ext::joint::computeJointFrames(a4, a5, a1, a2, a3);
  v11 = *a4;
  v12 = *a5;
  if ((a7 & 1) != 0)
  {
    v14 = a5[1];
    v13 = a5[2];
    v15 = a5[3];
    if ((float)((float)((float)((float)(a4[1] * v14) + (float)(v11 * v12)) + (float)(a4[2] * v13))
               + (float)(a4[3] * v15)) < 0.0)
    {
      v12 = -v12;
      v14 = -v14;
      v13 = -v13;
      v15 = -v15;
      *a5 = v12;
      a5[1] = v14;
      a5[2] = v13;
      a5[3] = v15;
      v11 = *a4;
    }
  }
  else
  {
    v13 = a5[2];
    v15 = a5[3];
    v14 = a5[1];
  }
  v16 = a4[1];
  v17 = a4[2];
  v18 = a4[3];
  v19 = a5[4] - a4[4];
  v20 = a5[5] - a4[5];
  v21 = a5[6] - a4[6];
  v22 = v19 + v19;
  v23 = v20 + v20;
  v24 = v21 + v21;
  v25 = (float)(v18 * v18) + -0.5;
  v26 = (float)((float)-(float)(v16 * v23) - (float)(v11 * v22)) - (float)(v17 * v24);
  *a6 = (float)((float)((float)(v18 * v12) - (float)(v11 * v15)) - (float)(v16 * v13)) + (float)(v14 * v17);
  a6[1] = (float)((float)((float)(v18 * v14) - (float)(v16 * v15)) - (float)(v17 * v12)) + (float)(v13 * v11);
  a6[2] = (float)((float)((float)(v18 * v13) - (float)(v17 * v15)) - (float)(v11 * v14)) + (float)(v12 * v16);
  a6[3] = (float)((float)((float)(v12 * v11) + (float)(v18 * v15)) + (float)(v16 * v14)) + (float)(v17 * v13);
  result = (float)((float)(v18 * (float)((float)(v16 * v22) - (float)(v11 * v23))) + (float)(v24 * v25))
         - (float)(v17 * v26);
  a6[4] = (float)((float)(v18 * (float)((float)(v17 * v23) - (float)(v16 * v24))) + (float)(v22 * v25))
        - (float)(v11 * v26);
  a6[5] = (float)((float)(v18 * (float)((float)(v11 * v24) - (float)(v17 * v22))) + (float)(v23 * v25))
        - (float)(v16 * v26);
  a6[6] = result;
  return result;
}

_QWORD *physx::PxPrismaticJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  float *v13;
  double v14;
  uint64_t v15;

  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::PrismaticJoint>::getName() [T = physx::Ext::PrismaticJoint]";
  else
    v11 = "<allocation names disabled>";
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtPrismaticJoint.cpp", 45);
  v13 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = physx::Ext::PrismaticJoint::PrismaticJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t, double))(*(_QWORD *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::PrismaticJoint::sShaders, 128, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(_QWORD *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

uint64_t physx::Ext::PrismaticJoint::setProjectionAngularTolerance(physx::Ext::PrismaticJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 112) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::PrismaticJoint::getProjectionAngularTolerance(physx::Ext::PrismaticJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 112);
}

uint64_t physx::Ext::PrismaticJoint::setProjectionLinearTolerance(physx::Ext::PrismaticJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 108) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::PrismaticJoint::getProjectionLinearTolerance(physx::Ext::PrismaticJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 108);
}

uint64_t physx::Ext::PrismaticJoint::getPrismaticJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(_QWORD *)(this + 104) + 116);
  return this;
}

uint64_t physx::Ext::PrismaticJoint::setPrismaticJointFlags(uint64_t a1, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 96;
  v2 = *(_QWORD *)(a1 + 96);
  *(_WORD *)(*(_QWORD *)(v3 + 8) + 116) = *a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
}

uint64_t physx::Ext::PrismaticJoint::setPrismaticJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *(_QWORD *)(a1 + 104);
  if (a3)
    v4 = *(_WORD *)(v3 + 116) | a2;
  else
    v4 = *(_WORD *)(v3 + 116) & ~a2;
  *(_WORD *)(v3 + 116) = v4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::PrismaticJoint::getLimit@<S0>(physx::Ext::PrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  v2 = *((_QWORD *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 80);
  result = *(float *)(v2 + 96);
  *(float *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 20) = *(_QWORD *)(v2 + 100);
  return result;
}

uint64_t physx::Ext::PrismaticJoint::setLimit(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *a2;
  *(_OWORD *)(v2 + 92) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 80) = v3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::PrismaticJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 104), 128);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t PrismaticJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float32x2_t *a9, float32x2_t *a10)
{
  __int16 v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float32_t v21;
  float32_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x2_t v48;
  float v49;
  float32x2_t v50;
  float v51;
  float v52[3];
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x2_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;

  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v53, a1, a4, (uint64_t)&v67, &v61, a2, (float *)a5, a6, a7);
  if ((float)((float)((float)((float)(v68 * v61.f32[1]) + (float)(v67 * v61.f32[0])) + (float)(v69 * v62))
             + (float)(v70 * v63)) < 0.0)
  {
    v61.f32[0] = -v61.f32[0];
    v61.f32[1] = -v61.f32[1];
    v62 = -v62;
    v63 = -v63;
  }
  v13 = *(_WORD *)(a5 + 116);
  v14 = (v13 & 2) != 0 && *(float *)(a5 + 104) >= *(float *)(a5 + 100);
  v15 = (float)(v64 - v71) + (float)(v64 - v71);
  v16 = (float)(v65 - v72) + (float)(v65 - v72);
  v17 = (float)(v66 - v73) + (float)(v66 - v73);
  v18 = (float)(v70 * v70) + -0.5;
  v19 = (float)((float)(v68 * v16) + (float)(v67 * v15)) + (float)(v69 * v17);
  v52[0] = (float)((float)(v15 * v18) - (float)((float)((float)(v68 * v17) - (float)(v69 * v16)) * v70))
         + (float)(v67 * v19);
  v52[1] = (float)((float)(v16 * v18) - (float)((float)((float)(v69 * v15) - (float)(v67 * v17)) * v70))
         + (float)(v68 * v19);
  v52[2] = (float)((float)(v17 * v18) - (float)((float)((float)(v67 * v16) - (float)(v68 * v15)) * v70))
         + (float)(v69 * v19);
  if (v14)
    v20 = 7;
  else
    v20 = 6;
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v53, &v67, (float *)&v61, v52, v20, 7, (float *)&v50, (float *)&v48);
  v21 = v51 + a6[3].f32[0];
  *a9 = vadd_f32(v50, a6[2]);
  a9[1].f32[0] = v21;
  v22 = v49 + a7[3].f32[0];
  *a10 = vadd_f32(v48, a7[2]);
  a10[1].f32[0] = v22;
  if ((v13 & 2) != 0 && !v14)
  {
    v23 = (float)(v70 * v70) + -0.5;
    v24 = 0.0;
    v25 = (float)((float)(v68 * 0.0) + (float)(v67 * 2.0)) + (float)(v69 * 0.0);
    v26 = (float)(v70 * (float)((float)(v69 * -0.0) + (float)(v68 * 0.0))) + (float)(v23 * 2.0);
    v27 = (float)(v70 * (float)((float)(v67 * -0.0) + (float)(v69 * 2.0))) + (float)(v23 * 0.0);
    v28 = (float)(v70 * (float)((float)(v68 * -2.0) + (float)(v67 * 0.0))) + (float)(v23 * 0.0);
    v29 = v52[0];
    v30 = *(float *)(a5 + 100);
    v31 = *(float *)(a5 + 92);
    if (v31 <= 0.0 && *(float *)(a5 + 88) <= 0.0)
      v24 = *(float *)(a5 + 96);
    v32 = v26 + (float)(v67 * v25);
    v33 = v27 + (float)(v68 * v25);
    v34 = v28 + (float)(v69 * v25);
    if ((float)(v52[0] + v24) > v30)
    {
      v35 = v54;
      v54 += 80;
      *(_WORD *)(v35 + 78) = 0;
      *(float *)v35 = v32;
      *(float *)(v35 + 4) = v33;
      *(float *)(v35 + 8) = v34;
      v36 = (float)(v57 * v32) - (float)(v55 * v34);
      v37 = (float)(v55 * v33) - (float)(v56 * v32);
      *(float *)(v35 + 16) = (float)(v56 * v34) - (float)(v57 * v33);
      *(float *)(v35 + 20) = v36;
      *(float *)(v35 + 24) = v37;
      *(float *)(v35 + 32) = v32;
      *(float *)(v35 + 36) = v33;
      *(float *)(v35 + 40) = v34;
      v38 = (float)(v60 * v32) - (float)(v58 * v34);
      v39 = (float)(v58 * v33) - (float)(v59 * v32);
      *(float *)(v35 + 48) = (float)(v59 * v34) - (float)(v60 * v33);
      *(float *)(v35 + 52) = v38;
      *(float *)(v35 + 56) = v39;
      *(float *)(v35 + 12) = v30 - v29;
      physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v53, v35, a5 + 80);
      v31 = *(float *)(a5 + 92);
    }
    v40 = *(float *)(a5 + 104);
    if (v31 <= 0.0 && *(float *)(a5 + 88) <= 0.0)
      v41 = *(float *)(a5 + 96);
    else
      v41 = 0.0;
    if ((float)(v41 - v29) > (float)-v40)
    {
      v42 = v54;
      v54 += 80;
      *(_WORD *)(v42 + 78) = 0;
      *(float *)v42 = -v32;
      *(float *)(v42 + 4) = -v33;
      *(float *)(v42 + 8) = -v34;
      v43 = (float)(v34 * v55) + (float)(v57 * (float)-v32);
      v44 = (float)(v32 * v56) + (float)(v55 * (float)-v33);
      *(float *)(v42 + 16) = (float)(v33 * v57) + (float)(v56 * (float)-v34);
      *(float *)(v42 + 20) = v43;
      *(float *)(v42 + 24) = v44;
      *(float *)(v42 + 32) = -v32;
      *(float *)(v42 + 36) = -v33;
      *(float *)(v42 + 40) = -v34;
      v45 = (float)(v34 * v58) + (float)(v60 * (float)-v32);
      v46 = (float)(v32 * v59) + (float)(v58 * (float)-v33);
      *(float *)(v42 + 48) = (float)(v33 * v60) + (float)(v59 * (float)-v34);
      *(float *)(v42 + 52) = v45;
      *(float *)(v42 + 56) = v46;
      *(float *)(v42 + 12) = v29 - v40;
      physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v53, v42, a5 + 80);
    }
  }
  return -858993459 * ((unint64_t)(v54 - v53) >> 4);
}

void PrismaticJointProject(float *a1, float *a2, float *a3, int a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  __float2 v14;
  float v15;
  float v16;
  float cosval;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;

  physx::Ext::joint::computeDerived(a1, a2, a3, &v117, &v110, &v103, 1);
  v9 = v108;
  v8 = v109;
  v10 = a1[27];
  v11 = (float)(v9 * v9) + (float)(v8 * v8);
  v12 = v10 * v10;
  if (v11 > (float)(v10 * v10))
  {
    v13 = 1.0 / sqrtf(v11);
    v9 = v10 * (float)(v108 * v13);
    v8 = v10 * (float)(v109 * v13);
  }
  v14 = __sincosf_stret(a1[28] * 0.5);
  if (v14.__sinval > 0.9999)
  {
    v15 = v103;
    v16 = v104;
    v18 = v105;
    cosval = v106;
    goto LABEL_10;
  }
  cosval = v106;
  v15 = v103;
  if (v106 >= 0.0)
  {
    v16 = v104;
    v18 = v105;
    v19 = v103;
    v20 = v104;
    v21 = v105;
  }
  else
  {
    v19 = -v103;
    v16 = v104;
    v18 = v105;
    v20 = -v104;
    v21 = -v105;
  }
  v22 = (float)((float)(v20 * v20) + (float)(v19 * v19)) + (float)(v21 * v21);
  if (v22 <= (float)(v14.__sinval * v14.__sinval))
  {
LABEL_10:
    if (v11 <= v12)
      return;
    goto LABEL_11;
  }
  v23 = 1.0 / sqrtf(v22);
  v15 = (float)(v14.__sinval * v19) * v23;
  v16 = (float)(v14.__sinval * v20) * v23;
  v18 = (float)(v14.__sinval * v21) * v23;
  cosval = v14.__cosval;
LABEL_11:
  if (a4)
  {
    v24 = a1[15] * -2.0;
    v25 = a1[16] * -2.0;
    v26 = a1[17] * -2.0;
    v28 = a1[13];
    v27 = a1[14];
    v29 = (float)(v27 * v27) + -0.5;
    v30 = a1[11];
    v31 = a1[12];
    v32 = (float)((float)(v25 * v31) + (float)(v30 * v24)) + (float)(v28 * v26);
    v33 = (float)((float)(v24 * v29) - (float)((float)((float)(v31 * v26) - (float)(v28 * v25)) * v27))
        + (float)(v30 * v32);
    v34 = (float)((float)(v25 * v29) - (float)((float)((float)(v28 * v24) - (float)(v30 * v26)) * v27))
        + (float)(v31 * v32);
    v35 = (float)((float)(v26 * v29) - (float)((float)((float)(v30 * v25) - (float)(v31 * v24)) * v27))
        + (float)(v28 * v32);
    v36 = v33 + v33;
    v37 = v34 + v34;
    v38 = v35 + v35;
    v39 = (float)(cosval * cosval) + -0.5;
    v40 = (float)((float)(v16 * (float)(v34 + v34)) + (float)(v15 * (float)(v33 + v33))) + (float)(v18 * v38);
    v41 = (float)((float)(cosval * (float)((float)(v16 * v38) - (float)(v18 * (float)(v34 + v34))))
                + (float)((float)(v33 + v33) * v39))
        + (float)(v15 * v40);
    v42 = (float)((float)(cosval * (float)((float)(v18 * v36) - (float)(v15 * v38))) + (float)((float)(v34 + v34) * v39))
        + (float)(v16 * v40);
    v43 = (float)((float)(cosval * (float)((float)(v15 * v37) - (float)(v16 * v36))) + (float)(v38 * v39))
        + (float)(v18 * v40);
    v44 = (float)((float)((float)(v15 * v27) - (float)(cosval * v30)) - (float)(v16 * v28)) + (float)(v31 * v18);
    v45 = (float)((float)((float)(v16 * v27) - (float)(cosval * v31)) - (float)(v18 * v30)) + (float)(v28 * v15);
    v46 = (float)((float)((float)(v18 * v27) - (float)(cosval * v28)) - (float)(v15 * v31)) + (float)(v30 * v16);
    v47 = (float)((float)((float)(v15 * v30) + (float)(cosval * v27)) + (float)(v16 * v31)) + (float)(v18 * v28);
    v48 = (float)(v107 + v41) + (float)(v107 + v41);
    v49 = (float)(v9 + v42) + (float)(v9 + v42);
    v50 = (float)(v8 + v43) + (float)(v8 + v43);
    v51 = (float)(v120 * v120) + -0.5;
    v52 = (float)((float)(v118 * v49) + (float)(v117 * v48)) + (float)(v119 * v50);
    v53 = (float)((float)(v120 * (float)((float)(v118 * v50) - (float)(v119 * v49))) + (float)(v48 * v51))
        + (float)(v117 * v52);
    v54 = (float)((float)(v120 * (float)((float)(v119 * v48) - (float)(v117 * v50))) + (float)(v49 * v51))
        + (float)(v118 * v52);
    v55 = (float)((float)(v120 * (float)((float)(v117 * v49) - (float)(v118 * v48))) + (float)(v50 * v51))
        + (float)(v119 * v52);
    v56 = v121 + v53;
    v57 = v122 + v54;
    v58 = v123 + v55;
    v59 = (float)((float)((float)(v47 * v117) + (float)(v120 * v44)) + (float)(v118 * v46)) - (float)(v45 * v119);
    v60 = (float)((float)((float)(v47 * v118) + (float)(v120 * v45)) + (float)(v119 * v44)) - (float)(v46 * v117);
    v61 = (float)((float)((float)(v47 * v119) + (float)(v120 * v46)) + (float)(v117 * v45)) - (float)(v44 * v118);
    v62 = (float)((float)((float)(v120 * v47) - (float)(v117 * v44)) - (float)(v118 * v45)) - (float)(v119 * v46);
    *a3 = v59;
    a3[1] = v60;
    a3[2] = v61;
    a3[3] = v62;
    a3[4] = v56;
    a3[5] = v57;
    a3[6] = v58;
    v63 = sqrtf((float)((float)((float)(v60 * v60) + (float)(v59 * v59)) + (float)(v61 * v61)) + (float)(v62 * v62));
    if (v63 != 0.0)
    {
      *a3 = v59 / v63;
      a3[1] = v60 / v63;
      a3[2] = v61 / v63;
      a3[3] = v62 / v63;
    }
  }
  else
  {
    v64 = a1[8] * -2.0;
    v65 = a1[9] * -2.0;
    v66 = a1[10] * -2.0;
    v68 = a1[6];
    v67 = a1[7];
    v69 = (float)(v67 * v67) + -0.5;
    v70 = a1[4];
    v71 = a1[5];
    v72 = (float)((float)(v65 * v71) + (float)(v70 * v64)) + (float)(v68 * v66);
    v73 = (float)((float)(v64 * v69) - (float)((float)((float)(v71 * v66) - (float)(v68 * v65)) * v67))
        + (float)(v70 * v72);
    v74 = (float)((float)(v65 * v69) - (float)((float)((float)(v68 * v64) - (float)(v70 * v66)) * v67))
        + (float)(v71 * v72);
    v75 = (float)((float)(v66 * v69) - (float)((float)((float)(v70 * v65) - (float)(v71 * v64)) * v67))
        + (float)(v68 * v72);
    v76 = (float)(v73 - v107) + (float)(v73 - v107);
    v77 = (float)(v74 - v9) + (float)(v74 - v9);
    v78 = (float)(v75 - v8) + (float)(v75 - v8);
    v79 = (float)(cosval * cosval) + -0.5;
    v80 = (float)((float)-(float)(v16 * v77) - (float)(v15 * v76)) - (float)(v18 * v78);
    v81 = (float)((float)(cosval * (float)((float)(v18 * v77) - (float)(v16 * v78))) + (float)(v76 * v79))
        - (float)(v15 * v80);
    v82 = (float)((float)(cosval * (float)((float)(v15 * v78) - (float)(v18 * v76))) + (float)(v77 * v79))
        - (float)(v16 * v80);
    v83 = (float)((float)(cosval * (float)((float)(v16 * v76) - (float)(v15 * v77))) + (float)(v78 * v79))
        - (float)(v18 * v80);
    v84 = (float)((float)((float)-(float)(v15 * v67) - (float)(cosval * v70)) + (float)(v16 * v68)) - (float)(v71 * v18);
    v85 = (float)((float)((float)-(float)(v16 * v67) - (float)(cosval * v71)) + (float)(v18 * v70)) - (float)(v68 * v15);
    v86 = (float)((float)((float)-(float)(v18 * v67) - (float)(cosval * v68)) + (float)(v15 * v71)) - (float)(v70 * v16);
    v87 = (float)((float)((float)(cosval * v67) - (float)(v70 * v15)) - (float)(v16 * v71)) - (float)(v18 * v68);
    v88 = v81 + v81;
    v89 = v83 + v83;
    v90 = (float)(v113 * v113) + -0.5;
    v91 = (float)((float)(v111 * (float)(v82 + v82)) + (float)(v110 * (float)(v81 + v81))) + (float)(v112 * v89);
    v92 = (float)((float)(v113 * (float)((float)(v111 * v89) - (float)(v112 * (float)(v82 + v82))))
                + (float)((float)(v81 + v81) * v90))
        + (float)(v110 * v91);
    v93 = (float)((float)(v113 * (float)((float)(v112 * (float)(v81 + v81)) - (float)(v110 * v89)))
                + (float)((float)(v82 + v82) * v90))
        + (float)(v111 * v91);
    v94 = (float)((float)(v113 * (float)((float)(v110 * (float)(v82 + v82)) - (float)(v111 * v88))) + (float)(v89 * v90))
        + (float)(v112 * v91);
    v95 = v114 + v92;
    v96 = v115 + v93;
    v97 = v116 + v94;
    v98 = (float)((float)((float)(v87 * v110) + (float)(v113 * v84)) + (float)(v111 * v86)) - (float)(v85 * v112);
    v99 = (float)((float)((float)(v87 * v111) + (float)(v113 * v85)) + (float)(v112 * v84)) - (float)(v86 * v110);
    v100 = (float)((float)((float)(v87 * v112) + (float)(v113 * v86)) + (float)(v110 * v85)) - (float)(v84 * v111);
    v101 = (float)((float)((float)(v113 * v87) - (float)(v110 * v84)) - (float)(v111 * v85)) - (float)(v112 * v86);
    *a2 = v98;
    a2[1] = v99;
    a2[2] = v100;
    a2[3] = v101;
    a2[4] = v95;
    a2[5] = v96;
    a2[6] = v97;
    v102 = sqrtf((float)((float)((float)(v99 * v99) + (float)(v98 * v98)) + (float)(v100 * v100)) + (float)(v101 * v101));
    if (v102 != 0.0)
    {
      *a2 = v98 / v102;
      a2[1] = v99 / v102;
      a2[2] = v100 / v102;
      a2[3] = v101 / v102;
    }
  }
}

void PrismaticJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8;
  float v9;
  float v10;
  float v11[4];
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v8 = physx::Ext::joint::computeJointFrames(&v15, v11, (float *)a2, a3, a4);
  if ((a5 & 1) != 0)
    (*(void (**)(uint64_t, float *, float *, float))(*(_QWORD *)a1 + 16))(a1, &v15, v11, v8);
  if ((a5 & 2) != 0 && (*(_WORD *)(a2 + 116) & 2) != 0)
  {
    v9 = (float)((float)((float)((float)(v12 - v19) + (float)(v12 - v19)) * (float)((float)(v18 * v18) + -0.5))
               - (float)((float)((float)(v16 * (float)((float)(v14 - v21) + (float)(v14 - v21)))
                               - (float)(v17 * (float)((float)(v13 - v20) + (float)(v13 - v20))))
                       * v18))
       + (float)(v15
               * (float)((float)((float)((float)((float)(v13 - v20) + (float)(v13 - v20)) * v16)
                               + (float)(v15 * (float)((float)(v12 - v19) + (float)(v12 - v19))))
                       + (float)(v17 * (float)((float)(v14 - v21) + (float)(v14 - v21)))));
    v10 = 0.0;
    if (*(float *)(a2 + 92) <= 0.0 && *(float *)(a2 + 88) <= 0.0)
      v10 = *(float *)(a2 + 96);
    (*(void (**)(uint64_t, float *, float *, BOOL))(*(_QWORD *)a1 + 24))(a1, &v15, v11, v9 < (float)(v10 + *(float *)(a2 + 104)));
    (*(void (**)(uint64_t, float *, float *, BOOL))(*(_QWORD *)a1 + 24))(a1, &v15, v11, v9 > (float)(*(float *)(a2 + 100) - v10));
  }
}

_QWORD *physx::PxRevoluteJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::RevoluteJoint>::getName() [T = physx::Ext::RevoluteJoint]";
  else
    v11 = "<allocation names disabled>";
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRevoluteJoint.cpp", 45);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = physx::Ext::RevoluteJoint::RevoluteJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t, double))(*(_QWORD *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::RevoluteJoint::sShaders, 144, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(_QWORD *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

float physx::Ext::RevoluteJoint::getAngle(physx::Ext::RevoluteJoint *this)
{
  float v1;
  float v2;
  float v3;
  _BOOL4 v4;
  float v5;
  float result;
  float v7[3];
  float v8;

  (*(void (**)(float *__return_ptr))(*(_QWORD *)this + 80))(v7);
  v1 = 1.0;
  if (v7[0] == 0.0)
  {
    v4 = 0;
    v3 = 1.0;
  }
  else
  {
    v2 = sqrtf((float)((float)(v7[0] * v7[0]) + 0.0) + (float)(v8 * v8));
    v3 = v8 / v2;
    v4 = (float)(v7[0] / v2) < 0.0;
  }
  if (v3 < -1.0)
    v3 = -1.0;
  if (v3 <= 1.0)
    v1 = v3;
  v5 = acosf(v1);
  result = v5 + v5;
  if (v4)
    return -result;
  return result;
}

float physx::Ext::RevoluteJoint::getVelocity(physx::Ext::RevoluteJoint *this)
{
  uint64_t v2;
  float v3;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 96))(&v2);
  return sqrtf((float)((float)(*((float *)&v2 + 1) * *((float *)&v2 + 1)) + (float)(*(float *)&v2 * *(float *)&v2))+ (float)(v3 * v3));
}

float physx::Ext::RevoluteJoint::getLimit@<S0>(physx::Ext::RevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  v2 = *((_QWORD *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 92);
  result = *(float *)(v2 + 108);
  *(float *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 20) = *(_QWORD *)(v2 + 112);
  return result;
}

uint64_t physx::Ext::RevoluteJoint::setLimit(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *a2;
  *(_OWORD *)(v2 + 104) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 92) = v3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::RevoluteJoint::getDriveVelocity(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 80);
}

uint64_t physx::Ext::RevoluteJoint::setDriveVelocity(physx::Ext::RevoluteJoint *this, float a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  *(float *)(*((_QWORD *)this + 13) + 80) = a2;
  if (a3)
  {
    v4 = *((_QWORD *)this + 12);
    v17 = 0;
    v18[0] = 0;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v4 + 56))(v4, &v17, v18);
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v6;
      v8 = v18[v5 - 1];
      if (v8)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8))
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v18[v5 - 1] + 48))(v18[v5 - 1]) == 1)
          {
            v9 = v18[v5 - 1];
            (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v9 + 432))(&v16, v9);
            if ((v16 & 1) == 0)
            {
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
              v11 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 880))(v10);
              v12 = (*(float (**)(uint64_t))(*(_QWORD *)v9 + 584))(v9);
              v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 512))(v9);
              if (v12 < v11 || v13 != 0)
              {
                if (v12 >= v11)
                  v11 = v12;
                (*(void (**)(uint64_t))(*(_QWORD *)v9 + 592))(v9);
                (*(void (**)(uint64_t, float))(*(_QWORD *)v9 + 576))(v9, v11);
              }
            }
          }
        }
      }
      v6 = 0;
      v5 = 1;
    }
    while ((v7 & 1) != 0);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
}

float physx::Ext::RevoluteJoint::getDriveForceLimit(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 84);
}

uint64_t physx::Ext::RevoluteJoint::setDriveForceLimit(physx::Ext::RevoluteJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 84) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::RevoluteJoint::getDriveGearRatio(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 88);
}

uint64_t physx::Ext::RevoluteJoint::setDriveGearRatio(physx::Ext::RevoluteJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 88) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

uint64_t physx::Ext::RevoluteJoint::setProjectionAngularTolerance(physx::Ext::RevoluteJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 124) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::RevoluteJoint::getProjectionAngularTolerance(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 124);
}

uint64_t physx::Ext::RevoluteJoint::setProjectionLinearTolerance(physx::Ext::RevoluteJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 120) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::RevoluteJoint::getProjectionLinearTolerance(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 120);
}

uint64_t physx::Ext::RevoluteJoint::getRevoluteJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(_QWORD *)(this + 104) + 128);
  return this;
}

uint64_t physx::Ext::RevoluteJoint::setRevoluteJointFlags(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(result + 104) + 128) = *a2;
  return result;
}

uint64_t physx::Ext::RevoluteJoint::setRevoluteJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *(_QWORD *)(a1 + 104);
  if (a3)
    v4 = *(_WORD *)(v3 + 128) | a2;
  else
    v4 = *(_WORD *)(v3 + 128) & ~a2;
  *(_WORD *)(v3 + 128) = v4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::RevoluteJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 104), 144);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t RevoluteJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, int a8, float32x2_t *a9, float32x2_t *a10)
{
  __int16 v14;
  _BOOL4 v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float32_t v26;
  float32_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  __int16 v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  __int16 v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float v55[3];
  float32x2_t v56;
  float v57;
  float32x2_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;

  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v60, a1, a4, (uint64_t)&v68, &v62, a2, (float *)a5, a6, a7);
  v14 = *(_WORD *)(a5 + 128);
  if ((v14 & 1) == 0)
  {
    v15 = 0;
    if (!a8)
      goto LABEL_3;
LABEL_6:
    v16 = v68;
    v17 = v69;
    v18 = v70;
    v19 = v71;
    goto LABEL_7;
  }
  v15 = *(float *)(a5 + 116) >= *(float *)(a5 + 112);
  if (a8)
    goto LABEL_6;
LABEL_3:
  v16 = v68;
  v17 = v69;
  v18 = v70;
  v19 = v71;
  if ((float)((float)((float)((float)(v62.f32[1] * v69) + (float)(v62.f32[0] * v68)) + (float)(v63 * v70))
             + (float)(v64 * v71)) < 0.0)
  {
    v62.f32[0] = -v62.f32[0];
    v62.f32[1] = -v62.f32[1];
    v63 = -v63;
    v64 = -v64;
  }
LABEL_7:
  v20 = (float)(v65 - v72) + (float)(v65 - v72);
  v21 = (float)(v66 - v73) + (float)(v66 - v73);
  v22 = (float)(v67 - v74) + (float)(v67 - v74);
  v23 = (float)(v19 * v19) + -0.5;
  v24 = (float)((float)(v17 * v21) + (float)(v16 * v20)) + (float)(v18 * v22);
  v55[0] = (float)((float)(v20 * v23) - (float)((float)((float)(v17 * v22) - (float)(v18 * v21)) * v19))
         + (float)(v16 * v24);
  v55[1] = (float)((float)(v21 * v23) - (float)((float)((float)(v18 * v20) - (float)(v16 * v22)) * v19))
         + (float)(v17 * v24);
  v55[2] = (float)((float)(v22 * v23) - (float)((float)((float)(v16 * v21) - (float)(v17 * v20)) * v19))
         + (float)(v18 * v24);
  if (v15)
    v25 = 7;
  else
    v25 = 6;
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v60, &v68, (float *)&v62, v55, 7, v25, (float *)&v58, (float *)&v56);
  v26 = v59 + a6[3].f32[0];
  *a9 = vadd_f32(v58, a6[2]);
  a9[1].f32[0] = v26;
  v27 = v57 + a7[3].f32[0];
  *a10 = vadd_f32(v56, a7[2]);
  a10[1].f32[0] = v27;
  if (!v15)
  {
    v29 = v70;
    v28 = v71;
    v30 = (float)(v28 * v28) + -0.5;
    v32 = v68;
    v31 = v69;
    v33 = (float)((float)(v69 * 0.0) + (float)(v68 * 2.0)) + (float)(v70 * 0.0);
    v34 = (float)((float)(v71 * (float)((float)(v70 * -0.0) + (float)(v69 * 0.0))) + (float)(v30 * 2.0))
        + (float)(v68 * v33);
    v35 = (float)((float)(v71 * (float)((float)(v68 * -0.0) + (float)(v70 * 2.0))) + (float)(v30 * 0.0))
        + (float)(v69 * v33);
    v36 = (float)((float)(v71 * (float)((float)(v69 * -2.0) + (float)(v68 * 0.0))) + (float)(v30 * 0.0))
        + (float)(v70 * v33);
    v37 = *(_WORD *)(a5 + 128);
    if ((v37 & 2) != 0)
    {
      v38 = v61;
      v61 += 80;
      *(_WORD *)(v38 + 78) = 0;
      *(_QWORD *)v38 = 0;
      *(_DWORD *)(v38 + 8) = 0;
      *(float *)(v38 + 16) = -v34;
      *(float *)(v38 + 20) = -v35;
      *(float *)(v38 + 24) = -v36;
      *(_QWORD *)(v38 + 32) = 0;
      *(_DWORD *)(v38 + 40) = 0;
      v39 = *(float *)(a5 + 88);
      *(float *)(v38 + 48) = -(float)(v34 * v39);
      *(float *)(v38 + 52) = -(float)(v35 * v39);
      *(float *)(v38 + 56) = -(float)(v36 * v39);
      v40 = *(float *)(a5 + 80);
      *(float *)(v38 + 28) = v40;
      v41 = *(float *)(a5 + 84);
      *(float *)(v38 + 44) = -v41;
      *(float *)(v38 + 60) = v41;
      v42 = *(_WORD *)(v38 + 76);
      if ((v37 & 4) != 0)
      {
        if (v40 > 0.0)
          *(_DWORD *)(v38 + 44) = 0;
        if (v40 < 0.0)
          *(_DWORD *)(v38 + 60) = 0;
      }
      *(_WORD *)(v38 + 76) = v42 | 0x60;
    }
    if ((v14 & 1) != 0)
    {
      v43 = (float)((float)((float)(v64 * (float)-v32) + (float)(v28 * v62.f32[0])) + (float)((float)-v31 * v63))
          + (float)(v62.f32[1] * v29);
      v44 = (float)((float)((float)(v32 * v62.f32[0]) + (float)(v28 * v64)) + (float)(v31 * v62.f32[1]))
          + (float)(v29 * v63);
      v45 = sqrtf((float)((float)(v43 * v43) + 0.0) + (float)(v44 * v44));
      if (v45 != 0.0)
      {
        v43 = v43 / v45;
        v44 = v44 / v45;
      }
      if (v44 < -1.0)
        v44 = -1.0;
      if (v44 > 1.0)
        v44 = 1.0;
      v46 = acosf(v44);
      v47 = v46 + v46;
      if (v43 >= 0.0)
        v48 = v47;
      else
        v48 = -v47;
      v49 = *(float *)(a5 + 116);
      if (*(float *)(a5 + 104) <= 0.0 && *(float *)(a5 + 100) <= 0.0)
        v50 = *(float *)(a5 + 108);
      else
        v50 = 0.0;
      v51 = *(float *)(a5 + 112);
      if ((float)(v49 + v50) > v48)
      {
        v52 = v61;
        v61 += 80;
        *(_WORD *)(v52 + 78) = 0;
        *(_QWORD *)v52 = 0;
        *(_DWORD *)(v52 + 8) = 0;
        *(float *)(v52 + 20) = -v35;
        *(float *)(v52 + 24) = -v36;
        *(_QWORD *)(v52 + 32) = 0;
        *(_DWORD *)(v52 + 40) = 0;
        *(float *)(v52 + 48) = -v34;
        *(float *)(v52 + 52) = -v35;
        *(float *)(v52 + 56) = -v36;
        *(float *)(v52 + 12) = -(float)(v49 - v48);
        *(float *)(v52 + 16) = -v34;
        *(_WORD *)(v52 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v60, v52, a5 + 92);
      }
      if ((float)(v51 - v50) < v48)
      {
        v53 = v61;
        v61 += 80;
        *(_WORD *)(v53 + 78) = 0;
        *(_QWORD *)v53 = 0;
        *(_DWORD *)(v53 + 8) = 0;
        *(float *)(v53 + 20) = v35;
        *(float *)(v53 + 24) = v36;
        *(_QWORD *)(v53 + 32) = 0;
        *(_DWORD *)(v53 + 40) = 0;
        *(float *)(v53 + 48) = v34;
        *(float *)(v53 + 52) = v35;
        *(float *)(v53 + 56) = v36;
        *(float *)(v53 + 12) = v51 - v48;
        *(float *)(v53 + 16) = v34;
        *(_WORD *)(v53 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v60, v53, a5 + 92);
      }
    }
  }
  return -858993459 * ((unint64_t)(v61 - v60) >> 4);
}

void RevoluteJointProject(float *a1, float *a2, float *a3, int a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float cosval;
  __float2 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;

  physx::Ext::joint::computeJointFrames(&v142, &v135, a1, a2, a3);
  v8 = v144;
  v121 = v147;
  v122 = v139;
  v119 = v140;
  v120 = v146;
  v117 = v141;
  v118 = v148;
  v9 = (float)(v139 - v146) + (float)(v139 - v146);
  v10 = (float)(v140 - v147) + (float)(v140 - v147);
  v11 = (float)(v141 - v148) + (float)(v141 - v148);
  v12 = (float)(v145 * v145) + -0.5;
  v13 = (float)((float)-(float)(v143 * v10) - (float)(v142 * v9)) - (float)(v144 * v11);
  v14 = (float)((float)(v145 * (float)((float)(v144 * v10) - (float)(v143 * v11))) + (float)(v9 * v12))
      - (float)(v142 * v13);
  v15 = (float)((float)(v145 * (float)((float)(v142 * v11) - (float)(v144 * v9))) + (float)(v10 * v12))
      - (float)(v143 * v13);
  v116 = v12;
  v16 = (float)((float)(v145 * (float)((float)(v143 * v9) - (float)(v142 * v10))) + (float)(v11 * v12))
      - (float)(v144 * v13);
  v17 = (float)((float)((float)(v145 * v135) - (float)(v142 * v138)) - (float)(v143 * v137)) + (float)(v136 * v144);
  v127 = v136;
  v128 = v138;
  v124 = v145;
  v18 = a1[30];
  v19 = (float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16);
  v133 = v18 * v18;
  v134 = v19;
  if (v19 > (float)(v18 * v18))
  {
    v20 = 1.0 / sqrtf(v19);
    v14 = v18 * (float)(v14 * v20);
    v15 = v18 * (float)(v15 * v20);
    v16 = v18 * (float)(v16 * v20);
  }
  v123 = v142;
  v21 = (float)((float)((float)(v145 * v136) - (float)(v143 * v138)) - (float)(v144 * v135)) + (float)(v137 * v142);
  v125 = v143;
  v126 = v135;
  v22 = (float)((float)((float)(v145 * v137) - (float)(v144 * v138)) - (float)(v142 * v136)) + (float)(v135 * v143);
  v23 = (float)((float)((float)(v142 * v135) + (float)(v145 * v138)) + (float)(v143 * v136)) + (float)(v144 * v137);
  v129 = v137;
  v130 = v16;
  v131 = v15;
  v132 = v14;
  if (v17 == 0.0)
  {
    v27 = 1.0;
    v25 = 0.0;
    v26 = 0.0;
  }
  else
  {
    v24 = sqrtf((float)((float)(v17 * v17) + 0.0) + (float)(v23 * v23));
    v25 = v17 / v24;
    v26 = 0.0 / v24;
    v27 = v23 / v24;
  }
  v28 = (float)((float)((float)(v17 * v27) - (float)(v23 * v25)) - (float)(v21 * v26)) + (float)(v26 * v22);
  v29 = (float)((float)((float)(v21 * v27) - (float)(v23 * v26)) - (float)(v22 * v25)) + (float)(v26 * v17);
  v30 = (float)((float)((float)(v22 * v27) - (float)(v23 * v26)) - (float)(v17 * v26)) + (float)(v25 * v21);
  cosval = (float)((float)((float)(v17 * v25) + (float)(v23 * v27)) + (float)(v21 * v26)) + (float)(v22 * v26);
  v32 = __sincosf_stret(a1[31] * 0.5);
  if (v32.__sinval > 0.9999)
    goto LABEL_11;
  v33 = -v28;
  v34 = -v29;
  v35 = -v30;
  if (cosval >= 0.0)
  {
    v33 = v28;
    v34 = v29;
    v35 = v30;
  }
  v36 = (float)((float)(v34 * v34) + (float)(v33 * v33)) + (float)(v35 * v35);
  if (v36 <= (float)(v32.__sinval * v32.__sinval))
  {
LABEL_11:
    if (v134 <= v133)
      return;
  }
  else
  {
    v37 = v32.__sinval * v35;
    v38 = 1.0 / sqrtf(v36);
    v28 = (float)(v32.__sinval * v33) * v38;
    v29 = (float)(v32.__sinval * v34) * v38;
    v30 = v37 * v38;
    cosval = v32.__cosval;
  }
  v39 = (float)((float)((float)(v27 * v28) + (float)(cosval * v25)) + (float)(v29 * v26)) + (float)((float)-v26 * v30);
  v40 = (float)((float)((float)(v27 * v29) + (float)(cosval * v26)) + (float)(v30 * v25)) + (float)((float)-v26 * v28);
  v41 = (float)((float)((float)(v27 * v30) + (float)(cosval * v26)) + (float)(v28 * v26)) + (float)((float)-v25 * v29);
  v42 = (float)((float)((float)(cosval * v27) - (float)(v28 * v25)) - (float)(v29 * v26)) - (float)(v30 * v26);
  if (a4)
  {
    v43 = a1[15] * -2.0;
    v44 = a1[16] * -2.0;
    v45 = a1[17] * -2.0;
    v47 = a1[13];
    v46 = a1[14];
    v48 = (float)(v46 * v46) + -0.5;
    v49 = a1[11];
    v50 = a1[12];
    v51 = (float)((float)(v44 * v50) + (float)(v49 * v43)) + (float)(v47 * v45);
    v52 = (float)((float)(v43 * v48) - (float)((float)((float)(v50 * v45) - (float)(v47 * v44)) * v46))
        + (float)(v49 * v51);
    v53 = (float)((float)(v44 * v48) - (float)((float)((float)(v47 * v43) - (float)(v49 * v45)) * v46))
        + (float)(v50 * v51);
    v54 = (float)((float)(v45 * v48) - (float)((float)((float)(v49 * v44) - (float)(v50 * v43)) * v46))
        + (float)(v47 * v51);
    v55 = v52 + v52;
    v56 = v54 + v54;
    v57 = (float)(v42 * v42) + -0.5;
    v58 = (float)((float)(v40 * (float)(v53 + v53)) + (float)(v39 * (float)(v52 + v52))) + (float)(v41 * v56);
    v59 = (float)((float)(v42 * (float)((float)(v40 * v56) - (float)(v41 * (float)(v53 + v53))))
                + (float)((float)(v52 + v52) * v57))
        + (float)(v39 * v58);
    v60 = (float)((float)(v42 * (float)((float)(v41 * (float)(v52 + v52)) - (float)(v39 * v56)))
                + (float)((float)(v53 + v53) * v57))
        + (float)(v40 * v58);
    v61 = (float)((float)(v42 * (float)((float)(v39 * (float)(v53 + v53)) - (float)(v40 * v55))) + (float)(v56 * v57))
        + (float)(v41 * v58);
    v62 = v132 + v59;
    v63 = (float)((float)((float)(v39 * v46) - (float)(v42 * v49)) - (float)(v40 * v47)) + (float)(v50 * v41);
    v64 = (float)((float)((float)(v40 * v46) - (float)(v42 * v50)) - (float)(v41 * v49)) + (float)(v47 * v39);
    v65 = (float)((float)((float)(v41 * v46) - (float)(v42 * v47)) - (float)(v39 * v50)) + (float)(v49 * v40);
    v66 = (float)((float)((float)(v39 * v49) + (float)(v42 * v46)) + (float)(v40 * v50)) + (float)(v41 * v47);
    v67 = (float)(v131 + v60) + (float)(v131 + v60);
    v68 = (float)(v130 + v61) + (float)(v130 + v61);
    v69 = (float)((float)(v125 * v67) + (float)(v123 * (float)(v62 + v62))) + (float)(v8 * v68);
    v70 = (float)((float)(v124 * (float)((float)(v68 * (float)-v123) + (float)(v8 * (float)(v62 + v62))))
                + (float)(v67 * v116))
        + (float)(v125 * v69);
    v71 = (float)((float)(v124 * (float)((float)((float)(v62 + v62) * (float)-v125) + (float)(v123 * v67)))
                + (float)(v68 * v116))
        + (float)(v8 * v69);
    v72 = v120
        + (float)((float)((float)(v124 * (float)((float)(v67 * (float)-v8) + (float)(v125 * v68)))
                        + (float)((float)(v62 + v62) * v116))
                + (float)(v123 * v69));
    v73 = v121 + v70;
    v74 = v118 + v71;
    v75 = (float)((float)((float)(v123 * v66) + (float)(v124 * v63)) + (float)(v125 * v65)) - (float)(v64 * v8);
    v76 = (float)((float)((float)(v125 * v66) + (float)(v124 * v64)) + (float)(v8 * v63)) - (float)(v65 * v123);
    v77 = (float)((float)((float)(v8 * v66) + (float)(v124 * v65)) + (float)(v123 * v64)) - (float)(v63 * v125);
    v78 = (float)((float)((float)(v63 * (float)-v123) + (float)(v124 * v66)) + (float)((float)-v125 * v64))
        + (float)((float)-v8 * v65);
    *a3 = v75;
    a3[1] = v76;
    a3[2] = v77;
    a3[3] = v78;
    a3[4] = v72;
    a3[5] = v73;
    a3[6] = v74;
    v79 = sqrtf((float)((float)((float)(v76 * v76) + (float)(v75 * v75)) + (float)(v77 * v77)) + (float)(v78 * v78));
    if (v79 != 0.0)
    {
      *a3 = v75 / v79;
      a3[1] = v76 / v79;
      a3[2] = v77 / v79;
      a3[3] = v78 / v79;
    }
  }
  else
  {
    v80 = a1[8] * -2.0;
    v81 = a1[9] * -2.0;
    v82 = a1[10] * -2.0;
    v84 = a1[6];
    v83 = a1[7];
    v85 = (float)(v83 * v83) + -0.5;
    v86 = a1[4];
    v87 = a1[5];
    v88 = (float)((float)(v81 * v87) + (float)(v86 * v80)) + (float)(v84 * v82);
    v89 = (float)((float)(v80 * v85) - (float)((float)((float)(v87 * v82) - (float)(v84 * v81)) * v83))
        + (float)(v86 * v88);
    v90 = (float)((float)(v81 * v85) - (float)((float)((float)(v84 * v80) - (float)(v86 * v82)) * v83))
        + (float)(v87 * v88);
    v91 = (float)((float)(v82 * v85) - (float)((float)((float)(v86 * v81) - (float)(v87 * v80)) * v83))
        + (float)(v84 * v88);
    v92 = (float)(v89 - v132) + (float)(v89 - v132);
    v93 = (float)(v90 - v131) + (float)(v90 - v131);
    v94 = (float)(v91 - v130) + (float)(v91 - v130);
    v95 = (float)(v42 * v42) + -0.5;
    v96 = (float)((float)-(float)(v40 * v93) - (float)(v39 * v92)) - (float)(v41 * v94);
    v97 = (float)((float)(v42 * (float)((float)(v41 * v93) - (float)(v40 * v94))) + (float)(v92 * v95))
        - (float)(v39 * v96);
    v98 = (float)((float)(v42 * (float)((float)(v39 * v94) - (float)(v41 * v92))) + (float)(v93 * v95))
        - (float)(v40 * v96);
    v99 = (float)((float)(v42 * (float)((float)(v40 * v92) - (float)(v39 * v93))) + (float)(v94 * v95))
        - (float)(v41 * v96);
    v100 = (float)((float)((float)-(float)(v39 * v83) - (float)(v42 * v86)) + (float)(v40 * v84)) - (float)(v87 * v41);
    v101 = (float)((float)((float)-(float)(v40 * v83) - (float)(v42 * v87)) + (float)(v41 * v86)) - (float)(v84 * v39);
    v102 = (float)((float)((float)-(float)(v41 * v83) - (float)(v42 * v84)) + (float)(v39 * v87)) - (float)(v86 * v40);
    v103 = (float)((float)((float)(v42 * v83) - (float)(v86 * v39)) - (float)(v40 * v87)) - (float)(v41 * v84);
    v104 = v99 + v99;
    v105 = (float)(v128 * v128) + -0.5;
    v106 = (float)((float)(v127 * (float)(v98 + v98)) + (float)(v126 * (float)(v97 + v97)))
         + (float)(v129 * (float)(v99 + v99));
    v107 = (float)((float)(v128 * (float)((float)(v129 * (float)(v97 + v97)) - (float)(v126 * v104)))
                 + (float)((float)(v98 + v98) * v105))
         + (float)(v127 * v106);
    v108 = (float)((float)(v128 * (float)((float)(v126 * (float)(v98 + v98)) - (float)(v127 * (float)(v97 + v97))))
                 + (float)(v104 * v105))
         + (float)(v129 * v106);
    v109 = v122
         + (float)((float)((float)(v128 * (float)((float)(v127 * v104) - (float)(v129 * (float)(v98 + v98))))
                         + (float)((float)(v97 + v97) * v105))
                 + (float)(v126 * v106));
    v110 = v117 + v108;
    v111 = (float)((float)((float)(v126 * v103) + (float)(v128 * v100)) + (float)(v127 * v102)) - (float)(v101 * v129);
    v112 = (float)((float)((float)(v127 * v103) + (float)(v128 * v101)) + (float)(v129 * v100)) - (float)(v102 * v126);
    v113 = (float)((float)((float)(v129 * v103) + (float)(v128 * v102)) + (float)(v126 * v101)) - (float)(v100 * v127);
    v114 = (float)((float)((float)(v128 * v103) - (float)(v126 * v100)) - (float)(v127 * v101)) - (float)(v129 * v102);
    *a2 = v111;
    a2[1] = v112;
    a2[2] = v113;
    a2[3] = v114;
    a2[4] = v109;
    a2[5] = v119 + v107;
    a2[6] = v110;
    v115 = sqrtf((float)((float)((float)(v112 * v112) + (float)(v111 * v111)) + (float)(v113 * v113)) + (float)(v114 * v114));
    if (v115 != 0.0)
    {
      *a2 = v111 / v115;
      a2[1] = v112 / v115;
      a2[2] = v113 / v115;
      a2[3] = v114 / v115;
    }
  }
}

void RevoluteJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  _BOOL8 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v8 = physx::Ext::joint::computeJointFrames(&v21, &v17, (float *)a2, a3, a4);
  if ((a5 & 1) != 0)
    (*(void (**)(uint64_t, float *, float *, float))(*(_QWORD *)a1 + 16))(a1, &v21, &v17, v8);
  if ((a5 & 2) != 0 && (*(_WORD *)(a2 + 128) & 1) != 0)
  {
    v9 = (float)((float)((float)(v24 * v17) - (float)(v21 * v20)) - (float)(v22 * v19)) + (float)(v18 * v23);
    v10 = (float)((float)((float)(v21 * v17) + (float)(v24 * v20)) + (float)(v22 * v18)) + (float)(v23 * v19);
    v11 = sqrtf((float)((float)(v9 * v9) + 0.0) + (float)(v10 * v10));
    if (v11 != 0.0)
    {
      v9 = v9 / v11;
      v10 = v10 / v11;
    }
    if (v10 < -1.0)
      v10 = -1.0;
    if (v10 > 1.0)
      v10 = 1.0;
    v12 = acosf(v10);
    v13 = v12 + v12;
    if (v9 >= 0.0)
      v14 = v13;
    else
      v14 = -v13;
    if (*(float *)(a2 + 104) <= 0.0 && *(float *)(a2 + 100) <= 0.0)
      v15 = *(float *)(a2 + 108);
    else
      v15 = 0.0;
    v16 = (float)(*(float *)(a2 + 116) + v15) > v14 || (float)(*(float *)(a2 + 112) - v15) < v14;
    (*(void (**)(uint64_t, float *, _BOOL8))(*(_QWORD *)a1 + 32))(a1, &v21, v16);
  }
}

float physx::Ext::InertiaTensorComputer::translate(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4, double a5, double a6, double a7, double a8, double a9, int32x4_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float v13;
  float result;
  float v15;
  float32x4_t v16;
  float v17;
  float v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float v33;
  float32x2_t v34;
  float v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32_t v39;
  float v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  unsigned int v46;
  float v47;
  float32_t v48;
  float v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float32x4_t v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float v67;

  v12 = *a2;
  v13 = a2[1].f32[0];
  if (COERCE_FLOAT(*a2) != 0.0 || (LODWORD(result) = HIDWORD(*(unint64_t *)a2), v12.f32[1] != 0.0) || v13 != 0.0)
  {
    v15 = *(float *)(a1 + 44);
    a4.i64[0] = *(_QWORD *)(a1 + 36);
    v16 = (float32x4_t)vzip1q_s32(a4, vdupq_lane_s32(*(int32x2_t *)a4.i8, 0));
    v17 = -*(float *)&a4.i32[1];
    *(float32x2_t *)a10.i8 = vadd_f32(v12, *(float32x2_t *)a4.i8);
    v10.f32[0] = v13 + v15;
    if (*(float *)a10.i32 == 0.0 && *(float *)&a10.i32[1] == 0.0 && v10.f32[0] == 0.0)
    {
      v18 = *(float *)&a4.i32[1] * v17;
      v19 = (float32x4_t)a4;
      v19.i32[0] = *(_DWORD *)(a1 + 44);
      v20 = vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)0x8000000000000000);
      v21.i32[0] = v20.i32[0];
      v21.f32[1] = v15 * *(float *)a4.i32;
      v22 = vadd_f32(v20, v21);
      v20.f32[0] = *(float *)&a4.i32[1] * *(float *)a4.i32;
      v23 = vadd_f32(v22, v20);
      *(float32x2_t *)v19.f32 = vmul_n_f32(*(float32x2_t *)v19.f32, v15);
      v24.i32[1] = 0;
      v24.i64[1] = 0x8000000000000000;
      v24.f32[0] = -*(float *)a4.i32;
      v25 = vmulq_f32(v16, v24);
      v26 = v18 + v25.f32[0];
      v27 = v25;
      v27.i32[0] = 0;
      v28.i64[0] = v19.i64[0];
      v28.f32[2] = v15 * *(float *)a4.i32;
      v28.i32[3] = v19.i32[1];
      v29 = vsubq_f32(v27, v19).f32[0];
      v30 = vaddq_f32(v25, v28);
      v30.f32[0] = v29;
      v31 = v29 + v18;
      v32 = vaddq_f32(v30, v25);
      v27.i32[0] = *(_DWORD *)(a1 + 48);
      v33 = v31 * v27.f32[0];
      v34 = vmul_f32(v23, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
      v35 = (float)((float)((float)(v15 * -0.0) + (float)(v15 * -0.0)) + (float)(*(float *)&a4.i32[1] * *(float *)a4.i32))
          * v27.f32[0];
      v36 = vmulq_n_f32(v32, v27.f32[0]);
      v37 = (float)(v26 + 0.0) * v27.f32[0];
    }
    else
    {
      v38 = (float32x4_t)vzip1q_s32(a10, vdupq_lane_s32(*(int32x2_t *)a10.i8, 0));
      v39 = -*(float *)a10.i32;
      v40 = *(float *)&a4.i32[1] * v17;
      v41.i32[1] = a4.i32[1];
      v41.i32[0] = *(_DWORD *)(a1 + 44);
      *(float32x2_t *)v11.f32 = vmul_n_f32(v41, v15);
      v42 = (float32x4_t)xmmword_2261ABF60;
      v43 = (float32x4_t)xmmword_2261ABF60;
      v43.f32[0] = -*(float *)a4.i32;
      v44 = vmulq_f32(v16, v43);
      v45 = (float)(v40 + v44.f32[0]) + 0.0;
      *(float *)&v46 = v10.f32[0] * *(float *)a10.i32;
      v47 = -(float)(*(float *)&a10.i32[1] * *(float *)&a10.i32[1]);
      v48 = *(float *)&a10.i32[1] * *(float *)a10.i32;
      v49 = v10.f32[0] * -0.0;
      a10.i32[0] = v10.i32[0];
      *(float32x2_t *)v10.f32 = vmul_n_f32(*(float32x2_t *)a10.i8, v10.f32[0]);
      v50 = (float)(v49 + v49) + v48;
      v51 = vmul_f32(v41, (float32x2_t)0x8000000000000000);
      v52.i32[0] = v51.i32[0];
      v52.f32[1] = v15 * *(float *)a4.i32;
      v53 = vadd_f32(v51, v52);
      v51.f32[0] = *(float *)&a4.i32[1] * *(float *)a4.i32;
      v54 = vmul_f32(*(float32x2_t *)a10.i8, (float32x2_t)0x8000000000000000);
      v55 = vadd_f32(v54, (float32x2_t)__PAIR64__(v46, v54.u32[0]));
      v54.f32[0] = v48;
      v56 = vsub_f32(vadd_f32(v53, v51), vadd_f32(v55, v54));
      v57 = v44;
      v57.i32[0] = 0;
      v55.f32[0] = (float)((float)((float)(v15 * -0.0) + (float)(v15 * -0.0))
                         + (float)(*(float *)&a4.i32[1] * *(float *)a4.i32))
                 - v50;
      v58.i64[0] = v11.i64[0];
      v58.f32[2] = v15 * *(float *)a4.i32;
      v58.i32[3] = v11.i32[1];
      v59 = vsubq_f32(v57, v11).f32[0];
      v60 = vaddq_f32(v44, v58);
      v60.f32[0] = v59;
      v61 = v59 + v40;
      v42.f32[0] = v39;
      v62 = vmulq_f32(v38, v42);
      v63 = v62;
      v63.i32[0] = 0;
      v42.i64[0] = v10.i64[0];
      v42.i64[1] = __PAIR64__(v10.u32[1], v46);
      v64 = vaddq_f32(v62, v42);
      v64.f32[0] = vsubq_f32(v63, v10).f32[0];
      v63.f32[0] = v47 + v64.f32[0];
      v65 = (float)(v47 + v62.f32[0]) + 0.0;
      v66 = vsubq_f32(vaddq_f32(v60, v44), vaddq_f32(v64, v62));
      v67 = v45 - v65;
      v64.i32[0] = *(_DWORD *)(a1 + 48);
      v33 = (float)(v61 - v63.f32[0]) * v64.f32[0];
      v34 = vmul_f32(v56, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v64.f32, 0));
      v35 = v55.f32[0] * v64.f32[0];
      v36 = vmulq_n_f32(v66, v64.f32[0]);
      v37 = v67 * v64.f32[0];
    }
    *(float *)a1 = v33 + *(float *)a1;
    *(float32x2_t *)(a1 + 4) = vadd_f32(v34, *(float32x2_t *)(a1 + 4));
    *(float *)(a1 + 12) = v35 + *(float *)(a1 + 12);
    *(float32x4_t *)(a1 + 16) = vaddq_f32(v36, *(float32x4_t *)(a1 + 16));
    *(float *)(a1 + 32) = v37 + *(float *)(a1 + 32);
    *(float32x2_t *)(a1 + 36) = vadd_f32(*(float32x2_t *)a4.i8, *a2);
    result = v15 + a2[1].f32[0];
    *(float *)(a1 + 44) = result;
  }
  return result;
}

uint64_t updateMassAndInertia(int a1, uint64_t a2, float *a3, unsigned int a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  double v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  double v31;
  int32x4_t v32;
  double v33;
  int32x4_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  float32x2_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int32x4_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  unsigned int v67;
  unsigned int v68;
  int32x4_t v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  float32_t v74;
  unsigned int v75;
  float v76;
  float v77;
  double v78;
  float v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  float v116;
  float v117;
  unsigned int v118;
  unsigned int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  float v175;
  float v176;
  float v177;
  unsigned int v178;
  float32_t v179;
  float32_t v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float32x2_t *v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float32_t v219;
  float32_t v220;
  float v221;
  float32x4_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  float v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  uint64_t v279;
  char v281;
  float v282;
  float v283;
  float v284;
  float32x4_t v285;
  int32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  __int128 v290;
  float v291;
  __int128 v292;
  uint64_t v293;
  float v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  float v301;
  float32x2_t v302;
  float v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  float v310;
  float v311;
  int v312;
  __int128 v313;
  float v314;
  float v315;
  float v316;
  uint64_t v317;
  char v318;
  __int16 v319;
  char v320;
  float32x4_t v321;
  float32x4_t v322;
  float v323;
  float32x2_t v324;
  float v325;
  float v326;
  __int128 v327;
  float32x4_t v328;
  int v329;
  char v330;
  __int128 *v331;
  uint64_t v332;
  uint64_t v333;

  v8 = a6;
  v333 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V0.2S, #1.0 }
  v293 = _D0;
  v294 = 1.0;
  v292 = xmmword_2260E5D70;
  if (a5)
  {
    v19 = *a5;
    v20 = a5[1];
    v21 = a5[2];
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    if (!a3)
    {
LABEL_8:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 288, "%s: No density specified, setting mass to 1 and inertia to (1,1,1)", a6, a7, a8, (char)"PxRigidBodyExt::updateMassAndInertia");
      goto LABEL_71;
    }
  }
  if (!a4)
    goto LABEL_8;
  v291 = 0.0;
  v289 = 0u;
  v290 = 0u;
  v287 = 0u;
  v288 = 0u;
  v330 = 1;
  v332 = 0x1000000000;
  v331 = &v327;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 184))(a2);
  v321.i64[0] = 0;
  physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::resize((uint64_t)&v327, v22, &v321);
  v26 = ((__n128 (*)(uint64_t, __int128 *, _QWORD, _QWORD))*(_QWORD *)(*(_QWORD *)a2 + 192))(a2, v331, v332, 0);
  v284 = *a3;
  if ((~*(_DWORD *)a3 & 0x7F800000) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 128, "computeMassAndInertia: Provided mass or density has no valid value", v23, v24, v25, v281);
    v35 = 0;
    goto LABEL_47;
  }
  v282 = v20;
  v283 = v19;
  if (!(_DWORD)v332)
  {
    v38 = 0;
    v41 = 0.0;
    v26.n128_u32[0] = 0;
    v286.i64[0] = v26.n128_u64[0];
    v40 = 0.0;
    v285 = 0u;
LABEL_41:
    v34 = (int32x4_t)v287;
    v288 = v287;
    v289 = v285;
    *(float *)&v290 = v40;
    *(float32x2_t *)((char *)&v290 + 4) = v38;
    v35 = 1;
    HIDWORD(v33) = v286.i32[1];
    *((float *)&v290 + 3) = v41;
    v291 = *(float *)v286.i32;
    goto LABEL_46;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v287 = 0u;
  v39 = 1.0;
  v40 = 0.0;
  v41 = 0.0;
  v286 = 0u;
  v285 = 0u;
  while (1)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**((_QWORD **)v331 + v36) + 312))(&v321);
    if ((v321.i8[0] & 1) != 0 || v8)
      break;
LABEL_38:
    if (++v36 >= (unint64_t)v332)
      goto LABEL_41;
  }
  if (!a1)
    goto LABEL_16;
  if (v37 >= a4)
  {
    v223 = physx::shdfnd::Foundation::mInstance;
    v224 = "computeMassAndInertia: Not enough mass/density values provided for all (simulation) shapes";
    v225 = 153;
    goto LABEL_45;
  }
  v284 = a3[v37];
  if ((~LODWORD(v284) & 0x7F800000) != 0)
  {
LABEL_16:
    switch((*(unsigned int (**)(_QWORD))(**((_QWORD **)v331 + v36) + 64))(*((_QWORD *)v331 + v36)))
    {
      case 0xFFFFFFFF:
      case 1u:
      case 5u:
      case 6u:
      case 7u:
        v223 = physx::shdfnd::Foundation::mInstance;
        v224 = "computeMassAndInertia: Dynamic actor with illegal collision shapes";
        v225 = 231;
        goto LABEL_45;
      case 0u:
        v304 = 0;
        (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)v331 + v36) + 96))(*((_QWORD *)v331 + v36), &v304);
        (*(void (**)(int *__return_ptr))(**((_QWORD **)v331 + v36) + 160))(&v312);
        *(float *)&v81 = (float)(*((float *)&v304 + 1)
                               * (float)(*((float *)&v304 + 1)
                                       * (float)(*((float *)&v304 + 1)
                                               * (float)(*((float *)&v304 + 1) * (float)(*((float *)&v304 + 1) * 4.1888)))))
                       * 0.4;
        LODWORD(v84) = v312;
        LODWORD(v82) = v313;
        *(float *)v69.i32 = *(float *)&v82 + *(float *)&v82;
        v42 = *(float *)&v82 * (float)(*(float *)&v82 + *(float *)&v82);
        v43 = *((float *)&v313 + 1) * (float)(*((float *)&v313 + 1) + *((float *)&v313 + 1));
        *(float *)&v82 = (float)(*(float *)&v84 + *(float *)&v84) * *(float *)&v313;
        v44 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v313 + 1);
        v326 = *((float *)&v304 + 1) * (float)(*((float *)&v304 + 1) * (float)(*((float *)&v304 + 1) * 4.1888));
        *(float *)v51.i32 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v313 + 2);
        *(float *)&v83 = *(float *)v69.i32 * *((float *)&v313 + 1);
        *(float *)v69.i32 = *(float *)v69.i32 * *((float *)&v313 + 2);
        *(float *)&v80 = (float)(*((float *)&v313 + 1) + *((float *)&v313 + 1)) * *((float *)&v313 + 2);
        v45 = (float)(v39 - v42) - v43;
        v46 = *(float *)&v82 + *(float *)&v80;
        *(float *)&v78 = v44 - *(float *)v69.i32;
        v47 = *(float *)&v82 - *(float *)&v80;
        *(float *)&v84 = v39 - (float)(*(float *)&v84 * (float)(*(float *)&v84 + *(float *)&v84));
        v48 = *(float *)&v84 - v43;
        *(float *)&v80 = *(float *)&v83 + *(float *)v51.i32;
        *(float *)v69.i32 = v44 + *(float *)v69.i32;
        v49 = *(float *)&v83 - *(float *)v51.i32;
        *(float *)&v84 = *(float *)&v84 - v42;
        v50 = (float)(*(float *)&v81 * *(float *)&v78) + (float)((float)(*(float *)&v83 + *(float *)v51.i32) * 0.0);
        *(float *)&v82 = *(float *)v69.i32 * 0.0;
        *(float *)&v83 = (float)(*(float *)&v83 - *(float *)v51.i32) * 0.0;
        *(float *)v51.i32 = *(float *)&v84 * 0.0;
        v52 = (float)(*(float *)v69.i32 * 0.0) + (float)((float)(*(float *)&v81 * v45) + (float)(v47 * 0.0));
        v53 = *(float *)&v83 + (float)((float)(*(float *)&v81 * v46) + (float)(v48 * 0.0));
        v54 = (float)(*(float *)&v84 * 0.0) + v50;
        v55 = (float)(*(float *)v69.i32 * 0.0) + (float)((float)(v45 * 0.0) + (float)(*(float *)&v81 * v47));
        v56 = *(float *)&v83 + (float)((float)(v46 * 0.0) + (float)(*(float *)&v81 * v48));
        v57 = (float)(*(float *)&v84 * 0.0)
            + (float)((float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v81 * *(float *)&v80));
        v58 = (float)(v45 * 0.0) + (float)(v47 * 0.0);
        v59 = (float)(v46 * 0.0) + (float)(v48 * 0.0);
        v60 = (float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v80 * 0.0);
        v61 = (float)(*(float *)&v81 * *(float *)v69.i32) + v58;
        v62 = (float)(*(float *)&v81 * v49) + v59;
        *(float *)&v81 = (float)(*(float *)&v81 * *(float *)&v84) + v60;
        v63 = v45 * v53;
        v64 = v47 * v56;
        v65 = (float)(v45 * v52) + (float)(v47 * v55);
        v66 = (float)(v45 * v54) + (float)(v47 * v57);
        *(float *)&v67 = (float)(*(float *)v69.i32 * v61) + v65;
        *(float *)&v68 = (float)(*(float *)v69.i32 * v62) + (float)(v63 + v64);
        *(float *)v69.i32 = (float)(*(float *)v69.i32 * *(float *)&v81) + v66;
        v70 = (float)(v46 * v52) + (float)(v48 * v55);
        v71 = (float)(v46 * v53) + (float)(v48 * v56);
        v39 = 1.0;
        v72 = (float)(v46 * v54) + (float)(v48 * v57);
        *(float *)&v73 = (float)(v49 * v61) + v70;
        v74 = (float)(v49 * v62) + v71;
        *(float *)&v75 = (float)(v49 * *(float *)&v81) + v72;
        v76 = (float)(*(float *)&v78 * v52) + (float)(*(float *)&v80 * v55);
        v77 = (float)(*(float *)&v78 * v53) + (float)(*(float *)&v80 * v56);
        *(float *)&v78 = (float)(*(float *)&v78 * v54) + (float)(*(float *)&v80 * v57);
        *(float *)&v80 = *(float *)&v84 * v61;
        v79 = *(float *)&v84 * v62;
        v321.i64[0] = __PAIR64__(v68, v67);
        *(float *)&v84 = *(float *)&v84 * *(float *)&v81;
        *(float *)&v80 = *(float *)&v80 + v76;
        *(float *)&v81 = v79 + v77;
        v321.i64[1] = __PAIR64__(v73, v69.u32[0]);
        v322.f32[0] = v74;
        *(uint64_t *)((char *)v322.i64 + 4) = __PAIR64__(LODWORD(v80), v75);
        v322.f32[3] = v79 + v77;
        *(float *)&v82 = *(float *)&v82 + v58;
        *(float *)&v83 = *(float *)&v83 + v59;
        v323 = *(float *)&v84 + *(float *)&v78;
        v324.i32[0] = LODWORD(v82);
        *(float *)&v84 = *(float *)v51.i32 + v60;
        goto LABEL_29;
      case 2u:
        LODWORD(v305) = 0;
        v304 = 2;
        (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)v331 + v36) + 104))(*((_QWORD *)v331 + v36), &v304);
        (*(void (**)(int *__return_ptr))(**((_QWORD **)v331 + v36) + 160))(&v312);
        v51.i32[0] = v305;
        *(float *)&v82 = *((float *)&v304 + 1) * (float)(*((float *)&v304 + 1) * 3.1416);
        *(float *)&v80 = (float)((float)(*((float *)&v304 + 1) * (float)(*((float *)&v304 + 1) * *((float *)&v304 + 1)))
                               * 8.0)
                       / 15.0;
        *(float *)&v81 = *(float *)&v82
                       * (float)((float)((float)((float)(*(float *)v51.i32
                                                       * (float)(*(float *)v51.i32 * *(float *)v51.i32))
                                               + (float)(*(float *)v51.i32
                                                       * (float)(*(float *)v51.i32 * *(float *)v51.i32)))
                                       / 3.0)
                               + (float)((float)((float)((float)(*((float *)&v304 + 1)
                                                               * (float)(*(float *)v51.i32 * *(float *)v51.i32))
                                                       * 4.0)
                                               / 3.0)
                                       + (float)(*(float *)&v80
                                               + (float)((float)((float)(*((float *)&v304 + 1)
                                                                       * (float)(*((float *)&v304 + 1) * *(float *)&v305))
                                                               * 3.0)
                                                       * 0.5))));
        *(float *)&v83 = *(float *)&v82
                       * (float)(*(float *)&v80
                               + (float)((float)(*((float *)&v304 + 1) * *(float *)&v305) * *((float *)&v304 + 1)));
        v85 = (float)(*((float *)&v304 + 1) * (float)(*((float *)&v304 + 1) * (float)(*((float *)&v304 + 1) * 4.1888)))
            + (float)(*(float *)&v82 * (float)(*(float *)v51.i32 + *(float *)v51.i32));
        LODWORD(v84) = v312;
        v51.i32[0] = v313;
        *(float *)&v80 = *(float *)&v84 + *(float *)&v84;
        v86 = *(float *)v51.i32 * (float)(*(float *)v51.i32 + *(float *)v51.i32);
        v87 = *((float *)&v313 + 1) * (float)(*((float *)&v313 + 1) + *((float *)&v313 + 1));
        v88 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v313 + 1);
        v89 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v313 + 2);
        *(float *)&v82 = (float)(*(float *)v51.i32 + *(float *)v51.i32) * *((float *)&v313 + 1);
        v90 = (float)(*(float *)v51.i32 + *(float *)v51.i32) * *((float *)&v313 + 2);
        v91 = (float)(v39 - v86) - v87;
        *(float *)v69.i32 = (float)((float)(*(float *)&v84 + *(float *)&v84) * *(float *)&v313)
                          + (float)((float)(*((float *)&v313 + 1) + *((float *)&v313 + 1)) * *((float *)&v313 + 2));
        *(float *)&v78 = v88 - v90;
        v92 = (float)((float)(*(float *)&v84 + *(float *)&v84) * *(float *)&v313)
            - (float)((float)(*((float *)&v313 + 1) + *((float *)&v313 + 1)) * *((float *)&v313 + 2));
        *(float *)&v84 = v39 - (float)(*(float *)&v84 * (float)(*(float *)&v84 + *(float *)&v84));
        v93 = *(float *)&v84 - v87;
        *(float *)&v80 = *(float *)&v82 + (float)(*(float *)&v80 * *((float *)&v313 + 2));
        v94 = v88 + v90;
        v95 = *(float *)&v82 - v89;
        *(float *)&v84 = *(float *)&v84 - v86;
        v96 = (float)(*(float *)&v83 * v91) + (float)(v92 * 0.0);
        v97 = (float)(*(float *)&v83 * *(float *)v69.i32) + (float)(v93 * 0.0);
        v98 = (float)(*(float *)&v83 * *(float *)&v78) + (float)(*(float *)&v80 * 0.0);
        *(float *)&v82 = v94 * 0.0;
        *(float *)&v83 = v95 * 0.0;
        *(float *)v51.i32 = *(float *)&v84 * 0.0;
        v99 = (float)(v94 * 0.0) + v96;
        v100 = (float)(v95 * 0.0) + v97;
        v101 = (float)(*(float *)&v84 * 0.0) + v98;
        v326 = v85;
        v102 = (float)(v94 * 0.0) + (float)((float)(v91 * 0.0) + (float)(v92 * *(float *)&v81));
        v103 = (float)(v95 * 0.0) + (float)((float)(*(float *)v69.i32 * 0.0) + (float)(v93 * *(float *)&v81));
        v104 = (float)(*(float *)&v84 * 0.0)
             + (float)((float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v80 * *(float *)&v81));
        v105 = (float)(v91 * 0.0) + (float)(v92 * 0.0);
        v106 = (float)(*(float *)v69.i32 * 0.0) + (float)(v93 * 0.0);
        v107 = (float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v80 * 0.0);
        v108 = (float)(v94 * *(float *)&v81) + v105;
        v109 = (float)(v95 * *(float *)&v81) + v106;
        *(float *)&v81 = (float)(*(float *)&v84 * *(float *)&v81) + v107;
        v110 = (float)(v91 * v99) + (float)(v92 * v102);
        v111 = (float)(v91 * v100) + (float)(v92 * v103);
        v112 = (float)(v91 * v101) + (float)(v92 * v104);
        *(float *)&v113 = (float)(v94 * v108) + v110;
        *(float *)&v114 = (float)(v94 * v109) + v111;
        *(float *)&v115 = (float)(v94 * *(float *)&v81) + v112;
        v116 = (float)(*(float *)v69.i32 * v99) + (float)(v93 * v102);
        v117 = (float)(*(float *)v69.i32 * v100) + (float)(v93 * v103);
        *(float *)v69.i32 = (float)(*(float *)v69.i32 * v101) + (float)(v93 * v104);
        *(float *)&v118 = (float)(v95 * v108) + v116;
        *(float *)&v119 = (float)(v95 * v109) + v117;
        *(float *)v69.i32 = (float)(v95 * *(float *)&v81) + *(float *)v69.i32;
        v120 = (float)(*(float *)&v78 * v99) + (float)(*(float *)&v80 * v102);
        v121 = (float)(*(float *)&v78 * v100) + (float)(*(float *)&v80 * v103);
        *(float *)&v78 = (float)(*(float *)&v78 * v101) + (float)(*(float *)&v80 * v104);
        v321.i64[0] = __PAIR64__(v114, v113);
        *(float *)&v80 = *(float *)&v84 * v108;
        v122 = *(float *)&v84 * v109;
        *(float *)&v84 = *(float *)&v84 * *(float *)&v81;
        *(float *)&v80 = *(float *)&v80 + v120;
        *(float *)&v81 = v122 + v121;
        v321.i64[1] = __PAIR64__(v118, v115);
        v322.i64[0] = __PAIR64__(v69.u32[0], v119);
        v322.i32[2] = LODWORD(v80);
        v322.f32[3] = v122 + v121;
        *(float *)&v82 = *(float *)&v82 + v105;
        *(float *)&v83 = *(float *)&v83 + v106;
        v323 = *(float *)&v84 + *(float *)&v78;
        v324.i32[0] = LODWORD(v82);
        *(float *)&v84 = *(float *)v51.i32 + v107;
        goto LABEL_29;
      case 3u:
        v304 = 3;
        v305 = 0;
        (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)v331 + v36) + 88))(*((_QWORD *)v331 + v36), &v304);
        (*(void (**)(int *__return_ptr))(**((_QWORD **)v331 + v36) + 160))(&v312);
        if (*((float *)&v304 + 1) == 0.0)
          v123 = v39;
        else
          v123 = *((float *)&v304 + 1);
        if (*(float *)&v305 == 0.0)
          v124 = v39;
        else
          v124 = *(float *)&v305;
        v125 = v123 * v124;
        if (*((float *)&v305 + 1) == 0.0)
          v126 = v39;
        else
          v126 = *((float *)&v305 + 1);
        v127 = (float)(v125 * v126) * 8.0;
        v128 = (float)((float)(*(float *)&v305 * *(float *)&v305)
                     + (float)(*((float *)&v305 + 1) * *((float *)&v305 + 1)))
             * (float)(v127 * 0.33333);
        v129 = (float)((float)(*((float *)&v304 + 1) * *((float *)&v304 + 1))
                     + (float)(*((float *)&v305 + 1) * *((float *)&v305 + 1)))
             * (float)(v127 * 0.33333);
        v130 = (float)((float)(*((float *)&v304 + 1) * *((float *)&v304 + 1))
                     + (float)(*(float *)&v305 * *(float *)&v305))
             * (float)(v127 * 0.33333);
        v326 = v127;
        v131 = *(float *)&v312;
        v132 = *(float *)&v313;
        v133 = v132 + v132;
        v134 = v132 * (float)(v132 + v132);
        v135 = *((float *)&v313 + 1) * (float)(*((float *)&v313 + 1) + *((float *)&v313 + 1));
        v136 = (float)(v131 + v131) * *(float *)&v313;
        v137 = (float)(v131 + v131) * *((float *)&v313 + 1);
        v138 = (float)(v131 + v131) * *((float *)&v313 + 2);
        v139 = v133 * *((float *)&v313 + 1);
        v140 = v133 * *((float *)&v313 + 2);
        v141 = (float)(*((float *)&v313 + 1) + *((float *)&v313 + 1)) * *((float *)&v313 + 2);
        v142 = (float)(v39 - v134) - v135;
        v143 = v136 + v141;
        v144 = v137 - v140;
        v145 = v136 - v141;
        v146 = v39 - (float)(v131 * (float)(v131 + v131));
        v147 = v146 - v135;
        v148 = v139 + v138;
        v149 = v137 + v140;
        v150 = v139 - v138;
        v151 = v146 - v134;
        v152 = (float)(v128 * v142) + (float)(v145 * 0.0);
        v153 = (float)(v128 * v143) + (float)(v147 * 0.0);
        v154 = (float)(v128 * v144) + (float)((float)(v139 + v138) * 0.0);
        v155 = v149 * 0.0;
        v156 = v150 * 0.0;
        *(float *)v51.i32 = v151 * 0.0;
        v157 = (float)(v149 * 0.0) + v152;
        v158 = (float)(v150 * 0.0) + v153;
        v159 = (float)(v151 * 0.0) + v154;
        v160 = (float)(v149 * 0.0) + (float)((float)(v142 * 0.0) + (float)(v129 * v145));
        v161 = (float)(v150 * 0.0) + (float)((float)(v143 * 0.0) + (float)(v129 * v147));
        v162 = (float)(v151 * 0.0) + (float)((float)(v144 * 0.0) + (float)(v129 * v148));
        v163 = (float)(v142 * 0.0) + (float)(v145 * 0.0);
        v164 = (float)(v143 * 0.0) + (float)(v147 * 0.0);
        v165 = (float)(v144 * 0.0) + (float)(v148 * 0.0);
        v166 = (float)(v130 * v149) + v163;
        v167 = (float)(v130 * v150) + v164;
        *(float *)v69.i32 = (float)(v130 * v151) + v165;
        v168 = v142 * v158;
        v169 = v145 * v161;
        v170 = (float)(v142 * v157) + (float)(v145 * v160);
        v171 = (float)(v142 * v159) + (float)(v145 * v162);
        *(float *)&v172 = (float)(v149 * v166) + v170;
        *(float *)&v173 = (float)(v149 * v167) + (float)(v168 + v169);
        *(float *)&v174 = (float)(v149 * *(float *)v69.i32) + v171;
        v175 = (float)(v143 * v157) + (float)(v147 * v160);
        v176 = (float)(v143 * v158) + (float)(v147 * v161);
        v39 = 1.0;
        v177 = (float)(v143 * v159) + (float)(v147 * v162);
        *(float *)&v178 = (float)(v150 * v166) + v175;
        v179 = (float)(v150 * v167) + v176;
        v180 = (float)(v150 * *(float *)v69.i32) + v177;
        v181 = v144 * v157;
        v182 = v144 * v158;
        v183 = v144 * v159;
        v184 = v148 * v161;
        *(float *)&v78 = v183 + (float)(v148 * v162);
        v321.i64[0] = __PAIR64__(v173, v172);
        *(float *)&v80 = (float)(v151 * v166) + (float)(v181 + (float)(v148 * v160));
        *(float *)&v81 = (float)(v151 * v167) + (float)(v182 + v184);
        v321.i64[1] = __PAIR64__(v178, v174);
        v322.f32[0] = v179;
        v322.f32[1] = v180;
        v322.f32[2] = *(float *)&v80;
        v322.f32[3] = *(float *)&v81;
        *(float *)&v82 = v155 + v163;
        *(float *)&v83 = v156 + v164;
        v323 = (float)(v151 * *(float *)v69.i32) + *(float *)&v78;
        v324.i32[0] = LODWORD(v82);
        *(float *)&v84 = (float)(v151 * 0.0) + v165;
LABEL_29:
        v324.i32[1] = LODWORD(v83);
        v325 = *(float *)&v84;
        v185 = (float32x2_t *)((char *)&v313 + 12);
        goto LABEL_36;
      case 4u:
        v313 = xmmword_2260EDC60;
        v312 = 4;
        v314 = 0.0;
        v315 = 0.0;
        v316 = 1.0;
        v317 = 0;
        v318 = 1;
        v319 = 0;
        v320 = 0;
        (*(void (**)(_QWORD, int *))(**((_QWORD **)v331 + v36) + 120))(*((_QWORD *)v331 + v36), &v312);
        v311 = 0.0;
        (*(void (**)(uint64_t, float *, uint64_t *, float32x2_t *))(*(_QWORD *)v317 + 104))(v317, &v311, &v304, &v302);
        if (*(float *)&v313 == v39 && *((float *)&v313 + 1) == v39 && *((float *)&v313 + 2) == v39)
        {
          v187 = HIDWORD(v304);
          v186 = v304;
          v189 = HIDWORD(v305);
          v188 = v305;
          v190 = v306;
          v191 = v307;
          v192 = v308;
          v193 = v309;
          v194 = v310;
        }
        else
        {
          v311 = (float)((float)(*(float *)&v313 * *((float *)&v313 + 1)) * *((float *)&v313 + 2)) * v311;
          v195 = (float)(v316 * v316) + -0.5;
          v196 = (float)((float)((float)(v302.f32[1] + v302.f32[1]) * v314)
                       + (float)(*((float *)&v313 + 3) * (float)(v302.f32[0] + v302.f32[0])))
               + (float)(v315 * (float)(v303 + v303));
          v197 = (float)((float)(v316
                               * (float)((float)(v314 * (float)(v303 + v303))
                                       - (float)(v315 * (float)(v302.f32[1] + v302.f32[1]))))
                       + (float)((float)(v302.f32[0] + v302.f32[0]) * v195))
               + (float)(*((float *)&v313 + 3) * v196);
          v198 = (float)((float)(v316
                               * (float)((float)(v315 * (float)(v302.f32[0] + v302.f32[0]))
                                       - (float)(*((float *)&v313 + 3) * (float)(v303 + v303))))
                       + (float)((float)(v302.f32[1] + v302.f32[1]) * v195))
               + (float)(v314 * v196);
          v199 = *((float *)&v313 + 2)
               * (float)((float)((float)(v316
                                       * (float)((float)(*((float *)&v313 + 3) * (float)(v302.f32[1] + v302.f32[1]))
                                               - (float)(v314 * (float)(v302.f32[0] + v302.f32[0]))))
                               + (float)((float)(v303 + v303) * v195))
                       + (float)(v315 * v196));
          v200 = (float)(*(float *)&v313 * v197) + (float)(*(float *)&v313 * v197);
          v201 = (float)(*((float *)&v313 + 1) * v198) + (float)(*((float *)&v313 + 1) * v198);
          v202 = v199 + v199;
          v203 = (float)((float)(v314 * v201) + (float)(*((float *)&v313 + 3) * v200)) + (float)(v315 * v202);
          v302.f32[0] = (float)((float)(v200 * v195)
                              - (float)((float)((float)(v314 * v202) - (float)(v315 * v201)) * v316))
                      + (float)(*((float *)&v313 + 3) * v203);
          v302.f32[1] = (float)((float)(v201 * v195)
                              - (float)((float)((float)(v315 * v200) - (float)(*((float *)&v313 + 3) * v202)) * v316))
                      + (float)(v314 * v203);
          v303 = (float)((float)(v202 * v195)
                       - (float)((float)((float)(*((float *)&v313 + 3) * v201) - (float)(v314 * v200)) * v316))
               + (float)(v315 * v203);
          physx::PxMassProperties::scaleInertia((float *)&v304, (float *)&v313 + 3, (float *)&v313, (float *)&v295);
          v187 = HIDWORD(v295);
          v186 = v295;
          v304 = v295;
          v189 = HIDWORD(v296);
          v188 = v296;
          v305 = v296;
          v190 = v297;
          v191 = v298;
          v306 = v297;
          v307 = v298;
          v192 = v299;
          v193 = v300;
          v308 = v299;
          v309 = v300;
          v194 = v301;
          v310 = v301;
        }
        v321.i64[0] = __PAIR64__(v187, v186);
        v321.i64[1] = __PAIR64__(v189, v188);
        v322.i64[0] = __PAIR64__(v191, v190);
        v322.i64[1] = __PAIR64__(v193, v192);
        v324 = v302;
        v323 = v194;
        v325 = v303;
        v326 = v311;
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)v331 + v36) + 160))(&v295);
        LODWORD(v84) = v295;
        *(float *)&v82 = *(float *)&v84 + *(float *)&v84;
        LODWORD(v78) = v296;
        v204 = *(float *)&v84 * (float)(*(float *)&v84 + *(float *)&v84);
        v205 = *((float *)&v295 + 1) * (float)(*((float *)&v295 + 1) + *((float *)&v295 + 1));
        v206 = *(float *)&v78 * (float)(*(float *)&v78 + *(float *)&v78);
        *(float *)&v84 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v295 + 1);
        *(float *)v51.i32 = *(float *)&v82 * *(float *)&v296;
        v207 = *(float *)&v82 * *((float *)&v296 + 1);
        v208 = (float)(*((float *)&v295 + 1) + *((float *)&v295 + 1)) * *(float *)&v296;
        *(float *)&v83 = (float)(*((float *)&v295 + 1) + *((float *)&v295 + 1)) * *((float *)&v296 + 1);
        *(float *)&v82 = (float)(*(float *)&v78 + *(float *)&v78) * *((float *)&v296 + 1);
        *(float *)&v81 = (float)(v39 - v205) - v206;
        *(float *)v69.i32 = *(float *)&v84 + *(float *)&v82;
        v209 = *(float *)v51.i32 - *(float *)&v83;
        *(float *)&v84 = *(float *)&v84 - *(float *)&v82;
        *(float *)&v82 = (float)(v39 - v204) - v206;
        *(float *)&v78 = v208 + v207;
        *(float *)v51.i32 = *(float *)v51.i32 + *(float *)&v83;
        *(float *)&v83 = v208 - v207;
        *(float *)&v80 = (float)(v39 - v204) - v205;
        v210 = (float)((float)(v321.f32[0] * *(float *)&v81) + (float)(v321.f32[1] * *(float *)&v84))
             + (float)(*(float *)v51.i32 * v321.f32[2]);
        v211 = (float)((float)(v321.f32[0] * *(float *)v69.i32) + (float)(v321.f32[1] * *(float *)&v82))
             + (float)((float)(v208 - v207) * v321.f32[2]);
        v212 = (float)((float)(v321.f32[0] * v209) + (float)(v321.f32[1] * (float)(v208 + v207)))
             + (float)(*(float *)&v80 * v321.f32[2]);
        v213 = (float)((float)(*(float *)&v81 * v321.f32[3]) + (float)(*(float *)&v84 * v322.f32[0]))
             + (float)(*(float *)v51.i32 * v322.f32[1]);
        v214 = (float)((float)(*(float *)v69.i32 * v321.f32[3]) + (float)(*(float *)&v82 * v322.f32[0]))
             + (float)(*(float *)&v83 * v322.f32[1]);
        v215 = (float)((float)(v209 * v321.f32[3]) + (float)(*(float *)&v78 * v322.f32[0]))
             + (float)(*(float *)&v80 * v322.f32[1]);
        v216 = (float)((float)(*(float *)&v81 * v322.f32[2]) + (float)(*(float *)&v84 * v322.f32[3]))
             + (float)(*(float *)v51.i32 * v323);
        v217 = (float)((float)(*(float *)v69.i32 * v322.f32[2]) + (float)(*(float *)&v82 * v322.f32[3]))
             + (float)(*(float *)&v83 * v323);
        v218 = (float)((float)(v209 * v322.f32[2]) + (float)(*(float *)&v78 * v322.f32[3]))
             + (float)(*(float *)&v80 * v323);
        v219 = (float)((float)(*(float *)&v81 * v212) + (float)(*(float *)&v84 * v215))
             + (float)(*(float *)v51.i32 * v218);
        v220 = (float)((float)(*(float *)v69.i32 * v212) + (float)(*(float *)&v82 * v215))
             + (float)(*(float *)&v83 * v218);
        v221 = (float)((float)(v209 * v212) + (float)(*(float *)&v78 * v215)) + (float)(*(float *)&v80 * v218);
        v321.f32[0] = (float)((float)(*(float *)&v81 * v210) + (float)(*(float *)&v84 * v213))
                    + (float)(*(float *)v51.i32 * v216);
        v321.f32[1] = (float)((float)(*(float *)&v81 * v211) + (float)(*(float *)&v84 * v214))
                    + (float)(*(float *)v51.i32 * v217);
        v321.f32[2] = v219;
        v321.f32[3] = (float)((float)(*(float *)v69.i32 * v210) + (float)(*(float *)&v82 * v213))
                    + (float)(*(float *)&v83 * v216);
        v322.f32[0] = (float)((float)(*(float *)v69.i32 * v211) + (float)(*(float *)&v82 * v214))
                    + (float)(*(float *)&v83 * v217);
        v322.f32[1] = v220;
        v322.f32[2] = (float)((float)(v209 * v210) + (float)(*(float *)&v78 * v213)) + (float)(*(float *)&v80 * v216);
        v322.f32[3] = (float)((float)(v209 * v211) + (float)(*(float *)&v78 * v214)) + (float)(*(float *)&v80 * v217);
        *(float *)&v81 = *(float *)&v81 * v324.f32[0];
        *(float *)v69.i32 = *(float *)v69.i32 * v324.f32[0];
        *(float *)&v82 = *(float *)v69.i32 + (float)(*(float *)&v82 * v324.f32[1]);
        *(float *)&v78 = (float)(v209 * v324.f32[0]) + (float)(*(float *)&v78 * v324.f32[1]);
        *(float *)&v83 = *(float *)&v83 * v325;
        *(float *)&v80 = *(float *)&v80 * v325;
        *(float *)&v84 = (float)(*(float *)&v81 + (float)(*(float *)&v84 * v324.f32[1]))
                       + (float)(*(float *)v51.i32 * v325);
        *(float *)v51.i32 = *(float *)&v82 + *(float *)&v83;
        v323 = v221;
        v324.i32[0] = LODWORD(v84);
        *(float *)&v84 = *(float *)&v78 + *(float *)&v80;
        v324.f32[1] = *(float *)&v82 + *(float *)&v83;
        v325 = *(float *)&v78 + *(float *)&v80;
        v185 = (float32x2_t *)&v297;
LABEL_36:
        physx::Ext::InertiaTensorComputer::translate((uint64_t)&v321, v185, v84, v51, v82, v83, v78, v80, v81, v69);
        break;
      default:
        break;
    }
    v32 = v286;
    v30 = vmul_n_f32(v38, *(float *)v286.i32);
    *(float *)&v31 = v41 * *(float *)v286.i32;
    *(float *)v32.i32 = *(float *)v286.i32 + (float)(v284 * v326);
    v29 = vadd_f32(v30, vmul_n_f32(v324, v284 * v326));
    v30.f32[0] = v39 / *(float *)v32.i32;
    v38 = vmul_n_f32(v29, v39 / *(float *)v32.i32);
    v41 = (float)(v39 / *(float *)v32.i32)
        * (float)((float)(v41 * *(float *)v286.i32) + (float)((float)(v284 * v326) * v325));
    v28 = vaddq_f32(v287, vmulq_n_f32(v321, v284));
    v222 = vaddq_f32(v285, vmulq_n_f32(v322, v284));
    v285 = v222;
    v40 = v40 + (float)(v284 * v323);
    ++v37;
    v222.f32[0] = *(float *)v32.i32;
    v286 = (int32x4_t)v222;
    v287 = v28;
    goto LABEL_38;
  }
  v223 = physx::shdfnd::Foundation::mInstance;
  v224 = "computeMassAndInertia: Provided mass or density has no valid value";
  v225 = 146;
LABEL_45:
  physx::shdfnd::Foundation::error(v223, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", v225, v224, v23, v24, v25, v281);
  v35 = 0;
LABEL_46:
  v20 = v282;
  v19 = v283;
LABEL_47:
  if ((v332 & 0x8000000000000000) == 0 && (v332 & 0x7FFFFFFF00000000) != 0 && v331 != &v327 && v331)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (!v35)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 280, "%s: Mass and inertia computation failed, setting mass to 1 and inertia to (1,1,1)", v23, v24, v25, (char)"PxRigidBodyExt::updateMassAndInertia");
    goto LABEL_71;
  }
  if (v291 == 0.0)
  {
LABEL_71:
    v279 = 0;
    v226 = 1.0;
    goto LABEL_72;
  }
  if (!a5)
  {
    v20 = *((float *)&v290 + 2);
    v19 = *((float *)&v290 + 1);
    v21 = *((float *)&v290 + 3);
  }
  *(float *)&v33 = -v19;
  *(float *)v34.i32 = -v20;
  *(float *)&v27 = -v21;
  *(float *)&v327 = -v19;
  *((float *)&v327 + 1) = -v20;
  *((float *)&v327 + 2) = -v21;
  physx::Ext::InertiaTensorComputer::translate((uint64_t)&v288, (float32x2_t *)&v327, v33, v34, v27, *(double *)v28.i64, *(double *)&v29, *(double *)&v30, v31, v32);
  v327 = (__int128)v288;
  v328 = v289;
  v226 = v291;
  v329 = v290;
  physx::PxDiagonalize((float *)&v327, (float *)&v292, v321.f32);
  v293 = v321.i64[0];
  v294 = v321.f32[2];
  if (v321.f32[0] <= 0.0 || v321.f32[1] <= 0.0 || v321.f32[2] <= 0.0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 84, "%s: inertia tensor has negative components (ill-conditioned input expected). Approximation for inertia tensor will be used instead.", v227, v228, v229, (char)"PxRigidBodyExt::updateMassAndInertia");
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, float))(*(_QWORD *)a2 + 80))(&v321, a2, 1.01);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 152))(&v327, a2);
    v230 = (float)(*((float *)&v327 + 3) * *((float *)&v327 + 3)) + -0.5;
    v231 = (float)((float)((float)(v328.f32[1] * -2.0) * *((float *)&v327 + 1))
                 + (float)(*(float *)&v327 * (float)(v328.f32[0] * -2.0)))
         + (float)(*((float *)&v327 + 2) * (float)(v328.f32[2] * -2.0));
    v232 = (float)((float)(v321.f32[0] + v321.f32[3]) * 0.5) + (float)((float)(v321.f32[0] + v321.f32[3]) * 0.5);
    v233 = (float)((float)(v321.f32[1] + v322.f32[0]) * 0.5) + (float)((float)(v321.f32[1] + v322.f32[0]) * 0.5);
    v234 = (float)((float)(v321.f32[2] + v322.f32[1]) * 0.5) + (float)((float)(v321.f32[2] + v322.f32[1]) * 0.5);
    v235 = (float)((float)-(float)(*((float *)&v327 + 1) * v233) - (float)(*(float *)&v327 * v232))
         - (float)(*((float *)&v327 + 2) * v234);
    v236 = (float)((float)((float)((float)(v328.f32[0] * -2.0) * v230)
                         - (float)((float)((float)(*((float *)&v327 + 1) * (float)(v328.f32[2] * -2.0))
                                         - (float)(*((float *)&v327 + 2) * (float)(v328.f32[1] * -2.0)))
                                 * *((float *)&v327 + 3)))
                 + (float)(*(float *)&v327 * v231))
         + (float)((float)((float)(*((float *)&v327 + 3)
                                 * (float)((float)(*((float *)&v327 + 2) * v233) - (float)(*((float *)&v327 + 1) * v234)))
                         + (float)(v232 * v230))
                 - (float)(*(float *)&v327 * v235));
    v237 = (float)((float)((float)((float)(v328.f32[1] * -2.0) * v230)
                         - (float)((float)((float)(*((float *)&v327 + 2) * (float)(v328.f32[0] * -2.0))
                                         - (float)(*(float *)&v327 * (float)(v328.f32[2] * -2.0)))
                                 * *((float *)&v327 + 3)))
                 + (float)(*((float *)&v327 + 1) * v231))
         + (float)((float)((float)(*((float *)&v327 + 3)
                                 * (float)((float)(*(float *)&v327 * v234) - (float)(*((float *)&v327 + 2) * v232)))
                         + (float)(v233 * v230))
                 - (float)(*((float *)&v327 + 1) * v235));
    v238 = (float)((float)((float)((float)(v328.f32[2] * -2.0) * v230)
                         - (float)((float)((float)(*(float *)&v327 * (float)(v328.f32[1] * -2.0))
                                         - (float)(*((float *)&v327 + 1) * (float)(v328.f32[0] * -2.0)))
                                 * *((float *)&v327 + 3)))
                 + (float)(*((float *)&v327 + 2) * v231))
         + (float)((float)((float)(*((float *)&v327 + 3)
                                 * (float)((float)(*((float *)&v327 + 1) * v232) - (float)(*(float *)&v327 * v233)))
                         + (float)(v234 * v230))
                 - (float)(*((float *)&v327 + 2) * v235));
    v239 = (float)-*(float *)&v327 - *(float *)&v327;
    v240 = (float)-*((float *)&v327 + 1) - *((float *)&v327 + 1);
    v241 = (float)-*((float *)&v327 + 2) - *((float *)&v327 + 2);
    v242 = -(float)(*((float *)&v327 + 1) * v240);
    v243 = -(float)(*((float *)&v327 + 2) * v241);
    v244 = -(float)(*((float *)&v327 + 2) * v239);
    v245 = *((float *)&v327 + 3) * v239;
    v246 = -(float)(*((float *)&v327 + 2) * v240);
    v247 = *((float *)&v327 + 3) * v240;
    v248 = (float)(1.0 - v242) - v243;
    v249 = (float)(*((float *)&v327 + 3) * v241) - (float)(*((float *)&v327 + 1) * v239);
    v250 = (float)-(float)(*((float *)&v327 + 1) * v239) - (float)(*((float *)&v327 + 3) * v241);
    v251 = (float)(*(float *)&v327 * v239) + 1.0;
    v252 = v251 - v243;
    v253 = v251 - v242;
    v254 = (float)(v321.f32[3] - v321.f32[0]) * 0.5;
    v255 = (float)(v322.f32[0] - v321.f32[1]) * 0.5;
    v256 = (float)(v322.f32[1] - v321.f32[2]) * 0.5;
    v257 = (float)(v245 + v246) * v255;
    v258 = (float)(fabsf(v248 * v254) + fabsf(v250 * v255)) + fabsf((float)(v244 + v247) * v256);
    v259 = (float)(fabsf(v249 * v254) + fabsf(v252 * v255)) + fabsf((float)(v246 - v245) * v256);
    v260 = (float)(fabsf((float)(v244 - v247) * v254) + fabsf(v257)) + fabsf(v253 * v256);
    v261 = (float)((float)(v258 + v236) + (float)(v258 - v236)) * 0.5;
    v262 = (float)((float)(v259 + v237) + (float)(v259 - v237)) * 0.5;
    v263 = (float)((float)(v260 + v238) + (float)(v260 - v238)) * 0.5;
    if (v261 == 0.0)
      v264 = 1.0;
    else
      v264 = v261;
    if (v262 == 0.0)
      v265 = 1.0;
    else
      v265 = v262;
    v266 = v264 * v265;
    if (v263 == 0.0)
      v267 = 1.0;
    else
      v267 = v263;
    v268 = (float)(v267 * v266) * 8.0;
    v269 = v261 * v261;
    v270 = v262 * v262;
    v271 = v263 * v263;
    v272 = v271 + v270;
    v273 = v271 + v269;
    v274 = v269 + v270;
    v275 = v272 * (float)(v268 * 0.33333);
    v276 = v273 * (float)(v268 * 0.33333);
    v277 = v274 * (float)(v268 * 0.33333);
    v278 = v226 / v268;
    *(float *)&v293 = v278 * v275;
    *((float *)&v293 + 1) = v278 * v276;
    v294 = v278 * v277;
    v292 = xmmword_2260E5D70;
  }
  v279 = 1;
LABEL_72:
  (*(void (**)(uint64_t, float))(*(_QWORD *)a2 + 232))(a2, v226);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 256))(a2, &v293);
  v327 = v292;
  v328.i64[0] = __PAIR64__(LODWORD(v20), LODWORD(v19));
  v328.f32[2] = v21;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 216))(a2, &v327);
  return v279;
}

