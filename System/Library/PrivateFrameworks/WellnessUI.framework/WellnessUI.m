uint64_t MultipleDataPointView.avgValueColour.getter()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v0 = type metadata accessor for ColorScheme();
  v1 = MEMORY[0x24BDEB420];
  v2 = *(_QWORD *)(v0 - 8);
  v3 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v11 - v6;
  type metadata accessor for MultipleDataPointView();
  specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(_QWORD))v1, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x24BDEB408], v0);
  v8 = static ColorScheme.== infix(_:_:)();
  v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v5, v0);
  v9(v7, v0);
  if ((v8 & 1) != 0)
    return static Color.black.getter();
  else
    return static Color.white.getter();
}

uint64_t type metadata accessor for MultipleDataPointView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MultipleDataPointView;
  if (!type metadata singleton initialization cache for MultipleDataPointView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t MultipleDataPointView.average.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 24));
}

uint64_t MultipleDataPointView.avgValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.minValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.maxValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.totalValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.unit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.hasUnitString.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 52));
}

uint64_t MultipleDataPointView.averageLabelString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.init(average:avgValueString:minValueString:maxValueString:totalValueString:unit:dateLabel:hasUnitString:averageLabelString:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, unint64_t a18)
{
  uint64_t v23;
  int *v24;
  uint64_t *v25;
  uint64_t result;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;

  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *a9 = EnvironmentObject.init()();
  a9[1] = v23;
  v24 = (int *)type metadata accessor for MultipleDataPointView();
  v25 = (uint64_t *)((char *)a9 + v24[5]);
  *v25 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  result = swift_storeEnumTagMultiPayload();
  v27 = (char *)a9 + v24[6];
  *(_QWORD *)v27 = a1;
  v27[8] = a2 & 1;
  v28 = (uint64_t *)((char *)a9 + v24[7]);
  *v28 = a3;
  v28[1] = a4;
  v29 = (uint64_t *)((char *)a9 + v24[8]);
  *v29 = a5;
  v29[1] = a6;
  v30 = (uint64_t *)((char *)a9 + v24[9]);
  *v30 = a7;
  v30[1] = a8;
  v31 = (uint64_t *)((char *)a9 + v24[10]);
  *v31 = a10;
  v31[1] = a11;
  v32 = (uint64_t *)((char *)a9 + v24[11]);
  *v32 = a12;
  v32[1] = a13;
  v33 = (uint64_t *)((char *)a9 + v24[12]);
  *v33 = a14;
  v33[1] = a15;
  *((_BYTE *)a9 + v24[13]) = a16;
  v34 = 0x65676172657641;
  if (a18)
    v34 = a17;
  v35 = 0xE700000000000000;
  if (a18)
    v35 = a18;
  v36 = (uint64_t *)((char *)a9 + v24[14]);
  *v36 = v34;
  v36[1] = v35;
  return result;
}

uint64_t MultipleDataPointView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t object_low;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  int v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  void (*v72)(_QWORD, _QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  void *v83;
  int v84;
  void (*v85)(_BYTE *, uint64_t, uint64_t);
  Swift::String v86;
  Swift::String v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  char v116;
  void (*v117)(_BYTE *, uint64_t);
  uint64_t v118;
  uint64_t result;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  Swift::String v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, _QWORD, _QWORD);
  int v132;
  void (*v133)(_QWORD, _QWORD);
  Swift::String v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  int v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  char v146;
  void (*v147)(_BYTE *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  Swift::String v150;
  Swift::String v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  Swift::String v156;
  Swift::String v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  _BYTE *v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  char v167;
  void (*v168)(_BYTE *, uint64_t);
  uint64_t v169;
  Swift::String v170;
  Swift::String v171;
  uint64_t v172;
  void (*v173)(_QWORD, _QWORD, _QWORD, _QWORD);
  int v174;
  void (*v175)(_QWORD, _QWORD);
  Swift::String v176;
  Swift::String v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  int v181;
  _BYTE *v182;
  uint64_t v183;
  _BYTE *v184;
  uint64_t v185;
  char v186;
  void (*v187)(_BYTE *, uint64_t);
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  void *object;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char countAndFlagsBits;
  _BYTE *v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  char v240;
  char v241;
  void (*v242)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v243)(_QWORD, _QWORD);
  void *v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  char v248;
  char v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  char v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _BYTE *v268;
  _BYTE *v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _BYTE *v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _BYTE *v280;
  uint64_t v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t v284;
  _BYTE *v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  void (*v304)(_QWORD, _QWORD);
  void (*v305)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  _BYTE *v312;
  void (*v313)(_BYTE *, _QWORD, uint64_t);
  Swift::String v314;
  Swift::String v315;
  Swift::String v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  char v322;
  uint64_t v323;
  _BYTE *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  uint64_t v340;
  _BYTE *v341;
  uint64_t v342;
  char v343;
  Swift::String v344;
  Swift::String v345;
  uint64_t v346;
  _BYTE *v347;
  char v348;
  Swift::String v349;
  Swift::String v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  char v355;
  _BYTE *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char v361;
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  _BYTE *v365;
  _BYTE *v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _BYTE *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  _BYTE *v381;
  uint64_t v382;
  _BYTE *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _BYTE v387[4];
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  void (*v392)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v393)(_QWORD, _QWORD);
  void (*v394)(_QWORD, _QWORD);
  Swift::String v395;
  uint64_t v396;
  _BYTE *v397;
  uint64_t v398;
  uint64_t *v399;
  Swift::String v400;
  void (*v401)(_BYTE *, uint64_t, uint64_t);
  Swift::String v402;
  uint64_t v403;
  uint64_t v404;
  _BYTE *v405;
  uint64_t v406;
  uint64_t v407;
  _BYTE *v408;
  _BYTE *v409;
  uint64_t v410;
  _BYTE *v411;
  uint64_t v412;
  _BYTE *v413;
  uint64_t v414;
  _BYTE *v415;
  uint64_t v416;
  _BYTE *v417;
  uint64_t v418;
  _BYTE *v419;
  __int128 v420;
  __int128 v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  __int128 v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  uint64_t OpaqueTypeConformance2;
  __int128 v435;
  uint64_t v436;
  uint64_t v437;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v410 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v408 = &v387[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v409 = &v387[-v6];
  v416 = type metadata accessor for FactItemHeroNumberView();
  v7 = *(_QWORD *)(v416 - 8);
  MEMORY[0x24BDAC7A8](v416);
  v9 = &v387[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v414 = type metadata accessor for ColorScheme();
  v412 = *(_QWORD *)(v414 - 8);
  v10 = MEMORY[0x24BDAC7A8](v414);
  v411 = &v387[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v413 = &v387[-v12];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v13);
  v417 = &v387[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v15);
  v419 = &v387[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for Font.TextStyle();
  v418 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v415 = &v387[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v21 = &v387[-v20];
  v22 = type metadata accessor for MultipleDataPointView();
  v23 = v1 + *(int *)(v22 + 48);
  if (!*(_QWORD *)(v23 + 8) || (v24 = v22, v25 = (uint64_t *)(v1 + *(int *)(v22 + 28)), (v26 = (void *)v25[1]) == 0))
  {
    result = AnyView.init<A>(_:)();
    *a1 = result;
    return result;
  }
  v402._object = *(void **)(v23 + 8);
  v403 = v3;
  v402._countAndFlagsBits = *(_QWORD *)v23;
  v400._countAndFlagsBits = *v25;
  v400._object = v26;
  v27 = *MEMORY[0x24BDF1888];
  v401 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v418 + 104);
  v401(v21, v27, v17);
  v28 = (uint64_t *)(v1 + *(int *)(v24 + 36));
  v29 = (void *)v28[1];
  v30 = v24;
  if (v29 && (v31 = (uint64_t *)(v1 + *(int *)(v24 + 32)), (v32 = (void *)v31[1]) != 0))
  {
    v397 = v9;
    v398 = v7;
    v399 = a1;
    v33 = *v28;
    v406 = v30;
    v407 = v17;
    v34 = *v31;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v35._countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    v404 = v1;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v35);
    v36._countAndFlagsBits = v34;
    v36._object = v32;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v36);
    v37._countAndFlagsBits = 9666786;
    v37._object = (void *)0xA300000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v37);
    v38._countAndFlagsBits = v33;
    v38._object = v29;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v38);
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
    LocalizedStringKey.init(stringInterpolation:)();
    v40 = Text.init(_:tableName:bundle:comment:)();
    v42 = v41;
    v44 = v43 & 1;
    LODWORD(v395._object) = *MEMORY[0x24BDF1670];
    object_low = LODWORD(v395._object);
    v46 = type metadata accessor for Font.Design();
    v47 = *(_QWORD *)(v46 - 8);
    v395._countAndFlagsBits = *(_QWORD *)(v47 + 104);
    v48 = v417;
    v49 = object_low;
    v50 = v46;
    v393 = (void (*)(_QWORD, _QWORD))v46;
    ((void (*)(_BYTE *, uint64_t))v395._countAndFlagsBits)(v417, v49);
    v394 = *(void (**)(_QWORD, _QWORD))(v47 + 56);
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v394)(v48, 0, 1, v50);
    v405 = v21;
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v48, &demangling cache variable for type metadata for Font.Design?);
    v51 = v40;
    v52 = Text.font(_:)();
    v54 = v53;
    v56 = v55;
    swift_release();
    outlined consume of Text.Storage(v51, v42, v44);
    swift_bridgeObjectRelease();
    v57 = Text.bold()();
    v409 = v58;
    v410 = v57;
    v408 = v59;
    LODWORD(v396) = v60;
    outlined consume of Text.Storage(v52, v54, v56 & 1);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v61._countAndFlagsBits = 0;
    v61._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v61);
    v391 = *(int *)(v406 + 44);
    v435 = *(_OWORD *)(v404 + v391);
    v392 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v62._countAndFlagsBits = Optional.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v62);
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v63);
    LocalizedStringKey.init(stringInterpolation:)();
    v64 = Text.init(_:tableName:bundle:comment:)();
    v66 = v65;
    v68 = v67 & 1;
    v69 = v415;
    v70 = v407;
    v401(v415, *MEMORY[0x24BDF1870], v407);
    v71 = v417;
    v72 = v393;
    ((void (*)(_BYTE *, _QWORD, void (*)(_QWORD, _QWORD)))v395._countAndFlagsBits)(v417, LODWORD(v395._object), v393);
    ((void (*)(_BYTE *, _QWORD, uint64_t, void (*)(_QWORD, _QWORD)))v394)(v71, 0, 1, v72);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v71, &demangling cache variable for type metadata for Font.Design?);
    v394 = *(void (**)(_QWORD, _QWORD))(v418 + 8);
    v394(v69, v70);
    v73 = v64;
    v74 = v66;
    v75 = Text.font(_:)();
    v77 = v76;
    LOBYTE(v66) = v78;
    swift_release();
    LOBYTE(v72) = v66 & 1;
    outlined consume of Text.Storage(v73, v74, v68);
    swift_bridgeObjectRelease();
    LODWORD(v435) = static HierarchicalShapeStyle.secondary.getter();
    v79 = Text.foregroundStyle<A>(_:)();
    v81 = v80;
    LOBYTE(v66) = v82 & 1;
    outlined consume of Text.Storage(v75, v77, (char)v72);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    v393 = (void (*)(_QWORD, _QWORD))Text.fontWeight(_:)();
    v395._object = v83;
    LODWORD(v395._countAndFlagsBits) = v84;
    v401 = v85;
    outlined consume of Text.Storage(v79, v81, v66);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v86._countAndFlagsBits = 0;
    v86._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v86);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v402);
    v87._countAndFlagsBits = 0;
    v87._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v87);
    LocalizedStringKey.init(stringInterpolation:)();
    v417 = (_BYTE *)Text.init(_:tableName:bundle:comment:)();
    v418 = v88;
    v415 = v89;
    LODWORD(v402._object) = v90;
    v91 = v406;
    v92 = v404;
    LODWORD(v72) = *(unsigned __int8 *)(v404 + *(int *)(v406 + 52));
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v93._countAndFlagsBits = 0;
    v93._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v93);
    v94 = (uint64_t *)(v92 + *(int *)(v91 + 56));
    v96 = *v94;
    v95 = v94[1];
    if ((_DWORD)v72 == 1)
    {
      *(_QWORD *)&v435 = v96;
      *((_QWORD *)&v435 + 1) = v95;
      v97._countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v97);
      swift_bridgeObjectRelease();
      v98._countAndFlagsBits = 8250;
      v98._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v98);
      LocalizedStringKey.init(stringInterpolation:)();
      v99 = Text.init(_:tableName:bundle:comment:)();
      v389 = v100;
      v390 = v99;
      v388 = v101;
      v402._countAndFlagsBits = v102;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v103._countAndFlagsBits = 0;
      v103._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v103);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v400);
      v104._countAndFlagsBits = 32;
      v104._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v104);
      v435 = *(_OWORD *)(v92 + v391);
      v105._countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v105);
      swift_bridgeObjectRelease();
      v106._countAndFlagsBits = 0;
      v106._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v106);
      LocalizedStringKey.init(stringInterpolation:)();
      v107 = Text.init(_:tableName:bundle:comment:)();
      v109 = v108;
      v111 = v110;
      v112 = v413;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB420], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v413);
      v114 = v411;
      v113 = v412;
      v115 = v414;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v412 + 104))(v411, *MEMORY[0x24BDEB408], v414);
      v116 = static ColorScheme.== infix(_:_:)();
      v117 = *(void (**)(_BYTE *, uint64_t))(v113 + 8);
      v117(v114, v115);
      v117(v112, v115);
      if ((v116 & 1) != 0)
        v118 = static Color.black.getter();
      else
        v118 = static Color.white.getter();
      *(_QWORD *)&v435 = v118;
      v189 = v111 & 1;
      v190 = Text.foregroundStyle<A>(_:)();
      v192 = v191;
      v194 = v193 & 1;
      outlined consume of Text.Storage(v107, v109, v189);
      swift_release();
      swift_bridgeObjectRelease();
      v195 = Text.bold()();
      v197 = v196;
      v199 = v198 & 1;
      outlined consume of Text.Storage(v190, v192, v194);
      swift_bridgeObjectRelease();
      v200 = v388 & 1;
      v202 = v389;
      v201 = v390;
      v412 = static Text.+ infix(_:_:)();
      v414 = v203;
      v419 = v204;
      LODWORD(v413) = v205 & 1;
      outlined consume of Text.Storage(v195, v197, v199);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v201, v202, v200);
      swift_bridgeObjectRelease();
      v206 = MEMORY[0x24BDF1FA0];
      v436 = MEMORY[0x24BDF1FA0];
      v437 = MEMORY[0x24BEAD6B8];
      v207 = MEMORY[0x24BEAD6B8];
      v208 = swift_allocObject();
      *(_QWORD *)&v435 = v208;
      v210 = v409;
      v209 = v410;
      v211 = v408;
      *(_QWORD *)(v208 + 16) = v410;
      *(_QWORD *)(v208 + 24) = v211;
      LODWORD(v411) = v396 & 1;
      *(_BYTE *)(v208 + 32) = v396 & 1;
      *(_QWORD *)(v208 + 40) = v210;
      *((_QWORD *)&v433 + 1) = v206;
      OpaqueTypeConformance2 = v207;
      v212 = swift_allocObject();
      *(_QWORD *)&v432 = v212;
      v213 = (uint64_t)v393;
      object = v395._object;
      *(_QWORD *)(v212 + 16) = v393;
      *(_QWORD *)(v212 + 24) = object;
      LODWORD(v406) = v395._countAndFlagsBits & 1;
      *(_BYTE *)(v212 + 32) = v395._countAndFlagsBits & 1;
      *(_QWORD *)(v212 + 40) = v401;
      v430 = v206;
      v431 = v207;
      v215 = swift_allocObject();
      v429 = v215;
      v216 = v412;
      v217 = v414;
      *(_QWORD *)(v215 + 16) = v412;
      *(_QWORD *)(v215 + 24) = v217;
      *(_BYTE *)(v215 + 32) = (_BYTE)v413;
      *(_QWORD *)(v215 + 40) = v419;
      v428 = 0;
      v426 = 0u;
      v427 = 0u;
      v424 = v206;
      v425 = MEMORY[0x24BEAD6B8];
      v218 = swift_allocObject();
      v422 = 0;
      v423 = v218;
      v219 = v417;
      v220 = v415;
      *(_QWORD *)(v218 + 16) = v417;
      *(_QWORD *)(v218 + 24) = v220;
      LODWORD(v404) = (uint64_t)v402._object & 1;
      *(_BYTE *)(v218 + 32) = (uint64_t)v402._object & 1;
      *(_QWORD *)(v218 + 40) = v418;
      v420 = 0u;
      v421 = 0u;
      v221 = (uint64_t)v219;
      outlined copy of Text.Storage(v209, (uint64_t)v211, (char)v411);
      v222 = (uint64_t)v220;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v213, (uint64_t)object, v406);
      swift_bridgeObjectRetain();
      v223 = v414;
      LOBYTE(v211) = (_BYTE)v413;
      outlined copy of Text.Storage(v216, v414, (char)v413);
      swift_bridgeObjectRetain();
      countAndFlagsBits = v395._countAndFlagsBits;
      outlined copy of Text.Storage(v221, v222, v404);
      swift_bridgeObjectRetain();
      v225 = v397;
      FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
      *((_QWORD *)&v433 + 1) = v403;
      v226 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
      v227 = v416;
      *(_QWORD *)&v435 = v416;
      *((_QWORD *)&v435 + 1) = v226;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v432);
      View.componentSpacing(top:bottom:)();
      outlined consume of Text.Storage(v412, v223, (char)v211);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v398 + 8))(v225, v227);
      outlined init with take of View(&v432, (uint64_t)&v435);
    }
    else
    {
      *(_QWORD *)&v435 = v96;
      *((_QWORD *)&v435 + 1) = v95;
      v150._countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v150);
      swift_bridgeObjectRelease();
      v151._countAndFlagsBits = 8250;
      v151._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v151);
      LocalizedStringKey.init(stringInterpolation:)();
      v152 = Text.init(_:tableName:bundle:comment:)();
      v391 = v153;
      v392 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v152;
      LODWORD(v390) = v154;
      v402._countAndFlagsBits = v155;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v156._countAndFlagsBits = 0;
      v156._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v156);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v400);
      v157._countAndFlagsBits = 0;
      v157._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v157);
      LocalizedStringKey.init(stringInterpolation:)();
      v158 = Text.init(_:tableName:bundle:comment:)();
      v160 = v159;
      v162 = v161;
      v163 = v413;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB420], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v413);
      v165 = v411;
      v164 = v412;
      v166 = v414;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v412 + 104))(v411, *MEMORY[0x24BDEB408], v414);
      v167 = static ColorScheme.== infix(_:_:)();
      v168 = *(void (**)(_BYTE *, uint64_t))(v164 + 8);
      v168(v165, v166);
      v168(v163, v166);
      if ((v167 & 1) != 0)
        v169 = static Color.black.getter();
      else
        v169 = static Color.white.getter();
      *(_QWORD *)&v435 = v169;
      v253 = v162 & 1;
      v254 = Text.foregroundStyle<A>(_:)();
      v256 = v255;
      v258 = v257 & 1;
      outlined consume of Text.Storage(v158, v160, v253);
      swift_release();
      swift_bridgeObjectRelease();
      v259 = Text.bold()();
      v261 = v260;
      v263 = v262 & 1;
      outlined consume of Text.Storage(v254, v256, v258);
      swift_bridgeObjectRelease();
      v264 = v390 & 1;
      v266 = v391;
      v265 = (uint64_t)v392;
      v419 = (_BYTE *)static Text.+ infix(_:_:)();
      v414 = v267;
      v269 = v268;
      v411 = v268;
      LODWORD(v413) = v270 & 1;
      outlined consume of Text.Storage(v259, v261, v263);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v265, v266, v264);
      swift_bridgeObjectRelease();
      v271 = MEMORY[0x24BEAD6B8];
      v436 = MEMORY[0x24BDF1FA0];
      v437 = MEMORY[0x24BEAD6B8];
      v272 = MEMORY[0x24BDF1FA0];
      v273 = swift_allocObject();
      *(_QWORD *)&v435 = v273;
      v274 = v409;
      v275 = v408;
      *(_QWORD *)(v273 + 16) = v410;
      *(_QWORD *)(v273 + 24) = v275;
      LODWORD(v412) = v396 & 1;
      *(_BYTE *)(v273 + 32) = v396 & 1;
      *(_QWORD *)(v273 + 40) = v274;
      OpaqueTypeConformance2 = 0;
      v432 = 0u;
      v433 = 0u;
      v430 = v272;
      v431 = v271;
      v276 = swift_allocObject();
      v429 = v276;
      v277 = (uint64_t)v419;
      v278 = v414;
      *(_QWORD *)(v276 + 16) = v419;
      *(_QWORD *)(v276 + 24) = v278;
      LOBYTE(v272) = (_BYTE)v413;
      *(_BYTE *)(v276 + 32) = (_BYTE)v413;
      *(_QWORD *)(v276 + 40) = v269;
      v428 = 0;
      v426 = 0u;
      v427 = 0u;
      v424 = MEMORY[0x24BDF1FA0];
      v425 = v271;
      v279 = swift_allocObject();
      v422 = 0;
      v423 = v279;
      v280 = v417;
      v281 = v418;
      v282 = v415;
      *(_QWORD *)(v279 + 16) = v417;
      *(_QWORD *)(v279 + 24) = v282;
      LOBYTE(v259) = (uint64_t)v402._object & 1;
      *(_BYTE *)(v279 + 32) = (uint64_t)v402._object & 1;
      *(_QWORD *)(v279 + 40) = v281;
      v420 = 0u;
      v421 = 0u;
      v283 = (uint64_t)v275;
      v284 = (uint64_t)v280;
      outlined copy of Text.Storage(v410, v283, v412);
      swift_bridgeObjectRetain();
      LOBYTE(v274) = v272;
      outlined copy of Text.Storage(v277, v278, v272);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v284, (uint64_t)v282, v259);
      swift_bridgeObjectRetain();
      v285 = v397;
      FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
      *((_QWORD *)&v433 + 1) = v403;
      v286 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
      v287 = v416;
      *(_QWORD *)&v435 = v416;
      *((_QWORD *)&v435 + 1) = v286;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v432);
      View.componentSpacing(top:bottom:)();
      outlined consume of Text.Storage(v277, v278, (char)v274);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v398 + 8))(v285, v287);
      outlined init with take of View(&v432, (uint64_t)&v435);
      v213 = (uint64_t)v393;
      countAndFlagsBits = v395._countAndFlagsBits;
    }
    v288 = __swift_project_boxed_opaque_existential_1(&v435, v436);
    MEMORY[0x24BDAC7A8](v288);
    (*(void (**)(_BYTE *))(v290 + 16))(&v387[-((v289 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v291 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage(v213, (uint64_t)v395._object, countAndFlagsBits & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v417, (uint64_t)v415, (uint64_t)v402._object & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v410, (uint64_t)v408, v396 & 1);
    swift_bridgeObjectRelease();
    v394(v405, v407);
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v435);
  }
  else
  {
    v120 = v1 + *(int *)(v30 + 40);
    if (!*(_QWORD *)(v120 + 8))
    {
      v149 = AnyView.init<A>(_:)();
      result = (*(uint64_t (**)(_BYTE *, uint64_t))(v418 + 8))(v21, v17);
      *a1 = v149;
      return result;
    }
    v121 = v30;
    v395._object = *(void **)(v120 + 8);
    v397 = v9;
    v398 = v7;
    v122 = *(_QWORD *)v120;
    v123 = *(unsigned __int8 *)(v1 + *(int *)(v30 + 52));
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v124._countAndFlagsBits = 0;
    v124._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v124);
    v125 = (uint64_t *)(v1 + *(int *)(v121 + 56));
    v127 = *v125;
    v126 = v125[1];
    v399 = a1;
    v406 = v121;
    v407 = v17;
    v404 = v1;
    v405 = v21;
    v395._countAndFlagsBits = v122;
    if (v123 == 1)
    {
      *(_QWORD *)&v435 = v127;
      *((_QWORD *)&v435 + 1) = v126;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v128._countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v128);
      swift_bridgeObjectRelease();
      v129._countAndFlagsBits = 8250;
      v129._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v129);
      LocalizedStringKey.init(stringInterpolation:)();
      v130 = Text.init(_:tableName:bundle:comment:)();
      v392 = v131;
      v393 = (void (*)(_QWORD, _QWORD))v130;
      LODWORD(v396) = v132;
      v394 = v133;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v134._countAndFlagsBits = 0;
      v134._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v134);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v400);
      v135._countAndFlagsBits = 32;
      v135._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v135);
      v435 = *(_OWORD *)(v1 + *(int *)(v121 + 44));
      v136._countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v136);
      swift_bridgeObjectRelease();
      v137._countAndFlagsBits = 0;
      v137._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v137);
      LocalizedStringKey.init(stringInterpolation:)();
      v138 = Text.init(_:tableName:bundle:comment:)();
      v400._countAndFlagsBits = v139;
      v400._object = v140;
      LODWORD(v391) = v141;
      v142 = v413;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB420], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v413);
      v144 = v411;
      v143 = v412;
      v145 = v414;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v412 + 104))(v411, *MEMORY[0x24BDEB408], v414);
      v146 = static ColorScheme.== infix(_:_:)();
      v147 = *(void (**)(_BYTE *, uint64_t))(v143 + 8);
      v147(v144, v145);
      v147(v142, v145);
      if ((v146 & 1) != 0)
        v148 = static Color.black.getter();
      else
        v148 = static Color.white.getter();
      *(_QWORD *)&v435 = v148;
      v228 = v391 & 1;
      v229 = v138;
      v230 = v400._countAndFlagsBits;
      v231 = Text.foregroundStyle<A>(_:)();
      v233 = v232;
      v235 = v234 & 1;
      outlined consume of Text.Storage(v229, v230, v228);
      swift_release();
      swift_bridgeObjectRelease();
      v236 = Text.bold()();
      v238 = v237;
      v240 = v239 & 1;
      outlined consume of Text.Storage(v231, v233, v235);
      swift_bridgeObjectRelease();
      v241 = v396 & 1;
      v242 = v392;
      v243 = v393;
      v244 = (void *)static Text.+ infix(_:_:)();
      v400._countAndFlagsBits = v245;
      v400._object = v244;
      v396 = v246;
      v248 = v247;
      v249 = v240;
      v250 = v248;
      outlined consume of Text.Storage(v236, v238, v249);
      swift_bridgeObjectRelease();
      v251 = (uint64_t)v243;
      v252 = (uint64_t)v242;
    }
    else
    {
      *(_QWORD *)&v435 = v127;
      *((_QWORD *)&v435 + 1) = v126;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v170._countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v170);
      swift_bridgeObjectRelease();
      v171._countAndFlagsBits = 8250;
      v171._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v171);
      LocalizedStringKey.init(stringInterpolation:)();
      v172 = Text.init(_:tableName:bundle:comment:)();
      v392 = v173;
      v393 = (void (*)(_QWORD, _QWORD))v172;
      LODWORD(v396) = v174;
      v394 = v175;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v176._countAndFlagsBits = 0;
      v176._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v176);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v400);
      v177._countAndFlagsBits = 0;
      v177._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v177);
      LocalizedStringKey.init(stringInterpolation:)();
      v178 = Text.init(_:tableName:bundle:comment:)();
      v400._countAndFlagsBits = v179;
      v400._object = v180;
      LODWORD(v391) = v181;
      v182 = v413;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB420], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v413);
      v184 = v411;
      v183 = v412;
      v185 = v414;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v412 + 104))(v411, *MEMORY[0x24BDEB408], v414);
      v186 = static ColorScheme.== infix(_:_:)();
      v187 = *(void (**)(_BYTE *, uint64_t))(v183 + 8);
      v187(v184, v185);
      v187(v182, v185);
      if ((v186 & 1) != 0)
        v188 = static Color.black.getter();
      else
        v188 = static Color.white.getter();
      *(_QWORD *)&v435 = v188;
      v292 = v391 & 1;
      v293 = v178;
      v294 = v400._countAndFlagsBits;
      v295 = Text.foregroundStyle<A>(_:)();
      v297 = v296;
      v299 = v298 & 1;
      outlined consume of Text.Storage(v293, v294, v292);
      swift_release();
      swift_bridgeObjectRelease();
      v300 = Text.bold()();
      v302 = v301;
      LOBYTE(v294) = v303 & 1;
      outlined consume of Text.Storage(v295, v297, v299);
      swift_bridgeObjectRelease();
      v241 = v396 & 1;
      v305 = v392;
      v304 = v393;
      v306 = (void *)static Text.+ infix(_:_:)();
      v400._countAndFlagsBits = v307;
      v400._object = v306;
      v396 = v308;
      v309 = v300;
      v250 = v310;
      outlined consume of Text.Storage(v309, v302, v294);
      swift_bridgeObjectRelease();
      v251 = (uint64_t)v304;
      v252 = (uint64_t)v305;
    }
    outlined consume of Text.Storage(v251, v252, v241);
    v311 = v404;
    v312 = v415;
    v313 = v401;
    swift_bridgeObjectRelease();
    LODWORD(v415) = v250 & 1;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v314._countAndFlagsBits = 0;
    v314._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v314);
    v435 = *(_OWORD *)(v311 + *(int *)(v406 + 44));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v315._countAndFlagsBits = Optional.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v315);
    swift_bridgeObjectRelease();
    v316._countAndFlagsBits = 0;
    v316._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v316);
    LocalizedStringKey.init(stringInterpolation:)();
    v317 = Text.init(_:tableName:bundle:comment:)();
    v319 = v318;
    v414 = v320;
    v322 = v321 & 1;
    v323 = v407;
    v313(v312, *MEMORY[0x24BDF1870], v407);
    v324 = v312;
    LODWORD(v401) = *MEMORY[0x24BDF1670];
    v325 = v401;
    v326 = type metadata accessor for Font.Design();
    v327 = *(_QWORD *)(v326 - 8);
    v393 = *(void (**)(_QWORD, _QWORD))(v327 + 104);
    v328 = v417;
    v329 = v325;
    v330 = v326;
    v391 = v326;
    v393(v417, v329);
    v392 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v327 + 56);
    v392(v328, 0, 1, v330);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v328, &demangling cache variable for type metadata for Font.Design?);
    v394 = *(void (**)(_QWORD, _QWORD))(v418 + 8);
    v394(v324, v323);
    v331 = Text.font(_:)();
    v333 = v332;
    LOBYTE(v323) = v334;
    v418 = v335;
    swift_release();
    LOBYTE(v330) = v323 & 1;
    outlined consume of Text.Storage(v317, v319, v322);
    swift_bridgeObjectRelease();
    LODWORD(v435) = static HierarchicalShapeStyle.secondary.getter();
    v336 = Text.foregroundStyle<A>(_:)();
    v338 = v337;
    LOBYTE(v323) = v339 & 1;
    outlined consume of Text.Storage(v331, v333, v330);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    v340 = Text.fontWeight(_:)();
    v413 = v341;
    v414 = v340;
    v418 = v342;
    LODWORD(v412) = v343 & 1;
    outlined consume of Text.Storage(v336, v338, v323);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v344._countAndFlagsBits = 0;
    v344._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v344);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v402);
    v345._countAndFlagsBits = 0;
    v345._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v345);
    LocalizedStringKey.init(stringInterpolation:)();
    v406 = Text.init(_:tableName:bundle:comment:)();
    v404 = v346;
    v411 = v347;
    LODWORD(v402._object) = v348 & 1;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v349._countAndFlagsBits = 0;
    v349._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v349);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v395);
    v350._countAndFlagsBits = 0;
    v350._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v350);
    LocalizedStringKey.init(stringInterpolation:)();
    v351 = Text.init(_:tableName:bundle:comment:)();
    v353 = v352;
    v355 = v354 & 1;
    v356 = v417;
    v357 = v391;
    ((void (*)(_BYTE *, _QWORD, uint64_t))v393)(v417, v401, v391);
    v392(v356, 0, 1, v357);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v356, &demangling cache variable for type metadata for Font.Design?);
    v358 = Text.font(_:)();
    v360 = v359;
    LOBYTE(v338) = v361;
    swift_release();
    outlined consume of Text.Storage(v351, v353, v355);
    swift_bridgeObjectRelease();
    v362 = (_BYTE *)Text.bold()();
    v417 = v362;
    v364 = v363;
    v402._countAndFlagsBits = v363;
    v366 = v365;
    v419 = v365;
    LOBYTE(v323) = v367 & 1;
    LODWORD(v401) = v367 & 1;
    outlined consume of Text.Storage(v358, v360, v338 & 1);
    swift_bridgeObjectRelease();
    v368 = MEMORY[0x24BDF1FA0];
    v369 = MEMORY[0x24BEAD6B8];
    v436 = MEMORY[0x24BDF1FA0];
    v437 = MEMORY[0x24BEAD6B8];
    v370 = swift_allocObject();
    *(_QWORD *)&v435 = v370;
    *(_QWORD *)(v370 + 16) = v362;
    *(_QWORD *)(v370 + 24) = v364;
    *(_BYTE *)(v370 + 32) = v323;
    *(_QWORD *)(v370 + 40) = v366;
    *((_QWORD *)&v433 + 1) = v368;
    OpaqueTypeConformance2 = v369;
    v371 = swift_allocObject();
    *(_QWORD *)&v432 = v371;
    v372 = v413;
    v373 = v414;
    *(_QWORD *)(v371 + 16) = v414;
    *(_QWORD *)(v371 + 24) = v372;
    LOBYTE(v323) = v412;
    *(_BYTE *)(v371 + 32) = v412;
    *(_QWORD *)(v371 + 40) = v418;
    v430 = v368;
    v431 = v369;
    v374 = swift_allocObject();
    v429 = v374;
    v375 = v396;
    *(_QWORD *)(v374 + 16) = v400._object;
    *(_QWORD *)(v374 + 24) = v375;
    LOBYTE(v338) = (_BYTE)v415;
    *(_BYTE *)(v374 + 32) = (_BYTE)v415;
    *(_QWORD *)(v374 + 40) = v400._countAndFlagsBits;
    v428 = 0;
    v426 = 0u;
    v427 = 0u;
    v424 = v368;
    v425 = v369;
    v376 = swift_allocObject();
    v422 = 0;
    v423 = v376;
    v377 = v406;
    v378 = v404;
    *(_QWORD *)(v376 + 16) = v406;
    *(_QWORD *)(v376 + 24) = v378;
    LOBYTE(v366) = v402._object;
    *(_BYTE *)(v376 + 32) = v402._object;
    *(_QWORD *)(v376 + 40) = v411;
    v420 = 0u;
    v421 = 0u;
    outlined copy of Text.Storage((uint64_t)v417, v402._countAndFlagsBits, (char)v401);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v373, (uint64_t)v372, v323);
    swift_bridgeObjectRetain();
    v379 = v400._object;
    v380 = v396;
    outlined copy of Text.Storage((uint64_t)v400._object, v396, v338);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v377, v378, (char)v366);
    swift_bridgeObjectRetain();
    v381 = v397;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    v382 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
    v383 = v409;
    v384 = v416;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(_BYTE *, uint64_t))(v398 + 8))(v381, v384);
    v385 = v410;
    v386 = v403;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v410 + 16))(v408, v383, v403);
    *(_QWORD *)&v435 = v384;
    *((_QWORD *)&v435 + 1) = v382;
    swift_getOpaqueTypeConformance2();
    v291 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage(v406, v404, (char)v402._object);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v414, (uint64_t)v413, v412);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v417, v402._countAndFlagsBits, (char)v401);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v379, v380, (char)v415);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v385 + 8))(v383, v386);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v394)(v405, v407);
  }
  *v399 = v291;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultipleDataPointView()
{
  return static View._viewListCount(inputs:)();
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB420], 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDECF48], 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDEEE08], 0xD000000000000013, 0x800000024A4F37B0, a1);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v23 = a4;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8]();
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v9, (uint64_t)v16, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a5, v16, v17);
  }
  else
  {
    v19 = static os_log_type_t.fault.getter();
    v20 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v20, v19))
    {
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24 = v22;
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, v23, &v24);
      _os_log_impl(&dword_24A46C000, v20, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD1158C](v22, -1, -1);
      MEMORY[0x24BD1158C](v21, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = type metadata accessor for ColorScheme();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD114F0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_24A4708C4()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t lazy protocol witness table accessor for type Context and conformance Context(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24BD11508](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of View(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MultipleDataPointView()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for MultipleDataPointView(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (char **)((char *)a2 + v8);
    v11 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      *(_QWORD *)v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = a3[7];
    v15 = &a1[v13];
    v16 = (uint64_t)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = *(_BYTE *)(v16 + 8);
    v17 = &a1[v14];
    v18 = (char **)((char *)a2 + v14);
    v19 = v18[1];
    *(_QWORD *)v17 = *v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = a3[8];
    v21 = a3[9];
    v22 = &a1[v20];
    v23 = (char **)((char *)a2 + v20);
    v24 = v23[1];
    *(_QWORD *)v22 = *v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = &a1[v21];
    v26 = (char **)((char *)a2 + v21);
    v27 = v26[1];
    *(_QWORD *)v25 = *v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = a3[10];
    v29 = a3[11];
    v30 = &a1[v28];
    v31 = (char **)((char *)a2 + v28);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = &a1[v29];
    v34 = (char **)((char *)a2 + v29);
    v35 = v34[1];
    *(_QWORD *)v33 = *v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = a3[12];
    v37 = a3[13];
    v38 = &a1[v36];
    v39 = (char **)((char *)a2 + v36);
    v40 = v39[1];
    *(_QWORD *)v38 = *v39;
    *((_QWORD *)v38 + 1) = v40;
    a1[v37] = *((_BYTE *)a2 + v37);
    v41 = a3[14];
    v42 = &a1[v41];
    v43 = (char **)((char *)a2 + v41);
    v44 = v43[1];
    *(_QWORD *)v42 = *v43;
    *((_QWORD *)v42 + 1) = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MultipleDataPointView(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MultipleDataPointView(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
  }
  else
  {
    *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v13 = a3[6];
  v14 = a3[7];
  v15 = (char *)a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = *(_BYTE *)(v16 + 8);
  v17 = (_QWORD *)((char *)a1 + v14);
  v18 = (_QWORD *)(a2 + v14);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)((char *)a1 + v21);
  v26 = (_QWORD *)(a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[10];
  v29 = a3[11];
  v30 = (_QWORD *)((char *)a1 + v28);
  v31 = (_QWORD *)(a2 + v28);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = (_QWORD *)((char *)a1 + v29);
  v34 = (_QWORD *)(a2 + v29);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = a3[12];
  v37 = a3[13];
  v38 = (_QWORD *)((char *)a1 + v36);
  v39 = (_QWORD *)(a2 + v36);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  *((_BYTE *)a1 + v37) = *(_BYTE *)(a2 + v37);
  v41 = a3[14];
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultipleDataPointView(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (_QWORD *)(a1 + v9);
    v11 = (_QWORD *)(a2 + v9);
    outlined destroy of Font.Design?(a1 + v9, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  *(_BYTE *)(v14 + 8) = *((_BYTE *)v15 + 8);
  *(_QWORD *)v14 = v16;
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = a3[10];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = a3[11];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = a3[12];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v35 = a3[14];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Font.Design?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for MultipleDataPointView(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  v16 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  v17 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  return a1;
}

_QWORD *assignWithTake for MultipleDataPointView(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;

  v6 = (void *)*a1;
  *a1 = *a2;

  a1[1] = a2[1];
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of Font.Design?((uint64_t)a1 + v7, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (_QWORD *)((char *)a1 + v13);
  v17 = (_QWORD *)((char *)a2 + v13);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[10];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[11];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  v39 = *v37;
  v38 = v37[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  v40 = a3[12];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  v45 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v49 = *v47;
  v48 = v47[1];
  *v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultipleDataPointView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A471380(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MultipleDataPointView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24A471418(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for MultipleDataPointView()
{
  unint64_t v0;

  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
  }
}

uint64_t sub_24A471578()
{
  return MEMORY[0x24BDF4768];
}

unint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

unint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    result = _StringObject.sharedUTF8.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  char v5;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      result = _StringGuts.copyUTF8(into:)();
      if ((v5 & 1) != 0)
        break;
      if (result == v2)
        return (uint64_t)v3;
      __break(1u);
LABEL_9:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined init with copy of Environment<ColorSchemeContrast>.Content(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t GenericMedCompletedLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogModel);
}

uint64_t GenericMedCompletedLogSnippet.text3.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Text.Storage(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for GenericMedCompletedLogSnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenericMedCompletedLogSnippet;
  if (!type metadata singleton initialization cache for GenericMedCompletedLogSnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GenericMedCompletedLogSnippet.text3.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;

  v9 = v4 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 20);
  outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_BYTE *)(v9 + 16) = a3 & 1;
  *(_QWORD *)(v9 + 24) = a4;
  return result;
}

uint64_t (*GenericMedCompletedLogSnippet.text3.modify())()
{
  type metadata accessor for GenericMedCompletedLogSnippet();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogSnippet.buttonTakenColor.getter()
{
  return GenericMedCompletedLogSnippet.buttonTakenColor.getter((uint64_t (*)(uint64_t))MEMORY[0x24BDF3D20], (uint64_t (*)(uint64_t))MEMORY[0x24BDF3C88]);
}

uint64_t GenericMedCompletedLogSnippet.buttonSkippedColor.getter()
{
  return GenericMedCompletedLogSnippet.buttonTakenColor.getter((uint64_t (*)(uint64_t))MEMORY[0x24BDF3CF8], (uint64_t (*)(uint64_t))MEMORY[0x24BDF3CB0]);
}

uint64_t GenericMedCompletedLogSnippet.buttonTakenColor.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for ColorScheme();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v15 - v9;
  type metadata accessor for GenericMedCompletedLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x24BDEB408], v4);
  v11 = static ColorScheme.== infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v13 = ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
  if ((v11 & 1) != 0)
    return a1(v13);
  else
    return a2(v13);
}

uint64_t GenericMedCompletedLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v4);
  v5 = (int *)type metadata accessor for GenericMedCompletedLogSnippet();
  v6 = (uint64_t *)(a2 + v5[6]);
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v6 = EnvironmentObject.init()();
  v6[1] = v7;
  v8 = (uint64_t *)(a2 + v5[7]);
  *v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of GenericMedCompletedLogModel(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogModel);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 28)) == 1)
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + 8));
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
    LocalizedStringKey.init(stringInterpolation:)();
  }
  v11 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  result = outlined destroy of GenericMedCompletedLogModel(a1, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogModel);
  v19 = a2 + v5[5];
  *(_QWORD *)v19 = v11;
  *(_QWORD *)(v19 + 8) = v13;
  *(_BYTE *)(v19 + 16) = v15 & 1;
  *(_QWORD *)(v19 + 24) = v17;
  return result;
}

uint64_t GenericMedCompletedLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  void *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void (*v136)(char *, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  _BYTE *v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;

  v182 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetBody<TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>);
  v176 = *(_QWORD *)(v1 - 8);
  v177 = (char *)v1;
  MEMORY[0x24BDAC7A8](v1);
  v175 = (char *)&v134 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for GenericMedCompletedLogSnippet();
  v179 = *(_QWORD *)(v157 - 8);
  MEMORY[0x24BDAC7A8](v157);
  v180 = v3;
  v181 = (uint64_t)&v134 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>);
  v164 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v163 = (char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v167 = *(_QWORD *)(v5 - 8);
  v168 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v165 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SeparatorStyle();
  v160 = *(_QWORD *)(v7 - 8);
  v161 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v159 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v9);
  v152 = (char *)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v11);
  v151 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FactItemHeroNumberView();
  v154 = *(_QWORD *)(v13 - 8);
  v155 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v153 = (char *)&v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v172 = *(_QWORD *)(v15 - 8);
  v173 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v158 = (char *)&v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v171 = (char *)&v134 - v18;
  v150 = type metadata accessor for StatusIndicatorView.IndicatorType();
  v148 = *(_QWORD *)(v150 - 8);
  MEMORY[0x24BDAC7A8](v150);
  v149 = (char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for StatusIndicatorView();
  v162 = *(_QWORD *)(v170 - 8);
  v20 = *(char **)(v162 + 64);
  v21 = MEMORY[0x24BDAC7A8](v170);
  v169 = (char *)&v134 - ((unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v174 = (char *)&v134 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v23);
  v145 = (uint64_t)&v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for SnippetHeaderView();
  v25 = MEMORY[0x24BDAC7A8](v147);
  v144 = (char *)&v134 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v146 = (uint64_t)&v134 - v27;
  v178 = type metadata accessor for Font.TextStyle();
  v28 = *(_QWORD *)(v178 - 8);
  MEMORY[0x24BDAC7A8](v178);
  v30 = (char *)&v134 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v134 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for AppPunchout();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(_QWORD *)(v35 + 64);
  v37 = MEMORY[0x24BDAC7A8](v34);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v134 - v38;
  v40 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  if (v183[v40[9]] != 1)
  {
    v55 = v181;
    outlined init with copy of GenericMedCompletedLogModel((uint64_t)v183, v181, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogSnippet);
    v56 = (*(unsigned __int8 *)(v179 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80);
    v57 = swift_allocObject();
    outlined init with take of GenericMedCompletedLogSnippet(v55, v57 + v56, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogSnippet);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>, MEMORY[0x24BDF5420]);
    v58 = v175;
    SnippetBody.init(content:)();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type SnippetBody<TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>> and conformance SnippetBody<A>, &demangling cache variable for type metadata for SnippetBody<TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>, MEMORY[0x24BEAD9C0]);
    v59 = v177;
    v54 = View.eraseToAnyView()();
    result = (*(uint64_t (**)(char *, char *))(v176 + 8))(v58, v59);
    goto LABEL_9;
  }
  v41 = (uint64_t)v33;
  v140 = v36;
  v141 = (char *)&v134 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = v20;
  v176 = v28;
  v177 = v39;
  v142 = v30;
  v143 = v35;
  v42 = v178;
  v43 = (uint64_t *)&v183[v40[12]];
  v44 = v43[1];
  if (!v44)
    goto LABEL_7;
  v45 = (uint64_t *)&v183[v40[11]];
  v46 = v45[1];
  if (!v46)
    goto LABEL_7;
  v47 = (uint64_t *)&v183[v40[13]];
  v48 = (void *)v47[1];
  if (!v48)
    goto LABEL_7;
  v139 = *v43;
  v138 = *v45;
  v137 = *v47;
  v49 = v40;
  v50 = v41;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)&v183[v40[6]], v41, &demangling cache variable for type metadata for AppPunchout?);
  v51 = v143;
  v52 = v34;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v50, 1, v34) == 1)
  {
    outlined destroy of Font.Design?(v50, &demangling cache variable for type metadata for AppPunchout?);
LABEL_7:
    result = AnyView.init<A>(_:)();
    v54 = result;
    goto LABEL_9;
  }
  v136 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
  v136(v177, v50, v34);
  (*(void (**)(char *, _QWORD, uint64_t))(v176 + 104))(v142, *MEMORY[0x24BDF1888], v42);
  v60 = v49[14];
  v61 = v183;
  v135 = v48;
  v62 = v145;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)&v183[v60], v145, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v63 = v147;
  v64 = v46;
  v65 = (uint64_t)v144;
  v66 = (uint64_t *)&v144[*(int *)(v147 + 20)];
  *v66 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v67 = (uint64_t *)(v65 + *(int *)(v63 + 24));
  *v67 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v62, v65);
  v68 = v65;
  v69 = v146;
  outlined init with take of GenericMedCompletedLogSnippet(v68, v146, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderView and conformance SnippetHeaderView, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderView, (uint64_t)&protocol conformance descriptor for SnippetHeaderView);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v147 = View.eraseToAnyView()();
  outlined destroy of GenericMedCompletedLogModel(v69, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v70 = *v61;
  if (*v61)
    v71 = v139;
  else
    v71 = v138;
  v146 = v52;
  if (v70)
    v72 = v44;
  else
    v72 = v64;
  if (v70)
    v73 = (unsigned int *)MEMORY[0x24BEADF80];
  else
    v73 = (unsigned int *)MEMORY[0x24BEADF90];
  swift_bridgeObjectRelease();
  v201 = MEMORY[0x24BEE0D00];
  v202 = MEMORY[0x24BEAE5C0];
  v199 = v71;
  v200 = v72;
  (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v149, *v73, v150);
  StatusIndicatorView.init(message:type:showIndicator:)();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v74._countAndFlagsBits = 0;
  v74._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v74);
  v75._countAndFlagsBits = v137;
  v75._object = v135;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v75);
  v76._countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v76);
  LocalizedStringKey.init(stringInterpolation:)();
  v77 = Text.init(_:tableName:bundle:comment:)();
  v79 = v78;
  v81 = v80 & 1;
  v82 = *MEMORY[0x24BDF1670];
  v83 = type metadata accessor for Font.Design();
  v84 = *(_QWORD *)(v83 - 8);
  v85 = (uint64_t)v152;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 104))(v152, v82, v83);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v85, 0, 1, v83);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v85, &demangling cache variable for type metadata for Font.Design?);
  v86 = Text.font(_:)();
  v88 = v87;
  LOBYTE(v85) = v89;
  swift_release();
  LOBYTE(v82) = v85 & 1;
  outlined consume of Text.Storage(v77, v79, v81);
  swift_bridgeObjectRelease();
  v90 = Text.bold()();
  v92 = v91;
  v94 = v93;
  v96 = v95;
  outlined consume of Text.Storage(v86, v88, v82);
  swift_bridgeObjectRelease();
  v97 = MEMORY[0x24BDF1FA0];
  v98 = MEMORY[0x24BEAD6B8];
  v201 = MEMORY[0x24BDF1FA0];
  v202 = MEMORY[0x24BEAD6B8];
  v99 = swift_allocObject();
  v199 = v99;
  *(_QWORD *)(v99 + 16) = v90;
  *(_QWORD *)(v99 + 24) = v92;
  *(_BYTE *)(v99 + 32) = v94 & 1;
  *(_QWORD *)(v99 + 40) = v96;
  v198 = 0;
  v196 = 0u;
  v197 = 0u;
  v195 = 0;
  v193 = 0u;
  v194 = 0u;
  v100 = &v183[*(int *)(v157 + 20)];
  v101 = *(_QWORD *)v100;
  v102 = *((_QWORD *)v100 + 1);
  v103 = v100[16];
  v104 = *((_QWORD *)v100 + 3);
  v191 = v97;
  v192 = v98;
  v105 = swift_allocObject();
  v189 = 0;
  v190 = v105;
  *(_QWORD *)(v105 + 16) = v101;
  *(_QWORD *)(v105 + 24) = v102;
  *(_BYTE *)(v105 + 32) = v103;
  *(_QWORD *)(v105 + 40) = v104;
  v187 = 0u;
  v188 = 0u;
  v186 = 0;
  v184 = 0u;
  v185 = 0u;
  outlined copy of Text.Storage(v101, v102, v103);
  swift_bridgeObjectRetain();
  v106 = v153;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  v108 = v159;
  v107 = v160;
  v109 = v161;
  (*(void (**)(char *, _QWORD, uint64_t))(v160 + 104))(v159, *MEMORY[0x24BEAB510], v161);
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
  v110 = v171;
  v111 = v155;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v109);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v106, v111);
  v112 = v173;
  v113 = v172;
  v114 = v158;
  (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v158, v110, v173);
  v115 = v162;
  v116 = v170;
  (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v169, v174, v170);
  v117 = v113;
  v118 = (*(unsigned __int8 *)(v113 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
  v119 = (v156 + *(unsigned __int8 *)(v115 + 80) + v118) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
  v120 = swift_allocObject();
  *(_QWORD *)(v120 + 16) = v147;
  (*(void (**)(unint64_t, char *, uint64_t))(v117 + 32))(v120 + v118, v114, v112);
  v121 = v115;
  (*(void (**)(unint64_t, char *, uint64_t))(v115 + 32))(v120 + v119, v169, v116);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>, MEMORY[0x24BDF5420]);
  v122 = v163;
  SnippetBody.init(content:)();
  v123 = v181;
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v183, v181, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogSnippet);
  v124 = v143;
  v125 = v141;
  v126 = v146;
  (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v141, v177, v146);
  v127 = (*(unsigned __int8 *)(v179 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80);
  v128 = (v180 + *(unsigned __int8 *)(v124 + 80) + v127) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
  v129 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v123, v129 + v127, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogSnippet);
  v136((char *)(v129 + v128), (uint64_t)v125, v126);
  v130 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>, MEMORY[0x24BEADBF8]);
  v132 = v165;
  v131 = v166;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v164 + 8))(v122, v131);
  v199 = v131;
  v200 = v130;
  swift_getOpaqueTypeConformance2();
  v133 = v168;
  v54 = View.eraseToAnyView()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v167 + 8))(v132, v133);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v173);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v174, v170);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v142, v178);
  result = (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v177, v126);
LABEL_9:
  *v182 = v54;
  return result;
}

uint64_t closure #1 in GenericMedCompletedLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v31 = a3;
  v32 = a4;
  v33 = a1;
  v5 = type metadata accessor for StatusIndicatorView();
  v29 = *(_QWORD *)(v5 - 8);
  v6 = v29;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v9;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v28 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v30 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v28 - v16;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v19((char *)&v28 - v16, a2, v12);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v20(v11, v31, v5);
  v19(v15, (uint64_t)v17, v12);
  v20(v9, (uint64_t)v11, v5);
  v21 = v32;
  *(_QWORD *)v32 = v33;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView));
  v19(&v21[*(int *)(v22 + 48)], (uint64_t)v15, v12);
  v23 = &v21[*(int *)(v22 + 64)];
  v24 = v28;
  v20(v23, (uint64_t)v28, v5);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  swift_retain_n();
  v25(v11, v5);
  v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v17, v12);
  v25(v24, v5);
  v26(v15, v12);
  return swift_release();
}

void closure #2 in GenericMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 24));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t closure #3 in GenericMedCompletedLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  void (*v84)(char *, uint64_t);
  void (*v85)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v106 = a1;
  v102 = a2;
  v98 = type metadata accessor for StatusIndicatorView.IndicatorType();
  v96 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v97 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for StatusIndicatorView();
  v99 = *(_QWORD *)(v101 - 8);
  v4 = MEMORY[0x24BDAC7A8](v101);
  v100 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v110 = (char *)&v87 - v6;
  v87 = type metadata accessor for GenericMedCompletedLogSnippet();
  v89 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v90 = v7;
  v91 = (uint64_t)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FactItemHeroNumberView();
  v94 = *(_QWORD *)(v8 - 8);
  v95 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v93 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v108 = *(_QWORD *)(v10 - 8);
  v109 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v111 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v88 = (char *)&v87 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v107 = (char *)&v87 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v87 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SashStandard.Title();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (uint64_t *)((char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = type metadata accessor for SashStandard();
  MEMORY[0x24BDAC7A8](v29);
  v92 = type metadata accessor for SashStandardView();
  v104 = *(_QWORD *)(v92 - 8);
  v30 = MEMORY[0x24BDAC7A8](v92);
  v105 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v87 - v32;
  v34 = (_QWORD *)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 32));
  v35 = v34[1];
  *v28 = *v34;
  v28[1] = v35;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x24BEAB120], v25);
  v36 = type metadata accessor for VisualProperty();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v24, 1, 1, v36);
  v37 = type metadata accessor for Color();
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
  v38(v21, 1, 1, v37);
  v38(v19, 1, 1, v37);
  v129 = 0;
  v128 = 0u;
  v127 = 0u;
  swift_bridgeObjectRetain();
  SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)();
  v103 = v33;
  SashStandardView.init(model:)();
  LocalizedStringKey.init(stringLiteral:)();
  v39 = Text.init(_:tableName:bundle:comment:)();
  v41 = v40;
  LOBYTE(v21) = v42;
  v44 = v43;
  v45 = MEMORY[0x24BDF1FA0];
  v46 = MEMORY[0x24BEAD6B8];
  *((_QWORD *)&v128 + 1) = MEMORY[0x24BDF1FA0];
  v129 = MEMORY[0x24BEAD6B8];
  v47 = swift_allocObject();
  *(_QWORD *)&v127 = v47;
  *(_QWORD *)(v47 + 16) = v39;
  *(_QWORD *)(v47 + 24) = v41;
  *(_BYTE *)(v47 + 32) = v21 & 1;
  *(_QWORD *)(v47 + 40) = v44;
  v126 = 0;
  v125 = 0u;
  v124 = 0u;
  LocalizedStringKey.init(stringLiteral:)();
  v48 = Text.init(_:tableName:bundle:comment:)();
  v50 = v49;
  LOBYTE(v35) = v51;
  v53 = v52;
  v122 = v45;
  v123 = v46;
  v54 = swift_allocObject();
  v121 = v54;
  *(_QWORD *)(v54 + 16) = v48;
  *(_QWORD *)(v54 + 24) = v50;
  *(_BYTE *)(v54 + 32) = v35 & 1;
  *(_QWORD *)(v54 + 40) = v53;
  v55 = v106;
  v56 = v106 + *(int *)(v87 + 20);
  v57 = *(_QWORD *)v56;
  v58 = *(_QWORD *)(v56 + 8);
  LOBYTE(v35) = *(_BYTE *)(v56 + 16);
  v59 = *(_QWORD *)(v56 + 24);
  v119 = v45;
  v120 = v46;
  v60 = swift_allocObject();
  v117 = 0;
  v118 = v60;
  *(_QWORD *)(v60 + 16) = v57;
  *(_QWORD *)(v60 + 24) = v58;
  *(_BYTE *)(v60 + 32) = v35;
  *(_QWORD *)(v60 + 40) = v59;
  v115 = 0u;
  v116 = 0u;
  v114 = 0;
  v112 = 0u;
  v113 = 0u;
  outlined copy of Text.Storage(v57, v58, v35);
  swift_bridgeObjectRetain();
  v61 = v93;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  v62 = v91;
  outlined init with copy of GenericMedCompletedLogModel(v55, v91, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogSnippet);
  v63 = (*(unsigned __int8 *)(v89 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
  v64 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v62, v64 + v63, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogSnippet);
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
  v65 = v88;
  v66 = v95;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v61, v66);
  v67 = v107;
  v68 = v108;
  v69 = v65;
  v70 = v109;
  (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v107, v69, v109);
  *((_QWORD *)&v128 + 1) = MEMORY[0x24BEE0D00];
  v129 = MEMORY[0x24BEAE5C0];
  *(_QWORD *)&v127 = 0x646567676F4CLL;
  *((_QWORD *)&v127 + 1) = 0xE600000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v97, *MEMORY[0x24BEADF80], v98);
  v71 = v110;
  StatusIndicatorView.init(message:type:showIndicator:)();
  v72 = v105;
  v73 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v74 = v92;
  v73(v105, v103, v92);
  v75 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v75(v111, v67, v70);
  v77 = v99;
  v76 = v100;
  v78 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
  v79 = v101;
  v78(v100, v71, v101);
  v80 = v102;
  v73(v102, v72, v74);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView));
  v82 = v109;
  v75(&v80[*(int *)(v81 + 48)], v111, v109);
  v78(&v80[*(int *)(v81 + 64)], v76, v79);
  v83 = *(void (**)(char *, uint64_t))(v77 + 8);
  v83(v110, v79);
  v84 = *(void (**)(char *, uint64_t))(v108 + 8);
  v84(v107, v82);
  v85 = *(void (**)(char *, uint64_t))(v104 + 8);
  v85(v103, v74);
  v83(v76, v79);
  v84(v111, v82);
  return ((uint64_t (*)(char *, uint64_t))v85)(v105, v74);
}

uint64_t closure #1 in closure #3 in GenericMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 24));
  if (v5)
  {
    v6 = type metadata accessor for GenericMedCompletedLogModel();
    outlined init with copy of Environment<ColorSchemeContrast>.Content(a1 + *(int *)(v6 + 24), (uint64_t)v4, &demangling cache variable for type metadata for AppPunchout?);
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) != 1)
    {
      v9 = v5;
      dispatch thunk of Context.perform(appPunchout:)();

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v4, v7);
    }
    __break(1u);
  }
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #3 in GenericMedCompletedLogSnippet.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GenericMedCompletedLogSnippet() - 8) + 80);
  return closure #3 in GenericMedCompletedLogSnippet.body.getter(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD114FC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.colorSchemeContrast : EnvironmentValues()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t sub_24A473968()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t outlined init with take of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A473A14()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A473A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for StatusIndicatorView();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GenericMedCompletedLogSnippet.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StatusIndicatorView() - 8) + 80);
  return closure #1 in GenericMedCompletedLogSnippet.body.getter(*(_QWORD *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t sub_24A473B74()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = (int *)type metadata accessor for GenericMedCompletedLogSnippet();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v16 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v0 + v3;
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for GenericMedCompletedLogModel();
  v9 = v0 + v3 + *(int *)(v8 + 24);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v9, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v7 + *(int *)(v8 + 56);
  v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(v7 + v1[5]), *(_QWORD *)(v7 + v1[5] + 8), *(_BYTE *)(v7 + v1[5] + 16));
  swift_bridgeObjectRelease();

  v13 = v7 + v1[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v16 + v6) & ~v6), v4);
  return swift_deallocObject();
}

void partial apply for closure #2 in GenericMedCompletedLogSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for GenericMedCompletedLogSnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in GenericMedCompletedLogSnippet.body.getter(v0 + v2);
}

uint64_t lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24BD11508](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GenericMedCompletedLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for GenericMedCompletedLogSnippet(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  id v65;
  uint64_t v66;
  uint64_t v68;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = (int *)type metadata accessor for GenericMedCompletedLogModel();
    v8 = v7[6];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AppPunchout();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)v4 + v7[7]) = *((_BYTE *)a2 + v7[7]);
    v16 = v7[8];
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *((_BYTE *)v4 + v7[9]) = *((_BYTE *)a2 + v7[9]);
    v20 = v7[10];
    v21 = (_QWORD *)((char *)v4 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = v7[11];
    v25 = (_QWORD *)((char *)v4 + v24);
    v26 = (_QWORD *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = v7[12];
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = v7[13];
    v33 = (_QWORD *)((char *)v4 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = v7[14];
    __dst = (char *)v4 + v36;
    v37 = (char *)a2 + v36;
    v38 = type metadata accessor for SnippetHeaderModel();
    v68 = *(_QWORD *)(v38 - 8);
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(__dst, v37, v41);
      v42 = *(int *)(v38 + 20);
      v43 = &__dst[v42];
      v44 = &v37[v42];
      v45 = *((_QWORD *)v44 + 1);
      *(_QWORD *)v43 = *(_QWORD *)v44;
      *((_QWORD *)v43 + 1) = v45;
      v46 = *(int *)(v38 + 24);
      v47 = &__dst[v46];
      v48 = &v37[v46];
      v49 = *((_QWORD *)v48 + 1);
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *((_QWORD *)v47 + 1) = v49;
      v50 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(__dst, 0, 1, v38);
    }
    v51 = a3[5];
    v52 = (char *)v4 + v51;
    v53 = (char *)a2 + v51;
    v54 = *(_QWORD *)((char *)a2 + v51);
    v55 = *(_QWORD *)((char *)a2 + v51 + 8);
    v56 = *((_BYTE *)a2 + v51 + 16);
    outlined copy of Text.Storage(v54, v55, v56);
    *(_QWORD *)v52 = v54;
    *((_QWORD *)v52 + 1) = v55;
    v52[16] = v56;
    *((_QWORD *)v52 + 3) = *((_QWORD *)v53 + 3);
    v57 = a3[6];
    v58 = a3[7];
    v59 = (_QWORD *)((char *)v4 + v57);
    v60 = (char *)a2 + v57;
    v62 = *(void **)v60;
    v61 = *((_QWORD *)v60 + 1);
    *v59 = v62;
    v59[1] = v61;
    v63 = (_QWORD *)((char *)v4 + v58);
    v64 = (_QWORD *)((char *)a2 + v58);
    swift_bridgeObjectRetain();
    v65 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v66 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v63, v64, v66);
    }
    else
    {
      *v63 = *v64;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t destroy for GenericMedCompletedLogSnippet(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v4 = type metadata accessor for GenericMedCompletedLogModel();
  v5 = a1 + *(int *)(v4 + 24);
  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(v4 + 56);
  v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();

  v11 = a1 + a2[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v12 = type metadata accessor for ColorScheme();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  uint64_t v66;
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  v7 = v6[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  v14 = v6[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v18 = v6[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v6[11];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = v6[12];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v6[13];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = v6[14];
  __dst = (char *)(a1 + v34);
  v35 = (char *)(a2 + v34);
  v36 = type metadata accessor for SnippetHeaderModel();
  v66 = *(_QWORD *)(v36 - 8);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v37(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v39 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(__dst, v35, v39);
    v40 = *(int *)(v36 + 20);
    v41 = &__dst[v40];
    v42 = &v35[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = *(int *)(v36 + 24);
    v45 = &__dst[v44];
    v46 = &v35[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v48 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(__dst, 0, 1, v36);
  }
  v49 = a3[5];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_QWORD *)(a2 + v49);
  v53 = *(_QWORD *)(a2 + v49 + 8);
  v54 = *(_BYTE *)(a2 + v49 + 16);
  outlined copy of Text.Storage(v52, v53, v54);
  *(_QWORD *)v50 = v52;
  *(_QWORD *)(v50 + 8) = v53;
  *(_BYTE *)(v50 + 16) = v54;
  *(_QWORD *)(v50 + 24) = *(_QWORD *)(v51 + 24);
  v55 = a3[6];
  v56 = a3[7];
  v57 = (_QWORD *)(a1 + v55);
  v58 = a2 + v55;
  v60 = *(void **)v58;
  v59 = *(_QWORD *)(v58 + 8);
  *v57 = v60;
  v57[1] = v59;
  v61 = (_QWORD *)(a1 + v56);
  v62 = (_QWORD *)(a2 + v56);
  swift_bridgeObjectRetain();
  v63 = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v64 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v61, v62, v64);
  }
  else
  {
    *v61 = *v62;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  v7 = v6[6];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  v16 = v6[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v19 = v6[10];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = v6[11];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = v6[12];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = v6[13];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = v6[14];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = type metadata accessor for SnippetHeaderModel();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      v39 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v32, v33, v39);
      v40 = *(int *)(v34 + 20);
      v41 = &v32[v40];
      v42 = &v33[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
      v43 = *(int *)(v34 + 24);
      v44 = &v32[v43];
      v45 = &v33[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
      v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  v68 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v32, v33, v68);
  v69 = *(int *)(v34 + 20);
  v70 = &v32[v69];
  v71 = &v33[v69];
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *((_QWORD *)v70 + 1) = *((_QWORD *)v71 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v72 = *(int *)(v34 + 24);
  v73 = &v32[v72];
  v74 = &v33[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  v48 = a3[5];
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = *(_QWORD *)(a2 + v48);
  v52 = *(_QWORD *)(a2 + v48 + 8);
  v53 = *(_BYTE *)(a2 + v48 + 16);
  outlined copy of Text.Storage(v51, v52, v53);
  v54 = *(_QWORD *)v49;
  v55 = *(_QWORD *)(v49 + 8);
  v56 = *(_BYTE *)(v49 + 16);
  *(_QWORD *)v49 = v51;
  *(_QWORD *)(v49 + 8) = v52;
  *(_BYTE *)(v49 + 16) = v53;
  outlined consume of Text.Storage(v54, v55, v56);
  *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v57 = a3[6];
  v58 = (_QWORD *)(a1 + v57);
  v59 = a2 + v57;
  v60 = *(void **)(a1 + v57);
  v61 = *(void **)(a2 + v57);
  *v58 = v61;
  v62 = v61;

  v58[1] = *(_QWORD *)(v59 + 8);
  if (a1 != a2)
  {
    v63 = a3[7];
    v64 = (_QWORD *)(a1 + v63);
    v65 = (_QWORD *)(a2 + v63);
    outlined destroy of Font.Design?(a1 + v63, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v66 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
    }
    else
    {
      *v64 = *v65;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of GenericMedCompletedLogModel(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  v7 = v6[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_OWORD *)(a1 + v6[8]) = *(_OWORD *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  *(_OWORD *)(a1 + v6[10]) = *(_OWORD *)(a2 + v6[10]);
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  v13 = v6[14];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for SnippetHeaderModel();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v14, v15, v19);
    *(_OWORD *)&v14[*(int *)(v16 + 20)] = *(_OWORD *)&v15[*(int *)(v16 + 20)];
    *(_OWORD *)&v14[*(int *)(v16 + 24)] = *(_OWORD *)&v15[*(int *)(v16 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v20 = a3[5];
  v21 = a3[6];
  v22 = (_OWORD *)(a1 + v20);
  v23 = (_OWORD *)(a2 + v20);
  v24 = v23[1];
  v25 = *(_OWORD *)(a2 + v21);
  *v22 = *v23;
  v22[1] = v24;
  *(_OWORD *)(a1 + v21) = v25;
  v26 = a3[7];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v30 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  v8 = v7[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for AppPunchout();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v17 = v7[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v22 = v7[10];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = v7[11];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = v7[12];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v37 = v7[13];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  v42 = v7[14];
  v43 = (char *)(a1 + v42);
  v44 = (char *)(a2 + v42);
  v45 = type metadata accessor for SnippetHeaderModel();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      v50 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v43, v44, v50);
      *(_OWORD *)&v43[*(int *)(v45 + 20)] = *(_OWORD *)&v44[*(int *)(v45 + 20)];
      *(_OWORD *)&v43[*(int *)(v45 + 24)] = *(_OWORD *)&v44[*(int *)(v45 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v49)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_13;
  }
  v68 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v43, v44, v68);
  v69 = *(int *)(v45 + 20);
  v70 = &v43[v69];
  v71 = &v44[v69];
  v73 = *(_QWORD *)v71;
  v72 = *((_QWORD *)v71 + 1);
  *(_QWORD *)v70 = v73;
  *((_QWORD *)v70 + 1) = v72;
  swift_bridgeObjectRelease();
  v74 = *(int *)(v45 + 24);
  v75 = &v43[v74];
  v76 = &v44[v74];
  v78 = *(_QWORD *)v76;
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = v78;
  *((_QWORD *)v75 + 1) = v77;
  swift_bridgeObjectRelease();
LABEL_13:
  v52 = a3[5];
  v53 = a1 + v52;
  v54 = a2 + v52;
  LOBYTE(v52) = *(_BYTE *)(a2 + v52 + 16);
  v55 = *(_QWORD *)v53;
  v56 = *(_QWORD *)(v53 + 8);
  v57 = *(_BYTE *)(v53 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_BYTE *)(v53 + 16) = v52;
  outlined consume of Text.Storage(v55, v56, v57);
  *(_QWORD *)(v53 + 24) = *(_QWORD *)(v54 + 24);
  swift_bridgeObjectRelease();
  v58 = a3[6];
  v59 = (_QWORD *)(a1 + v58);
  v60 = (_QWORD *)(a2 + v58);
  v61 = *(void **)(a1 + v58);
  *v59 = *v60;

  v59[1] = v60[1];
  if (a1 != a2)
  {
    v62 = a3[7];
    v63 = (void *)(a1 + v62);
    v64 = (const void *)(a2 + v62);
    outlined destroy of Font.Design?(a1 + v62, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v66 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v63, v64, v66);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A475218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for GenericMedCompletedLogModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4752D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for GenericMedCompletedLogModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for GenericMedCompletedLogSnippet()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for GenericMedCompletedLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_24A475418()
{
  return MEMORY[0x24BDF4768];
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for GenericMedCompletedLogSnippet();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for GenericMedCompletedLogModel();
  v5 = v3 + *(int *)(v4 + 24);
  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v3 + *(int *)(v4 + 56);
  v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(v3 + v1[5]), *(_QWORD *)(v3 + v1[5] + 8), *(_BYTE *)(v3 + v1[5] + 16));
  swift_bridgeObjectRelease();

  v11 = v3 + v1[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in GenericMedCompletedLogSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GenericMedCompletedLogSnippet() - 8) + 80);
  return closure #1 in closure #3 in GenericMedCompletedLogSnippet.body.getter(v0 + ((v1 + 16) & ~v1));
}

uint64_t BloodPressureLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureLogModel);
}

uint64_t BloodPressureLogSnippet.buttonColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for ColorScheme();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - v5;
  type metadata accessor for BloodPressureLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x24BDEB408], v0);
  v7 = static ColorScheme.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if ((v7 & 1) != 0)
    return static Color.green.getter();
  else
    return static Color.blue.getter();
}

uint64_t type metadata accessor for BloodPressureLogSnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BloodPressureLogSnippet;
  if (!type metadata singleton initialization cache for BloodPressureLogSnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BloodPressureLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = type metadata accessor for BloodPressureLogSnippet();
  v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v5 = EnvironmentObject.init()();
  v5[1] = v6;
  v7 = (uint64_t *)(a2 + *(int *)(v4 + 24));
  *v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureLogModel);
}

uint64_t BloodPressureLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD, _QWORD);
  char *v57;
  uint64_t *v58;
  void *v59;
  uint64_t *v60;
  void *v61;
  uint64_t *v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  void *v123;
  char *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t result;
  uint64_t *v171;
  uint64_t v172;
  void (*v173)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v174)(char *, uint64_t);
  void *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(char *, uint64_t, uint64_t);
  char *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  char *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;

  v239 = a1;
  v2 = type metadata accessor for BloodPressureLogSnippet();
  v212 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v213 = v3;
  v214 = (uint64_t)&v172 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  v217 = *(_QWORD *)(v4 - 8);
  v218 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v215 = (char *)&v172 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v220 = *(_QWORD *)(v6 - 8);
  v221 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v216 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v219 = (char *)&v172 - v9;
  v208 = type metadata accessor for SeparatorStyle();
  v206 = *(_QWORD *)(v208 - 8);
  MEMORY[0x24BDAC7A8](v208);
  v203 = (char *)&v172 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = type metadata accessor for FactItemHeroNumberView();
  v202 = *(_QWORD *)(v205 - 8);
  MEMORY[0x24BDAC7A8](v205);
  v201 = (char *)&v172 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v207 = *(_QWORD *)(v209 - 8);
  MEMORY[0x24BDAC7A8](v209);
  v204 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v229 = *(_QWORD *)(v13 - 8);
  v230 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v210 = v15;
  v211 = (char *)&v172 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v228 = (char *)&v172 - v16;
  v196 = type metadata accessor for StatusIndicatorView.IndicatorType();
  v194 = *(_QWORD *)(v196 - 8);
  MEMORY[0x24BDAC7A8](v196);
  v195 = (char *)&v172 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for StatusIndicatorView();
  v226 = *(_QWORD *)(v18 - 8);
  v227 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v225 = (char *)&v172 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = v20;
  MEMORY[0x24BDAC7A8](v19);
  v235 = (char *)&v172 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v22);
  v223 = (char *)&v172 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v24);
  v232 = (char *)&v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for SnippetHeaderView();
  v197 = *(_QWORD *)(v192 - 8);
  v26 = MEMORY[0x24BDAC7A8](v192);
  v224 = (uint64_t)&v172 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = v27;
  MEMORY[0x24BDAC7A8](v26);
  v234 = (uint64_t)&v172 - v28;
  v231 = type metadata accessor for Font.TextStyle();
  v222 = *(_QWORD *)(v231 - 8);
  v29 = MEMORY[0x24BDAC7A8](v231);
  v193 = (char *)&v172 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v233 = (char *)&v172 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v32);
  v236 = (uint64_t *)((char *)&v172 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v237 = type metadata accessor for AppPunchout();
  v238 = *(_QWORD *)(v237 - 8);
  v34 = *(_QWORD *)(v238 + 64);
  v35 = MEMORY[0x24BDAC7A8](v237);
  v199 = (char *)&v172 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v172 - v36;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v172 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v172 - v42;
  v44 = type metadata accessor for SnippetHeaderModel();
  v45 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v47 = (char *)&v172 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = (int *)type metadata accessor for BloodPressureLogModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + v48[8], (uint64_t)v43, &demangling cache variable for type metadata for SnippetHeaderModel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v43, &demangling cache variable for type metadata for SnippetHeaderModel?);
LABEL_14:
    v171 = v239;
    result = AnyView.init<A>(_:)();
    v169 = result;
    goto LABEL_15;
  }
  v187 = v45;
  v188 = v44;
  v189 = v41;
  v190 = v34;
  v191 = v37;
  v49 = v238;
  v50 = v237;
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v43, (uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  v51 = (uint64_t *)(v1 + v48[10]);
  v52 = (void *)v51[1];
  if (!v52)
  {
LABEL_13:
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_14;
  }
  v53 = v1;
  v54 = *v51;
  v55 = v1;
  v56 = (void (*)(_QWORD, _QWORD, _QWORD))v236;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v55, (uint64_t)v236, &demangling cache variable for type metadata for AppPunchout?);
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v49 + 48))(v56, 1, v50) == 1)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    outlined destroy of Font.Design?((uint64_t)v56, &demangling cache variable for type metadata for AppPunchout?);
    goto LABEL_14;
  }
  v186 = v54;
  v57 = v191;
  v236 = *(uint64_t **)(v49 + 32);
  ((void (*)(char *, _QWORD, uint64_t))v236)(v191, v56, v50);
  v58 = (uint64_t *)(v53 + v48[6]);
  v59 = (void *)v58[1];
  if (!v59)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v57, v50);
    goto LABEL_13;
  }
  v60 = (uint64_t *)(v53 + v48[5]);
  v61 = (void *)v60[1];
  if (!v61
    || (v62 = (uint64_t *)(v53 + v48[9]), (v63 = (void *)v62[1]) == 0)
    || (v64 = (uint64_t *)(v53 + v48[7]), (v185 = v64[1]) == 0))
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v191, v50);
    goto LABEL_13;
  }
  v176 = *v58;
  v178 = *v60;
  v65 = *v64;
  v179 = *v62;
  v180 = v65;
  v183 = v47;
  v184 = v63;
  v177 = v61;
  v175 = v59;
  v66 = *MEMORY[0x24BDF1888];
  v182 = *(void (**)(char *, uint64_t, uint64_t))(v222 + 104);
  v182(v233, v66, v231);
  v67 = (uint64_t)v47;
  v68 = (uint64_t)v189;
  outlined init with copy of GenericMedCompletedLogModel(v67, (uint64_t)v189, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v187 + 56))(v68, 0, 1, v188);
  v69 = v192;
  v70 = v224;
  v71 = (uint64_t *)(v224 + *(int *)(v192 + 20));
  *v71 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v72 = (uint64_t *)(v70 + *(int *)(v69 + 24));
  *v72 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v68, v70);
  outlined init with take of GenericMedCompletedLogSnippet(v70, v234, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v73._countAndFlagsBits = 0;
  v73._object = (void *)0xE000000000000000;
  v181 = v53;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v73);
  v74._countAndFlagsBits = v186;
  v74._object = v52;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v74);
  swift_bridgeObjectRelease();
  v75._countAndFlagsBits = 0;
  v75._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v75);
  LocalizedStringKey.init(stringInterpolation:)();
  v76 = Text.init(_:tableName:bundle:comment:)();
  v78 = v77;
  v192 = v79;
  LOBYTE(v70) = v80 & 1;
  v81 = v193;
  v82 = v231;
  v182(v193, *MEMORY[0x24BDF1870], v231);
  LODWORD(v186) = *MEMORY[0x24BDF1670];
  v83 = v186;
  v84 = type metadata accessor for Font.Design();
  v85 = *(_QWORD *)(v84 - 8);
  v174 = *(void (**)(char *, uint64_t))(v85 + 104);
  v86 = (uint64_t)v223;
  v87 = v83;
  v88 = v84;
  v172 = v84;
  v174(v223, v87);
  v173 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v85 + 56);
  v173(v86, 0, 1, v88);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v86, &demangling cache variable for type metadata for Font.Design?);
  v182 = *(void (**)(char *, uint64_t, uint64_t))(v222 + 8);
  ((void (*)(char *, uint64_t))v182)(v81, v82);
  v89 = Text.font(_:)();
  v91 = v90;
  LOBYTE(v81) = v92;
  swift_release();
  outlined consume of Text.Storage(v76, v78, v70);
  swift_bridgeObjectRelease();
  LODWORD(v255) = static HierarchicalShapeStyle.secondary.getter();
  v93 = Text.foregroundStyle<A>(_:)();
  v95 = v94;
  LOBYTE(v78) = v96 & 1;
  outlined consume of Text.Storage(v89, v91, v81 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  v97 = Text.fontWeight(_:)();
  v188 = v98;
  v189 = (char *)v97;
  v192 = v99;
  LODWORD(v187) = v100 & 1;
  outlined consume of Text.Storage(v93, v95, v78);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v101._countAndFlagsBits = 0;
  v101._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v101);
  v102._countAndFlagsBits = v176;
  v102._object = v175;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v102);
  swift_bridgeObjectRelease();
  v103._countAndFlagsBits = 0;
  v103._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v103);
  LocalizedStringKey.init(stringInterpolation:)();
  v104 = Text.init(_:tableName:bundle:comment:)();
  v106 = v105;
  LOBYTE(v93) = v107 & 1;
  v108 = (uint64_t)v223;
  v109 = v172;
  ((void (*)(char *, _QWORD, uint64_t))v174)(v223, v186, v172);
  v173(v108, 0, 1, v109);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v108, &demangling cache variable for type metadata for Font.Design?);
  v110 = Text.font(_:)();
  v112 = v111;
  LOBYTE(v78) = v113;
  swift_release();
  LOBYTE(v109) = v78 & 1;
  outlined consume of Text.Storage(v104, v106, v93);
  swift_bridgeObjectRelease();
  v114 = Text.bold()();
  v222 = v115;
  v223 = v116;
  LODWORD(v104) = v117 & 1;
  outlined consume of Text.Storage(v110, v112, v109);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v118._countAndFlagsBits = 0;
  v118._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v118);
  v119._countAndFlagsBits = v178;
  v119._object = v177;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v119);
  swift_bridgeObjectRelease();
  v120._countAndFlagsBits = 8236;
  v120._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v120);
  v121._countAndFlagsBits = v179;
  v121._object = v184;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v121);
  swift_bridgeObjectRelease();
  v122._countAndFlagsBits = 0;
  v122._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v122);
  LocalizedStringKey.init(stringInterpolation:)();
  v186 = Text.init(_:tableName:bundle:comment:)();
  v184 = v123;
  v232 = v124;
  LODWORD(v93) = v125 & 1;
  v257 = MEMORY[0x24BEE0D00];
  v258 = MEMORY[0x24BEAE5C0];
  v255 = v180;
  v256 = v185;
  (*(void (**)(char *, _QWORD, uint64_t))(v194 + 104))(v195, *MEMORY[0x24BEADF80], v196);
  StatusIndicatorView.init(message:type:showIndicator:)();
  v126 = MEMORY[0x24BDF1FA0];
  v127 = MEMORY[0x24BEAD6B8];
  v257 = MEMORY[0x24BDF1FA0];
  v258 = MEMORY[0x24BEAD6B8];
  v128 = swift_allocObject();
  v254 = v127;
  v255 = v128;
  v176 = v114;
  v129 = v222;
  *(_QWORD *)(v128 + 16) = v114;
  *(_QWORD *)(v128 + 24) = v129;
  LODWORD(v193) = v104;
  *(_BYTE *)(v128 + 32) = v104;
  *(_QWORD *)(v128 + 40) = v223;
  v253 = v126;
  v130 = swift_allocObject();
  v251 = 0;
  v252 = v130;
  v132 = v188;
  v131 = (uint64_t)v189;
  *(_QWORD *)(v130 + 16) = v189;
  *(_QWORD *)(v130 + 24) = v132;
  LOBYTE(v110) = v187;
  *(_BYTE *)(v130 + 32) = v187;
  *(_QWORD *)(v130 + 40) = v192;
  v249 = 0u;
  v250 = 0u;
  v247 = v126;
  v248 = v127;
  v133 = swift_allocObject();
  v246 = v133;
  v134 = v186;
  v135 = (uint64_t)v184;
  *(_QWORD *)(v133 + 16) = v186;
  *(_QWORD *)(v133 + 24) = v135;
  LODWORD(v179) = v93;
  *(_BYTE *)(v133 + 32) = v93;
  *(_QWORD *)(v133 + 40) = v232;
  v245 = 0;
  v243 = 0u;
  v244 = 0u;
  v242 = 0;
  v240 = 0u;
  v241 = 0u;
  outlined copy of Text.Storage(v114, v222, (char)v193);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v131, v132, v110);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v134, v135, v93);
  swift_bridgeObjectRetain();
  v136 = v201;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  v137 = v206;
  v138 = v203;
  v139 = v208;
  (*(void (**)(char *, _QWORD, uint64_t))(v206 + 104))(v203, *MEMORY[0x24BEAB510], v208);
  v140 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
  v142 = v204;
  v141 = v205;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v137 + 8))(v138, v139);
  (*(void (**)(char *, uint64_t))(v202 + 8))(v136, v141);
  v255 = v141;
  v256 = v140;
  swift_getOpaqueTypeConformance2();
  v143 = v228;
  v144 = v209;
  View.componentSpacing(top:bottom:)();
  (*(void (**)(char *, uint64_t))(v207 + 8))(v142, v144);
  v145 = v224;
  outlined init with copy of GenericMedCompletedLogModel(v234, v224, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v146 = v229;
  v147 = v211;
  v148 = v143;
  v149 = v230;
  (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v211, v148, v230);
  v150 = v226;
  (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v225, v235, v227);
  v151 = (*(unsigned __int8 *)(v197 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80);
  v152 = (v198 + *(unsigned __int8 *)(v146 + 80) + v151) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
  v153 = (v210 + *(unsigned __int8 *)(v150 + 80) + v152) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
  v154 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v145, v154 + v151, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  (*(void (**)(unint64_t, char *, uint64_t))(v146 + 32))(v154 + v152, v147, v149);
  v155 = v227;
  (*(void (**)(unint64_t, char *, uint64_t))(v150 + 32))(v154 + v153, v225, v227);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>, MEMORY[0x24BDF5420]);
  v156 = v215;
  SnippetBody.init(content:)();
  v157 = v214;
  outlined init with copy of GenericMedCompletedLogModel(v181, v214, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureLogSnippet);
  v158 = v238;
  v159 = v199;
  v160 = v237;
  (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v199, v191, v237);
  v161 = (*(unsigned __int8 *)(v212 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
  v162 = (v213 + *(unsigned __int8 *)(v158 + 80) + v161) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
  v163 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v157, v163 + v161, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureLogSnippet);
  ((void (*)(unint64_t, char *, uint64_t))v236)(v163 + v162, v159, v160);
  v164 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>, MEMORY[0x24BEADBF8]);
  v166 = v218;
  v165 = v219;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v217 + 8))(v156, v166);
  v168 = v220;
  v167 = v221;
  (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v216, v165, v221);
  v255 = v166;
  v256 = v164;
  swift_getOpaqueTypeConformance2();
  v169 = AnyView.init<A>(_:)();
  outlined consume of Text.Storage(v186, (uint64_t)v184, v179);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage((uint64_t)v189, v188, v187);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v176, v222, (char)v193);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v168 + 8))(v165, v167);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v235, v155);
  outlined destroy of GenericMedCompletedLogModel(v234, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  ((void (*)(char *, uint64_t))v182)(v233, v231);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v191, v160);
  result = outlined destroy of GenericMedCompletedLogModel((uint64_t)v183, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  v171 = v239;
LABEL_15:
  *v171 = v169;
  return result;
}

uint64_t closure #1 in BloodPressureLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v38 = a3;
  v39 = a4;
  v36 = a2;
  v5 = type metadata accessor for StatusIndicatorView();
  v34 = *(_QWORD *)(v5 - 8);
  v6 = v34;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v33 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v35 = *(_QWORD *)(v10 - 8);
  v11 = v35;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v33 - v15;
  v33 = (char *)&v33 - v15;
  v17 = type metadata accessor for SnippetHeaderView();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v33 - v21;
  outlined init with copy of GenericMedCompletedLogModel(a1, (uint64_t)&v33 - v21, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v23(v16, v36, v10);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v25 = v40;
  v24(v40, v38, v5);
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v22, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v26 = v14;
  v23(v14, (uint64_t)v16, v10);
  v27 = v37;
  v24(v37, (uint64_t)v25, v5);
  v28 = v39;
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v20, v39, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView));
  v23((char *)(v28 + *(int *)(v29 + 48)), (uint64_t)v26, v10);
  v24((char *)(v28 + *(int *)(v29 + 64)), (uint64_t)v27, v5);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v40, v5);
  v31 = *(void (**)(char *, uint64_t))(v35 + 8);
  v31(v33, v10);
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v30(v27, v5);
  v31(v26, v10);
  return outlined destroy of GenericMedCompletedLogModel((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
}

void closure #2 in BloodPressureLogSnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for BloodPressureLogSnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_24A476DAC()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A476DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v4 = *(_QWORD *)(v21 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for StatusIndicatorView();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v0 + ((v3 + 16) & ~v3);
  v10 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + ((v3 + 16) & ~v3), v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = v9 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = v9 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  v16 = (((v3 + 16) & ~v3) + v20 + v5) & ~v5;
  v17 = (v16 + v19 + v8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v16, v21);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v17, v6);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BloodPressureLogSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for SnippetHeaderView() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0)
                 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StatusIndicatorView() - 8) + 80);
  return closure #1 in BloodPressureLogSnippet.body.getter(v1 + v4, v1 + v7, v1 + ((v7 + v8 + v9) & ~v9), a1);
}

uint64_t sub_24A47707C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for BloodPressureLogSnippet();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v0 + ((v3 + 16) & ~v3);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + 16) & ~v3), v4);
  v8 = type metadata accessor for BloodPressureLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v7 + *(int *)(v8 + 32);
  v10 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v12 = v7 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + ((((v3 + 16) & ~v3) + v15 + v6) & ~v6), v4);
  return swift_deallocObject();
}

void partial apply for closure #2 in BloodPressureLogSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for BloodPressureLogSnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in BloodPressureLogSnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in BloodPressureLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureLogSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for AppPunchout();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    v10 = (int *)type metadata accessor for BloodPressureLogModel();
    v11 = v10[5];
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = v10[6];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v10[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v10[8];
    __dst = (char *)a1 + v23;
    v24 = (char *)a2 + v23;
    v25 = type metadata accessor for SnippetHeaderModel();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(__dst, v24, v29);
      v30 = *(int *)(v25 + 20);
      v31 = &__dst[v30];
      v32 = &v24[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(int *)(v25 + 24);
      v35 = &__dst[v34];
      v36 = &v24[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(__dst, 0, 1, v25);
    }
    v39 = v10[9];
    v40 = (uint64_t *)((char *)a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = v10[10];
    v44 = (uint64_t *)((char *)a1 + v43);
    v45 = (uint64_t *)((char *)a2 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = *(int *)(a3 + 20);
    v48 = *(int *)(a3 + 24);
    v49 = (uint64_t *)((char *)a1 + v47);
    v50 = (char *)a2 + v47;
    v52 = *(void **)v50;
    v51 = *((_QWORD *)v50 + 1);
    *v49 = v52;
    v49[1] = v51;
    v53 = (uint64_t *)((char *)a1 + v48);
    v54 = (uint64_t *)((char *)a2 + v48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v55 = v52;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v56 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v53, v54, v56);
    }
    else
    {
      *v53 = *v54;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for BloodPressureLogSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = type metadata accessor for BloodPressureLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(v6 + 32);
  v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v10 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v11 = type metadata accessor for ColorScheme();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

char *initializeWithCopy for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  id v53;
  uint64_t v54;
  char *__dst;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  v8 = (int *)type metadata accessor for BloodPressureLogModel();
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = v8[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = v8[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = v8[8];
  __dst = &a1[v21];
  v22 = &a2[v21];
  v23 = type metadata accessor for SnippetHeaderModel();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(__dst, v22, v27);
    v28 = *(int *)(v23 + 20);
    v29 = &__dst[v28];
    v30 = &v22[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = *(int *)(v23 + 24);
    v33 = &__dst[v32];
    v34 = &v22[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(__dst, 0, 1, v23);
  }
  v37 = v8[9];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = v40;
  v41 = v8[10];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = *(int *)(a3 + 20);
  v46 = *(int *)(a3 + 24);
  v47 = &a1[v45];
  v48 = &a2[v45];
  v50 = *(void **)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  v51 = &a1[v46];
  v52 = &a2[v46];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53 = v50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v54 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v51, v52, v54);
  }
  else
  {
    *(_QWORD *)v51 = *(_QWORD *)v52;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for BloodPressureLogModel();
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v12[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v12[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = v12[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for SnippetHeaderModel();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v30 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v23, v24, v30);
      v31 = *(int *)(v25 + 20);
      v32 = &v23[v31];
      v33 = &v24[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      v34 = *(int *)(v25 + 24);
      v35 = &v23[v34];
      v36 = &v24[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  v56 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v23, v24, v56);
  v57 = *(int *)(v25 + 20);
  v58 = &v23[v57];
  v59 = &v24[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = *(int *)(v25 + 24);
  v61 = &v23[v60];
  v62 = &v24[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  v39 = v12[9];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = v12[10];
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = *(int *)(a3 + 20);
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *(void **)&a1[v45];
  v49 = *(void **)&a2[v45];
  *(_QWORD *)v46 = v49;
  v50 = v49;

  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  if (a1 != a2)
  {
    v51 = *(int *)(a3 + 24);
    v52 = &a1[v51];
    v53 = &a2[v51];
    outlined destroy of Font.Design?((uint64_t)&a1[v51], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v54 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    }
    else
    {
      *(_QWORD *)v52 = *(_QWORD *)v53;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for BloodPressureLogModel();
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  v10 = v9[8];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)&a1[v9[9]] = *(_OWORD *)&a2[v9[9]];
  *(_OWORD *)&a1[v9[10]] = *(_OWORD *)&a2[v9[10]];
  v17 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for BloodPressureLogModel();
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  v18 = v12[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  v23 = v12[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  v28 = v12[8];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for SnippetHeaderModel();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      v36 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v29, v30, v36);
      *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
      *(_OWORD *)&v29[*(int *)(v31 + 24)] = *(_OWORD *)&v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v58 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v29, v30, v58);
  v59 = *(int *)(v31 + 20);
  v60 = &v29[v59];
  v61 = &v30[v59];
  v63 = *(_QWORD *)v61;
  v62 = *((_QWORD *)v61 + 1);
  *(_QWORD *)v60 = v63;
  *((_QWORD *)v60 + 1) = v62;
  swift_bridgeObjectRelease();
  v64 = *(int *)(v31 + 24);
  v65 = &v29[v64];
  v66 = &v30[v64];
  v68 = *(_QWORD *)v66;
  v67 = *((_QWORD *)v66 + 1);
  *(_QWORD *)v65 = v68;
  *((_QWORD *)v65 + 1) = v67;
  swift_bridgeObjectRelease();
LABEL_13:
  v38 = v12[9];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v43 = v12[10];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  v48 = *(int *)(a3 + 20);
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = *(void **)&a1[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;

  *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
  if (a1 != a2)
  {
    v52 = *(int *)(a3 + 24);
    v53 = &a1[v52];
    v54 = &a2[v52];
    outlined destroy of Font.Design?((uint64_t)&a1[v52], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v56 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v53, v54, v56);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureLogSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4783FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for BloodPressureLogModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for BloodPressureLogSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4784C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for BloodPressureLogModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for BloodPressureLogSnippet()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for BloodPressureLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_24A4785F4()
{
  return MEMORY[0x24BDF4768];
}

uint64_t SleepQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepQueryModel);
}

uint64_t SleepQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Snippet;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;

  Snippet = type metadata accessor for SleepQuerySnippet();
  v5 = (uint64_t *)(a2 + *(int *)(Snippet + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v5 = EnvironmentObject.init()();
  v5[1] = v6;
  v7 = (_QWORD *)(a2 + *(int *)(Snippet + 24));
  *v7 = 0;
  v7[1] = 0;
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SleepQueryModel);
}

uint64_t type metadata accessor for SleepQuerySnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SleepQuerySnippet;
  if (!type metadata singleton initialization cache for SleepQuerySnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SleepQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Snippet;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  int *Model;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  char **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  char *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  void (*v134)(unint64_t, char *, uint64_t);
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;

  v2 = v1;
  v163 = a1;
  v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  v137 = *(_QWORD *)(v140 - 8);
  MEMORY[0x24BDAC7A8](v140);
  v136 = (char *)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v141 = *(_QWORD *)(v4 - 8);
  v142 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v138 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v139 = (char *)&v131 - v7;
  Snippet = type metadata accessor for SleepQuerySnippet();
  v155 = *(_QWORD *)(Snippet - 8);
  MEMORY[0x24BDAC7A8](Snippet);
  v156 = v9;
  v157 = (uint64_t)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>>);
  v146 = *(_QWORD *)(v10 - 8);
  v147 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v144 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v149 = *(_QWORD *)(v12 - 8);
  v150 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v145 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v148 = (char *)&v131 - v15;
  v16 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v16);
  v143 = (uint64_t)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v18);
  v158 = (uint64_t)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AppPunchout();
  v21 = *(_QWORD *)(v20 - 8);
  v160 = v20;
  v161 = v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v153 = v23;
  v154 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v159 = (char *)&v131 - v24;
  v25 = type metadata accessor for SnippetHeaderView();
  v151 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v131 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v131 - v29;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v131 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)&v131 - v35;
  Model = (int *)type metadata accessor for SleepQueryModel();
  v38 = Model[5];
  v162 = v2;
  v39 = v2 + v38;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v2 + v38, (uint64_t)v36, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v40 = type metadata accessor for SnippetHeaderModel();
  LODWORD(v2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v36, 1, v40);
  outlined destroy of Font.Design?((uint64_t)v36, &demangling cache variable for type metadata for SnippetHeaderModel?);
  if ((_DWORD)v2 == 1)
  {
    result = AnyView.init<A>(_:)();
    *v163 = result;
    return result;
  }
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v39, (uint64_t)v34, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v42 = (uint64_t *)&v28[*(int *)(v25 + 20)];
  *v42 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v43 = (uint64_t *)&v28[*(int *)(v25 + 24)];
  *v43 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?((uint64_t)v34, (uint64_t)v28);
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v28, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v45 = v162;
  v44 = v163;
  v46 = (uint64_t *)(v162 + Model[6]);
  v47 = (void *)v46[1];
  if (!v47)
    goto LABEL_6;
  v135 = v30;
  v48 = *v46;
  v49 = v158;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v162, v158, &demangling cache variable for type metadata for AppPunchout?);
  v51 = v160;
  v50 = v161;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v49, 1, v160) != 1)
  {
    v132 = v48;
    v133 = v28;
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
    v54(v159, v49, v51);
    v55 = *(_QWORD *)(v45 + Model[15] + 8);
    v134 = (void (*)(unint64_t, char *, uint64_t))v54;
    if (v55)
    {
      v56 = (char **)(v45 + Model[7]);
      v57 = v56[1];
      if (v57)
      {
        v136 = *v56;
        swift_bridgeObjectRetain();
        v158 = SleepQuerySnippet.formatSleepData(sleepDuration:)();
        v142 = v58;
        v60 = v59;
        LODWORD(v141) = v61 & 1;
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v62._countAndFlagsBits = 0;
        v62._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v62);
        v63._countAndFlagsBits = v132;
        v63._object = v47;
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v63);
        v64._countAndFlagsBits = 0;
        v64._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v64);
        LocalizedStringKey.init(stringInterpolation:)();
        v143 = Text.init(_:tableName:bundle:comment:)();
        v140 = v65;
        v138 = v66;
        LODWORD(v139) = v67 & 1;
        v68 = (uint64_t)v133;
        outlined init with copy of GenericMedCompletedLogModel((uint64_t)v135, (uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
        v69 = (*(unsigned __int8 *)(v151 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
        v70 = (v152 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
        v71 = (v70 + 39) & 0xFFFFFFFFFFFFFFF8;
        v72 = swift_allocObject();
        outlined init with take of GenericMedCompletedLogSnippet(v68, v72 + v69, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
        v73 = v72 + v70;
        v74 = v158;
        v75 = v142;
        v76 = v143;
        *(_QWORD *)v73 = v158;
        *(_QWORD *)(v73 + 8) = v75;
        v77 = v141;
        *(_BYTE *)(v73 + 16) = v141;
        v137 = v60;
        *(_QWORD *)(v73 + 24) = v60;
        v78 = v72 + v71;
        v79 = v140;
        *(_QWORD *)v78 = v76;
        *(_QWORD *)(v78 + 8) = v79;
        LOBYTE(v60) = (_BYTE)v139;
        *(_BYTE *)(v78 + 16) = (_BYTE)v139;
        *(_QWORD *)(v78 + 24) = v138;
        v80 = (_QWORD *)(v72 + ((v71 + 39) & 0xFFFFFFFFFFFFFFF8));
        *v80 = v136;
        v80[1] = v57;
        outlined copy of Text.Storage(v74, v75, v77);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v76, v79, v60);
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>);
        lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>, MEMORY[0x24BDF5420]);
        v81 = v144;
        SnippetBody.init(content:)();
        v82 = v157;
        outlined init with copy of GenericMedCompletedLogModel(v162, v157, (uint64_t (*)(_QWORD))type metadata accessor for SleepQuerySnippet);
        v84 = v160;
        v83 = v161;
        v85 = v154;
        v86 = v159;
        (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v154, v159, v160);
        v87 = (*(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
        v88 = (v156 + *(unsigned __int8 *)(v83 + 80) + v87) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
        v89 = swift_allocObject();
        outlined init with take of GenericMedCompletedLogSnippet(v82, v89 + v87, (uint64_t (*)(_QWORD))type metadata accessor for SleepQuerySnippet);
        v134(v89 + v88, v85, v84);
        v90 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>>, MEMORY[0x24BEADBF8]);
        v92 = v147;
        v91 = v148;
        View.componentTapped(isNavigation:perform:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v146 + 8))(v81, v92);
        v94 = v149;
        v93 = v150;
        (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v145, v91, v150);
        *(_QWORD *)&v174 = v92;
        *((_QWORD *)&v174 + 1) = v90;
        swift_getOpaqueTypeConformance2();
        v95 = AnyView.init<A>(_:)();
        outlined consume of Text.Storage(v143, v140, (char)v139);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v158, v142, v141);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v94 + 8))(v91, v93);
        (*(void (**)(char *, uint64_t))(v161 + 8))(v86, v84);
LABEL_10:
        result = outlined destroy of GenericMedCompletedLogModel((uint64_t)v135, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
        *v163 = v95;
        return result;
      }
    }
    else
    {
      v96 = (uint64_t *)(v45 + Model[9]);
      v97 = v96[1];
      if (v97)
      {
        if (*(_QWORD *)(v162 + Model[16] + 8))
        {
          v98 = (uint64_t *)(v162 + Model[10]);
          v99 = v98[1];
          if (v99)
          {
            v100 = (uint64_t *)(v162 + Model[17]);
            if (v100[1])
            {
              v150 = *v96;
              v158 = *v98;
              v149 = *v100;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v101 = v162;
              v102 = SleepQuerySnippet.formatSleepData(sleepDuration:)();
              v147 = v104;
              v148 = v103;
              v106 = v105 & 1;
              v107 = SleepQuerySnippet.formatSleepData(sleepDuration:)();
              *(_QWORD *)&v174 = v150;
              *((_QWORD *)&v174 + 1) = v97;
              v175 = 0;
              v176 = 0;
              *(_QWORD *)&v177 = v102;
              *((_QWORD *)&v177 + 1) = v148;
              *(_QWORD *)&v178 = v106;
              *((_QWORD *)&v178 + 1) = v147;
              *(_QWORD *)&v179 = v158;
              *((_QWORD *)&v179 + 1) = v99;
              v180 = 0;
              v181 = 0;
              *(_QWORD *)&v182 = v107;
              *((_QWORD *)&v182 + 1) = v109;
              *(_QWORD *)&v183 = v108 & 1;
              *((_QWORD *)&v183 + 1) = v110;
              v184 = 0;
              v185 = 0;
              *(_QWORD *)&v186 = v132;
              *((_QWORD *)&v186 + 1) = v47;
              v170 = v182;
              v171 = v183;
              v172 = 0u;
              v173 = v186;
              v166 = v177;
              v167 = v178;
              v168 = v179;
              v169 = 0u;
              v164 = v174;
              v165 = 0u;
              lazy protocol witness table accessor for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView();
              v111 = View.eraseToAnyView()();
              outlined release of MultipleDataPointWithSubTypesView(&v174);
              v112 = (uint64_t)v133;
              outlined init with copy of GenericMedCompletedLogModel((uint64_t)v135, (uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
              v113 = (*(unsigned __int8 *)(v151 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
              v114 = v50;
              v115 = (v152 + v113 + 7) & 0xFFFFFFFFFFFFFFF8;
              v116 = swift_allocObject();
              outlined init with take of GenericMedCompletedLogSnippet(v112, v116 + v113, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
              v158 = v111;
              *(_QWORD *)(v116 + v115) = v111;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
              lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>, MEMORY[0x24BDF5420]);
              v117 = v136;
              SnippetBody.init(content:)();
              v118 = v157;
              outlined init with copy of GenericMedCompletedLogModel(v101, v157, (uint64_t (*)(_QWORD))type metadata accessor for SleepQuerySnippet);
              v119 = v114;
              v120 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
              v121 = v154;
              v122 = v160;
              v120(v154, v159, v160);
              v123 = (*(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
              v124 = (v156 + *(unsigned __int8 *)(v119 + 80) + v123) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
              v125 = swift_allocObject();
              outlined init with take of GenericMedCompletedLogSnippet(v118, v125 + v123, (uint64_t (*)(_QWORD))type metadata accessor for SleepQuerySnippet);
              v134(v125 + v124, v121, v122);
              v126 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>, MEMORY[0x24BEADBF8]);
              v128 = v139;
              v127 = v140;
              View.componentTapped(isNavigation:perform:)();
              swift_release();
              (*(void (**)(char *, uint64_t))(v137 + 8))(v117, v127);
              v130 = v141;
              v129 = v142;
              (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v138, v128, v142);
              *(_QWORD *)&v164 = v127;
              *((_QWORD *)&v164 + 1) = v126;
              swift_getOpaqueTypeConformance2();
              v95 = AnyView.init<A>(_:)();
              swift_release();
              (*(void (**)(char *, uint64_t))(v130 + 8))(v128, v129);
              (*(void (**)(char *, uint64_t))(v119 + 8))(v159, v122);
              goto LABEL_10;
            }
          }
        }
      }
    }
    v52 = AnyView.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v159, v51);
    v53 = (uint64_t)v135;
    goto LABEL_17;
  }
  outlined destroy of Font.Design?(v49, &demangling cache variable for type metadata for AppPunchout?);
  v30 = v135;
LABEL_6:
  v52 = AnyView.init<A>(_:)();
  v53 = (uint64_t)v30;
LABEL_17:
  result = outlined destroy of GenericMedCompletedLogModel(v53, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  *v44 = v52;
  return result;
}

uint64_t SleepQuerySnippet.formatSleepData(sleepDuration:)()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v0 = lazy protocol witness table accessor for type String and conformance String();
  v1 = MEMORY[0x24BD1110C](32, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x24BEE0D00], v0);
  LocalizedStringKey.init(stringLiteral:)();
  v2 = Text.init(_:tableName:bundle:comment:)();
  v5 = v4 & 1;
  v6 = *(_QWORD *)(v1 + 16);
  if (v6)
  {
    v7 = v3;
    v8 = v2;
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = (unint64_t *)(v1 + 56);
    while (1)
    {
      v54 = v6;
      v30 = *(v10 - 3);
      v31 = *(v10 - 2);
      v33 = *(v10 - 1);
      v32 = *v10;
      v53 = v5;
      if ((v31 ^ v30) >> 14)
      {
        _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v30, v31, v33, v32, 10);
        v50 = v9;
        if ((v34 & 0x100) != 0)
        {
          swift_bridgeObjectRetain();
          specialized _parseInteger<A, B>(ascii:radix:)(v30, v31, v33, v32, 10);
          if ((v36 & 1) == 0)
          {
LABEL_12:
            v37 = v5 & 1;
            v13 = v8;
            v38 = v8;
            v15 = v7;
            outlined copy of Text.Storage(v38, v7, v37);
            swift_bridgeObjectRetain();
            v39 = MEMORY[0x24BD1104C](v30, v31, v33, v32);
            v41 = SleepQuerySnippet.formatNumericSleepData(data:)(v39, v40);
            v43 = v42;
            v45 = v44;
            swift_bridgeObjectRelease();
            v23 = v45 & 1;
            v46 = static Text.+ infix(_:_:)();
            v51 = v47;
            v52 = v46;
            v27 = v48;
            v28 = v41;
            v29 = v43;
            goto LABEL_6;
          }
        }
        else
        {
          v35 = v34;
          swift_bridgeObjectRetain();
          if ((v35 & 1) == 0)
            goto LABEL_12;
        }
      }
      else
      {
        v50 = v9;
        swift_bridgeObjectRetain();
      }
      v12 = v5 & 1;
      v13 = v8;
      v14 = v8;
      v15 = v7;
      outlined copy of Text.Storage(v14, v7, v12);
      swift_bridgeObjectRetain();
      v16 = MEMORY[0x24BD1104C](v30, v31, v33, v32);
      v18 = SleepQuerySnippet.formatUnitSleepData(unit:)(v16, v17);
      v20 = v19;
      v22 = v21;
      swift_bridgeObjectRelease();
      v23 = v22 & 1;
      v24 = static Text.+ infix(_:_:)();
      v51 = v25;
      v52 = v24;
      v27 = v26;
      v28 = v18;
      v29 = v20;
LABEL_6:
      outlined consume of Text.Storage(v28, v29, v23);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v13, v15, v53 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v13, v15, v53 & 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v27 & 1;
      v10 += 4;
      v11 = v52;
      v8 = v52;
      v7 = v51;
      v6 = v54 - 1;
      v9 = v50;
      if (v54 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
  }
  v11 = v2;
LABEL_14:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t closure #1 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v54 = a8;
  v52 = a7;
  v51 = a6;
  v67 = a9;
  v55 = a12;
  v53 = a11;
  v65 = type metadata accessor for SeparatorStyle();
  v62 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v60 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for FactItemHeroNumberView();
  v66 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v57 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v63 = *(_QWORD *)(v58 - 8);
  v19 = MEMORY[0x24BDAC7A8](v58);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v61 = (char *)&v50 - v22;
  v23 = type metadata accessor for SnippetHeaderView();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v59 = (uint64_t)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v56 = (uint64_t)&v50 - v26;
  outlined init with copy of GenericMedCompletedLogModel(a1, (uint64_t)&v50 - v26, v27);
  v28 = MEMORY[0x24BDF1FA0];
  v29 = MEMORY[0x24BEAD6B8];
  v85 = MEMORY[0x24BDF1FA0];
  v86 = MEMORY[0x24BEAD6B8];
  v30 = swift_allocObject();
  v84 = v30;
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = a3;
  a4 &= 1u;
  *(_BYTE *)(v30 + 32) = a4;
  *(_QWORD *)(v30 + 40) = a5;
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v79 = v28;
  v80 = v29;
  v31 = swift_allocObject();
  v77 = 0;
  v78 = v31;
  v32 = v51;
  v33 = v52;
  *(_QWORD *)(v31 + 16) = v51;
  *(_QWORD *)(v31 + 24) = v33;
  LOBYTE(a1) = v54 & 1;
  *(_BYTE *)(v31 + 32) = v54 & 1;
  *(_QWORD *)(v31 + 40) = a10;
  v75 = 0u;
  v76 = 0u;
  v73 = MEMORY[0x24BEE0D00];
  v74 = MEMORY[0x24BEAE5C0];
  v71 = v53;
  v72 = v55;
  v70 = 0;
  v69 = 0u;
  v68 = 0u;
  outlined copy of Text.Storage(a2, a3, a4);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v32, v33, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v57;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  v35 = v62;
  v36 = v60;
  v37 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v60, *MEMORY[0x24BEAB510], v65);
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
  v38 = v64;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v38);
  v39 = v63;
  v40 = v61;
  v41 = v58;
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v61, v21, v58);
  v42 = v56;
  v43 = v59;
  outlined init with copy of GenericMedCompletedLogModel(v56, v59, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v44 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v45 = v39;
  v44(v21, v40, v41);
  v46 = v67;
  outlined init with copy of GenericMedCompletedLogModel(v43, v67, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0));
  v44((char *)(v46 + *(int *)(v47 + 48)), v21, v41);
  v48 = *(void (**)(char *, uint64_t))(v45 + 8);
  v48(v40, v41);
  outlined destroy of GenericMedCompletedLogModel(v42, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v48(v21, v41);
  return outlined destroy of GenericMedCompletedLogModel(v43, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
}

uint64_t closure #3 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v6 = type metadata accessor for SnippetHeaderView();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v13 - v10;
  outlined init with copy of GenericMedCompletedLogModel(a1, (uint64_t)&v13 - v10, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v9, a3, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  *(_QWORD *)(a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, AnyView))
                     + 48)) = a2;
  swift_retain_n();
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  swift_release();
  return outlined destroy of GenericMedCompletedLogModel((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
}

void closure #2 in SleepQuerySnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for SleepQuerySnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t SleepQuerySnippet.formatNumericSleepData(data:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for Font.TextStyle();
  v9 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  v31 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v12 + 104))(v11, *MEMORY[0x24BDF1888]);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
  v32._countAndFlagsBits = a1;
  v32._object = a2;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v32);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
  LocalizedStringKey.init(stringInterpolation:)();
  v16 = Text.init(_:tableName:bundle:comment:)();
  v18 = v17;
  LOBYTE(a1) = v19 & 1;
  v20 = *MEMORY[0x24BDF1670];
  v21 = type metadata accessor for Font.Design();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v6, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v6, 0, 1, v21);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v6, &demangling cache variable for type metadata for Font.Design?);
  v23 = Text.font(_:)();
  v25 = v24;
  LOBYTE(v21) = v26;
  swift_release();
  outlined consume of Text.Storage(v16, v18, a1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  v27 = Text.fontWeight(_:)();
  outlined consume of Text.Storage(v23, v25, v21 & 1);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  return v27;
}

uint64_t SleepQuerySnippet.formatUnitSleepData(unit:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  _QWORD v38[6];
  Swift::String v39;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v11);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  v39._countAndFlagsBits = a1;
  v39._object = a2;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v39);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  LocalizedStringKey.init(stringInterpolation:)();
  v15 = Text.init(_:tableName:bundle:comment:)();
  v17 = v16;
  v38[1] = v18;
  v20 = v19 & 1;
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v22 = v8;
  v23 = v7;
  v21(v10, *MEMORY[0x24BDF1870], v7);
  v24 = *MEMORY[0x24BDF1670];
  v25 = type metadata accessor for Font.Design();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v6, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v6, 0, 1, v25);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v6, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  v27 = Text.font(_:)();
  v29 = v28;
  LOBYTE(v26) = v30;
  swift_release();
  outlined consume of Text.Storage(v15, v17, v20);
  swift_bridgeObjectRelease();
  LODWORD(v39._countAndFlagsBits) = static HierarchicalShapeStyle.secondary.getter();
  v31 = Text.foregroundStyle<A>(_:)();
  v33 = v32;
  v35 = v34 & 1;
  outlined consume of Text.Storage(v27, v29, v26 & 1);
  swift_bridgeObjectRelease();
  v36 = Text.bold()();
  outlined consume of Text.Storage(v31, v33, v35);
  swift_bridgeObjectRelease();
  return v36;
}

unint64_t lazy protocol witness table accessor for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView;
  if (!lazy protocol witness table cache variable for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for MultipleDataPointWithSubTypesView, &type metadata for MultipleDataPointWithSubTypesView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView);
  }
  return result;
}

_QWORD *outlined release of MultipleDataPointWithSubTypesView(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[12];
  v7 = a1[13];
  v9 = a1[15];
  v10 = a1[14];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Text?(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Text?(v6, v7, v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A47A480()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + v2;
  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v0 + v2, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = v3 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for SnippetHeaderView() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #3 in SleepQuerySnippet.body.getter(v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_24A47A658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    v7 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  v12 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)(v0 + v12), *(_QWORD *)(v0 + v12 + 8), *(_BYTE *)(v0 + v12 + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(_QWORD *)(v0 + v13), *(_QWORD *)(v0 + v13 + 8), *(_BYTE *)(v0 + v13 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for SnippetHeaderView() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 39) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in SleepQuerySnippet.body.getter(v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_BYTE *)(v1 + v5 + 16), *(_QWORD *)(v1 + v5 + 24), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v6 + 8), *(unsigned __int8 *)(v1 + v6 + 16), a1, *(_QWORD *)(v1 + v6 + 24), *(_QWORD *)(v1 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  uint64_t Snippet;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  Snippet = type metadata accessor for SleepQuerySnippet();
  v2 = *(_QWORD *)(Snippet - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v12 = *(_QWORD *)(v2 + 64);
  v13 = Snippet;
  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v0 + v3;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v3, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v3, v4);
  v8 = v7 + *(int *)(type metadata accessor for SleepQueryModel() + 20);
  v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v12 + v6) & ~v6), v4);
  return swift_deallocObject();
}

void partial apply for closure #4 in SleepQuerySnippet.body.getter()
{
  uint64_t v0;
  uint64_t Snippet;
  unint64_t v2;

  Snippet = type metadata accessor for SleepQuerySnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in SleepQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in SleepQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    Model = (int *)type metadata accessor for SleepQueryModel();
    v12 = Model[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for SnippetHeaderModel();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v18 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v13, v14, v18);
      v19 = *(int *)(v15 + 20);
      v20 = &v13[v19];
      v21 = &v14[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      v23 = *(int *)(v15 + 24);
      v24 = &v13[v23];
      v25 = &v14[v23];
      v26 = *((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v26;
      v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v13, 0, 1, v15);
    }
    v28 = Model[6];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = Model[7];
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v70 = v34[1];
    *v33 = *v34;
    v33[1] = v70;
    v35 = Model[8];
    v36 = (uint64_t *)((char *)a1 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    v69 = v37[1];
    *v36 = *v37;
    v36[1] = v69;
    v38 = Model[9];
    v39 = (uint64_t *)((char *)a1 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    v68 = v40[1];
    *v39 = *v40;
    v39[1] = v68;
    v41 = Model[10];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    *(uint64_t *)((char *)a1 + Model[11]) = *(uint64_t *)((char *)a2 + Model[11]);
    *(uint64_t *)((char *)a1 + Model[12]) = *(uint64_t *)((char *)a2 + Model[12]);
    *(uint64_t *)((char *)a1 + Model[13]) = *(uint64_t *)((char *)a2 + Model[13]);
    *(uint64_t *)((char *)a1 + Model[14]) = *(uint64_t *)((char *)a2 + Model[14]);
    v45 = Model[15];
    v46 = (uint64_t *)((char *)a1 + v45);
    v47 = (uint64_t *)((char *)a2 + v45);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    v49 = Model[16];
    v50 = (uint64_t *)((char *)a1 + v49);
    v51 = (uint64_t *)((char *)a2 + v49);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = Model[17];
    v54 = (uint64_t *)((char *)a1 + v53);
    v55 = (uint64_t *)((char *)a2 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = *(int *)(a3 + 20);
    v58 = *(int *)(a3 + 24);
    v59 = (uint64_t *)((char *)a1 + v57);
    v60 = (char *)a2 + v57;
    v62 = *(void **)v60;
    v61 = *((_QWORD *)v60 + 1);
    *v59 = v62;
    v59[1] = v61;
    v63 = (uint64_t *)((char *)a1 + v58);
    v64 = (uint64_t *)((char *)a2 + v58);
    v65 = v64[1];
    *v63 = *v64;
    v63[1] = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66 = v62;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SleepQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(type metadata accessor for SleepQueryModel() + 20);
  v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  id v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for SleepQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v11, v12, v16);
    v17 = *(int *)(v13 + 20);
    v18 = &v11[v17];
    v19 = &v12[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = *(int *)(v13 + 24);
    v22 = &v11[v21];
    v23 = &v12[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v11, 0, 1, v13);
  }
  v26 = Model[6];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = v29;
  v30 = Model[7];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v68 = *((_QWORD *)v32 + 1);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = v68;
  v33 = Model[8];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v67 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v67;
  v36 = Model[9];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v66 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v66;
  v39 = Model[10];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  *(_QWORD *)&a1[Model[11]] = *(_QWORD *)&a2[Model[11]];
  *(_QWORD *)&a1[Model[12]] = *(_QWORD *)&a2[Model[12]];
  *(_QWORD *)&a1[Model[13]] = *(_QWORD *)&a2[Model[13]];
  *(_QWORD *)&a1[Model[14]] = *(_QWORD *)&a2[Model[14]];
  v43 = Model[15];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = v46;
  v47 = Model[16];
  v48 = &a1[v47];
  v49 = &a2[v47];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = Model[17];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *((_QWORD *)v52 + 1) = v54;
  v55 = *(int *)(a3 + 20);
  v56 = *(int *)(a3 + 24);
  v57 = &a1[v55];
  v58 = &a2[v55];
  v60 = *(void **)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  v61 = &a1[v56];
  v62 = &a2[v56];
  v63 = *((_QWORD *)v62 + 1);
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *((_QWORD *)v61 + 1) = v63;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v64 = v60;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *Model;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  Model = (int *)type metadata accessor for SleepQueryModel();
  v13 = Model[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for SnippetHeaderModel();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v64 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v14, v15, v64);
      v65 = *(int *)(v16 + 20);
      v66 = &v14[v65];
      v67 = &v15[v65];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v68 = *(int *)(v16 + 24);
      v69 = &v14[v68];
      v70 = &v15[v68];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  v21 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v14, v15, v21);
  v22 = *(int *)(v16 + 20);
  v23 = &v14[v22];
  v24 = &v15[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  v25 = *(int *)(v16 + 24);
  v26 = &v14[v25];
  v27 = &v15[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(v14, 0, 1, v16);
LABEL_13:
  v30 = Model[6];
  v31 = &a1[v30];
  v32 = &a2[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = Model[7];
  v34 = &a1[v33];
  v35 = &a2[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = Model[8];
  v37 = &a1[v36];
  v38 = &a2[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = Model[9];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = Model[10];
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[Model[11]] = *(_QWORD *)&a2[Model[11]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[Model[12]] = *(_QWORD *)&a2[Model[12]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[Model[13]] = *(_QWORD *)&a2[Model[13]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[Model[14]] = *(_QWORD *)&a2[Model[14]];
  swift_retain();
  swift_release();
  v45 = Model[15];
  v46 = &a1[v45];
  v47 = &a2[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v48 = Model[16];
  v49 = &a1[v48];
  v50 = &a2[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51 = Model[17];
  v52 = &a1[v51];
  v53 = &a2[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = *(int *)(a3 + 20);
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = *(void **)&a1[v54];
  v58 = *(void **)&a2[v54];
  *(_QWORD *)v55 = v58;
  v59 = v58;

  *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
  v60 = *(int *)(a3 + 24);
  v61 = &a1[v60];
  v62 = &a2[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for SleepQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)&a1[Model[6]] = *(_OWORD *)&a2[Model[6]];
  *(_OWORD *)&a1[Model[7]] = *(_OWORD *)&a2[Model[7]];
  *(_OWORD *)&a1[Model[8]] = *(_OWORD *)&a2[Model[8]];
  *(_OWORD *)&a1[Model[9]] = *(_OWORD *)&a2[Model[9]];
  *(_OWORD *)&a1[Model[10]] = *(_OWORD *)&a2[Model[10]];
  *(_QWORD *)&a1[Model[11]] = *(_QWORD *)&a2[Model[11]];
  *(_QWORD *)&a1[Model[12]] = *(_QWORD *)&a2[Model[12]];
  *(_QWORD *)&a1[Model[13]] = *(_QWORD *)&a2[Model[13]];
  *(_QWORD *)&a1[Model[14]] = *(_QWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  *(_OWORD *)&a1[Model[16]] = *(_OWORD *)&a2[Model[16]];
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  v17 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  return a1;
}

char *assignWithTake for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *Model;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  Model = (int *)type metadata accessor for SleepQueryModel();
  v13 = Model[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for SnippetHeaderModel();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v73 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 40))(v14, v15, v73);
      v74 = *(int *)(v16 + 20);
      v75 = &v14[v74];
      v76 = &v15[v74];
      v78 = *(_QWORD *)v76;
      v77 = *((_QWORD *)v76 + 1);
      *(_QWORD *)v75 = v78;
      *((_QWORD *)v75 + 1) = v77;
      swift_bridgeObjectRelease();
      v79 = *(int *)(v16 + 24);
      v80 = &v14[v79];
      v81 = &v15[v79];
      v83 = *(_QWORD *)v81;
      v82 = *((_QWORD *)v81 + 1);
      *(_QWORD *)v80 = v83;
      *((_QWORD *)v80 + 1) = v82;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  v21 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v14, v15, v21);
  *(_OWORD *)&v14[*(int *)(v16 + 20)] = *(_OWORD *)&v15[*(int *)(v16 + 20)];
  *(_OWORD *)&v14[*(int *)(v16 + 24)] = *(_OWORD *)&v15[*(int *)(v16 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_13:
  v23 = Model[6];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  v28 = Model[7];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  v33 = Model[8];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = Model[9];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v43 = Model[10];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[Model[11]] = *(_QWORD *)&a2[Model[11]];
  swift_release();
  *(_QWORD *)&a1[Model[12]] = *(_QWORD *)&a2[Model[12]];
  swift_release();
  *(_QWORD *)&a1[Model[13]] = *(_QWORD *)&a2[Model[13]];
  swift_release();
  *(_QWORD *)&a1[Model[14]] = *(_QWORD *)&a2[Model[14]];
  swift_release();
  v48 = Model[15];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v53 = Model[16];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v57 = *(_QWORD *)v55;
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = v57;
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRelease();
  v58 = Model[17];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v62 = *(_QWORD *)v60;
  v61 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v59 = v62;
  *((_QWORD *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  v63 = *(int *)(a3 + 20);
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = *(void **)&a1[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;

  *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);
  v67 = *(int *)(a3 + 24);
  v68 = &a1[v67];
  v69 = &a2[v67];
  v71 = *(_QWORD *)v69;
  v70 = *((_QWORD *)v69 + 1);
  *(_QWORD *)v68 = v71;
  *((_QWORD *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepQuerySnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A47BDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model;
  uint64_t v7;
  unint64_t v9;
  int v10;

  Model = type metadata accessor for SleepQueryModel();
  v7 = *(_QWORD *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Model);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepQuerySnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A47BE4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SleepQueryModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for SleepQuerySnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A47BF38()
{
  return MEMORY[0x24BDF4768];
}

uint64_t sub_24A47BF44()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24BD11508](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24BD11094](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = static String._copying(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x24BD11064](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x24BD11064);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24BD11064]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x24BD11508](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t static WellnessSnippets.bundleName.getter()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WellnessSnippets.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A47CE6C + 4 * byte_24A4E7D40[a1]))(0xD000000000000014, 0x800000024A4F3850);
}

uint64_t sub_24A47CE6C(uint64_t a1)
{
  return a1 + 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys();
  return CodingKey.debugDescription.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WellnessSnippets.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WellnessSnippets.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance WellnessSnippets.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessSnippets.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WellnessSnippets.CodingKeys()
{
  unsigned __int8 *v0;

  return WellnessSnippets.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WellnessSnippets.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WellnessSnippets.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WellnessSnippets.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.CodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.CodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericButtonCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericButtonCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.HeightDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.HeightDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hash(into:) in conformance WellnessSnippets.PhoneRingsCodingKeys()
{
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.PhoneRingsCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.PhoneRingsCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.SleepQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.SleepQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.WatchRingsCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.WatchRingsCodingKeys()
{
  lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys();
  return CodingKey.debugDescription.getter();
}

void WellnessSnippets.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD v42[3];
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t Model;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;

  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.WatchRingsCodingKeys>);
  v110 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v109 = (char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.TemperatureDataQueryCodingKeys>);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v106 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = type metadata accessor for TemperatureQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v105 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.SpecificMedCompletedLogCodingKeys>);
  v102 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v101 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for SpecificMedCompletedLogModel();
  MEMORY[0x24BDAC7A8](v98);
  v100 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.SleepQueryCodingKeys>);
  v97 = *(_QWORD *)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v96 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for SleepQueryModel();
  MEMORY[0x24BDAC7A8](v90);
  v95 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.SingleActivitySummaryQueryCodingKeys>);
  v89 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v88 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for SingleActivitySummaryModel();
  MEMORY[0x24BDAC7A8](v86);
  v87 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.PhoneRingsCodingKeys>);
  v93 = *(_QWORD *)(v11 - 8);
  v94 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v92 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.HeightDataQueryCodingKeys>);
  v84 = *(_QWORD *)(v13 - 8);
  v85 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v83 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for HeightQueryModel();
  MEMORY[0x24BDAC7A8](v80);
  v82 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericDataQueryCodingKeys>);
  v79 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v78 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for GenericQueryModel();
  MEMORY[0x24BDAC7A8](v75);
  v77 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericDataTypeLogCodingKeys>);
  v74 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v73 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for HealthDataLogModel();
  MEMORY[0x24BDAC7A8](v70);
  v72 = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericMedCompletedLogCodingKeys>);
  v69 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v68 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for GenericMedCompletedLogModel();
  MEMORY[0x24BDAC7A8](v65);
  v67 = (char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericBinaryButtonCodingKeys>);
  v64 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v63 = (char *)v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericButtonCodingKeys>);
  v61 = *(_QWORD *)(v23 - 8);
  v62 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v60 = (char *)v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for GenericButtonModel();
  MEMORY[0x24BDAC7A8](v57);
  v59 = (char *)v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.CycleTrackingDataLogCodingKeys>);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v55 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for CycleTrackingLogModel();
  MEMORY[0x24BDAC7A8](v52);
  v54 = (char *)v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.BloodPressureDataLogCodingKeys>);
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v50 = (char *)v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for BloodPressureLogModel();
  MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)v42 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.BloodPressureDataQueryCodingKeys>);
  v46 = *(_QWORD *)(v30 - 8);
  v47 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v45 = (char *)v42 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for BloodPressureQueryModel();
  MEMORY[0x24BDAC7A8](v43);
  v44 = (char *)v42 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.BloodOxygenDataQueryCodingKeys>);
  v42[1] = *(_QWORD *)(v33 - 8);
  v42[2] = v33;
  MEMORY[0x24BDAC7A8](v33);
  v42[0] = (char *)v42 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for OxygenSaturationQueryModel();
  MEMORY[0x24BDAC7A8](v35);
  v36 = type metadata accessor for WellnessSnippets();
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)v42 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.CodingKeys>);
  v112 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v40 = (char *)v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();
  v113 = v40;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of WellnessSnippets(v114, (uint64_t)v38);
  v41 = (char *)sub_24A47DEFC + 4 * word_24A4E7D50[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_24A47DEFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  outlined init with take of GenericMedCompletedLogSnippet(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
  *((_BYTE *)v0 + 864) = 0;
  lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys();
  v4 = *v0;
  v5 = *(_QWORD *)(v3 - 72);
  v6 = v0[73];
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type OxygenSaturationQueryModel and conformance OxygenSaturationQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel, (uint64_t)&protocol conformance descriptor for OxygenSaturationQueryModel);
  v7 = v0[2];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v0[1] + 8))(v4, v7);
  outlined destroy of GenericMedCompletedLogModel(v1, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[72] + 8))(v6, v5);
}

void sub_24A47EA8C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v0 + 600) = *(_QWORD *)v1;
  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)(v0 + 544) = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v1 + 48);
  *(_DWORD *)(v0 + 528) = *(unsigned __int8 *)(v1 + 56);
  *(_QWORD *)(v0 + 520) = *(_QWORD *)(v1 + 64);
  *(_DWORD *)(v0 + 512) = *(unsigned __int8 *)(v1 + 72);
  *(_QWORD *)(v0 + 504) = *(_QWORD *)(v1 + 80);
  v6 = *(_BYTE *)(v1 + 88);
  *(_BYTE *)(v0 + 864) = 15;
  lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys();
  v7 = *(_QWORD *)(v0 + 552);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  *(_QWORD *)(v0 + 864) = *(_QWORD *)(v0 + 600);
  *(_BYTE *)(v0 + 872) = v2;
  *(_QWORD *)(v0 + 880) = *(_QWORD *)(v0 + 544);
  *(_BYTE *)(v0 + 888) = v3;
  *(_QWORD *)(v0 + 896) = v4;
  *(_BYTE *)(v0 + 904) = v5;
  *(_QWORD *)(v0 + 912) = *(_QWORD *)(v0 + 536);
  *(_BYTE *)(v0 + 920) = *(_DWORD *)(v0 + 528);
  *(_QWORD *)(v0 + 928) = *(_QWORD *)(v0 + 520);
  *(_BYTE *)(v0 + 936) = *(_DWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 944) = *(_QWORD *)(v0 + 504);
  *(_BYTE *)(v0 + 952) = v6;
  lazy protocol witness table accessor for type WatchRingsModel and conformance WatchRingsModel();
  v8 = *(_QWORD *)(v0 + 568);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 560) + 8))(v7, v8);
  JUMPOUT(0x24A47EA64);
}

uint64_t type metadata accessor for WellnessSnippets()
{
  uint64_t result;

  result = type metadata singleton initialization cache for WellnessSnippets;
  if (!type metadata singleton initialization cache for WellnessSnippets)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CodingKeys, &unk_251BD1EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CodingKeys, &unk_251BD1EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CodingKeys, &unk_251BD1EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CodingKeys, &unk_251BD1EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of WellnessSnippets(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WellnessSnippets();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.WatchRingsCodingKeys, &unk_251BD27E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.WatchRingsCodingKeys, &unk_251BD27E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.WatchRingsCodingKeys, &unk_251BD27E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchRingsModel and conformance WatchRingsModel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel;
  if (!lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WatchRingsModel, &type metadata for WatchRingsModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel;
  if (!lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WatchRingsModel, &type metadata for WatchRingsModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.TemperatureDataQueryCodingKeys, &unk_251BD2758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.TemperatureDataQueryCodingKeys, &unk_251BD2758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.TemperatureDataQueryCodingKeys, &unk_251BD2758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.TemperatureDataQueryCodingKeys, &unk_251BD2758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SpecificMedCompletedLogCodingKeys, &unk_251BD26C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SpecificMedCompletedLogCodingKeys, &unk_251BD26C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SpecificMedCompletedLogCodingKeys, &unk_251BD26C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SpecificMedCompletedLogCodingKeys, &unk_251BD26C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SleepQueryCodingKeys, &unk_251BD2638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SleepQueryCodingKeys, &unk_251BD2638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SleepQueryCodingKeys, &unk_251BD2638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SleepQueryCodingKeys, &unk_251BD2638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys, &unk_251BD25A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys, &unk_251BD25A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys, &unk_251BD25A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys, &unk_251BD25A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.PhoneRingsCodingKeys, &unk_251BD2518);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.PhoneRingsCodingKeys, &unk_251BD2518);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.PhoneRingsCodingKeys, &unk_251BD2518);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.PhoneRingsCodingKeys, &unk_251BD2518);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneRingsModel and conformance PhoneRingsModel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for PhoneRingsModel, &type metadata for PhoneRingsModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for PhoneRingsModel, &type metadata for PhoneRingsModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel);
  }
  return result;
}

uint64_t outlined release of PhoneRingsModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.HeightDataQueryCodingKeys, &unk_251BD2488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.HeightDataQueryCodingKeys, &unk_251BD2488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.HeightDataQueryCodingKeys, &unk_251BD2488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.HeightDataQueryCodingKeys, &unk_251BD2488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataQueryCodingKeys, &unk_251BD23F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataQueryCodingKeys, &unk_251BD23F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataQueryCodingKeys, &unk_251BD23F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataQueryCodingKeys, &unk_251BD23F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataTypeLogCodingKeys, &unk_251BD2368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataTypeLogCodingKeys, &unk_251BD2368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataTypeLogCodingKeys, &unk_251BD2368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericDataTypeLogCodingKeys, &unk_251BD2368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericMedCompletedLogCodingKeys, &unk_251BD22D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericMedCompletedLogCodingKeys, &unk_251BD22D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericMedCompletedLogCodingKeys, &unk_251BD22D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericMedCompletedLogCodingKeys, &unk_251BD22D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericBinaryButtonCodingKeys, &unk_251BD2248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericBinaryButtonCodingKeys, &unk_251BD2248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericBinaryButtonCodingKeys, &unk_251BD2248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericBinaryButtonCodingKeys, &unk_251BD2248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericBinaryButtonModel, &type metadata for GenericBinaryButtonModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericBinaryButtonModel, &type metadata for GenericBinaryButtonModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericButtonCodingKeys, &unk_251BD21B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericButtonCodingKeys, &unk_251BD21B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericButtonCodingKeys, &unk_251BD21B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.GenericButtonCodingKeys, &unk_251BD21B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CycleTrackingDataLogCodingKeys, &unk_251BD2128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CycleTrackingDataLogCodingKeys, &unk_251BD2128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CycleTrackingDataLogCodingKeys, &unk_251BD2128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.CycleTrackingDataLogCodingKeys, &unk_251BD2128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataLogCodingKeys, &unk_251BD2098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataLogCodingKeys, &unk_251BD2098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataLogCodingKeys, &unk_251BD2098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataLogCodingKeys, &unk_251BD2098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataQueryCodingKeys, &unk_251BD2008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataQueryCodingKeys, &unk_251BD2008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataQueryCodingKeys, &unk_251BD2008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodPressureDataQueryCodingKeys, &unk_251BD2008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodOxygenDataQueryCodingKeys, &unk_251BD1F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodOxygenDataQueryCodingKeys, &unk_251BD1F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodOxygenDataQueryCodingKeys, &unk_251BD1F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WellnessSnippets.BloodOxygenDataQueryCodingKeys, &unk_251BD1F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

uint64_t WellnessSnippets.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  _QWORD v68[34];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;

  v102 = a2;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.WatchRingsCodingKeys>);
  v68[25] = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v101 = (char *)v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.TemperatureDataQueryCodingKeys>);
  v68[24] = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v97 = (char *)v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.SpecificMedCompletedLogCodingKeys>);
  v68[23] = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v96 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.SleepQueryCodingKeys>);
  v68[22] = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v95 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.SingleActivitySummaryQueryCodingKeys>);
  v68[21] = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v94 = (char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.PhoneRingsCodingKeys>);
  v68[20] = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v93 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.HeightDataQueryCodingKeys>);
  v68[19] = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v92 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericDataQueryCodingKeys>);
  v68[18] = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v91 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericDataTypeLogCodingKeys>);
  v68[17] = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v90 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericMedCompletedLogCodingKeys>);
  v68[16] = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v89 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericBinaryButtonCodingKeys>);
  v68[15] = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v88 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericButtonCodingKeys>);
  v68[14] = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v100 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.CycleTrackingDataLogCodingKeys>);
  v68[13] = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v87 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.BloodPressureDataLogCodingKeys>);
  v68[12] = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v86 = (char *)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.BloodPressureDataQueryCodingKeys>);
  v68[11] = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v85 = (char *)v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.BloodOxygenDataQueryCodingKeys>);
  v68[10] = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v99 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.CodingKeys>);
  v98 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v107 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for WellnessSnippets();
  v20 = MEMORY[0x24BDAC7A8](v103);
  v68[9] = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v68[33] = (char *)v68 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v68[32] = (char *)v68 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v68[31] = (char *)v68 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v68[30] = (char *)v68 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v68[8] = (char *)v68 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v68[29] = (char *)v68 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v68[28] = (char *)v68 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v68[27] = (char *)v68 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v68[26] = (char *)v68 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v68[7] = (char *)v68 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v44 = (char *)v68 - v43;
  v45 = MEMORY[0x24BDAC7A8](v42);
  v47 = (char *)v68 - v46;
  v48 = MEMORY[0x24BDAC7A8](v45);
  v50 = (char *)v68 - v49;
  v51 = MEMORY[0x24BDAC7A8](v48);
  v53 = (char *)v68 - v52;
  v54 = MEMORY[0x24BDAC7A8](v51);
  v56 = (char *)v68 - v55;
  MEMORY[0x24BDAC7A8](v54);
  v58 = (char *)v68 - v57;
  v59 = a1[3];
  v105 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v59);
  lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();
  v60 = v106;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v60)
  {
    v68[1] = v56;
    v68[2] = v53;
    v68[3] = v50;
    v68[4] = v47;
    v68[5] = v44;
    v106 = 0;
    v68[6] = v58;
    v61 = v104;
    v62 = v107;
    v63 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v63 + 16) == 1)
      __asm { BR              X10 }
    v64 = type metadata accessor for DecodingError();
    swift_allocError();
    v66 = v65;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v66 = v103;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v66, *MEMORY[0x24BEE26D0], v64);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v62, v61);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v105);
}

uint64_t base witness table accessor for Decodable in WellnessSnippets()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type WellnessSnippets and conformance WellnessSnippets, (uint64_t (*)(uint64_t))type metadata accessor for WellnessSnippets, (uint64_t)&protocol conformance descriptor for WellnessSnippets);
}

uint64_t base witness table accessor for Encodable in WellnessSnippets()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type WellnessSnippets and conformance WellnessSnippets, (uint64_t (*)(uint64_t))type metadata accessor for WellnessSnippets, (uint64_t)&protocol conformance descriptor for WellnessSnippets);
}

unint64_t protocol witness for static SnippetPluginModel.bundleName.getter in conformance WellnessSnippets()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Decodable.init(from:) in conformance WellnessSnippets@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WellnessSnippets.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance WellnessSnippets(_QWORD *a1)
{
  WellnessSnippets.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for WellnessSnippets(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *Model;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int (*v174)(char *, uint64_t, uint64_t);
  uint64_t v175;
  int *v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int (*v193)(char *, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int (*v216)(char *, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  void (*v226)(uint64_t *, _QWORD, uint64_t, uint64_t);
  int *v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  int *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  void (*v295)(char *, _QWORD, uint64_t, uint64_t);
  int *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int (*v335)(char *, uint64_t, uint64_t);
  uint64_t v336;
  int *v337;
  uint64_t v338;
  char *v339;
  char *v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  unsigned int (*v386)(char *, uint64_t, uint64_t);
  uint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int (*v400)(char *, uint64_t, uint64_t);
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  char *v409;
  uint64_t v410;
  void (*v411)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  char *v427;
  uint64_t v428;
  void (*v429)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v430;
  char *v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  _QWORD *v442;
  uint64_t v443;
  _QWORD *v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  _QWORD *v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unsigned int (*v469)(char *, uint64_t, uint64_t);
  uint64_t v470;
  uint64_t v471;
  char *v472;
  char *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  char *v480;
  uint64_t v481;
  uint64_t v482;
  char *v483;
  char *v484;
  uint64_t v485;
  void (*v486)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v487;
  _QWORD *v488;
  _QWORD *v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD *v492;
  _QWORD *v493;
  uint64_t v494;
  _QWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  _QWORD *v498;
  _QWORD *v499;
  uint64_t v500;
  uint64_t v501;
  _QWORD *v502;
  _QWORD *v503;
  uint64_t v504;
  uint64_t v505;
  _QWORD *v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  _QWORD *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char *v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  char *v523;
  char *v524;
  uint64_t v525;
  void (*v526)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v527;
  _QWORD *v528;
  _QWORD *v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  _QWORD *v533;
  uint64_t v534;
  uint64_t v535;
  _QWORD *v536;
  _QWORD *v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  char *v548;
  char *v549;
  uint64_t v550;
  uint64_t v551;
  char *v552;
  char *v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  char *v557;
  uint64_t v558;
  void (*v559)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v560;
  uint64_t v561;
  char *v562;
  char *v563;
  uint64_t v564;
  uint64_t v565;
  char *v566;
  char *v567;
  uint64_t v568;
  void (*v569)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v570;
  char *v571;
  char *v572;
  uint64_t v573;
  uint64_t v574;
  char *v575;
  char *v576;
  uint64_t v577;
  void (*v578)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v579;
  char *v580;
  char *v581;
  uint64_t v582;
  uint64_t v583;
  char *v584;
  char *v585;
  uint64_t v586;
  void (*v587)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v588;
  _QWORD *v589;
  _QWORD *v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  _QWORD *v594;
  uint64_t v595;
  uint64_t v596;
  _QWORD *v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD *v601;
  _QWORD *v602;
  uint64_t v603;
  uint64_t v604;
  char *v605;
  char *v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int (*v609)(char *, uint64_t, uint64_t);
  uint64_t v610;
  uint64_t v611;
  char *v612;
  char *v613;
  uint64_t v614;
  uint64_t v615;
  char *v616;
  char *v617;
  uint64_t v618;
  void (*v619)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v620;
  unsigned int (*v621)(char *, uint64_t, uint64_t);
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unsigned int (*v634)(char *, uint64_t, uint64_t);
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  char *__dst;
  char *__dsta;
  char *__dstb;
  char *__dstc;
  char *__dstd;
  char *__dste;
  unsigned int (*__dstf)(char *, uint64_t, uint64_t);
  char *__dstg;
  void *__dsth;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for AppPunchout();
        v8 = *(_QWORD *)(v7 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
        {
          v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        }
        Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        v84 = Model[5];
        v85 = (char *)a1 + v84;
        v86 = (char *)a2 + v84;
        *(_QWORD *)v85 = *(_QWORD *)v86;
        v85[8] = v86[8];
        v87 = Model[6];
        v88 = (char *)a1 + v87;
        v89 = (char *)a2 + v87;
        *(_QWORD *)v88 = *(_QWORD *)v89;
        v88[8] = v89[8];
        v90 = Model[7];
        v91 = (char *)a1 + v90;
        v92 = (char *)a2 + v90;
        v91[8] = v92[8];
        *(_QWORD *)v91 = *(_QWORD *)v92;
        v93 = Model[8];
        v94 = (char *)a1 + v93;
        v95 = (char *)a2 + v93;
        v94[8] = v95[8];
        *(_QWORD *)v94 = *(_QWORD *)v95;
        v96 = Model[9];
        v97 = (char *)a1 + v96;
        v98 = (char *)a2 + v96;
        v99 = type metadata accessor for SpeakableString();
        v100 = *(_QWORD *)(v99 - 8);
        v627 = v100;
        v632 = v99;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
        {
          v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v97, v98, v99);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
        }
        v359 = Model[10];
        v360 = (uint64_t *)((char *)a1 + v359);
        v361 = (uint64_t *)((char *)a2 + v359);
        v362 = v361[1];
        *v360 = *v361;
        v360[1] = v362;
        v363 = Model[11];
        v364 = (uint64_t *)((char *)a1 + v363);
        v365 = (uint64_t *)((char *)a2 + v363);
        v366 = v365[1];
        *v364 = *v365;
        v364[1] = v366;
        v367 = Model[12];
        v368 = (uint64_t *)((char *)a1 + v367);
        v369 = (uint64_t *)((char *)a2 + v367);
        v370 = v369[1];
        *v368 = *v369;
        v368[1] = v370;
        v371 = Model[13];
        v372 = (uint64_t *)((char *)a1 + v371);
        v373 = (uint64_t *)((char *)a2 + v371);
        v374 = v373[1];
        *v372 = *v373;
        v372[1] = v374;
        v375 = Model[14];
        v376 = (uint64_t *)((char *)a1 + v375);
        v377 = (uint64_t *)((char *)a2 + v375);
        v378 = v377[1];
        *v376 = *v377;
        v376[1] = v378;
        v379 = Model[15];
        v380 = (uint64_t *)((char *)a1 + v379);
        v381 = (uint64_t *)((char *)a2 + v379);
        v382 = v381[1];
        *v380 = *v381;
        v380[1] = v382;
        v383 = Model[16];
        __dstg = (char *)a1 + v383;
        v384 = (char *)a2 + v383;
        v385 = type metadata accessor for SnippetHeaderModel();
        v626 = *(_QWORD *)(v385 - 8);
        v386 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v626 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v386(v384, 1, v385))
          goto LABEL_83;
        (*(void (**)(char *, char *, uint64_t))(v627 + 16))(__dstg, v384, v632);
        v551 = *(int *)(v385 + 20);
        v552 = &__dstg[v551];
        v553 = &v384[v551];
        v554 = *((_QWORD *)v553 + 1);
        *(_QWORD *)v552 = *(_QWORD *)v553;
        *((_QWORD *)v552 + 1) = v554;
        v555 = *(int *)(v385 + 24);
        v556 = &__dstg[v555];
        v557 = &v384[v555];
        v558 = *((_QWORD *)v557 + 1);
        *(_QWORD *)v556 = *(_QWORD *)v557;
        *((_QWORD *)v556 + 1) = v558;
        v559 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v626 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v559(__dstg, 0, 1, v385);
        goto LABEL_103;
      case 1u:
        v12 = type metadata accessor for AppPunchout();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        v102 = (int *)type metadata accessor for BloodPressureQueryModel();
        v103 = v102[5];
        v104 = (char *)a1 + v103;
        v105 = (char *)a2 + v103;
        *(_QWORD *)v104 = *(_QWORD *)v105;
        v104[8] = v105[8];
        v106 = v102[6];
        v107 = (char *)a1 + v106;
        v108 = (char *)a2 + v106;
        *(_QWORD *)v107 = *(_QWORD *)v108;
        v107[8] = v108[8];
        v109 = v102[7];
        v110 = (char *)a1 + v109;
        v111 = (char *)a2 + v109;
        v110[8] = v111[8];
        *(_QWORD *)v110 = *(_QWORD *)v111;
        v112 = v102[8];
        v113 = (char *)a1 + v112;
        v114 = (char *)a2 + v112;
        v113[8] = v114[8];
        *(_QWORD *)v113 = *(_QWORD *)v114;
        v115 = v102[9];
        v116 = (char *)a1 + v115;
        v117 = (char *)a2 + v115;
        v116[8] = v117[8];
        *(_QWORD *)v116 = *(_QWORD *)v117;
        v118 = v102[10];
        v119 = (char *)a1 + v118;
        v120 = (char *)a2 + v118;
        *(_QWORD *)v119 = *(_QWORD *)v120;
        v119[8] = v120[8];
        v121 = v102[11];
        v122 = (uint64_t *)((char *)a1 + v121);
        v123 = (uint64_t *)((char *)a2 + v121);
        v633 = v123[1];
        *v122 = *v123;
        v122[1] = v633;
        v124 = v102[12];
        v125 = (uint64_t *)((char *)a1 + v124);
        v126 = (uint64_t *)((char *)a2 + v124);
        v628 = v126[1];
        *v125 = *v126;
        v125[1] = v628;
        v127 = v102[13];
        v128 = (uint64_t *)((char *)a1 + v127);
        v129 = (uint64_t *)((char *)a2 + v127);
        v624 = v129[1];
        *v128 = *v129;
        v128[1] = v624;
        v130 = v102[14];
        v131 = (uint64_t *)((char *)a1 + v130);
        v132 = (uint64_t *)((char *)a2 + v130);
        v622 = v132[1];
        *v131 = *v132;
        v131[1] = v622;
        v133 = v102[15];
        v134 = (uint64_t *)((char *)a1 + v133);
        v135 = (uint64_t *)((char *)a2 + v133);
        v136 = v135[1];
        *v134 = *v135;
        v134[1] = v136;
        v137 = v102[16];
        v138 = (uint64_t *)((char *)a1 + v137);
        v139 = (uint64_t *)((char *)a2 + v137);
        v140 = v139[1];
        *v138 = *v139;
        v138[1] = v140;
        v141 = v102[17];
        v142 = (uint64_t *)((char *)a1 + v141);
        v143 = (uint64_t *)((char *)a2 + v141);
        v144 = v143[1];
        *v142 = *v143;
        v142[1] = v144;
        v145 = v102[18];
        v146 = (uint64_t *)((char *)a1 + v145);
        v147 = (uint64_t *)((char *)a2 + v145);
        v148 = v147[1];
        *v146 = *v147;
        v146[1] = v148;
        v149 = v102[19];
        v150 = (uint64_t *)((char *)a1 + v149);
        v151 = (uint64_t *)((char *)a2 + v149);
        v152 = v151[1];
        *v150 = *v151;
        v150[1] = v152;
        v153 = v102[20];
        __dstb = (char *)a1 + v153;
        v154 = (char *)a2 + v153;
        v155 = type metadata accessor for URL();
        v620 = *(_QWORD *)(v155 - 8);
        v621 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v620 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v621(v154, 1, v155))
        {
          v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(__dstb, v154, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v620 + 16))(__dstb, v154, v155);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v620 + 56))(__dstb, 0, 1, v155);
        }
        v387 = v102[21];
        v388 = (uint64_t *)((char *)a1 + v387);
        v389 = (uint64_t *)((char *)a2 + v387);
        v390 = v389[1];
        *v388 = *v389;
        v388[1] = v390;
        v391 = v102[22];
        v392 = (uint64_t *)((char *)a1 + v391);
        v393 = (uint64_t *)((char *)a2 + v391);
        v394 = v393[1];
        *v392 = *v393;
        v392[1] = v394;
        v395 = v102[23];
        v396 = (char *)a1 + v395;
        v397 = (char *)a2 + v395;
        v398 = type metadata accessor for SnippetHeaderModel();
        v399 = *(_QWORD *)(v398 - 8);
        v400 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v399 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v400(v397, 1, v398))
        {
          v401 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v396, v397, *(_QWORD *)(*(_QWORD *)(v401 - 8) + 64));
        }
        else
        {
          v560 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v560 - 8) + 16))(v396, v397, v560);
          v561 = *(int *)(v398 + 20);
          v562 = &v396[v561];
          v563 = &v397[v561];
          v564 = *((_QWORD *)v563 + 1);
          *(_QWORD *)v562 = *(_QWORD *)v563;
          *((_QWORD *)v562 + 1) = v564;
          v565 = *(int *)(v398 + 24);
          v566 = &v396[v565];
          v567 = &v397[v565];
          v568 = *((_QWORD *)v567 + 1);
          *(_QWORD *)v566 = *(_QWORD *)v567;
          *((_QWORD *)v566 + 1) = v568;
          v569 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v399 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v569(v396, 0, 1, v398);
        }
        goto LABEL_103;
      case 2u:
        v15 = type metadata accessor for AppPunchout();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(a1, a2, v15);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        v157 = (int *)type metadata accessor for BloodPressureLogModel();
        v158 = v157[5];
        v159 = (uint64_t *)((char *)a1 + v158);
        v160 = (uint64_t *)((char *)a2 + v158);
        v161 = v160[1];
        *v159 = *v160;
        v159[1] = v161;
        v162 = v157[6];
        v163 = (uint64_t *)((char *)a1 + v162);
        v164 = (uint64_t *)((char *)a2 + v162);
        v165 = v164[1];
        *v163 = *v164;
        v163[1] = v165;
        v166 = v157[7];
        v167 = (uint64_t *)((char *)a1 + v166);
        v168 = (uint64_t *)((char *)a2 + v166);
        v169 = v168[1];
        *v167 = *v168;
        v167[1] = v169;
        v170 = v157[8];
        __dstc = (char *)a1 + v170;
        v171 = (char *)a2 + v170;
        v172 = type metadata accessor for SnippetHeaderModel();
        v173 = *(_QWORD *)(v172 - 8);
        v174 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v174(v171, 1, v172))
        {
          v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstc, v171, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
        }
        else
        {
          v402 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v402 - 8) + 16))(__dstc, v171, v402);
          v403 = *(int *)(v172 + 20);
          v404 = &__dstc[v403];
          v405 = &v171[v403];
          v406 = *((_QWORD *)v405 + 1);
          *(_QWORD *)v404 = *(_QWORD *)v405;
          *((_QWORD *)v404 + 1) = v406;
          v407 = *(int *)(v172 + 24);
          v408 = &__dstc[v407];
          v409 = &v171[v407];
          v410 = *((_QWORD *)v409 + 1);
          *(_QWORD *)v408 = *(_QWORD *)v409;
          *((_QWORD *)v408 + 1) = v410;
          v411 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v411(__dstc, 0, 1, v172);
        }
        v412 = v157[9];
        v413 = (uint64_t *)((char *)a1 + v412);
        v414 = (uint64_t *)((char *)a2 + v412);
        v415 = v414[1];
        *v413 = *v414;
        v413[1] = v415;
        v416 = v157[10];
        v417 = (uint64_t *)((char *)a1 + v416);
        v418 = (uint64_t *)((char *)a2 + v416);
        v419 = v418[1];
        *v417 = *v418;
        v417[1] = v419;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        v18 = type metadata accessor for AppPunchout();
        v19 = *(_QWORD *)(v18 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(a2, 1, v18))
        {
          v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 16))(a1, a2, v18);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
        }
        v176 = (int *)type metadata accessor for CycleTrackingLogModel();
        v177 = v176[5];
        v178 = (uint64_t *)((char *)a1 + v177);
        v179 = (uint64_t *)((char *)a2 + v177);
        v180 = v179[1];
        *v178 = *v179;
        v178[1] = v180;
        v181 = v176[6];
        v182 = (uint64_t *)((char *)a1 + v181);
        v183 = (uint64_t *)((char *)a2 + v181);
        v184 = v183[1];
        *v182 = *v183;
        v182[1] = v184;
        v185 = v176[7];
        v186 = (uint64_t *)((char *)a1 + v185);
        v187 = (uint64_t *)((char *)a2 + v185);
        v188 = v187[1];
        *v186 = *v187;
        v186[1] = v188;
        v189 = v176[8];
        __dstd = (char *)a1 + v189;
        v190 = (char *)a2 + v189;
        v191 = type metadata accessor for SnippetHeaderModel();
        v192 = *(_QWORD *)(v191 - 8);
        v193 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v193(v190, 1, v191))
        {
          v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstd, v190, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
        }
        else
        {
          v420 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v420 - 8) + 16))(__dstd, v190, v420);
          v421 = *(int *)(v191 + 20);
          v422 = &__dstd[v421];
          v423 = &v190[v421];
          v424 = *((_QWORD *)v423 + 1);
          *(_QWORD *)v422 = *(_QWORD *)v423;
          *((_QWORD *)v422 + 1) = v424;
          v425 = *(int *)(v191 + 24);
          v426 = &__dstd[v425];
          v427 = &v190[v425];
          v428 = *((_QWORD *)v427 + 1);
          *(_QWORD *)v426 = *(_QWORD *)v427;
          *((_QWORD *)v426 + 1) = v428;
          v429 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v429(__dstd, 0, 1, v191);
        }
        v430 = v176[9];
        v431 = (char *)a1 + v430;
        v432 = (char *)a2 + v430;
        v433 = type metadata accessor for URL();
        v434 = *(_QWORD *)(v433 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v434 + 48))(v432, 1, v433))
        {
          v435 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v431, v432, *(_QWORD *)(*(_QWORD *)(v435 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v434 + 16))(v431, v432, v433);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v434 + 56))(v431, 0, 1, v433);
        }
        goto LABEL_103;
      case 4u:
        v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        v22 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for URL();
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        v26(v23, v24, v25);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 5u:
        v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        v28 = a2[3];
        a1[2] = a2[2];
        a1[3] = v28;
        v29 = a2[5];
        a1[4] = a2[4];
        a1[5] = v29;
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v30 = a2[2];
        a1[1] = a2[1];
        a1[2] = v30;
        v31 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        v32 = v31[6];
        v33 = (char *)a1 + v32;
        v34 = (char *)a2 + v32;
        v35 = type metadata accessor for AppPunchout();
        v36 = *(_QWORD *)(v35 - 8);
        v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
        swift_bridgeObjectRetain();
        if (v37(v34, 1, v35))
        {
          v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        }
        *((_BYTE *)a1 + v31[7]) = *((_BYTE *)a2 + v31[7]);
        v195 = v31[8];
        v196 = (uint64_t *)((char *)a1 + v195);
        v197 = (uint64_t *)((char *)a2 + v195);
        v198 = v197[1];
        *v196 = *v197;
        v196[1] = v198;
        *((_BYTE *)a1 + v31[9]) = *((_BYTE *)a2 + v31[9]);
        v199 = v31[10];
        v200 = (uint64_t *)((char *)a1 + v199);
        v201 = (uint64_t *)((char *)a2 + v199);
        v202 = v201[1];
        *v200 = *v201;
        v200[1] = v202;
        v203 = v31[11];
        v204 = (uint64_t *)((char *)a1 + v203);
        v205 = (uint64_t *)((char *)a2 + v203);
        v206 = v205[1];
        *v204 = *v205;
        v204[1] = v206;
        v207 = v31[12];
        v208 = (uint64_t *)((char *)a1 + v207);
        v209 = (uint64_t *)((char *)a2 + v207);
        v210 = v209[1];
        *v208 = *v209;
        v208[1] = v210;
        v211 = v31[13];
        v212 = (uint64_t *)((char *)a1 + v211);
        v213 = (uint64_t *)((char *)a2 + v211);
        v214 = v213[1];
        *v212 = *v213;
        v212[1] = v214;
        v215 = v31[14];
        __dst = (char *)a1 + v215;
        v63 = (char *)a2 + v215;
        v64 = type metadata accessor for SnippetHeaderModel();
        v65 = *(_QWORD *)(v64 - 8);
        v216 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v216(v63, 1, v64))
          goto LABEL_63;
        goto LABEL_57;
      case 7u:
        v39 = type metadata accessor for SnippetHeaderModel();
        v40 = *(_QWORD *)(v39 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48))(a2, 1, v39))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          v217 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v217 - 8) + 16))(a1, a2, v217);
          v218 = *(int *)(v39 + 20);
          v219 = (uint64_t *)((char *)a1 + v218);
          v220 = (uint64_t *)((char *)a2 + v218);
          v221 = v220[1];
          *v219 = *v220;
          v219[1] = v221;
          v222 = *(int *)(v39 + 24);
          v223 = (uint64_t *)((char *)a1 + v222);
          v224 = (uint64_t *)((char *)a2 + v222);
          v225 = v224[1];
          *v223 = *v224;
          v223[1] = v225;
          v226 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v40 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v226(a1, 0, 1, v39);
        }
        v227 = (int *)type metadata accessor for HealthDataLogModel();
        *(uint64_t *)((char *)a1 + v227[5]) = *(uint64_t *)((char *)a2 + v227[5]);
        v228 = v227[6];
        v229 = (uint64_t *)((char *)a1 + v228);
        v230 = (uint64_t *)((char *)a2 + v228);
        v231 = v230[1];
        *v229 = *v230;
        v229[1] = v231;
        v232 = v227[7];
        v233 = (uint64_t *)((char *)a1 + v232);
        v234 = (uint64_t *)((char *)a2 + v232);
        v235 = v234[1];
        *v233 = *v234;
        v233[1] = v235;
        v236 = v227[8];
        v237 = (uint64_t *)((char *)a1 + v236);
        v238 = (uint64_t *)((char *)a2 + v236);
        v239 = v238[1];
        *v237 = *v238;
        v237[1] = v239;
        v240 = v227[9];
        v241 = (uint64_t *)((char *)a1 + v240);
        v242 = (uint64_t *)((char *)a2 + v240);
        v243 = v242[1];
        *v241 = *v242;
        v241[1] = v243;
        v244 = v227[10];
        __dste = (char *)a1 + v244;
        v245 = (char *)a2 + v244;
        v246 = type metadata accessor for AppPunchout();
        v629 = *(_QWORD *)(v246 - 8);
        v634 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v629 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v634(v245, 1, v246))
        {
          v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dste, v245, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v629 + 16))(__dste, v245, v246);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v629 + 56))(__dste, 0, 1, v246);
        }
        v436 = v227[11];
        v437 = (uint64_t *)((char *)a1 + v436);
        v438 = (uint64_t *)((char *)a2 + v436);
        v439 = v438[1];
        *v437 = *v438;
        v437[1] = v439;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 8u:
        v42 = type metadata accessor for AppPunchout();
        v43 = *(_QWORD *)(v42 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(a2, 1, v42))
        {
          v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 16))(a1, a2, v42);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v43 + 56))(a1, 0, 1, v42);
        }
        v248 = (int *)type metadata accessor for GenericQueryModel();
        v249 = v248[5];
        v250 = (char *)a1 + v249;
        v251 = (char *)a2 + v249;
        *(_QWORD *)v250 = *(_QWORD *)v251;
        v250[8] = v251[8];
        v252 = v248[6];
        v253 = (char *)a1 + v252;
        v254 = (char *)a2 + v252;
        *(_QWORD *)v253 = *(_QWORD *)v254;
        v253[8] = v254[8];
        v255 = v248[7];
        v256 = (char *)a1 + v255;
        v257 = (char *)a2 + v255;
        v256[8] = v257[8];
        *(_QWORD *)v256 = *(_QWORD *)v257;
        v258 = v248[8];
        v259 = (char *)a1 + v258;
        v260 = (char *)a2 + v258;
        v259[8] = v260[8];
        *(_QWORD *)v259 = *(_QWORD *)v260;
        v261 = v248[9];
        v262 = (char *)a1 + v261;
        v263 = (char *)a2 + v261;
        v262[8] = v263[8];
        *(_QWORD *)v262 = *(_QWORD *)v263;
        v264 = v248[10];
        v265 = (char *)a1 + v264;
        v266 = (char *)a2 + v264;
        v267 = type metadata accessor for SpeakableString();
        v268 = *(_QWORD *)(v267 - 8);
        v625 = v268;
        v630 = v267;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v268 + 48))(v266, 1, v267))
        {
          v269 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v265, v266, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v265, v266, v267);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v265, 0, 1, v267);
        }
        v440 = v248[11];
        v441 = (uint64_t *)((char *)a1 + v440);
        v442 = (uint64_t *)((char *)a2 + v440);
        v637 = v442[1];
        *v441 = *v442;
        v441[1] = v637;
        v443 = v248[12];
        v444 = (uint64_t *)((char *)a1 + v443);
        v445 = (uint64_t *)((char *)a2 + v443);
        v446 = v445[1];
        *v444 = *v445;
        v444[1] = v446;
        v447 = v248[13];
        v448 = (uint64_t *)((char *)a1 + v447);
        v449 = (uint64_t *)((char *)a2 + v447);
        v450 = v449[1];
        *v448 = *v449;
        v448[1] = v450;
        v451 = v248[14];
        v452 = (uint64_t *)((char *)a1 + v451);
        v453 = (uint64_t *)((char *)a2 + v451);
        v454 = v453[1];
        *v452 = *v453;
        v452[1] = v454;
        v455 = v248[15];
        v456 = (uint64_t *)((char *)a1 + v455);
        v457 = (uint64_t *)((char *)a2 + v455);
        v458 = v457[1];
        *v456 = *v457;
        v456[1] = v458;
        v459 = v248[16];
        v460 = (uint64_t *)((char *)a1 + v459);
        v461 = (uint64_t *)((char *)a2 + v459);
        v462 = v461[1];
        *v460 = *v461;
        v460[1] = v462;
        v463 = v248[17];
        v464 = (uint64_t *)((char *)a1 + v463);
        v465 = (uint64_t *)((char *)a2 + v463);
        v466 = v465[1];
        *v464 = *v465;
        v464[1] = v466;
        v467 = v248[18];
        __dstg = (char *)a1 + v467;
        v384 = (char *)a2 + v467;
        v468 = type metadata accessor for SnippetHeaderModel();
        v623 = *(_QWORD *)(v468 - 8);
        v469 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v623 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v469(v384, 1, v468))
        {
LABEL_83:
          v470 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstg, v384, *(_QWORD *)(*(_QWORD *)(v470 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v625 + 16))(__dstg, v384, v630);
          v570 = *(int *)(v468 + 20);
          v571 = &__dstg[v570];
          v572 = &v384[v570];
          v573 = *((_QWORD *)v572 + 1);
          *(_QWORD *)v571 = *(_QWORD *)v572;
          *((_QWORD *)v571 + 1) = v573;
          v574 = *(int *)(v468 + 24);
          v575 = &__dstg[v574];
          v576 = &v384[v574];
          v577 = *((_QWORD *)v576 + 1);
          *(_QWORD *)v575 = *(_QWORD *)v576;
          *((_QWORD *)v575 + 1) = v577;
          v578 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v623 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v578(__dstg, 0, 1, v468);
        }
        goto LABEL_103;
      case 9u:
        v45 = type metadata accessor for AppPunchout();
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v46 + 48))(a2, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v46 + 16))(a1, a2, v45);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v46 + 56))(a1, 0, 1, v45);
        }
        v270 = (int *)type metadata accessor for HeightQueryModel();
        v271 = v270[5];
        v272 = (char *)a1 + v271;
        v273 = (char *)a2 + v271;
        *(_QWORD *)v272 = *(_QWORD *)v273;
        v272[8] = v273[8];
        v274 = v270[6];
        v275 = (char *)a1 + v274;
        v276 = (char *)a2 + v274;
        *(_QWORD *)v275 = *(_QWORD *)v276;
        v275[8] = v276[8];
        v277 = v270[7];
        v278 = (char *)a1 + v277;
        v279 = (char *)a2 + v277;
        v278[8] = v279[8];
        *(_QWORD *)v278 = *(_QWORD *)v279;
        v280 = v270[8];
        v281 = (char *)a1 + v280;
        v282 = (char *)a2 + v280;
        v283 = type metadata accessor for SpeakableString();
        v284 = *(_QWORD *)(v283 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v284 + 48))(v282, 1, v283))
        {
          v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v281, v282, v283);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v284 + 56))(v281, 0, 1, v283);
        }
        *((_BYTE *)a1 + v270[9]) = *((_BYTE *)a2 + v270[9]);
        v471 = v270[10];
        v472 = (char *)a1 + v471;
        v473 = (char *)a2 + v471;
        v474 = type metadata accessor for SnippetHeaderModel();
        v475 = *(_QWORD *)(v474 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v475 + 48))(v473, 1, v474))
        {
          v476 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v472, v473, *(_QWORD *)(*(_QWORD *)(v476 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v472, v473, v283);
          v579 = *(int *)(v474 + 20);
          v580 = &v472[v579];
          v581 = &v473[v579];
          v582 = *((_QWORD *)v581 + 1);
          *(_QWORD *)v580 = *(_QWORD *)v581;
          *((_QWORD *)v580 + 1) = v582;
          v583 = *(int *)(v474 + 24);
          v584 = &v472[v583];
          v585 = &v473[v583];
          v586 = *((_QWORD *)v585 + 1);
          *(_QWORD *)v584 = *(_QWORD *)v585;
          *((_QWORD *)v584 + 1) = v586;
          v587 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v475 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v587(v472, 0, 1, v474);
        }
        v588 = v270[11];
        v589 = (uint64_t *)((char *)a1 + v588);
        v590 = (uint64_t *)((char *)a2 + v588);
        v591 = v590[1];
        *v589 = *v590;
        v589[1] = v591;
        v592 = v270[12];
        v593 = (uint64_t *)((char *)a1 + v592);
        v594 = (uint64_t *)((char *)a2 + v592);
        v595 = v594[1];
        *v593 = *v594;
        v593[1] = v595;
        v596 = v270[13];
        v597 = (uint64_t *)((char *)a1 + v596);
        v598 = (uint64_t *)((char *)a2 + v596);
        v599 = v598[1];
        *v597 = *v598;
        v597[1] = v599;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xAu:
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[4] = a2[4];
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        a1[6] = a2[6];
        v48 = a2[8];
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        a1[8] = v48;
        a1[10] = a2[10];
        *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
        v49 = a2[13];
        a1[12] = a2[12];
        a1[13] = v49;
        v50 = a2[15];
        a1[14] = a2[14];
        a1[15] = v50;
        v51 = a2[17];
        a1[16] = a2[16];
        a1[17] = v51;
        v52 = a2[19];
        a1[18] = a2[18];
        a1[19] = v52;
        v53 = a2[21];
        a1[20] = a2[20];
        a1[21] = v53;
        v54 = a2[23];
        a1[22] = a2[22];
        a1[23] = v54;
        v55 = a2[25];
        a1[24] = a2[24];
        a1[25] = v55;
        v56 = a2[27];
        a1[26] = a2[26];
        a1[27] = v56;
        v57 = a2[29];
        a1[28] = a2[28];
        a1[29] = v57;
        *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xBu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v58 = a2[3];
        a1[2] = a2[2];
        a1[3] = v58;
        v59 = a2[5];
        a1[4] = a2[4];
        a1[5] = v59;
        v60 = a2[7];
        a1[6] = a2[6];
        a1[7] = v60;
        v61 = a2[9];
        a1[8] = a2[8];
        a1[9] = v61;
        a1[10] = a2[10];
        v62 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        __dst = (char *)a1 + v62;
        v63 = (char *)a2 + v62;
        v64 = type metadata accessor for SnippetHeaderModel();
        v65 = *(_QWORD *)(v64 - 8);
        v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v66(v63, 1, v64))
          goto LABEL_63;
LABEL_57:
        v286 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v286 - 8) + 16))(__dst, v63, v286);
        v287 = *(int *)(v64 + 20);
        v288 = &__dst[v287];
        v289 = &v63[v287];
        v290 = *((_QWORD *)v289 + 1);
        *(_QWORD *)v288 = *(_QWORD *)v289;
        *((_QWORD *)v288 + 1) = v290;
        v291 = *(int *)(v64 + 24);
        v292 = &__dst[v291];
        v293 = &v63[v291];
        v294 = *((_QWORD *)v293 + 1);
        *(_QWORD *)v292 = *(_QWORD *)v293;
        *((_QWORD *)v292 + 1) = v294;
        v295 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v295(__dst, 0, 1, v64);
        goto LABEL_103;
      case 0xCu:
        v67 = type metadata accessor for AppPunchout();
        v68 = *(_QWORD *)(v67 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v68 + 48))(a2, 1, v67))
        {
          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v68 + 16))(a1, a2, v67);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v68 + 56))(a1, 0, 1, v67);
        }
        v296 = (int *)type metadata accessor for SleepQueryModel();
        v297 = v296[5];
        v298 = (char *)a1 + v297;
        v299 = (char *)a2 + v297;
        v300 = type metadata accessor for SnippetHeaderModel();
        v301 = *(_QWORD *)(v300 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v301 + 48))(v299, 1, v300))
        {
          v302 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
        }
        else
        {
          v477 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v477 - 8) + 16))(v298, v299, v477);
          v478 = *(int *)(v300 + 20);
          v479 = &v298[v478];
          v480 = &v299[v478];
          v481 = *((_QWORD *)v480 + 1);
          *(_QWORD *)v479 = *(_QWORD *)v480;
          *((_QWORD *)v479 + 1) = v481;
          v482 = *(int *)(v300 + 24);
          v483 = &v298[v482];
          v484 = &v299[v482];
          v485 = *((_QWORD *)v484 + 1);
          *(_QWORD *)v483 = *(_QWORD *)v484;
          *((_QWORD *)v483 + 1) = v485;
          v486 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v486(v298, 0, 1, v300);
        }
        v487 = v296[6];
        v488 = (uint64_t *)((char *)a1 + v487);
        v489 = (uint64_t *)((char *)a2 + v487);
        v490 = v489[1];
        *v488 = *v489;
        v488[1] = v490;
        v491 = v296[7];
        v492 = (uint64_t *)((char *)a1 + v491);
        v493 = (uint64_t *)((char *)a2 + v491);
        __dsth = (void *)v493[1];
        *v492 = *v493;
        v492[1] = __dsth;
        v494 = v296[8];
        v495 = (uint64_t *)((char *)a1 + v494);
        v496 = (uint64_t *)((char *)a2 + v494);
        v638 = v496[1];
        *v495 = *v496;
        v495[1] = v638;
        v497 = v296[9];
        v498 = (uint64_t *)((char *)a1 + v497);
        v499 = (uint64_t *)((char *)a2 + v497);
        v500 = v499[1];
        *v498 = *v499;
        v498[1] = v500;
        v501 = v296[10];
        v502 = (uint64_t *)((char *)a1 + v501);
        v503 = (uint64_t *)((char *)a2 + v501);
        v504 = v503[1];
        *v502 = *v503;
        v502[1] = v504;
        *(uint64_t *)((char *)a1 + v296[11]) = *(uint64_t *)((char *)a2 + v296[11]);
        *(uint64_t *)((char *)a1 + v296[12]) = *(uint64_t *)((char *)a2 + v296[12]);
        *(uint64_t *)((char *)a1 + v296[13]) = *(uint64_t *)((char *)a2 + v296[13]);
        *(uint64_t *)((char *)a1 + v296[14]) = *(uint64_t *)((char *)a2 + v296[14]);
        v505 = v296[15];
        v506 = (uint64_t *)((char *)a1 + v505);
        v507 = (uint64_t *)((char *)a2 + v505);
        v508 = v507[1];
        *v506 = *v507;
        v506[1] = v508;
        v509 = v296[16];
        v510 = (uint64_t *)((char *)a1 + v509);
        v511 = (uint64_t *)((char *)a2 + v509);
        v512 = v511[1];
        *v510 = *v511;
        v510[1] = v512;
        v513 = v296[17];
        v514 = (uint64_t *)((char *)a1 + v513);
        v515 = (uint64_t *)((char *)a2 + v513);
        v516 = v515[1];
        *v514 = *v515;
        v514[1] = v516;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xDu:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v70 = a2[2];
        a1[1] = a2[1];
        a1[2] = v70;
        v71 = a2[4];
        a1[3] = a2[3];
        a1[4] = v71;
        v72 = a2[6];
        a1[5] = a2[5];
        a1[6] = v72;
        v73 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        v74 = v73[8];
        __dsta = (char *)a1 + v74;
        v75 = (char *)a2 + v74;
        v76 = type metadata accessor for AppPunchout();
        v77 = *(_QWORD *)(v76 - 8);
        v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v78(v75, 1, v76))
        {
          v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dsta, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(__dsta, v75, v76);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dsta, 0, 1, v76);
        }
        v303 = v73[9];
        v304 = (char *)a1 + v303;
        v305 = (char *)a2 + v303;
        *(_QWORD *)v304 = *(_QWORD *)v305;
        v304[8] = v305[8];
        v306 = v73[10];
        v307 = (uint64_t *)((char *)a1 + v306);
        v308 = (uint64_t *)((char *)a2 + v306);
        v635 = v308[1];
        *v307 = *v308;
        v307[1] = v635;
        v309 = v73[11];
        v310 = (uint64_t *)((char *)a1 + v309);
        v311 = (uint64_t *)((char *)a2 + v309);
        v312 = v311[1];
        *v310 = *v311;
        v310[1] = v312;
        v313 = v73[12];
        v314 = (uint64_t *)((char *)a1 + v313);
        v315 = (uint64_t *)((char *)a2 + v313);
        v316 = v315[1];
        *v314 = *v315;
        v314[1] = v316;
        v317 = v73[13];
        v318 = (uint64_t *)((char *)a1 + v317);
        v319 = (uint64_t *)((char *)a2 + v317);
        v320 = v319[1];
        *v318 = *v319;
        v318[1] = v320;
        *((_BYTE *)a1 + v73[14]) = *((_BYTE *)a2 + v73[14]);
        *((_BYTE *)a1 + v73[15]) = *((_BYTE *)a2 + v73[15]);
        v321 = v73[16];
        v322 = (uint64_t *)((char *)a1 + v321);
        v323 = (uint64_t *)((char *)a2 + v321);
        v324 = v323[1];
        *v322 = *v323;
        v322[1] = v324;
        v325 = v73[17];
        v326 = (uint64_t *)((char *)a1 + v325);
        v327 = (uint64_t *)((char *)a2 + v325);
        v328 = v327[1];
        *v326 = *v327;
        v326[1] = v328;
        v329 = v73[18];
        v330 = (uint64_t *)((char *)a1 + v329);
        v331 = (uint64_t *)((char *)a2 + v329);
        v332 = v331[1];
        *v330 = *v331;
        v330[1] = v332;
        v333 = v73[19];
        __dst = (char *)a1 + v333;
        v63 = (char *)a2 + v333;
        v334 = type metadata accessor for SnippetHeaderModel();
        v631 = *(_QWORD *)(v334 - 8);
        v335 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v631 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v335(v63, 1, v334))
        {
LABEL_63:
          v336 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dst, v63, *(_QWORD *)(*(_QWORD *)(v336 - 8) + 64));
        }
        else
        {
          v517 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v517 - 8) + 16))(__dst, v63, v517);
          v518 = *(int *)(v334 + 20);
          v519 = &__dst[v518];
          v520 = &v63[v518];
          v521 = *((_QWORD *)v520 + 1);
          *(_QWORD *)v519 = *(_QWORD *)v520;
          *((_QWORD *)v519 + 1) = v521;
          v522 = *(int *)(v334 + 24);
          v523 = &__dst[v522];
          v524 = &v63[v522];
          v525 = *((_QWORD *)v524 + 1);
          *(_QWORD *)v523 = *(_QWORD *)v524;
          *((_QWORD *)v523 + 1) = v525;
          v526 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v631 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v526(__dst, 0, 1, v334);
        }
        goto LABEL_103;
      case 0xEu:
        v80 = type metadata accessor for AppPunchout();
        v81 = *(_QWORD *)(v80 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v81 + 48))(a2, 1, v80))
        {
          v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v81 + 16))(a1, a2, v80);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v81 + 56))(a1, 0, 1, v80);
        }
        v337 = (int *)type metadata accessor for TemperatureQueryModel();
        v338 = v337[5];
        v339 = (char *)a1 + v338;
        v340 = (char *)a2 + v338;
        *(_QWORD *)v339 = *(_QWORD *)v340;
        v339[8] = v340[8];
        v341 = v337[6];
        v342 = (char *)a1 + v341;
        v343 = (char *)a2 + v341;
        *(_QWORD *)v342 = *(_QWORD *)v343;
        v342[8] = v343[8];
        v344 = v337[7];
        v345 = (char *)a1 + v344;
        v346 = (char *)a2 + v344;
        v345[8] = v346[8];
        *(_QWORD *)v345 = *(_QWORD *)v346;
        v347 = v337[8];
        v348 = (char *)a1 + v347;
        v349 = (char *)a2 + v347;
        v348[8] = v349[8];
        *(_QWORD *)v348 = *(_QWORD *)v349;
        v350 = v337[9];
        v351 = (char *)a1 + v350;
        v352 = (char *)a2 + v350;
        v351[8] = v352[8];
        *(_QWORD *)v351 = *(_QWORD *)v352;
        v353 = v337[10];
        v354 = (char *)a1 + v353;
        v355 = (char *)a2 + v353;
        v356 = type metadata accessor for SpeakableString();
        v357 = *(_QWORD *)(v356 - 8);
        __dstf = *(unsigned int (**)(char *, uint64_t, uint64_t))(v357 + 48);
        v636 = v357;
        if (__dstf(v355, 1, v356))
        {
          v358 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v354, v355, *(_QWORD *)(*(_QWORD *)(v358 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v357 + 16))(v354, v355, v356);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v357 + 56))(v354, 0, 1, v356);
        }
        v527 = v337[11];
        v528 = (uint64_t *)((char *)a1 + v527);
        v529 = (uint64_t *)((char *)a2 + v527);
        v530 = v529[1];
        *v528 = *v529;
        v528[1] = v530;
        v531 = v337[12];
        v532 = (uint64_t *)((char *)a1 + v531);
        v533 = (uint64_t *)((char *)a2 + v531);
        v534 = v533[1];
        *v532 = *v533;
        v532[1] = v534;
        v535 = v337[13];
        v536 = (uint64_t *)((char *)a1 + v535);
        v537 = (uint64_t *)((char *)a2 + v535);
        v538 = v537[1];
        *v536 = *v537;
        v536[1] = v538;
        v539 = v337[14];
        v540 = (uint64_t *)((char *)a1 + v539);
        v541 = (uint64_t *)((char *)a2 + v539);
        v542 = v541[1];
        *v540 = *v541;
        v540[1] = v542;
        v543 = v337[15];
        v544 = (uint64_t *)((char *)a1 + v543);
        v545 = (uint64_t *)((char *)a2 + v543);
        v546 = v545[1];
        *v544 = *v545;
        v544[1] = v546;
        v547 = v337[16];
        v548 = (char *)a1 + v547;
        v549 = (char *)a2 + v547;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dstf(v549, 1, v356))
        {
          v550 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v548, v549, *(_QWORD *)(*(_QWORD *)(v550 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v636 + 16))(v548, v549, v356);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v636 + 56))(v548, 0, 1, v356);
        }
        v600 = v337[17];
        v601 = (uint64_t *)((char *)a1 + v600);
        v602 = (uint64_t *)((char *)a2 + v600);
        v603 = v602[1];
        *v601 = *v602;
        v601[1] = v603;
        v604 = v337[18];
        v605 = (char *)a1 + v604;
        v606 = (char *)a2 + v604;
        v607 = type metadata accessor for SnippetHeaderModel();
        v608 = *(_QWORD *)(v607 - 8);
        v609 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v608 + 48);
        swift_bridgeObjectRetain();
        if (v609(v606, 1, v607))
        {
          v610 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v605, v606, *(_QWORD *)(*(_QWORD *)(v610 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v636 + 16))(v605, v606, v356);
          v611 = *(int *)(v607 + 20);
          v612 = &v605[v611];
          v613 = &v606[v611];
          v614 = *((_QWORD *)v613 + 1);
          *(_QWORD *)v612 = *(_QWORD *)v613;
          *((_QWORD *)v612 + 1) = v614;
          v615 = *(int *)(v607 + 24);
          v616 = &v605[v615];
          v617 = &v606[v615];
          v618 = *((_QWORD *)v617 + 1);
          *(_QWORD *)v616 = *(_QWORD *)v617;
          *((_QWORD *)v616 + 1) = v618;
          v619 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v608 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v619(v605, 0, 1, v607);
        }
LABEL_103:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for WellnessSnippets(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t Model;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = type metadata accessor for AppPunchout();
      v4 = *(_QWORD *)(v3 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
        (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
      Model = type metadata accessor for OxygenSaturationQueryModel();
      v6 = a1 + *(int *)(Model + 36);
      v7 = type metadata accessor for SpeakableString();
      v8 = *(_QWORD *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = *(int *)(Model + 64);
      goto LABEL_64;
    case 1:
      v10 = type metadata accessor for AppPunchout();
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      v12 = type metadata accessor for BloodPressureQueryModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = a1 + *(int *)(v12 + 80);
      v14 = type metadata accessor for URL();
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = *(int *)(v12 + 92);
      goto LABEL_55;
    case 2:
      v17 = type metadata accessor for AppPunchout();
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a1, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
      v19 = type metadata accessor for BloodPressureLogModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = a1 + *(int *)(v19 + 32);
      v21 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
      {
        v22 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3:
      v23 = type metadata accessor for AppPunchout();
      v24 = *(_QWORD *)(v23 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(a1, 1, v23))
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
      v25 = type metadata accessor for CycleTrackingLogModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = a1 + *(int *)(v25 + 32);
      v27 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
      {
        v28 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v26, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v29 = a1 + *(int *)(v25 + 36);
      v30 = type metadata accessor for URL();
      v31 = *(_QWORD *)(v30 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
      if ((_DWORD)result)
        return result;
      v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
      v33 = v29;
      v34 = v30;
      return v32(v33, v34);
    case 4:
      swift_bridgeObjectRelease();
      v35 = a1 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
      v34 = type metadata accessor for URL();
      v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8);
      v33 = v35;
      return v32(v33, v34);
    case 5:
      goto LABEL_44;
    case 6:
      swift_bridgeObjectRelease();
      v36 = type metadata accessor for GenericMedCompletedLogModel();
      v37 = a1 + *(int *)(v36 + 24);
      v38 = type metadata accessor for AppPunchout();
      v39 = *(_QWORD *)(v38 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = *(int *)(v36 + 56);
      goto LABEL_55;
    case 7:
      v40 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(a1, 1, v40))
      {
        v41 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(a1, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v42 = type metadata accessor for HealthDataLogModel();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43 = a1 + *(int *)(v42 + 40);
      v44 = type metadata accessor for AppPunchout();
      v45 = *(_QWORD *)(v44 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
      return swift_bridgeObjectRelease();
    case 8:
      v46 = type metadata accessor for AppPunchout();
      v47 = *(_QWORD *)(v46 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(a1, 1, v46))
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a1, v46);
      v48 = (int *)type metadata accessor for GenericQueryModel();
      v49 = a1 + v48[10];
      v7 = type metadata accessor for SpeakableString();
      v8 = *(_QWORD *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v49, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v49, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_63;
    case 9:
      v50 = type metadata accessor for AppPunchout();
      v51 = *(_QWORD *)(v50 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(a1, 1, v50))
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(a1, v50);
      v52 = type metadata accessor for HeightQueryModel();
      v53 = a1 + *(int *)(v52 + 32);
      v54 = type metadata accessor for SpeakableString();
      v55 = *(_QWORD *)(v54 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
      v56 = a1 + *(int *)(v52 + 40);
      v57 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v56, 1, v57))
      {
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 10:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 11:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      goto LABEL_55;
    case 12:
      v58 = type metadata accessor for AppPunchout();
      v59 = *(_QWORD *)(v58 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(a1, 1, v58))
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(a1, v58);
      v60 = a1 + *(int *)(type metadata accessor for SleepQueryModel() + 20);
      v61 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v60, 1, v61))
      {
        v62 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v60, v62);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = type metadata accessor for SpecificMedCompletedLogModel();
      v64 = a1 + *(int *)(v63 + 32);
      v65 = type metadata accessor for AppPunchout();
      v66 = *(_QWORD *)(v65 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = *(int *)(v63 + 76);
LABEL_55:
      v67 = a1 + v16;
      v68 = type metadata accessor for SnippetHeaderModel();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v67, 1, v68);
      if ((_DWORD)result)
        return result;
      v69 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v67, v69);
      swift_bridgeObjectRelease();
      break;
    case 14:
      v70 = type metadata accessor for AppPunchout();
      v71 = *(_QWORD *)(v70 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(a1, 1, v70))
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(a1, v70);
      v48 = (int *)type metadata accessor for TemperatureQueryModel();
      v72 = a1 + v48[10];
      v7 = type metadata accessor for SpeakableString();
      v8 = *(_QWORD *)(v7 - 8);
      v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
      if (!v73(v72, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v72, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v74 = a1 + v48[16];
      if (!v73(v74, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v74, v7);
LABEL_63:
      swift_bridgeObjectRelease();
      v9 = v48[18];
LABEL_64:
      v75 = a1 + v9;
      v76 = type metadata accessor for SnippetHeaderModel();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v75, 1, v76);
      if ((_DWORD)result)
        return result;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v75, v7);
      swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for WellnessSnippets(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *Model;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int (*v171)(char *, uint64_t, uint64_t);
  uint64_t v172;
  int *v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int (*v190)(char *, uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int (*v213)(char *, uint64_t, uint64_t);
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  void (*v223)(_QWORD *, _QWORD, uint64_t, uint64_t);
  int *v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  int *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  void (*v292)(char *, _QWORD, uint64_t, uint64_t);
  int *v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int (*v332)(char *, uint64_t, uint64_t);
  uint64_t v333;
  int *v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  char *v339;
  char *v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  uint64_t v382;
  unsigned int (*v383)(char *, uint64_t, uint64_t);
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int (*v398)(char *, uint64_t, uint64_t);
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  void (*v409)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  uint64_t v426;
  void (*v427)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  uint64_t v441;
  _QWORD *v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  _QWORD *v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  uint64_t v460;
  uint64_t v461;
  _QWORD *v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unsigned int (*v467)(char *, uint64_t, uint64_t);
  uint64_t v468;
  char *v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  char *v481;
  uint64_t v482;
  void (*v483)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v484;
  _QWORD *v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  _QWORD *v490;
  uint64_t v491;
  _QWORD *v492;
  _QWORD *v493;
  uint64_t v494;
  _QWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  _QWORD *v500;
  uint64_t v501;
  uint64_t v502;
  _QWORD *v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  _QWORD *v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  _QWORD *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  char *v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  char *v521;
  uint64_t v522;
  void (*v523)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v524;
  _QWORD *v525;
  _QWORD *v526;
  uint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  _QWORD *v530;
  uint64_t v531;
  uint64_t v532;
  _QWORD *v533;
  _QWORD *v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  _QWORD *v541;
  _QWORD *v542;
  uint64_t v543;
  uint64_t v544;
  char *v545;
  char *v546;
  uint64_t v547;
  uint64_t v548;
  char *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  char *v554;
  uint64_t v555;
  void (*v556)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v557;
  uint64_t v558;
  char *v559;
  char *v560;
  uint64_t v561;
  uint64_t v562;
  char *v563;
  char *v564;
  uint64_t v565;
  void (*v566)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v567;
  char *v568;
  char *v569;
  uint64_t v570;
  uint64_t v571;
  char *v572;
  char *v573;
  uint64_t v574;
  void (*v575)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v576;
  char *v577;
  char *v578;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  char *v582;
  uint64_t v583;
  void (*v584)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v585;
  _QWORD *v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  _QWORD *v590;
  _QWORD *v591;
  uint64_t v592;
  uint64_t v593;
  _QWORD *v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  _QWORD *v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t v601;
  char *v602;
  char *v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int (*v606)(char *, uint64_t, uint64_t);
  uint64_t v607;
  uint64_t v608;
  char *v609;
  char *v610;
  uint64_t v611;
  uint64_t v612;
  char *v613;
  char *v614;
  uint64_t v615;
  void (*v616)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v618;
  unsigned int (*v619)(char *, uint64_t, uint64_t);
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int (*v632)(char *, uint64_t, uint64_t);
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  char *__dst;
  char *__dsta;
  char *__dstb;
  char *__dstc;
  char *__dstd;
  char *__dste;
  unsigned int (*__dstf)(char *, uint64_t, uint64_t);
  char *__dstg;
  void *__dsth;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for AppPunchout();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
      v81 = Model[5];
      v82 = (char *)a1 + v81;
      v83 = (char *)a2 + v81;
      *(_QWORD *)v82 = *(_QWORD *)v83;
      v82[8] = v83[8];
      v84 = Model[6];
      v85 = (char *)a1 + v84;
      v86 = (char *)a2 + v84;
      *(_QWORD *)v85 = *(_QWORD *)v86;
      v85[8] = v86[8];
      v87 = Model[7];
      v88 = (char *)a1 + v87;
      v89 = (char *)a2 + v87;
      v88[8] = v89[8];
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v90 = Model[8];
      v91 = (char *)a1 + v90;
      v92 = (char *)a2 + v90;
      v91[8] = v92[8];
      *(_QWORD *)v91 = *(_QWORD *)v92;
      v93 = Model[9];
      v94 = (char *)a1 + v93;
      v95 = (char *)a2 + v93;
      v96 = type metadata accessor for SpeakableString();
      v97 = *(_QWORD *)(v96 - 8);
      v625 = v97;
      v630 = v96;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
      {
        v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v94, v95, v96);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      }
      v356 = Model[10];
      v357 = (_QWORD *)((char *)a1 + v356);
      v358 = (_QWORD *)((char *)a2 + v356);
      v359 = v358[1];
      *v357 = *v358;
      v357[1] = v359;
      v360 = Model[11];
      v361 = (_QWORD *)((char *)a1 + v360);
      v362 = (_QWORD *)((char *)a2 + v360);
      v363 = v362[1];
      *v361 = *v362;
      v361[1] = v363;
      v364 = Model[12];
      v365 = (_QWORD *)((char *)a1 + v364);
      v366 = (_QWORD *)((char *)a2 + v364);
      v367 = v366[1];
      *v365 = *v366;
      v365[1] = v367;
      v368 = Model[13];
      v369 = (_QWORD *)((char *)a1 + v368);
      v370 = (_QWORD *)((char *)a2 + v368);
      v371 = v370[1];
      *v369 = *v370;
      v369[1] = v371;
      v372 = Model[14];
      v373 = (_QWORD *)((char *)a1 + v372);
      v374 = (_QWORD *)((char *)a2 + v372);
      v375 = v374[1];
      *v373 = *v374;
      v373[1] = v375;
      v376 = Model[15];
      v377 = (_QWORD *)((char *)a1 + v376);
      v378 = (_QWORD *)((char *)a2 + v376);
      v379 = v378[1];
      *v377 = *v378;
      v377[1] = v379;
      v380 = Model[16];
      __dstg = (char *)a1 + v380;
      v381 = (char *)a2 + v380;
      v382 = type metadata accessor for SnippetHeaderModel();
      v624 = *(_QWORD *)(v382 - 8);
      v383 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v624 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v383(v381, 1, v382))
        goto LABEL_66;
      (*(void (**)(char *, char *, uint64_t))(v625 + 16))(__dstg, v381, v630);
      v548 = *(int *)(v382 + 20);
      v549 = &__dstg[v548];
      v550 = &v381[v548];
      v551 = *((_QWORD *)v550 + 1);
      *(_QWORD *)v549 = *(_QWORD *)v550;
      *((_QWORD *)v549 + 1) = v551;
      v552 = *(int *)(v382 + 24);
      v553 = &__dstg[v552];
      v554 = &v381[v552];
      v555 = *((_QWORD *)v554 + 1);
      *(_QWORD *)v553 = *(_QWORD *)v554;
      *((_QWORD *)v553 + 1) = v555;
      v556 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v624 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v556(__dstg, 0, 1, v382);
      goto LABEL_100;
    case 1u:
      v9 = type metadata accessor for AppPunchout();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      v99 = (int *)type metadata accessor for BloodPressureQueryModel();
      v100 = v99[5];
      v101 = (char *)a1 + v100;
      v102 = (char *)a2 + v100;
      *(_QWORD *)v101 = *(_QWORD *)v102;
      v101[8] = v102[8];
      v103 = v99[6];
      v104 = (char *)a1 + v103;
      v105 = (char *)a2 + v103;
      *(_QWORD *)v104 = *(_QWORD *)v105;
      v104[8] = v105[8];
      v106 = v99[7];
      v107 = (char *)a1 + v106;
      v108 = (char *)a2 + v106;
      v107[8] = v108[8];
      *(_QWORD *)v107 = *(_QWORD *)v108;
      v109 = v99[8];
      v110 = (char *)a1 + v109;
      v111 = (char *)a2 + v109;
      v110[8] = v111[8];
      *(_QWORD *)v110 = *(_QWORD *)v111;
      v112 = v99[9];
      v113 = (char *)a1 + v112;
      v114 = (char *)a2 + v112;
      v113[8] = v114[8];
      *(_QWORD *)v113 = *(_QWORD *)v114;
      v115 = v99[10];
      v116 = (char *)a1 + v115;
      v117 = (char *)a2 + v115;
      *(_QWORD *)v116 = *(_QWORD *)v117;
      v116[8] = v117[8];
      v118 = v99[11];
      v119 = (_QWORD *)((char *)a1 + v118);
      v120 = (_QWORD *)((char *)a2 + v118);
      v631 = v120[1];
      *v119 = *v120;
      v119[1] = v631;
      v121 = v99[12];
      v122 = (_QWORD *)((char *)a1 + v121);
      v123 = (_QWORD *)((char *)a2 + v121);
      v626 = v123[1];
      *v122 = *v123;
      v122[1] = v626;
      v124 = v99[13];
      v125 = (_QWORD *)((char *)a1 + v124);
      v126 = (_QWORD *)((char *)a2 + v124);
      v622 = v126[1];
      *v125 = *v126;
      v125[1] = v622;
      v127 = v99[14];
      v128 = (_QWORD *)((char *)a1 + v127);
      v129 = (_QWORD *)((char *)a2 + v127);
      v620 = v129[1];
      *v128 = *v129;
      v128[1] = v620;
      v130 = v99[15];
      v131 = (_QWORD *)((char *)a1 + v130);
      v132 = (_QWORD *)((char *)a2 + v130);
      v133 = v132[1];
      *v131 = *v132;
      v131[1] = v133;
      v134 = v99[16];
      v135 = (_QWORD *)((char *)a1 + v134);
      v136 = (_QWORD *)((char *)a2 + v134);
      v137 = v136[1];
      *v135 = *v136;
      v135[1] = v137;
      v138 = v99[17];
      v139 = (_QWORD *)((char *)a1 + v138);
      v140 = (_QWORD *)((char *)a2 + v138);
      v141 = v140[1];
      *v139 = *v140;
      v139[1] = v141;
      v142 = v99[18];
      v143 = (_QWORD *)((char *)a1 + v142);
      v144 = (_QWORD *)((char *)a2 + v142);
      v145 = v144[1];
      *v143 = *v144;
      v143[1] = v145;
      v146 = v99[19];
      v147 = (_QWORD *)((char *)a1 + v146);
      v148 = (_QWORD *)((char *)a2 + v146);
      v149 = v148[1];
      *v147 = *v148;
      v147[1] = v149;
      v150 = v99[20];
      __dstb = (char *)a1 + v150;
      v151 = (char *)a2 + v150;
      v152 = type metadata accessor for URL();
      v618 = *(_QWORD *)(v152 - 8);
      v619 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v618 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v619(v151, 1, v152))
      {
        v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dstb, v151, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v618 + 16))(__dstb, v151, v152);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v618 + 56))(__dstb, 0, 1, v152);
      }
      v385 = v99[21];
      v386 = (_QWORD *)((char *)a1 + v385);
      v387 = (_QWORD *)((char *)a2 + v385);
      v388 = v387[1];
      *v386 = *v387;
      v386[1] = v388;
      v389 = v99[22];
      v390 = (_QWORD *)((char *)a1 + v389);
      v391 = (_QWORD *)((char *)a2 + v389);
      v392 = v391[1];
      *v390 = *v391;
      v390[1] = v392;
      v393 = v99[23];
      v394 = (char *)a1 + v393;
      v395 = (char *)a2 + v393;
      v396 = type metadata accessor for SnippetHeaderModel();
      v397 = *(_QWORD *)(v396 - 8);
      v398 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v397 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v398(v395, 1, v396))
      {
        v399 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v394, v395, *(_QWORD *)(*(_QWORD *)(v399 - 8) + 64));
      }
      else
      {
        v557 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v557 - 8) + 16))(v394, v395, v557);
        v558 = *(int *)(v396 + 20);
        v559 = &v394[v558];
        v560 = &v395[v558];
        v561 = *((_QWORD *)v560 + 1);
        *(_QWORD *)v559 = *(_QWORD *)v560;
        *((_QWORD *)v559 + 1) = v561;
        v562 = *(int *)(v396 + 24);
        v563 = &v394[v562];
        v564 = &v395[v562];
        v565 = *((_QWORD *)v564 + 1);
        *(_QWORD *)v563 = *(_QWORD *)v564;
        *((_QWORD *)v563 + 1) = v565;
        v566 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v397 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v566(v394, 0, 1, v396);
      }
      goto LABEL_100;
    case 2u:
      v12 = type metadata accessor for AppPunchout();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      v154 = (int *)type metadata accessor for BloodPressureLogModel();
      v155 = v154[5];
      v156 = (_QWORD *)((char *)a1 + v155);
      v157 = (_QWORD *)((char *)a2 + v155);
      v158 = v157[1];
      *v156 = *v157;
      v156[1] = v158;
      v159 = v154[6];
      v160 = (_QWORD *)((char *)a1 + v159);
      v161 = (_QWORD *)((char *)a2 + v159);
      v162 = v161[1];
      *v160 = *v161;
      v160[1] = v162;
      v163 = v154[7];
      v164 = (_QWORD *)((char *)a1 + v163);
      v165 = (_QWORD *)((char *)a2 + v163);
      v166 = v165[1];
      *v164 = *v165;
      v164[1] = v166;
      v167 = v154[8];
      __dstc = (char *)a1 + v167;
      v168 = (char *)a2 + v167;
      v169 = type metadata accessor for SnippetHeaderModel();
      v170 = *(_QWORD *)(v169 - 8);
      v171 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v171(v168, 1, v169))
      {
        v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dstc, v168, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
      }
      else
      {
        v400 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v400 - 8) + 16))(__dstc, v168, v400);
        v401 = *(int *)(v169 + 20);
        v402 = &__dstc[v401];
        v403 = &v168[v401];
        v404 = *((_QWORD *)v403 + 1);
        *(_QWORD *)v402 = *(_QWORD *)v403;
        *((_QWORD *)v402 + 1) = v404;
        v405 = *(int *)(v169 + 24);
        v406 = &__dstc[v405];
        v407 = &v168[v405];
        v408 = *((_QWORD *)v407 + 1);
        *(_QWORD *)v406 = *(_QWORD *)v407;
        *((_QWORD *)v406 + 1) = v408;
        v409 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v409(__dstc, 0, 1, v169);
      }
      v410 = v154[9];
      v411 = (_QWORD *)((char *)a1 + v410);
      v412 = (_QWORD *)((char *)a2 + v410);
      v413 = v412[1];
      *v411 = *v412;
      v411[1] = v413;
      v414 = v154[10];
      v415 = (_QWORD *)((char *)a1 + v414);
      v416 = (_QWORD *)((char *)a2 + v414);
      v417 = v416[1];
      *v415 = *v416;
      v415[1] = v417;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 3u:
      v15 = type metadata accessor for AppPunchout();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v16 + 16))(a1, a2, v15);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      v173 = (int *)type metadata accessor for CycleTrackingLogModel();
      v174 = v173[5];
      v175 = (_QWORD *)((char *)a1 + v174);
      v176 = (_QWORD *)((char *)a2 + v174);
      v177 = v176[1];
      *v175 = *v176;
      v175[1] = v177;
      v178 = v173[6];
      v179 = (_QWORD *)((char *)a1 + v178);
      v180 = (_QWORD *)((char *)a2 + v178);
      v181 = v180[1];
      *v179 = *v180;
      v179[1] = v181;
      v182 = v173[7];
      v183 = (_QWORD *)((char *)a1 + v182);
      v184 = (_QWORD *)((char *)a2 + v182);
      v185 = v184[1];
      *v183 = *v184;
      v183[1] = v185;
      v186 = v173[8];
      __dstd = (char *)a1 + v186;
      v187 = (char *)a2 + v186;
      v188 = type metadata accessor for SnippetHeaderModel();
      v189 = *(_QWORD *)(v188 - 8);
      v190 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v190(v187, 1, v188))
      {
        v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dstd, v187, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
      }
      else
      {
        v418 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v418 - 8) + 16))(__dstd, v187, v418);
        v419 = *(int *)(v188 + 20);
        v420 = &__dstd[v419];
        v421 = &v187[v419];
        v422 = *((_QWORD *)v421 + 1);
        *(_QWORD *)v420 = *(_QWORD *)v421;
        *((_QWORD *)v420 + 1) = v422;
        v423 = *(int *)(v188 + 24);
        v424 = &__dstd[v423];
        v425 = &v187[v423];
        v426 = *((_QWORD *)v425 + 1);
        *(_QWORD *)v424 = *(_QWORD *)v425;
        *((_QWORD *)v424 + 1) = v426;
        v427 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v427(__dstd, 0, 1, v188);
      }
      v428 = v173[9];
      v429 = (char *)a1 + v428;
      v430 = (char *)a2 + v428;
      v431 = type metadata accessor for URL();
      v432 = *(_QWORD *)(v431 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v432 + 48))(v430, 1, v431))
      {
        v433 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v429, v430, *(_QWORD *)(*(_QWORD *)(v433 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v432 + 16))(v429, v430, v431);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v432 + 56))(v429, 0, 1, v431);
      }
      goto LABEL_100;
    case 4u:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      v19 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for URL();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v20, v21, v22);
      goto LABEL_100;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v26 = a2[5];
      a1[4] = a2[4];
      a1[5] = v26;
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 6u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v27 = a2[2];
      a1[1] = a2[1];
      a1[2] = v27;
      v28 = (int *)type metadata accessor for GenericMedCompletedLogModel();
      v29 = v28[6];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = type metadata accessor for AppPunchout();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      *((_BYTE *)a1 + v28[7]) = *((_BYTE *)a2 + v28[7]);
      v192 = v28[8];
      v193 = (_QWORD *)((char *)a1 + v192);
      v194 = (_QWORD *)((char *)a2 + v192);
      v195 = v194[1];
      *v193 = *v194;
      v193[1] = v195;
      *((_BYTE *)a1 + v28[9]) = *((_BYTE *)a2 + v28[9]);
      v196 = v28[10];
      v197 = (_QWORD *)((char *)a1 + v196);
      v198 = (_QWORD *)((char *)a2 + v196);
      v199 = v198[1];
      *v197 = *v198;
      v197[1] = v199;
      v200 = v28[11];
      v201 = (_QWORD *)((char *)a1 + v200);
      v202 = (_QWORD *)((char *)a2 + v200);
      v203 = v202[1];
      *v201 = *v202;
      v201[1] = v203;
      v204 = v28[12];
      v205 = (_QWORD *)((char *)a1 + v204);
      v206 = (_QWORD *)((char *)a2 + v204);
      v207 = v206[1];
      *v205 = *v206;
      v205[1] = v207;
      v208 = v28[13];
      v209 = (_QWORD *)((char *)a1 + v208);
      v210 = (_QWORD *)((char *)a2 + v208);
      v211 = v210[1];
      *v209 = *v210;
      v209[1] = v211;
      v212 = v28[14];
      __dst = (char *)a1 + v212;
      v60 = (char *)a2 + v212;
      v61 = type metadata accessor for SnippetHeaderModel();
      v62 = *(_QWORD *)(v61 - 8);
      v213 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v213(v60, 1, v61))
        goto LABEL_60;
      goto LABEL_54;
    case 7u:
      v36 = type metadata accessor for SnippetHeaderModel();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v37 + 48))(a2, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v214 = type metadata accessor for SpeakableString();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v214 - 8) + 16))(a1, a2, v214);
        v215 = *(int *)(v36 + 20);
        v216 = (_QWORD *)((char *)a1 + v215);
        v217 = (_QWORD *)((char *)a2 + v215);
        v218 = v217[1];
        *v216 = *v217;
        v216[1] = v218;
        v219 = *(int *)(v36 + 24);
        v220 = (_QWORD *)((char *)a1 + v219);
        v221 = (_QWORD *)((char *)a2 + v219);
        v222 = v221[1];
        *v220 = *v221;
        v220[1] = v222;
        v223 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v223(a1, 0, 1, v36);
      }
      v224 = (int *)type metadata accessor for HealthDataLogModel();
      *(_QWORD *)((char *)a1 + v224[5]) = *(_QWORD *)((char *)a2 + v224[5]);
      v225 = v224[6];
      v226 = (_QWORD *)((char *)a1 + v225);
      v227 = (_QWORD *)((char *)a2 + v225);
      v228 = v227[1];
      *v226 = *v227;
      v226[1] = v228;
      v229 = v224[7];
      v230 = (_QWORD *)((char *)a1 + v229);
      v231 = (_QWORD *)((char *)a2 + v229);
      v232 = v231[1];
      *v230 = *v231;
      v230[1] = v232;
      v233 = v224[8];
      v234 = (_QWORD *)((char *)a1 + v233);
      v235 = (_QWORD *)((char *)a2 + v233);
      v236 = v235[1];
      *v234 = *v235;
      v234[1] = v236;
      v237 = v224[9];
      v238 = (_QWORD *)((char *)a1 + v237);
      v239 = (_QWORD *)((char *)a2 + v237);
      v240 = v239[1];
      *v238 = *v239;
      v238[1] = v240;
      v241 = v224[10];
      __dste = (char *)a1 + v241;
      v242 = (char *)a2 + v241;
      v243 = type metadata accessor for AppPunchout();
      v627 = *(_QWORD *)(v243 - 8);
      v632 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v627 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v632(v242, 1, v243))
      {
        v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(__dste, v242, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v627 + 16))(__dste, v242, v243);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v627 + 56))(__dste, 0, 1, v243);
      }
      v434 = v224[11];
      v435 = (_QWORD *)((char *)a1 + v434);
      v436 = (_QWORD *)((char *)a2 + v434);
      v437 = v436[1];
      *v435 = *v436;
      v435[1] = v437;
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 8u:
      v39 = type metadata accessor for AppPunchout();
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(a2, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v40 + 16))(a1, a2, v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(a1, 0, 1, v39);
      }
      v245 = (int *)type metadata accessor for GenericQueryModel();
      v246 = v245[5];
      v247 = (char *)a1 + v246;
      v248 = (char *)a2 + v246;
      *(_QWORD *)v247 = *(_QWORD *)v248;
      v247[8] = v248[8];
      v249 = v245[6];
      v250 = (char *)a1 + v249;
      v251 = (char *)a2 + v249;
      *(_QWORD *)v250 = *(_QWORD *)v251;
      v250[8] = v251[8];
      v252 = v245[7];
      v253 = (char *)a1 + v252;
      v254 = (char *)a2 + v252;
      v253[8] = v254[8];
      *(_QWORD *)v253 = *(_QWORD *)v254;
      v255 = v245[8];
      v256 = (char *)a1 + v255;
      v257 = (char *)a2 + v255;
      v256[8] = v257[8];
      *(_QWORD *)v256 = *(_QWORD *)v257;
      v258 = v245[9];
      v259 = (char *)a1 + v258;
      v260 = (char *)a2 + v258;
      v259[8] = v260[8];
      *(_QWORD *)v259 = *(_QWORD *)v260;
      v261 = v245[10];
      v262 = (char *)a1 + v261;
      v263 = (char *)a2 + v261;
      v264 = type metadata accessor for SpeakableString();
      v265 = *(_QWORD *)(v264 - 8);
      v623 = v265;
      v628 = v264;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v265 + 48))(v263, 1, v264))
      {
        v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v265 + 16))(v262, v263, v264);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v265 + 56))(v262, 0, 1, v264);
      }
      v438 = v245[11];
      v439 = (_QWORD *)((char *)a1 + v438);
      v440 = (_QWORD *)((char *)a2 + v438);
      v635 = v440[1];
      *v439 = *v440;
      v439[1] = v635;
      v441 = v245[12];
      v442 = (_QWORD *)((char *)a1 + v441);
      v443 = (_QWORD *)((char *)a2 + v441);
      v444 = v443[1];
      *v442 = *v443;
      v442[1] = v444;
      v445 = v245[13];
      v446 = (_QWORD *)((char *)a1 + v445);
      v447 = (_QWORD *)((char *)a2 + v445);
      v448 = v447[1];
      *v446 = *v447;
      v446[1] = v448;
      v449 = v245[14];
      v450 = (_QWORD *)((char *)a1 + v449);
      v451 = (_QWORD *)((char *)a2 + v449);
      v452 = v451[1];
      *v450 = *v451;
      v450[1] = v452;
      v453 = v245[15];
      v454 = (_QWORD *)((char *)a1 + v453);
      v455 = (_QWORD *)((char *)a2 + v453);
      v456 = v455[1];
      *v454 = *v455;
      v454[1] = v456;
      v457 = v245[16];
      v458 = (_QWORD *)((char *)a1 + v457);
      v459 = (_QWORD *)((char *)a2 + v457);
      v460 = v459[1];
      *v458 = *v459;
      v458[1] = v460;
      v461 = v245[17];
      v462 = (_QWORD *)((char *)a1 + v461);
      v463 = (_QWORD *)((char *)a2 + v461);
      v464 = v463[1];
      *v462 = *v463;
      v462[1] = v464;
      v465 = v245[18];
      __dstg = (char *)a1 + v465;
      v381 = (char *)a2 + v465;
      v466 = type metadata accessor for SnippetHeaderModel();
      v621 = *(_QWORD *)(v466 - 8);
      v467 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v621 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v467(v381, 1, v466))
      {
LABEL_66:
        v384 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dstg, v381, *(_QWORD *)(*(_QWORD *)(v384 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v623 + 16))(__dstg, v381, v628);
        v567 = *(int *)(v466 + 20);
        v568 = &__dstg[v567];
        v569 = &v381[v567];
        v570 = *((_QWORD *)v569 + 1);
        *(_QWORD *)v568 = *(_QWORD *)v569;
        *((_QWORD *)v568 + 1) = v570;
        v571 = *(int *)(v466 + 24);
        v572 = &__dstg[v571];
        v573 = &v381[v571];
        v574 = *((_QWORD *)v573 + 1);
        *(_QWORD *)v572 = *(_QWORD *)v573;
        *((_QWORD *)v572 + 1) = v574;
        v575 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v621 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v575(__dstg, 0, 1, v466);
      }
      goto LABEL_100;
    case 9u:
      v42 = type metadata accessor for AppPunchout();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v43 + 48))(a2, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v43 + 16))(a1, a2, v42);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(a1, 0, 1, v42);
      }
      v267 = (int *)type metadata accessor for HeightQueryModel();
      v268 = v267[5];
      v269 = (char *)a1 + v268;
      v270 = (char *)a2 + v268;
      *(_QWORD *)v269 = *(_QWORD *)v270;
      v269[8] = v270[8];
      v271 = v267[6];
      v272 = (char *)a1 + v271;
      v273 = (char *)a2 + v271;
      *(_QWORD *)v272 = *(_QWORD *)v273;
      v272[8] = v273[8];
      v274 = v267[7];
      v275 = (char *)a1 + v274;
      v276 = (char *)a2 + v274;
      v275[8] = v276[8];
      *(_QWORD *)v275 = *(_QWORD *)v276;
      v277 = v267[8];
      v278 = (char *)a1 + v277;
      v279 = (char *)a2 + v277;
      v280 = type metadata accessor for SpeakableString();
      v281 = *(_QWORD *)(v280 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v281 + 48))(v279, 1, v280))
      {
        v282 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v278, v279, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v278, v279, v280);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v281 + 56))(v278, 0, 1, v280);
      }
      *((_BYTE *)a1 + v267[9]) = *((_BYTE *)a2 + v267[9]);
      v468 = v267[10];
      v469 = (char *)a1 + v468;
      v470 = (char *)a2 + v468;
      v471 = type metadata accessor for SnippetHeaderModel();
      v472 = *(_QWORD *)(v471 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v472 + 48))(v470, 1, v471))
      {
        v473 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v469, v470, *(_QWORD *)(*(_QWORD *)(v473 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v469, v470, v280);
        v576 = *(int *)(v471 + 20);
        v577 = &v469[v576];
        v578 = &v470[v576];
        v579 = *((_QWORD *)v578 + 1);
        *(_QWORD *)v577 = *(_QWORD *)v578;
        *((_QWORD *)v577 + 1) = v579;
        v580 = *(int *)(v471 + 24);
        v581 = &v469[v580];
        v582 = &v470[v580];
        v583 = *((_QWORD *)v582 + 1);
        *(_QWORD *)v581 = *(_QWORD *)v582;
        *((_QWORD *)v581 + 1) = v583;
        v584 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v472 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v584(v469, 0, 1, v471);
      }
      v585 = v267[11];
      v586 = (_QWORD *)((char *)a1 + v585);
      v587 = (_QWORD *)((char *)a2 + v585);
      v588 = v587[1];
      *v586 = *v587;
      v586[1] = v588;
      v589 = v267[12];
      v590 = (_QWORD *)((char *)a1 + v589);
      v591 = (_QWORD *)((char *)a2 + v589);
      v592 = v591[1];
      *v590 = *v591;
      v590[1] = v592;
      v593 = v267[13];
      v594 = (_QWORD *)((char *)a1 + v593);
      v595 = (_QWORD *)((char *)a2 + v593);
      v596 = v595[1];
      *v594 = *v595;
      v594[1] = v596;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xAu:
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      a1[4] = a2[4];
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      a1[6] = a2[6];
      v45 = a2[8];
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      a1[8] = v45;
      a1[10] = a2[10];
      *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
      v46 = a2[13];
      a1[12] = a2[12];
      a1[13] = v46;
      v47 = a2[15];
      a1[14] = a2[14];
      a1[15] = v47;
      v48 = a2[17];
      a1[16] = a2[16];
      a1[17] = v48;
      v49 = a2[19];
      a1[18] = a2[18];
      a1[19] = v49;
      v50 = a2[21];
      a1[20] = a2[20];
      a1[21] = v50;
      v51 = a2[23];
      a1[22] = a2[22];
      a1[23] = v51;
      v52 = a2[25];
      a1[24] = a2[24];
      a1[25] = v52;
      v53 = a2[27];
      a1[26] = a2[26];
      a1[27] = v53;
      v54 = a2[29];
      a1[28] = a2[28];
      a1[29] = v54;
      *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xBu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v55 = a2[3];
      a1[2] = a2[2];
      a1[3] = v55;
      v56 = a2[5];
      a1[4] = a2[4];
      a1[5] = v56;
      v57 = a2[7];
      a1[6] = a2[6];
      a1[7] = v57;
      v58 = a2[9];
      a1[8] = a2[8];
      a1[9] = v58;
      a1[10] = a2[10];
      v59 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      __dst = (char *)a1 + v59;
      v60 = (char *)a2 + v59;
      v61 = type metadata accessor for SnippetHeaderModel();
      v62 = *(_QWORD *)(v61 - 8);
      v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v63(v60, 1, v61))
        goto LABEL_60;
LABEL_54:
      v283 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v283 - 8) + 16))(__dst, v60, v283);
      v284 = *(int *)(v61 + 20);
      v285 = &__dst[v284];
      v286 = &v60[v284];
      v287 = *((_QWORD *)v286 + 1);
      *(_QWORD *)v285 = *(_QWORD *)v286;
      *((_QWORD *)v285 + 1) = v287;
      v288 = *(int *)(v61 + 24);
      v289 = &__dst[v288];
      v290 = &v60[v288];
      v291 = *((_QWORD *)v290 + 1);
      *(_QWORD *)v289 = *(_QWORD *)v290;
      *((_QWORD *)v289 + 1) = v291;
      v292 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v292(__dst, 0, 1, v61);
      goto LABEL_100;
    case 0xCu:
      v64 = type metadata accessor for AppPunchout();
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v65 + 48))(a2, 1, v64))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v65 + 16))(a1, a2, v64);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(a1, 0, 1, v64);
      }
      v293 = (int *)type metadata accessor for SleepQueryModel();
      v294 = v293[5];
      v295 = (char *)a1 + v294;
      v296 = (char *)a2 + v294;
      v297 = type metadata accessor for SnippetHeaderModel();
      v298 = *(_QWORD *)(v297 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v298 + 48))(v296, 1, v297))
      {
        v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v295, v296, *(_QWORD *)(*(_QWORD *)(v299 - 8) + 64));
      }
      else
      {
        v474 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v474 - 8) + 16))(v295, v296, v474);
        v475 = *(int *)(v297 + 20);
        v476 = &v295[v475];
        v477 = &v296[v475];
        v478 = *((_QWORD *)v477 + 1);
        *(_QWORD *)v476 = *(_QWORD *)v477;
        *((_QWORD *)v476 + 1) = v478;
        v479 = *(int *)(v297 + 24);
        v480 = &v295[v479];
        v481 = &v296[v479];
        v482 = *((_QWORD *)v481 + 1);
        *(_QWORD *)v480 = *(_QWORD *)v481;
        *((_QWORD *)v480 + 1) = v482;
        v483 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v298 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v483(v295, 0, 1, v297);
      }
      v484 = v293[6];
      v485 = (_QWORD *)((char *)a1 + v484);
      v486 = (_QWORD *)((char *)a2 + v484);
      v487 = v486[1];
      *v485 = *v486;
      v485[1] = v487;
      v488 = v293[7];
      v489 = (_QWORD *)((char *)a1 + v488);
      v490 = (_QWORD *)((char *)a2 + v488);
      __dsth = (void *)v490[1];
      *v489 = *v490;
      v489[1] = __dsth;
      v491 = v293[8];
      v492 = (_QWORD *)((char *)a1 + v491);
      v493 = (_QWORD *)((char *)a2 + v491);
      v636 = v493[1];
      *v492 = *v493;
      v492[1] = v636;
      v494 = v293[9];
      v495 = (_QWORD *)((char *)a1 + v494);
      v496 = (_QWORD *)((char *)a2 + v494);
      v497 = v496[1];
      *v495 = *v496;
      v495[1] = v497;
      v498 = v293[10];
      v499 = (_QWORD *)((char *)a1 + v498);
      v500 = (_QWORD *)((char *)a2 + v498);
      v501 = v500[1];
      *v499 = *v500;
      v499[1] = v501;
      *(_QWORD *)((char *)a1 + v293[11]) = *(_QWORD *)((char *)a2 + v293[11]);
      *(_QWORD *)((char *)a1 + v293[12]) = *(_QWORD *)((char *)a2 + v293[12]);
      *(_QWORD *)((char *)a1 + v293[13]) = *(_QWORD *)((char *)a2 + v293[13]);
      *(_QWORD *)((char *)a1 + v293[14]) = *(_QWORD *)((char *)a2 + v293[14]);
      v502 = v293[15];
      v503 = (_QWORD *)((char *)a1 + v502);
      v504 = (_QWORD *)((char *)a2 + v502);
      v505 = v504[1];
      *v503 = *v504;
      v503[1] = v505;
      v506 = v293[16];
      v507 = (_QWORD *)((char *)a1 + v506);
      v508 = (_QWORD *)((char *)a2 + v506);
      v509 = v508[1];
      *v507 = *v508;
      v507[1] = v509;
      v510 = v293[17];
      v511 = (_QWORD *)((char *)a1 + v510);
      v512 = (_QWORD *)((char *)a2 + v510);
      v513 = v512[1];
      *v511 = *v512;
      v511[1] = v513;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xDu:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v67 = a2[2];
      a1[1] = a2[1];
      a1[2] = v67;
      v68 = a2[4];
      a1[3] = a2[3];
      a1[4] = v68;
      v69 = a2[6];
      a1[5] = a2[5];
      a1[6] = v69;
      v70 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
      v71 = v70[8];
      __dsta = (char *)a1 + v71;
      v72 = (char *)a2 + v71;
      v73 = type metadata accessor for AppPunchout();
      v74 = *(_QWORD *)(v73 - 8);
      v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v75(v72, 1, v73))
      {
        v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(__dsta, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dsta, v72, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(__dsta, 0, 1, v73);
      }
      v300 = v70[9];
      v301 = (char *)a1 + v300;
      v302 = (char *)a2 + v300;
      *(_QWORD *)v301 = *(_QWORD *)v302;
      v301[8] = v302[8];
      v303 = v70[10];
      v304 = (_QWORD *)((char *)a1 + v303);
      v305 = (_QWORD *)((char *)a2 + v303);
      v633 = v305[1];
      *v304 = *v305;
      v304[1] = v633;
      v306 = v70[11];
      v307 = (_QWORD *)((char *)a1 + v306);
      v308 = (_QWORD *)((char *)a2 + v306);
      v309 = v308[1];
      *v307 = *v308;
      v307[1] = v309;
      v310 = v70[12];
      v311 = (_QWORD *)((char *)a1 + v310);
      v312 = (_QWORD *)((char *)a2 + v310);
      v313 = v312[1];
      *v311 = *v312;
      v311[1] = v313;
      v314 = v70[13];
      v315 = (_QWORD *)((char *)a1 + v314);
      v316 = (_QWORD *)((char *)a2 + v314);
      v317 = v316[1];
      *v315 = *v316;
      v315[1] = v317;
      *((_BYTE *)a1 + v70[14]) = *((_BYTE *)a2 + v70[14]);
      *((_BYTE *)a1 + v70[15]) = *((_BYTE *)a2 + v70[15]);
      v318 = v70[16];
      v319 = (_QWORD *)((char *)a1 + v318);
      v320 = (_QWORD *)((char *)a2 + v318);
      v321 = v320[1];
      *v319 = *v320;
      v319[1] = v321;
      v322 = v70[17];
      v323 = (_QWORD *)((char *)a1 + v322);
      v324 = (_QWORD *)((char *)a2 + v322);
      v325 = v324[1];
      *v323 = *v324;
      v323[1] = v325;
      v326 = v70[18];
      v327 = (_QWORD *)((char *)a1 + v326);
      v328 = (_QWORD *)((char *)a2 + v326);
      v329 = v328[1];
      *v327 = *v328;
      v327[1] = v329;
      v330 = v70[19];
      __dst = (char *)a1 + v330;
      v60 = (char *)a2 + v330;
      v331 = type metadata accessor for SnippetHeaderModel();
      v629 = *(_QWORD *)(v331 - 8);
      v332 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v629 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v332(v60, 1, v331))
      {
LABEL_60:
        v333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dst, v60, *(_QWORD *)(*(_QWORD *)(v333 - 8) + 64));
      }
      else
      {
        v514 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v514 - 8) + 16))(__dst, v60, v514);
        v515 = *(int *)(v331 + 20);
        v516 = &__dst[v515];
        v517 = &v60[v515];
        v518 = *((_QWORD *)v517 + 1);
        *(_QWORD *)v516 = *(_QWORD *)v517;
        *((_QWORD *)v516 + 1) = v518;
        v519 = *(int *)(v331 + 24);
        v520 = &__dst[v519];
        v521 = &v60[v519];
        v522 = *((_QWORD *)v521 + 1);
        *(_QWORD *)v520 = *(_QWORD *)v521;
        *((_QWORD *)v520 + 1) = v522;
        v523 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v629 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v523(__dst, 0, 1, v331);
      }
      goto LABEL_100;
    case 0xEu:
      v77 = type metadata accessor for AppPunchout();
      v78 = *(_QWORD *)(v77 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v78 + 48))(a2, 1, v77))
      {
        v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v78 + 16))(a1, a2, v77);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v78 + 56))(a1, 0, 1, v77);
      }
      v334 = (int *)type metadata accessor for TemperatureQueryModel();
      v335 = v334[5];
      v336 = (char *)a1 + v335;
      v337 = (char *)a2 + v335;
      *(_QWORD *)v336 = *(_QWORD *)v337;
      v336[8] = v337[8];
      v338 = v334[6];
      v339 = (char *)a1 + v338;
      v340 = (char *)a2 + v338;
      *(_QWORD *)v339 = *(_QWORD *)v340;
      v339[8] = v340[8];
      v341 = v334[7];
      v342 = (char *)a1 + v341;
      v343 = (char *)a2 + v341;
      v342[8] = v343[8];
      *(_QWORD *)v342 = *(_QWORD *)v343;
      v344 = v334[8];
      v345 = (char *)a1 + v344;
      v346 = (char *)a2 + v344;
      v345[8] = v346[8];
      *(_QWORD *)v345 = *(_QWORD *)v346;
      v347 = v334[9];
      v348 = (char *)a1 + v347;
      v349 = (char *)a2 + v347;
      v348[8] = v349[8];
      *(_QWORD *)v348 = *(_QWORD *)v349;
      v350 = v334[10];
      v351 = (char *)a1 + v350;
      v352 = (char *)a2 + v350;
      v353 = type metadata accessor for SpeakableString();
      v354 = *(_QWORD *)(v353 - 8);
      __dstf = *(unsigned int (**)(char *, uint64_t, uint64_t))(v354 + 48);
      v634 = v354;
      if (__dstf(v352, 1, v353))
      {
        v355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v351, v352, *(_QWORD *)(*(_QWORD *)(v355 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v354 + 16))(v351, v352, v353);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v354 + 56))(v351, 0, 1, v353);
      }
      v524 = v334[11];
      v525 = (_QWORD *)((char *)a1 + v524);
      v526 = (_QWORD *)((char *)a2 + v524);
      v527 = v526[1];
      *v525 = *v526;
      v525[1] = v527;
      v528 = v334[12];
      v529 = (_QWORD *)((char *)a1 + v528);
      v530 = (_QWORD *)((char *)a2 + v528);
      v531 = v530[1];
      *v529 = *v530;
      v529[1] = v531;
      v532 = v334[13];
      v533 = (_QWORD *)((char *)a1 + v532);
      v534 = (_QWORD *)((char *)a2 + v532);
      v535 = v534[1];
      *v533 = *v534;
      v533[1] = v535;
      v536 = v334[14];
      v537 = (_QWORD *)((char *)a1 + v536);
      v538 = (_QWORD *)((char *)a2 + v536);
      v539 = v538[1];
      *v537 = *v538;
      v537[1] = v539;
      v540 = v334[15];
      v541 = (_QWORD *)((char *)a1 + v540);
      v542 = (_QWORD *)((char *)a2 + v540);
      v543 = v542[1];
      *v541 = *v542;
      v541[1] = v543;
      v544 = v334[16];
      v545 = (char *)a1 + v544;
      v546 = (char *)a2 + v544;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__dstf(v546, 1, v353))
      {
        v547 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v545, v546, *(_QWORD *)(*(_QWORD *)(v547 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v634 + 16))(v545, v546, v353);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v634 + 56))(v545, 0, 1, v353);
      }
      v597 = v334[17];
      v598 = (_QWORD *)((char *)a1 + v597);
      v599 = (_QWORD *)((char *)a2 + v597);
      v600 = v599[1];
      *v598 = *v599;
      v598[1] = v600;
      v601 = v334[18];
      v602 = (char *)a1 + v601;
      v603 = (char *)a2 + v601;
      v604 = type metadata accessor for SnippetHeaderModel();
      v605 = *(_QWORD *)(v604 - 8);
      v606 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v605 + 48);
      swift_bridgeObjectRetain();
      if (v606(v603, 1, v604))
      {
        v607 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v602, v603, *(_QWORD *)(*(_QWORD *)(v607 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v634 + 16))(v602, v603, v353);
        v608 = *(int *)(v604 + 20);
        v609 = &v602[v608];
        v610 = &v603[v608];
        v611 = *((_QWORD *)v610 + 1);
        *(_QWORD *)v609 = *(_QWORD *)v610;
        *((_QWORD *)v609 + 1) = v611;
        v612 = *(int *)(v604 + 24);
        v613 = &v602[v612];
        v614 = &v603[v612];
        v615 = *((_QWORD *)v614 + 1);
        *(_QWORD *)v613 = *(_QWORD *)v614;
        *((_QWORD *)v613 + 1) = v615;
        v616 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v605 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v616(v602, 0, 1, v604);
      }
LABEL_100:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for WellnessSnippets(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *Model;
  uint64_t v65;
  char *v66;
  char *v67;
  char v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int (*v157)(char *, uint64_t, uint64_t);
  uint64_t v158;
  int *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int (*v173)(char *, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  unsigned int (*v191)(char *, uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  void (*v199)(_QWORD *, _QWORD, uint64_t, uint64_t);
  int *v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  int *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  char v221;
  uint64_t v222;
  char *v223;
  char *v224;
  char v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  char *v269;
  void (*v270)(char *, _QWORD, uint64_t, uint64_t);
  int *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int (*v305)(char *, uint64_t, uint64_t);
  uint64_t v306;
  int *v307;
  uint64_t v308;
  char *v309;
  char *v310;
  char v311;
  uint64_t v312;
  char *v313;
  char *v314;
  char v315;
  uint64_t v316;
  char *v317;
  char *v318;
  char v319;
  uint64_t v320;
  char *v321;
  char *v322;
  char v323;
  uint64_t v324;
  char *v325;
  char *v326;
  char v327;
  uint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  _QWORD *v339;
  uint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  uint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  unsigned int (*v355)(char *, uint64_t, uint64_t);
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  uint64_t v360;
  _QWORD *v361;
  _QWORD *v362;
  uint64_t v363;
  char *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int (*v368)(char *, uint64_t, uint64_t);
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  char *v375;
  char *v376;
  void (*v377)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  char *v389;
  char *v390;
  void (*v391)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  _QWORD *v403;
  uint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  _QWORD *v409;
  uint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  _QWORD *v414;
  _QWORD *v415;
  uint64_t v416;
  _QWORD *v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD *v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int (*v424)(char *, uint64_t, uint64_t);
  uint64_t v425;
  char *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  uint64_t v435;
  char *v436;
  char *v437;
  void (*v438)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v439;
  _QWORD *v440;
  _QWORD *v441;
  uint64_t v442;
  _QWORD *v443;
  _QWORD *v444;
  uint64_t v445;
  _QWORD *v446;
  _QWORD *v447;
  uint64_t v448;
  _QWORD *v449;
  _QWORD *v450;
  uint64_t v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t v454;
  _QWORD *v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  uint64_t v460;
  _QWORD *v461;
  _QWORD *v462;
  uint64_t v463;
  uint64_t v464;
  char *v465;
  char *v466;
  uint64_t v467;
  char *v468;
  char *v469;
  void (*v470)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v471;
  _QWORD *v472;
  _QWORD *v473;
  uint64_t v474;
  _QWORD *v475;
  _QWORD *v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  uint64_t v480;
  _QWORD *v481;
  _QWORD *v482;
  uint64_t v483;
  _QWORD *v484;
  _QWORD *v485;
  uint64_t v486;
  char *v487;
  char *v488;
  uint64_t v489;
  uint64_t v490;
  char *v491;
  char *v492;
  uint64_t v493;
  char *v494;
  char *v495;
  void (*v496)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v497;
  uint64_t v498;
  char *v499;
  char *v500;
  uint64_t v501;
  char *v502;
  char *v503;
  void (*v504)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v505;
  char *v506;
  char *v507;
  uint64_t v508;
  char *v509;
  char *v510;
  void (*v511)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v512;
  char *v513;
  char *v514;
  uint64_t v515;
  char *v516;
  char *v517;
  void (*v518)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v519;
  _QWORD *v520;
  _QWORD *v521;
  uint64_t v522;
  _QWORD *v523;
  _QWORD *v524;
  uint64_t v525;
  _QWORD *v526;
  _QWORD *v527;
  uint64_t v528;
  _QWORD *v529;
  _QWORD *v530;
  uint64_t v531;
  char *v532;
  char *v533;
  uint64_t v534;
  uint64_t v535;
  unsigned int (*v536)(char *, uint64_t, uint64_t);
  uint64_t v537;
  uint64_t v538;
  char *v539;
  char *v540;
  uint64_t v541;
  char *v542;
  char *v543;
  void (*v544)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v546;
  unsigned int (*v547)(char *, uint64_t, uint64_t);
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unsigned int (*v552)(char *, uint64_t, uint64_t);
  uint64_t v553;
  char *__dst;
  char *__dsta;
  char *__dstb;
  char *__dstc;
  char *__dstd;
  char *__dste;
  unsigned int (*__dstf)(char *, uint64_t, uint64_t);
  char *__dstg;

  if (a1 != a2)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for AppPunchout();
        v7 = *(_QWORD *)(v6 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
        {
          v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        }
        Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        v65 = Model[5];
        v66 = (char *)a1 + v65;
        v67 = (char *)a2 + v65;
        v68 = v67[8];
        *(_QWORD *)v66 = *(_QWORD *)v67;
        v66[8] = v68;
        v69 = Model[6];
        v70 = (char *)a1 + v69;
        v71 = (char *)a2 + v69;
        v72 = v71[8];
        *(_QWORD *)v70 = *(_QWORD *)v71;
        v70[8] = v72;
        v73 = Model[7];
        v74 = (char *)a1 + v73;
        v75 = (char *)a2 + v73;
        v76 = v75[8];
        *(_QWORD *)v74 = *(_QWORD *)v75;
        v74[8] = v76;
        v77 = Model[8];
        v78 = (char *)a1 + v77;
        v79 = (char *)a2 + v77;
        v80 = v79[8];
        *(_QWORD *)v78 = *(_QWORD *)v79;
        v78[8] = v80;
        v81 = Model[9];
        v82 = (char *)a1 + v81;
        v83 = (char *)a2 + v81;
        v84 = type metadata accessor for SpeakableString();
        v85 = *(_QWORD *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v82, v83, v84);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
        }
        v334 = Model[10];
        v335 = (_QWORD *)((char *)a1 + v334);
        v336 = (_QWORD *)((char *)a2 + v334);
        *v335 = *v336;
        v335[1] = v336[1];
        v337 = Model[11];
        v338 = (_QWORD *)((char *)a1 + v337);
        v339 = (_QWORD *)((char *)a2 + v337);
        *v338 = *v339;
        v338[1] = v339[1];
        v340 = Model[12];
        v341 = (_QWORD *)((char *)a1 + v340);
        v342 = (_QWORD *)((char *)a2 + v340);
        *v341 = *v342;
        v341[1] = v342[1];
        v343 = Model[13];
        v344 = (_QWORD *)((char *)a1 + v343);
        v345 = (_QWORD *)((char *)a2 + v343);
        *v344 = *v345;
        v344[1] = v345[1];
        v346 = Model[14];
        v347 = (_QWORD *)((char *)a1 + v346);
        v348 = (_QWORD *)((char *)a2 + v346);
        *v347 = *v348;
        v347[1] = v348[1];
        v349 = Model[15];
        v350 = (_QWORD *)((char *)a1 + v349);
        v351 = (_QWORD *)((char *)a2 + v349);
        *v350 = *v351;
        v350[1] = v351[1];
        v352 = Model[16];
        __dstg = (char *)a1 + v352;
        v353 = (char *)a2 + v352;
        v354 = type metadata accessor for SnippetHeaderModel();
        v549 = *(_QWORD *)(v354 - 8);
        v355 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v549 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v355(v353, 1, v354))
          goto LABEL_67;
        (*(void (**)(char *, char *, uint64_t))(v85 + 16))(__dstg, v353, v84);
        v490 = *(int *)(v354 + 20);
        v491 = &__dstg[v490];
        v492 = &v353[v490];
        *(_QWORD *)v491 = *(_QWORD *)v492;
        *((_QWORD *)v491 + 1) = *((_QWORD *)v492 + 1);
        v493 = *(int *)(v354 + 24);
        v494 = &__dstg[v493];
        v495 = &v353[v493];
        *(_QWORD *)v494 = *(_QWORD *)v495;
        *((_QWORD *)v494 + 1) = *((_QWORD *)v495 + 1);
        v496 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v549 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v496(__dstg, 0, 1, v354);
        goto LABEL_101;
      case 1u:
        v9 = type metadata accessor for AppPunchout();
        v10 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        v87 = (int *)type metadata accessor for BloodPressureQueryModel();
        v88 = v87[5];
        v89 = (char *)a1 + v88;
        v90 = (char *)a2 + v88;
        v91 = v90[8];
        *(_QWORD *)v89 = *(_QWORD *)v90;
        v89[8] = v91;
        v92 = v87[6];
        v93 = (char *)a1 + v92;
        v94 = (char *)a2 + v92;
        v95 = v94[8];
        *(_QWORD *)v93 = *(_QWORD *)v94;
        v93[8] = v95;
        v96 = v87[7];
        v97 = (char *)a1 + v96;
        v98 = (char *)a2 + v96;
        v99 = v98[8];
        *(_QWORD *)v97 = *(_QWORD *)v98;
        v97[8] = v99;
        v100 = v87[8];
        v101 = (char *)a1 + v100;
        v102 = (char *)a2 + v100;
        v103 = v102[8];
        *(_QWORD *)v101 = *(_QWORD *)v102;
        v101[8] = v103;
        v104 = v87[9];
        v105 = (char *)a1 + v104;
        v106 = (char *)a2 + v104;
        v107 = v106[8];
        *(_QWORD *)v105 = *(_QWORD *)v106;
        v105[8] = v107;
        v108 = v87[10];
        v109 = (char *)a1 + v108;
        v110 = (char *)a2 + v108;
        v111 = *(_QWORD *)v110;
        v109[8] = v110[8];
        *(_QWORD *)v109 = v111;
        v112 = v87[11];
        v113 = (_QWORD *)((char *)a1 + v112);
        v114 = (_QWORD *)((char *)a2 + v112);
        *v113 = *v114;
        v113[1] = v114[1];
        v115 = v87[12];
        v116 = (_QWORD *)((char *)a1 + v115);
        v117 = (_QWORD *)((char *)a2 + v115);
        *v116 = *v117;
        v116[1] = v117[1];
        v118 = v87[13];
        v119 = (_QWORD *)((char *)a1 + v118);
        v120 = (_QWORD *)((char *)a2 + v118);
        *v119 = *v120;
        v119[1] = v120[1];
        v121 = v87[14];
        v122 = (_QWORD *)((char *)a1 + v121);
        v123 = (_QWORD *)((char *)a2 + v121);
        *v122 = *v123;
        v122[1] = v123[1];
        v124 = v87[15];
        v125 = (_QWORD *)((char *)a1 + v124);
        v126 = (_QWORD *)((char *)a2 + v124);
        *v125 = *v126;
        v125[1] = v126[1];
        v127 = v87[16];
        v128 = (_QWORD *)((char *)a1 + v127);
        v129 = (_QWORD *)((char *)a2 + v127);
        *v128 = *v129;
        v128[1] = v129[1];
        v130 = v87[17];
        v131 = (_QWORD *)((char *)a1 + v130);
        v132 = (_QWORD *)((char *)a2 + v130);
        *v131 = *v132;
        v131[1] = v132[1];
        v133 = v87[18];
        v134 = (_QWORD *)((char *)a1 + v133);
        v135 = (_QWORD *)((char *)a2 + v133);
        *v134 = *v135;
        v134[1] = v135[1];
        v136 = v87[19];
        v137 = (_QWORD *)((char *)a1 + v136);
        v138 = (_QWORD *)((char *)a2 + v136);
        *v137 = *v138;
        v137[1] = v138[1];
        v139 = v87[20];
        __dstb = (char *)a1 + v139;
        v140 = (char *)a2 + v139;
        v141 = type metadata accessor for URL();
        v546 = *(_QWORD *)(v141 - 8);
        v547 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v546 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v547(v140, 1, v141))
        {
          v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(__dstb, v140, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v546 + 16))(__dstb, v140, v141);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v546 + 56))(__dstb, 0, 1, v141);
        }
        v357 = v87[21];
        v358 = (_QWORD *)((char *)a1 + v357);
        v359 = (_QWORD *)((char *)a2 + v357);
        *v358 = *v359;
        v358[1] = v359[1];
        v360 = v87[22];
        v361 = (_QWORD *)((char *)a1 + v360);
        v362 = (_QWORD *)((char *)a2 + v360);
        *v361 = *v362;
        v361[1] = v362[1];
        v363 = v87[23];
        v364 = (char *)a1 + v363;
        v365 = (char *)a2 + v363;
        v366 = type metadata accessor for SnippetHeaderModel();
        v367 = *(_QWORD *)(v366 - 8);
        v368 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v367 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v368(v365, 1, v366))
        {
          v369 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v364, v365, *(_QWORD *)(*(_QWORD *)(v369 - 8) + 64));
        }
        else
        {
          v497 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v497 - 8) + 16))(v364, v365, v497);
          v498 = *(int *)(v366 + 20);
          v499 = &v364[v498];
          v500 = &v365[v498];
          *(_QWORD *)v499 = *(_QWORD *)v500;
          *((_QWORD *)v499 + 1) = *((_QWORD *)v500 + 1);
          v501 = *(int *)(v366 + 24);
          v502 = &v364[v501];
          v503 = &v365[v501];
          *(_QWORD *)v502 = *(_QWORD *)v503;
          *((_QWORD *)v502 + 1) = *((_QWORD *)v503 + 1);
          v504 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v367 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v504(v364, 0, 1, v366);
        }
        goto LABEL_101;
      case 2u:
        v12 = type metadata accessor for AppPunchout();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16))(a1, a2, v12);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        v143 = (int *)type metadata accessor for BloodPressureLogModel();
        v144 = v143[5];
        v145 = (_QWORD *)((char *)a1 + v144);
        v146 = (_QWORD *)((char *)a2 + v144);
        *v145 = *v146;
        v145[1] = v146[1];
        v147 = v143[6];
        v148 = (_QWORD *)((char *)a1 + v147);
        v149 = (_QWORD *)((char *)a2 + v147);
        *v148 = *v149;
        v148[1] = v149[1];
        v150 = v143[7];
        v151 = (_QWORD *)((char *)a1 + v150);
        v152 = (_QWORD *)((char *)a2 + v150);
        *v151 = *v152;
        v151[1] = v152[1];
        v153 = v143[8];
        __dstc = (char *)a1 + v153;
        v154 = (char *)a2 + v153;
        v155 = type metadata accessor for SnippetHeaderModel();
        v156 = *(_QWORD *)(v155 - 8);
        v157 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v157(v154, 1, v155))
        {
          v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstc, v154, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
        }
        else
        {
          v370 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v370 - 8) + 16))(__dstc, v154, v370);
          v371 = *(int *)(v155 + 20);
          v372 = &__dstc[v371];
          v373 = &v154[v371];
          *(_QWORD *)v372 = *(_QWORD *)v373;
          *((_QWORD *)v372 + 1) = *((_QWORD *)v373 + 1);
          v374 = *(int *)(v155 + 24);
          v375 = &__dstc[v374];
          v376 = &v154[v374];
          *(_QWORD *)v375 = *(_QWORD *)v376;
          *((_QWORD *)v375 + 1) = *((_QWORD *)v376 + 1);
          v377 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v377(__dstc, 0, 1, v155);
        }
        v378 = v143[9];
        v379 = (_QWORD *)((char *)a1 + v378);
        v380 = (_QWORD *)((char *)a2 + v378);
        *v379 = *v380;
        v379[1] = v380[1];
        v381 = v143[10];
        v382 = (_QWORD *)((char *)a1 + v381);
        v383 = (_QWORD *)((char *)a2 + v381);
        *v382 = *v383;
        v382[1] = v383[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 3u:
        v15 = type metadata accessor for AppPunchout();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v16 + 16))(a1, a2, v15);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        v159 = (int *)type metadata accessor for CycleTrackingLogModel();
        v160 = v159[5];
        v161 = (_QWORD *)((char *)a1 + v160);
        v162 = (_QWORD *)((char *)a2 + v160);
        *v161 = *v162;
        v161[1] = v162[1];
        v163 = v159[6];
        v164 = (_QWORD *)((char *)a1 + v163);
        v165 = (_QWORD *)((char *)a2 + v163);
        *v164 = *v165;
        v164[1] = v165[1];
        v166 = v159[7];
        v167 = (_QWORD *)((char *)a1 + v166);
        v168 = (_QWORD *)((char *)a2 + v166);
        *v167 = *v168;
        v167[1] = v168[1];
        v169 = v159[8];
        __dstd = (char *)a1 + v169;
        v170 = (char *)a2 + v169;
        v171 = type metadata accessor for SnippetHeaderModel();
        v172 = *(_QWORD *)(v171 - 8);
        v173 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v172 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v173(v170, 1, v171))
        {
          v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstd, v170, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
        }
        else
        {
          v384 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v384 - 8) + 16))(__dstd, v170, v384);
          v385 = *(int *)(v171 + 20);
          v386 = &__dstd[v385];
          v387 = &v170[v385];
          *(_QWORD *)v386 = *(_QWORD *)v387;
          *((_QWORD *)v386 + 1) = *((_QWORD *)v387 + 1);
          v388 = *(int *)(v171 + 24);
          v389 = &__dstd[v388];
          v390 = &v170[v388];
          *(_QWORD *)v389 = *(_QWORD *)v390;
          *((_QWORD *)v389 + 1) = *((_QWORD *)v390 + 1);
          v391 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v172 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v391(__dstd, 0, 1, v171);
        }
        v392 = v159[9];
        v393 = (char *)a1 + v392;
        v394 = (char *)a2 + v392;
        v395 = type metadata accessor for URL();
        v396 = *(_QWORD *)(v395 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v396 + 48))(v394, 1, v395))
        {
          v397 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v393, v394, *(_QWORD *)(*(_QWORD *)(v397 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v396 + 16))(v393, v394, v395);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v396 + 56))(v393, 0, 1, v395);
        }
        goto LABEL_101;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        v18 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        v19 = (char *)a1 + v18;
        v20 = (char *)a2 + v18;
        v21 = type metadata accessor for URL();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v19, v20, v21);
        goto LABEL_101;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 6u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        v23 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        v24 = v23[6];
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for AppPunchout();
        v28 = *(_QWORD *)(v27 - 8);
        v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
        swift_bridgeObjectRetain();
        if (v29(v26, 1, v27))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        *((_BYTE *)a1 + v23[7]) = *((_BYTE *)a2 + v23[7]);
        v175 = v23[8];
        v176 = (_QWORD *)((char *)a1 + v175);
        v177 = (_QWORD *)((char *)a2 + v175);
        *v176 = *v177;
        v176[1] = v177[1];
        *((_BYTE *)a1 + v23[9]) = *((_BYTE *)a2 + v23[9]);
        v178 = v23[10];
        v179 = (_QWORD *)((char *)a1 + v178);
        v180 = (_QWORD *)((char *)a2 + v178);
        *v179 = *v180;
        v179[1] = v180[1];
        v181 = v23[11];
        v182 = (_QWORD *)((char *)a1 + v181);
        v183 = (_QWORD *)((char *)a2 + v181);
        *v182 = *v183;
        v182[1] = v183[1];
        v184 = v23[12];
        v185 = (_QWORD *)((char *)a1 + v184);
        v186 = (_QWORD *)((char *)a2 + v184);
        *v185 = *v186;
        v185[1] = v186[1];
        v187 = v23[13];
        v188 = (_QWORD *)((char *)a1 + v187);
        v189 = (_QWORD *)((char *)a2 + v187);
        *v188 = *v189;
        v188[1] = v189[1];
        v190 = v23[14];
        __dst = (char *)a1 + v190;
        v47 = (char *)a2 + v190;
        v48 = type metadata accessor for SnippetHeaderModel();
        v49 = *(_QWORD *)(v48 - 8);
        v191 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v191(v47, 1, v48))
          goto LABEL_61;
        goto LABEL_55;
      case 7u:
        v31 = type metadata accessor for SnippetHeaderModel();
        v32 = *(_QWORD *)(v31 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(a2, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          v192 = type metadata accessor for SpeakableString();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v192 - 8) + 16))(a1, a2, v192);
          v193 = *(int *)(v31 + 20);
          v194 = (_QWORD *)((char *)a1 + v193);
          v195 = (_QWORD *)((char *)a2 + v193);
          *v194 = *v195;
          v194[1] = v195[1];
          v196 = *(int *)(v31 + 24);
          v197 = (_QWORD *)((char *)a1 + v196);
          v198 = (_QWORD *)((char *)a2 + v196);
          *v197 = *v198;
          v197[1] = v198[1];
          v199 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v199(a1, 0, 1, v31);
        }
        v200 = (int *)type metadata accessor for HealthDataLogModel();
        *(_QWORD *)((char *)a1 + v200[5]) = *(_QWORD *)((char *)a2 + v200[5]);
        v201 = v200[6];
        v202 = (_QWORD *)((char *)a1 + v201);
        v203 = (_QWORD *)((char *)a2 + v201);
        *v202 = *v203;
        v202[1] = v203[1];
        v204 = v200[7];
        v205 = (_QWORD *)((char *)a1 + v204);
        v206 = (_QWORD *)((char *)a2 + v204);
        *v205 = *v206;
        v205[1] = v206[1];
        v207 = v200[8];
        v208 = (_QWORD *)((char *)a1 + v207);
        v209 = (_QWORD *)((char *)a2 + v207);
        *v208 = *v209;
        v208[1] = v209[1];
        v210 = v200[9];
        v211 = (_QWORD *)((char *)a1 + v210);
        v212 = (_QWORD *)((char *)a2 + v210);
        *v211 = *v212;
        v211[1] = v212[1];
        v213 = v200[10];
        __dste = (char *)a1 + v213;
        v214 = (char *)a2 + v213;
        v215 = type metadata accessor for AppPunchout();
        v550 = *(_QWORD *)(v215 - 8);
        v552 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v550 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v552(v214, 1, v215))
        {
          v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dste, v214, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v550 + 16))(__dste, v214, v215);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v550 + 56))(__dste, 0, 1, v215);
        }
        v398 = v200[11];
        v399 = (_QWORD *)((char *)a1 + v398);
        v400 = (_QWORD *)((char *)a2 + v398);
        *v399 = *v400;
        v399[1] = v400[1];
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 8u:
        v34 = type metadata accessor for AppPunchout();
        v35 = *(_QWORD *)(v34 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(a2, 1, v34))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v35 + 16))(a1, a2, v34);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(a1, 0, 1, v34);
        }
        v217 = (int *)type metadata accessor for GenericQueryModel();
        v218 = v217[5];
        v219 = (char *)a1 + v218;
        v220 = (char *)a2 + v218;
        v221 = v220[8];
        *(_QWORD *)v219 = *(_QWORD *)v220;
        v219[8] = v221;
        v222 = v217[6];
        v223 = (char *)a1 + v222;
        v224 = (char *)a2 + v222;
        v225 = v224[8];
        *(_QWORD *)v223 = *(_QWORD *)v224;
        v223[8] = v225;
        v226 = v217[7];
        v227 = (char *)a1 + v226;
        v228 = (char *)a2 + v226;
        v229 = v228[8];
        *(_QWORD *)v227 = *(_QWORD *)v228;
        v227[8] = v229;
        v230 = v217[8];
        v231 = (char *)a1 + v230;
        v232 = (char *)a2 + v230;
        v233 = v232[8];
        *(_QWORD *)v231 = *(_QWORD *)v232;
        v231[8] = v233;
        v234 = v217[9];
        v235 = (char *)a1 + v234;
        v236 = (char *)a2 + v234;
        v237 = v236[8];
        *(_QWORD *)v235 = *(_QWORD *)v236;
        v235[8] = v237;
        v238 = v217[10];
        v239 = (char *)a1 + v238;
        v240 = (char *)a2 + v238;
        v241 = type metadata accessor for SpeakableString();
        v242 = *(_QWORD *)(v241 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v242 + 48))(v240, 1, v241))
        {
          v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v242 + 16))(v239, v240, v241);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v242 + 56))(v239, 0, 1, v241);
        }
        v401 = v217[11];
        v402 = (_QWORD *)((char *)a1 + v401);
        v403 = (_QWORD *)((char *)a2 + v401);
        *v402 = *v403;
        v402[1] = v403[1];
        v404 = v217[12];
        v405 = (_QWORD *)((char *)a1 + v404);
        v406 = (_QWORD *)((char *)a2 + v404);
        *v405 = *v406;
        v405[1] = v406[1];
        v407 = v217[13];
        v408 = (_QWORD *)((char *)a1 + v407);
        v409 = (_QWORD *)((char *)a2 + v407);
        *v408 = *v409;
        v408[1] = v409[1];
        v410 = v217[14];
        v411 = (_QWORD *)((char *)a1 + v410);
        v412 = (_QWORD *)((char *)a2 + v410);
        *v411 = *v412;
        v411[1] = v412[1];
        v413 = v217[15];
        v414 = (_QWORD *)((char *)a1 + v413);
        v415 = (_QWORD *)((char *)a2 + v413);
        *v414 = *v415;
        v414[1] = v415[1];
        v416 = v217[16];
        v417 = (_QWORD *)((char *)a1 + v416);
        v418 = (_QWORD *)((char *)a2 + v416);
        *v417 = *v418;
        v417[1] = v418[1];
        v419 = v217[17];
        v420 = (_QWORD *)((char *)a1 + v419);
        v421 = (_QWORD *)((char *)a2 + v419);
        *v420 = *v421;
        v420[1] = v421[1];
        v422 = v217[18];
        __dstg = (char *)a1 + v422;
        v353 = (char *)a2 + v422;
        v423 = type metadata accessor for SnippetHeaderModel();
        v548 = *(_QWORD *)(v423 - 8);
        v424 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v548 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v424(v353, 1, v423))
        {
LABEL_67:
          v356 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstg, v353, *(_QWORD *)(*(_QWORD *)(v356 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v242 + 16))(__dstg, v353, v241);
          v505 = *(int *)(v423 + 20);
          v506 = &__dstg[v505];
          v507 = &v353[v505];
          *(_QWORD *)v506 = *(_QWORD *)v507;
          *((_QWORD *)v506 + 1) = *((_QWORD *)v507 + 1);
          v508 = *(int *)(v423 + 24);
          v509 = &__dstg[v508];
          v510 = &v353[v508];
          *(_QWORD *)v509 = *(_QWORD *)v510;
          *((_QWORD *)v509 + 1) = *((_QWORD *)v510 + 1);
          v511 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v548 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v511(__dstg, 0, 1, v423);
        }
        goto LABEL_101;
      case 9u:
        v37 = type metadata accessor for AppPunchout();
        v38 = *(_QWORD *)(v37 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v38 + 48))(a2, 1, v37))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v38 + 16))(a1, a2, v37);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(a1, 0, 1, v37);
        }
        v244 = (int *)type metadata accessor for HeightQueryModel();
        v245 = v244[5];
        v246 = (char *)a1 + v245;
        v247 = (char *)a2 + v245;
        v248 = v247[8];
        *(_QWORD *)v246 = *(_QWORD *)v247;
        v246[8] = v248;
        v249 = v244[6];
        v250 = (char *)a1 + v249;
        v251 = (char *)a2 + v249;
        v252 = v251[8];
        *(_QWORD *)v250 = *(_QWORD *)v251;
        v250[8] = v252;
        v253 = v244[7];
        v254 = (char *)a1 + v253;
        v255 = (char *)a2 + v253;
        v256 = v255[8];
        *(_QWORD *)v254 = *(_QWORD *)v255;
        v254[8] = v256;
        v257 = v244[8];
        v258 = (char *)a1 + v257;
        v259 = (char *)a2 + v257;
        v260 = type metadata accessor for SpeakableString();
        v261 = *(_QWORD *)(v260 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v259, 1, v260))
        {
          v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v258, v259, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v258, v259, v260);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v261 + 56))(v258, 0, 1, v260);
        }
        *((_BYTE *)a1 + v244[9]) = *((_BYTE *)a2 + v244[9]);
        v425 = v244[10];
        v426 = (char *)a1 + v425;
        v427 = (char *)a2 + v425;
        v428 = type metadata accessor for SnippetHeaderModel();
        v429 = *(_QWORD *)(v428 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v429 + 48))(v427, 1, v428))
        {
          v430 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v426, v427, *(_QWORD *)(*(_QWORD *)(v430 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v426, v427, v260);
          v512 = *(int *)(v428 + 20);
          v513 = &v426[v512];
          v514 = &v427[v512];
          *(_QWORD *)v513 = *(_QWORD *)v514;
          *((_QWORD *)v513 + 1) = *((_QWORD *)v514 + 1);
          v515 = *(int *)(v428 + 24);
          v516 = &v426[v515];
          v517 = &v427[v515];
          *(_QWORD *)v516 = *(_QWORD *)v517;
          *((_QWORD *)v516 + 1) = *((_QWORD *)v517 + 1);
          v518 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v429 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v518(v426, 0, 1, v428);
        }
        v519 = v244[11];
        v520 = (_QWORD *)((char *)a1 + v519);
        v521 = (_QWORD *)((char *)a2 + v519);
        *v520 = *v521;
        v520[1] = v521[1];
        v522 = v244[12];
        v523 = (_QWORD *)((char *)a1 + v522);
        v524 = (_QWORD *)((char *)a2 + v522);
        *v523 = *v524;
        v523[1] = v524[1];
        v525 = v244[13];
        v526 = (_QWORD *)((char *)a1 + v525);
        v527 = (_QWORD *)((char *)a2 + v525);
        *v526 = *v527;
        v526[1] = v527[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xAu:
        v40 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        *a1 = v40;
        v41 = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[2] = v41;
        v42 = a2[4];
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        a1[4] = v42;
        v43 = a2[6];
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        a1[6] = v43;
        v44 = a2[8];
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        a1[8] = v44;
        v45 = a2[10];
        *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
        a1[10] = v45;
        a1[12] = a2[12];
        a1[13] = a2[13];
        a1[14] = a2[14];
        a1[15] = a2[15];
        a1[16] = a2[16];
        a1[17] = a2[17];
        a1[18] = a2[18];
        a1[19] = a2[19];
        a1[20] = a2[20];
        a1[21] = a2[21];
        a1[22] = a2[22];
        a1[23] = a2[23];
        a1[24] = a2[24];
        a1[25] = a2[25];
        a1[26] = a2[26];
        a1[27] = a2[27];
        a1[28] = a2[28];
        a1[29] = a2[29];
        *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xBu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        v46 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        __dst = (char *)a1 + v46;
        v47 = (char *)a2 + v46;
        v48 = type metadata accessor for SnippetHeaderModel();
        v49 = *(_QWORD *)(v48 - 8);
        v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v50(v47, 1, v48))
          goto LABEL_61;
LABEL_55:
        v263 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v263 - 8) + 16))(__dst, v47, v263);
        v264 = *(int *)(v48 + 20);
        v265 = &__dst[v264];
        v266 = &v47[v264];
        *(_QWORD *)v265 = *(_QWORD *)v266;
        *((_QWORD *)v265 + 1) = *((_QWORD *)v266 + 1);
        v267 = *(int *)(v48 + 24);
        v268 = &__dst[v267];
        v269 = &v47[v267];
        *(_QWORD *)v268 = *(_QWORD *)v269;
        *((_QWORD *)v268 + 1) = *((_QWORD *)v269 + 1);
        v270 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v270(__dst, 0, 1, v48);
        goto LABEL_101;
      case 0xCu:
        v51 = type metadata accessor for AppPunchout();
        v52 = *(_QWORD *)(v51 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v52 + 48))(a2, 1, v51))
        {
          v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v52 + 16))(a1, a2, v51);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(a1, 0, 1, v51);
        }
        v271 = (int *)type metadata accessor for SleepQueryModel();
        v272 = v271[5];
        v273 = (char *)a1 + v272;
        v274 = (char *)a2 + v272;
        v275 = type metadata accessor for SnippetHeaderModel();
        v276 = *(_QWORD *)(v275 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v276 + 48))(v274, 1, v275))
        {
          v277 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
        }
        else
        {
          v431 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v431 - 8) + 16))(v273, v274, v431);
          v432 = *(int *)(v275 + 20);
          v433 = &v273[v432];
          v434 = &v274[v432];
          *(_QWORD *)v433 = *(_QWORD *)v434;
          *((_QWORD *)v433 + 1) = *((_QWORD *)v434 + 1);
          v435 = *(int *)(v275 + 24);
          v436 = &v273[v435];
          v437 = &v274[v435];
          *(_QWORD *)v436 = *(_QWORD *)v437;
          *((_QWORD *)v436 + 1) = *((_QWORD *)v437 + 1);
          v438 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v276 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v438(v273, 0, 1, v275);
        }
        v439 = v271[6];
        v440 = (_QWORD *)((char *)a1 + v439);
        v441 = (_QWORD *)((char *)a2 + v439);
        *v440 = *v441;
        v440[1] = v441[1];
        v442 = v271[7];
        v443 = (_QWORD *)((char *)a1 + v442);
        v444 = (_QWORD *)((char *)a2 + v442);
        *v443 = *v444;
        v443[1] = v444[1];
        v445 = v271[8];
        v446 = (_QWORD *)((char *)a1 + v445);
        v447 = (_QWORD *)((char *)a2 + v445);
        *v446 = *v447;
        v446[1] = v447[1];
        v448 = v271[9];
        v449 = (_QWORD *)((char *)a1 + v448);
        v450 = (_QWORD *)((char *)a2 + v448);
        *v449 = *v450;
        v449[1] = v450[1];
        v451 = v271[10];
        v452 = (_QWORD *)((char *)a1 + v451);
        v453 = (_QWORD *)((char *)a2 + v451);
        *v452 = *v453;
        v452[1] = v453[1];
        *(_QWORD *)((char *)a1 + v271[11]) = *(_QWORD *)((char *)a2 + v271[11]);
        *(_QWORD *)((char *)a1 + v271[12]) = *(_QWORD *)((char *)a2 + v271[12]);
        *(_QWORD *)((char *)a1 + v271[13]) = *(_QWORD *)((char *)a2 + v271[13]);
        *(_QWORD *)((char *)a1 + v271[14]) = *(_QWORD *)((char *)a2 + v271[14]);
        v454 = v271[15];
        v455 = (_QWORD *)((char *)a1 + v454);
        v456 = (_QWORD *)((char *)a2 + v454);
        *v455 = *v456;
        v455[1] = v456[1];
        v457 = v271[16];
        v458 = (_QWORD *)((char *)a1 + v457);
        v459 = (_QWORD *)((char *)a2 + v457);
        *v458 = *v459;
        v458[1] = v459[1];
        v460 = v271[17];
        v461 = (_QWORD *)((char *)a1 + v460);
        v462 = (_QWORD *)((char *)a2 + v460);
        *v461 = *v462;
        v461[1] = v462[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xDu:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        v54 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        v55 = v54[8];
        __dsta = (char *)a1 + v55;
        v56 = (char *)a2 + v55;
        v57 = type metadata accessor for AppPunchout();
        v58 = *(_QWORD *)(v57 - 8);
        v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v59(v56, 1, v57))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dsta, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v58 + 16))(__dsta, v56, v57);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(__dsta, 0, 1, v57);
        }
        v278 = v54[9];
        v279 = (char *)a1 + v278;
        v280 = (char *)a2 + v278;
        v281 = *(_QWORD *)v280;
        v279[8] = v280[8];
        *(_QWORD *)v279 = v281;
        v282 = v54[10];
        v283 = (_QWORD *)((char *)a1 + v282);
        v284 = (_QWORD *)((char *)a2 + v282);
        *v283 = *v284;
        v283[1] = v284[1];
        v285 = v54[11];
        v286 = (_QWORD *)((char *)a1 + v285);
        v287 = (_QWORD *)((char *)a2 + v285);
        *v286 = *v287;
        v286[1] = v287[1];
        v288 = v54[12];
        v289 = (_QWORD *)((char *)a1 + v288);
        v290 = (_QWORD *)((char *)a2 + v288);
        *v289 = *v290;
        v289[1] = v290[1];
        v291 = v54[13];
        v292 = (_QWORD *)((char *)a1 + v291);
        v293 = (_QWORD *)((char *)a2 + v291);
        *v292 = *v293;
        v292[1] = v293[1];
        *((_BYTE *)a1 + v54[14]) = *((_BYTE *)a2 + v54[14]);
        *((_BYTE *)a1 + v54[15]) = *((_BYTE *)a2 + v54[15]);
        v294 = v54[16];
        v295 = (_QWORD *)((char *)a1 + v294);
        v296 = (_QWORD *)((char *)a2 + v294);
        *v295 = *v296;
        v295[1] = v296[1];
        v297 = v54[17];
        v298 = (_QWORD *)((char *)a1 + v297);
        v299 = (_QWORD *)((char *)a2 + v297);
        *v298 = *v299;
        v298[1] = v299[1];
        v300 = v54[18];
        v301 = (_QWORD *)((char *)a1 + v300);
        v302 = (_QWORD *)((char *)a2 + v300);
        *v301 = *v302;
        v301[1] = v302[1];
        v303 = v54[19];
        __dst = (char *)a1 + v303;
        v47 = (char *)a2 + v303;
        v304 = type metadata accessor for SnippetHeaderModel();
        v551 = *(_QWORD *)(v304 - 8);
        v305 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v551 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v305(v47, 1, v304))
        {
LABEL_61:
          v306 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dst, v47, *(_QWORD *)(*(_QWORD *)(v306 - 8) + 64));
        }
        else
        {
          v463 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v463 - 8) + 16))(__dst, v47, v463);
          v464 = *(int *)(v304 + 20);
          v465 = &__dst[v464];
          v466 = &v47[v464];
          *(_QWORD *)v465 = *(_QWORD *)v466;
          *((_QWORD *)v465 + 1) = *((_QWORD *)v466 + 1);
          v467 = *(int *)(v304 + 24);
          v468 = &__dst[v467];
          v469 = &v47[v467];
          *(_QWORD *)v468 = *(_QWORD *)v469;
          *((_QWORD *)v468 + 1) = *((_QWORD *)v469 + 1);
          v470 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v551 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v470(__dst, 0, 1, v304);
        }
        goto LABEL_101;
      case 0xEu:
        v61 = type metadata accessor for AppPunchout();
        v62 = *(_QWORD *)(v61 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v62 + 48))(a2, 1, v61))
        {
          v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v62 + 16))(a1, a2, v61);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v62 + 56))(a1, 0, 1, v61);
        }
        v307 = (int *)type metadata accessor for TemperatureQueryModel();
        v308 = v307[5];
        v309 = (char *)a1 + v308;
        v310 = (char *)a2 + v308;
        v311 = v310[8];
        *(_QWORD *)v309 = *(_QWORD *)v310;
        v309[8] = v311;
        v312 = v307[6];
        v313 = (char *)a1 + v312;
        v314 = (char *)a2 + v312;
        v315 = v314[8];
        *(_QWORD *)v313 = *(_QWORD *)v314;
        v313[8] = v315;
        v316 = v307[7];
        v317 = (char *)a1 + v316;
        v318 = (char *)a2 + v316;
        v319 = v318[8];
        *(_QWORD *)v317 = *(_QWORD *)v318;
        v317[8] = v319;
        v320 = v307[8];
        v321 = (char *)a1 + v320;
        v322 = (char *)a2 + v320;
        v323 = v322[8];
        *(_QWORD *)v321 = *(_QWORD *)v322;
        v321[8] = v323;
        v324 = v307[9];
        v325 = (char *)a1 + v324;
        v326 = (char *)a2 + v324;
        v327 = v326[8];
        *(_QWORD *)v325 = *(_QWORD *)v326;
        v325[8] = v327;
        v328 = v307[10];
        v329 = (char *)a1 + v328;
        v330 = (char *)a2 + v328;
        v331 = type metadata accessor for SpeakableString();
        v332 = *(_QWORD *)(v331 - 8);
        __dstf = *(unsigned int (**)(char *, uint64_t, uint64_t))(v332 + 48);
        v553 = v332;
        if (__dstf(v330, 1, v331))
        {
          v333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v329, v330, *(_QWORD *)(*(_QWORD *)(v333 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v332 + 16))(v329, v330, v331);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v332 + 56))(v329, 0, 1, v331);
        }
        v471 = v307[11];
        v472 = (_QWORD *)((char *)a1 + v471);
        v473 = (_QWORD *)((char *)a2 + v471);
        *v472 = *v473;
        v472[1] = v473[1];
        v474 = v307[12];
        v475 = (_QWORD *)((char *)a1 + v474);
        v476 = (_QWORD *)((char *)a2 + v474);
        *v475 = *v476;
        v475[1] = v476[1];
        v477 = v307[13];
        v478 = (_QWORD *)((char *)a1 + v477);
        v479 = (_QWORD *)((char *)a2 + v477);
        *v478 = *v479;
        v478[1] = v479[1];
        v480 = v307[14];
        v481 = (_QWORD *)((char *)a1 + v480);
        v482 = (_QWORD *)((char *)a2 + v480);
        *v481 = *v482;
        v481[1] = v482[1];
        v483 = v307[15];
        v484 = (_QWORD *)((char *)a1 + v483);
        v485 = (_QWORD *)((char *)a2 + v483);
        *v484 = *v485;
        v484[1] = v485[1];
        v486 = v307[16];
        v487 = (char *)a1 + v486;
        v488 = (char *)a2 + v486;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dstf(v488, 1, v331))
        {
          v489 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v487, v488, *(_QWORD *)(*(_QWORD *)(v489 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v332 + 16))(v487, v488, v331);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v332 + 56))(v487, 0, 1, v331);
        }
        v528 = v307[17];
        v529 = (_QWORD *)((char *)a1 + v528);
        v530 = (_QWORD *)((char *)a2 + v528);
        *v529 = *v530;
        v529[1] = v530[1];
        v531 = v307[18];
        v532 = (char *)a1 + v531;
        v533 = (char *)a2 + v531;
        v534 = type metadata accessor for SnippetHeaderModel();
        v535 = *(_QWORD *)(v534 - 8);
        v536 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v535 + 48);
        swift_bridgeObjectRetain();
        if (v536(v533, 1, v534))
        {
          v537 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v532, v533, *(_QWORD *)(*(_QWORD *)(v537 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v553 + 16))(v532, v533, v331);
          v538 = *(int *)(v534 + 20);
          v539 = &v532[v538];
          v540 = &v533[v538];
          *(_QWORD *)v539 = *(_QWORD *)v540;
          *((_QWORD *)v539 + 1) = *((_QWORD *)v540 + 1);
          v541 = *(int *)(v534 + 24);
          v542 = &v532[v541];
          v543 = &v533[v541];
          *(_QWORD *)v542 = *(_QWORD *)v543;
          *((_QWORD *)v542 + 1) = *((_QWORD *)v543 + 1);
          v544 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v535 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v544(v532, 0, 1, v534);
        }
LABEL_101:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *Model;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  unsigned int (*v189)(char *, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for AppPunchout();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
      v57 = Model[5];
      v58 = (char *)a1 + v57;
      v59 = (char *)a2 + v57;
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      v60 = Model[6];
      v61 = (char *)a1 + v60;
      v62 = (char *)a2 + v60;
      *(_QWORD *)v61 = *(_QWORD *)v62;
      v61[8] = v62[8];
      v63 = Model[7];
      v64 = (char *)a1 + v63;
      v65 = (char *)a2 + v63;
      v64[8] = v65[8];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v66 = Model[8];
      v67 = (char *)a1 + v66;
      v68 = (char *)a2 + v66;
      v67[8] = v68[8];
      *(_QWORD *)v67 = *(_QWORD *)v68;
      v69 = Model[9];
      v70 = (char *)a1 + v69;
      v71 = (char *)a2 + v69;
      v72 = type metadata accessor for SpeakableString();
      v73 = *(_QWORD *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
      {
        v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v70, v71, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
      *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
      *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
      *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
      *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
      *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
      v191 = Model[16];
      v39 = (char *)a1 + v191;
      v40 = (char *)a2 + v191;
      v192 = type metadata accessor for SnippetHeaderModel();
      v193 = *(_QWORD *)(v192 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
        goto LABEL_96;
      goto LABEL_78;
    case 1u:
      v9 = type metadata accessor for AppPunchout();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      v75 = (int *)type metadata accessor for BloodPressureQueryModel();
      v76 = v75[5];
      v77 = (char *)a1 + v76;
      v78 = (char *)a2 + v76;
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v77[8] = v78[8];
      v79 = v75[6];
      v80 = (char *)a1 + v79;
      v81 = (char *)a2 + v79;
      *(_QWORD *)v80 = *(_QWORD *)v81;
      v80[8] = v81[8];
      v82 = v75[7];
      v83 = (char *)a1 + v82;
      v84 = (char *)a2 + v82;
      v83[8] = v84[8];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      v85 = v75[8];
      v86 = (char *)a1 + v85;
      v87 = (char *)a2 + v85;
      v86[8] = v87[8];
      *(_QWORD *)v86 = *(_QWORD *)v87;
      v88 = v75[9];
      v89 = (char *)a1 + v88;
      v90 = (char *)a2 + v88;
      v89[8] = v90[8];
      *(_QWORD *)v89 = *(_QWORD *)v90;
      v91 = v75[10];
      v92 = (char *)a1 + v91;
      v93 = (char *)a2 + v91;
      *(_QWORD *)v92 = *(_QWORD *)v93;
      v92[8] = v93[8];
      *(_OWORD *)((char *)a1 + v75[11]) = *(_OWORD *)((char *)a2 + v75[11]);
      *(_OWORD *)((char *)a1 + v75[12]) = *(_OWORD *)((char *)a2 + v75[12]);
      *(_OWORD *)((char *)a1 + v75[13]) = *(_OWORD *)((char *)a2 + v75[13]);
      *(_OWORD *)((char *)a1 + v75[14]) = *(_OWORD *)((char *)a2 + v75[14]);
      *(_OWORD *)((char *)a1 + v75[15]) = *(_OWORD *)((char *)a2 + v75[15]);
      *(_OWORD *)((char *)a1 + v75[16]) = *(_OWORD *)((char *)a2 + v75[16]);
      *(_OWORD *)((char *)a1 + v75[17]) = *(_OWORD *)((char *)a2 + v75[17]);
      *(_OWORD *)((char *)a1 + v75[18]) = *(_OWORD *)((char *)a2 + v75[18]);
      *(_OWORD *)((char *)a1 + v75[19]) = *(_OWORD *)((char *)a2 + v75[19]);
      v94 = v75[20];
      v95 = (char *)a1 + v94;
      v96 = (char *)a2 + v94;
      v97 = type metadata accessor for URL();
      v98 = *(_QWORD *)(v97 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      *(_OWORD *)((char *)a1 + v75[21]) = *(_OWORD *)((char *)a2 + v75[21]);
      *(_OWORD *)((char *)a1 + v75[22]) = *(_OWORD *)((char *)a2 + v75[22]);
      v194 = v75[23];
      v39 = (char *)a1 + v194;
      v40 = (char *)a2 + v194;
      v41 = type metadata accessor for SnippetHeaderModel();
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        goto LABEL_78;
      goto LABEL_89;
    case 2u:
      v12 = type metadata accessor for AppPunchout();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v13 + 32))(a1, a2, v12);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      v100 = (int *)type metadata accessor for BloodPressureLogModel();
      *(_OWORD *)((char *)a1 + v100[5]) = *(_OWORD *)((char *)a2 + v100[5]);
      *(_OWORD *)((char *)a1 + v100[6]) = *(_OWORD *)((char *)a2 + v100[6]);
      *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
      v101 = v100[8];
      v102 = (char *)a1 + v101;
      v103 = (char *)a2 + v101;
      v104 = type metadata accessor for SnippetHeaderModel();
      v105 = *(_QWORD *)(v104 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
      {
        v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v195 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 32))(v102, v103, v195);
        *(_OWORD *)&v102[*(int *)(v104 + 20)] = *(_OWORD *)&v103[*(int *)(v104 + 20)];
        *(_OWORD *)&v102[*(int *)(v104 + 24)] = *(_OWORD *)&v103[*(int *)(v104 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
      }
      *(_OWORD *)((char *)a1 + v100[9]) = *(_OWORD *)((char *)a2 + v100[9]);
      *(_OWORD *)((char *)a1 + v100[10]) = *(_OWORD *)((char *)a2 + v100[10]);
      goto LABEL_97;
    case 3u:
      v15 = type metadata accessor for AppPunchout();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v16 + 32))(a1, a2, v15);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      v107 = (int *)type metadata accessor for CycleTrackingLogModel();
      *(_OWORD *)((char *)a1 + v107[5]) = *(_OWORD *)((char *)a2 + v107[5]);
      *(_OWORD *)((char *)a1 + v107[6]) = *(_OWORD *)((char *)a2 + v107[6]);
      *(_OWORD *)((char *)a1 + v107[7]) = *(_OWORD *)((char *)a2 + v107[7]);
      v108 = v107[8];
      v109 = (char *)a1 + v108;
      v110 = (char *)a2 + v108;
      v111 = type metadata accessor for SnippetHeaderModel();
      v112 = *(_QWORD *)(v111 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
      {
        v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
      }
      else
      {
        v196 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v196 - 8) + 32))(v109, v110, v196);
        *(_OWORD *)&v109[*(int *)(v111 + 20)] = *(_OWORD *)&v110[*(int *)(v111 + 20)];
        *(_OWORD *)&v109[*(int *)(v111 + 24)] = *(_OWORD *)&v110[*(int *)(v111 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
      }
      v197 = v107[9];
      v198 = (char *)a1 + v197;
      v199 = (char *)a2 + v197;
      v200 = type metadata accessor for URL();
      v201 = *(_QWORD *)(v200 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
      {
        v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v201 + 32))(v198, v199, v200);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v198, 0, 1, v200);
      }
      goto LABEL_97;
    case 4u:
      *a1 = *a2;
      v18 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      goto LABEL_97;
    case 6u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      v22 = (int *)type metadata accessor for GenericMedCompletedLogModel();
      v23 = v22[6];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for AppPunchout();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *((_BYTE *)a1 + v22[7]) = *((_BYTE *)a2 + v22[7]);
      *(_OWORD *)((char *)a1 + v22[8]) = *(_OWORD *)((char *)a2 + v22[8]);
      *((_BYTE *)a1 + v22[9]) = *((_BYTE *)a2 + v22[9]);
      *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
      *(_OWORD *)((char *)a1 + v22[11]) = *(_OWORD *)((char *)a2 + v22[11]);
      *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
      *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
      v114 = v22[14];
      v39 = (char *)a1 + v114;
      v40 = (char *)a2 + v114;
      v41 = type metadata accessor for SnippetHeaderModel();
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        goto LABEL_78;
      goto LABEL_89;
    case 7u:
      v29 = type metadata accessor for SnippetHeaderModel();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(a2, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v115 = type metadata accessor for SpeakableString();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v115 - 8) + 32))(a1, a2, v115);
        *(_OWORD *)((char *)a1 + *(int *)(v29 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v29 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 24));
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v29);
      }
      v116 = (int *)type metadata accessor for HealthDataLogModel();
      *(_QWORD *)((char *)a1 + v116[5]) = *(_QWORD *)((char *)a2 + v116[5]);
      *(_OWORD *)((char *)a1 + v116[6]) = *(_OWORD *)((char *)a2 + v116[6]);
      *(_OWORD *)((char *)a1 + v116[7]) = *(_OWORD *)((char *)a2 + v116[7]);
      *(_OWORD *)((char *)a1 + v116[8]) = *(_OWORD *)((char *)a2 + v116[8]);
      *(_OWORD *)((char *)a1 + v116[9]) = *(_OWORD *)((char *)a2 + v116[9]);
      v117 = v116[10];
      v118 = (char *)a1 + v117;
      v119 = (char *)a2 + v117;
      v120 = type metadata accessor for AppPunchout();
      v121 = *(_QWORD *)(v120 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
      {
        v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v118, v119, v120);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
      }
      *(_OWORD *)((char *)a1 + v116[11]) = *(_OWORD *)((char *)a2 + v116[11]);
      goto LABEL_97;
    case 8u:
      v32 = type metadata accessor for AppPunchout();
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(a2, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v33 + 32))(a1, a2, v32);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(a1, 0, 1, v32);
      }
      v123 = (int *)type metadata accessor for GenericQueryModel();
      v124 = v123[5];
      v125 = (char *)a1 + v124;
      v126 = (char *)a2 + v124;
      *(_QWORD *)v125 = *(_QWORD *)v126;
      v125[8] = v126[8];
      v127 = v123[6];
      v128 = (char *)a1 + v127;
      v129 = (char *)a2 + v127;
      *(_QWORD *)v128 = *(_QWORD *)v129;
      v128[8] = v129[8];
      v130 = v123[7];
      v131 = (char *)a1 + v130;
      v132 = (char *)a2 + v130;
      v131[8] = v132[8];
      *(_QWORD *)v131 = *(_QWORD *)v132;
      v133 = v123[8];
      v134 = (char *)a1 + v133;
      v135 = (char *)a2 + v133;
      v134[8] = v135[8];
      *(_QWORD *)v134 = *(_QWORD *)v135;
      v136 = v123[9];
      v137 = (char *)a1 + v136;
      v138 = (char *)a2 + v136;
      v137[8] = v138[8];
      *(_QWORD *)v137 = *(_QWORD *)v138;
      v139 = v123[10];
      v140 = (char *)a1 + v139;
      v141 = (char *)a2 + v139;
      v72 = type metadata accessor for SpeakableString();
      v73 = *(_QWORD *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v141, 1, v72))
      {
        v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v140, v141, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v140, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + v123[11]) = *(_OWORD *)((char *)a2 + v123[11]);
      *(_OWORD *)((char *)a1 + v123[12]) = *(_OWORD *)((char *)a2 + v123[12]);
      *(_OWORD *)((char *)a1 + v123[13]) = *(_OWORD *)((char *)a2 + v123[13]);
      *(_OWORD *)((char *)a1 + v123[14]) = *(_OWORD *)((char *)a2 + v123[14]);
      *(_OWORD *)((char *)a1 + v123[15]) = *(_OWORD *)((char *)a2 + v123[15]);
      *(_OWORD *)((char *)a1 + v123[16]) = *(_OWORD *)((char *)a2 + v123[16]);
      *(_OWORD *)((char *)a1 + v123[17]) = *(_OWORD *)((char *)a2 + v123[17]);
      v203 = v123[18];
      v39 = (char *)a1 + v203;
      v40 = (char *)a2 + v203;
      v192 = type metadata accessor for SnippetHeaderModel();
      v193 = *(_QWORD *)(v192 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
        goto LABEL_78;
      goto LABEL_96;
    case 9u:
      v35 = type metadata accessor for AppPunchout();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(a2, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v36 + 32))(a1, a2, v35);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v35);
      }
      v143 = (int *)type metadata accessor for HeightQueryModel();
      v144 = v143[5];
      v145 = (char *)a1 + v144;
      v146 = (char *)a2 + v144;
      *(_QWORD *)v145 = *(_QWORD *)v146;
      v145[8] = v146[8];
      v147 = v143[6];
      v148 = (char *)a1 + v147;
      v149 = (char *)a2 + v147;
      *(_QWORD *)v148 = *(_QWORD *)v149;
      v148[8] = v149[8];
      v150 = v143[7];
      v151 = (char *)a1 + v150;
      v152 = (char *)a2 + v150;
      v151[8] = v152[8];
      *(_QWORD *)v151 = *(_QWORD *)v152;
      v153 = v143[8];
      v154 = (char *)a1 + v153;
      v155 = (char *)a2 + v153;
      v156 = type metadata accessor for SpeakableString();
      v157 = *(_QWORD *)(v156 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v155, 1, v156))
      {
        v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v154, v155, v156);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
      }
      *((_BYTE *)a1 + v143[9]) = *((_BYTE *)a2 + v143[9]);
      v205 = v143[10];
      v206 = (char *)a1 + v205;
      v207 = (char *)a2 + v205;
      v208 = type metadata accessor for SnippetHeaderModel();
      v209 = *(_QWORD *)(v208 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
      {
        v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v206, v207, v156);
        *(_OWORD *)&v206[*(int *)(v208 + 20)] = *(_OWORD *)&v207[*(int *)(v208 + 20)];
        *(_OWORD *)&v206[*(int *)(v208 + 24)] = *(_OWORD *)&v207[*(int *)(v208 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
      }
      *(_OWORD *)((char *)a1 + v143[11]) = *(_OWORD *)((char *)a2 + v143[11]);
      *(_OWORD *)((char *)a1 + v143[12]) = *(_OWORD *)((char *)a2 + v143[12]);
      *(_OWORD *)((char *)a1 + v143[13]) = *(_OWORD *)((char *)a2 + v143[13]);
      goto LABEL_97;
    case 0xBu:
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
      v38 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      v41 = type metadata accessor for SnippetHeaderModel();
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        goto LABEL_78;
      goto LABEL_89;
    case 0xCu:
      v43 = type metadata accessor for AppPunchout();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v44 + 32))(a1, a2, v43);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
      }
      v159 = (int *)type metadata accessor for SleepQueryModel();
      v160 = v159[5];
      v161 = (char *)a1 + v160;
      v162 = (char *)a2 + v160;
      v163 = type metadata accessor for SnippetHeaderModel();
      v164 = *(_QWORD *)(v163 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
      {
        v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
      }
      else
      {
        v211 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 32))(v161, v162, v211);
        *(_OWORD *)&v161[*(int *)(v163 + 20)] = *(_OWORD *)&v162[*(int *)(v163 + 20)];
        *(_OWORD *)&v161[*(int *)(v163 + 24)] = *(_OWORD *)&v162[*(int *)(v163 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
      }
      *(_OWORD *)((char *)a1 + v159[6]) = *(_OWORD *)((char *)a2 + v159[6]);
      *(_OWORD *)((char *)a1 + v159[7]) = *(_OWORD *)((char *)a2 + v159[7]);
      *(_OWORD *)((char *)a1 + v159[8]) = *(_OWORD *)((char *)a2 + v159[8]);
      *(_OWORD *)((char *)a1 + v159[9]) = *(_OWORD *)((char *)a2 + v159[9]);
      *(_OWORD *)((char *)a1 + v159[10]) = *(_OWORD *)((char *)a2 + v159[10]);
      *(_QWORD *)((char *)a1 + v159[11]) = *(_QWORD *)((char *)a2 + v159[11]);
      *(_QWORD *)((char *)a1 + v159[12]) = *(_QWORD *)((char *)a2 + v159[12]);
      *(_QWORD *)((char *)a1 + v159[13]) = *(_QWORD *)((char *)a2 + v159[13]);
      *(_QWORD *)((char *)a1 + v159[14]) = *(_QWORD *)((char *)a2 + v159[14]);
      *(_OWORD *)((char *)a1 + v159[15]) = *(_OWORD *)((char *)a2 + v159[15]);
      *(_OWORD *)((char *)a1 + v159[16]) = *(_OWORD *)((char *)a2 + v159[16]);
      *(_OWORD *)((char *)a1 + v159[17]) = *(_OWORD *)((char *)a2 + v159[17]);
      goto LABEL_97;
    case 0xDu:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      v46 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
      v47 = v46[8];
      v48 = (char *)a1 + v47;
      v49 = (char *)a2 + v47;
      v50 = type metadata accessor for AppPunchout();
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v166 = v46[9];
      v167 = (char *)a1 + v166;
      v168 = (char *)a2 + v166;
      *(_QWORD *)v167 = *(_QWORD *)v168;
      v167[8] = v168[8];
      *(_OWORD *)((char *)a1 + v46[10]) = *(_OWORD *)((char *)a2 + v46[10]);
      *(_OWORD *)((char *)a1 + v46[11]) = *(_OWORD *)((char *)a2 + v46[11]);
      *(_OWORD *)((char *)a1 + v46[12]) = *(_OWORD *)((char *)a2 + v46[12]);
      *(_OWORD *)((char *)a1 + v46[13]) = *(_OWORD *)((char *)a2 + v46[13]);
      *((_BYTE *)a1 + v46[14]) = *((_BYTE *)a2 + v46[14]);
      *((_BYTE *)a1 + v46[15]) = *((_BYTE *)a2 + v46[15]);
      *(_OWORD *)((char *)a1 + v46[16]) = *(_OWORD *)((char *)a2 + v46[16]);
      *(_OWORD *)((char *)a1 + v46[17]) = *(_OWORD *)((char *)a2 + v46[17]);
      *(_OWORD *)((char *)a1 + v46[18]) = *(_OWORD *)((char *)a2 + v46[18]);
      v169 = v46[19];
      v39 = (char *)a1 + v169;
      v40 = (char *)a2 + v169;
      v41 = type metadata accessor for SnippetHeaderModel();
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        goto LABEL_78;
LABEL_89:
      v216 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 32))(v39, v40, v216);
      *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
      *(_OWORD *)&v39[*(int *)(v41 + 24)] = *(_OWORD *)&v40[*(int *)(v41 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_97;
    case 0xEu:
      v53 = type metadata accessor for AppPunchout();
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v54 + 48))(a2, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v54 + 32))(a1, a2, v53);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(a1, 0, 1, v53);
      }
      v170 = (int *)type metadata accessor for TemperatureQueryModel();
      v171 = v170[5];
      v172 = (char *)a1 + v171;
      v173 = (char *)a2 + v171;
      *(_QWORD *)v172 = *(_QWORD *)v173;
      v172[8] = v173[8];
      v174 = v170[6];
      v175 = (char *)a1 + v174;
      v176 = (char *)a2 + v174;
      *(_QWORD *)v175 = *(_QWORD *)v176;
      v175[8] = v176[8];
      v177 = v170[7];
      v178 = (char *)a1 + v177;
      v179 = (char *)a2 + v177;
      v178[8] = v179[8];
      *(_QWORD *)v178 = *(_QWORD *)v179;
      v180 = v170[8];
      v181 = (char *)a1 + v180;
      v182 = (char *)a2 + v180;
      v181[8] = v182[8];
      *(_QWORD *)v181 = *(_QWORD *)v182;
      v183 = v170[9];
      v184 = (char *)a1 + v183;
      v185 = (char *)a2 + v183;
      v184[8] = v185[8];
      *(_QWORD *)v184 = *(_QWORD *)v185;
      v186 = v170[10];
      v187 = (char *)a1 + v186;
      v188 = (char *)a2 + v186;
      v72 = type metadata accessor for SpeakableString();
      v73 = *(_QWORD *)(v72 - 8);
      v189 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
      if (v189(v188, 1, v72))
      {
        v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v187, v188, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v187, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + v170[11]) = *(_OWORD *)((char *)a2 + v170[11]);
      *(_OWORD *)((char *)a1 + v170[12]) = *(_OWORD *)((char *)a2 + v170[12]);
      *(_OWORD *)((char *)a1 + v170[13]) = *(_OWORD *)((char *)a2 + v170[13]);
      *(_OWORD *)((char *)a1 + v170[14]) = *(_OWORD *)((char *)a2 + v170[14]);
      *(_OWORD *)((char *)a1 + v170[15]) = *(_OWORD *)((char *)a2 + v170[15]);
      v212 = v170[16];
      v213 = (char *)a1 + v212;
      v214 = (char *)a2 + v212;
      if (v189((char *)a2 + v212, 1, v72))
      {
        v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v213, v214, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v213, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + v170[17]) = *(_OWORD *)((char *)a2 + v170[17]);
      v217 = v170[18];
      v39 = (char *)a1 + v217;
      v40 = (char *)a2 + v217;
      v192 = type metadata accessor for SnippetHeaderModel();
      v193 = *(_QWORD *)(v192 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
      {
LABEL_78:
        v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
      }
      else
      {
LABEL_96:
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v39, v40, v72);
        *(_OWORD *)&v39[*(int *)(v192 + 20)] = *(_OWORD *)&v40[*(int *)(v192 + 20)];
        *(_OWORD *)&v39[*(int *)(v192 + 24)] = *(_OWORD *)&v40[*(int *)(v192 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v39, 0, 1, v192);
      }
LABEL_97:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *Model;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  unsigned int (*v189)(char *, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;

  if (a1 != a2)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for AppPunchout();
        v7 = *(_QWORD *)(v6 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
        {
          v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        }
        Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        v57 = Model[5];
        v58 = (char *)a1 + v57;
        v59 = (char *)a2 + v57;
        *(_QWORD *)v58 = *(_QWORD *)v59;
        v58[8] = v59[8];
        v60 = Model[6];
        v61 = (char *)a1 + v60;
        v62 = (char *)a2 + v60;
        *(_QWORD *)v61 = *(_QWORD *)v62;
        v61[8] = v62[8];
        v63 = Model[7];
        v64 = (char *)a1 + v63;
        v65 = (char *)a2 + v63;
        v64[8] = v65[8];
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v66 = Model[8];
        v67 = (char *)a1 + v66;
        v68 = (char *)a2 + v66;
        v67[8] = v68[8];
        *(_QWORD *)v67 = *(_QWORD *)v68;
        v69 = Model[9];
        v70 = (char *)a1 + v69;
        v71 = (char *)a2 + v69;
        v72 = type metadata accessor for SpeakableString();
        v73 = *(_QWORD *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v70, v71, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
        *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
        *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
        *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
        *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
        *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
        v191 = Model[16];
        v39 = (char *)a1 + v191;
        v40 = (char *)a2 + v191;
        v192 = type metadata accessor for SnippetHeaderModel();
        v193 = *(_QWORD *)(v192 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
          goto LABEL_97;
        goto LABEL_79;
      case 1u:
        v9 = type metadata accessor for AppPunchout();
        v10 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v9);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        v75 = (int *)type metadata accessor for BloodPressureQueryModel();
        v76 = v75[5];
        v77 = (char *)a1 + v76;
        v78 = (char *)a2 + v76;
        *(_QWORD *)v77 = *(_QWORD *)v78;
        v77[8] = v78[8];
        v79 = v75[6];
        v80 = (char *)a1 + v79;
        v81 = (char *)a2 + v79;
        *(_QWORD *)v80 = *(_QWORD *)v81;
        v80[8] = v81[8];
        v82 = v75[7];
        v83 = (char *)a1 + v82;
        v84 = (char *)a2 + v82;
        v83[8] = v84[8];
        *(_QWORD *)v83 = *(_QWORD *)v84;
        v85 = v75[8];
        v86 = (char *)a1 + v85;
        v87 = (char *)a2 + v85;
        v86[8] = v87[8];
        *(_QWORD *)v86 = *(_QWORD *)v87;
        v88 = v75[9];
        v89 = (char *)a1 + v88;
        v90 = (char *)a2 + v88;
        v89[8] = v90[8];
        *(_QWORD *)v89 = *(_QWORD *)v90;
        v91 = v75[10];
        v92 = (char *)a1 + v91;
        v93 = (char *)a2 + v91;
        *(_QWORD *)v92 = *(_QWORD *)v93;
        v92[8] = v93[8];
        *(_OWORD *)((char *)a1 + v75[11]) = *(_OWORD *)((char *)a2 + v75[11]);
        *(_OWORD *)((char *)a1 + v75[12]) = *(_OWORD *)((char *)a2 + v75[12]);
        *(_OWORD *)((char *)a1 + v75[13]) = *(_OWORD *)((char *)a2 + v75[13]);
        *(_OWORD *)((char *)a1 + v75[14]) = *(_OWORD *)((char *)a2 + v75[14]);
        *(_OWORD *)((char *)a1 + v75[15]) = *(_OWORD *)((char *)a2 + v75[15]);
        *(_OWORD *)((char *)a1 + v75[16]) = *(_OWORD *)((char *)a2 + v75[16]);
        *(_OWORD *)((char *)a1 + v75[17]) = *(_OWORD *)((char *)a2 + v75[17]);
        *(_OWORD *)((char *)a1 + v75[18]) = *(_OWORD *)((char *)a2 + v75[18]);
        *(_OWORD *)((char *)a1 + v75[19]) = *(_OWORD *)((char *)a2 + v75[19]);
        v94 = v75[20];
        v95 = (char *)a1 + v94;
        v96 = (char *)a2 + v94;
        v97 = type metadata accessor for URL();
        v98 = *(_QWORD *)(v97 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
        {
          v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
        }
        *(_OWORD *)((char *)a1 + v75[21]) = *(_OWORD *)((char *)a2 + v75[21]);
        *(_OWORD *)((char *)a1 + v75[22]) = *(_OWORD *)((char *)a2 + v75[22]);
        v194 = v75[23];
        v39 = (char *)a1 + v194;
        v40 = (char *)a2 + v194;
        v41 = type metadata accessor for SnippetHeaderModel();
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
          goto LABEL_79;
        goto LABEL_90;
      case 2u:
        v12 = type metadata accessor for AppPunchout();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v13 + 32))(a1, a2, v12);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        v100 = (int *)type metadata accessor for BloodPressureLogModel();
        *(_OWORD *)((char *)a1 + v100[5]) = *(_OWORD *)((char *)a2 + v100[5]);
        *(_OWORD *)((char *)a1 + v100[6]) = *(_OWORD *)((char *)a2 + v100[6]);
        *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
        v101 = v100[8];
        v102 = (char *)a1 + v101;
        v103 = (char *)a2 + v101;
        v104 = type metadata accessor for SnippetHeaderModel();
        v105 = *(_QWORD *)(v104 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
        {
          v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
        }
        else
        {
          v195 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 32))(v102, v103, v195);
          *(_OWORD *)&v102[*(int *)(v104 + 20)] = *(_OWORD *)&v103[*(int *)(v104 + 20)];
          *(_OWORD *)&v102[*(int *)(v104 + 24)] = *(_OWORD *)&v103[*(int *)(v104 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
        }
        *(_OWORD *)((char *)a1 + v100[9]) = *(_OWORD *)((char *)a2 + v100[9]);
        *(_OWORD *)((char *)a1 + v100[10]) = *(_OWORD *)((char *)a2 + v100[10]);
        goto LABEL_98;
      case 3u:
        v15 = type metadata accessor for AppPunchout();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v16 + 32))(a1, a2, v15);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        v107 = (int *)type metadata accessor for CycleTrackingLogModel();
        *(_OWORD *)((char *)a1 + v107[5]) = *(_OWORD *)((char *)a2 + v107[5]);
        *(_OWORD *)((char *)a1 + v107[6]) = *(_OWORD *)((char *)a2 + v107[6]);
        *(_OWORD *)((char *)a1 + v107[7]) = *(_OWORD *)((char *)a2 + v107[7]);
        v108 = v107[8];
        v109 = (char *)a1 + v108;
        v110 = (char *)a2 + v108;
        v111 = type metadata accessor for SnippetHeaderModel();
        v112 = *(_QWORD *)(v111 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
        {
          v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
        }
        else
        {
          v196 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v196 - 8) + 32))(v109, v110, v196);
          *(_OWORD *)&v109[*(int *)(v111 + 20)] = *(_OWORD *)&v110[*(int *)(v111 + 20)];
          *(_OWORD *)&v109[*(int *)(v111 + 24)] = *(_OWORD *)&v110[*(int *)(v111 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
        }
        v197 = v107[9];
        v198 = (char *)a1 + v197;
        v199 = (char *)a2 + v197;
        v200 = type metadata accessor for URL();
        v201 = *(_QWORD *)(v200 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
        {
          v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v201 + 32))(v198, v199, v200);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v198, 0, 1, v200);
        }
        goto LABEL_98;
      case 4u:
        *a1 = *a2;
        v18 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        v19 = (char *)a1 + v18;
        v20 = (char *)a2 + v18;
        v21 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
        goto LABEL_98;
      case 6u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        v22 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        v23 = v22[6];
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for AppPunchout();
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        *((_BYTE *)a1 + v22[7]) = *((_BYTE *)a2 + v22[7]);
        *(_OWORD *)((char *)a1 + v22[8]) = *(_OWORD *)((char *)a2 + v22[8]);
        *((_BYTE *)a1 + v22[9]) = *((_BYTE *)a2 + v22[9]);
        *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
        *(_OWORD *)((char *)a1 + v22[11]) = *(_OWORD *)((char *)a2 + v22[11]);
        *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
        *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
        v114 = v22[14];
        v39 = (char *)a1 + v114;
        v40 = (char *)a2 + v114;
        v41 = type metadata accessor for SnippetHeaderModel();
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
          goto LABEL_79;
        goto LABEL_90;
      case 7u:
        v29 = type metadata accessor for SnippetHeaderModel();
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(a2, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          v115 = type metadata accessor for SpeakableString();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v115 - 8) + 32))(a1, a2, v115);
          *(_OWORD *)((char *)a1 + *(int *)(v29 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v29 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 24));
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v29);
        }
        v116 = (int *)type metadata accessor for HealthDataLogModel();
        *(_QWORD *)((char *)a1 + v116[5]) = *(_QWORD *)((char *)a2 + v116[5]);
        *(_OWORD *)((char *)a1 + v116[6]) = *(_OWORD *)((char *)a2 + v116[6]);
        *(_OWORD *)((char *)a1 + v116[7]) = *(_OWORD *)((char *)a2 + v116[7]);
        *(_OWORD *)((char *)a1 + v116[8]) = *(_OWORD *)((char *)a2 + v116[8]);
        *(_OWORD *)((char *)a1 + v116[9]) = *(_OWORD *)((char *)a2 + v116[9]);
        v117 = v116[10];
        v118 = (char *)a1 + v117;
        v119 = (char *)a2 + v117;
        v120 = type metadata accessor for AppPunchout();
        v121 = *(_QWORD *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v118, v119, v120);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
        }
        *(_OWORD *)((char *)a1 + v116[11]) = *(_OWORD *)((char *)a2 + v116[11]);
        goto LABEL_98;
      case 8u:
        v32 = type metadata accessor for AppPunchout();
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(a2, 1, v32))
        {
          v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v33 + 32))(a1, a2, v32);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(a1, 0, 1, v32);
        }
        v123 = (int *)type metadata accessor for GenericQueryModel();
        v124 = v123[5];
        v125 = (char *)a1 + v124;
        v126 = (char *)a2 + v124;
        *(_QWORD *)v125 = *(_QWORD *)v126;
        v125[8] = v126[8];
        v127 = v123[6];
        v128 = (char *)a1 + v127;
        v129 = (char *)a2 + v127;
        *(_QWORD *)v128 = *(_QWORD *)v129;
        v128[8] = v129[8];
        v130 = v123[7];
        v131 = (char *)a1 + v130;
        v132 = (char *)a2 + v130;
        v131[8] = v132[8];
        *(_QWORD *)v131 = *(_QWORD *)v132;
        v133 = v123[8];
        v134 = (char *)a1 + v133;
        v135 = (char *)a2 + v133;
        v134[8] = v135[8];
        *(_QWORD *)v134 = *(_QWORD *)v135;
        v136 = v123[9];
        v137 = (char *)a1 + v136;
        v138 = (char *)a2 + v136;
        v137[8] = v138[8];
        *(_QWORD *)v137 = *(_QWORD *)v138;
        v139 = v123[10];
        v140 = (char *)a1 + v139;
        v141 = (char *)a2 + v139;
        v72 = type metadata accessor for SpeakableString();
        v73 = *(_QWORD *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v141, 1, v72))
        {
          v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v140, v141, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v140, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + v123[11]) = *(_OWORD *)((char *)a2 + v123[11]);
        *(_OWORD *)((char *)a1 + v123[12]) = *(_OWORD *)((char *)a2 + v123[12]);
        *(_OWORD *)((char *)a1 + v123[13]) = *(_OWORD *)((char *)a2 + v123[13]);
        *(_OWORD *)((char *)a1 + v123[14]) = *(_OWORD *)((char *)a2 + v123[14]);
        *(_OWORD *)((char *)a1 + v123[15]) = *(_OWORD *)((char *)a2 + v123[15]);
        *(_OWORD *)((char *)a1 + v123[16]) = *(_OWORD *)((char *)a2 + v123[16]);
        *(_OWORD *)((char *)a1 + v123[17]) = *(_OWORD *)((char *)a2 + v123[17]);
        v203 = v123[18];
        v39 = (char *)a1 + v203;
        v40 = (char *)a2 + v203;
        v192 = type metadata accessor for SnippetHeaderModel();
        v193 = *(_QWORD *)(v192 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
          goto LABEL_79;
        goto LABEL_97;
      case 9u:
        v35 = type metadata accessor for AppPunchout();
        v36 = *(_QWORD *)(v35 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(a2, 1, v35))
        {
          v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v36 + 32))(a1, a2, v35);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v35);
        }
        v143 = (int *)type metadata accessor for HeightQueryModel();
        v144 = v143[5];
        v145 = (char *)a1 + v144;
        v146 = (char *)a2 + v144;
        *(_QWORD *)v145 = *(_QWORD *)v146;
        v145[8] = v146[8];
        v147 = v143[6];
        v148 = (char *)a1 + v147;
        v149 = (char *)a2 + v147;
        *(_QWORD *)v148 = *(_QWORD *)v149;
        v148[8] = v149[8];
        v150 = v143[7];
        v151 = (char *)a1 + v150;
        v152 = (char *)a2 + v150;
        v151[8] = v152[8];
        *(_QWORD *)v151 = *(_QWORD *)v152;
        v153 = v143[8];
        v154 = (char *)a1 + v153;
        v155 = (char *)a2 + v153;
        v156 = type metadata accessor for SpeakableString();
        v157 = *(_QWORD *)(v156 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v155, 1, v156))
        {
          v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v154, v155, v156);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
        }
        *((_BYTE *)a1 + v143[9]) = *((_BYTE *)a2 + v143[9]);
        v205 = v143[10];
        v206 = (char *)a1 + v205;
        v207 = (char *)a2 + v205;
        v208 = type metadata accessor for SnippetHeaderModel();
        v209 = *(_QWORD *)(v208 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
        {
          v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v206, v207, v156);
          *(_OWORD *)&v206[*(int *)(v208 + 20)] = *(_OWORD *)&v207[*(int *)(v208 + 20)];
          *(_OWORD *)&v206[*(int *)(v208 + 24)] = *(_OWORD *)&v207[*(int *)(v208 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
        }
        *(_OWORD *)((char *)a1 + v143[11]) = *(_OWORD *)((char *)a2 + v143[11]);
        *(_OWORD *)((char *)a1 + v143[12]) = *(_OWORD *)((char *)a2 + v143[12]);
        *(_OWORD *)((char *)a1 + v143[13]) = *(_OWORD *)((char *)a2 + v143[13]);
        goto LABEL_98;
      case 0xBu:
        *a1 = *a2;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
        v38 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        v39 = (char *)a1 + v38;
        v40 = (char *)a2 + v38;
        v41 = type metadata accessor for SnippetHeaderModel();
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
          goto LABEL_79;
        goto LABEL_90;
      case 0xCu:
        v43 = type metadata accessor for AppPunchout();
        v44 = *(_QWORD *)(v43 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v44 + 32))(a1, a2, v43);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
        }
        v159 = (int *)type metadata accessor for SleepQueryModel();
        v160 = v159[5];
        v161 = (char *)a1 + v160;
        v162 = (char *)a2 + v160;
        v163 = type metadata accessor for SnippetHeaderModel();
        v164 = *(_QWORD *)(v163 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
        {
          v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
        }
        else
        {
          v211 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 32))(v161, v162, v211);
          *(_OWORD *)&v161[*(int *)(v163 + 20)] = *(_OWORD *)&v162[*(int *)(v163 + 20)];
          *(_OWORD *)&v161[*(int *)(v163 + 24)] = *(_OWORD *)&v162[*(int *)(v163 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
        }
        *(_OWORD *)((char *)a1 + v159[6]) = *(_OWORD *)((char *)a2 + v159[6]);
        *(_OWORD *)((char *)a1 + v159[7]) = *(_OWORD *)((char *)a2 + v159[7]);
        *(_OWORD *)((char *)a1 + v159[8]) = *(_OWORD *)((char *)a2 + v159[8]);
        *(_OWORD *)((char *)a1 + v159[9]) = *(_OWORD *)((char *)a2 + v159[9]);
        *(_OWORD *)((char *)a1 + v159[10]) = *(_OWORD *)((char *)a2 + v159[10]);
        *(_QWORD *)((char *)a1 + v159[11]) = *(_QWORD *)((char *)a2 + v159[11]);
        *(_QWORD *)((char *)a1 + v159[12]) = *(_QWORD *)((char *)a2 + v159[12]);
        *(_QWORD *)((char *)a1 + v159[13]) = *(_QWORD *)((char *)a2 + v159[13]);
        *(_QWORD *)((char *)a1 + v159[14]) = *(_QWORD *)((char *)a2 + v159[14]);
        *(_OWORD *)((char *)a1 + v159[15]) = *(_OWORD *)((char *)a2 + v159[15]);
        *(_OWORD *)((char *)a1 + v159[16]) = *(_OWORD *)((char *)a2 + v159[16]);
        *(_OWORD *)((char *)a1 + v159[17]) = *(_OWORD *)((char *)a2 + v159[17]);
        goto LABEL_98;
      case 0xDu:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        v46 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        v47 = v46[8];
        v48 = (char *)a1 + v47;
        v49 = (char *)a2 + v47;
        v50 = type metadata accessor for AppPunchout();
        v51 = *(_QWORD *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        v166 = v46[9];
        v167 = (char *)a1 + v166;
        v168 = (char *)a2 + v166;
        *(_QWORD *)v167 = *(_QWORD *)v168;
        v167[8] = v168[8];
        *(_OWORD *)((char *)a1 + v46[10]) = *(_OWORD *)((char *)a2 + v46[10]);
        *(_OWORD *)((char *)a1 + v46[11]) = *(_OWORD *)((char *)a2 + v46[11]);
        *(_OWORD *)((char *)a1 + v46[12]) = *(_OWORD *)((char *)a2 + v46[12]);
        *(_OWORD *)((char *)a1 + v46[13]) = *(_OWORD *)((char *)a2 + v46[13]);
        *((_BYTE *)a1 + v46[14]) = *((_BYTE *)a2 + v46[14]);
        *((_BYTE *)a1 + v46[15]) = *((_BYTE *)a2 + v46[15]);
        *(_OWORD *)((char *)a1 + v46[16]) = *(_OWORD *)((char *)a2 + v46[16]);
        *(_OWORD *)((char *)a1 + v46[17]) = *(_OWORD *)((char *)a2 + v46[17]);
        *(_OWORD *)((char *)a1 + v46[18]) = *(_OWORD *)((char *)a2 + v46[18]);
        v169 = v46[19];
        v39 = (char *)a1 + v169;
        v40 = (char *)a2 + v169;
        v41 = type metadata accessor for SnippetHeaderModel();
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
          goto LABEL_79;
LABEL_90:
        v216 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 32))(v39, v40, v216);
        *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
        *(_OWORD *)&v39[*(int *)(v41 + 24)] = *(_OWORD *)&v40[*(int *)(v41 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        goto LABEL_98;
      case 0xEu:
        v53 = type metadata accessor for AppPunchout();
        v54 = *(_QWORD *)(v53 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v54 + 48))(a2, 1, v53))
        {
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v54 + 32))(a1, a2, v53);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(a1, 0, 1, v53);
        }
        v170 = (int *)type metadata accessor for TemperatureQueryModel();
        v171 = v170[5];
        v172 = (char *)a1 + v171;
        v173 = (char *)a2 + v171;
        *(_QWORD *)v172 = *(_QWORD *)v173;
        v172[8] = v173[8];
        v174 = v170[6];
        v175 = (char *)a1 + v174;
        v176 = (char *)a2 + v174;
        *(_QWORD *)v175 = *(_QWORD *)v176;
        v175[8] = v176[8];
        v177 = v170[7];
        v178 = (char *)a1 + v177;
        v179 = (char *)a2 + v177;
        v178[8] = v179[8];
        *(_QWORD *)v178 = *(_QWORD *)v179;
        v180 = v170[8];
        v181 = (char *)a1 + v180;
        v182 = (char *)a2 + v180;
        v181[8] = v182[8];
        *(_QWORD *)v181 = *(_QWORD *)v182;
        v183 = v170[9];
        v184 = (char *)a1 + v183;
        v185 = (char *)a2 + v183;
        v184[8] = v185[8];
        *(_QWORD *)v184 = *(_QWORD *)v185;
        v186 = v170[10];
        v187 = (char *)a1 + v186;
        v188 = (char *)a2 + v186;
        v72 = type metadata accessor for SpeakableString();
        v73 = *(_QWORD *)(v72 - 8);
        v189 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
        if (v189(v188, 1, v72))
        {
          v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v187, v188, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v187, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + v170[11]) = *(_OWORD *)((char *)a2 + v170[11]);
        *(_OWORD *)((char *)a1 + v170[12]) = *(_OWORD *)((char *)a2 + v170[12]);
        *(_OWORD *)((char *)a1 + v170[13]) = *(_OWORD *)((char *)a2 + v170[13]);
        *(_OWORD *)((char *)a1 + v170[14]) = *(_OWORD *)((char *)a2 + v170[14]);
        *(_OWORD *)((char *)a1 + v170[15]) = *(_OWORD *)((char *)a2 + v170[15]);
        v212 = v170[16];
        v213 = (char *)a1 + v212;
        v214 = (char *)a2 + v212;
        if (v189((char *)a2 + v212, 1, v72))
        {
          v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v213, v214, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v213, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + v170[17]) = *(_OWORD *)((char *)a2 + v170[17]);
        v217 = v170[18];
        v39 = (char *)a1 + v217;
        v40 = (char *)a2 + v217;
        v192 = type metadata accessor for SnippetHeaderModel();
        v193 = *(_QWORD *)(v192 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
        {
LABEL_79:
          v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
        }
        else
        {
LABEL_97:
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v39, v40, v72);
          *(_OWORD *)&v39[*(int *)(v192 + 20)] = *(_OWORD *)&v40[*(int *)(v192 + 20)];
          *(_OWORD *)&v39[*(int *)(v192 + 24)] = *(_OWORD *)&v40[*(int *)(v192 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v39, 0, 1, v192);
        }
LABEL_98:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for WellnessSnippets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for WellnessSnippets()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for WellnessSnippets()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = type metadata accessor for OxygenSaturationQueryModel();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for BloodPressureQueryModel();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for BloodPressureLogModel();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for CycleTrackingLogModel();
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for GenericButtonModel();
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for GenericMedCompletedLogModel();
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for HealthDataLogModel();
              if (v7 <= 0x3F)
              {
                result = type metadata accessor for GenericQueryModel();
                if (v8 <= 0x3F)
                {
                  result = type metadata accessor for HeightQueryModel();
                  if (v9 <= 0x3F)
                  {
                    result = type metadata accessor for SingleActivitySummaryModel();
                    if (v10 <= 0x3F)
                    {
                      result = type metadata accessor for SleepQueryModel();
                      if (v11 <= 0x3F)
                      {
                        result = type metadata accessor for SpecificMedCompletedLogModel();
                        if (v12 <= 0x3F)
                        {
                          result = type metadata accessor for TemperatureQueryModel();
                          if (v13 <= 0x3F)
                          {
                            swift_initEnumMetadataMultiPayload();
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WellnessSnippets.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_24A48BB10 + 4 * byte_24A4E7E49[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_24A48BB44 + 4 * byte_24A4E7E44[v4]))();
}

uint64_t sub_24A48BB44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A48BB4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A48BB54);
  return result;
}

uint64_t sub_24A48BB60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A48BB68);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_24A48BB6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A48BB74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for WellnessSnippets.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for WellnessSnippets.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for WellnessSnippets.CodingKeys()
{
  return &unk_251BD1EE8;
}

uint64_t getEnumTag for WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 0;
}

void *type metadata accessor for WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return &unk_251BD1F78;
}

void *type metadata accessor for WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  return &unk_251BD2008;
}

void *type metadata accessor for WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  return &unk_251BD2098;
}

void *type metadata accessor for WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  return &unk_251BD2128;
}

void *type metadata accessor for WellnessSnippets.GenericButtonCodingKeys()
{
  return &unk_251BD21B8;
}

void *type metadata accessor for WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  return &unk_251BD2248;
}

void *type metadata accessor for WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  return &unk_251BD22D8;
}

void *type metadata accessor for WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  return &unk_251BD2368;
}

void *type metadata accessor for WellnessSnippets.GenericDataQueryCodingKeys()
{
  return &unk_251BD23F8;
}

void *type metadata accessor for WellnessSnippets.HeightDataQueryCodingKeys()
{
  return &unk_251BD2488;
}

void *type metadata accessor for WellnessSnippets.PhoneRingsCodingKeys()
{
  return &unk_251BD2518;
}

void *type metadata accessor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  return &unk_251BD25A8;
}

void *type metadata accessor for WellnessSnippets.SleepQueryCodingKeys()
{
  return &unk_251BD2638;
}

void *type metadata accessor for WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  return &unk_251BD26C8;
}

void *type metadata accessor for WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  return &unk_251BD2758;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets.BloodOxygenDataQueryCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for WellnessSnippets.BloodOxygenDataQueryCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A48BD34 + 4 * byte_24A4E7E4E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A48BD54 + 4 * byte_24A4E7E53[v4]))();
}

_BYTE *sub_24A48BD34(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A48BD54(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A48BD5C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A48BD64(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A48BD6C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A48BD74(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for WellnessSnippets.WatchRingsCodingKeys()
{
  return &unk_251BD27E8;
}

uint64_t specialized WellnessSnippets.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F3850
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000024A4F3870
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F3890
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F38B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x42636972656E6567 && a2 == 0xED00006E6F747475
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024A4F38D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000024A4F38F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3910
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A4F3930
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6144746867696568 && a2 == 0xEF79726575516174
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E6952656E6F6870 && a2 == 0xEA00000000007367
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024A4F3950
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6575517065656C73 && a2 == 0xEA00000000007972
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A4F3970
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F3990
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6E69526863746177 && a2 == 0xEA00000000007367)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t SleepQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t SleepQueryModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*SleepQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for SleepQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 20), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t type metadata accessor for SleepQueryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SleepQueryModel;
  if (!type metadata singleton initialization cache for SleepQueryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SleepQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for SleepQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 20), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t outlined assign with take of AppPunchout?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*SleepQueryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.dateLabel.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.sleepTypeLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.sleepTypeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.sleepTypeLabel.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.dataLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.dataLabel.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeAsleepLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeAsleepLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleepLabel.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeInBedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeInBedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBedLabel.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeAsleep.getter()
{
  type metadata accessor for SleepQueryModel();
  return swift_retain();
}

uint64_t SleepQueryModel.avgTimeAsleep.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SleepQueryModel() + 44);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleep.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeInBed.getter()
{
  type metadata accessor for SleepQueryModel();
  return swift_retain();
}

uint64_t SleepQueryModel.avgTimeInBed.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SleepQueryModel() + 48);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBed.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.totalTimeAsleep.getter()
{
  type metadata accessor for SleepQueryModel();
  return swift_retain();
}

uint64_t SleepQueryModel.totalTimeAsleep.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SleepQueryModel() + 52);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.totalTimeAsleep.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.totalTimeInBed.getter()
{
  type metadata accessor for SleepQueryModel();
  return swift_retain();
}

uint64_t SleepQueryModel.totalTimeInBed.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SleepQueryModel() + 56);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.totalTimeInBed.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.sleepDuration.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.sleepDuration.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.sleepDuration.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeAsleepData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeAsleepData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 64));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleepData.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeInBedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeInBedData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 68));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBedData.modify())()
{
  type metadata accessor for SleepQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.init(snippetHeaderModel:dateLabel:sleepTypeLabel:dataLabel:avgTimeAsleepLabel:avgTimeInBedLabel:avgTimeAsleep:avgTimeInBed:totalTimeAsleep:totalTimeInBed:url:sleepDuration:avgTimeAsleepData:avgTimeInBedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *Model;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v53 = a4;
  v54 = a5;
  v51 = a2;
  v52 = a3;
  v62 = a14;
  v63 = a15;
  v60 = a8;
  v61 = a13;
  v58 = a7;
  v59 = a12;
  v56 = a6;
  v57 = a11;
  v55 = a10;
  v64 = a16;
  v49 = a17;
  v50 = a1;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = type metadata accessor for AppPunchout();
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v45(a9, 1, 1, v21);
  Model = (int *)type metadata accessor for SleepQueryModel();
  v44 = a9 + Model[5];
  v23 = v44;
  v24 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = (_QWORD *)(a9 + Model[6]);
  *v25 = 0;
  v25[1] = 0;
  v26 = (_QWORD *)(a9 + Model[7]);
  *v26 = 0;
  v26[1] = 0;
  v27 = (_QWORD *)(a9 + Model[8]);
  *v27 = 0;
  v27[1] = 0;
  v28 = (_QWORD *)(a9 + Model[9]);
  *v28 = 0;
  v28[1] = 0;
  v29 = (_QWORD *)(a9 + Model[10]);
  *v29 = 0;
  v29[1] = 0;
  v30 = Model[11];
  *(_QWORD *)(a9 + v30) = 0;
  v46 = Model[12];
  *(_QWORD *)(a9 + v46) = 0;
  v47 = Model[13];
  *(_QWORD *)(a9 + v47) = 0;
  v48 = Model[14];
  *(_QWORD *)(a9 + v48) = 0;
  v31 = (_QWORD *)(a9 + Model[15]);
  *v31 = 0;
  v31[1] = 0;
  v32 = (_QWORD *)(a9 + Model[16]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (_QWORD *)(a9 + Model[17]);
  *v33 = 0;
  v33[1] = 0;
  v34 = v49;
  SleepQueryModel.createAppPunchout(url:)(v49);
  outlined destroy of Font.Design?(v34, &demangling cache variable for type metadata for URL?);
  v45((uint64_t)v20, 0, 1, v21);
  outlined assign with take of AppPunchout?((uint64_t)v20, a9, &demangling cache variable for type metadata for AppPunchout?);
  outlined assign with take of AppPunchout?(v50, v44, &demangling cache variable for type metadata for SnippetHeaderModel?);
  swift_bridgeObjectRelease();
  v35 = v52;
  *v25 = v51;
  v25[1] = v35;
  swift_bridgeObjectRelease();
  v36 = v54;
  *v26 = v53;
  v26[1] = v36;
  swift_bridgeObjectRelease();
  v37 = v58;
  *v27 = v56;
  v27[1] = v37;
  swift_bridgeObjectRelease();
  v38 = v55;
  *v28 = v60;
  v28[1] = v38;
  swift_bridgeObjectRelease();
  v39 = v59;
  *v29 = v57;
  v29[1] = v39;
  swift_release();
  *(_QWORD *)(a9 + v30) = v61;
  v40 = v46;
  swift_release();
  *(_QWORD *)(a9 + v40) = v62;
  v41 = v47;
  swift_release();
  *(_QWORD *)(a9 + v41) = v63;
  v42 = v48;
  result = swift_release();
  *(_QWORD *)(a9 + v42) = v64;
  return result;
}

uint64_t SleepQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

Swift::String_optional __swiftcall SleepQueryModel.fetchSleepDuration()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int *Model;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  Swift::String_optional result;
  uint64_t v45;
  char *v46;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v45 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v45 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v45 - v11;
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v45 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v45 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v45 - v24;
  Model = (int *)type metadata accessor for SleepQueryModel();
  if (*(_QWORD *)(v1 + Model[11]))
  {
    swift_retain();
    dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      outlined destroy of Font.Design?((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
LABEL_16:
      swift_release();
      goto LABEL_17;
    }
    v30 = v13;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v25, v12, v13);
    v31 = SpeakableString.print.getter();
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, v30);
    swift_release();
    goto LABEL_18;
  }
  v27 = v7;
  v28 = v46;
  if (!*(_QWORD *)(v1 + Model[12]))
  {
    if (*(_QWORD *)(v1 + Model[13]))
    {
      swift_retain();
      v34 = (uint64_t)v27;
      dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
      v35 = v27;
      v36 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v35, 1, v13) == 1)
      {
        v37 = v34;
LABEL_15:
        outlined destroy of Font.Design?(v37, &demangling cache variable for type metadata for SpeakableString?);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v20, v34, v13);
      v31 = SpeakableString.print.getter();
      v33 = v42;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v36);
    }
    else
    {
      if (!*(_QWORD *)(v1 + Model[14]))
      {
LABEL_17:
        v31 = 0;
        v33 = 0;
        goto LABEL_18;
      }
      swift_retain();
      dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
      v39 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v28, 1, v13) == 1)
      {
        v37 = (uint64_t)v28;
        goto LABEL_15;
      }
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v28, v13);
      v31 = SpeakableString.print.getter();
      v33 = v43;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v39);
    }
    swift_release();
    goto LABEL_18;
  }
  swift_retain();
  dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
  v29 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
    goto LABEL_16;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v10, v13);
  v31 = SpeakableString.print.getter();
  v33 = v38;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v29);
  swift_release();
LABEL_18:
  v40 = v31;
  v41 = v33;
  result.value._object = v41;
  result.value._countAndFlagsBits = v40;
  return result;
}

uint64_t SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SpeakableString();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v2, &demangling cache variable for type metadata for SpeakableString?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    v7 = SpeakableString.print.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

uint64_t SleepQueryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A48E460 + 4 * byte_24A4E9370[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

unint64_t sub_24A48E460()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SleepQueryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return SleepQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SleepQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SleepQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SleepQueryModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SleepQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SleepQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SleepQueryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *Model;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SleepQueryModel.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    Model = (int *)type metadata accessor for SleepQueryModel();
    LOBYTE(v13) = 1;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13 = *(_QWORD *)(v3 + Model[11]);
    v12 = 7;
    type metadata accessor for DialogDuration();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, (uint64_t (*)(uint64_t))MEMORY[0x24BE92770], MEMORY[0x24BE92780]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13 = *(_QWORD *)(v3 + Model[12]);
    v12 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13 = *(_QWORD *)(v3 + Model[13]);
    v12 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13 = *(_QWORD *)(v3 + Model[14]);
    v12 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SleepQueryModel.CodingKeys, &unk_251BD2950);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SleepQueryModel.CodingKeys, &unk_251BD2950);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SleepQueryModel.CodingKeys, &unk_251BD2950);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SleepQueryModel.CodingKeys, &unk_251BD2950);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

uint64_t SleepQueryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *Model;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  char *v101;
  char v102;
  char *v103;

  v84 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v95 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v5);
  v96 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SleepQueryModel.CodingKeys>);
  v94 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8](v97);
  v101 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for SleepQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AppPunchout();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v93 = v11;
  v12(v10, 1, 1);
  v13 = (uint64_t)&v10[Model[5]];
  v14 = type metadata accessor for SnippetHeaderModel();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v91 = v13;
  v92 = v14;
  v15(v13, 1, 1);
  v16 = &v10[Model[6]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v90 = v16;
  v17 = &v10[Model[7]];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v89 = v17;
  v18 = &v10[Model[8]];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v19 = &v10[Model[9]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v20 = &v10[Model[10]];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v88 = Model[11];
  *(_QWORD *)&v10[v88] = 0;
  v87 = Model[12];
  *(_QWORD *)&v10[v87] = 0;
  v86 = Model[13];
  *(_QWORD *)&v10[v86] = 0;
  v85 = Model[14];
  *(_QWORD *)&v10[v85] = 0;
  v21 = &v10[Model[15]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = &v10[Model[16]];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v23 = Model[17];
  v100 = v10;
  v24 = &v10[v23];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v25 = a1[3];
  v98 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();
  v26 = v99;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    v30 = (uint64_t)v100;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v98);
    v77 = v30;
  }
  else
  {
    v99 = v18;
    v27 = (uint64_t)v95;
    v82 = v20;
    v83 = v19;
    v81 = v21;
    v80 = v22;
    v79 = v24;
    v28 = v94;
    LOBYTE(v103) = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v29 = v96;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v32 = (uint64_t)v29;
    v33 = (uint64_t)v100;
    outlined assign with take of AppPunchout?(v32, (uint64_t)v100, &demangling cache variable for type metadata for AppPunchout?);
    LOBYTE(v103) = 1;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v27, v91, &demangling cache variable for type metadata for SnippetHeaderModel?);
    LOBYTE(v103) = 2;
    v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v36 = v35;
    v37 = (uint64_t *)v90;
    swift_bridgeObjectRelease();
    *v37 = v34;
    v37[1] = v36;
    LOBYTE(v103) = 3;
    v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v40 = v39;
    v41 = (uint64_t *)v89;
    swift_bridgeObjectRelease();
    *v41 = v38;
    v41[1] = v40;
    LOBYTE(v103) = 4;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v44 = v43;
    v45 = (uint64_t *)v99;
    swift_bridgeObjectRelease();
    *v45 = v42;
    v45[1] = v44;
    LOBYTE(v103) = 5;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v48 = v47;
    v49 = (uint64_t *)v83;
    swift_bridgeObjectRelease();
    *v49 = v46;
    v49[1] = v48;
    LOBYTE(v103) = 6;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v52 = v51;
    v53 = (uint64_t *)v82;
    swift_bridgeObjectRelease();
    *v53 = v50;
    v53[1] = v52;
    type metadata accessor for DialogDuration();
    v102 = 7;
    v54 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, (uint64_t (*)(uint64_t))MEMORY[0x24BE92770], MEMORY[0x24BE92788]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v99 = v103;
    v55 = v88;
    swift_release();
    *(_QWORD *)(v33 + v55) = v99;
    v102 = 8;
    v99 = (char *)v54;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v56 = v103;
    v57 = v87;
    swift_release();
    *(_QWORD *)(v33 + v57) = v56;
    v102 = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v58 = v103;
    v59 = (uint64_t)v100;
    v60 = v86;
    swift_release();
    *(_QWORD *)(v59 + v60) = v58;
    v102 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v61 = v103;
    v62 = (uint64_t)v100;
    v63 = v85;
    swift_release();
    *(_QWORD *)(v62 + v63) = v61;
    LOBYTE(v103) = 11;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v66 = v65;
    v67 = (uint64_t *)v81;
    swift_bridgeObjectRelease();
    *v67 = v64;
    v67[1] = v66;
    LOBYTE(v103) = 12;
    v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v70 = v69;
    v71 = (uint64_t *)v80;
    swift_bridgeObjectRelease();
    *v71 = v68;
    v71[1] = v70;
    LOBYTE(v103) = 13;
    v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v74 = v73;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v101, v97);
    v75 = (uint64_t *)v79;
    swift_bridgeObjectRelease();
    *v75 = v72;
    v75[1] = v74;
    v76 = (uint64_t)v100;
    outlined init with copy of SleepQueryModel((uint64_t)v100, v84);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v98);
    v77 = v76;
  }
  return outlined destroy of GenericMedCompletedLogModel(v77, (uint64_t (*)(_QWORD))type metadata accessor for SleepQueryModel);
}

uint64_t outlined init with copy of SleepQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model;

  Model = type metadata accessor for SleepQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in SleepQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SleepQueryModel and conformance SleepQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for SleepQueryModel, (uint64_t)&protocol conformance descriptor for SleepQueryModel);
}

uint64_t base witness table accessor for Encodable in SleepQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SleepQueryModel and conformance SleepQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for SleepQueryModel, (uint64_t)&protocol conformance descriptor for SleepQueryModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SleepQueryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SleepQueryModel(_QWORD *a1)
{
  return SleepQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for SnippetHeaderModel();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
      v18 = *(int *)(v14 + 20);
      v19 = &v12[v18];
      v20 = &v13[v18];
      v21 = *((_QWORD *)v20 + 1);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *((_QWORD *)v19 + 1) = v21;
      v22 = *(int *)(v14 + 24);
      v23 = &v12[v22];
      v24 = &v13[v22];
      v25 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26(v12, 0, 1, v14);
    }
    v27 = a3[6];
    v28 = a3[7];
    v29 = (uint64_t *)((char *)a1 + v27);
    v30 = (uint64_t *)((char *)a2 + v27);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = (uint64_t *)((char *)a1 + v28);
    v33 = (uint64_t *)((char *)a2 + v28);
    v61 = v33[1];
    *v32 = *v33;
    v32[1] = v61;
    v34 = a3[8];
    v35 = a3[9];
    v36 = (uint64_t *)((char *)a1 + v34);
    v37 = (uint64_t *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (uint64_t *)((char *)a1 + v35);
    v40 = (uint64_t *)((char *)a2 + v35);
    v60 = v40[1];
    *v39 = *v40;
    v39[1] = v60;
    v41 = a3[10];
    v42 = a3[11];
    v43 = (uint64_t *)((char *)a1 + v41);
    v44 = (uint64_t *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    *(uint64_t *)((char *)a1 + v42) = *(uint64_t *)((char *)a2 + v42);
    v46 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v46) = *(uint64_t *)((char *)a2 + v46);
    v47 = a3[15];
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    v48 = (uint64_t *)((char *)a1 + v47);
    v49 = (uint64_t *)((char *)a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = a3[16];
    v52 = a3[17];
    v53 = (uint64_t *)((char *)a1 + v51);
    v54 = (uint64_t *)((char *)a2 + v51);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = (uint64_t *)((char *)a1 + v52);
    v57 = (uint64_t *)((char *)a2 + v52);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SleepQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SnippetHeaderModel();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v10, v11, v15);
    v16 = *(int *)(v12 + 20);
    v17 = &v10[v16];
    v18 = &v11[v16];
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = *(int *)(v12 + 24);
    v21 = &v10[v20];
    v22 = &v11[v20];
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v10, 0, 1, v12);
  }
  v25 = a3[6];
  v26 = a3[7];
  v27 = &a1[v25];
  v28 = &a2[v25];
  v29 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = v29;
  v30 = &a1[v26];
  v31 = &a2[v26];
  v59 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v59;
  v32 = a3[8];
  v33 = a3[9];
  v34 = &a1[v32];
  v35 = &a2[v32];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  v37 = &a1[v33];
  v38 = &a2[v33];
  v58 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v58;
  v39 = a3[10];
  v40 = a3[11];
  v41 = &a1[v39];
  v42 = &a2[v39];
  v43 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = v43;
  *(_QWORD *)&a1[v40] = *(_QWORD *)&a2[v40];
  v44 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_QWORD *)&a1[v44] = *(_QWORD *)&a2[v44];
  v45 = a3[15];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *((_QWORD *)v47 + 1);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *((_QWORD *)v46 + 1) = v48;
  v49 = a3[16];
  v50 = a3[17];
  v51 = &a1[v49];
  v52 = &a2[v49];
  v53 = *((_QWORD *)v52 + 1);
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = v53;
  v54 = &a1[v50];
  v55 = &a2[v50];
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SnippetHeaderModel();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v54 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v13, v14, v54);
      v55 = *(int *)(v15 + 20);
      v56 = &v13[v55];
      v57 = &v14[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v58 = *(int *)(v15 + 24);
      v59 = &v13[v58];
      v60 = &v14[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = *((_QWORD *)v60 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  v20 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v13, v14, v20);
  v21 = *(int *)(v15 + 20);
  v22 = &v13[v21];
  v23 = &v14[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  v24 = *(int *)(v15 + 24);
  v25 = &v13[v24];
  v26 = &v14[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
  v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v13, 0, 1, v15);
LABEL_13:
  v29 = a3[6];
  v30 = &a1[v29];
  v31 = &a2[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = a3[7];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = a3[8];
  v36 = &a1[v35];
  v37 = &a2[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[9];
  v39 = &a1[v38];
  v40 = &a2[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[10];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  swift_retain();
  swift_release();
  v44 = a3[15];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3[16];
  v48 = &a1[v47];
  v49 = &a2[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = a3[17];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SnippetHeaderModel();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(_OWORD *)&v10[*(int *)(v12 + 24)] = *(_OWORD *)&v11[*(int *)(v12 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  v17 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  v18 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v19 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  v20 = a3[15];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  v21 = a3[17];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  return a1;
}

char *assignWithTake for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SnippetHeaderModel();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v63 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v13, v14, v63);
      v64 = *(int *)(v15 + 20);
      v65 = &v13[v64];
      v66 = &v14[v64];
      v68 = *(_QWORD *)v66;
      v67 = *((_QWORD *)v66 + 1);
      *(_QWORD *)v65 = v68;
      *((_QWORD *)v65 + 1) = v67;
      swift_bridgeObjectRelease();
      v69 = *(int *)(v15 + 24);
      v70 = &v13[v69];
      v71 = &v14[v69];
      v73 = *(_QWORD *)v71;
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = v73;
      *((_QWORD *)v70 + 1) = v72;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  v20 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  *(_OWORD *)&v13[*(int *)(v15 + 24)] = *(_OWORD *)&v14[*(int *)(v15 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_13:
  v22 = a3[6];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v27 = a3[7];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  v32 = a3[8];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v37 = a3[9];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v41 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v42 = a3[10];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_release();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_release();
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  swift_release();
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  swift_release();
  v47 = a3[15];
  v48 = &a1[v47];
  v49 = &a2[v47];
  v51 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  v52 = a3[16];
  v53 = &a1[v52];
  v54 = &a2[v52];
  v56 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  *(_QWORD *)v53 = v56;
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  v57 = a3[17];
  v58 = &a1[v57];
  v59 = &a2[v57];
  v61 = *(_QWORD *)v59;
  v60 = *((_QWORD *)v59 + 1);
  *(_QWORD *)v58 = v61;
  *((_QWORD *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepQueryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A490344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepQueryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A490410(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

void type metadata completion function for SleepQueryModel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for AppPunchout?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t getEnumTagSinglePayload for SleepQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepQueryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_24A4906B4 + 4 * byte_24A4E9383[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_24A4906E8 + 4 * byte_24A4E937E[v4]))();
}

uint64_t sub_24A4906E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4906F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4906F8);
  return result;
}

uint64_t sub_24A490704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A49070CLL);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_24A490710(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A490718(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SleepQueryModel.CodingKeys()
{
  return &unk_251BD2950;
}

uint64_t specialized SleepQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7079547065656C73 && a2 == 0xEE006C6562614C65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F39F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x41656D6954677661 && a2 == 0xED00007065656C73
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x49656D6954677661 && a2 == 0xEC0000006465426ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6D69546C61746F74 && a2 == 0xEF7065656C734165
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6D69546C61746F74 && a2 == 0xEE006465426E4965
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7275447065656C73 && a2 == 0xED00006E6F697461
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F3A10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A4F3A30)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

uint64_t SpecificMedCompletedLogModel.medStatus.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SpecificMedCompletedLogModel.time.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.time.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.time.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.requestedMedName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.requestedMedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedName.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.requestedMedSchedule.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.requestedMedSchedule.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedSchedule.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t type metadata accessor for SpecificMedCompletedLogModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SpecificMedCompletedLogModel;
  if (!type metadata singleton initialization cache for SpecificMedCompletedLogModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SpecificMedCompletedLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 32), &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*SpecificMedCompletedLogModel.appPunchout.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dosage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 36));
}

uint64_t SpecificMedCompletedLogModel.dosage.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for SpecificMedCompletedLogModel();
  v6 = v2 + *(int *)(result + 36);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosage.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dosageString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.dosageString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosageString.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dosageUnit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.dosageUnit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosageUnit.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.medType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.medType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.medType.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.sashBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.sashBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.sashBundleID.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 56));
}

uint64_t SpecificMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SpecificMedCompletedLogModel();
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dontDisplayGranularTime.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.isSmartEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 60));
}

uint64_t SpecificMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SpecificMedCompletedLogModel();
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.isSmartEnabled.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.loggedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 64));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.loggedLabel.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.skippedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.skippedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 68));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.skippedLabel.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.takenLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.takenLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 72));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.takenLabel.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 76), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t SpecificMedCompletedLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 76), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*SpecificMedCompletedLogModel.snippetHeaderModel.modify())()
{
  type metadata accessor for SpecificMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v43;
  uint64_t v44;
  Class isa;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v82 = a8;
  v80 = a7;
  v78 = a6;
  v75 = a5;
  v77 = a4;
  v76 = a3;
  v101 = a22;
  v102 = a23;
  v99 = a20;
  v100 = a21;
  v97 = a18;
  v98 = a19;
  v96 = a17;
  v94 = a15;
  v95 = a16;
  v92 = a13;
  v93 = a14;
  v90 = a12;
  v86 = a11;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v26);
  v91 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0xE000000000000000;
  v28 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  v29 = a9 + v28[8];
  v30 = type metadata accessor for AppPunchout();
  v31 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v88 = v30;
  v89 = v29;
  v87 = v31;
  ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v29, 1, 1);
  v32 = a9 + v28[9];
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 1;
  v33 = (uint64_t *)(a9 + v28[10]);
  *v33 = 0;
  v33[1] = 0xE000000000000000;
  v34 = (_QWORD *)(a9 + v28[11]);
  *v34 = 0;
  v34[1] = 0;
  v74 = v34;
  v35 = (uint64_t *)(a9 + v28[12]);
  *v35 = 0;
  v35[1] = 0xE000000000000000;
  v73 = v35;
  v36 = (_QWORD *)(a9 + v28[13]);
  *v36 = 0xD000000000000010;
  v36[1] = 0x800000024A4F3A70;
  v85 = v36;
  v81 = v28[14];
  *(_BYTE *)(a9 + v81) = 0;
  v79 = v28[15];
  *(_BYTE *)(a9 + v79) = 0;
  v37 = (_QWORD *)(a9 + v28[16]);
  *v37 = 0;
  v37[1] = 0;
  v38 = (_QWORD *)(a9 + v28[17]);
  *v38 = 0;
  v38[1] = 0;
  v39 = (_QWORD *)(a9 + v28[18]);
  *v39 = 0;
  v39[1] = 0;
  v84 = v39;
  v40 = a9 + v28[19];
  v41 = type metadata accessor for SnippetHeaderModel();
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v83 = v40;
  v42(v40, 1, 1, v41);
  *(_BYTE *)a9 = a1;
  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  objc_msgSend(v43, sel_setTimeStyle_, 1);
  v44 = a2;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v46 = objc_msgSend(v43, sel_stringFromDate_, isa);

  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v49 = v48;

  v50 = v75;
  *(_QWORD *)(a9 + 8) = v47;
  *(_QWORD *)(a9 + 16) = v49;
  v51 = v77;
  *(_QWORD *)(a9 + 24) = v76;
  *(_QWORD *)(a9 + 32) = v51;
  v52 = v78;
  *(_QWORD *)(a9 + 40) = v50;
  *(_QWORD *)(a9 + 48) = v52;
  if (v52)
    v53 = 0;
  else
    v53 = v80;
  v54 = (v52 != 0) | v82;
  *(_QWORD *)v32 = v53;
  v55 = v54 & 1;
  *(_BYTE *)(v32 + 8) = v54 & 1;
  v56 = v52;
  swift_bridgeObjectRetain();
  *v33 = SpecificMedCompletedLogModel.getFormattedDosageString(_:)(v53, v55);
  v33[1] = v57;
  if (v56)
  {
    swift_bridgeObjectRelease();
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v58 = a10;
    v56 = 0xE900000000000064;
    v50 = 0x656465654E207341;
    v59 = v86;
  }
  v60 = v74;
  *v74 = v58;
  v60[1] = v59;
  v61 = v73;
  *v73 = v50;
  v61[1] = v56;
  v63 = v90;
  v62 = (uint64_t)v91;
  SleepQueryModel.createAppPunchout(url:)(v90);
  outlined destroy of Font.Design?(v63, &demangling cache variable for type metadata for URL?);
  v64 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v44, v64);
  v87(v62, 0, 1, v88);
  outlined assign with take of AppPunchout?(v62, v89, &demangling cache variable for type metadata for AppPunchout?);
  v65 = v85;
  swift_bridgeObjectRelease();
  v66 = v93;
  *v65 = v92;
  v65[1] = v66;
  *(_BYTE *)(a9 + v81) = v94 & 1;
  *(_BYTE *)(a9 + v79) = v95 & 1;
  swift_bridgeObjectRelease();
  v67 = v97;
  *v37 = v96;
  v37[1] = v67;
  swift_bridgeObjectRelease();
  v68 = v99;
  *v38 = v98;
  v38[1] = v68;
  v69 = v84;
  swift_bridgeObjectRelease();
  v71 = v101;
  v70 = v102;
  *v69 = v100;
  v69[1] = v71;
  return outlined assign with take of AppPunchout?(v70, v83, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t SpecificMedCompletedLogModel.getFormattedDosageString(_:)(uint64_t result, char a2)
{
  uint64_t v2;
  double v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a2 & 1) != 0)
    return 0;
  v2 = result;
  v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v6 = swift_allocObject();
    v7 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v6 + 16) = xmmword_24A4E95E0;
    v8 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = v8;
    *(_QWORD *)(v6 + 32) = v2;
    v9 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    return v9;
  }
  if ((~result & 0x7FF0000000000000) != 0)
    return dispatch thunk of CustomStringConvertible.description.getter();
  __break(1u);
  return result;
}

uint64_t SpecificMedCompletedLogModel.init(medStatus:givenTimeString:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v64 = a5;
  v65 = a8;
  v63 = a4;
  v62 = a3;
  v61 = a2;
  HIDWORD(v60) = a1;
  v84 = a23;
  v85 = a24;
  v82 = a21;
  v83 = a22;
  v80 = a19;
  v81 = a20;
  v79 = a18;
  v77 = a16;
  v78 = a17;
  v75 = a14;
  v76 = a15;
  v74 = a13;
  v67 = a12;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v27);
  v73 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  v30 = a9 + v29[8];
  v31 = type metadata accessor for AppPunchout();
  v32 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v71 = v31;
  v72 = v30;
  v69 = v32;
  ((void (*)(uint64_t, uint64_t, uint64_t))v32)(v30, 1, 1);
  v33 = (_QWORD *)(a9 + v29[13]);
  *v33 = 0xD000000000000010;
  v33[1] = 0x800000024A4F3A70;
  v68 = v29[14];
  *(_BYTE *)(a9 + v68) = 0;
  v66 = v29[15];
  *(_BYTE *)(a9 + v66) = 0;
  v34 = (_QWORD *)(a9 + v29[16]);
  *v34 = 0;
  v34[1] = 0;
  v35 = (_QWORD *)(a9 + v29[17]);
  *v35 = 0;
  v35[1] = 0;
  v36 = (_QWORD *)(a9 + v29[18]);
  *v36 = 0;
  v36[1] = 0;
  v37 = a9 + v29[19];
  v38 = type metadata accessor for SnippetHeaderModel();
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v70 = v37;
  v39(v37, 1, 1, v38);
  *(_BYTE *)a9 = BYTE4(v60);
  v40 = v62;
  *(_QWORD *)(a9 + 8) = v61;
  *(_QWORD *)(a9 + 16) = v40;
  v41 = v64;
  v42 = v65;
  *(_QWORD *)(a9 + 24) = v63;
  *(_QWORD *)(a9 + 32) = v41;
  v64 = a6;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  if (a7)
    v43 = 0;
  else
    v43 = v42;
  v44 = a9 + v29[9];
  v45 = (uint64_t *)(a9 + v29[10]);
  v65 = v29[11];
  *(_QWORD *)v44 = v43;
  v46 = (a7 != 0) | a10 & 1;
  *(_BYTE *)(v44 + 8) = v46;
  swift_bridgeObjectRetain();
  *v45 = SpecificMedCompletedLogModel.getFormattedDosageString(_:)(v43, v46);
  v45[1] = v47;
  if (a7)
  {
    swift_bridgeObjectRelease();
    v48 = 0;
    v49 = 0;
    v50 = v64;
  }
  else
  {
    v48 = a11;
    a7 = 0xE900000000000064;
    v50 = 0x656465654E207341;
    v49 = v67;
  }
  v51 = (_QWORD *)(a9 + v65);
  *v51 = v48;
  v51[1] = v49;
  v52 = (uint64_t *)(a9 + v29[12]);
  *v52 = v50;
  v52[1] = a7;
  v54 = (uint64_t)v73;
  v53 = v74;
  SleepQueryModel.createAppPunchout(url:)(v74);
  outlined destroy of Font.Design?(v53, &demangling cache variable for type metadata for URL?);
  v69(v54, 0, 1, v71);
  outlined assign with take of AppPunchout?(v54, v72, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  *v33 = v75;
  v33[1] = v76;
  *(_BYTE *)(a9 + v68) = v77 & 1;
  *(_BYTE *)(a9 + v66) = v78 & 1;
  swift_bridgeObjectRelease();
  v55 = v80;
  *v34 = v79;
  v34[1] = v55;
  swift_bridgeObjectRelease();
  v56 = v82;
  *v35 = v81;
  v35[1] = v56;
  swift_bridgeObjectRelease();
  v58 = v84;
  v57 = v85;
  *v36 = v83;
  v36[1] = v58;
  return outlined assign with take of AppPunchout?(v57, v70, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t SpecificMedCompletedLogModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A492074 + 4 * byte_24A4E95F0[a1]))(0x757461745364656DLL, 0xE900000000000073);
}

uint64_t sub_24A492074()
{
  return 1701669236;
}

unint64_t sub_24A492084()
{
  return 0xD000000000000010;
}

unint64_t sub_24A4920A0()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpecificMedCompletedLogModel.CodingKeys()
{
  unsigned __int8 *v0;

  return SpecificMedCompletedLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpecificMedCompletedLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SpecificMedCompletedLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpecificMedCompletedLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpecificMedCompletedLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SpecificMedCompletedLogModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpecificMedCompletedLogModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for SpecificMedCompletedLogModel();
    v9 = 4;
    type metadata accessor for AppPunchout();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v9 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 15;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SpecificMedCompletedLogModel.CodingKeys, &unk_251BD2AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SpecificMedCompletedLogModel.CodingKeys, &unk_251BD2AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SpecificMedCompletedLogModel.CodingKeys, &unk_251BD2AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SpecificMedCompletedLogModel.CodingKeys, &unk_251BD2AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

uint64_t SpecificMedCompletedLogModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char v90;

  v71 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v72 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v5);
  v75 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpecificMedCompletedLogModel.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  v77 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0xE000000000000000;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  v15 = (uint64_t)&v14[*(int *)(v12 + 32)];
  v16 = type metadata accessor for AppPunchout();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v89 = v15;
  v74 = v16;
  v17(v15, 1, 1);
  v18 = &v14[v11[9]];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = &v14[v11[10]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0xE000000000000000;
  v88 = v19;
  v20 = &v14[v11[11]];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v87 = v20;
  v21 = &v14[v11[12]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0xE000000000000000;
  v86 = v21;
  v22 = &v14[v11[13]];
  *(_QWORD *)v22 = 0xD000000000000010;
  *((_QWORD *)v22 + 1) = 0x800000024A4F3A70;
  v73 = v11[14];
  v14[v73] = 0;
  v23 = v11[15];
  v14[v23] = 0;
  v24 = &v14[v11[16]];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v84 = v24;
  v85 = v22;
  v25 = &v14[v11[17]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v83 = v25;
  v26 = &v14[v11[18]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v80 = v26;
  v27 = (uint64_t)&v14[v11[19]];
  v28 = type metadata accessor for SnippetHeaderModel();
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v81 = v27;
  v29(v27, 1, 1, v28);
  v30 = a1[3];
  v82 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();
  v78 = v10;
  v31 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v31)
  {
    v36 = v89;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Font.Design?(v36, &demangling cache variable for type metadata for AppPunchout?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of Font.Design?(v81, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    v32 = (uint64_t)v75;
    v79 = v23;
    v90 = 0;
    *v14 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v90 = 1;
    *((_QWORD *)v14 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)v14 + 2) = v33;
    v90 = 2;
    *((_QWORD *)v14 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((_QWORD *)v14 + 4) = v34;
    v90 = 3;
    *((_QWORD *)v14 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((_QWORD *)v14 + 6) = v35;
    v90 = 4;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v32, v89, &demangling cache variable for type metadata for AppPunchout?);
    v90 = 5;
    *(_QWORD *)v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v18[8] = v37 & 1;
    v90 = 6;
    v38 = KeyedDecodingContainer.decode(_:forKey:)();
    v39 = (uint64_t *)v88;
    v41 = v40;
    swift_bridgeObjectRelease();
    *v39 = v38;
    v39[1] = v41;
    v90 = 7;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v43 = v87;
    v44 = v42;
    v46 = v45;
    swift_bridgeObjectRelease();
    *v43 = v44;
    v43[1] = v46;
    v90 = 8;
    v47 = KeyedDecodingContainer.decode(_:forKey:)();
    v49 = v48;
    v50 = (uint64_t *)v86;
    swift_bridgeObjectRelease();
    *v50 = v47;
    v50[1] = v49;
    v90 = 9;
    v51 = KeyedDecodingContainer.decode(_:forKey:)();
    v53 = v52;
    v54 = (uint64_t *)v85;
    swift_bridgeObjectRelease();
    *v54 = v51;
    v54[1] = v53;
    v90 = 10;
    v14[v73] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v90 = 11;
    v14[v79] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v90 = 12;
    v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v57 = v56;
    v58 = (uint64_t *)v84;
    swift_bridgeObjectRelease();
    *v58 = v55;
    v58[1] = v57;
    v90 = 13;
    v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v61 = v60;
    v62 = (uint64_t *)v83;
    swift_bridgeObjectRelease();
    *v62 = v59;
    v62[1] = v61;
    v90 = 14;
    v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v65 = v64;
    v66 = (uint64_t *)v80;
    swift_bridgeObjectRelease();
    *v66 = v63;
    v66[1] = v65;
    v90 = 15;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v67 = v76;
    v68 = v78;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v68, v67);
    outlined assign with take of AppPunchout?(v72, v81, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of SpecificMedCompletedLogModel((uint64_t)v14, v71);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v82);
    return outlined destroy of GenericMedCompletedLogModel((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
  }
}

uint64_t outlined init with copy of SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SpecificMedCompletedLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in SpecificMedCompletedLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel and conformance SpecificMedCompletedLogModel, (uint64_t (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel, (uint64_t)&protocol conformance descriptor for SpecificMedCompletedLogModel);
}

uint64_t base witness table accessor for Encodable in SpecificMedCompletedLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel and conformance SpecificMedCompletedLogModel, (uint64_t (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel, (uint64_t)&protocol conformance descriptor for SpecificMedCompletedLogModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpecificMedCompletedLogModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SpecificMedCompletedLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpecificMedCompletedLogModel(_QWORD *a1)
{
  return SpecificMedCompletedLogModel.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for SpecificMedCompletedLogModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *__dst;
  char *__dsta;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    v9 = a2[6];
    v10 = a3[8];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[5] = a2[5];
    a1[6] = v9;
    v12 = type metadata accessor for AppPunchout();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[9];
    v18 = a3[10];
    v19 = (char *)v4 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (_QWORD *)((char *)v4 + v18);
    v22 = (_QWORD *)((char *)a2 + v18);
    v66 = v22[1];
    *v21 = *v22;
    v21[1] = v66;
    v23 = a3[11];
    v24 = a3[12];
    v25 = (_QWORD *)((char *)v4 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (_QWORD *)((char *)v4 + v24);
    v29 = (_QWORD *)((char *)a2 + v24);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = a3[13];
    v32 = a3[14];
    v33 = (_QWORD *)((char *)v4 + v31);
    v34 = (_QWORD *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    *((_BYTE *)v4 + v32) = *((_BYTE *)a2 + v32);
    v36 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v37 = (_QWORD *)((char *)v4 + v36);
    v38 = (_QWORD *)((char *)a2 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = a3[17];
    v41 = a3[18];
    v42 = (_QWORD *)((char *)v4 + v40);
    v43 = (_QWORD *)((char *)a2 + v40);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = (_QWORD *)((char *)v4 + v41);
    v46 = (_QWORD *)((char *)a2 + v41);
    v47 = *v46;
    v48 = v46[1];
    v49 = a3[19];
    v50 = (char *)a2 + v49;
    __dsta = (char *)v4 + v49;
    *v45 = v47;
    v45[1] = v48;
    v51 = type metadata accessor for SnippetHeaderModel();
    v65 = *(_QWORD *)(v51 - 8);
    v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v52(v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dsta, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(__dsta, v50, v54);
      v55 = *(int *)(v51 + 20);
      v56 = &__dsta[v55];
      v57 = &v50[v55];
      v58 = *((_QWORD *)v57 + 1);
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *((_QWORD *)v56 + 1) = v58;
      v59 = *(int *)(v51 + 24);
      v60 = &__dsta[v59];
      v61 = &v50[v59];
      v62 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v62;
      v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v63(__dsta, 0, 1, v51);
    }
  }
  return v4;
}

uint64_t destroy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 76);
  v8 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void *__dst;
  char *__dsta;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a3[8];
  __dst = (void *)(a1 + v9);
  v10 = (const void *)(a2 + v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v11 = type metadata accessor for AppPunchout();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = a3[9];
  v16 = a3[10];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = (_QWORD *)(a1 + v16);
  v20 = (_QWORD *)(a2 + v16);
  v64 = v20[1];
  *v19 = *v20;
  v19[1] = v64;
  v21 = a3[11];
  v22 = a3[12];
  v23 = (_QWORD *)(a1 + v21);
  v24 = (_QWORD *)(a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (_QWORD *)(a1 + v22);
  v27 = (_QWORD *)(a2 + v22);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a3[13];
  v30 = a3[14];
  v31 = (_QWORD *)(a1 + v29);
  v32 = (_QWORD *)(a2 + v29);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v34 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = a3[17];
  v39 = a3[18];
  v40 = (_QWORD *)(a1 + v38);
  v41 = (_QWORD *)(a2 + v38);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = (_QWORD *)(a1 + v39);
  v44 = (uint64_t *)(a2 + v39);
  v45 = *v44;
  v46 = v44[1];
  v47 = a3[19];
  v48 = (char *)(a2 + v47);
  __dsta = (char *)(a1 + v47);
  *v43 = v45;
  v43[1] = v46;
  v49 = type metadata accessor for SnippetHeaderModel();
  v63 = *(_QWORD *)(v49 - 8);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v50(v48, 1, v49))
  {
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    v52 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(__dsta, v48, v52);
    v53 = *(int *)(v49 + 20);
    v54 = &__dsta[v53];
    v55 = &v48[v53];
    v56 = *((_QWORD *)v55 + 1);
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *((_QWORD *)v54 + 1) = v56;
    v57 = *(int *)(v49 + 24);
    v58 = &__dsta[v57];
    v59 = &v48[v57];
    v60 = *((_QWORD *)v59 + 1);
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = v60;
    v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v61(__dsta, 0, 1, v49);
  }
  return a1;
}

uint64_t assignWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for AppPunchout();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  *(_BYTE *)(v16 + 8) = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v18;
  v19 = a3[10];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[11];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[12];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = a3[13];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v31 = a3[16];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[17];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = a3[18];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3[19];
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  v43 = type metadata accessor for SnippetHeaderModel();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      v58 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 24))(v41, v42, v58);
      v59 = *(int *)(v43 + 20);
      v60 = &v41[v59];
      v61 = &v42[v59];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v62 = *(int *)(v43 + 24);
      v63 = &v41[v62];
      v64 = &v42[v62];
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v47)
  {
LABEL_12:
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    return a1;
  }
  v48 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v41, v42, v48);
  v49 = *(int *)(v43 + 20);
  v50 = &v41[v49];
  v51 = &v42[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  v52 = *(int *)(v43 + 24);
  v53 = &v41[v52];
  v54 = &v42[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  v55 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v41, 0, 1, v43);
  return a1;
}

uint64_t initializeWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for AppPunchout();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[9];
  v13 = a3[10];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v16 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v20 = a3[18];
  v19 = a3[19];
  v21 = (char *)(a1 + v19);
  v22 = (char *)(a2 + v19);
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v23 = type metadata accessor for SnippetHeaderModel();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
    *(_OWORD *)&v21[*(int *)(v23 + 20)] = *(_OWORD *)&v22[*(int *)(v23 + 20)];
    *(_OWORD *)&v21[*(int *)(v23 + 24)] = *(_OWORD *)&v22[*(int *)(v23 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

uint64_t assignWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9 = a3[8];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for AppPunchout();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = a3[9];
  v19 = a3[10];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = (_QWORD *)(a1 + v19);
  v23 = (uint64_t *)(a2 + v19);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = a3[12];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v36 = a3[13];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  v41 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v41) = *(_BYTE *)(a2 + v41);
  v42 = a3[16];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (uint64_t *)(a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  v47 = a3[17];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v51 = *v49;
  v50 = v49[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  v52 = a3[18];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (uint64_t *)(a2 + v52);
  v56 = *v54;
  v55 = v54[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  v57 = a3[19];
  v58 = (char *)(a1 + v57);
  v59 = (char *)(a2 + v57);
  v60 = type metadata accessor for SnippetHeaderModel();
  v61 = *(_QWORD *)(v60 - 8);
  v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  v63 = v62(v58, 1, v60);
  v64 = v62(v59, 1, v60);
  if (!v63)
  {
    if (!v64)
    {
      v68 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v58, v59, v68);
      v69 = *(int *)(v60 + 20);
      v70 = &v58[v69];
      v71 = &v59[v69];
      v73 = *(_QWORD *)v71;
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = v73;
      *((_QWORD *)v70 + 1) = v72;
      swift_bridgeObjectRelease();
      v74 = *(int *)(v60 + 24);
      v75 = &v58[v74];
      v76 = &v59[v74];
      v78 = *(_QWORD *)v76;
      v77 = *((_QWORD *)v76 + 1);
      *(_QWORD *)v75 = v78;
      *((_QWORD *)v75 + 1) = v77;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v64)
  {
LABEL_12:
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    return a1;
  }
  v65 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v58, v59, v65);
  *(_OWORD *)&v58[*(int *)(v60 + 20)] = *(_OWORD *)&v59[*(int *)(v60 + 20)];
  *(_OWORD *)&v58[*(int *)(v60 + 24)] = *(_OWORD *)&v59[*(int *)(v60 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecificMedCompletedLogModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A494024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4940D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for SpecificMedCompletedLogModel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_24A4942B0 + 4 * byte_24A4E9605[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_24A4942E4 + 4 * byte_24A4E9600[v4]))();
}

uint64_t sub_24A4942E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4942EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4942F4);
  return result;
}

uint64_t sub_24A494300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A494308);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_24A49430C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A494314(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SpecificMedCompletedLogModel.CodingKeys()
{
  return &unk_251BD2AA8;
}

uint64_t specialized SpecificMedCompletedLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A4F3A90
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F3AB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656761736F64 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7453656761736F64 && a2 == 0xEC000000676E6972
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E55656761736F64 && a2 == 0xEA00000000007469
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6570795464656DLL && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646E754268736173 && a2 == 0xEC0000004449656CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A4F3AD0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x4C64657070696B73 && a2 == 0xEC0000006C656261
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x62614C6E656B6174 && a2 == 0xEA00000000006C65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t GenericQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t GenericQueryModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*GenericQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.averageValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 20));
}

uint64_t type metadata accessor for GenericQueryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenericQueryModel;
  if (!type metadata singleton initialization cache for GenericQueryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GenericQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for GenericQueryModel();
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.averageValue.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.maxValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 24));
}

uint64_t GenericQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for GenericQueryModel();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.maxValue.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.minValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 28));
}

uint64_t GenericQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for GenericQueryModel();
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.minValue.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.mostRecentValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 32));
}

uint64_t GenericQueryModel.mostRecentValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for GenericQueryModel();
  v6 = v2 + *(int *)(result + 32);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.mostRecentValue.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.totalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 36));
}

uint64_t GenericQueryModel.totalValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for GenericQueryModel();
  v6 = v2 + *(int *)(result + 36);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.totalValue.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for GenericQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t GenericQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for GenericQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 40), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*GenericQueryModel.dateLabel.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.averageValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.averageValueString.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.maxValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.maxValueString.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.minValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.minValueString.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.mostRecentValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 56));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.mostRecentValueString.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.totalValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.totalValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.totalValueString.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.unit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 64));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.unit.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.averageLabelString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 68));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.averageLabelString.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for GenericQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 72), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t GenericQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for GenericQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 72), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*GenericQueryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for GenericQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.init(averageValue:maxValue:minValue:mostRecentValue:totalValue:unit:dateLabel:url:averageLabelString:headerModel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *Model;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _BOOL4 v85;
  int v86;
  uint64_t v87;
  _BOOL4 v88;
  int v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  _BOOL4 v92;
  uint64_t v93;
  char *v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v89 = a8;
  v86 = a6;
  v93 = a5;
  v84 = a4;
  v87 = a3;
  v83 = a1;
  v101 = a16;
  v102 = a17;
  v104 = a18;
  v105 = a15;
  v106 = a14;
  v98 = a12;
  v99 = a13;
  v96 = a10;
  v95 = a11;
  v21 = (a2 & 1) == 0;
  v22 = (a4 & 1) == 0;
  v85 = (a6 & 1) == 0;
  v88 = (a8 & 1) == 0;
  v92 = (a11 & 1) == 0;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v23);
  v94 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for AppPunchout();
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v91 = v25;
  v90(a9, 1, 1, v25);
  Model = (int *)type metadata accessor for GenericQueryModel();
  v82 = a9 + Model[10];
  v27 = v82;
  v28 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = (uint64_t *)(a9 + Model[11]);
  *v29 = 0;
  v29[1] = 0;
  v30 = (uint64_t *)(a9 + Model[12]);
  v97 = v30;
  *v30 = 0;
  v30[1] = 0;
  v31 = (uint64_t *)(a9 + Model[13]);
  v100 = v31;
  *v31 = 0;
  v31[1] = 0;
  v32 = (uint64_t *)(a9 + Model[14]);
  v103 = v32;
  *v32 = 0;
  v32[1] = 0;
  v33 = (uint64_t *)(a9 + Model[15]);
  *v33 = 0;
  v33[1] = 0;
  v34 = (_QWORD *)(a9 + Model[17]);
  *v34 = 0;
  v34[1] = 0;
  v81 = a9 + Model[18];
  v35 = v81;
  v36 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = (v83 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v21 && v37)
    v38 = 0;
  else
    v38 = v83;
  v39 = a2 | v37;
  v40 = a9 + Model[5];
  *(_QWORD *)v40 = v38;
  *(_BYTE *)(v40 + 8) = v39 & 1;
  v41 = v87;
  v42 = (v87 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v22 && v42)
    v41 = 0;
  v43 = v84 | v42;
  v44 = a9 + Model[6];
  *(_QWORD *)v44 = v41;
  *(_BYTE *)(v44 + 8) = v43 & 1;
  v45 = v93;
  v46 = (v93 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v85 && v46)
    v45 = 0;
  v47 = v86 | v46;
  v48 = a9 + Model[7];
  *(_QWORD *)v48 = v45;
  *(_BYTE *)(v48 + 8) = v47 & 1;
  v49 = v89;
  if (v88 && (a7 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v50 = 0;
  else
    v50 = a7;
  v51 = a9 + Model[8];
  *(_QWORD *)v51 = v50;
  *(_BYTE *)(v51 + 8) = v49 & 1 | ((a7 & 0x7FFFFFFFFFFFFFFFLL) == 0);
  v52 = v96;
  v53 = (v96 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v92 && v53)
    v52 = 0;
  v54 = Model[16];
  v55 = v95;
  v56 = a9 + Model[9];
  *(_QWORD *)v56 = v52;
  *(_BYTE *)(v56 + 8) = (v55 | v53) & 1;
  v57 = (_QWORD *)(a9 + v54);
  v58 = v99;
  *v57 = v98;
  v57[1] = v58;
  outlined assign with copy of SpeakableString?(v106, v82, &demangling cache variable for type metadata for SpeakableString?);
  v59 = (uint64_t)v94;
  SleepQueryModel.createAppPunchout(url:)(v105);
  v90(v59, 0, 1, v91);
  outlined assign with take of AppPunchout?(v59, a9, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  v60 = v102;
  *v34 = v101;
  v34[1] = v60;
  outlined assign with copy of SpeakableString?(v104, v81, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v61 = GenericQueryModel.getFormattedValueString(inputValue:)(*(_QWORD *)v56, *(_BYTE *)(v56 + 8));
  v63 = v62;
  swift_bridgeObjectRelease();
  *v33 = v61;
  v33[1] = v63;
  v64 = GenericQueryModel.getFormattedValueString(inputValue:)(*(_QWORD *)v40, *(_BYTE *)(v40 + 8));
  v66 = v65;
  swift_bridgeObjectRelease();
  *v29 = v64;
  v29[1] = v66;
  v67 = GenericQueryModel.getFormattedValueString(inputValue:)(*(_QWORD *)v44, *(_BYTE *)(v44 + 8));
  v69 = v68;
  v70 = v97;
  swift_bridgeObjectRelease();
  *v70 = v67;
  v70[1] = v69;
  v71 = GenericQueryModel.getFormattedValueString(inputValue:)(*(_QWORD *)v48, *(_BYTE *)(v48 + 8));
  v73 = v72;
  v74 = v100;
  swift_bridgeObjectRelease();
  *v74 = v71;
  v74[1] = v73;
  v75 = GenericQueryModel.getFormattedValueString(inputValue:)(*(_QWORD *)v51, *(_BYTE *)(v51 + 8));
  v77 = v76;
  outlined destroy of Font.Design?(v104, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v105, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v106, &demangling cache variable for type metadata for SpeakableString?);
  v78 = v103;
  result = swift_bridgeObjectRelease();
  *v78 = v75;
  v78[1] = v77;
  return result;
}

uint64_t outlined assign with copy of SpeakableString?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t GenericQueryModel.getFormattedValueString(inputValue:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Model;
  uint64_t v9;
  char v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = type metadata accessor for GenericQueryModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v2 + *(int *)(Model + 72), (uint64_t)v7, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v9 = type metadata accessor for SnippetHeaderModel();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v7, &demangling cache variable for type metadata for SnippetHeaderModel?);
    return 0;
  }
  v11 = a2 & 1;
  v12 = &v7[*(int *)(v9 + 24)];
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  swift_bridgeObjectRetain();
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  if (v14 == 0xD000000000000021 && v13 == 0x800000024A4F3B70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v14 == 0xD000000000000029 && v13 == 0x800000024A4F3BA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v14 == 0xD00000000000002ALL && v13 == 0x800000024A4F3BD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v14 == 0xD000000000000029 && v13 == 0x800000024A4F3C00)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      return GenericQueryModel.roundUp(inputValue:)(a1, v11);
  }
  return GenericQueryModel.formatWithCommas(inputValue:)(a1, v11);
}

uint64_t GenericQueryModel.roundUp(inputValue:)(uint64_t result, char a2)
{
  uint64_t v2;
  double v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a2 & 1) != 0)
    return 0;
  v2 = result;
  if (*(double *)&result <= 0.0)
    return 0;
  v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v6 = swift_allocObject();
    v7 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v6 + 16) = xmmword_24A4E95E0;
    v8 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = v8;
    *(_QWORD *)(v6 + 32) = v2;
    v9 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    return v9;
  }
  if ((~result & 0x7FF0000000000000) != 0)
    return dispatch thunk of CustomStringConvertible.description.getter();
  __break(1u);
  return result;
}

uint64_t GenericQueryModel.formatWithCommas(inputValue:)(uint64_t a1, char a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  if ((a2 & 1) != 0 || *(double *)&a1 <= 0.0)
    return 0;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  objc_msgSend(v3, sel_setNumberStyle_, 1);
  objc_msgSend(v3, sel_setMaximumFractionDigits_, 1);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)&a1);
  v5 = objc_msgSend(v3, sel_stringFromNumber_, v4);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {

    return 0;
  }
  return v6;
}

uint64_t GenericQueryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A495D78 + 4 * byte_24A4E98B0[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A495D78()
{
  return 0x5665676172657661;
}

uint64_t sub_24A495D98()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_24A495DC0()
{
  return 0x6563655274736F6DLL;
}

uint64_t sub_24A495DE4()
{
  return 0x6C61566C61746F74;
}

uint64_t sub_24A495E00()
{
  return 0x6562614C65746164;
}

unint64_t sub_24A495E1C()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericQueryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return GenericQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized GenericQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericQueryModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GenericQueryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericQueryModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for GenericQueryModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[4] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[3] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[2] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[1] = 14;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508]("őn\a8v", &unk_251BD2C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericQueryModel.CodingKeys, &unk_251BD2C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericQueryModel.CodingKeys, &unk_251BD2C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

uint64_t GenericQueryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *Model;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;

  v91 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v92 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v5);
  v103 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v7);
  v104 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericQueryModel.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v105 = v9;
  v106 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v110 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for GenericQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AppPunchout();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v102 = v15;
  v16(v14, 1, 1);
  v17 = &v14[Model[5]];
  *(_QWORD *)v17 = 0;
  v101 = v17;
  v17[8] = 1;
  v18 = &v14[Model[6]];
  *(_QWORD *)v18 = 0;
  v100 = (uint64_t *)v18;
  v18[8] = 1;
  v19 = &v14[Model[7]];
  *(_QWORD *)v19 = 0;
  v99 = (uint64_t *)v19;
  v19[8] = 1;
  v20 = &v14[Model[8]];
  *(_QWORD *)v20 = 0;
  v98 = (uint64_t *)v20;
  v20[8] = 1;
  v21 = &v14[Model[9]];
  *(_QWORD *)v21 = 0;
  v96 = (uint64_t *)v21;
  v21[8] = 1;
  v22 = (uint64_t)&v14[Model[10]];
  v23 = type metadata accessor for SpeakableString();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v95 = v22;
  v97 = v23;
  v24(v22, 1, 1);
  v25 = &v14[Model[11]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v94 = v25;
  v26 = &v14[Model[12]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v93 = v26;
  v27 = &v14[Model[13]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v28 = &v14[Model[14]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v29 = &v14[Model[15]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v30 = &v14[Model[16]];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v31 = (uint64_t *)&v14[Model[17]];
  *v31 = 0;
  v31[1] = 0;
  v32 = Model[18];
  v109 = v14;
  v33 = (uint64_t)&v14[v32];
  v34 = type metadata accessor for SnippetHeaderModel();
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v90 = v33;
  v35(v33, 1, 1, v34);
  v36 = a1;
  v37 = a1[3];
  v108 = v36;
  __swift_project_boxed_opaque_existential_1(v36, v37);
  lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();
  v38 = v107;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v38)
  {
    v86 = (uint64_t)v109;
  }
  else
  {
    v39 = v101;
    v107 = v27;
    v89 = v28;
    v40 = (uint64_t)v103;
    v88 = v29;
    v87 = v30;
    v41 = v106;
    v125 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v42 = (uint64_t)v104;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v42, (uint64_t)v109, &demangling cache variable for type metadata for AppPunchout?);
    v124 = 1;
    *(_QWORD *)v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v39[8] = v44 & 1;
    v123 = 2;
    v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v46 = v100;
    *v100 = v45;
    *((_BYTE *)v46 + 8) = v47 & 1;
    v122 = 3;
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v49 = v99;
    *v99 = v48;
    *((_BYTE *)v49 + 8) = v50 & 1;
    v121 = 4;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v52 = v98;
    *v98 = v51;
    *((_BYTE *)v52 + 8) = v53 & 1;
    v120 = 5;
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v55 = v96;
    *v96 = v54;
    *((_BYTE *)v55 + 8) = v56 & 1;
    v119 = 6;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v40, v95, &demangling cache variable for type metadata for SpeakableString?);
    v118 = 7;
    v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v59 = v58;
    v60 = (uint64_t *)v94;
    swift_bridgeObjectRelease();
    *v60 = v57;
    v60[1] = v59;
    v117 = 8;
    v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v63 = v62;
    v64 = (uint64_t *)v93;
    swift_bridgeObjectRelease();
    *v64 = v61;
    v64[1] = v63;
    v116 = 9;
    v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v67 = v66;
    v68 = (uint64_t *)v107;
    swift_bridgeObjectRelease();
    *v68 = v65;
    v68[1] = v67;
    v115 = 10;
    v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v71 = v70;
    v72 = (uint64_t *)v89;
    swift_bridgeObjectRelease();
    *v72 = v69;
    v72[1] = v71;
    v114 = 11;
    v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v75 = v74;
    v76 = (uint64_t *)v88;
    swift_bridgeObjectRelease();
    *v76 = v73;
    v76[1] = v75;
    v113 = 12;
    v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v79 = v78;
    v80 = (uint64_t *)v87;
    swift_bridgeObjectRelease();
    *v80 = v77;
    v80[1] = v79;
    v112 = 13;
    v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v83 = v82;
    swift_bridgeObjectRelease();
    *v31 = v81;
    v31[1] = v83;
    v111 = 14;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v84 = v105;
    v85 = v110;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v85, v84);
    v86 = (uint64_t)v109;
    outlined assign with take of AppPunchout?(v92, v90, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of GenericQueryModel(v86, v91);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v108);
  return outlined destroy of GenericMedCompletedLogModel(v86, (uint64_t (*)(_QWORD))type metadata accessor for GenericQueryModel);
}

uint64_t outlined init with copy of GenericQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model;

  Model = type metadata accessor for GenericQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in GenericQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type GenericQueryModel and conformance GenericQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for GenericQueryModel, (uint64_t)&protocol conformance descriptor for GenericQueryModel);
}

uint64_t base witness table accessor for Encodable in GenericQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type GenericQueryModel and conformance GenericQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for GenericQueryModel, (uint64_t)&protocol conformance descriptor for GenericQueryModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericQueryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericQueryModel(_QWORD *a1)
{
  return GenericQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = a3[9];
    v24 = a3[10];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = (char *)a1 + v24;
    v28 = (char *)a2 + v24;
    v29 = type metadata accessor for SpeakableString();
    v30 = *(_QWORD *)(v29 - 8);
    v75 = v30;
    v76 = v29;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = a3[11];
    v33 = a3[12];
    v34 = (uint64_t *)((char *)a1 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (uint64_t *)((char *)a1 + v33);
    v38 = (uint64_t *)((char *)a2 + v33);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = a3[13];
    v41 = a3[14];
    v42 = (uint64_t *)((char *)a1 + v40);
    v43 = (uint64_t *)((char *)a2 + v40);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = (uint64_t *)((char *)a1 + v41);
    v46 = (uint64_t *)((char *)a2 + v41);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = a3[15];
    v49 = a3[16];
    v50 = (uint64_t *)((char *)a1 + v48);
    v51 = (uint64_t *)((char *)a2 + v48);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = (uint64_t *)((char *)a1 + v49);
    v54 = (uint64_t *)((char *)a2 + v49);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = a3[17];
    v57 = a3[18];
    v58 = (uint64_t *)((char *)a1 + v56);
    v59 = (uint64_t *)((char *)a2 + v56);
    v60 = v59[1];
    v61 = (char *)a2 + v57;
    __dst = (char *)a1 + v57;
    *v58 = *v59;
    v58[1] = v60;
    v62 = type metadata accessor for SnippetHeaderModel();
    v74 = *(_QWORD *)(v62 - 8);
    v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v77(v61, 1, v62))
    {
      v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(__dst, v61, v76);
      v64 = *(int *)(v62 + 20);
      v65 = &__dst[v64];
      v66 = &v61[v64];
      v67 = *((_QWORD *)v66 + 1);
      *(_QWORD *)v65 = *(_QWORD *)v66;
      *((_QWORD *)v65 + 1) = v67;
      v68 = *(int *)(v62 + 24);
      v69 = &__dst[v68];
      v70 = &v61[v68];
      v71 = *((_QWORD *)v70 + 1);
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = v71;
      v72 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v72(__dst, 0, 1, v62);
    }
  }
  return a1;
}

uint64_t destroy for GenericQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 40);
  v7 = type metadata accessor for SpeakableString();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + *(int *)(a2 + 72);
  v10 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  char *__dst;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = a3[10];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = &a1[v22];
  v26 = &a2[v22];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v73 = v28;
  v74 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[11];
  v31 = a3[12];
  v32 = &a1[v30];
  v33 = &a2[v30];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = &a1[v31];
  v36 = &a2[v31];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v38 = a3[13];
  v39 = a3[14];
  v40 = &a1[v38];
  v41 = &a2[v38];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = &a1[v39];
  v44 = &a2[v39];
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = v45;
  v46 = a3[15];
  v47 = a3[16];
  v48 = &a1[v46];
  v49 = &a2[v46];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = &a1[v47];
  v52 = &a2[v47];
  v53 = *((_QWORD *)v52 + 1);
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = v53;
  v54 = a3[17];
  v55 = a3[18];
  v56 = &a1[v54];
  v57 = &a2[v54];
  v58 = *((_QWORD *)v57 + 1);
  v59 = &a2[v55];
  __dst = &a1[v55];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = v58;
  v60 = type metadata accessor for SnippetHeaderModel();
  v72 = *(_QWORD *)(v60 - 8);
  v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v75(v59, 1, v60))
  {
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(__dst, v59, v74);
    v62 = *(int *)(v60 + 20);
    v63 = &__dst[v62];
    v64 = &v59[v62];
    v65 = *((_QWORD *)v64 + 1);
    *(_QWORD *)v63 = *(_QWORD *)v64;
    *((_QWORD *)v63 + 1) = v65;
    v66 = *(int *)(v60 + 24);
    v67 = &__dst[v66];
    v68 = &v59[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70(__dst, 0, 1, v60);
  }
  return a1;
}

char *assignWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *(_QWORD *)v30;
  v29[8] = v30[8];
  *(_QWORD *)v29 = v31;
  v32 = a3[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for SpeakableString();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  v41 = a3[11];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3[13];
  v48 = &a1[v47];
  v49 = &a2[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = a3[14];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = a3[15];
  v54 = &a1[v53];
  v55 = &a2[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = a3[16];
  v57 = &a1[v56];
  v58 = &a2[v56];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59 = a3[17];
  v60 = &a1[v59];
  v61 = &a2[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = a3[18];
  v63 = &a1[v62];
  v64 = &a2[v62];
  v65 = type metadata accessor for SnippetHeaderModel();
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v63, v64, v35);
      v79 = *(int *)(v65 + 20);
      v80 = &v63[v79];
      v81 = &v64[v79];
      *(_QWORD *)v80 = *(_QWORD *)v81;
      *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v82 = *(int *)(v65 + 24);
      v83 = &v63[v82];
      v84 = &v64[v82];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      *((_QWORD *)v83 + 1) = *((_QWORD *)v84 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v63, v64, v35);
  v70 = *(int *)(v65 + 20);
  v71 = &v63[v70];
  v72 = &v64[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
  v73 = *(int *)(v65 + 24);
  v74 = &v63[v73];
  v75 = &v64[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
  v76 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v63, 0, 1, v65);
  return a1;
}

char *initializeWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = a3[10];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = &a1[v22];
  v26 = &a2[v22];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  v31 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v31] = *(_OWORD *)&a2[v31];
  v32 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v32] = *(_OWORD *)&a2[v32];
  v33 = a3[17];
  v34 = a3[18];
  v35 = *(_OWORD *)&a2[v33];
  v36 = &a2[v34];
  v37 = &a1[v34];
  *(_OWORD *)&a1[v33] = v35;
  v38 = type metadata accessor for SnippetHeaderModel();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v37, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v37, v36, v27);
    *(_OWORD *)&v37[*(int *)(v38 + 20)] = *(_OWORD *)&v36[*(int *)(v38 + 20)];
    *(_OWORD *)&v37[*(int *)(v38 + 24)] = *(_OWORD *)&v36[*(int *)(v38 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v37, 0, 1, v38);
  }
  return a1;
}

char *assignWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[9];
  v25 = a3[10];
  v26 = &a1[v24];
  v27 = &a2[v24];
  v26[8] = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v28 = &a1[v25];
  v29 = &a2[v25];
  v30 = type metadata accessor for SpeakableString();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  v36 = a3[11];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  v41 = a3[12];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  v46 = a3[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  v51 = a3[14];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v55 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = v55;
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  v56 = a3[15];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  v61 = a3[16];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease();
  v66 = a3[17];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v70 = *(_QWORD *)v68;
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = v70;
  *((_QWORD *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  v71 = a3[18];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v74 = type metadata accessor for SnippetHeaderModel();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  v77 = v76(v72, 1, v74);
  v78 = v76(v73, 1, v74);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v72, v73, v30);
      v81 = *(int *)(v74 + 20);
      v82 = &v72[v81];
      v83 = &v73[v81];
      v85 = *(_QWORD *)v83;
      v84 = *((_QWORD *)v83 + 1);
      *(_QWORD *)v82 = v85;
      *((_QWORD *)v82 + 1) = v84;
      swift_bridgeObjectRelease();
      v86 = *(int *)(v74 + 24);
      v87 = &v72[v86];
      v88 = &v73[v86];
      v90 = *(_QWORD *)v88;
      v89 = *((_QWORD *)v88 + 1);
      *(_QWORD *)v87 = v90;
      *((_QWORD *)v87 + 1) = v89;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v78)
  {
LABEL_18:
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v72, v73, v30);
  *(_OWORD *)&v72[*(int *)(v74 + 20)] = *(_OWORD *)&v73[*(int *)(v74 + 20)];
  *(_OWORD *)&v72[*(int *)(v74 + 24)] = *(_OWORD *)&v73[*(int *)(v74 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericQueryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A498058(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[18];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[11] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericQueryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A49814C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[10];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[11] + 8) = a2;
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[18];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for GenericQueryModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, &lazy cache variable for type metadata for SpeakableString?, (void (*)(uint64_t))MEMORY[0x24BE929C8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for GenericQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericQueryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_24A4983F4 + 4 * byte_24A4E98C4[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_24A498428 + 4 * byte_24A4E98BF[v4]))();
}

uint64_t sub_24A498428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A498430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A498438);
  return result;
}

uint64_t sub_24A498444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A49844CLL);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_24A498450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A498458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GenericQueryModel.CodingKeys()
{
  return &unk_251BD2C00;
}

uint64_t specialized GenericQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C61566C61746F74 && a2 == 0xEA00000000006575
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3AF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A4F3B10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A4F3B30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3B50
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t HealthDataLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t HealthDataLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*HealthDataLogModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.date.getter()
{
  type metadata accessor for HealthDataLogModel();
  return swift_retain();
}

uint64_t type metadata accessor for HealthDataLogModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HealthDataLogModel;
  if (!type metadata singleton initialization cache for HealthDataLogModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HealthDataLogModel.date.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for HealthDataLogModel() + 20);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*HealthDataLogModel.date.modify())()
{
  type metadata accessor for HealthDataLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.dateLabel.modify())()
{
  type metadata accessor for HealthDataLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.timeLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.timeLabel.modify())()
{
  type metadata accessor for HealthDataLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.unitLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.unitLabel.modify())()
{
  type metadata accessor for HealthDataLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.dataLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.dataLabel.modify())()
{
  type metadata accessor for HealthDataLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for HealthDataLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t HealthDataLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for HealthDataLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 40), &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*HealthDataLogModel.appPunchout.modify())()
{
  type metadata accessor for HealthDataLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.loggedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.loggedLabel.modify())()
{
  type metadata accessor for HealthDataLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.init(snippetHeaderModel:date:unitLabel:dataValue:url:loggedButtonLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  void (*v61)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v67 = a8;
  v65 = a7;
  v58 = a4;
  v59 = a5;
  v57 = a3;
  v56 = a6 & 1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v13);
  v64 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v55 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v54 - v18;
  v20 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a9, 1, 1, v20);
  v21 = (int *)type metadata accessor for HealthDataLogModel();
  v22 = v21[5];
  *(_QWORD *)(a9 + v22) = 0;
  v23 = (uint64_t *)(a9 + v21[6]);
  *v23 = 0;
  v23[1] = 0;
  v24 = (uint64_t *)(a9 + v21[7]);
  *v24 = 0;
  v24[1] = 0;
  v60 = v24;
  v25 = (_QWORD *)(a9 + v21[8]);
  *v25 = 0;
  v25[1] = 0;
  v26 = (uint64_t *)(a9 + v21[9]);
  *v26 = 0;
  v26[1] = 0;
  v27 = a9 + v21[10];
  v28 = type metadata accessor for AppPunchout();
  v29 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v62 = v28;
  v63 = v27;
  v61 = v29;
  ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v27, 1, 1);
  v30 = (_QWORD *)(a9 + v21[11]);
  *v30 = 0;
  v30[1] = 0;
  v66 = a1;
  outlined assign with copy of SnippetHeaderModel?(a1, a9);
  *(_QWORD *)(a9 + v22) = a2;
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  v32 = v58;
  v31 = v59;
  *v25 = v57;
  v25[1] = v32;
  v33 = HealthDataLogModel.getFormattedValueString(inputValue:)(v31, v56);
  v35 = v34;
  swift_bridgeObjectRelease();
  *v26 = v33;
  v26[1] = v35;
  if (a2)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.dateDescriptive.getter();
    swift_release();
    v36 = type metadata accessor for SpeakableString();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v19, 1, v36) == 1)
    {
      outlined destroy of Font.Design?((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
      v38 = 0;
      v39 = 0;
    }
    else
    {
      v40 = SpeakableString.print.getter();
      v42 = v41;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v36);
      v68 = v40;
      v69 = v42;
      lazy protocol witness table accessor for type String and conformance String();
      v38 = StringProtocol.capitalized.getter();
      v39 = v43;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  swift_bridgeObjectRelease();
  *v23 = v38;
  v23[1] = v39;
  v44 = *(_QWORD *)(a9 + v22);
  if (v44)
  {
    swift_retain();
    v45 = (uint64_t)v55;
    dispatch thunk of DialogCalendar.timeDescriptive.getter();
    swift_release();
    v46 = type metadata accessor for SpeakableString();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46) != 1)
    {
      v44 = SpeakableString.print.getter();
      v48 = v49;
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
      goto LABEL_11;
    }
    outlined destroy of Font.Design?(v45, &demangling cache variable for type metadata for SpeakableString?);
    v44 = 0;
  }
  v48 = 0;
LABEL_11:
  v50 = v60;
  swift_bridgeObjectRelease();
  *v50 = v44;
  v50[1] = v48;
  v52 = (uint64_t)v64;
  v51 = v65;
  SleepQueryModel.createAppPunchout(url:)(v65);
  swift_release();
  outlined destroy of Font.Design?(v51, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v66, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v61(v52, 0, 1, v62);
  outlined assign with take of AppPunchout?(v52, v63, &demangling cache variable for type metadata for AppPunchout?);
  result = swift_bridgeObjectRelease();
  *v30 = v67;
  v30[1] = a10;
  return result;
}

uint64_t outlined assign with copy of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t HealthDataLogModel.getFormattedValueString(inputValue:)(uint64_t result, char a2)
{
  uint64_t v2;
  double v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a2 & 1) != 0)
    return 0;
  v2 = result;
  v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v6 = swift_allocObject();
    v7 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v6 + 16) = xmmword_24A4E95E0;
    v8 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = v8;
    *(_QWORD *)(v6 + 32) = v2;
    v9 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    return v9;
  }
  if ((~result & 0x7FF0000000000000) != 0)
    return dispatch thunk of CustomStringConvertible.description.getter();
  __break(1u);
  return result;
}

uint64_t HealthDataLogModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A499630 + 4 * byte_24A4E9B30[a1]))(0xD000000000000012, 0x800000024A4F39B0);
}

uint64_t sub_24A499630()
{
  return 1702125924;
}

uint64_t sub_24A499640()
{
  return 0x6562614C65746164;
}

uint64_t sub_24A499680()
{
  return 0x68636E7550707061;
}

uint64_t sub_24A4996A0()
{
  return 0x614C646567676F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HealthDataLogModel.CodingKeys()
{
  unsigned __int8 *v0;

  return HealthDataLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HealthDataLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized HealthDataLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance HealthDataLogModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HealthDataLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HealthDataLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t HealthDataLogModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[8];
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HealthDataLogModel.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for SnippetHeaderModel();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for HealthDataLogModel() + 20));
    v10[7] = 1;
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 6;
    type metadata accessor for AppPunchout();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508]("ݐn\aDt", &unk_251BD2D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HealthDataLogModel.CodingKeys, &unk_251BD2D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HealthDataLogModel.CodingKeys, &unk_251BD2D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HealthDataLogModel.CodingKeys, &unk_251BD2D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

uint64_t HealthDataLogModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;

  v59 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v5);
  v65 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HealthDataLogModel.CodingKeys>);
  v63 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v70 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for HealthDataLogModel();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SnippetHeaderModel();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v64 = v11;
  v12(v10, 1, 1);
  v62 = v8[5];
  *(_QWORD *)&v10[v62] = 0;
  v13 = &v10[v8[6]];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v10[v8[7]];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v10[v8[8]];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v16 = &v10[v8[9]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = (uint64_t)&v10[v8[10]];
  v18 = type metadata accessor for AppPunchout();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v60 = v17;
  v19(v17, 1, 1, v18);
  v20 = v8[11];
  v68 = v10;
  v21 = &v10[v20];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = a1;
  v23 = a1[3];
  v67 = v22;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();
  v24 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24)
  {
    v49 = (uint64_t)v67;
    v28 = (uint64_t)v68;
  }
  else
  {
    v69 = v13;
    v57 = v15;
    v58 = v14;
    v55 = v21;
    v56 = v16;
    LOBYTE(v72) = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v25 = (uint64_t)v65;
    v26 = v70;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v28 = (uint64_t)v68;
    outlined assign with take of AppPunchout?(v25, (uint64_t)v68, &demangling cache variable for type metadata for SnippetHeaderModel?);
    type metadata accessor for DialogCalendar();
    v71 = 1;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v29 = v72;
    v30 = v62;
    swift_release();
    *(_QWORD *)(v28 + v30) = v29;
    LOBYTE(v72) = 2;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v33 = v32;
    v34 = (uint64_t *)v69;
    swift_bridgeObjectRelease();
    *v34 = v31;
    v34[1] = v33;
    LOBYTE(v72) = 3;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v37 = v36;
    v38 = (uint64_t *)v58;
    swift_bridgeObjectRelease();
    *v38 = v35;
    v38[1] = v37;
    LOBYTE(v72) = 4;
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v41 = v40;
    v42 = (uint64_t *)v57;
    swift_bridgeObjectRelease();
    *v42 = v39;
    v42[1] = v41;
    LOBYTE(v72) = 5;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v45 = v44;
    v46 = (uint64_t *)v56;
    swift_bridgeObjectRelease();
    *v46 = v43;
    v46[1] = v45;
    LOBYTE(v72) = 6;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v47 = (uint64_t)v61;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v47, v60, &demangling cache variable for type metadata for AppPunchout?);
    LOBYTE(v72) = 7;
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v49 = (uint64_t)v67;
    v50 = v48;
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v26, v66);
    v53 = v55;
    swift_bridgeObjectRelease();
    *v53 = v50;
    v53[1] = v52;
    outlined init with copy of HealthDataLogModel(v28, v59);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v49);
  return outlined destroy of GenericMedCompletedLogModel(v28, (uint64_t (*)(_QWORD))type metadata accessor for HealthDataLogModel);
}

uint64_t outlined init with copy of HealthDataLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HealthDataLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in HealthDataLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type HealthDataLogModel and conformance HealthDataLogModel, (uint64_t (*)(uint64_t))type metadata accessor for HealthDataLogModel, (uint64_t)&protocol conformance descriptor for HealthDataLogModel);
}

uint64_t base witness table accessor for Encodable in HealthDataLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type HealthDataLogModel and conformance HealthDataLogModel, (uint64_t (*)(uint64_t))type metadata accessor for HealthDataLogModel, (uint64_t)&protocol conformance descriptor for HealthDataLogModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance HealthDataLogModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HealthDataLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HealthDataLogModel(_QWORD *a1)
{
  return HealthDataLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HealthDataLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SnippetHeaderModel();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(v7 + 20);
      v13 = (uint64_t *)((char *)a1 + v12);
      v14 = (uint64_t *)((char *)a2 + v12);
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      v16 = *(int *)(v7 + 24);
      v17 = (uint64_t *)((char *)a1 + v16);
      v18 = (uint64_t *)((char *)a2 + v16);
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      v20 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20(a1, 0, 1, v7);
    }
    v21 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[7];
    v26 = a3[8];
    v27 = (uint64_t *)((char *)a1 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = (uint64_t *)((char *)a1 + v26);
    v31 = (uint64_t *)((char *)a2 + v26);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = a3[9];
    v34 = a3[10];
    v35 = (uint64_t *)((char *)a1 + v33);
    v36 = (uint64_t *)((char *)a2 + v33);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    __dst = (char *)a1 + v34;
    v38 = (char *)a2 + v34;
    v39 = type metadata accessor for AppPunchout();
    v46 = *(_QWORD *)(v39 - 8);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v47(v38, 1, v39))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(__dst, v38, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v39);
    }
    v41 = a3[11];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HealthDataLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 40);
  v7 = type metadata accessor for AppPunchout();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  void (*v19)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  char *__dst;
  int *v48;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(v6 + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = *(int *)(v6 + 24);
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = a3;
    v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(a1, 0, 1, v6);
    a3 = v18;
  }
  v20 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v24 = a3[7];
  v25 = a3[8];
  v26 = &a1[v24];
  v27 = &a2[v24];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v29 = &a1[v25];
  v30 = &a2[v25];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = a3[9];
  v33 = a3[10];
  v34 = &a1[v32];
  v35 = &a2[v32];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  __dst = &a1[v33];
  v48 = a3;
  v37 = &a2[v33];
  v38 = type metadata accessor for AppPunchout();
  v39 = *(_QWORD *)(v38 - 8);
  v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v46(v37, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(__dst, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
  }
  v41 = v48[11];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(v6 + 20);
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      v15 = *(int *)(v6 + 24);
      v16 = &a1[v15];
      v17 = &a2[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
      v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v45 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(a1, a2, v45);
  v46 = *(int *)(v6 + 20);
  v47 = &a1[v46];
  v48 = &a2[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = *(int *)(v6 + 24);
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_retain();
  swift_release();
  v20 = a3[6];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = a3[8];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = a3[9];
  v30 = &a1[v29];
  v31 = &a2[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = a3[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for AppPunchout();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_13:
  v41 = a3[11];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  v12 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for AppPunchout();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  return a1;
}

char *assignWithTake for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  v48 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(a1, a2, v48);
  v49 = *(int *)(v6 + 20);
  v50 = &a1[v49];
  v51 = &a2[v49];
  v53 = *(_QWORD *)v51;
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = v53;
  *((_QWORD *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  v54 = *(int *)(v6 + 24);
  v55 = &a1[v54];
  v56 = &a2[v54];
  v58 = *(_QWORD *)v56;
  v57 = *((_QWORD *)v56 + 1);
  *(_QWORD *)v55 = v58;
  *((_QWORD *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
LABEL_7:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_release();
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  v33 = a3[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for AppPunchout();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
    goto LABEL_12;
  }
  if (v40)
  {
LABEL_12:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
LABEL_13:
  v42 = a3[11];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthDataLogModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A49AE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for HealthDataLogModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A49AEDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for HealthDataLogModel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for HealthDataLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthDataLogModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_24A49B120 + 4 * byte_24A4E9B3D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_24A49B154 + 4 * byte_24A4E9B38[v4]))();
}

uint64_t sub_24A49B154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A49B15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A49B164);
  return result;
}

uint64_t sub_24A49B170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A49B178);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_24A49B17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A49B184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for HealthDataLogModel.CodingKeys()
{
  return &unk_251BD2D58;
}

uint64_t specialized HealthDataLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t GenericButtonSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GenericButtonSnippet();
  return outlined init with copy of GenericMedCompletedLogModel(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for GenericButtonModel);
}

uint64_t type metadata accessor for GenericButtonSnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenericButtonSnippet;
  if (!type metadata singleton initialization cache for GenericButtonSnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GenericButtonSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  ActionHandler.init()();
  v4 = type metadata accessor for GenericButtonSnippet();
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2 + *(int *)(v4 + 20), (uint64_t (*)(_QWORD))type metadata accessor for GenericButtonModel);
}

id GenericButtonSnippet.punchOutCommand.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v0 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81860]), sel_init);
  type metadata accessor for GenericButtonSnippet();
  v5 = type metadata accessor for GenericButtonModel();
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v5 + 20));
  v7 = v6;
  objc_msgSend(v4, sel_setPunchOutUri_, v6);

  v8 = v4;
  UUID.init()();
  v9 = UUID.uuidString.getter();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v12 = (void *)MEMORY[0x24BD11028](v9, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setAceId_, v12);

  return v8;
}

uint64_t GenericButtonSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[6];

  v2 = v1;
  v16[1] = a1;
  v3 = type metadata accessor for RFButtonStyle();
  v16[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GenericButtonSnippet();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of GenericMedCompletedLogModel(v2, (uint64_t)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for GenericButtonSnippet);
  v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(_QWORD))type metadata accessor for GenericButtonSnippet);
  v16[4] = v2;
  Button.init(action:label:)();
  static PrimitiveButtonStyle<>.rfButton.getter();
  lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
  lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16[0] + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in GenericButtonSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionProperty();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_24A4E95E0;
  v14 = type metadata accessor for Command();
  v15 = MEMORY[0x24BEAD1F0];
  *(_QWORD *)(v13 + 56) = v14;
  *(_QWORD *)(v13 + 64) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 32));
  *boxed_opaque_existential_1 = (uint64_t)GenericButtonSnippet.punchOutCommand.getter();
  *((_BYTE *)boxed_opaque_existential_1 + 8) = 1;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(boxed_opaque_existential_1, *MEMORY[0x24BEAD180], v14);
  ActionProperty.init(_:)();
  ActionHandler.wrappedValue.getter();
  v17 = type metadata accessor for StandardActionHandler();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return outlined destroy of Font.Design?((uint64_t)v8, &demangling cache variable for type metadata for StandardActionHandler?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v5, v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
    v20 = *MEMORY[0x24BEADC68];
    v21 = type metadata accessor for InteractionType();
    v25 = v9;
    v22 = (uint64_t)v5;
    v23 = *(_QWORD *)(v21 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v2, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v2, 0, 1, v21);
    StandardActionHandler.perform(_:interactionType:)();
    outlined destroy of Font.Design?((uint64_t)v2, &demangling cache variable for type metadata for InteractionType?);
    outlined destroy of Font.Design?(v22, &demangling cache variable for type metadata for ActionProperty?);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  }
}

uint64_t closure #2 in GenericButtonSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  type metadata accessor for GenericButtonSnippet();
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  result = Text.init<A>(_:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t partial apply for closure #2 in GenericButtonSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in GenericButtonSnippet.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type Button<Text> and conformance Button<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
    result = MEMORY[0x24BD11508](MEMORY[0x24BDF43B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle;
  if (!lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle)
  {
    v1 = type metadata accessor for RFButtonStyle();
    result = MEMORY[0x24BD11508](MEMORY[0x24BEADB78], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GenericButtonSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance GenericButtonSnippet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = v2;
  v18 = a2;
  v5 = type metadata accessor for RFButtonStyle();
  v19 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of GenericMedCompletedLogModel(v4, (uint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for GenericButtonSnippet);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(_QWORD))type metadata accessor for GenericButtonSnippet);
  v20 = v4;
  Button.init(action:label:)();
  static PrimitiveButtonStyle<>.rfButton.getter();
  lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
  lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericButtonSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8);
    v12 = *((_QWORD *)v10 + 1);
    *v9 = v11;
    v9[1] = v12;
    v13 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
    v14 = (char *)v9 + v13;
    v15 = &v10[v13];
    v16 = type metadata accessor for URL();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t destroy for GenericButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v7 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  v11 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v12 = (char *)v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for URL();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v11 = (char *)v8 + v10;
  v12 = (char *)v9 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + v7) = *v9;
  v10 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v11 = v8 + v10;
  v12 = (char *)v9 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v11 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v12 = (char *)v8 + v11;
  v13 = (char *)v9 + v11;
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericButtonSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A49C364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for ActionHandler();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for GenericButtonModel();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GenericButtonSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A49C3E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for ActionHandler();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for GenericButtonModel();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for GenericButtonSnippet()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for GenericButtonModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_24A49C4E4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
  type metadata accessor for RFButtonStyle();
  lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
  lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for GenericButtonSnippet();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v3 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GenericButtonSnippet.body.getter()
{
  type metadata accessor for GenericButtonSnippet();
  return closure #1 in GenericButtonSnippet.body.getter();
}

uint64_t BloodPressureQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureQueryModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*BloodPressureQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolic.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 20));
}

uint64_t type metadata accessor for BloodPressureQueryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BloodPressureQueryModel;
  if (!type metadata singleton initialization cache for BloodPressureQueryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BloodPressureQueryModel.systolic.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BloodPressureQueryModel();
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolic.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 24));
}

uint64_t BloodPressureQueryModel.systolicMin.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BloodPressureQueryModel();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMin.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMax.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 28));
}

uint64_t BloodPressureQueryModel.systolicMax.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BloodPressureQueryModel();
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMax.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolic.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 32));
}

uint64_t BloodPressureQueryModel.diastolic.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BloodPressureQueryModel();
  v6 = v2 + *(int *)(result + 32);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolic.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 36));
}

uint64_t BloodPressureQueryModel.diastolicMin.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BloodPressureQueryModel();
  v6 = v2 + *(int *)(result + 36);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMin.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMax.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 40));
}

uint64_t BloodPressureQueryModel.diastolicMax.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BloodPressureQueryModel();
  v6 = v2 + *(int *)(result + 40);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMax.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicString.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicString.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMinString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicMinString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMinString.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMaxString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicMaxString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 56));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMaxString.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMinString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicMinString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMinString.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMaxString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicMaxString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 64));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMaxString.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.unitLabelString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.unitLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 68));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.unitLabelString.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 72));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicLabel.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 76));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicLabel.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BloodPressureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 80), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t BloodPressureQueryModel.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BloodPressureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 80), &demangling cache variable for type metadata for URL?);
}

uint64_t (*BloodPressureQueryModel.url.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 84));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.dateLabel.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.unitLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 88));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 88));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.unitLabel.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BloodPressureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 92), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t BloodPressureQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BloodPressureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 92), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*BloodPressureQueryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for BloodPressureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int *Model;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v127 = a6;
  v128 = a8;
  v130 = a5;
  v131 = a7;
  v125 = a4;
  v126 = a2;
  v129 = a3;
  v106 = a1;
  v134 = a12;
  v123 = a11;
  v124 = a13;
  v138 = a10;
  v139 = a22;
  v136 = a21;
  v137 = a19;
  v111 = a18;
  v109 = a17;
  v108 = a16;
  v107 = a15;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v23);
  v135 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AppPunchout();
  v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v133 = v28;
  v132(a9, 1, 1);
  Model = (int *)type metadata accessor for BloodPressureQueryModel();
  v30 = a9 + Model[5];
  *(_QWORD *)v30 = 0;
  v117 = (_QWORD *)v30;
  *(_BYTE *)(v30 + 8) = 1;
  v31 = a9 + Model[6];
  *(_QWORD *)v31 = 0;
  v116 = (_QWORD *)v31;
  *(_BYTE *)(v31 + 8) = 1;
  v32 = a9 + Model[7];
  *(_QWORD *)v32 = 0;
  v114 = (uint64_t *)v32;
  *(_BYTE *)(v32 + 8) = 1;
  v33 = a9 + Model[8];
  *(_QWORD *)v33 = 0;
  v113 = (_QWORD *)v33;
  *(_BYTE *)(v33 + 8) = 1;
  v34 = a9 + Model[9];
  *(_QWORD *)v34 = 0;
  v112 = (_QWORD *)v34;
  *(_BYTE *)(v34 + 8) = 1;
  v35 = a9 + Model[10];
  *(_QWORD *)v35 = 0;
  v110 = (_QWORD *)v35;
  *(_BYTE *)(v35 + 8) = 1;
  v36 = (uint64_t *)(a9 + Model[11]);
  *v36 = 0;
  v36[1] = 0;
  v115 = v36;
  v37 = (uint64_t *)(a9 + Model[12]);
  *v37 = 0;
  v37[1] = 0;
  v118 = v37;
  v38 = (uint64_t *)(a9 + Model[13]);
  *v38 = 0;
  v38[1] = 0;
  v119 = v38;
  v39 = (uint64_t *)(a9 + Model[14]);
  *v39 = 0;
  v39[1] = 0;
  v120 = v39;
  v40 = (uint64_t *)(a9 + Model[15]);
  *v40 = 0;
  v40[1] = 0;
  v121 = v40;
  v41 = (uint64_t *)(a9 + Model[16]);
  *v41 = 0;
  v41[1] = 0;
  v122 = v41;
  v42 = (_QWORD *)(a9 + Model[17]);
  *v42 = 0;
  v42[1] = 0;
  v43 = (_QWORD *)(a9 + Model[18]);
  v44 = (_QWORD *)(a9 + Model[19]);
  v45 = a9 + Model[20];
  v46 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 1, 1, v46);
  v47 = (uint64_t *)(a9 + Model[21]);
  *v47 = 0;
  v47[1] = 0;
  v48 = (_QWORD *)(a9 + Model[22]);
  v49 = a9 + Model[23];
  v50 = type metadata accessor for SnippetHeaderModel();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
  v105 = v49;
  v51(v49, 1, 1, v50);
  v52 = v107;
  *v48 = a14;
  v48[1] = v52;
  v53 = v109;
  *v43 = v108;
  v43[1] = v53;
  v54 = v137;
  *v44 = v111;
  v44[1] = v54;
  v137 = a20;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a20, (uint64_t)v27, &demangling cache variable for type metadata for SpeakableString?);
  v55 = type metadata accessor for SpeakableString();
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v27, 1, v55) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v27, &demangling cache variable for type metadata for SpeakableString?);
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v57 = SpeakableString.print.getter();
    v58 = v59;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v55);
  }
  v60 = v124 & 1;
  v123 &= 1u;
  v61 = v123;
  v124 &= 1u;
  v62 = v128 & 1;
  v127 &= 1u;
  v63 = v127;
  v128 &= 1u;
  v64 = v125 & 1;
  v65 = v126 & 1;
  swift_bridgeObjectRelease();
  *v47 = v57;
  v47[1] = v58;
  outlined assign with copy of SnippetHeaderModel?(v139, v105);
  v66 = v117;
  v67 = v106;
  *v117 = v106;
  *((_BYTE *)v66 + 8) = v65;
  v68 = v130;
  v69 = v131;
  v70 = v116;
  *v116 = v130;
  *((_BYTE *)v70 + 8) = v63;
  v71 = v114;
  *v114 = v69;
  *((_BYTE *)v71 + 8) = v62;
  v72 = v129;
  v73 = v113;
  *v113 = v129;
  *((_BYTE *)v73 + 8) = v64;
  v74 = v112;
  *v112 = v138;
  *((_BYTE *)v74 + 8) = v61;
  v75 = v134;
  v76 = v110;
  *v110 = v134;
  *((_BYTE *)v76 + 8) = v60;
  v77 = HealthDataLogModel.getFormattedValueString(inputValue:)(v67, v65);
  v79 = v78;
  v80 = v115;
  swift_bridgeObjectRelease();
  *v80 = v77;
  v80[1] = v79;
  v81 = HealthDataLogModel.getFormattedValueString(inputValue:)(v72, v64);
  v83 = v82;
  v84 = v118;
  swift_bridgeObjectRelease();
  *v84 = v81;
  v84[1] = v83;
  v85 = HealthDataLogModel.getFormattedValueString(inputValue:)(v68, v127);
  v87 = v86;
  v88 = v119;
  swift_bridgeObjectRelease();
  *v88 = v85;
  v88[1] = v87;
  v89 = HealthDataLogModel.getFormattedValueString(inputValue:)(v69, v128);
  v91 = v90;
  v92 = v120;
  swift_bridgeObjectRelease();
  *v92 = v89;
  v92[1] = v91;
  v93 = HealthDataLogModel.getFormattedValueString(inputValue:)(v138, v123);
  v95 = v94;
  v96 = v121;
  swift_bridgeObjectRelease();
  *v96 = v93;
  v96[1] = v95;
  v97 = HealthDataLogModel.getFormattedValueString(inputValue:)(v75, v124);
  v99 = v98;
  v100 = v122;
  swift_bridgeObjectRelease();
  *v100 = v97;
  v100[1] = v99;
  v102 = (uint64_t)v135;
  v101 = v136;
  SleepQueryModel.createAppPunchout(url:)(v136);
  outlined destroy of Font.Design?(v139, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v101, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v137, &demangling cache variable for type metadata for SpeakableString?);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v132)(v102, 0, 1, v133);
  return outlined assign with take of AppPunchout?(v102, a9, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureQueryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A49D8A0 + 4 * aJ[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A49D8A0()
{
  return 0x63696C6F74737973;
}

uint64_t sub_24A49D9F8()
{
  return 7107189;
}

uint64_t sub_24A49DA08()
{
  return 0x6562614C65746164;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BloodPressureQueryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return BloodPressureQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BloodPressureQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized BloodPressureQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance BloodPressureQueryModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 20;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BloodPressureQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BloodPressureQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t BloodPressureQueryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BloodPressureQueryModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9 = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for BloodPressureQueryModel();
    v9 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 16;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v9 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9 = 19;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BloodPressureQueryModel.CodingKeys, &unk_251BD2F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BloodPressureQueryModel.CodingKeys, &unk_251BD2F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508]("ݏn\aXr", &unk_251BD2F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508]("ŏn\a0r", &unk_251BD2F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

uint64_t BloodPressureQueryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Model;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  char v140;

  v116 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v115 = (uint64_t)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v133 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v7);
  v134 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BloodPressureQueryModel.CodingKeys>);
  v132 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v139 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for BloodPressureQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v12 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AppPunchout();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v131 = v13;
  v14(v12, 1, 1);
  v15 = &v12[Model[5]];
  *(_QWORD *)v15 = 0;
  v130 = v15;
  v15[8] = 1;
  v16 = &v12[Model[6]];
  *(_QWORD *)v16 = 0;
  v129 = (uint64_t *)v16;
  v16[8] = 1;
  v17 = &v12[Model[7]];
  *(_QWORD *)v17 = 0;
  v128 = (uint64_t *)v17;
  v17[8] = 1;
  v18 = &v12[Model[8]];
  *(_QWORD *)v18 = 0;
  v127 = (uint64_t *)v18;
  v18[8] = 1;
  v19 = &v12[Model[9]];
  *(_QWORD *)v19 = 0;
  v126 = (uint64_t *)v19;
  v19[8] = 1;
  v20 = &v12[Model[10]];
  *(_QWORD *)v20 = 0;
  v125 = (uint64_t *)v20;
  v20[8] = 1;
  v21 = &v12[Model[11]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v124 = v21;
  v22 = &v12[Model[12]];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v123 = v22;
  v23 = &v12[Model[13]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v122 = v23;
  v24 = &v12[Model[14]];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v121 = v24;
  v25 = &v12[Model[15]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v120 = v25;
  v26 = &v12[Model[16]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v119 = v26;
  v27 = &v12[Model[17]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v118 = v27;
  v28 = &v12[Model[18]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v117 = v28;
  v29 = &v12[Model[19]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v30 = (uint64_t)&v12[Model[20]];
  v31 = type metadata accessor for URL();
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v114 = v30;
  v32(v30, 1, 1, v31);
  v33 = &v12[Model[21]];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v34 = &v12[Model[22]];
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  v35 = Model[23];
  v138 = v12;
  v36 = (uint64_t)&v12[v35];
  v37 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v38 = a1;
  v39 = a1[3];
  v137 = v38;
  __swift_project_boxed_opaque_existential_1(v38, v39);
  lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();
  v40 = v136;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v40)
  {
    v108 = (uint64_t)v138;
  }
  else
  {
    v41 = v130;
    v136 = v29;
    v110 = v33;
    v111 = v34;
    v112 = v37;
    v113 = v36;
    v43 = v132;
    v42 = (uint64_t)v133;
    v140 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v44 = (uint64_t)v134;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v44, (uint64_t)v138, &demangling cache variable for type metadata for AppPunchout?);
    v140 = 1;
    *(_QWORD *)v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v41[8] = v46 & 1;
    v140 = 2;
    v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v48 = v129;
    *v129 = v47;
    *((_BYTE *)v48 + 8) = v49 & 1;
    v140 = 3;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v51 = v128;
    *v128 = v50;
    *((_BYTE *)v51 + 8) = v52 & 1;
    v140 = 4;
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v54 = v127;
    *v127 = v53;
    *((_BYTE *)v54 + 8) = v55 & 1;
    v140 = 5;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v57 = v126;
    *v126 = v56;
    *((_BYTE *)v57 + 8) = v58 & 1;
    v140 = 6;
    v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v60 = v125;
    *v125 = v59;
    *((_BYTE *)v60 + 8) = v61 & 1;
    v140 = 7;
    v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v63 = (uint64_t *)v124;
    v134 = v64;
    swift_bridgeObjectRelease();
    v65 = v134;
    *v63 = v62;
    v63[1] = (uint64_t)v65;
    v140 = 8;
    v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v68 = v67;
    v69 = (uint64_t *)v123;
    swift_bridgeObjectRelease();
    *v69 = v66;
    v69[1] = v68;
    v140 = 9;
    v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v72 = v71;
    v73 = (uint64_t *)v122;
    swift_bridgeObjectRelease();
    *v73 = v70;
    v73[1] = v72;
    v140 = 10;
    v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v76 = v75;
    v77 = (uint64_t *)v121;
    swift_bridgeObjectRelease();
    *v77 = v74;
    v77[1] = v76;
    v140 = 11;
    v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v80 = v79;
    v81 = (uint64_t *)v120;
    swift_bridgeObjectRelease();
    *v81 = v78;
    v81[1] = v80;
    v140 = 12;
    v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v84 = v83;
    v85 = (uint64_t *)v119;
    swift_bridgeObjectRelease();
    *v85 = v82;
    v85[1] = v84;
    v140 = 13;
    v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v88 = v87;
    v89 = (uint64_t *)v118;
    swift_bridgeObjectRelease();
    *v89 = v86;
    v89[1] = v88;
    v140 = 14;
    v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v92 = v91;
    v93 = (uint64_t *)v117;
    swift_bridgeObjectRelease();
    *v93 = v90;
    v93[1] = v92;
    v140 = 15;
    v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v96 = v95;
    v97 = (uint64_t *)v136;
    swift_bridgeObjectRelease();
    *v97 = v94;
    v97[1] = v96;
    v140 = 16;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v42, v114, &demangling cache variable for type metadata for URL?);
    v140 = 17;
    v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v100 = v99;
    v101 = (uint64_t *)v110;
    swift_bridgeObjectRelease();
    *v101 = v98;
    v101[1] = v100;
    v140 = 18;
    v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v104 = v103;
    v105 = (uint64_t *)v111;
    swift_bridgeObjectRelease();
    *v105 = v102;
    v105[1] = v104;
    v140 = 19;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v106 = v135;
    v107 = v139;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v107, v106);
    v108 = (uint64_t)v138;
    outlined assign with take of AppPunchout?(v115, v113, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of BloodPressureQueryModel(v108, v116);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v137);
  return outlined destroy of GenericMedCompletedLogModel(v108, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureQueryModel);
}

uint64_t outlined init with copy of BloodPressureQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model;

  Model = type metadata accessor for BloodPressureQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in BloodPressureQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BloodPressureQueryModel and conformance BloodPressureQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for BloodPressureQueryModel, (uint64_t)&protocol conformance descriptor for BloodPressureQueryModel);
}

uint64_t base witness table accessor for Encodable in BloodPressureQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BloodPressureQueryModel and conformance BloodPressureQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for BloodPressureQueryModel, (uint64_t)&protocol conformance descriptor for BloodPressureQueryModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BloodPressureQueryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BloodPressureQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BloodPressureQueryModel(_QWORD *a1)
{
  return BloodPressureQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = a3[9];
    v24 = a3[10];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    v27 = *(_QWORD *)v26;
    v25[8] = v26[8];
    *(_QWORD *)v25 = v27;
    v28 = (char *)a1 + v24;
    v29 = (char *)a2 + v24;
    v28[8] = v29[8];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v30 = a3[11];
    v31 = a3[12];
    v32 = (uint64_t *)((char *)a1 + v30);
    v33 = (uint64_t *)((char *)a2 + v30);
    v96 = v33[1];
    *v32 = *v33;
    v32[1] = v96;
    v34 = (uint64_t *)((char *)a1 + v31);
    v35 = (uint64_t *)((char *)a2 + v31);
    v97 = v35[1];
    *v34 = *v35;
    v34[1] = v97;
    v36 = a3[13];
    v37 = a3[14];
    v38 = (uint64_t *)((char *)a1 + v36);
    v39 = (uint64_t *)((char *)a2 + v36);
    v94 = v39[1];
    *v38 = *v39;
    v38[1] = v94;
    v40 = (uint64_t *)((char *)a1 + v37);
    v41 = (uint64_t *)((char *)a2 + v37);
    v95 = v41[1];
    *v40 = *v41;
    v40[1] = v95;
    v42 = a3[15];
    v43 = a3[16];
    v44 = (uint64_t *)((char *)a1 + v42);
    v45 = (uint64_t *)((char *)a2 + v42);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = (uint64_t *)((char *)a1 + v43);
    v48 = (uint64_t *)((char *)a2 + v43);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = a3[17];
    v51 = a3[18];
    v52 = (uint64_t *)((char *)a1 + v50);
    v53 = (uint64_t *)((char *)a2 + v50);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = (uint64_t *)((char *)a1 + v51);
    v56 = (uint64_t *)((char *)a2 + v51);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = a3[19];
    v59 = a3[20];
    v60 = (uint64_t *)((char *)a1 + v58);
    v61 = (uint64_t *)((char *)a2 + v58);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    __dst = (char *)a1 + v59;
    v63 = (char *)a2 + v59;
    v64 = type metadata accessor for URL();
    v92 = *(_QWORD *)(v64 - 8);
    v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v93(v63, 1, v64))
    {
      v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(__dst, v63, v64);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v64);
    }
    v66 = a3[21];
    v67 = a3[22];
    v68 = (uint64_t *)((char *)a1 + v66);
    v69 = (uint64_t *)((char *)a2 + v66);
    v70 = v69[1];
    *v68 = *v69;
    v68[1] = v70;
    v71 = (uint64_t *)((char *)a1 + v67);
    v72 = (uint64_t *)((char *)a2 + v67);
    v73 = v72[1];
    *v71 = *v72;
    v71[1] = v73;
    v74 = a3[23];
    v75 = (char *)a1 + v74;
    v76 = (char *)a2 + v74;
    v77 = type metadata accessor for SnippetHeaderModel();
    v78 = *(_QWORD *)(v77 - 8);
    v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v79(v76, 1, v77))
    {
      v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      v81 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v75, v76, v81);
      v82 = *(int *)(v77 + 20);
      v83 = &v75[v82];
      v84 = &v76[v82];
      v85 = *((_QWORD *)v84 + 1);
      *(_QWORD *)v83 = *(_QWORD *)v84;
      *((_QWORD *)v83 + 1) = v85;
      v86 = *(int *)(v77 + 24);
      v87 = &v75[v86];
      v88 = &v76[v86];
      v89 = *((_QWORD *)v88 + 1);
      *(_QWORD *)v87 = *(_QWORD *)v88;
      *((_QWORD *)v87 + 1) = v89;
      v90 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v90(v75, 0, 1, v77);
    }
  }
  return a1;
}

uint64_t destroy for BloodPressureQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 80);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + *(int *)(a2 + 92);
  v10 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *__dst;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = a3[10];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v25 = *(_QWORD *)v24;
  v23[8] = v24[8];
  *(_QWORD *)v23 = v25;
  v26 = &a1[v22];
  v27 = &a2[v22];
  v26[8] = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v28 = a3[11];
  v29 = a3[12];
  v30 = &a1[v28];
  v31 = &a2[v28];
  v94 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v94;
  v32 = &a1[v29];
  v33 = &a2[v29];
  v95 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v95;
  v34 = a3[13];
  v35 = a3[14];
  v36 = &a1[v34];
  v37 = &a2[v34];
  v92 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v92;
  v38 = &a1[v35];
  v39 = &a2[v35];
  v93 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = v93;
  v40 = a3[15];
  v41 = a3[16];
  v42 = &a1[v40];
  v43 = &a2[v40];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = &a1[v41];
  v46 = &a2[v41];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = a3[17];
  v49 = a3[18];
  v50 = &a1[v48];
  v51 = &a2[v48];
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = v52;
  v53 = &a1[v49];
  v54 = &a2[v49];
  v55 = *((_QWORD *)v54 + 1);
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = v55;
  v56 = a3[19];
  v57 = a3[20];
  v58 = &a1[v56];
  v59 = &a2[v56];
  v60 = *((_QWORD *)v59 + 1);
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *((_QWORD *)v58 + 1) = v60;
  __dst = &a1[v57];
  v61 = &a2[v57];
  v62 = type metadata accessor for URL();
  v90 = *(_QWORD *)(v62 - 8);
  v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v91(v61, 1, v62))
  {
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(__dst, v61, v62);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v62);
  }
  v64 = a3[21];
  v65 = a3[22];
  v66 = &a1[v64];
  v67 = &a2[v64];
  v68 = *((_QWORD *)v67 + 1);
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *((_QWORD *)v66 + 1) = v68;
  v69 = &a1[v65];
  v70 = &a2[v65];
  v71 = *((_QWORD *)v70 + 1);
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *((_QWORD *)v69 + 1) = v71;
  v72 = a3[23];
  v73 = &a1[v72];
  v74 = &a2[v72];
  v75 = type metadata accessor for SnippetHeaderModel();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v77(v74, 1, v75))
  {
    v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    v79 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v73, v74, v79);
    v80 = *(int *)(v75 + 20);
    v81 = &v73[v80];
    v82 = &v74[v80];
    v83 = *((_QWORD *)v82 + 1);
    *(_QWORD *)v81 = *(_QWORD *)v82;
    *((_QWORD *)v81 + 1) = v83;
    v84 = *(int *)(v75 + 24);
    v85 = &v73[v84];
    v86 = &v74[v84];
    v87 = *((_QWORD *)v86 + 1);
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *((_QWORD *)v85 + 1) = v87;
    v88 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v88(v73, 0, 1, v75);
  }
  return a1;
}

char *assignWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t, uint64_t);
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *(_QWORD *)v30;
  v29[8] = v30[8];
  *(_QWORD *)v29 = v31;
  v32 = a3[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)v34;
  v33[8] = v34[8];
  *(_QWORD *)v33 = v35;
  v36 = a3[11];
  v37 = &a1[v36];
  v38 = &a2[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = a3[12];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = a3[13];
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = a3[14];
  v46 = &a1[v45];
  v47 = &a2[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v48 = a3[15];
  v49 = &a1[v48];
  v50 = &a2[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51 = a3[16];
  v52 = &a1[v51];
  v53 = &a2[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = a3[17];
  v55 = &a1[v54];
  v56 = &a2[v54];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v57 = a3[18];
  v58 = &a1[v57];
  v59 = &a2[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = a3[19];
  v61 = &a1[v60];
  v62 = &a2[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = a3[20];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = type metadata accessor for URL();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
LABEL_12:
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v64, v65, v66);
LABEL_13:
  v72 = a3[21];
  v73 = &a1[v72];
  v74 = &a2[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v75 = a3[22];
  v76 = &a1[v75];
  v77 = &a2[v75];
  *(_QWORD *)v76 = *(_QWORD *)v77;
  *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78 = a3[23];
  v79 = &a1[v78];
  v80 = &a2[v78];
  v81 = type metadata accessor for SnippetHeaderModel();
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  v84 = v83(v79, 1, v81);
  v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      v96 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 24))(v79, v80, v96);
      v97 = *(int *)(v81 + 20);
      v98 = &v79[v97];
      v99 = &v80[v97];
      *(_QWORD *)v98 = *(_QWORD *)v99;
      *((_QWORD *)v98 + 1) = *((_QWORD *)v99 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v100 = *(int *)(v81 + 24);
      v101 = &v79[v100];
      v102 = &v80[v100];
      *(_QWORD *)v101 = *(_QWORD *)v102;
      *((_QWORD *)v101 + 1) = *((_QWORD *)v102 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v85)
  {
LABEL_18:
    v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    return a1;
  }
  v86 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v79, v80, v86);
  v87 = *(int *)(v81 + 20);
  v88 = &v79[v87];
  v89 = &v80[v87];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *((_QWORD *)v88 + 1) = *((_QWORD *)v89 + 1);
  v90 = *(int *)(v81 + 24);
  v91 = &v79[v90];
  v92 = &v80[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *((_QWORD *)v91 + 1) = *((_QWORD *)v92 + 1);
  v93 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93(v79, 0, 1, v81);
  return a1;
}

char *initializeWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = a3[10];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = &a1[v22];
  v26 = &a2[v22];
  v25[8] = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  v28 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  v29 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  v30 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  v31 = a3[20];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_OWORD *)&a1[a3[19]] = *(_OWORD *)&a2[a3[19]];
  v34 = type metadata accessor for URL();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v37] = *(_OWORD *)&a2[v37];
  v38 = a3[23];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for SnippetHeaderModel();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v44 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v39, v40, v44);
    *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
    *(_OWORD *)&v39[*(int *)(v41 + 24)] = *(_OWORD *)&v40[*(int *)(v41 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  return a1;
}

char *assignWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(char *, uint64_t, uint64_t);
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[9];
  v25 = a3[10];
  v26 = &a1[v24];
  v27 = &a2[v24];
  v28 = *(_QWORD *)v27;
  v26[8] = v27[8];
  *(_QWORD *)v26 = v28;
  v29 = &a1[v25];
  v30 = &a2[v25];
  v29[8] = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = a3[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v35 = *(_QWORD *)v33;
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = v35;
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  v36 = a3[12];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  v41 = a3[13];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  v46 = a3[14];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  v51 = a3[15];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v55 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = v55;
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  v56 = a3[16];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  v61 = a3[17];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease();
  v66 = a3[18];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v70 = *(_QWORD *)v68;
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = v70;
  *((_QWORD *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  v71 = a3[19];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v75 = *(_QWORD *)v73;
  v74 = *((_QWORD *)v73 + 1);
  *(_QWORD *)v72 = v75;
  *((_QWORD *)v72 + 1) = v74;
  swift_bridgeObjectRelease();
  v76 = a3[20];
  v77 = &a1[v76];
  v78 = &a2[v76];
  v79 = type metadata accessor for URL();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v77, v79);
LABEL_12:
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v77, v78, v79);
LABEL_13:
  v85 = a3[21];
  v86 = &a1[v85];
  v87 = &a2[v85];
  v89 = *(_QWORD *)v87;
  v88 = *((_QWORD *)v87 + 1);
  *(_QWORD *)v86 = v89;
  *((_QWORD *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  v90 = a3[22];
  v91 = &a1[v90];
  v92 = &a2[v90];
  v94 = *(_QWORD *)v92;
  v93 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v91 = v94;
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  v95 = a3[23];
  v96 = &a1[v95];
  v97 = &a2[v95];
  v98 = type metadata accessor for SnippetHeaderModel();
  v99 = *(_QWORD *)(v98 - 8);
  v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
  v101 = v100(v96, 1, v98);
  v102 = v100(v97, 1, v98);
  if (!v101)
  {
    if (!v102)
    {
      v106 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 40))(v96, v97, v106);
      v107 = *(int *)(v98 + 20);
      v108 = &v96[v107];
      v109 = &v97[v107];
      v111 = *(_QWORD *)v109;
      v110 = *((_QWORD *)v109 + 1);
      *(_QWORD *)v108 = v111;
      *((_QWORD *)v108 + 1) = v110;
      swift_bridgeObjectRelease();
      v112 = *(int *)(v98 + 24);
      v113 = &v96[v112];
      v114 = &v97[v112];
      v116 = *(_QWORD *)v114;
      v115 = *((_QWORD *)v114 + 1);
      *(_QWORD *)v113 = v116;
      *((_QWORD *)v113 + 1) = v115;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v102)
  {
LABEL_18:
    v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    return a1;
  }
  v103 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v96, v97, v103);
  *(_OWORD *)&v96[*(int *)(v98 + 20)] = *(_OWORD *)&v97[*(int *)(v98 + 20)];
  *(_OWORD *)&v96[*(int *)(v98 + 24)] = *(_OWORD *)&v97[*(int *)(v98 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A01C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + a3[11] + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[20];
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v12 = *(_QWORD *)(v13 - 8);
      v14 = a3[23];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for BloodPressureQueryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A02B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[11] + 8) = a2;
      return result;
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[20];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[23];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for BloodPressureQueryModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_24A4A056C + 4 * byte_24A4E9E19[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_24A4A05A0 + 4 * byte_24A4E9E14[v4]))();
}

uint64_t sub_24A4A05A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4A05A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4A05B0);
  return result;
}

uint64_t sub_24A4A05BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4A05C4);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_24A4A05C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4A05D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for BloodPressureQueryModel.CodingKeys()
{
  return &unk_251BD2F38;
}

uint64_t specialized BloodPressureQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xEB000000006E694DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xEB0000000078614DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xE900000000000063
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEC0000006E694D63
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEC00000078614D63
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEF676E6972745363
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F3C30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F3C50
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3C70
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3C90
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xEF676E697274536CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xED00006C6562614CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEE006C6562614C63
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 19;
    else
      return 20;
  }
}

uint64_t SingleActivitySummaryModel.totalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SingleActivitySummaryModel.totalValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*SingleActivitySummaryModel.totalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.goalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t SingleActivitySummaryModel.goalValue.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*SingleActivitySummaryModel.goalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.date.getter()
{
  return swift_retain();
}

uint64_t SingleActivitySummaryModel.date.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SingleActivitySummaryModel.date.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.timeLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.timeLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.unitLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.unitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.dataLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.dataLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  return outlined init with copy of SnippetHeaderModel?(v3, a1);
}

uint64_t type metadata accessor for SingleActivitySummaryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SingleActivitySummaryModel;
  if (!type metadata singleton initialization cache for SingleActivitySummaryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  return outlined assign with take of SnippetHeaderModel?(a1, v3);
}

uint64_t outlined assign with take of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SingleActivitySummaryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for SingleActivitySummaryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.init(totalValue:goalValue:date:unitLabel:snippetHeaderModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  _QWORD v39[2];

  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v39 - v18;
  v20 = type metadata accessor for SingleActivitySummaryModel();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 80) = 0;
  v21 = a5 + *(int *)(v20 + 44);
  v22 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  if (a6 > -9.22337204e18 && a6 < 9.22337204e18 && trunc(a6) == a6)
  {
    *(_QWORD *)a5 = (uint64_t)a6;
    if (a7 <= -9.22337204e18)
    {
      v23 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v23 = 0;
    *(_QWORD *)a5 = 0;
    if (a7 <= -9.22337204e18)
      goto LABEL_12;
  }
  v24 = trunc(a7) == a7 && a7 < 9.22337204e18;
  v23 = (uint64_t)a7;
  if (!v24)
    v23 = 0;
LABEL_12:
  *(_QWORD *)(a5 + 8) = v23;
  *(_QWORD *)(a5 + 16) = a1;
  *(_QWORD *)(a5 + 56) = a2;
  *(_QWORD *)(a5 + 64) = a3;
  swift_retain();
  outlined assign with copy of SnippetHeaderModel?(a4, v21);
  v25 = *(_QWORD *)(a5 + 16);
  if (!v25)
  {
LABEL_15:
    v28 = 0;
    goto LABEL_17;
  }
  swift_retain();
  dispatch thunk of DialogCalendar.dateDescriptive.getter();
  swift_release();
  v26 = type metadata accessor for SpeakableString();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v19, 1, v26) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
    v25 = 0;
    goto LABEL_15;
  }
  v29 = SpeakableString.print.getter();
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v26);
  v39[0] = v29;
  v39[1] = v31;
  lazy protocol witness table accessor for type String and conformance String();
  v25 = StringProtocol.capitalized.getter();
  v28 = v32;
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  *(_QWORD *)(a5 + 24) = v25;
  *(_QWORD *)(a5 + 32) = v28;
  v33 = *(_QWORD *)(a5 + 16);
  if (v33)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.timeDescriptive.getter();
    swift_release();
    v34 = type metadata accessor for SpeakableString();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v34) == 1)
    {
      swift_release();
      outlined destroy of Font.Design?(a4, &demangling cache variable for type metadata for SnippetHeaderModel?);
      outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      v33 = 0;
      v36 = 0;
    }
    else
    {
      v33 = SpeakableString.print.getter();
      v36 = v37;
      swift_release();
      outlined destroy of Font.Design?(a4, &demangling cache variable for type metadata for SnippetHeaderModel?);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v34);
    }
  }
  else
  {
    swift_release();
    outlined destroy of Font.Design?(a4, &demangling cache variable for type metadata for SnippetHeaderModel?);
    v36 = 0;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a5 + 40) = v33;
  *(_QWORD *)(a5 + 48) = v36;
  return result;
}

uint64_t SingleActivitySummaryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4A1630 + 4 * byte_24A4EA0B0[a1]))(0x6C61566C61746F74, 0xEA00000000006575);
}

uint64_t sub_24A4A1630()
{
  return 0x756C61566C616F67;
}

uint64_t sub_24A4A1650()
{
  return 1702125924;
}

uint64_t sub_24A4A1660()
{
  return 0x6562614C65746164;
}

unint64_t sub_24A4A16A0()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SingleActivitySummaryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return SingleActivitySummaryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SingleActivitySummaryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SingleActivitySummaryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SingleActivitySummaryModel.CodingKeys()
{
  lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SingleActivitySummaryModel.CodingKeys()
{
  lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SingleActivitySummaryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[8];
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SingleActivitySummaryModel.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11 = *(_QWORD *)(v3 + 16);
    v10[7] = 2;
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for SingleActivitySummaryModel();
    LOBYTE(v11) = 7;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SingleActivitySummaryModel.CodingKeys, &unk_251BD3090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SingleActivitySummaryModel.CodingKeys, &unk_251BD3090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SingleActivitySummaryModel.CodingKeys, &unk_251BD3090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508]("͎n\a,p", &unk_251BD3090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

uint64_t SingleActivitySummaryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v28 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SingleActivitySummaryModel.CodingKeys>);
  v5 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SingleActivitySummaryModel();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v11 + 1) = 0u;
  *((_QWORD *)v11 + 6) = 0;
  *((_OWORD *)v11 + 2) = 0u;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  v12 = (uint64_t)&v11[*(int *)(v9 + 44)];
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v32 = v12;
  v14(v12, 1, 1, v13);
  v15 = a1[3];
  v31 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();
  v30 = v7;
  v16 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    v22 = v32;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of Font.Design?(v22, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    v18 = (uint64_t)v27;
    v17 = v28;
    LOBYTE(v35) = 0;
    v19 = v29;
    *(_QWORD *)v11 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v35) = 1;
    *((_QWORD *)v11 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    type metadata accessor for DialogCalendar();
    v34 = 2;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *((_QWORD *)v11 + 2) = v35;
    LOBYTE(v35) = 3;
    *((_QWORD *)v11 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((_QWORD *)v11 + 4) = v20;
    LOBYTE(v35) = 4;
    *((_QWORD *)v11 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((_QWORD *)v11 + 6) = v21;
    LOBYTE(v35) = 5;
    *((_QWORD *)v11 + 7) = KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)v11 + 8) = v23;
    LOBYTE(v35) = 6;
    *((_QWORD *)v11 + 9) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((_QWORD *)v11 + 10) = v24;
    LOBYTE(v35) = 7;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v25 = v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v25, v19);
    outlined assign with take of SnippetHeaderModel?(v18, v32);
    outlined init with copy of SingleActivitySummaryModel((uint64_t)v11, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    return outlined destroy of GenericMedCompletedLogModel((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SingleActivitySummaryModel);
  }
}

uint64_t outlined init with copy of SingleActivitySummaryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleActivitySummaryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in SingleActivitySummaryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SingleActivitySummaryModel and conformance SingleActivitySummaryModel, (uint64_t (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel, (uint64_t)"ŏn\a$q");
}

uint64_t base witness table accessor for Encodable in SingleActivitySummaryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SingleActivitySummaryModel and conformance SingleActivitySummaryModel, (uint64_t (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel, (uint64_t)&protocol conformance descriptor for SingleActivitySummaryModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SingleActivitySummaryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleActivitySummaryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SingleActivitySummaryModel(_QWORD *a1)
{
  return SingleActivitySummaryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleActivitySummaryModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  char *__dst;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    v7 = a2[7];
    a1[6] = a2[6];
    a1[7] = v7;
    v8 = a2[9];
    a1[8] = a2[8];
    a1[9] = v8;
    v9 = *(int *)(a3 + 44);
    __dst = (char *)a1 + v9;
    v10 = (char *)a2 + v9;
    a1[10] = a2[10];
    v11 = type metadata accessor for SnippetHeaderModel();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(__dst, v10, v16);
      v17 = *(int *)(v11 + 20);
      v18 = &__dst[v17];
      v19 = &v10[v17];
      v20 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = v20;
      v21 = *(int *)(v11 + 24);
      v22 = &__dst[v21];
      v23 = &v10[v21];
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(__dst, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t destroy for SingleActivitySummaryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  char *__dst;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(int *)(a3 + 44);
  __dst = (char *)(a1 + v8);
  v9 = (char *)(a2 + v8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = type metadata accessor for SnippetHeaderModel();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(__dst, v9, v14);
    v15 = *(int *)(v10 + 20);
    v16 = &__dst[v15];
    v17 = &v9[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v19 = *(int *)(v10 + 24);
    v20 = &__dst[v19];
    v21 = &v9[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(__dst, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for SingleActivitySummaryModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SnippetHeaderModel();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v24 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v7, v8, v24);
      v25 = *(int *)(v9 + 20);
      v26 = &v7[v25];
      v27 = &v8[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v28 = *(int *)(v9 + 24);
      v29 = &v7[v28];
      v30 = &v8[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  v14 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
  v15 = *(int *)(v9 + 20);
  v16 = &v7[v15];
  v17 = &v8[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  v18 = *(int *)(v9 + 24);
  v19 = &v7[v18];
  v20 = &v8[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 44);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = type metadata accessor for SnippetHeaderModel();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
    *(_OWORD *)&v5[*(int *)(v7 + 20)] = *(_OWORD *)&v6[*(int *)(v7 + 20)];
    *(_OWORD *)&v5[*(int *)(v7 + 24)] = *(_OWORD *)&v6[*(int *)(v7 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 44);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v21 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v11, v12, v21);
      v22 = *(int *)(v13 + 20);
      v23 = &v11[v22];
      v24 = &v12[v22];
      v26 = *(_QWORD *)v24;
      v25 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = v26;
      *((_QWORD *)v23 + 1) = v25;
      swift_bridgeObjectRelease();
      v27 = *(int *)(v13 + 24);
      v28 = &v11[v27];
      v29 = &v12[v27];
      v31 = *(_QWORD *)v29;
      v30 = *((_QWORD *)v29 + 1);
      *(_QWORD *)v28 = v31;
      *((_QWORD *)v28 + 1) = v30;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  v18 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v11, v12, v18);
  *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
  *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleActivitySummaryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A27BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SingleActivitySummaryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A2848(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 64) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SingleActivitySummaryModel()
{
  unint64_t v0;

  type metadata accessor for SnippetHeaderModel?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for SnippetHeaderModel?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SnippetHeaderModel?)
  {
    type metadata accessor for SnippetHeaderModel();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?);
  }
}

uint64_t storeEnumTagSinglePayload for SingleActivitySummaryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_24A4A29FC + 4 * byte_24A4EA0BD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_24A4A2A30 + 4 * byte_24A4EA0B8[v4]))();
}

uint64_t sub_24A4A2A30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4A2A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4A2A40);
  return result;
}

uint64_t sub_24A4A2A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4A2A54);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_24A4A2A58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4A2A60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SingleActivitySummaryModel.CodingKeys()
{
  return &unk_251BD3090;
}

uint64_t specialized SingleActivitySummaryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61566C61746F74 && a2 == 0xEA00000000006575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756C61566C616F67 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t PhoneRingsSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v3 = v1 + *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  v4 = *(_OWORD *)(v3 + 208);
  v5 = *(_OWORD *)(v3 + 176);
  v36 = *(_OWORD *)(v3 + 192);
  v37 = v4;
  v6 = *(_OWORD *)(v3 + 208);
  v38 = *(_OWORD *)(v3 + 224);
  v7 = *(_OWORD *)(v3 + 144);
  v9 = *(_OWORD *)(v3 + 112);
  v32 = *(_OWORD *)(v3 + 128);
  v8 = v32;
  v33 = v7;
  v10 = *(_OWORD *)(v3 + 144);
  v11 = *(_OWORD *)(v3 + 176);
  v34 = *(_OWORD *)(v3 + 160);
  v12 = v34;
  v35 = v11;
  v13 = *(_OWORD *)(v3 + 80);
  v15 = *(_OWORD *)(v3 + 48);
  v28 = *(_OWORD *)(v3 + 64);
  v14 = v28;
  v29 = v13;
  v16 = *(_OWORD *)(v3 + 80);
  v17 = *(_OWORD *)(v3 + 112);
  v30 = *(_OWORD *)(v3 + 96);
  v18 = v30;
  v31 = v17;
  v19 = *(_OWORD *)(v3 + 16);
  v20 = *(_OWORD *)(v3 + 48);
  v26 = *(_OWORD *)(v3 + 32);
  v21 = v26;
  v27 = v20;
  v22 = *(_OWORD *)(v3 + 16);
  v25[0] = *(_OWORD *)v3;
  v23 = v25[0];
  v25[1] = v22;
  *(_OWORD *)(a1 + 192) = v36;
  *(_OWORD *)(a1 + 208) = v6;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(v3 + 224);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v5;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)a1 = v23;
  *(_OWORD *)(a1 + 16) = v19;
  v39 = *(_BYTE *)(v3 + 240);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(v3 + 240);
  *(_OWORD *)(a1 + 32) = v21;
  *(_OWORD *)(a1 + 48) = v15;
  return outlined retain of PhoneRingsModel((uint64_t)v25);
}

uint64_t type metadata accessor for PhoneRingsSnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PhoneRingsSnippet;
  if (!type metadata singleton initialization cache for PhoneRingsSnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined retain of PhoneRingsModel(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t PhoneRingsSnippet.moveRingTextColor.getter()
{
  return PhoneRingsSnippet.moveRingTextColor.getter(0.980392157, 0.0666666667, 0.309803922);
}

uint64_t PhoneRingsSnippet.exerciseRingTextColor.getter()
{
  return PhoneRingsSnippet.moveRingTextColor.getter(0.650980392, 1.0, 0.0);
}

uint64_t PhoneRingsSnippet.standRingTextColor.getter()
{
  return PhoneRingsSnippet.moveRingTextColor.getter(0.0, 1.0, 0.964705882);
}

uint64_t PhoneRingsSnippet.moveRingTextColor.getter(double a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = type metadata accessor for Color.RGBColorSpace();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v9 + 104))(v8, *MEMORY[0x24BDF3C20]);
  return MEMORY[0x24BD10E84](v8, a1, a2, a3, 1.0);
}

__n128 PhoneRingsSnippet.init(model:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;

  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  swift_storeEnumTagMultiPayload();
  v4 = (char *)a2 + *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  v5 = *(_OWORD *)(a1 + 208);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a1 + 192);
  *((_OWORD *)v4 + 13) = v5;
  *((_OWORD *)v4 + 14) = *(_OWORD *)(a1 + 224);
  v4[240] = *(_BYTE *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)v4 + 8) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v4 + 9) = v6;
  v7 = *(_OWORD *)(a1 + 176);
  *((_OWORD *)v4 + 10) = *(_OWORD *)(a1 + 160);
  *((_OWORD *)v4 + 11) = v7;
  v8 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v4 + 5) = v8;
  v9 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v4 + 7) = v9;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *((_OWORD *)v4 + 1) = v10;
  result = *(__n128 *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  *((__n128 *)v4 + 2) = result;
  *((_OWORD *)v4 + 3) = v12;
  return result;
}

uint64_t PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE v93[4];
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE v125[384];
  uint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD v137[2];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  _BYTE v152[7];
  char v153;
  _BYTE v154[7];
  char v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  _OWORD v172[24];
  char v173;
  _BYTE v174[7];
  unsigned __int8 v175;
  _BYTE v176[7];
  _BYTE v177[7];
  unsigned __int8 v178;
  _BYTE v179[7];
  _BYTE v180[7];
  char v181;
  _BYTE v182[7];
  _DWORD v183[5];

  v124 = a1;
  v2 = type metadata accessor for ComponentStackBottomSpacing();
  v122 = *(_QWORD *)(v2 - 8);
  v123 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v121 = &v93[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for PhoneRingsSnippet();
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v114 = *(_QWORD *)(v4 - 8);
  v115 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v113 = &v93[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, Modifie);
  v119 = *(_QWORD *)(v7 - 8);
  v120 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v117 = &v93[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _Padding);
  MEMORY[0x24BDAC7A8](v118);
  v116 = &v93[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v11 = *(_QWORD *)(v10 - 8);
  v111 = *(_QWORD *)(v11 + 64);
  v112 = v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v110 = &v93[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v109 = (uint64_t *)&v93[-v14];
  v15 = type metadata accessor for Color.RGBColorSpace();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v93[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = (__int128 *)(v1 + *(int *)(v4 + 20));
  v20 = v19[13];
  v21 = v19[11];
  v148 = v19[12];
  v149 = v20;
  v22 = v19[13];
  v150 = v19[14];
  v23 = v19[9];
  v24 = v19[7];
  v144 = v19[8];
  v145 = v23;
  v25 = v19[9];
  v26 = v19[11];
  v146 = v19[10];
  v147 = v26;
  v27 = v19[5];
  v28 = v19[3];
  v140 = v19[4];
  v141 = v27;
  v29 = v19[5];
  v30 = v19[7];
  v142 = v19[6];
  v143 = v30;
  v31 = v19[1];
  v137[0] = *v19;
  v137[1] = v31;
  v32 = v19[3];
  v34 = *v19;
  v33 = v19[1];
  v138 = v19[2];
  v139 = v32;
  v168 = v148;
  v169 = v22;
  v170 = v19[14];
  v164 = v144;
  v165 = v25;
  v166 = v146;
  v167 = v21;
  v160 = v140;
  v161 = v29;
  v162 = v142;
  v163 = v24;
  v156 = v34;
  v157 = v33;
  v158 = v138;
  v151 = *((_BYTE *)v19 + 240);
  LOBYTE(v171) = *((_BYTE *)v19 + 240);
  v159 = v28;
  outlined retain of PhoneRingsModel((uint64_t)v137);
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  v35 = v126;
  v105 = v128;
  v106 = v130;
  v107 = v131;
  v155 = v127;
  v153 = v129;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BDF3C20], v15);
  v36 = MEMORY[0x24BD10E84](v18, 0.109803922, 0.109803922, 0.117647059, 1.0);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v37 = v132;
  v38 = v134;
  v39 = v135;
  v40 = v136;
  v41 = static Alignment.center.getter();
  v43 = v42;
  v44 = static Alignment.center.getter();
  v172[12] = v168;
  v172[13] = v169;
  v172[14] = v170;
  v172[8] = v164;
  v172[9] = v165;
  v172[10] = v166;
  v172[11] = v167;
  v172[4] = v160;
  v172[5] = v161;
  v172[6] = v162;
  v172[7] = v163;
  v172[0] = v156;
  v172[1] = v157;
  v172[2] = v158;
  v172[3] = v159;
  *(_QWORD *)&v172[15] = v171;
  *((_QWORD *)&v172[15] + 1) = v35;
  LOBYTE(v172[16]) = v155;
  *(_DWORD *)((char *)&v172[16] + 1) = *(_DWORD *)v154;
  DWORD1(v172[16]) = *(_DWORD *)&v154[3];
  *((_QWORD *)&v172[16] + 1) = v105;
  LOBYTE(v172[17]) = v153;
  *(_DWORD *)((char *)&v172[17] + 1) = *(_DWORD *)v152;
  DWORD1(v172[17]) = *(_DWORD *)&v152[3];
  *((_QWORD *)&v172[17] + 1) = v106;
  *(_QWORD *)&v172[18] = v107;
  *((_QWORD *)&v172[18] + 1) = v37;
  *(_QWORD *)&v172[19] = v133;
  *((_QWORD *)&v172[19] + 1) = v38;
  *(_QWORD *)&v172[20] = v39;
  *((_QWORD *)&v172[20] + 1) = v40;
  *(_QWORD *)&v172[21] = v36;
  WORD4(v172[21]) = 256;
  *(_QWORD *)&v172[22] = v41;
  *((_QWORD *)&v172[22] + 1) = v43;
  *(_QWORD *)&v172[23] = v44;
  *((_QWORD *)&v172[23] + 1) = v45;
  LODWORD(v107) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  v105 = v47;
  v106 = v46;
  v103 = v49;
  v104 = v48;
  memcpy(v125, v172, sizeof(v125));
  v173 = 0;
  v96 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  v51 = v50;
  v53 = v52;
  v55 = v54;
  v57 = v56;
  LOBYTE(v41) = v173;
  v175 = 0;
  v97 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  v59 = v58;
  v61 = v60;
  v63 = v62;
  v65 = v64;
  v94 = v175;
  v178 = 0;
  v98 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  v101 = v67;
  v102 = v66;
  v99 = v69;
  v100 = v68;
  v95 = v178;
  v181 = 0;
  v70 = static HorizontalAlignment.leading.getter();
  v71 = (uint64_t)v109;
  *v109 = v70;
  *(_QWORD *)(v71 + 8) = 0x401C000000000000;
  *(_BYTE *)(v71 + 16) = 0;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v73 = v108;
  closure #1 in PhoneRingsSnippet.body.getter(v108, (char *)(v71 + *(int *)(v72 + 44)));
  v74 = v113;
  outlined init with copy of PhoneRingsSnippet(v73, (uint64_t)v113);
  LOBYTE(v73) = v181;
  v75 = v110;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v71, (uint64_t)v110, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v76 = (*(unsigned __int8 *)(v114 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
  v77 = (v115 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
  v78 = (*(unsigned __int8 *)(v112 + 80) + v77 + 569) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
  v79 = swift_allocObject();
  outlined init with take of PhoneRingsSnippet((uint64_t)v74, v79 + v76);
  v80 = v79 + v77;
  memcpy((void *)(v79 + v77), v125, 0x180uLL);
  *(_BYTE *)(v80 + 384) = v107;
  *(_DWORD *)(v80 + 385) = *(_DWORD *)v174;
  *(_DWORD *)(v80 + 388) = *(_DWORD *)&v174[3];
  v81 = v105;
  *(_QWORD *)(v80 + 392) = v106;
  *(_QWORD *)(v80 + 400) = v81;
  v82 = v103;
  *(_QWORD *)(v80 + 408) = v104;
  *(_QWORD *)(v80 + 416) = v82;
  *(_BYTE *)(v80 + 424) = v41;
  *(_DWORD *)(v80 + 425) = *(_DWORD *)v177;
  *(_DWORD *)(v80 + 428) = *(_DWORD *)&v177[3];
  *(_BYTE *)(v80 + 432) = v96;
  *(_DWORD *)(v80 + 433) = *(_DWORD *)v176;
  *(_DWORD *)(v80 + 436) = *(_DWORD *)&v176[3];
  *(_QWORD *)(v80 + 440) = v51;
  *(_QWORD *)(v80 + 448) = v53;
  *(_QWORD *)(v80 + 456) = v55;
  *(_QWORD *)(v80 + 464) = v57;
  *(_BYTE *)(v80 + 472) = v94;
  *(_DWORD *)(v80 + 476) = *(_DWORD *)&v180[3];
  *(_DWORD *)(v80 + 473) = *(_DWORD *)v180;
  *(_BYTE *)(v80 + 480) = v97;
  *(_DWORD *)(v80 + 484) = *(_DWORD *)&v179[3];
  *(_DWORD *)(v80 + 481) = *(_DWORD *)v179;
  *(_QWORD *)(v80 + 488) = v59;
  *(_QWORD *)(v80 + 496) = v61;
  *(_QWORD *)(v80 + 504) = v63;
  *(_QWORD *)(v80 + 512) = v65;
  *(_BYTE *)(v80 + 520) = v95;
  *(_DWORD *)(v80 + 524) = *(_DWORD *)((char *)v183 + 3);
  *(_DWORD *)(v80 + 521) = v183[0];
  *(_BYTE *)(v80 + 528) = v98;
  *(_DWORD *)(v80 + 532) = *(_DWORD *)&v182[3];
  *(_DWORD *)(v80 + 529) = *(_DWORD *)v182;
  *(_QWORD *)(v80 + 536) = v102;
  *(_QWORD *)(v80 + 544) = v101;
  *(_QWORD *)(v80 + 552) = v100;
  *(_QWORD *)(v80 + 560) = v99;
  *(_BYTE *)(v80 + 568) = v73;
  outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>((uint64_t)v75, v79 + v78, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v172);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<Modifi);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<Mo, &demangling cache variable for type metadata for TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<Modifi, MEMORY[0x24BDF5420]);
  v83 = v117;
  SnippetBody.init(content:)();
  v84 = static Color.black.getter();
  LOBYTE(v41) = static Edge.Set.all.getter();
  v86 = v119;
  v85 = v120;
  v87 = (uint64_t)v116;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 16))(v116, v83, v120);
  v88 = v87 + *(int *)(v118 + 36);
  *(_QWORD *)v88 = v84;
  *(_BYTE *)(v88 + 8) = v41;
  (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v83, v85);
  v90 = v121;
  v89 = v122;
  v91 = v123;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v122 + 104))(v121, *MEMORY[0x24BEAE360], v123);
  lazy protocol witness table accessor for type ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLa();
  View.lastComponentBottomSpacing(_:)();
  outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v172);
  (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v90, v91);
  outlined destroy of Font.Design?(v87, &demangling cache variable for type metadata for ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _Padding);
  return outlined destroy of Font.Design?(v71, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
}

uint64_t closure #1 in PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  void (*v80)(char *, _QWORD, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;

  v76 = a2;
  v83 = type metadata accessor for Color.RGBColorSpace();
  v3 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v84 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v82 = *(_QWORD *)(v85 - 8);
  v5 = MEMORY[0x24BDAC7A8](v85);
  v75 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v74 = (char *)&v69 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v73 = (char *)&v69 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v71 = (uint64_t)&v69 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v72 = (char *)&v69 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v70 = (uint64_t)&v69 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v81 = (char *)&v69 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v69 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v86 = (char *)&v69 - v22;
  v23 = *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  v87 = a1;
  v24 = (_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a1 + v23 + 152);
  if (v25)
  {
    v78 = v24[18];
    v26 = v25;
  }
  else
  {
    v26 = 0xE400000000000000;
    v78 = 1702260557;
  }
  v77 = 3157808;
  v27 = v24[21];
  if (v27)
  {
    v69 = v24[20];
    v28 = v27;
    v29 = v24[23];
    if (v29)
    {
LABEL_6:
      v30 = v24[22];
      v31 = v29;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = 0xE300000000000000;
    v69 = 3157808;
    v29 = v24[23];
    if (v29)
      goto LABEL_6;
  }
  v31 = 0xE300000000000000;
  v30 = 4997443;
LABEL_9:
  v32 = *(void (**)(_QWORD))(v3 + 104);
  v33 = v84;
  v79 = *MEMORY[0x24BDF3C20];
  v80 = (void (*)(char *, _QWORD, uint64_t))v32;
  v32(v84);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = MEMORY[0x24BD10E84](v33, 0.980392157, 0.0666666667, 0.309803922, 1.0);
  PhoneRingsSnippet.labelPair(label:value:unit:color:)(v78, v26, v69, v28, v30, v31, v34, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v78 = *(_QWORD *)(v82 + 32);
  ((void (*)(char *, char *, uint64_t))v78)(v86, v21, v85);
  v35 = v24[13];
  if (v35)
  {
    v69 = v24[12];
    v36 = v35;
    v37 = v24[15];
    if (v37)
      goto LABEL_11;
LABEL_14:
    v39 = 0xE300000000000000;
    v38 = 3157808;
    v40 = v24[17];
    if (v40)
      goto LABEL_12;
    goto LABEL_15;
  }
  v36 = 0xE800000000000000;
  v69 = 0x6573696372657845;
  v37 = v24[15];
  if (!v37)
    goto LABEL_14;
LABEL_11:
  v38 = v24[14];
  v39 = v37;
  v40 = v24[17];
  if (v40)
  {
LABEL_12:
    v41 = v24[16];
    v42 = v40;
    goto LABEL_16;
  }
LABEL_15:
  v42 = 0xE300000000000000;
  v41 = 5130573;
LABEL_16:
  v43 = v84;
  v80(v84, v79, v83);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = MEMORY[0x24BD10E84](v43, 0.650980392, 1.0, 0.0, 1.0);
  v45 = v70;
  PhoneRingsSnippet.labelPair(label:value:unit:color:)(v69, v36, v38, v39, v41, v42, v44, v70);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t))v78)(v81, v45, v85);
  if (v24[25])
  {
    v46 = v24[24];
    v47 = v24[25];
    v48 = v24[27];
    if (v48)
      goto LABEL_18;
LABEL_21:
    v49 = 0xE300000000000000;
    v50 = v24[29];
    if (v50)
      goto LABEL_19;
LABEL_22:
    v52 = 0xE300000000000000;
    v51 = 5460552;
    goto LABEL_23;
  }
  v47 = 0xE500000000000000;
  v46 = 0x646E617453;
  v48 = v24[27];
  if (!v48)
    goto LABEL_21;
LABEL_18:
  v77 = v24[26];
  v49 = v48;
  v50 = v24[29];
  if (!v50)
    goto LABEL_22;
LABEL_19:
  v51 = v24[28];
  v52 = v50;
LABEL_23:
  v53 = v84;
  v80(v84, v79, v83);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = MEMORY[0x24BD10E84](v53, 0.0, 1.0, 0.964705882, 1.0);
  v55 = v71;
  PhoneRingsSnippet.labelPair(label:value:unit:color:)(v46, v47, v77, v49, v51, v52, v54, v71);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56 = v72;
  v57 = v55;
  v58 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v78)(v72, v57, v85);
  v59 = v82;
  v60 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  v61 = v73;
  v60(v73, v86, v58);
  v62 = v74;
  v63 = v81;
  v60(v74, v81, v58);
  v64 = v75;
  v60(v75, v56, v58);
  v65 = v76;
  v60(v76, v61, v58);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v60(&v65[*(int *)(v66 + 48)], v62, v58);
  v60(&v65[*(int *)(v66 + 64)], v64, v58);
  v67 = *(void (**)(char *, uint64_t))(v59 + 8);
  v67(v56, v58);
  v67(v63, v58);
  v67(v86, v58);
  v67(v64, v58);
  v67(v62, v58);
  return ((uint64_t (*)(char *, uint64_t))v67)(v61, v58);
}

uint64_t PhoneRingsSnippet.labelPair(label:value:unit:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v20 = a8;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = 0xC008000000000000;
  if ((PhoneRingsSnippet.isAccessibleAndLargeDynamicType()() & 1) != 0)
    v21 = 0xC018000000000000;
  *(_QWORD *)v17 = static HorizontalAlignment.leading.getter();
  *((_QWORD *)v17 + 1) = 0xC014000000000000;
  v17[16] = 0;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)(a1, a2, (uint64_t)&v21, a3, a4, a5, a6, a7, &v17[*(int *)(v18 + 44)]);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>, MEMORY[0x24BDF46F8]);
  View.componentSpacing(top:bottom:)();
  return outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
}

uint64_t closure #2 in PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v56 = a3;
  v54 = a2;
  v62 = a4;
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>);
  MEMORY[0x24BDAC7A8](v60);
  v51 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  MEMORY[0x24BDAC7A8](v55);
  v58 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>);
  MEMORY[0x24BDAC7A8](v57);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v61 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v59 = (char *)&v51 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v51 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SashStandard.Title();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (uint64_t **)((char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = type metadata accessor for SashStandard();
  MEMORY[0x24BDAC7A8](v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SashStandardView?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v52 = (uint64_t)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v51 - v30;
  v32 = *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  v53 = a1;
  if ((*(_BYTE *)(a1 + v32 + 240) & 1) != 0)
  {
    v33 = type metadata accessor for SashStandardView();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v31, 1, 1, v33);
  }
  else
  {
    *v25 = 0xD000000000000011;
    v25[1] = 0x800000024A4F3CB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x24BEAB120], v22);
    v34 = type metadata accessor for VisualProperty();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v21, 1, 1, v34);
    v35 = type metadata accessor for Color();
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
    v36(v18, 1, 1, v35);
    v36(v16, 1, 1, v35);
    v65 = 0;
    v63 = 0u;
    v64 = 0u;
    SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)();
    SashStandardView.init(model:)();
    v37 = type metadata accessor for SashStandardView();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v31, 0, 1, v37);
  }
  v38 = PhoneRingsSnippet.isAccessibleDynamicType()();
  v39 = (uint64_t)v59;
  if ((v38 & 1) != 0)
  {
    *(_QWORD *)v8 = static HorizontalAlignment.leading.getter();
    *((_QWORD *)v8 + 1) = 0;
    v8[16] = 1;
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>);
    closure #1 in closure #2 in PhoneRingsSnippet.body.getter(v54, v56, &v8[*(int *)(v40 + 44)]);
    outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v8, v58, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, MEMORY[0x24BDF46F8]);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>, MEMORY[0x24BDF44A0]);
    _ConditionalContent<>.init(storage:)();
    v41 = (uint64_t)v8;
    v42 = &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>;
  }
  else
  {
    v43 = static VerticalAlignment.center.getter();
    v44 = (uint64_t)v51;
    *v51 = v43;
    *(_QWORD *)(v44 + 8) = 0;
    *(_BYTE *)(v44 + 16) = 1;
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>);
    closure #2 in closure #2 in PhoneRingsSnippet.body.getter(v54, v56, (char *)(v44 + *(int *)(v45 + 44)));
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v44, v58, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, MEMORY[0x24BDF46F8]);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>, MEMORY[0x24BDF44A0]);
    _ConditionalContent<>.init(storage:)();
    v41 = v44;
    v42 = &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>;
  }
  outlined destroy of Font.Design?(v41, v42);
  v46 = v52;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v31, v52, &demangling cache variable for type metadata for SashStandardView?);
  v47 = v61;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v39, v61, &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  v48 = v62;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v46, v62, &demangling cache variable for type metadata for SashStandardView?);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v47, v48 + *(int *)(v49 + 48), &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  outlined destroy of Font.Design?(v39, &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  outlined destroy of Font.Design?((uint64_t)v31, &demangling cache variable for type metadata for SashStandardView?);
  outlined destroy of Font.Design?(v47, &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  return outlined destroy of Font.Design?(v46, &demangling cache variable for type metadata for SashStandardView?);
}

uint64_t PhoneRingsSnippet.isAccessibleDynamicType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, _QWORD, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for PhoneRingsSnippet();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v32 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v31 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v31 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v31 - v11;
  v13 = type metadata accessor for DynamicTypeSize();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v31 - v18;
  specialized Environment.wrappedValue.getter((uint64_t)&v31 - v18);
  v20 = *(void (**)(char *, _QWORD, uint64_t))(v14 + 104);
  v20(v17, *MEMORY[0x24BDECE98], v13);
  v21 = static DynamicTypeSize.== infix(_:_:)();
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v12);
  if ((v21 & 1) != 0)
  {
    outlined destroy of PhoneRingsSnippet((uint64_t)v12);
    outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v10);
LABEL_4:
    outlined destroy of PhoneRingsSnippet((uint64_t)v10);
    outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v7);
LABEL_5:
    outlined destroy of PhoneRingsSnippet((uint64_t)v7);
    v24 = v1;
    v25 = v32;
    outlined init with copy of PhoneRingsSnippet(v24, v32);
    goto LABEL_6;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v19);
  v20(v17, *MEMORY[0x24BDECEB0], v13);
  v23 = static DynamicTypeSize.== infix(_:_:)();
  v22(v17, v13);
  v22(v19, v13);
  outlined destroy of PhoneRingsSnippet((uint64_t)v12);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v10);
  if ((v23 & 1) != 0)
    goto LABEL_4;
  specialized Environment.wrappedValue.getter((uint64_t)v19);
  v20(v17, *MEMORY[0x24BDECEB8], v13);
  v28 = static DynamicTypeSize.== infix(_:_:)();
  v22(v17, v13);
  v22(v19, v13);
  outlined destroy of PhoneRingsSnippet((uint64_t)v10);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v7);
  if ((v28 & 1) != 0)
    goto LABEL_5;
  specialized Environment.wrappedValue.getter((uint64_t)v19);
  v20(v17, *MEMORY[0x24BDECEC8], v13);
  v29 = static DynamicTypeSize.== infix(_:_:)();
  v22(v17, v13);
  v22(v19, v13);
  outlined destroy of PhoneRingsSnippet((uint64_t)v7);
  v30 = v1;
  v25 = v32;
  outlined init with copy of PhoneRingsSnippet(v30, v32);
  if ((v29 & 1) == 0)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v19);
    v20(v17, *MEMORY[0x24BDECED8], v13);
    v26 = static DynamicTypeSize.== infix(_:_:)();
    v22(v17, v13);
    v22(v19, v13);
    goto LABEL_7;
  }
LABEL_6:
  v26 = 1;
LABEL_7:
  outlined destroy of PhoneRingsSnippet(v25);
  return v26 & 1;
}

uint64_t closure #1 in closure #2 in PhoneRingsSnippet.body.getter@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  void *v44;
  uint64_t v45;
  void *v47;
  _BYTE v48[569];
  _BYTE v49[576];
  _BYTE v50[576];
  _BYTE v51[584];

  v47 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v48[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v48[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v48[-v15 - 8];
  memcpy(v49, a1, 0x239uLL);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v49);
  LOBYTE(a1) = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a2, (uint64_t)v7, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v25 = &v7[*(int *)(v5 + 36)];
  *v25 = (_BYTE)a1;
  *((_QWORD *)v25 + 1) = v18;
  *((_QWORD *)v25 + 2) = v20;
  *((_QWORD *)v25 + 3) = v22;
  *((_QWORD *)v25 + 4) = v24;
  v25[40] = 0;
  LOBYTE(v5) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v7, (uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  v34 = &v10[*(int *)(v8 + 36)];
  *v34 = v5;
  *((_QWORD *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  outlined destroy of Font.Design?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  LOBYTE(v5) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v42 = v41;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  v43 = &v14[*(int *)(v11 + 36)];
  *v43 = v5;
  *((_QWORD *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  outlined destroy of Font.Design?((uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v48, v49, sizeof(v48));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v50, v48, 0x239uLL);
  v44 = v47;
  memcpy(v47, v48, 0x239uLL);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v14, (uint64_t)v44 + *(int *)(v45 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v50);
  outlined destroy of Font.Design?((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  outlined destroy of Font.Design?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v51, v48, 0x239uLL);
  return outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v51);
}

uint64_t closure #2 in closure #2 in PhoneRingsSnippet.body.getter@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  _BYTE v37[569];
  _BYTE v38[576];
  _BYTE v39[576];
  _BYTE v40[584];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v37[-v13 - 8];
  memcpy(v38, a1, 0x239uLL);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v38);
  LOBYTE(a1) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a2, (uint64_t)v8, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v23 = &v8[*(int *)(v6 + 36)];
  *v23 = (_BYTE)a1;
  *((_QWORD *)v23 + 1) = v16;
  *((_QWORD *)v23 + 2) = v18;
  *((_QWORD *)v23 + 3) = v20;
  *((_QWORD *)v23 + 4) = v22;
  v23[40] = 0;
  LOBYTE(a1) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  v32 = &v12[*(int *)(v9 + 36)];
  *v32 = (_BYTE)a1;
  *((_QWORD *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  outlined destroy of Font.Design?((uint64_t)v8, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v37, v38, sizeof(v37));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v39, v37, 0x239uLL);
  memcpy(a3, v37, 0x239uLL);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v12, (uint64_t)&a3[*(int *)(v33 + 48)], &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  v34 = &a3[*(int *)(v33 + 64)];
  *(_QWORD *)v34 = 0;
  v34[8] = 1;
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v39);
  outlined destroy of Font.Design?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  outlined destroy of Font.Design?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v40, v37, 0x239uLL);
  return outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v40);
}

uint64_t PhoneRingsSnippet.isAccessibleAndLargeDynamicType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for PhoneRingsSnippet();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v40 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v39 = (uint64_t)&v37 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v37 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v37 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v37 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v37 - v16;
  v18 = type metadata accessor for DynamicTypeSize();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v37 - v23;
  specialized Environment.wrappedValue.getter((uint64_t)&v37 - v23);
  v25 = *MEMORY[0x24BDECE98];
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 104);
  v38(v22, v25, v18);
  v26 = static DynamicTypeSize.== infix(_:_:)();
  v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v22, v18);
  v27(v24, v18);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v17);
  if ((v26 & 1) != 0)
  {
    outlined destroy of PhoneRingsSnippet((uint64_t)v17);
    outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v15);
LABEL_4:
    outlined destroy of PhoneRingsSnippet((uint64_t)v15);
    outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v12);
LABEL_5:
    outlined destroy of PhoneRingsSnippet((uint64_t)v12);
    outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v9);
LABEL_6:
    outlined destroy of PhoneRingsSnippet((uint64_t)v9);
    v29 = v39;
    outlined init with copy of PhoneRingsSnippet(v1, v39);
LABEL_7:
    outlined destroy of PhoneRingsSnippet(v29);
    v30 = v40;
    outlined init with copy of PhoneRingsSnippet(v1, v40);
    goto LABEL_8;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v24);
  v38(v22, *MEMORY[0x24BDECEB0], v18);
  v28 = static DynamicTypeSize.== infix(_:_:)();
  v27(v22, v18);
  v27(v24, v18);
  outlined destroy of PhoneRingsSnippet((uint64_t)v17);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v15);
  if ((v28 & 1) != 0)
    goto LABEL_4;
  specialized Environment.wrappedValue.getter((uint64_t)v24);
  v38(v22, *MEMORY[0x24BDECEB8], v18);
  v33 = static DynamicTypeSize.== infix(_:_:)();
  v27(v22, v18);
  v27(v24, v18);
  outlined destroy of PhoneRingsSnippet((uint64_t)v15);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v12);
  if ((v33 & 1) != 0)
    goto LABEL_5;
  specialized Environment.wrappedValue.getter((uint64_t)v24);
  v38(v22, *MEMORY[0x24BDECEC8], v18);
  v34 = static DynamicTypeSize.== infix(_:_:)();
  v27(v22, v18);
  v27(v24, v18);
  outlined destroy of PhoneRingsSnippet((uint64_t)v12);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v9);
  if ((v34 & 1) != 0)
    goto LABEL_6;
  specialized Environment.wrappedValue.getter((uint64_t)v24);
  v38(v22, *MEMORY[0x24BDECED8], v18);
  v35 = static DynamicTypeSize.== infix(_:_:)();
  v27(v22, v18);
  v27(v24, v18);
  outlined destroy of PhoneRingsSnippet((uint64_t)v9);
  v29 = v39;
  outlined init with copy of PhoneRingsSnippet(v1, v39);
  if ((v35 & 1) != 0)
    goto LABEL_7;
  specialized Environment.wrappedValue.getter((uint64_t)v24);
  v38(v22, *MEMORY[0x24BDECF30], v18);
  v36 = static DynamicTypeSize.== infix(_:_:)();
  v27(v22, v18);
  v27(v24, v18);
  outlined destroy of PhoneRingsSnippet(v29);
  v30 = v40;
  outlined init with copy of PhoneRingsSnippet(v1, v40);
  if ((v36 & 1) == 0)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v24);
    v38(v22, *MEMORY[0x24BDECF40], v18);
    v31 = static DynamicTypeSize.== infix(_:_:)();
    v27(v22, v18);
    v27(v24, v18);
    goto LABEL_9;
  }
LABEL_8:
  v31 = 1;
LABEL_9:
  outlined destroy of PhoneRingsSnippet(v30);
  return v31 & 1;
}

uint64_t closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v59 = a8;
  v60 = a6;
  v61 = a7;
  v57 = a5;
  v58 = a9;
  v54 = a3;
  v55 = a4;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v56 = *(_QWORD *)(v63 - 8);
  v11 = MEMORY[0x24BDAC7A8](v63);
  v62 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v52 - v13;
  v64 = a1;
  v65 = a2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v15 = Text.init<A>(_:)();
  v17 = v16;
  v19 = v18 & 1;
  static Font.subheadline.getter();
  v20 = Text.font(_:)();
  v22 = v21;
  v24 = v23;
  swift_release();
  outlined consume of Text.Storage(v15, v17, v19);
  swift_bridgeObjectRelease();
  static Font.Weight.regular.getter();
  v25 = Text.fontWeight(_:)();
  v27 = v26;
  v29 = v28 & 1;
  outlined consume of Text.Storage(v20, v22, v24 & 1);
  swift_bridgeObjectRelease();
  v64 = static Color.gray.getter();
  v30 = Text.foregroundStyle<A>(_:)();
  v32 = v31;
  v34 = v33;
  LOBYTE(v22) = v35 & 1;
  outlined consume of Text.Storage(v25, v27, v29);
  swift_release();
  swift_bridgeObjectRelease();
  v64 = v30;
  v65 = v32;
  v66 = v22;
  v67 = v34;
  v36 = v14;
  v53 = v14;
  View.componentSpacing(top:bottom:)();
  outlined consume of Text.Storage(v30, v32, v22);
  swift_bridgeObjectRelease();
  v54 = static VerticalAlignment.lastTextBaseline.getter();
  closure #1 in closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)(v55, v57, v60, v61, &v64);
  v38 = v64;
  v37 = v65;
  LOBYTE(v27) = v66;
  v39 = v67;
  v60 = v69;
  v61 = v68;
  LOBYTE(v34) = v70;
  v57 = v71;
  v40 = v56;
  v41 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  v42 = v62;
  v43 = v63;
  v41(v62, v36, v63);
  v44 = v58;
  v41(v58, v42, v43);
  v45 = &v44[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>))
                    + 48)];
  *(_QWORD *)v45 = v54;
  *((_QWORD *)v45 + 1) = 0;
  v45[16] = 0;
  *((_QWORD *)v45 + 3) = v38;
  *((_QWORD *)v45 + 4) = v37;
  v45[40] = v27;
  v47 = v60;
  v46 = v61;
  *((_QWORD *)v45 + 6) = v39;
  *((_QWORD *)v45 + 7) = v46;
  *((_QWORD *)v45 + 8) = v47;
  v45[72] = v34;
  v48 = v59;
  *((_QWORD *)v45 + 10) = v57;
  *((_QWORD *)v45 + 11) = v48;
  outlined copy of Text.Storage(v38, v37, v27);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v46, v47, v34);
  v49 = *(void (**)(char *, uint64_t))(v40 + 8);
  swift_bridgeObjectRetain();
  swift_retain_n();
  v50 = v63;
  v49(v53, v63);
  outlined consume of Text.Storage(v38, v37, v27);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v61, v60, v34);
  swift_release();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v49)(v62, v50);
}

uint64_t closure #1 in closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  void (*v57)(char *, uint64_t);
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  void (*v64)(char *);
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;

  v66 = a3;
  v67 = a4;
  v68 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Font.TextStyle();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = a1;
  v70 = a2;
  v65 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v14 = Text.init<A>(_:)();
  v61 = v16;
  v62 = v15;
  LOBYTE(a1) = v17 & 1;
  v63 = *MEMORY[0x24BDF1898];
  v64 = *(void (**)(char *))(v11 + 104);
  v54 = v10;
  v64(v13);
  v58 = *MEMORY[0x24BDF1670];
  v18 = v58;
  v19 = type metadata accessor for Font.Design();
  v20 = *(_QWORD *)(v19 - 8);
  v57 = *(void (**)(char *, uint64_t))(v20 + 104);
  v21 = v18;
  v22 = v19;
  v52 = v19;
  v57(v9, v21);
  v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v56(v9, 0, 1, v22);
  v53 = v13;
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v9, &demangling cache variable for type metadata for Font.Design?);
  v55 = *(void (**)(char *, uint64_t))(v11 + 8);
  v55(v13, v10);
  v23 = v62;
  v24 = Text.font(_:)();
  v26 = v25;
  LOBYTE(v11) = v27;
  swift_release();
  outlined consume of Text.Storage(v14, v23, a1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  v28 = Text.fontWeight(_:)();
  v61 = v29;
  v62 = v28;
  v60 = v30;
  v59 = v31 & 1;
  outlined consume of Text.Storage(v24, v26, v11 & 1);
  swift_bridgeObjectRelease();
  v69 = v66;
  v70 = v67;
  swift_bridgeObjectRetain();
  v32 = Text.init<A>(_:)();
  v34 = v33;
  v36 = v35 & 1;
  v37 = v53;
  v38 = v54;
  ((void (*)(char *, _QWORD, uint64_t))v64)(v53, v63, v54);
  v39 = v52;
  ((void (*)(char *, _QWORD, uint64_t))v57)(v9, v58, v52);
  v56(v9, 0, 1, v39);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v9, &demangling cache variable for type metadata for Font.Design?);
  v55(v37, v38);
  static Font.Weight.medium.getter();
  Font.weight(_:)();
  swift_release();
  Font.smallCaps()();
  swift_release();
  v40 = Text.font(_:)();
  v42 = v41;
  LOBYTE(v39) = v43;
  v45 = v44;
  swift_release();
  LOBYTE(v37) = v39 & 1;
  outlined consume of Text.Storage(v32, v34, v36);
  swift_bridgeObjectRelease();
  v46 = v59;
  LOBYTE(v69) = v59;
  v47 = v68;
  v48 = v61;
  v49 = v62;
  v50 = v60;
  *v68 = v62;
  v47[1] = v50;
  *((_BYTE *)v47 + 16) = v46;
  v47[3] = v48;
  v47[4] = v40;
  v47[5] = v42;
  *((_BYTE *)v47 + 48) = (_BYTE)v37;
  v47[7] = v45;
  outlined copy of Text.Storage(v49, v50, v46);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v40, v42, (char)v37);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v40, v42, (char)v37);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v49, v50, v69);
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for EnvironmentValues.dynamicTypeSize : EnvironmentValues()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_24A4A5D08()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = type metadata accessor for DynamicTypeSize();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t outlined init with copy of PhoneRingsSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A4A5DEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t);
  uint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for PhoneRingsSnippet() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>)
                                      - 8)
                          + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v6 = v0
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>)
              + 44)
     + ((((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + v4 + 569) & ~v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v8 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v8(v6 + *(int *)(v9 + 48), v7);
  v8(v6 + *(int *)(v9 + 64), v7);
  return swift_deallocObject();
}

uint64_t outlined init with take of PhoneRingsSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for PhoneRingsSnippet() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>)
                                      - 8)
                          + 80);
  return closure #2 in PhoneRingsSnippet.body.getter(v1 + v4, (const void *)(v1 + v5), v1 + ((v5 + v6 + 569) & ~v6), a1);
}

uint64_t associated type witness table accessor for View.Body : View in PhoneRingsSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for PhoneRingsSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
    v10[24] = v11[24];
    *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
    v10[40] = v11[40];
    v10[56] = v11[56];
    *((_QWORD *)v10 + 6) = *((_QWORD *)v11 + 6);
    v12 = *((_QWORD *)v11 + 8);
    v10[72] = v11[72];
    *((_QWORD *)v10 + 8) = v12;
    *((_QWORD *)v10 + 10) = *((_QWORD *)v11 + 10);
    v10[88] = v11[88];
    v13 = *((_QWORD *)v11 + 13);
    *((_QWORD *)v10 + 12) = *((_QWORD *)v11 + 12);
    *((_QWORD *)v10 + 13) = v13;
    v14 = *((_QWORD *)v11 + 15);
    *((_QWORD *)v10 + 14) = *((_QWORD *)v11 + 14);
    *((_QWORD *)v10 + 15) = v14;
    v15 = *((_QWORD *)v11 + 17);
    *((_QWORD *)v10 + 16) = *((_QWORD *)v11 + 16);
    *((_QWORD *)v10 + 17) = v15;
    v16 = *((_QWORD *)v11 + 19);
    *((_QWORD *)v10 + 18) = *((_QWORD *)v11 + 18);
    *((_QWORD *)v10 + 19) = v16;
    v17 = *((_QWORD *)v11 + 21);
    *((_QWORD *)v10 + 20) = *((_QWORD *)v11 + 20);
    *((_QWORD *)v10 + 21) = v17;
    v18 = *((_QWORD *)v11 + 23);
    *((_QWORD *)v10 + 22) = *((_QWORD *)v11 + 22);
    *((_QWORD *)v10 + 23) = v18;
    v19 = *((_QWORD *)v11 + 25);
    *((_QWORD *)v10 + 24) = *((_QWORD *)v11 + 24);
    *((_QWORD *)v10 + 25) = v19;
    v20 = *((_QWORD *)v11 + 27);
    *((_QWORD *)v10 + 26) = *((_QWORD *)v11 + 26);
    *((_QWORD *)v10 + 27) = v20;
    v21 = *((_QWORD *)v11 + 29);
    *((_QWORD *)v10 + 28) = *((_QWORD *)v11 + 28);
    *((_QWORD *)v10 + 29) = v21;
    v10[240] = v11[240];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PhoneRingsSnippet(uint64_t a1)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PhoneRingsSnippet(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v8[8] = v9[8];
  *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
  v8[24] = v9[24];
  *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
  v8[40] = v9[40];
  v8[56] = v9[56];
  *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
  v10 = *((_QWORD *)v9 + 8);
  v8[72] = v9[72];
  *((_QWORD *)v8 + 8) = v10;
  *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
  v8[88] = v9[88];
  v11 = *((_QWORD *)v9 + 13);
  *((_QWORD *)v8 + 12) = *((_QWORD *)v9 + 12);
  *((_QWORD *)v8 + 13) = v11;
  v12 = *((_QWORD *)v9 + 15);
  *((_QWORD *)v8 + 14) = *((_QWORD *)v9 + 14);
  *((_QWORD *)v8 + 15) = v12;
  v13 = *((_QWORD *)v9 + 17);
  *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
  *((_QWORD *)v8 + 17) = v13;
  v14 = *((_QWORD *)v9 + 19);
  *((_QWORD *)v8 + 18) = *((_QWORD *)v9 + 18);
  *((_QWORD *)v8 + 19) = v14;
  v15 = *((_QWORD *)v9 + 21);
  *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
  *((_QWORD *)v8 + 21) = v15;
  v16 = *((_QWORD *)v9 + 23);
  *((_QWORD *)v8 + 22) = *((_QWORD *)v9 + 22);
  *((_QWORD *)v8 + 23) = v16;
  v17 = *((_QWORD *)v9 + 25);
  *((_QWORD *)v8 + 24) = *((_QWORD *)v9 + 24);
  *((_QWORD *)v8 + 25) = v17;
  v18 = *((_QWORD *)v9 + 27);
  *((_QWORD *)v8 + 26) = *((_QWORD *)v9 + 26);
  *((_QWORD *)v8 + 27) = v18;
  v19 = *((_QWORD *)v9 + 29);
  *((_QWORD *)v8 + 28) = *((_QWORD *)v9 + 28);
  *((_QWORD *)v8 + 29) = v19;
  v8[240] = v9[240];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PhoneRingsSnippet(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    outlined destroy of Font.Design?((uint64_t)a1, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(_QWORD *)v8 = v10;
  v11 = *((_QWORD *)v9 + 2);
  v8[24] = v9[24];
  *((_QWORD *)v8 + 2) = v11;
  v12 = *((_QWORD *)v9 + 4);
  v8[40] = v9[40];
  *((_QWORD *)v8 + 4) = v12;
  v13 = *((_QWORD *)v9 + 6);
  v8[56] = v9[56];
  *((_QWORD *)v8 + 6) = v13;
  v14 = *((_QWORD *)v9 + 8);
  v8[72] = v9[72];
  *((_QWORD *)v8 + 8) = v14;
  v15 = *((_QWORD *)v9 + 10);
  v8[88] = v9[88];
  *((_QWORD *)v8 + 10) = v15;
  *((_QWORD *)v8 + 12) = *((_QWORD *)v9 + 12);
  *((_QWORD *)v8 + 13) = *((_QWORD *)v9 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 14) = *((_QWORD *)v9 + 14);
  *((_QWORD *)v8 + 15) = *((_QWORD *)v9 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
  *((_QWORD *)v8 + 17) = *((_QWORD *)v9 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 18) = *((_QWORD *)v9 + 18);
  *((_QWORD *)v8 + 19) = *((_QWORD *)v9 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
  *((_QWORD *)v8 + 21) = *((_QWORD *)v9 + 21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 22) = *((_QWORD *)v9 + 22);
  *((_QWORD *)v8 + 23) = *((_QWORD *)v9 + 23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 24) = *((_QWORD *)v9 + 24);
  *((_QWORD *)v8 + 25) = *((_QWORD *)v9 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 26) = *((_QWORD *)v9 + 26);
  *((_QWORD *)v8 + 27) = *((_QWORD *)v9 + 27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 28) = *((_QWORD *)v9 + 28);
  *((_QWORD *)v8 + 29) = *((_QWORD *)v9 + 29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[240] = v9[240];
  return a1;
}

char *initializeWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 13);
  *((_OWORD *)v9 + 12) = *((_OWORD *)v10 + 12);
  *((_OWORD *)v9 + 13) = v11;
  *((_OWORD *)v9 + 14) = *((_OWORD *)v10 + 14);
  v9[240] = v10[240];
  v12 = *((_OWORD *)v10 + 9);
  *((_OWORD *)v9 + 8) = *((_OWORD *)v10 + 8);
  *((_OWORD *)v9 + 9) = v12;
  v13 = *((_OWORD *)v10 + 11);
  *((_OWORD *)v9 + 10) = *((_OWORD *)v10 + 10);
  *((_OWORD *)v9 + 11) = v13;
  v14 = *((_OWORD *)v10 + 5);
  *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
  *((_OWORD *)v9 + 5) = v14;
  v15 = *((_OWORD *)v10 + 7);
  *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
  *((_OWORD *)v9 + 7) = v15;
  v16 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v16;
  v17 = *((_OWORD *)v10 + 3);
  *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
  *((_OWORD *)v9 + 3) = v17;
  return a1;
}

char *assignWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    outlined destroy of Font.Design?((uint64_t)a1, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  v9[24] = v10[24];
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  v9[40] = v10[40];
  v9[56] = v10[56];
  *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
  v11 = *((_QWORD *)v10 + 8);
  v9[72] = v10[72];
  *((_QWORD *)v9 + 8) = v11;
  *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
  v9[88] = v10[88];
  v12 = *((_QWORD *)v10 + 13);
  *((_QWORD *)v9 + 12) = *((_QWORD *)v10 + 12);
  *((_QWORD *)v9 + 13) = v12;
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v10 + 15);
  *((_QWORD *)v9 + 14) = *((_QWORD *)v10 + 14);
  *((_QWORD *)v9 + 15) = v13;
  swift_bridgeObjectRelease();
  v14 = *((_QWORD *)v10 + 17);
  *((_QWORD *)v9 + 16) = *((_QWORD *)v10 + 16);
  *((_QWORD *)v9 + 17) = v14;
  swift_bridgeObjectRelease();
  v15 = *((_QWORD *)v10 + 19);
  *((_QWORD *)v9 + 18) = *((_QWORD *)v10 + 18);
  *((_QWORD *)v9 + 19) = v15;
  swift_bridgeObjectRelease();
  v16 = *((_QWORD *)v10 + 21);
  *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
  *((_QWORD *)v9 + 21) = v16;
  swift_bridgeObjectRelease();
  v17 = *((_QWORD *)v10 + 23);
  *((_QWORD *)v9 + 22) = *((_QWORD *)v10 + 22);
  *((_QWORD *)v9 + 23) = v17;
  swift_bridgeObjectRelease();
  v18 = *((_QWORD *)v10 + 25);
  *((_QWORD *)v9 + 24) = *((_QWORD *)v10 + 24);
  *((_QWORD *)v9 + 25) = v18;
  swift_bridgeObjectRelease();
  v19 = *((_QWORD *)v10 + 27);
  *((_QWORD *)v9 + 26) = *((_QWORD *)v10 + 26);
  *((_QWORD *)v9 + 27) = v19;
  swift_bridgeObjectRelease();
  v20 = *((_QWORD *)v10 + 29);
  *((_QWORD *)v9 + 28) = *((_QWORD *)v10 + 28);
  *((_QWORD *)v9 + 29) = v20;
  swift_bridgeObjectRelease();
  v9[240] = v10[240];
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneRingsSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A6AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 104);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneRingsSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A6B48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 104) = a2;
  return result;
}

void type metadata completion function for PhoneRingsSnippet()
{
  unint64_t v0;

  type metadata accessor for Environment<DynamicTypeSize>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Environment<DynamicTypeSize>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<DynamicTypeSize>.Content)
  {
    type metadata accessor for DynamicTypeSize();
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  }
}

uint64_t sub_24A4A6C8C()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _Padding);
  lazy protocol witness table accessor for type ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLa();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24A4A6CD8()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>, MEMORY[0x24BDF46F8]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of PhoneRingsSnippet(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t TemperatureQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQueryModel);
}

uint64_t TemperatureQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for TemperatureQuerySnippet() + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQueryModel);
}

uint64_t type metadata accessor for TemperatureQuerySnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TemperatureQuerySnippet;
  if (!type metadata singleton initialization cache for TemperatureQuerySnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TemperatureQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Snippet;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t *v49;
  uint64_t result;
  uint64_t v51;
  void (*v52)(char *, char *);
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  _QWORD *v90;
  _QWORD *v91;
  int **v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  Swift::String v129;
  Swift::String v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[2];
  void (*v168)(unint64_t, char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int *Model;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t *v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  uint64_t OpaqueTypeConformance2;
  _QWORD v223[3];
  uint64_t v224;
  uint64_t v225;

  v207 = a1;
  v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  v197 = *(_QWORD *)(v200 - 8);
  MEMORY[0x24BDAC7A8](v200);
  v196 = (char *)v167 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v201 = *(_QWORD *)(v3 - 8);
  v202 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v198 = (char *)v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v199 = (char *)v167 - v6;
  v7 = type metadata accessor for FactItemHeroNumberView();
  v177 = *(_QWORD *)(v7 - 8);
  v178 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v176 = (char *)v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v9);
  v174 = (char *)v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v11);
  v175 = (char *)v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Font.TextStyle();
  v182 = *(_QWORD *)(v13 - 8);
  v183 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v186 = (char *)v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for MultipleDataPointView();
  MEMORY[0x24BDAC7A8](v181);
  v180 = (_QWORD *)((char *)v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  Snippet = type metadata accessor for TemperatureQuerySnippet();
  v194 = *(_QWORD *)(Snippet - 8);
  v17 = MEMORY[0x24BDAC7A8](Snippet);
  v195 = (uint64_t)v167 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v185 = (uint64_t)v167 - v20;
  v189 = v21;
  MEMORY[0x24BDAC7A8](v19);
  v184 = (uint64_t)v167 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v23);
  v191 = (uint64_t)v167 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for SnippetHeaderView();
  v187 = *(_QWORD *)(v190 - 8);
  v25 = MEMORY[0x24BDAC7A8](v190);
  v204 = (uint64_t)v167 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = v26;
  MEMORY[0x24BDAC7A8](v25);
  v206 = (uint64_t)v167 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v179 = (uint64_t)v167 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)v167 - v31;
  v33 = type metadata accessor for AppPunchout();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = MEMORY[0x24BDAC7A8](v33);
  v192 = v36;
  v193 = (char *)v167 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v205 = (char *)v167 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)v167 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for SpeakableString();
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v44 = (char *)v167 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + Model[10], (uint64_t)v40, &demangling cache variable for type metadata for SpeakableString?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1)
  {
    v45 = &demangling cache variable for type metadata for SpeakableString?;
    v46 = (uint64_t)v40;
LABEL_5:
    outlined destroy of Font.Design?(v46, v45);
    v49 = v207;
    result = AnyView.init<A>(_:)();
    *v49 = result;
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v44, v40, v41);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v32, &demangling cache variable for type metadata for AppPunchout?);
  v47 = v41;
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (v48(v32, 1, v33) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v47);
    v45 = &demangling cache variable for type metadata for AppPunchout?;
    v46 = (uint64_t)v32;
    goto LABEL_5;
  }
  v51 = v33;
  v169 = v42;
  v170 = v47;
  v171 = v34;
  v52 = *(void (**)(char *, char *))(v34 + 32);
  v173 = v51;
  v52(v205, v32);
  v53 = Model;
  v54 = v191;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + Model[18], v191, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v55 = v190;
  v56 = v204;
  v57 = (uint64_t *)(v204 + *(int *)(v190 + 20));
  *v57 = swift_getKeyPath();
  v167[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v58 = (uint64_t *)(v56 + *(int *)(v55 + 24));
  *v58 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v54, v56);
  outlined init with take of GenericMedCompletedLogSnippet(v56, v206, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v59 = v53[5];
  v191 = v1;
  v60 = v1 + v59;
  LOBYTE(v59) = *(_BYTE *)(v1 + v59 + 8);
  v172 = v44;
  v168 = (void (*)(unint64_t, char *, uint64_t))v52;
  if ((v59 & 1) == 0 && *(double *)v60 > 0.0)
  {
    v61 = v191;
    v62 = (uint64_t *)(v191 + v53[13]);
    v63 = v62[1];
    v64 = v53;
    v65 = v184;
    outlined init with copy of GenericMedCompletedLogModel(v191, v184, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
    if (v63)
    {
      v66 = *(_QWORD *)(v65 + v64[12] + 8);
      swift_bridgeObjectRetain();
      outlined destroy of GenericMedCompletedLogModel(v65, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
      swift_bridgeObjectRelease();
      v67 = v61;
      v68 = v185;
      outlined init with copy of GenericMedCompletedLogModel(v67, v185, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
      if (v66)
      {
        outlined destroy of GenericMedCompletedLogModel(v68, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
        v53 = Model;
LABEL_13:
        v190 = *(_QWORD *)v60;
        LODWORD(v186) = *(unsigned __int8 *)(v60 + 8);
        v71 = v53[12];
        v72 = v191;
        v73 = (uint64_t *)(v191 + v53[11]);
        v74 = v73[1];
        v182 = *v73;
        v75 = v62[1];
        v185 = *v62;
        v76 = *(int **)(v191 + v71 + 8);
        Model = *(int **)(v191 + v71);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v77 = SpeakableString.print.getter();
        v78 = v53;
        v80 = v79;
        v81 = (uint64_t *)(v72 + v78[17]);
        v82 = *v81;
        v83 = v81[1];
        v183 = v77;
        v184 = v82;
        type metadata accessor for Context();
        lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
        swift_bridgeObjectRetain();
        v84 = EnvironmentObject.init()();
        v86 = v180;
        v85 = (int *)v181;
        *v180 = v84;
        v86[1] = v87;
        v88 = (uint64_t *)((char *)v86 + v85[5]);
        *v88 = swift_getKeyPath();
        swift_storeEnumTagMultiPayload();
        v89 = (char *)v86 + v85[6];
        *(_QWORD *)v89 = v190;
        v89[8] = (char)v186;
        v90 = (uint64_t *)((char *)v86 + v85[7]);
        *v90 = v182;
        v90[1] = v74;
        v91 = (uint64_t *)((char *)v86 + v85[8]);
        *v91 = v185;
        v91[1] = v75;
        v92 = (int **)((char *)v86 + v85[9]);
        *v92 = Model;
        v92[1] = v76;
        v93 = (uint64_t *)((char *)v86 + v85[10]);
        *v93 = 0;
        v93[1] = 0;
        v94 = (uint64_t *)((char *)v86 + v85[11]);
        *v94 = 0;
        v94[1] = 0;
        v95 = (uint64_t *)((char *)v86 + v85[12]);
        *v95 = v183;
        v95[1] = v80;
        v96 = v72;
        *((_BYTE *)v86 + v85[13]) = 0;
        v97 = 0x65676172657641;
        if (v83)
          v97 = v184;
        v98 = 0xE700000000000000;
        if (v83)
          v98 = v83;
        v99 = (uint64_t *)((char *)v86 + v85[14]);
        *v99 = v97;
        v99[1] = v98;
        lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type MultipleDataPointView and conformance MultipleDataPointView, (uint64_t (*)(uint64_t))type metadata accessor for MultipleDataPointView, (uint64_t)&protocol conformance descriptor for MultipleDataPointView);
        goto LABEL_21;
      }
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel(v65, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
      v69 = v61;
      v68 = v185;
      outlined init with copy of GenericMedCompletedLogModel(v69, v185, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
    }
    v53 = Model;
    v70 = *(_QWORD *)(v68 + Model[11] + 8);
    outlined destroy of GenericMedCompletedLogModel(v68, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
    if (v70)
      goto LABEL_13;
  }
  v100 = v53[14];
  v96 = v191;
  v101 = (uint64_t *)(v191 + v100);
  v102 = (void *)v101[1];
  if (v102)
  {
    v103 = *v101;
    v104 = v179;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v191, v179, &demangling cache variable for type metadata for AppPunchout?);
    if (v48((char *)v104, 1, v173) == 1)
    {
      outlined destroy of Font.Design?(v104, &demangling cache variable for type metadata for AppPunchout?);
      v105 = AnyView.init<A>(_:)();
      v224 = MEMORY[0x24BDF4788];
      v225 = MEMORY[0x24BDF4768];
      v223[0] = v105;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of Font.Design?(v104, &demangling cache variable for type metadata for AppPunchout?);
      (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v186, *MEMORY[0x24BDF1888], v183);
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v107._countAndFlagsBits = 0;
      v107._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v107);
      v108._countAndFlagsBits = v103;
      v108._object = v102;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v108);
      swift_bridgeObjectRelease();
      v109._countAndFlagsBits = 0;
      v109._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v109);
      LocalizedStringKey.init(stringInterpolation:)();
      v110 = Text.init(_:tableName:bundle:comment:)();
      v112 = v111;
      Model = v113;
      v115 = v114 & 1;
      v116 = *MEMORY[0x24BDF1670];
      v117 = type metadata accessor for Font.Design();
      v118 = *(_QWORD *)(v117 - 8);
      v119 = (uint64_t)v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 104))(v174, v116, v117);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v118 + 56))(v119, 0, 1, v117);
      static Font.system(_:design:weight:)();
      outlined destroy of Font.Design?(v119, &demangling cache variable for type metadata for Font.Design?);
      v120 = Text.font(_:)();
      v122 = v121;
      LOBYTE(v117) = v123;
      swift_release();
      LOBYTE(v116) = v117 & 1;
      outlined consume of Text.Storage(v110, v112, v115);
      swift_bridgeObjectRelease();
      Model = (int *)Text.bold()();
      v190 = v124;
      v126 = v125;
      v128 = v127 & 1;
      outlined consume of Text.Storage(v120, v122, v116);
      swift_bridgeObjectRelease();
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v129._countAndFlagsBits = 0;
      v129._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v129);
      v130._countAndFlagsBits = SpeakableString.print.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v130);
      swift_bridgeObjectRelease();
      v131._countAndFlagsBits = 0;
      v131._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v131);
      LocalizedStringKey.init(stringInterpolation:)();
      v132 = Text.init(_:tableName:bundle:comment:)();
      v134 = v133;
      v136 = v135;
      LOBYTE(v118) = v137 & 1;
      v224 = MEMORY[0x24BDF1FA0];
      v225 = MEMORY[0x24BEAD6B8];
      v138 = swift_allocObject();
      v223[0] = v138;
      v139 = Model;
      v140 = v190;
      *(_QWORD *)(v138 + 16) = Model;
      *(_QWORD *)(v138 + 24) = v140;
      *(_BYTE *)(v138 + 32) = v128;
      v185 = v126;
      *(_QWORD *)(v138 + 40) = v126;
      OpaqueTypeConformance2 = 0;
      v220 = 0u;
      v221 = 0u;
      v219 = 0;
      v217 = 0u;
      v218 = 0u;
      v215 = MEMORY[0x24BDF1FA0];
      v216 = MEMORY[0x24BEAD6B8];
      v141 = swift_allocObject();
      v213 = 0;
      v214 = v141;
      *(_QWORD *)(v141 + 16) = v132;
      *(_QWORD *)(v141 + 24) = v134;
      *(_BYTE *)(v141 + 32) = v118;
      *(_QWORD *)(v141 + 40) = v136;
      v211 = 0u;
      v212 = 0u;
      v210 = 0;
      v208 = 0u;
      v209 = 0u;
      outlined copy of Text.Storage((uint64_t)v139, v140, v128);
      swift_bridgeObjectRetain();
      LOBYTE(v139) = v118;
      outlined copy of Text.Storage(v132, v134, v118);
      swift_bridgeObjectRetain();
      v142 = v176;
      FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
      *((_QWORD *)&v221 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
      v143 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
      v144 = v178;
      v223[0] = v178;
      v223[1] = v143;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v220);
      View.componentSpacing(top:bottom:)();
      outlined consume of Text.Storage(v132, v134, (char)v139);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage((uint64_t)Model, v190, v128);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v177 + 8))(v142, v144);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v186, v183);
      outlined init with take of View(&v220, (uint64_t)v223);
    }
    v96 = v191;
    goto LABEL_24;
  }
LABEL_21:
  v106 = AnyView.init<A>(_:)();
  v224 = MEMORY[0x24BDF4788];
  v225 = MEMORY[0x24BDF4768];
  v223[0] = v106;
LABEL_24:
  v145 = v188;
  v146 = v189;
  v147 = v187;
  v148 = v204;
  outlined init with copy of GenericMedCompletedLogModel(v206, v204, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  outlined init with copy of View((uint64_t)v223, (uint64_t)&v220);
  v149 = (*(unsigned __int8 *)(v147 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
  v150 = (v145 + v149 + 7) & 0xFFFFFFFFFFFFFFF8;
  v151 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v148, v151 + v149, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  outlined init with take of View(&v220, v151 + v150);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>, MEMORY[0x24BDF5420]);
  v152 = v196;
  SnippetBody.init(content:)();
  v153 = v96;
  v154 = v195;
  outlined init with copy of GenericMedCompletedLogModel(v153, v195, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
  v155 = v171;
  v156 = v193;
  v157 = v173;
  (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v193, v205, v173);
  v158 = (*(unsigned __int8 *)(v194 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
  v159 = (v146 + *(unsigned __int8 *)(v155 + 80) + v158) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
  v160 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v154, v160 + v158, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQuerySnippet);
  v168(v160 + v159, v156, v157);
  v161 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>, MEMORY[0x24BEADBF8]);
  v162 = v199;
  v163 = v200;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v197 + 8))(v152, v163);
  v165 = v201;
  v164 = v202;
  (*(void (**)(char *, char *, uint64_t))(v201 + 16))(v198, v162, v202);
  *(_QWORD *)&v220 = v163;
  *((_QWORD *)&v220 + 1) = v161;
  swift_getOpaqueTypeConformance2();
  v166 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v164);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v223);
  outlined destroy of GenericMedCompletedLogModel(v206, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v205, v157);
  result = (*(uint64_t (**)(char *, uint64_t))(v169 + 8))(v172, v170);
  *v207 = v166;
  return result;
}

uint64_t closure #1 in TemperatureQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = type metadata accessor for SnippetHeaderView();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  outlined init with copy of GenericMedCompletedLogModel(a1, (uint64_t)&v17 - v10, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v12 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *))(v14 + 16))((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = AnyView.init<A>(_:)();
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v9, a3, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  *(_QWORD *)(a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, AnyView))
                     + 48)) = v15;
  swift_retain();
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  swift_release();
  return outlined destroy of GenericMedCompletedLogModel((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
}

void closure #2 in TemperatureQuerySnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for TemperatureQuerySnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t outlined init with copy of View(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A4A8298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    v7 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TemperatureQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for SnippetHeaderView() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in TemperatureQuerySnippet.body.getter(v1 + v4, (_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_24A4A8468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *Model;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t Snippet;
  uint64_t v18;

  Snippet = type metadata accessor for TemperatureQuerySnippet();
  v1 = *(_QWORD *)(Snippet - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v16 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for AppPunchout();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v18 = v0;
  v6 = v0 + ((v2 + 16) & ~v2);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + 16) & ~v2), v3);
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  v8 = v6 + Model[10];
  v9 = type metadata accessor for SpeakableString();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v6 + Model[16];
  if (!v11(v12, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRelease();
  v13 = v6 + Model[18];
  v14 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v18 + ((((v2 + 16) & ~v2) + v16 + v5) & ~v5), v3);
  return swift_deallocObject();
}

void partial apply for closure #2 in TemperatureQuerySnippet.body.getter()
{
  uint64_t v0;
  uint64_t Snippet;
  unint64_t v2;

  Snippet = type metadata accessor for TemperatureQuerySnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in TemperatureQuerySnippet.body.getter(v0 + v2);
}

uint64_t sub_24A4A8704()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for View.Body : View in TemperatureQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for TemperatureQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Model;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  void *v81;
  id v82;
  unsigned int (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for AppPunchout();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    Model = (int *)type metadata accessor for TemperatureQueryModel();
    v11 = Model[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = Model[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = Model[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v20 = Model[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = Model[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v24[8] = v25[8];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v26 = Model[10];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for SpeakableString();
    v30 = *(_QWORD *)(v29 - 8);
    v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v85 = v30;
    if (v84(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = Model[11];
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = Model[12];
    v37 = (uint64_t *)((char *)a1 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = Model[13];
    v41 = (uint64_t *)((char *)a1 + v40);
    v42 = (uint64_t *)((char *)a2 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = Model[14];
    v45 = (uint64_t *)((char *)a1 + v44);
    v46 = (uint64_t *)((char *)a2 + v44);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = Model[15];
    v49 = (uint64_t *)((char *)a1 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = Model[16];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v84(v54, 1, v29))
    {
      v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      v56 = v85;
    }
    else
    {
      v56 = v85;
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v53, v54, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v53, 0, 1, v29);
    }
    v57 = Model[17];
    v58 = (uint64_t *)((char *)a1 + v57);
    v59 = (uint64_t *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = Model[18];
    v62 = (char *)a1 + v61;
    v63 = (char *)a2 + v61;
    v64 = type metadata accessor for SnippetHeaderModel();
    v65 = *(_QWORD *)(v64 - 8);
    v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    swift_bridgeObjectRetain();
    if (v66(v63, 1, v64))
    {
      v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v62, v63, v29);
      v68 = *(int *)(v64 + 20);
      v69 = &v62[v68];
      v70 = &v63[v68];
      v71 = *((_QWORD *)v70 + 1);
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = v71;
      v72 = *(int *)(v64 + 24);
      v73 = &v62[v72];
      v74 = &v63[v72];
      v75 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v75;
      v76 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v76(v62, 0, 1, v64);
    }
    v77 = *(int *)(a3 + 20);
    v78 = (uint64_t *)((char *)a1 + v77);
    v79 = (char *)a2 + v77;
    v81 = *(void **)v79;
    v80 = *((_QWORD *)v79 + 1);
    *v78 = v81;
    v78[1] = v80;
    v82 = v81;
  }
  return a1;
}

void destroy for TemperatureQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *Model;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  v7 = a1 + Model[10];
  v8 = type metadata accessor for SpeakableString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a1 + Model[16];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  v12 = a1 + Model[18];
  v13 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

char *initializeWithCopy for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *Model;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  id v80;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  v9 = Model[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = Model[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = Model[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = Model[10];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v83 = v28;
  if (v82(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = Model[11];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = *((_QWORD *)v32 + 1);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = v33;
  v34 = Model[12];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v38 = Model[13];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  v42 = Model[14];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = v45;
  v46 = Model[15];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = v49;
  v50 = Model[16];
  v51 = &a1[v50];
  v52 = &a2[v50];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v82(v52, 1, v27))
  {
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    v54 = v83;
  }
  else
  {
    v54 = v83;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v51, v52, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v51, 0, 1, v27);
  }
  v55 = Model[17];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = *((_QWORD *)v57 + 1);
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = v58;
  v59 = Model[18];
  v60 = &a1[v59];
  v61 = &a2[v59];
  v62 = type metadata accessor for SnippetHeaderModel();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
  swift_bridgeObjectRetain();
  if (v64(v61, 1, v62))
  {
    v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v60, v61, v27);
    v66 = *(int *)(v62 + 20);
    v67 = &v60[v66];
    v68 = &v61[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = *(int *)(v62 + 24);
    v71 = &v60[v70];
    v72 = &v61[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v74(v60, 0, 1, v62);
  }
  v75 = *(int *)(a3 + 20);
  v76 = &a1[v75];
  v77 = &a2[v75];
  v79 = *(void **)v77;
  v78 = *((_QWORD *)v77 + 1);
  *(_QWORD *)v76 = v79;
  *((_QWORD *)v76 + 1) = v78;
  v80 = v79;
  return a1;
}

char *assignWithCopy for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  v16 = Model[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = Model[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = Model[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  v28 = Model[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v31;
  v32 = Model[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for SpeakableString();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  v41 = Model[11];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = Model[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = Model[13];
  v48 = &a1[v47];
  v49 = &a2[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = Model[14];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = Model[15];
  v54 = &a1[v53];
  v55 = &a2[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = Model[16];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = v37(&a1[v56], 1, v35);
  v60 = v37(v58, 1, v35);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v57, v58, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v57, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v57, v35);
LABEL_18:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v57, v58, v35);
LABEL_19:
  v62 = Model[17];
  v63 = &a1[v62];
  v64 = &a2[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v65 = Model[18];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = type metadata accessor for SnippetHeaderModel();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  v71 = v70(v66, 1, v68);
  v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v66, v67, v35);
      v88 = *(int *)(v68 + 20);
      v89 = &v66[v88];
      v90 = &v67[v88];
      *(_QWORD *)v89 = *(_QWORD *)v90;
      *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v91 = *(int *)(v68 + 24);
      v92 = &v66[v91];
      v93 = &v67[v91];
      *(_QWORD *)v92 = *(_QWORD *)v93;
      *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v72)
  {
LABEL_24:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v66, v67, v35);
  v73 = *(int *)(v68 + 20);
  v74 = &v66[v73];
  v75 = &v67[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
  v76 = *(int *)(v68 + 24);
  v77 = &v66[v76];
  v78 = &v67[v76];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
  v79 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79(v66, 0, 1, v68);
LABEL_25:
  v81 = *(int *)(a3 + 20);
  v82 = &a1[v81];
  v83 = &a2[v81];
  v84 = *(void **)&a1[v81];
  v85 = *(void **)v83;
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v86 = v85;

  *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
  return a1;
}

char *initializeWithTake for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = Model[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = Model[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = Model[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = Model[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = Model[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for SpeakableString();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v27, 1, v28))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  v32 = Model[16];
  v33 = &a1[v32];
  v34 = &a2[v32];
  if (v30(&a2[v32], 1, v28))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v34, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  v36 = Model[18];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = type metadata accessor for SnippetHeaderModel();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v37, v38, v28);
    *(_OWORD *)&v37[*(int *)(v39 + 20)] = *(_OWORD *)&v38[*(int *)(v39 + 20)];
    *(_OWORD *)&v37[*(int *)(v39 + 24)] = *(_OWORD *)&v38[*(int *)(v39 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(char *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void *v84;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = Model[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = Model[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v25[8] = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = Model[10];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for SpeakableString();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  v36 = Model[11];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  v41 = Model[12];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  v46 = Model[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  v51 = Model[14];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v55 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = v55;
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  v56 = Model[15];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  v61 = Model[16];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v64 = v32(&a1[v61], 1, v30);
  v65 = v32(v63, 1, v30);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v62, v63, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v62, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v62, v30);
LABEL_18:
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v62, v63, v30);
LABEL_19:
  v67 = Model[17];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v71 = *(_QWORD *)v69;
  v70 = *((_QWORD *)v69 + 1);
  *(_QWORD *)v68 = v71;
  *((_QWORD *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
  v72 = Model[18];
  v73 = &a1[v72];
  v74 = &a2[v72];
  v75 = type metadata accessor for SnippetHeaderModel();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  v78 = v77(v73, 1, v75);
  v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v73, v74, v30);
      v86 = *(int *)(v75 + 20);
      v87 = &v73[v86];
      v88 = &v74[v86];
      v90 = *(_QWORD *)v88;
      v89 = *((_QWORD *)v88 + 1);
      *(_QWORD *)v87 = v90;
      *((_QWORD *)v87 + 1) = v89;
      swift_bridgeObjectRelease();
      v91 = *(int *)(v75 + 24);
      v92 = &v73[v91];
      v93 = &v74[v91];
      v95 = *(_QWORD *)v93;
      v94 = *((_QWORD *)v93 + 1);
      *(_QWORD *)v92 = v95;
      *((_QWORD *)v92 + 1) = v94;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v79)
  {
LABEL_24:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v73, v74, v30);
  *(_OWORD *)&v73[*(int *)(v75 + 20)] = *(_OWORD *)&v74[*(int *)(v75 + 20)];
  *(_OWORD *)&v73[*(int *)(v75 + 24)] = *(_OWORD *)&v74[*(int *)(v75 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_25:
  v81 = *(int *)(a3 + 20);
  v82 = &a1[v81];
  v83 = &a2[v81];
  v84 = *(void **)&a1[v81];
  *(_QWORD *)v82 = *(_QWORD *)v83;

  *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemperatureQuerySnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A9EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model;
  uint64_t v7;
  unint64_t v9;
  int v10;

  Model = type metadata accessor for TemperatureQueryModel();
  v7 = *(_QWORD *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Model);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for TemperatureQuerySnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4A9F7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TemperatureQueryModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for TemperatureQuerySnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TemperatureQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A4AA064()
{
  return MEMORY[0x24BDF4768];
}

void __swiftcall HKActivityRingUIViewRepresentable.init(model:)(WellnessUI::HKActivityRingUIViewRepresentable *__return_ptr retstr, WellnessUI::PhoneRingsModel *model)
{
  Swift::String_optional standValueLabel;
  Swift::String_optional moveLabel;
  Swift::String_optional moveUnitLabel;
  __int128 v5;
  Swift::String_optional exerciseValueLabel;
  __int128 v7;
  __int128 v8;

  standValueLabel = model->standValueLabel;
  retstr->model.standLabel = model->standLabel;
  retstr->model.standValueLabel = standValueLabel;
  retstr->model.standUnitLabel = model->standUnitLabel;
  retstr->model.isSmartEnabled = model->isSmartEnabled;
  moveLabel = model->moveLabel;
  retstr->model.exerciseUnitLabel = model->exerciseUnitLabel;
  retstr->model.moveLabel = moveLabel;
  moveUnitLabel = model->moveUnitLabel;
  retstr->model.moveValueLabel = model->moveValueLabel;
  retstr->model.moveUnitLabel = moveUnitLabel;
  v5 = *(_OWORD *)&model->standTotalValue.value;
  *(_OWORD *)&retstr->model.standGoalValue.value = *(_OWORD *)&model->standGoalValue.value;
  *(_OWORD *)&retstr->model.standTotalValue.value = v5;
  exerciseValueLabel = model->exerciseValueLabel;
  retstr->model.exerciseLabel = model->exerciseLabel;
  retstr->model.exerciseValueLabel = exerciseValueLabel;
  v7 = *(_OWORD *)&model->exerciseTotalValue.value;
  *(_OWORD *)&retstr->model.exerciseGoalValue.value = *(_OWORD *)&model->exerciseGoalValue.value;
  *(_OWORD *)&retstr->model.exerciseTotalValue.value = v7;
  v8 = *(_OWORD *)&model->moveTotalValue.value;
  *(_OWORD *)&retstr->model.moveGoalValue.value = *(_OWORD *)&model->moveGoalValue.value;
  *(_OWORD *)&retstr->model.moveTotalValue.value = v8;
}

uint64_t HKActivityRingUIViewRepresentable.model.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;

  v2 = v1[13];
  v3 = v1[11];
  v34 = v1[12];
  v35 = v2;
  v4 = v1[13];
  v36 = v1[14];
  v5 = v1[9];
  v7 = v1[7];
  v30 = v1[8];
  v6 = v30;
  v31 = v5;
  v8 = v1[9];
  v9 = v1[11];
  v32 = v1[10];
  v10 = v32;
  v33 = v9;
  v11 = v1[5];
  v13 = v1[3];
  v26 = v1[4];
  v12 = v26;
  v27 = v11;
  v14 = v1[5];
  v15 = v1[7];
  v28 = v1[6];
  v16 = v28;
  v29 = v15;
  v17 = v1[1];
  v23[0] = *v1;
  v23[1] = v17;
  v18 = v1[3];
  v20 = *v1;
  v19 = v1[1];
  v24 = v1[2];
  v21 = v24;
  v25 = v18;
  *(_OWORD *)(a1 + 192) = v34;
  *(_OWORD *)(a1 + 208) = v4;
  *(_OWORD *)(a1 + 224) = v1[14];
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)a1 = v20;
  *(_OWORD *)(a1 + 16) = v19;
  v37 = *((_BYTE *)v1 + 240);
  *(_BYTE *)(a1 + 240) = *((_BYTE *)v1 + 240);
  *(_OWORD *)(a1 + 32) = v21;
  *(_OWORD *)(a1 + 48) = v13;
  return outlined retain of PhoneRingsModel((uint64_t)v23);
}

id HKActivityRingUIViewRepresentable.makeUIView(context:)()
{
  uint64_t v0;
  double v1;
  int v2;
  double v3;
  int v4;
  double v5;
  int v6;
  double v7;
  int v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  double v17;
  id v18;
  id v19;
  double v20;
  id v21;
  id v22;
  double v23;
  id v24;
  id v25;
  double v26;
  id v27;
  id v28;
  double v29;
  id v30;
  id v31;
  int v33;
  int v34;

  v1 = *(double *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(double *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  v5 = *(double *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 40);
  v7 = *(double *)(v0 + 48);
  v8 = *(unsigned __int8 *)(v0 + 56);
  v9 = *(double *)(v0 + 64);
  v10 = *(double *)(v0 + 80);
  v33 = *(unsigned __int8 *)(v0 + 88);
  v34 = *(unsigned __int8 *)(v0 + 72);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD38E8]), sel_init);
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_largeCalorieUnit);
  if (v8)
    v7 = 0.0;
  v14 = (void *)objc_opt_self();
  v15 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v13, v7);

  objc_msgSend(v11, sel_setActiveEnergyBurned_, v15);
  v16 = objc_msgSend(v12, sel_largeCalorieUnit);
  v17 = 500.0;
  if (!v6)
    v17 = v5;
  v18 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v16, v17);

  objc_msgSend(v11, sel_setActiveEnergyBurnedGoal_, v18);
  v19 = objc_msgSend(v12, sel_hourUnit);
  if (v4)
    v20 = 0.0;
  else
    v20 = v3;
  v21 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v19, v20);

  objc_msgSend(v11, sel_setAppleExerciseTime_, v21);
  v22 = objc_msgSend(v12, sel_hourUnit);
  v23 = 30.0;
  if (!v2)
    v23 = v1;
  v24 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v22, v23);

  objc_msgSend(v11, sel_setAppleExerciseTimeGoal_, v24);
  v25 = objc_msgSend(v12, sel_countUnit);
  if (v33)
    v26 = 0.0;
  else
    v26 = v10;
  v27 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v25, v26);

  objc_msgSend(v11, sel_setAppleStandHours_, v27);
  v28 = objc_msgSend(v12, sel_countUnit);
  v29 = 12.0;
  if (!v34)
    v29 = v9;
  v30 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v28, v29);

  objc_msgSend(v11, sel_setAppleStandHoursGoal_, v30);
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4708]), sel_init);
  objc_msgSend(v31, sel_setActivitySummary_animated_, v11, 1);

  return v31;
}

unint64_t lazy protocol witness table accessor for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable;
  if (!lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HKActivityRingUIViewRepresentable, &type metadata for HKActivityRingUIViewRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable;
  if (!lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HKActivityRingUIViewRepresentable, &type metadata for HKActivityRingUIViewRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable);
  }
  return result;
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance HKActivityRingUIViewRepresentable()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t associated type witness table accessor for View.Body : View in HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x24BDF5558];
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance HKActivityRingUIViewRepresentable()
{
  lazy protocol witness table accessor for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable();
  return static UIViewRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HKActivityRingUIViewRepresentable()
{
  lazy protocol witness table accessor for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable();
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance HKActivityRingUIViewRepresentable()
{
  lazy protocol witness table accessor for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable();
  UIViewRepresentable.body.getter();
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for HKActivityRingUIViewRepresentable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for HKActivityRingUIViewRepresentable()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  v5 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v5;
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v6;
  v7 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v7;
  v8 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v8;
  v9 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v9;
  v10 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v10;
  v11 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v11;
  v12 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v12;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_QWORD *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_QWORD *)(a1 + 184) = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 224) = a2[28];
  *(_QWORD *)(a1 + 232) = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
  return a1;
}

__n128 __swift_memcpy241_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v13;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKActivityRingUIViewRepresentable(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 241))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HKActivityRingUIViewRepresentable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 240) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 241) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 241) = 0;
    if (a2)
      *(_QWORD *)(result + 104) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKActivityRingUIViewRepresentable()
{
  return &type metadata for HKActivityRingUIViewRepresentable;
}

uint64_t SingleDataPointView.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleDataPointView.unit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleDataPointView.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleDataPointView.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SingleDataPointView() + 32);
  return outlined init with copy of AppPunchout?(v3, a1);
}

uint64_t type metadata accessor for SingleDataPointView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SingleDataPointView;
  if (!type metadata singleton initialization cache for SingleDataPointView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of AppPunchout?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SingleDataPointView.init(data:unit:dateLabel:appPunchout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *a8 = EnvironmentObject.init()();
  a8[1] = v16;
  a8[2] = a1;
  a8[3] = a2;
  a8[4] = a3;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  v17 = (uint64_t)a8 + *(int *)(type metadata accessor for SingleDataPointView() + 32);
  return outlined init with take of AppPunchout?(a7, v17);
}

uint64_t outlined init with take of AppPunchout?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SingleDataPointView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  Swift::String v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t *v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v129 = a1;
  v2 = type metadata accessor for FactItemHeroNumberView();
  v123 = *(_QWORD *)(v2 - 8);
  v124 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v121 = (char *)v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v126 = *(_QWORD *)(v4 - 8);
  v127 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v122 = (char *)v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v125 = (char *)v106 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v8);
  v128 = (char *)v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for Font.TextStyle();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v106 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void **)(v1 + 24);
  if (v21)
  {
    v22 = *(void **)(v1 + 40);
    if (v22)
    {
      if (*(_QWORD *)(v1 + 56))
      {
        v120._object = *(void **)(v1 + 56);
        v23 = *(_QWORD *)(v1 + 16);
        v118 = *(_QWORD *)(v1 + 32);
        v119 = v23;
        v120._countAndFlagsBits = *(_QWORD *)(v1 + 48);
        v24 = type metadata accessor for SingleDataPointView();
        outlined init with copy of AppPunchout?(v1 + *(int *)(v24 + 32), (uint64_t)v20);
        v25 = type metadata accessor for AppPunchout();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v20, 1, v25) != 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of Font.Design?((uint64_t)v20, &demangling cache variable for type metadata for AppPunchout?);
          v28 = *MEMORY[0x24BDF1888];
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
          v117 = v17;
          v29(v17, v28, v11);
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v30._countAndFlagsBits = 0;
          v30._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
          v31._countAndFlagsBits = v118;
          v31._object = v22;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v31);
          swift_bridgeObjectRelease();
          v32._countAndFlagsBits = 0;
          v32._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v32);
          LocalizedStringKey.init(stringInterpolation:)();
          v33 = Text.init(_:tableName:bundle:comment:)();
          v115 = v34;
          v116 = v33;
          v118 = v35;
          v37 = v36 & 1;
          v38 = *MEMORY[0x24BDF1870];
          v111 = v11;
          v29(v15, v38, v11);
          LODWORD(v113) = *MEMORY[0x24BDF1670];
          v39 = v113;
          v40 = type metadata accessor for Font.Design();
          v41 = *(_QWORD *)(v40 - 8);
          v112 = *(void (**)(char *, uint64_t))(v41 + 104);
          v42 = (uint64_t)v128;
          v43 = v39;
          v44 = v40;
          v108 = v40;
          v112(v128, v43);
          v109 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56);
          v109(v42, 0, 1, v44);
          static Font.system(_:design:weight:)();
          outlined destroy of Font.Design?(v42, &demangling cache variable for type metadata for Font.Design?);
          v110 = *(void (**)(char *, uint64_t))(v12 + 8);
          v110(v15, v11);
          v46 = v115;
          v45 = v116;
          v47 = Text.font(_:)();
          v107 = v48;
          v50 = v49;
          v114 = v51;
          swift_release();
          LOBYTE(v44) = v50 & 1;
          outlined consume of Text.Storage(v45, v46, v37);
          swift_bridgeObjectRelease();
          LODWORD(v145) = static HierarchicalShapeStyle.secondary.getter();
          v52 = v107;
          v53 = Text.foregroundStyle<A>(_:)();
          v55 = v54;
          v106[1] = v56;
          LOBYTE(v45) = v57 & 1;
          outlined consume of Text.Storage(v47, v52, v44);
          swift_bridgeObjectRelease();
          static Font.Weight.semibold.getter();
          v58 = Text.fontWeight(_:)();
          v115 = v59;
          v116 = v58;
          v118 = v60;
          LODWORD(v114) = v61 & 1;
          outlined consume of Text.Storage(v53, v55, v45);
          swift_bridgeObjectRelease();
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v62._countAndFlagsBits = 0;
          v62._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v62);
          v63._countAndFlagsBits = v119;
          v63._object = v21;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v63);
          swift_bridgeObjectRelease();
          v64._countAndFlagsBits = 0;
          v64._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v64);
          LocalizedStringKey.init(stringInterpolation:)();
          v65 = Text.init(_:tableName:bundle:comment:)();
          v67 = v66;
          v119 = v68;
          LOBYTE(v45) = v69 & 1;
          v70 = (uint64_t)v128;
          v71 = v108;
          ((void (*)(char *, _QWORD, uint64_t))v112)(v128, v113, v108);
          v109(v70, 0, 1, v71);
          static Font.system(_:design:weight:)();
          outlined destroy of Font.Design?(v70, &demangling cache variable for type metadata for Font.Design?);
          v72 = Text.font(_:)();
          v74 = v73;
          LOBYTE(v53) = v75;
          swift_release();
          LOBYTE(v55) = v53 & 1;
          outlined consume of Text.Storage(v65, v67, v45);
          swift_bridgeObjectRelease();
          v76 = Text.bold()();
          v113 = v77;
          v79 = v78;
          v128 = v78;
          LODWORD(v112) = v80 & 1;
          outlined consume of Text.Storage(v72, v74, v55);
          swift_bridgeObjectRelease();
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v81._countAndFlagsBits = 0;
          v81._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v81);
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v120);
          v82._countAndFlagsBits = 0;
          v82._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v82);
          LocalizedStringKey.init(stringInterpolation:)();
          v83 = Text.init(_:tableName:bundle:comment:)();
          v108 = v84;
          v109 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v83;
          v120._object = v85;
          LODWORD(v67) = v86 & 1;
          v147 = MEMORY[0x24BDF1FA0];
          v148 = MEMORY[0x24BEAD6B8];
          v87 = MEMORY[0x24BDF1FA0];
          v88 = MEMORY[0x24BEAD6B8];
          v89 = swift_allocObject();
          v144 = v88;
          v145 = v89;
          v119 = v76;
          *(_QWORD *)(v89 + 16) = v76;
          v90 = v113;
          *(_QWORD *)(v89 + 24) = v113;
          v91 = (char)v112;
          *(_BYTE *)(v89 + 32) = (_BYTE)v112;
          *(_QWORD *)(v89 + 40) = v79;
          v143 = v87;
          v92 = v88;
          v93 = swift_allocObject();
          v141 = 0;
          v142 = v93;
          v95 = v115;
          v94 = v116;
          *(_QWORD *)(v93 + 16) = v116;
          *(_QWORD *)(v93 + 24) = v95;
          LOBYTE(v74) = v114;
          *(_BYTE *)(v93 + 32) = v114;
          *(_QWORD *)(v93 + 40) = v118;
          v139 = 0u;
          v140 = 0u;
          v137 = MEMORY[0x24BDF1FA0];
          v138 = v92;
          v96 = swift_allocObject();
          v135 = 0;
          v136 = v96;
          v98 = v108;
          v97 = (uint64_t)v109;
          *(_QWORD *)(v96 + 16) = v109;
          *(_QWORD *)(v96 + 24) = v98;
          LODWORD(v120._countAndFlagsBits) = v67;
          *(_BYTE *)(v96 + 32) = v67;
          *(_QWORD *)(v96 + 40) = v120._object;
          v133 = 0u;
          v134 = 0u;
          v132 = 0;
          v130 = 0u;
          v131 = 0u;
          outlined copy of Text.Storage(v119, v90, v91);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v94, v95, v74);
          swift_bridgeObjectRetain();
          v99 = v97;
          outlined copy of Text.Storage(v97, v98, v67);
          swift_bridgeObjectRetain();
          v100 = v121;
          FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
          v101 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
          v102 = v124;
          v103 = v125;
          View.componentSpacing(top:bottom:)();
          (*(void (**)(char *, uint64_t))(v123 + 8))(v100, v102);
          v105 = v126;
          v104 = v127;
          (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v122, v103, v127);
          v145 = v102;
          v146 = v101;
          swift_getOpaqueTypeConformance2();
          v27 = AnyView.init<A>(_:)();
          outlined consume of Text.Storage(v99, v98, v120._countAndFlagsBits);
          swift_bridgeObjectRelease();
          outlined consume of Text.Storage(v116, v115, v114);
          swift_bridgeObjectRelease();
          outlined consume of Text.Storage(v119, v113, (char)v112);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v104);
          result = ((uint64_t (*)(char *, uint64_t))v110)(v117, v111);
          goto LABEL_7;
        }
        outlined destroy of Font.Design?((uint64_t)v20, &demangling cache variable for type metadata for AppPunchout?);
      }
    }
  }
  result = AnyView.init<A>(_:)();
  v27 = result;
LABEL_7:
  *v129 = v27;
  return result;
}

uint64_t sub_24A4AB7A4()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for View.Body : View in SingleDataPointView()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for SingleDataPointView(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v6 = a2[4];
    *((_QWORD *)a1 + 3) = a2[3];
    *((_QWORD *)a1 + 4) = v6;
    v7 = a2[6];
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v7;
    v8 = *(int *)(a3 + 32);
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    *((_QWORD *)a1 + 7) = a2[7];
    v11 = type metadata accessor for AppPunchout();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v14 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return v5;
}

uint64_t destroy for SingleDataPointView(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(int *)(a3 + 32);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 32);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for AppPunchout();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

_OWORD *initializeWithTake for SingleDataPointView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AppPunchout();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 32);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for AppPunchout();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleDataPointView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4ABE58(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for SingleDataPointView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24A4ABEF0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SingleDataPointView()
{
  unint64_t v0;

  type metadata accessor for AppPunchout?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for AppPunchout?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AppPunchout?)
  {
    type metadata accessor for AppPunchout();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?);
  }
}

uint64_t sub_24A4AC034()
{
  return MEMORY[0x24BDF4768];
}

uint64_t HealthDataLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for HealthDataLogModel);
}

uint64_t HealthDataLogSnippet.buttonColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for ColorScheme();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - v5;
  type metadata accessor for HealthDataLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x24BDEB408], v0);
  v7 = static ColorScheme.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if ((v7 & 1) != 0)
    return static Color.green.getter();
  else
    return static Color.blue.getter();
}

uint64_t type metadata accessor for HealthDataLogSnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HealthDataLogSnippet;
  if (!type metadata singleton initialization cache for HealthDataLogSnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HealthDataLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = type metadata accessor for HealthDataLogSnippet();
  v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v5 = EnvironmentObject.init()();
  v5[1] = v6;
  v7 = (uint64_t *)(a2 + *(int *)(v4 + 24));
  *v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for HealthDataLogModel);
}

uint64_t HealthDataLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (**v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  int *v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t *v59;
  void *v60;
  uint64_t *v61;
  void *v62;
  uint64_t *v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  char v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  char *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t);
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t result;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, _QWORD, uint64_t, uint64_t);
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  void (*v184)(char *, uint64_t);
  void (*v185)(unint64_t, char *, uint64_t);
  uint64_t v186;
  void *v187;
  void *v188;
  uint64_t v189;
  void (*v190)(uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;

  v242 = a1;
  v1 = type metadata accessor for HealthDataLogSnippet();
  v214 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v215 = v2;
  v216 = (uint64_t)&v176 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  v219 = *(_QWORD *)(v3 - 8);
  v220 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v217 = (char *)&v176 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v222 = *(_QWORD *)(v5 - 8);
  v223 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v218 = (char *)&v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v221 = (char *)&v176 - v8;
  v211 = type metadata accessor for SeparatorStyle();
  v209 = *(_QWORD *)(v211 - 8);
  MEMORY[0x24BDAC7A8](v211);
  v206 = (char *)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for FactItemHeroNumberView();
  v205 = *(_QWORD *)(v208 - 8);
  MEMORY[0x24BDAC7A8](v208);
  v204 = (char *)&v176 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v210 = *(_QWORD *)(v212 - 8);
  MEMORY[0x24BDAC7A8](v212);
  v207 = (char *)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v232 = *(_QWORD *)(v12 - 8);
  v233 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v228 = (char *)&v176 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v231 = (char *)&v176 - v15;
  v201 = type metadata accessor for StatusIndicatorView.IndicatorType();
  v199 = *(_QWORD *)(v201 - 8);
  MEMORY[0x24BDAC7A8](v201);
  v200 = (char *)&v176 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for StatusIndicatorView();
  v229 = *(_QWORD *)(v17 - 8);
  v230 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v227 = (char *)&v176 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = v19;
  MEMORY[0x24BDAC7A8](v18);
  v238 = (char *)&v176 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v21);
  v225 = (uint64_t)&v176 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v23);
  v235 = (char *)&v176 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for SnippetHeaderView();
  v202 = *(_QWORD *)(v197 - 8);
  v25 = *(_QWORD *)(v202 + 64);
  v26 = MEMORY[0x24BDAC7A8](v197);
  v226 = (uint64_t)&v176 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v237 = (uint64_t)&v176 - v27;
  v234 = type metadata accessor for Font.TextStyle();
  v224 = *(_QWORD *)(v234 - 8);
  v28 = MEMORY[0x24BDAC7A8](v234);
  v198 = (char *)&v176 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v236 = (char *)&v176 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v31);
  v239 = (uint64_t)&v176 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = type metadata accessor for AppPunchout();
  v241 = *(_QWORD *)(v240 - 8);
  v33 = *(_QWORD *)(v241 + 64);
  v34 = MEMORY[0x24BDAC7A8](v240);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v176 - v35;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v38 = MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v176 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v176 - v41;
  v43 = type metadata accessor for SnippetHeaderModel();
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)&v176 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v243, (uint64_t)v42, &demangling cache variable for type metadata for SnippetHeaderModel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v42, &demangling cache variable for type metadata for SnippetHeaderModel?);
LABEL_14:
    v175 = v242;
    result = AnyView.init<A>(_:)();
    v173 = result;
    goto LABEL_15;
  }
  v191 = v44;
  v192 = v43;
  v193 = v40;
  v194 = v25;
  v195 = v33;
  v196 = (char *)&v176 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v241;
  v48 = v240;
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v42, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  v49 = type metadata accessor for HealthDataLogModel();
  v50 = v243;
  v51 = (void (**)(uint64_t, uint64_t))(v243 + *(int *)(v49 + 32));
  v52 = v51[1];
  if (!v52)
  {
    v57 = (uint64_t)v46;
LABEL_13:
    outlined destroy of GenericMedCompletedLogModel(v57, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_14;
  }
  v53 = (int *)v49;
  v54 = (uint64_t)v46;
  v55 = *v51;
  v56 = v239;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v243 + *(int *)(v49 + 40), v239, &demangling cache variable for type metadata for AppPunchout?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v56, 1, v48) == 1)
  {
    outlined destroy of GenericMedCompletedLogModel(v54, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    outlined destroy of Font.Design?(v56, &demangling cache variable for type metadata for AppPunchout?);
    goto LABEL_14;
  }
  v190 = v55;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 32);
  v58(v36, v56, v48);
  v59 = (uint64_t *)(v50 + v53[9]);
  v60 = (void *)v59[1];
  if (!v60
    || (v61 = (uint64_t *)(v50 + v53[6]), (v62 = (void *)v61[1]) == 0)
    || (v63 = (uint64_t *)(v50 + v53[7]), (v64 = (void *)v63[1]) == 0)
    || (v65 = (uint64_t *)(v50 + v53[11]), (v66 = v65[1]) == 0))
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v48);
    v57 = v54;
    goto LABEL_13;
  }
  v239 = *v59;
  v180 = *v61;
  v67 = *v65;
  v181 = *v63;
  v182 = v67;
  v68 = *MEMORY[0x24BDF1888];
  v69 = *(void (**)(char *, _QWORD, uint64_t))(v224 + 104);
  v183 = v36;
  v184 = (void (*)(char *, uint64_t))v69;
  v188 = v64;
  v189 = v66;
  v187 = v62;
  v179 = v60;
  v69(v236, v68, v234);
  v186 = v54;
  v70 = (uint64_t)v193;
  outlined init with copy of GenericMedCompletedLogModel(v54, (uint64_t)v193, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v191 + 56))(v70, 0, 1, v192);
  v71 = v197;
  v72 = *(int *)(v197 + 20);
  v185 = (void (*)(unint64_t, char *, uint64_t))v58;
  v73 = (uint64_t *)(v226 + v72);
  v74 = v226;
  *v73 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v75 = (uint64_t *)(v74 + *(int *)(v71 + 24));
  *v75 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v70, v74);
  outlined init with take of GenericMedCompletedLogSnippet(v74, v237, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v76._countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v76);
  v77._countAndFlagsBits = (uint64_t)v190;
  v77._object = v52;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v77);
  swift_bridgeObjectRelease();
  v78._countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v78);
  LocalizedStringKey.init(stringInterpolation:)();
  v79 = Text.init(_:tableName:bundle:comment:)();
  v81 = v80;
  LOBYTE(v75) = v82 & 1;
  v83 = v198;
  v84 = v234;
  ((void (*)(char *, _QWORD, uint64_t))v184)(v198, *MEMORY[0x24BDF1870], v234);
  LODWORD(v191) = *MEMORY[0x24BDF1670];
  v85 = v191;
  v86 = type metadata accessor for Font.Design();
  v87 = *(_QWORD *)(v86 - 8);
  v190 = *(void (**)(uint64_t, uint64_t))(v87 + 104);
  v88 = v225;
  v89 = v85;
  v90 = v86;
  v177 = v86;
  v190(v225, v89);
  v178 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v87 + 56);
  v178(v88, 0, 1, v90);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v88, &demangling cache variable for type metadata for Font.Design?);
  v184 = *(void (**)(char *, uint64_t))(v224 + 8);
  v184(v83, v84);
  v91 = Text.font(_:)();
  v93 = v92;
  LOBYTE(v90) = v94;
  swift_release();
  outlined consume of Text.Storage(v79, v81, (char)v75);
  swift_bridgeObjectRelease();
  LODWORD(v259) = static HierarchicalShapeStyle.secondary.getter();
  v95 = Text.foregroundStyle<A>(_:)();
  v97 = v96;
  LOBYTE(v84) = v98 & 1;
  outlined consume of Text.Storage(v91, v93, v90 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  v197 = Text.fontWeight(_:)();
  v198 = v99;
  v193 = (char *)v100;
  LODWORD(v192) = v101 & 1;
  outlined consume of Text.Storage(v95, v97, v84);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v102._countAndFlagsBits = 0;
  v102._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v102);
  v103._countAndFlagsBits = v239;
  v103._object = v179;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v103);
  swift_bridgeObjectRelease();
  v104._countAndFlagsBits = 0;
  v104._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v104);
  LocalizedStringKey.init(stringInterpolation:)();
  v105 = Text.init(_:tableName:bundle:comment:)();
  v107 = v106;
  LOBYTE(v84) = v108 & 1;
  v109 = v225;
  v110 = v177;
  ((void (*)(uint64_t, _QWORD, uint64_t))v190)(v225, v191, v177);
  v178(v109, 0, 1, v110);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v109, &demangling cache variable for type metadata for Font.Design?);
  v111 = Text.font(_:)();
  v113 = v112;
  LOBYTE(v110) = v114;
  swift_release();
  outlined consume of Text.Storage(v105, v107, v84);
  swift_bridgeObjectRelease();
  v115 = (void *)Text.bold()();
  v117 = v116;
  v239 = v118;
  LODWORD(v107) = v119 & 1;
  outlined consume of Text.Storage(v111, v113, v110 & 1);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v120._countAndFlagsBits = 0;
  v120._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v120);
  v121._countAndFlagsBits = v180;
  v121._object = v187;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v121);
  swift_bridgeObjectRelease();
  v122._countAndFlagsBits = 8236;
  v122._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v122);
  v123._countAndFlagsBits = v181;
  v123._object = v188;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v123);
  swift_bridgeObjectRelease();
  v124._countAndFlagsBits = 0;
  v124._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v124);
  LocalizedStringKey.init(stringInterpolation:)();
  v125 = Text.init(_:tableName:bundle:comment:)();
  v190 = v126;
  v191 = v125;
  v235 = v127;
  LODWORD(v84) = v128 & 1;
  v261 = MEMORY[0x24BEE0D00];
  v262 = MEMORY[0x24BEAE5C0];
  v259 = v182;
  v260 = v189;
  (*(void (**)(char *, _QWORD, uint64_t))(v199 + 104))(v200, *MEMORY[0x24BEADF80], v201);
  StatusIndicatorView.init(message:type:showIndicator:)();
  v129 = MEMORY[0x24BDF1FA0];
  v130 = MEMORY[0x24BEAD6B8];
  v261 = MEMORY[0x24BDF1FA0];
  v262 = MEMORY[0x24BEAD6B8];
  v131 = swift_allocObject();
  v258 = v130;
  v259 = v131;
  v132 = (uint64_t)v115;
  v179 = v115;
  *(_QWORD *)(v131 + 16) = v115;
  *(_QWORD *)(v131 + 24) = v117;
  v225 = v117;
  LODWORD(v224) = v107;
  *(_BYTE *)(v131 + 32) = v107;
  *(_QWORD *)(v131 + 40) = v239;
  v257 = v129;
  v133 = swift_allocObject();
  v255 = 0;
  v256 = v133;
  v134 = v197;
  v135 = v198;
  v136 = (uint64_t)v193;
  *(_QWORD *)(v133 + 16) = v197;
  *(_QWORD *)(v133 + 24) = v136;
  LOBYTE(v115) = v192;
  *(_BYTE *)(v133 + 32) = v192;
  *(_QWORD *)(v133 + 40) = v135;
  v253 = 0u;
  v254 = 0u;
  v251 = v129;
  v252 = v130;
  v137 = swift_allocObject();
  v250 = v137;
  v138 = v190;
  v139 = v191;
  *(_QWORD *)(v137 + 16) = v191;
  *(_QWORD *)(v137 + 24) = v138;
  LODWORD(v188) = v84;
  *(_BYTE *)(v137 + 32) = v84;
  *(_QWORD *)(v137 + 40) = v235;
  v249 = 0;
  v247 = 0u;
  v248 = 0u;
  v246 = 0;
  v244 = 0u;
  v245 = 0u;
  outlined copy of Text.Storage(v132, v225, v224);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v134, v136, (char)v115);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v139, (uint64_t)v138, v84);
  swift_bridgeObjectRetain();
  v140 = v204;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  v141 = v209;
  v142 = v206;
  v143 = v211;
  (*(void (**)(char *, _QWORD, uint64_t))(v209 + 104))(v206, *MEMORY[0x24BEAB510], v211);
  v144 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
  v146 = v207;
  v145 = v208;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v143);
  (*(void (**)(char *, uint64_t))(v205 + 8))(v140, v145);
  v259 = v145;
  v260 = v144;
  swift_getOpaqueTypeConformance2();
  v147 = v231;
  v148 = v212;
  View.componentSpacing(top:bottom:)();
  (*(void (**)(char *, uint64_t))(v210 + 8))(v146, v148);
  v149 = v226;
  outlined init with copy of GenericMedCompletedLogModel(v237, v226, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v150 = v232;
  v151 = v147;
  v152 = v233;
  (*(void (**)(char *, char *, uint64_t))(v232 + 16))(v228, v151, v233);
  v153 = v229;
  v154 = v230;
  (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v227, v238, v230);
  v155 = (*(unsigned __int8 *)(v202 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80);
  v156 = (v194 + *(unsigned __int8 *)(v150 + 80) + v155) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
  v157 = (v213 + *(unsigned __int8 *)(v153 + 80) + v156) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80);
  v158 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v149, v158 + v155, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  (*(void (**)(unint64_t, char *, uint64_t))(v150 + 32))(v158 + v156, v228, v152);
  (*(void (**)(unint64_t, char *, uint64_t))(v153 + 32))(v158 + v157, v227, v154);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>, MEMORY[0x24BDF5420]);
  v159 = v217;
  SnippetBody.init(content:)();
  v160 = v216;
  outlined init with copy of GenericMedCompletedLogModel(v243, v216, (uint64_t (*)(_QWORD))type metadata accessor for HealthDataLogSnippet);
  v161 = v241;
  v162 = v196;
  v163 = v183;
  v164 = v240;
  (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v196, v183, v240);
  v165 = (*(unsigned __int8 *)(v214 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80);
  v166 = (v215 + *(unsigned __int8 *)(v161 + 80) + v165) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
  v167 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v160, v167 + v165, (uint64_t (*)(_QWORD))type metadata accessor for HealthDataLogSnippet);
  v185(v167 + v166, v162, v164);
  v168 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>, MEMORY[0x24BEADBF8]);
  v170 = v220;
  v169 = v221;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v219 + 8))(v159, v170);
  v172 = v222;
  v171 = v223;
  (*(void (**)(char *, char *, uint64_t))(v222 + 16))(v218, v169, v223);
  v259 = v170;
  v260 = v168;
  swift_getOpaqueTypeConformance2();
  v173 = AnyView.init<A>(_:)();
  outlined consume of Text.Storage(v191, (uint64_t)v190, (char)v188);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v197, (uint64_t)v193, v192);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage((uint64_t)v179, v225, v224);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v172 + 8))(v169, v171);
  (*(void (**)(char *, uint64_t))(v232 + 8))(v231, v233);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v238, v230);
  outlined destroy of GenericMedCompletedLogModel(v237, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v184(v236, v234);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v163, v164);
  result = outlined destroy of GenericMedCompletedLogModel(v186, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  v175 = v242;
LABEL_15:
  *v175 = v173;
  return result;
}

void closure #2 in HealthDataLogSnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for HealthDataLogSnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_24A4AD520()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A4AD550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v4 = *(_QWORD *)(v21 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for StatusIndicatorView();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v0 + ((v3 + 16) & ~v3);
  v10 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + ((v3 + 16) & ~v3), v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = v9 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = v9 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  v16 = (((v3 + 16) & ~v3) + v20 + v5) & ~v5;
  v17 = (v16 + v19 + v8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v16, v21);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v17, v6);
  return swift_deallocObject();
}

uint64_t sub_24A4AD758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for HealthDataLogSnippet();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v0 + v3;
  v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v0 + v3, 1, v8))
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v3, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = type metadata accessor for HealthDataLogModel();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v7 + *(int *)(v10 + 40);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
  swift_bridgeObjectRelease();

  v12 = v7 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v15 + v6) & ~v6), v4);
  return swift_deallocObject();
}

void partial apply for closure #2 in HealthDataLogSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for HealthDataLogSnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in HealthDataLogSnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in HealthDataLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for HealthDataLogSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(uint64_t *, _QWORD, uint64_t, uint64_t);
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for SnippetHeaderModel();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v10 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(v6 + 20);
      v12 = (uint64_t *)((char *)a1 + v11);
      v13 = (uint64_t *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      v15 = *(int *)(v6 + 24);
      v16 = (uint64_t *)((char *)a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      v19 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(a1, 0, 1, v6);
    }
    v20 = (int *)type metadata accessor for HealthDataLogModel();
    *(uint64_t *)((char *)a1 + v20[5]) = *(uint64_t *)((char *)a2 + v20[5]);
    v21 = v20[6];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v20[7];
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = v20[8];
    v30 = (uint64_t *)((char *)a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = v20[9];
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = v20[10];
    v57 = (char *)a2 + v37;
    __dst = (char *)a1 + v37;
    v38 = type metadata accessor for AppPunchout();
    v39 = *(_QWORD *)(v38 - 8);
    v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v56(v57, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(__dst, v57, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
    }
    v41 = v20[11];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = *(int *)(a3 + 20);
    v46 = *(int *)(a3 + 24);
    v47 = (uint64_t *)((char *)a1 + v45);
    v48 = (char *)a2 + v45;
    v50 = *(void **)v48;
    v49 = *((_QWORD *)v48 + 1);
    *v47 = v50;
    v47[1] = v49;
    v51 = (uint64_t *)((char *)a1 + v46);
    v52 = (uint64_t *)((char *)a2 + v46);
    swift_bridgeObjectRetain();
    v53 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v54 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v51, v52, v54);
    }
    else
    {
      *v51 = *v52;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for HealthDataLogSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = type metadata accessor for HealthDataLogModel();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(v6 + 40);
  v8 = type metadata accessor for AppPunchout();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();

  v10 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v11 = type metadata accessor for ColorScheme();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

char *initializeWithCopy for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  char *v50;
  id v51;
  uint64_t v52;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *__dst;

  v5 = type metadata accessor for SnippetHeaderModel();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(v5 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    v13 = *(int *)(v5 + 24);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(a1, 0, 1, v5);
  }
  v18 = (int *)type metadata accessor for HealthDataLogModel();
  *(_QWORD *)&a1[v18[5]] = *(_QWORD *)&a2[v18[5]];
  v19 = v18[6];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v23 = v18[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = v18[8];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = v30;
  v31 = v18[9];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = v18[10];
  v55 = &a2[v35];
  __dst = &a1[v35];
  v36 = type metadata accessor for AppPunchout();
  v37 = *(_QWORD *)(v36 - 8);
  v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v54(v55, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v55, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v55, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
  }
  v39 = v18[11];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = *(int *)(a3 + 20);
  v44 = *(int *)(a3 + 24);
  v45 = &a1[v43];
  v46 = &a2[v43];
  v48 = *(void **)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  v49 = &a1[v44];
  v50 = &a2[v44];
  swift_bridgeObjectRetain();
  v51 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v52 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v49, v50, v52);
  }
  else
  {
    *(_QWORD *)v49 = *(_QWORD *)v50;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(v6 + 20);
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      v15 = *(int *)(v6 + 24);
      v16 = &a1[v15];
      v17 = &a2[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
      v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v56 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(a1, a2, v56);
  v57 = *(int *)(v6 + 20);
  v58 = &a1[v57];
  v59 = &a2[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = *(int *)(v6 + 24);
  v61 = &a1[v60];
  v62 = &a2[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v20 = (int *)type metadata accessor for HealthDataLogModel();
  *(_QWORD *)&a1[v20[5]] = *(_QWORD *)&a2[v20[5]];
  swift_retain();
  swift_release();
  v21 = v20[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = v20[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = v20[8];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v20[9];
  v31 = &a1[v30];
  v32 = &a2[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v20[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for AppPunchout();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_12:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v34, v35, v36);
LABEL_13:
  v42 = v20[11];
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = *(int *)(a3 + 20);
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *(void **)&a1[v45];
  v49 = *(void **)&a2[v45];
  *(_QWORD *)v46 = v49;
  v50 = v49;

  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  if (a1 != a2)
  {
    v51 = *(int *)(a3 + 24);
    v52 = &a1[v51];
    v53 = &a2[v51];
    outlined destroy of Font.Design?((uint64_t)&a1[v51], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v54 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    }
    else
    {
      *(_QWORD *)v52 = *(_QWORD *)v53;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = (int *)type metadata accessor for HealthDataLogModel();
  *(_QWORD *)&a1[v10[5]] = *(_QWORD *)&a2[v10[5]];
  *(_OWORD *)&a1[v10[6]] = *(_OWORD *)&a2[v10[6]];
  *(_OWORD *)&a1[v10[7]] = *(_OWORD *)&a2[v10[7]];
  *(_OWORD *)&a1[v10[8]] = *(_OWORD *)&a2[v10[8]];
  *(_OWORD *)&a1[v10[9]] = *(_OWORD *)&a2[v10[9]];
  v11 = v10[10];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for AppPunchout();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_OWORD *)&a1[v10[11]] = *(_OWORD *)&a2[v10[11]];
  v17 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  v58 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(a1, a2, v58);
  v59 = *(int *)(v6 + 20);
  v60 = &a1[v59];
  v61 = &a2[v59];
  v63 = *(_QWORD *)v61;
  v62 = *((_QWORD *)v61 + 1);
  *(_QWORD *)v60 = v63;
  *((_QWORD *)v60 + 1) = v62;
  swift_bridgeObjectRelease();
  v64 = *(int *)(v6 + 24);
  v65 = &a1[v64];
  v66 = &a2[v64];
  v68 = *(_QWORD *)v66;
  v67 = *((_QWORD *)v66 + 1);
  *(_QWORD *)v65 = v68;
  *((_QWORD *)v65 + 1) = v67;
  swift_bridgeObjectRelease();
LABEL_7:
  v13 = (int *)type metadata accessor for HealthDataLogModel();
  *(_QWORD *)&a1[v13[5]] = *(_QWORD *)&a2[v13[5]];
  swift_release();
  v14 = v13[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v18 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  v19 = v13[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  v24 = v13[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  v29 = v13[9];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v33 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v13[10];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = type metadata accessor for AppPunchout();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_12:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
LABEL_13:
  v43 = v13[11];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  v48 = *(int *)(a3 + 20);
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = *(void **)&a1[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;

  *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
  if (a1 != a2)
  {
    v52 = *(int *)(a3 + 24);
    v53 = &a1[v52];
    v54 = &a2[v52];
    outlined destroy of Font.Design?((uint64_t)&a1[v52], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v56 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v53, v54, v56);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthDataLogSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4AEB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for HealthDataLogModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for HealthDataLogSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4AEC28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for HealthDataLogModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for HealthDataLogSnippet()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for HealthDataLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t GenericQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for GenericQueryModel);
}

uint64_t GenericQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for GenericQuerySnippet() + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for GenericQueryModel);
}

uint64_t type metadata accessor for GenericQuerySnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenericQuerySnippet;
  if (!type metadata singleton initialization cache for GenericQuerySnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GenericQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Snippet;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t *v43;
  void (*v44)(char *, char *, uint64_t);
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(unint64_t, char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  int *Model;
  char *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;

  v2 = v1;
  v157 = a1;
  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v145 = *(_QWORD *)(v148 - 8);
  MEMORY[0x24BDAC7A8](v148);
  v144 = (char *)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v149 = *(_QWORD *)(v4 - 8);
  v150 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v146 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v147 = (char *)&v121 - v7;
  v136 = type metadata accessor for SingleDataPointView();
  MEMORY[0x24BDAC7A8](v136);
  v135 = (uint64_t *)((char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v132 = type metadata accessor for MultipleDataPointView();
  MEMORY[0x24BDAC7A8](v132);
  v131 = (uint64_t *)((char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Snippet = type metadata accessor for GenericQuerySnippet();
  v139 = *(_QWORD *)(Snippet - 8);
  v11 = MEMORY[0x24BDAC7A8](Snippet);
  v143 = (uint64_t)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v130 = (uint64_t)&v121 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v134 = (uint64_t)&v121 - v16;
  v142 = v17;
  MEMORY[0x24BDAC7A8](v15);
  v133 = (uint64_t)&v121 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v19);
  v152 = (uint64_t)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for SnippetHeaderView();
  v137 = *(_QWORD *)(v151 - 8);
  v21 = MEMORY[0x24BDAC7A8](v151);
  v153 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = v22;
  MEMORY[0x24BDAC7A8](v21);
  v156 = (uint64_t)&v121 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v121 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for AppPunchout();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v140 = v30;
  v141 = (char *)&v121 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v155 = (char *)&v121 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v121 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for SpeakableString();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v121 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for GenericQueryModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v2 + Model[10], (uint64_t)v34, &demangling cache variable for type metadata for SpeakableString?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v38, v34, v35);
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v2, (uint64_t)v26, &demangling cache variable for type metadata for AppPunchout?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      v39 = &demangling cache variable for type metadata for AppPunchout?;
      v40 = (uint64_t)v26;
      goto LABEL_5;
    }
    v129 = v38;
    v126 = v35;
    v127 = v28;
    v44 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v128 = v27;
    v44(v155, v26, v27);
    v45 = Model;
    v46 = v152;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v2 + Model[18], v152, &demangling cache variable for type metadata for SnippetHeaderModel?);
    v47 = v151;
    v48 = (uint64_t)v153;
    v49 = (uint64_t *)&v153[*(int *)(v151 + 20)];
    *v49 = swift_getKeyPath();
    v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    v50 = (uint64_t *)(v48 + *(int *)(v47 + 24));
    *v50 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?(v46, v48);
    outlined init with take of GenericMedCompletedLogSnippet(v48, v156, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    v51 = v2 + v45[5];
    v52 = *(_BYTE *)(v51 + 8);
    v125 = v36;
    v124 = (void (*)(unint64_t, char *, uint64_t))v44;
    if ((v52 & 1) == 0 && *(double *)v51 > 0.0)
    {
      v53 = (uint64_t *)(v2 + v45[13]);
      v54 = v53[1];
      v55 = v133;
      outlined init with copy of GenericMedCompletedLogModel(v2, v133, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
      if (v54)
      {
        v56 = *(_QWORD *)(v55 + v45[12] + 8);
        swift_bridgeObjectRetain();
        outlined destroy of GenericMedCompletedLogModel(v55, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
        swift_bridgeObjectRelease();
        v57 = v134;
        outlined init with copy of GenericMedCompletedLogModel(v2, v134, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
        if (v56)
        {
          outlined destroy of GenericMedCompletedLogModel(v57, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
LABEL_14:
          v136 = *(_QWORD *)v51;
          LODWORD(v135) = *(unsigned __int8 *)(v51 + 8);
          v61 = v45[12];
          v62 = (uint64_t *)(v2 + v45[11]);
          v63 = v62[1];
          v130 = *v62;
          v133 = *v53;
          v64 = v45;
          v65 = v53[1];
          v66 = *(_QWORD *)(v2 + v61 + 8);
          v151 = *(_QWORD *)(v2 + v61);
          v67 = v64[16];
          v68 = (uint64_t *)(v2 + v64[15]);
          v69 = v68[1];
          v134 = *v68;
          v70 = *(_QWORD *)(v2 + v67 + 8);
          v152 = *(_QWORD *)(v2 + v67);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v122 = SpeakableString.print.getter();
          v121 = v71;
          v72 = (int **)(v2 + v64[17]);
          v73 = (unint64_t)v72[1];
          Model = *v72;
          type metadata accessor for Context();
          lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
          swift_bridgeObjectRetain();
          v74 = EnvironmentObject.init()();
          v75 = v131;
          *v131 = v74;
          v75[1] = v76;
          v77 = (int *)v132;
          v78 = (uint64_t *)((char *)v75 + *(int *)(v132 + 20));
          *v78 = swift_getKeyPath();
          swift_storeEnumTagMultiPayload();
          v79 = (char *)v75 + v77[6];
          *(_QWORD *)v79 = v136;
          v79[8] = (char)v135;
          v80 = (uint64_t *)((char *)v75 + v77[7]);
          *v80 = v130;
          v80[1] = v63;
          v81 = (uint64_t *)((char *)v75 + v77[8]);
          *v81 = v133;
          v81[1] = v65;
          v82 = (uint64_t *)((char *)v75 + v77[9]);
          *v82 = v151;
          v82[1] = v66;
          v83 = (uint64_t *)((char *)v75 + v77[10]);
          *v83 = v134;
          v83[1] = v69;
          v84 = (uint64_t *)((char *)v75 + v77[11]);
          v48 = (uint64_t)v153;
          *v84 = v152;
          v84[1] = v70;
          v85 = (uint64_t *)((char *)v75 + v77[12]);
          v86 = v121;
          *v85 = v122;
          v85[1] = v86;
          *((_BYTE *)v75 + v77[13]) = 1;
          v87 = 0x65676172657641;
          if (v73)
            v87 = (uint64_t)Model;
          v88 = 0xE700000000000000;
          if (v73)
            v88 = v73;
          v89 = (uint64_t *)((char *)v75 + v77[14]);
          *v89 = v87;
          v89[1] = v88;
          lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type MultipleDataPointView and conformance MultipleDataPointView, (uint64_t (*)(uint64_t))type metadata accessor for MultipleDataPointView, (uint64_t)&protocol conformance descriptor for MultipleDataPointView);
          v90 = AnyView.init<A>(_:)();
          v43 = v157;
LABEL_27:
          v102 = v139;
          v103 = v138;
          v104 = v137;
          v157 = (uint64_t *)v90;
          outlined init with copy of GenericMedCompletedLogModel(v156, v48, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          v105 = (*(unsigned __int8 *)(v104 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
          v106 = (v103 + v105 + 7) & 0xFFFFFFFFFFFFFFF8;
          v107 = swift_allocObject();
          outlined init with take of GenericMedCompletedLogSnippet(v48, v107 + v105, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          *(_QWORD *)(v107 + v106) = v90;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
          lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>, MEMORY[0x24BDF5420]);
          v108 = v144;
          SnippetBody.init(content:)();
          v109 = v143;
          outlined init with copy of GenericMedCompletedLogModel(v2, v143, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
          v110 = v127;
          v111 = v141;
          v112 = v128;
          (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v141, v155, v128);
          v113 = (*(unsigned __int8 *)(v102 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
          v114 = (v142 + *(unsigned __int8 *)(v110 + 80) + v113) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
          v115 = swift_allocObject();
          outlined init with take of GenericMedCompletedLogSnippet(v109, v115 + v113, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
          v124(v115 + v114, v111, v112);
          v116 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, MEMORY[0x24BEADBF8]);
          v117 = v147;
          v118 = v148;
          View.componentTapped(isNavigation:perform:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v145 + 8))(v108, v118);
          v120 = v149;
          v119 = v150;
          (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v146, v117, v150);
          v158 = v118;
          v159 = v116;
          swift_getOpaqueTypeConformance2();
          v42 = AnyView.init<A>(_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v120 + 8))(v117, v119);
          outlined destroy of GenericMedCompletedLogModel(v156, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          (*(void (**)(char *, uint64_t))(v110 + 8))(v155, v112);
          result = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v129, v126);
          goto LABEL_28;
        }
      }
      else
      {
        outlined destroy of GenericMedCompletedLogModel(v55, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
        v57 = v134;
        outlined init with copy of GenericMedCompletedLogModel(v2, v134, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
      }
      v58 = *(_QWORD *)(v57 + v45[15] + 8);
      v59 = v130;
      outlined init with take of GenericMedCompletedLogSnippet(v57, v130, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
      if (v58)
      {
        v60 = *(_QWORD *)(v59 + v45[11] + 8);
        outlined destroy of GenericMedCompletedLogModel(v59, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
        if (v60)
          goto LABEL_14;
      }
      else
      {
        outlined destroy of GenericMedCompletedLogModel(v59, (uint64_t (*)(_QWORD))type metadata accessor for GenericQuerySnippet);
      }
    }
    v91 = (uint64_t *)(v2 + v45[14]);
    v92 = v91[1];
    if (v92)
    {
      v152 = *v91;
      v93 = v92;
      v43 = v157;
    }
    else
    {
      v94 = (uint64_t *)(v2 + v45[15]);
      v93 = v94[1];
      if (v93)
      {
        v43 = v157;
      }
      else
      {
        v94 = (uint64_t *)(v2 + v45[11]);
        v93 = v94[1];
        v43 = v157;
        if (!v93)
        {
          v42 = AnyView.init<A>(_:)();
          outlined destroy of GenericMedCompletedLogModel(v156, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          (*(void (**)(char *, uint64_t))(v127 + 8))(v155, v128);
          result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v129, v126);
          goto LABEL_28;
        }
      }
      v152 = *v94;
      swift_bridgeObjectRetain();
    }
    v95 = (uint64_t **)(v2 + Model[16]);
    v96 = (uint64_t)v95[1];
    v157 = *v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v97 = SpeakableString.print.getter();
    v99 = v98;
    v100 = v135;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v2, (uint64_t)v135 + *(int *)(v136 + 32), &demangling cache variable for type metadata for AppPunchout?);
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    *v100 = EnvironmentObject.init()();
    v100[1] = v101;
    v100[2] = v152;
    v100[3] = v93;
    v100[4] = (uint64_t)v157;
    v100[5] = v96;
    v100[6] = v97;
    v100[7] = v99;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SingleDataPointView and conformance SingleDataPointView, (uint64_t (*)(uint64_t))type metadata accessor for SingleDataPointView, (uint64_t)"ٍn\a8m");
    v90 = AnyView.init<A>(_:)();
    goto LABEL_27;
  }
  v39 = &demangling cache variable for type metadata for SpeakableString?;
  v40 = (uint64_t)v34;
LABEL_5:
  outlined destroy of Font.Design?(v40, v39);
  result = AnyView.init<A>(_:)();
  v42 = result;
  v43 = v157;
LABEL_28:
  *v43 = v42;
  return result;
}

uint64_t specialized closure #1 in GenericQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD v23[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v23 - v11;
  v13 = type metadata accessor for SnippetHeaderView();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v23 - v17;
  outlined init with copy of GenericMedCompletedLogModel(a1, (uint64_t)v23 - v17, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v23[1] = a2;
  View.componentSpacing(top:bottom:)();
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v19(v10, v12, v6);
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v16, a3, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v19((char *)(a3 + *(int *)(v20 + 48)), v10, v6);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v12, v6);
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v21(v10, v6);
  return outlined destroy of GenericMedCompletedLogModel((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
}

void closure #2 in GenericQuerySnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for GenericQuerySnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_24A4AFDE4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + v2;
  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v0 + v2, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = v3 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in GenericQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for SnippetHeaderView() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #1 in GenericQuerySnippet.body.getter(v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_24A4AFFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Model;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t Snippet;

  Snippet = type metadata accessor for GenericQuerySnippet();
  v1 = *(_QWORD *)(Snippet - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for AppPunchout();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = v0 + ((v2 + 16) & ~v2);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + 16) & ~v2), v3);
  Model = type metadata accessor for GenericQueryModel();
  v8 = v6 + *(int *)(Model + 40);
  v9 = type metadata accessor for SpeakableString();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v6 + *(int *)(Model + 72);
  v12 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((((v2 + 16) & ~v2) + v14 + v5) & ~v5), v3);
  return swift_deallocObject();
}

void partial apply for closure #2 in GenericQuerySnippet.body.getter()
{
  uint64_t v0;
  uint64_t Snippet;
  unint64_t v2;

  Snippet = type metadata accessor for GenericQuerySnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in GenericQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in GenericQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Model;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for AppPunchout();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    Model = (int *)type metadata accessor for GenericQueryModel();
    v11 = Model[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = Model[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = Model[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v20 = Model[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = Model[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v24[8] = v25[8];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v26 = Model[10];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for SpeakableString();
    v30 = *(_QWORD *)(v29 - 8);
    v80 = v30;
    v81 = v29;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = Model[11];
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v83 = v34[1];
    *v33 = *v34;
    v33[1] = v83;
    v35 = Model[12];
    v36 = (uint64_t *)((char *)a1 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = Model[13];
    v40 = (uint64_t *)((char *)a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = Model[14];
    v44 = (uint64_t *)((char *)a1 + v43);
    v45 = (uint64_t *)((char *)a2 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = Model[15];
    v48 = (uint64_t *)((char *)a1 + v47);
    v49 = (uint64_t *)((char *)a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = Model[16];
    v52 = (uint64_t *)((char *)a1 + v51);
    v53 = (uint64_t *)((char *)a2 + v51);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = Model[17];
    v56 = (uint64_t *)((char *)a1 + v55);
    v57 = (uint64_t *)((char *)a2 + v55);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    v59 = Model[18];
    __dst = (char *)a1 + v59;
    v60 = (char *)a2 + v59;
    v61 = type metadata accessor for SnippetHeaderModel();
    v79 = *(_QWORD *)(v61 - 8);
    v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v82(v60, 1, v61))
    {
      v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(__dst, v60, v81);
      v63 = *(int *)(v61 + 20);
      v64 = &__dst[v63];
      v65 = &v60[v63];
      v66 = *((_QWORD *)v65 + 1);
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *((_QWORD *)v64 + 1) = v66;
      v67 = *(int *)(v61 + 24);
      v68 = &__dst[v67];
      v69 = &v60[v67];
      v70 = *((_QWORD *)v69 + 1);
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *((_QWORD *)v68 + 1) = v70;
      v71 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v71(__dst, 0, 1, v61);
    }
    v72 = *(int *)(a3 + 20);
    v73 = (uint64_t *)((char *)a1 + v72);
    v74 = (char *)a2 + v72;
    v76 = *(void **)v74;
    v75 = *((_QWORD *)v74 + 1);
    *v73 = v76;
    v73[1] = v75;
    v77 = v76;
  }
  return a1;
}

void destroy for GenericQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Model;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  Model = type metadata accessor for GenericQueryModel();
  v7 = a1 + *(int *)(Model + 40);
  v8 = type metadata accessor for SpeakableString();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(Model + 72);
  v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

char *initializeWithCopy for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *Model;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  char *__dst;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  Model = (int *)type metadata accessor for GenericQueryModel();
  v9 = Model[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = Model[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = Model[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = Model[10];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v78 = v28;
  v79 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = Model[11];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v81 = *((_QWORD *)v32 + 1);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = v81;
  v33 = Model[12];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  v37 = Model[13];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = v40;
  v41 = Model[14];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = Model[15];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *((_QWORD *)v47 + 1);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *((_QWORD *)v46 + 1) = v48;
  v49 = Model[16];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = v52;
  v53 = Model[17];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = v56;
  v57 = Model[18];
  __dst = &a1[v57];
  v58 = &a2[v57];
  v59 = type metadata accessor for SnippetHeaderModel();
  v77 = *(_QWORD *)(v59 - 8);
  v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v80(v58, 1, v59))
  {
    v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(__dst, v58, v79);
    v61 = *(int *)(v59 + 20);
    v62 = &__dst[v61];
    v63 = &v58[v61];
    v64 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    v65 = *(int *)(v59 + 24);
    v66 = &__dst[v65];
    v67 = &v58[v65];
    v68 = *((_QWORD *)v67 + 1);
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *((_QWORD *)v66 + 1) = v68;
    v69 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v69(__dst, 0, 1, v59);
  }
  v70 = *(int *)(a3 + 20);
  v71 = &a1[v70];
  v72 = &a2[v70];
  v74 = *(void **)v72;
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = v74;
  *((_QWORD *)v71 + 1) = v73;
  v75 = v74;
  return a1;
}

char *assignWithCopy for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for GenericQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  v16 = Model[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = Model[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = Model[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  v28 = Model[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v31;
  v32 = Model[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for SpeakableString();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  v41 = Model[11];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = Model[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = Model[13];
  v48 = &a1[v47];
  v49 = &a2[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = Model[14];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = Model[15];
  v54 = &a1[v53];
  v55 = &a2[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = Model[16];
  v57 = &a1[v56];
  v58 = &a2[v56];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59 = Model[17];
  v60 = &a1[v59];
  v61 = &a2[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = Model[18];
  v63 = &a1[v62];
  v64 = &a2[v62];
  v65 = type metadata accessor for SnippetHeaderModel();
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v63, v64, v35);
      v85 = *(int *)(v65 + 20);
      v86 = &v63[v85];
      v87 = &v64[v85];
      *(_QWORD *)v86 = *(_QWORD *)v87;
      *((_QWORD *)v86 + 1) = *((_QWORD *)v87 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v88 = *(int *)(v65 + 24);
      v89 = &v63[v88];
      v90 = &v64[v88];
      *(_QWORD *)v89 = *(_QWORD *)v90;
      *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v63, v64, v35);
  v70 = *(int *)(v65 + 20);
  v71 = &v63[v70];
  v72 = &v64[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
  v73 = *(int *)(v65 + 24);
  v74 = &v63[v73];
  v75 = &v64[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
  v76 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v63, 0, 1, v65);
LABEL_19:
  v78 = *(int *)(a3 + 20);
  v79 = &a1[v78];
  v80 = &a2[v78];
  v81 = *(void **)&a1[v78];
  v82 = *(void **)v80;
  *(_QWORD *)v79 = *(_QWORD *)v80;
  v83 = v82;

  *((_QWORD *)v79 + 1) = *((_QWORD *)v80 + 1);
  return a1;
}

char *initializeWithTake for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for GenericQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = Model[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = Model[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = Model[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = Model[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = Model[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for SpeakableString();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  *(_OWORD *)&a1[Model[16]] = *(_OWORD *)&a2[Model[16]];
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  v31 = Model[18];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = type metadata accessor for SnippetHeaderModel();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v32, v33, v28);
    *(_OWORD *)&v32[*(int *)(v34 + 20)] = *(_OWORD *)&v33[*(int *)(v34 + 20)];
    *(_OWORD *)&v32[*(int *)(v34 + 24)] = *(_OWORD *)&v33[*(int *)(v34 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void *v83;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for GenericQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = Model[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = Model[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v25[8] = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = Model[10];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for SpeakableString();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  v36 = Model[11];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  v41 = Model[12];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  v46 = Model[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  v51 = Model[14];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v55 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = v55;
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  v56 = Model[15];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  v61 = Model[16];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease();
  v66 = Model[17];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v70 = *(_QWORD *)v68;
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = v70;
  *((_QWORD *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  v71 = Model[18];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v74 = type metadata accessor for SnippetHeaderModel();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  v77 = v76(v72, 1, v74);
  v78 = v76(v73, 1, v74);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v72, v73, v30);
      v85 = *(int *)(v74 + 20);
      v86 = &v72[v85];
      v87 = &v73[v85];
      v89 = *(_QWORD *)v87;
      v88 = *((_QWORD *)v87 + 1);
      *(_QWORD *)v86 = v89;
      *((_QWORD *)v86 + 1) = v88;
      swift_bridgeObjectRelease();
      v90 = *(int *)(v74 + 24);
      v91 = &v72[v90];
      v92 = &v73[v90];
      v94 = *(_QWORD *)v92;
      v93 = *((_QWORD *)v92 + 1);
      *(_QWORD *)v91 = v94;
      *((_QWORD *)v91 + 1) = v93;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v78)
  {
LABEL_18:
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v72, v73, v30);
  *(_OWORD *)&v72[*(int *)(v74 + 20)] = *(_OWORD *)&v73[*(int *)(v74 + 20)];
  *(_OWORD *)&v72[*(int *)(v74 + 24)] = *(_OWORD *)&v73[*(int *)(v74 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
LABEL_19:
  v80 = *(int *)(a3 + 20);
  v81 = &a1[v80];
  v82 = &a2[v80];
  v83 = *(void **)&a1[v80];
  *(_QWORD *)v81 = *(_QWORD *)v82;

  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericQuerySnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4B17B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model;
  uint64_t v7;
  unint64_t v9;
  int v10;

  Model = type metadata accessor for GenericQueryModel();
  v7 = *(_QWORD *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Model);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericQuerySnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4B1844(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GenericQueryModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for GenericQuerySnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GenericQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A4B192C()
{
  return MEMORY[0x24BDF4768];
}

uint64_t GenericBinaryButtonSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 GenericBinaryButtonSnippet.init(model:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  __n128 v9;
  __int128 v10;

  v9 = (__n128)a1[1];
  v10 = *a1;
  v3 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  v5 = *((_BYTE *)a1 + 48);
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  v6 = EnvironmentObject.init()();
  result = v9;
  *(_OWORD *)a2 = v10;
  *(__n128 *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  *(_BYTE *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v8;
  return result;
}

uint64_t GenericBinaryButtonSnippet.body.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;

  v1 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v1;
  v8 = *(_QWORD *)(v0 + 64);
  v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  v3 = swift_allocObject();
  v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(v0 + 64);
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 32) = v5;
  outlined retain of GenericBinaryButtonSnippet((uint64_t)v7);
  type metadata accessor for BinaryButtonView();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BinaryButtonView and conformance BinaryButtonView, (uint64_t (*)(uint64_t))MEMORY[0x24BEADCE8], MEMORY[0x24BEADCC8]);
  return SnippetBody.init(content:)();
}

uint64_t closure #1 in GenericBinaryButtonSnippet.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[5];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];

  v2 = type metadata accessor for ButtonItemButtonStyle.Role();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonRole(_:)>>.0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_OWORD *)(a1 + 16);
  v38 = *(_OWORD *)a1;
  v39 = v14;
  v40 = *(_OWORD *)(a1 + 32);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v42[0] = v40;
    v35 = v40;
    v31 = v10;
    v32 = v11;
    v21 = swift_allocObject();
    v22 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v21 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v21 + 64) = v22;
    *(_QWORD *)(v21 + 80) = *(_QWORD *)(a1 + 64);
    v23 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v21 + 32) = v23;
    outlined retain of String((uint64_t)v42);
    outlined retain of GenericBinaryButtonSnippet(a1);
    lazy protocol witness table accessor for type String and conformance String();
    Button<>.init<A>(_:action:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEAD980], v2);
    v24 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>, MEMORY[0x24BDF43B8]);
    View.buttonRole(_:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v19 = v33;
    v20 = *(void (**)(char *, uint64_t))(v33 + 8);
    v20(v8, v6);
    *(_QWORD *)&v35 = v6;
    *((_QWORD *)&v35 + 1) = v24;
    swift_getOpaqueTypeConformance2();
    v25 = v31;
    v18 = View.eraseToAnyView()();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v25);
  }
  else
  {
    v42[0] = v40;
    v35 = v40;
    v15 = swift_allocObject();
    v16 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v15 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v15 + 64) = v16;
    *(_QWORD *)(v15 + 80) = *(_QWORD *)(a1 + 64);
    v17 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v15 + 32) = v17;
    outlined retain of GenericBinaryButtonSnippet(a1);
    outlined retain of String((uint64_t)v42);
    lazy protocol witness table accessor for type String and conformance String();
    Button<>.init<A>(_:action:)();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>, MEMORY[0x24BDF43B8]);
    v18 = View.eraseToAnyView()();
    v19 = v33;
    v20 = *(void (**)(char *, uint64_t))(v33 + 8);
    v20(v8, v6);
  }
  v41 = v39;
  v35 = v39;
  v26 = swift_allocObject();
  v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v26 + 64) = v27;
  *(_QWORD *)(v26 + 80) = *(_QWORD *)(a1 + 64);
  v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v26 + 32) = v28;
  outlined retain of GenericBinaryButtonSnippet(a1);
  outlined retain of String((uint64_t)&v41);
  lazy protocol witness table accessor for type String and conformance String();
  Button<>.init<A>(_:action:)();
  v36 = MEMORY[0x24BDF4788];
  v37 = MEMORY[0x24BEAD940];
  *(_QWORD *)&v35 = v18;
  v34[3] = v6;
  v34[4] = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>, MEMORY[0x24BEAD928]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 16))(boxed_opaque_existential_1, v8, v6);
  BinaryButtonView.init(primaryButton:secondaryButton:)();
  return ((uint64_t (*)(char *, uint64_t))v20)(v8, v6);
}

uint64_t partial apply for closure #1 in GenericBinaryButtonSnippet.body.getter()
{
  uint64_t v0;

  return closure #1 in GenericBinaryButtonSnippet.body.getter(v0 + 16);
}

uint64_t outlined retain of GenericBinaryButtonSnippet(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in GenericBinaryButtonSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (AnyHashable, Any)(v6, (uint64_t)v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in GenericBinaryButtonSnippet.body.getter(uint64_t a1, char a2)
{
  void *v2;
  uint64_t inited;
  id v5;
  uint64_t result;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_24A4E95E0;
    v5 = v2;
    AnyHashable.init<A>(_:)();
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1328];
    *(_BYTE *)(inited + 72) = a2;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    dispatch thunk of Context.perform(directInvocation:payload:)();

    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of GenericBinaryButtonSnippet(a1);
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance GenericBinaryButtonSnippet()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;

  v1 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v1;
  v8 = *(_QWORD *)(v0 + 64);
  v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  v3 = swift_allocObject();
  v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(v0 + 64);
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 32) = v5;
  outlined retain of GenericBinaryButtonSnippet((uint64_t)v7);
  type metadata accessor for BinaryButtonView();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BinaryButtonView and conformance BinaryButtonView, (uint64_t (*)(uint64_t))MEMORY[0x24BEADCE8], MEMORY[0x24BEADCC8]);
  return SnippetBody.init(content:)();
}

void destroy for GenericBinaryButtonSnippet(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(void **)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v7;
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(void **)(a1 + 56);
  v5 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonSnippet()
{
  return &type metadata for GenericBinaryButtonSnippet;
}

uint64_t sub_24A4B251C()
{
  return lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<BinaryButtonView> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<BinaryButtonView>, MEMORY[0x24BEADBF8]);
}

uint64_t partial apply for closure #2 in closure #1 in GenericBinaryButtonSnippet.body.getter()
{
  uint64_t v0;

  return closure #1 in closure #1 in GenericBinaryButtonSnippet.body.getter(v0 + 16, 1);
}

uint64_t outlined retain of String(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #3 in closure #1 in GenericBinaryButtonSnippet.body.getter()
{
  uint64_t v0;

  return closure #1 in closure #1 in GenericBinaryButtonSnippet.body.getter(v0 + 16, 0);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t outlined init with copy of (AnyHashable, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x24BD11124](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t BloodPressureLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*BloodPressureLogModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for BloodPressureLogModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BloodPressureLogModel;
  if (!type metadata singleton initialization cache for BloodPressureLogModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BloodPressureLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.dateLabel.modify())()
{
  type metadata accessor for BloodPressureLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.dataLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.dataLabel.modify())()
{
  type metadata accessor for BloodPressureLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.loggedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.loggedLabel.modify())()
{
  type metadata accessor for BloodPressureLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BloodPressureLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t BloodPressureLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BloodPressureLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 32), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*BloodPressureLogModel.snippetHeaderModel.modify())()
{
  type metadata accessor for BloodPressureLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.timeLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.timeLabel.modify())()
{
  type metadata accessor for BloodPressureLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.unitLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.unitLabel.modify())()
{
  type metadata accessor for BloodPressureLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.init(url:date:dateLabel:systolic:diastolic:loggedLabel:snippetHeaderModel:unitLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8@<D0>, uint64_t a9@<D1>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v69 = a6;
  v73 = a1;
  v74 = a5;
  v65 = a3;
  v66 = a4;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v14);
  v72 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v16);
  v70 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v64 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v58 - v21;
  swift_bridgeObjectRelease();
  v23 = type metadata accessor for AppPunchout();
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v68 = v23;
  v67(a7, 1, 1);
  v24 = (int *)type metadata accessor for BloodPressureLogModel();
  v25 = (uint64_t *)(a7 + v24[5]);
  *v25 = 0;
  v25[1] = 0;
  v26 = (uint64_t *)(a7 + v24[6]);
  *v26 = 0;
  v26[1] = 0;
  v27 = (_QWORD *)(a7 + v24[7]);
  *v27 = 0;
  v27[1] = 0;
  v28 = a7 + v24[8];
  v29 = type metadata accessor for SnippetHeaderModel();
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v62 = v29;
  v61(v28, 1, 1);
  v30 = (uint64_t *)(a7 + v24[9]);
  *v30 = 0;
  v30[1] = 0;
  v31 = (_QWORD *)(a7 + v24[10]);
  *v31 = 0;
  v31[1] = 0;
  v63 = v31;
  v71 = a2;
  dispatch thunk of DialogCalendar.dateDescriptive.getter();
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  v34 = v60(v22, 1, v32);
  v59 = v33;
  if (v34 == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v22, &demangling cache variable for type metadata for SpeakableString?);
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v37 = SpeakableString.print.getter();
    v38 = v33;
    v40 = v39;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v32);
    v75 = v37;
    v76 = v40;
    lazy protocol witness table accessor for type String and conformance String();
    v35 = StringProtocol.capitalized.getter();
    v36 = v41;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *v25 = v35;
  v25[1] = v36;
  v42 = BloodPressureLogModel.createBloodPressureLabel(systolic:diastolic:)(a8, 0, a9, 0);
  v44 = v43;
  swift_bridgeObjectRelease();
  *v26 = v42;
  v26[1] = v44;
  swift_bridgeObjectRelease();
  v45 = v66;
  *v27 = v65;
  v27[1] = v45;
  outlined destroy of Font.Design?(v28, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v46 = v74;
  outlined init with copy of GenericMedCompletedLogModel(v74, v28, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v61)(v28, 0, 1, v62);
  v47 = (uint64_t)v64;
  dispatch thunk of DialogCalendar.timeDescriptive.getter();
  if (v60((char *)v47, 1, v32) == 1)
  {
    outlined destroy of Font.Design?(v47, &demangling cache variable for type metadata for SpeakableString?);
    v48 = 0;
    v49 = 0;
  }
  else
  {
    v48 = SpeakableString.print.getter();
    v49 = v50;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v47, v32);
  }
  swift_bridgeObjectRelease();
  *v30 = v48;
  v30[1] = v49;
  v51 = v63;
  swift_bridgeObjectRelease();
  *v51 = v69;
  v51[1] = a10;
  v52 = type metadata accessor for URL();
  v53 = *(_QWORD *)(v52 - 8);
  v55 = (uint64_t)v72;
  v54 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v72, v73, v52);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v52);
  v56 = (uint64_t)v70;
  SleepQueryModel.createAppPunchout(url:)(v55);
  swift_release();
  outlined destroy of GenericMedCompletedLogModel(v46, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v52);
  outlined destroy of Font.Design?(v55, &demangling cache variable for type metadata for URL?);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v67)(v56, 0, 1, v68);
  return outlined assign with take of AppPunchout?(v56, a7, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureLogModel.createBloodPressureLabel(systolic:diastolic:)(uint64_t result, char a2, uint64_t a3, char a4)
{
  uint64_t v6;
  double v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;

  if ((a2 & 1) != 0)
    goto LABEL_18;
  v6 = result;
  v7 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v7 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v10 = swift_allocObject();
    v11 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v10 + 16) = xmmword_24A4E95E0;
    v12 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 64) = v12;
    *(_QWORD *)(v10 + 32) = v6;
    v13 = String.init(format:arguments:)();
    *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
    if ((a4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
  if ((~result & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  *(double *)&result = COERCE_DOUBLE(dispatch thunk of CustomStringConvertible.description.getter());
  v13 = result;
  if ((a4 & 1) != 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    *(double *)&result = 0.0;
    return result;
  }
LABEL_10:
  if (*(double *)&a3 <= -9.22337204e18 || *(double *)&a3 >= 9.22337204e18 || trunc(*(double *)&a3) != *(double *)&a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v17 = swift_allocObject();
    v18 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v17 + 16) = xmmword_24A4E95E0;
    v19 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v17 + 56) = v18;
    *(_QWORD *)(v17 + 64) = v19;
    *(double *)(v17 + 32) = *(double *)&a3;
    v14 = String.init(format:arguments:)();
    v16 = v20;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if ((~a3 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v14 = dispatch thunk of CustomStringConvertible.description.getter();
  v16 = v15;
LABEL_20:
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = 47;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v14;
  v22._object = v16;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t BloodPressureLogModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4B3320 + 4 * byte_24A4EA950[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A4B3320()
{
  return 0x6562614C65746164;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BloodPressureLogModel.CodingKeys()
{
  unsigned __int8 *v0;

  return BloodPressureLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BloodPressureLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized BloodPressureLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance BloodPressureLogModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BloodPressureLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BloodPressureLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t BloodPressureLogModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BloodPressureLogModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for BloodPressureLogModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BloodPressureLogModel.CodingKeys, &unk_251BD3778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BloodPressureLogModel.CodingKeys, &unk_251BD3778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BloodPressureLogModel.CodingKeys, &unk_251BD3778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BloodPressureLogModel.CodingKeys, &unk_251BD3778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

uint64_t BloodPressureLogModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  char *v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;

  v57 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BloodPressureLogModel.CodingKeys>);
  v60 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v67 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for BloodPressureLogModel();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AppPunchout();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v59 = v11;
  v12(v10, 1, 1);
  v13 = &v10[v8[5]];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = (uint64_t *)&v10[v8[6]];
  *v14 = 0;
  v14[1] = 0;
  v15 = &v10[v8[7]];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v16 = (uint64_t)&v10[v8[8]];
  v17 = type metadata accessor for SnippetHeaderModel();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v58 = v16;
  v18(v16, 1, 1, v17);
  v19 = &v10[v8[9]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v20 = v8[10];
  v65 = v10;
  v21 = &v10[v20];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = a1;
  v23 = a1[3];
  v64 = v22;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();
  v24 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24)
  {
    v31 = (uint64_t)v65;
  }
  else
  {
    v66 = v13;
    v55 = v15;
    v56 = v17;
    v53 = v21;
    v54 = v19;
    v25 = v60;
    v26 = (uint64_t)v61;
    v74 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v28 = v62;
    v27 = v63;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v30 = (uint64_t)v28;
    v31 = (uint64_t)v65;
    outlined assign with take of AppPunchout?(v30, (uint64_t)v65, &demangling cache variable for type metadata for AppPunchout?);
    v73 = 1;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v34 = v33;
    v35 = (uint64_t *)v66;
    swift_bridgeObjectRelease();
    *v35 = v32;
    v35[1] = v34;
    v72 = 2;
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v38 = v37;
    swift_bridgeObjectRelease();
    *v14 = v36;
    v14[1] = v38;
    v71 = 3;
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v41 = v40;
    v42 = (uint64_t *)v55;
    swift_bridgeObjectRelease();
    *v42 = v39;
    v42[1] = v41;
    v70 = 4;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v43 = v67;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v26, v58, &demangling cache variable for type metadata for SnippetHeaderModel?);
    v69 = 5;
    v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v46 = v45;
    v47 = (uint64_t *)v54;
    swift_bridgeObjectRelease();
    *v47 = v44;
    v47[1] = v46;
    v68 = 6;
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v43, v27);
    v51 = (uint64_t *)v53;
    swift_bridgeObjectRelease();
    *v51 = v48;
    v51[1] = v50;
    outlined init with copy of GenericMedCompletedLogModel(v31, v57, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureLogModel);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
  return outlined destroy of GenericMedCompletedLogModel(v31, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureLogModel);
}

uint64_t base witness table accessor for Decodable in BloodPressureLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BloodPressureLogModel and conformance BloodPressureLogModel, (uint64_t (*)(uint64_t))type metadata accessor for BloodPressureLogModel, (uint64_t)&protocol conformance descriptor for BloodPressureLogModel);
}

uint64_t base witness table accessor for Encodable in BloodPressureLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BloodPressureLogModel and conformance BloodPressureLogModel, (uint64_t (*)(uint64_t))type metadata accessor for BloodPressureLogModel, (uint64_t)&protocol conformance descriptor for BloodPressureLogModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BloodPressureLogModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BloodPressureLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BloodPressureLogModel(_QWORD *a1)
{
  return BloodPressureLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[7];
    v20 = a3[8];
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    __dst = (char *)a1 + v20;
    v24 = (char *)a2 + v20;
    v25 = type metadata accessor for SnippetHeaderModel();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(__dst, v24, v29);
      v30 = *(int *)(v25 + 20);
      v31 = &__dst[v30];
      v32 = &v24[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(int *)(v25 + 24);
      v35 = &__dst[v34];
      v36 = &v24[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(__dst, 0, 1, v25);
    }
    v39 = a3[9];
    v40 = a3[10];
    v41 = (uint64_t *)((char *)a1 + v39);
    v42 = (uint64_t *)((char *)a2 + v39);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = (uint64_t *)((char *)a1 + v40);
    v45 = (uint64_t *)((char *)a2 + v40);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for BloodPressureLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *__dst;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = a3[7];
  v18 = a3[8];
  v19 = &a1[v17];
  v20 = &a2[v17];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  __dst = &a1[v18];
  v22 = &a2[v18];
  v23 = type metadata accessor for SnippetHeaderModel();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(__dst, v22, v27);
    v28 = *(int *)(v23 + 20);
    v29 = &__dst[v28];
    v30 = &v22[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = *(int *)(v23 + 24);
    v33 = &__dst[v32];
    v34 = &v22[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(__dst, 0, 1, v23);
  }
  v37 = a3[9];
  v38 = a3[10];
  v39 = &a1[v37];
  v40 = &a2[v37];
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  v42 = &a1[v38];
  v43 = &a2[v38];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SnippetHeaderModel();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v45 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v22, v23, v45);
      v46 = *(int *)(v24 + 20);
      v47 = &v22[v46];
      v48 = &v23[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v49 = *(int *)(v24 + 24);
      v50 = &v22[v49];
      v51 = &v23[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v29 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v22, v23, v29);
  v30 = *(int *)(v24 + 20);
  v31 = &v22[v30];
  v32 = &v23[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  v33 = *(int *)(v24 + 24);
  v34 = &v22[v33];
  v35 = &v23[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36(v22, 0, 1, v24);
LABEL_13:
  v38 = a3[9];
  v39 = &a1[v38];
  v40 = &a2[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[10];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  return a1;
}

char *assignWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v27 = a3[8];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for SnippetHeaderModel();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      v48 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v28, v29, v48);
      v49 = *(int *)(v30 + 20);
      v50 = &v28[v49];
      v51 = &v29[v49];
      v53 = *(_QWORD *)v51;
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = v53;
      *((_QWORD *)v50 + 1) = v52;
      swift_bridgeObjectRelease();
      v54 = *(int *)(v30 + 24);
      v55 = &v28[v54];
      v56 = &v29[v54];
      v58 = *(_QWORD *)v56;
      v57 = *((_QWORD *)v56 + 1);
      *(_QWORD *)v55 = v58;
      *((_QWORD *)v55 + 1) = v57;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  v35 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v28, v29, v35);
  *(_OWORD *)&v28[*(int *)(v30 + 20)] = *(_OWORD *)&v29[*(int *)(v30 + 20)];
  *(_OWORD *)&v28[*(int *)(v30 + 24)] = *(_OWORD *)&v29[*(int *)(v30 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_13:
  v37 = a3[9];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v41 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v42 = a3[10];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureLogModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4B4924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for BloodPressureLogModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4B49F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for BloodPressureLogModel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for BloodPressureLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BloodPressureLogModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24A4B4C30 + 4 * byte_24A4EA95C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24A4B4C64 + 4 * byte_24A4EA957[v4]))();
}

uint64_t sub_24A4B4C64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4B4C6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4B4C74);
  return result;
}

uint64_t sub_24A4B4C80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4B4C88);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24A4B4C8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4B4C94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for BloodPressureLogModel.CodingKeys()
{
  return &unk_251BD3778;
}

uint64_t specialized BloodPressureLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t CycleTrackingLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for CycleTrackingLogModel);
}

uint64_t CycleTrackingLogSnippet.buttonColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for ColorScheme();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - v5;
  type metadata accessor for CycleTrackingLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x24BDEB408], v0);
  v7 = static ColorScheme.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if ((v7 & 1) != 0)
    return static Color.green.getter();
  else
    return static Color.blue.getter();
}

uint64_t type metadata accessor for CycleTrackingLogSnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CycleTrackingLogSnippet;
  if (!type metadata singleton initialization cache for CycleTrackingLogSnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CycleTrackingLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t *v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[2];
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  void (*v152)(unint64_t, char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;

  v200 = a1;
  v2 = type metadata accessor for CycleTrackingLogSnippet();
  v176 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v177 = v3;
  v178 = (uint64_t)v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  v181 = *(_QWORD *)(v4 - 8);
  v182 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v179 = (char *)v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v184 = *(_QWORD *)(v6 - 8);
  v185 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v180 = (char *)v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v183 = (char *)v142 - v9;
  v172 = type metadata accessor for SeparatorStyle();
  v170 = *(_QWORD *)(v172 - 8);
  MEMORY[0x24BDAC7A8](v172);
  v167 = (char *)v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for FactItemHeroNumberView();
  v166 = *(_QWORD *)(v169 - 8);
  MEMORY[0x24BDAC7A8](v169);
  v165 = (char *)v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v171 = *(_QWORD *)(v173 - 8);
  MEMORY[0x24BDAC7A8](v173);
  v168 = (char *)v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v193 = *(_QWORD *)(v13 - 8);
  v194 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v174 = v15;
  v175 = (char *)v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v192 = (char *)v142 - v16;
  v159 = type metadata accessor for StatusIndicatorView.IndicatorType();
  v157 = *(_QWORD *)(v159 - 8);
  MEMORY[0x24BDAC7A8](v159);
  v158 = (char *)v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for StatusIndicatorView();
  v190 = *(_QWORD *)(v18 - 8);
  v191 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v187 = (char *)v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = v20;
  MEMORY[0x24BDAC7A8](v19);
  v198 = (char *)v142 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v22);
  v155 = (uint64_t)v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v24);
  v156 = (char *)v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for SnippetHeaderView();
  v160 = *(_QWORD *)(v154 - 8);
  v26 = MEMORY[0x24BDAC7A8](v154);
  v186 = (uint64_t)v142 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = v27;
  MEMORY[0x24BDAC7A8](v26);
  v197 = (uint64_t)v142 - v28;
  v29 = type metadata accessor for Font.TextStyle();
  v188 = *(_QWORD *)(v29 - 8);
  v189 = v29;
  MEMORY[0x24BDAC7A8](v29);
  v196 = (char *)v142 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v31);
  v195 = (char *)v142 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)v142 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for AppPunchout();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v162 = v39;
  v163 = (char *)v142 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v199 = (char *)v142 - v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v42 = MEMORY[0x24BDAC7A8](v41);
  v153 = (uint64_t)v142 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v142 - v44;
  v46 = type metadata accessor for SnippetHeaderModel();
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)v142 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = (int *)type metadata accessor for CycleTrackingLogModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + v50[8], (uint64_t)v45, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v151 = v47;
  v152 = (void (*)(unint64_t, char *, uint64_t))v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v45, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v45, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    v51 = v1;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v35, &demangling cache variable for type metadata for AppPunchout?);
    v52 = (uint64_t)v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
    {
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
      outlined destroy of Font.Design?((uint64_t)v35, &demangling cache variable for type metadata for AppPunchout?);
    }
    else
    {
      v53 = v36;
      v54 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      v55 = v199;
      v54(v199, v35, v53);
      v56 = (uint64_t *)(v51 + v50[7]);
      v57 = (char *)v56[1];
      if (v57
        && (v58 = (uint64_t *)(v51 + v50[6]), v58[1])
        && (v59 = v58[1], v60 = (uint64_t *)(v51 + v50[5]), (v61 = (void *)v60[1]) != 0))
      {
        v147 = *v56;
        v149 = *v58;
        v150 = v61;
        v148 = *v60;
        v62 = v51 + v50[9];
        v63 = v195;
        outlined init with copy of Environment<ColorSchemeContrast>.Content(v62, (uint64_t)v195, &demangling cache variable for type metadata for URL?);
        v64 = type metadata accessor for URL();
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v63, 1, v64) != 1)
        {
          swift_bridgeObjectRetain();
          v143 = v59;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of Font.Design?((uint64_t)v63, &demangling cache variable for type metadata for URL?);
          (*(void (**)(char *, _QWORD, uint64_t))(v188 + 104))(v196, *MEMORY[0x24BDF1888], v189);
          v68 = v153;
          outlined init with copy of GenericMedCompletedLogModel(v52, v153, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
          (*(void (**)(uint64_t, _QWORD, uint64_t, void (*)(unint64_t, char *, uint64_t)))(v151 + 56))(v68, 0, 1, v152);
          v69 = v154;
          v70 = *(int *)(v154 + 20);
          v152 = (void (*)(unint64_t, char *, uint64_t))v54;
          v71 = (uint64_t *)(v186 + v70);
          v195 = v57;
          v72 = v186;
          *v71 = swift_getKeyPath();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
          swift_storeEnumTagMultiPayload();
          v73 = (uint64_t *)(v72 + *(int *)(v69 + 24));
          *v73 = swift_getKeyPath();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
          swift_storeEnumTagMultiPayload();
          outlined init with take of SnippetHeaderModel?(v68, v72);
          outlined init with take of GenericMedCompletedLogSnippet(v72, v197, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v74._countAndFlagsBits = 0;
          v74._object = (void *)0xE000000000000000;
          v151 = v53;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v74);
          v75._countAndFlagsBits = v147;
          v75._object = v195;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v75);
          swift_bridgeObjectRelease();
          v76._countAndFlagsBits = 0;
          v76._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v76);
          LocalizedStringKey.init(stringInterpolation:)();
          v77 = Text.init(_:tableName:bundle:comment:)();
          v146 = v37;
          v154 = v77;
          v79 = v78;
          v195 = v80;
          LOBYTE(v69) = v81 & 1;
          v147 = v51;
          v82 = *MEMORY[0x24BDF1670];
          v83 = type metadata accessor for Font.Design();
          v84 = *(_QWORD *)(v83 - 8);
          v85 = v155;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 104))(v155, v82, v83);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v85, 0, 1, v83);
          static Font.system(_:design:weight:)();
          outlined destroy of Font.Design?(v85, &demangling cache variable for type metadata for Font.Design?);
          v86 = v154;
          LOBYTE(v85) = v69;
          v87 = Text.font(_:)();
          v89 = v88;
          v153 = v52;
          v91 = v90;
          v142[1] = v92;
          swift_release();
          LOBYTE(v82) = v91 & 1;
          outlined consume of Text.Storage(v86, v79, v85);
          swift_bridgeObjectRelease();
          v93 = Text.bold()();
          v155 = v94;
          v195 = v95;
          LODWORD(v86) = v96 & 1;
          outlined consume of Text.Storage(v87, v89, v82);
          swift_bridgeObjectRelease();
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v97._countAndFlagsBits = 0;
          v97._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v97);
          v98._countAndFlagsBits = v148;
          v98._object = v150;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v98);
          swift_bridgeObjectRelease();
          v99._countAndFlagsBits = 0;
          v99._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v99);
          LocalizedStringKey.init(stringInterpolation:)();
          v100 = (void *)Text.init(_:tableName:bundle:comment:)();
          v154 = v101;
          v156 = v102;
          LODWORD(v87) = v103 & 1;
          v218 = MEMORY[0x24BEE0D00];
          v219 = MEMORY[0x24BEAE5C0];
          v216 = v149;
          v217 = v143;
          (*(void (**)(char *, _QWORD, uint64_t))(v157 + 104))(v158, *MEMORY[0x24BEADF80], v159);
          StatusIndicatorView.init(message:type:showIndicator:)();
          v104 = MEMORY[0x24BDF1FA0];
          v105 = MEMORY[0x24BEAD6B8];
          v218 = MEMORY[0x24BDF1FA0];
          v219 = MEMORY[0x24BEAD6B8];
          v106 = swift_allocObject();
          v215 = 0;
          v216 = v106;
          v145 = v93;
          v107 = v155;
          *(_QWORD *)(v106 + 16) = v93;
          *(_QWORD *)(v106 + 24) = v107;
          v144 = v86;
          *(_BYTE *)(v106 + 32) = v86;
          *(_QWORD *)(v106 + 40) = v195;
          v213 = 0u;
          v214 = 0u;
          v212 = 0;
          v210 = 0u;
          v211 = 0u;
          v208 = v104;
          v209 = v105;
          v108 = swift_allocObject();
          v207 = v108;
          v150 = v100;
          v109 = v154;
          *(_QWORD *)(v108 + 16) = v100;
          *(_QWORD *)(v108 + 24) = v109;
          LODWORD(v148) = v87;
          *(_BYTE *)(v108 + 32) = v87;
          *(_QWORD *)(v108 + 40) = v156;
          v206 = 0;
          v204 = 0u;
          v205 = 0u;
          v203 = 0;
          v201 = 0u;
          v202 = 0u;
          outlined copy of Text.Storage(v93, v107, v86);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage((uint64_t)v100, v109, v87);
          swift_bridgeObjectRetain();
          v110 = v165;
          FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
          v111 = v170;
          v112 = v167;
          v113 = v172;
          (*(void (**)(char *, _QWORD, uint64_t))(v170 + 104))(v167, *MEMORY[0x24BEAB510], v172);
          v114 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
          v116 = v168;
          v115 = v169;
          View.separators(_:isOverride:)();
          (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v113);
          (*(void (**)(char *, uint64_t))(v166 + 8))(v110, v115);
          v216 = v115;
          v217 = v114;
          swift_getOpaqueTypeConformance2();
          v117 = v192;
          v118 = v173;
          View.componentSpacing(top:bottom:)();
          (*(void (**)(char *, uint64_t))(v171 + 8))(v116, v118);
          v119 = v186;
          outlined init with copy of GenericMedCompletedLogModel(v197, v186, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          v120 = v193;
          v121 = v194;
          v122 = v175;
          (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v175, v117, v194);
          v123 = v190;
          (*(void (**)(char *, char *, uint64_t))(v190 + 16))(v187, v198, v191);
          v124 = (*(unsigned __int8 *)(v160 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
          v125 = (v161 + *(unsigned __int8 *)(v120 + 80) + v124) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
          v126 = (v174 + *(unsigned __int8 *)(v123 + 80) + v125) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
          v127 = swift_allocObject();
          outlined init with take of GenericMedCompletedLogSnippet(v119, v127 + v124, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          (*(void (**)(unint64_t, char *, uint64_t))(v120 + 32))(v127 + v125, v122, v121);
          v128 = v191;
          (*(void (**)(unint64_t, char *, uint64_t))(v123 + 32))(v127 + v126, v187, v191);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
          lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>, MEMORY[0x24BDF5420]);
          v129 = v179;
          SnippetBody.init(content:)();
          v130 = v178;
          outlined init with copy of GenericMedCompletedLogModel(v147, v178, (uint64_t (*)(_QWORD))type metadata accessor for CycleTrackingLogSnippet);
          v131 = v146;
          v132 = v163;
          v133 = v151;
          (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v163, v199, v151);
          v134 = (*(unsigned __int8 *)(v176 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80);
          v135 = (v177 + *(unsigned __int8 *)(v131 + 80) + v134) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
          v136 = swift_allocObject();
          outlined init with take of GenericMedCompletedLogSnippet(v130, v136 + v134, (uint64_t (*)(_QWORD))type metadata accessor for CycleTrackingLogSnippet);
          v152(v136 + v135, v132, v133);
          v137 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>, MEMORY[0x24BEADBF8]);
          v139 = v182;
          v138 = v183;
          View.componentTapped(isNavigation:perform:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v181 + 8))(v129, v139);
          v141 = v184;
          v140 = v185;
          (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v180, v138, v185);
          v216 = v139;
          v217 = v137;
          swift_getOpaqueTypeConformance2();
          v67 = AnyView.init<A>(_:)();
          outlined consume of Text.Storage((uint64_t)v150, v154, v148);
          swift_bridgeObjectRelease();
          outlined consume of Text.Storage(v145, v155, v144);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v141 + 8))(v138, v140);
          (*(void (**)(char *, uint64_t))(v193 + 8))(v192, v194);
          (*(void (**)(char *, uint64_t))(v190 + 8))(v198, v128);
          outlined destroy of GenericMedCompletedLogModel(v197, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          (*(void (**)(char *, uint64_t))(v188 + 8))(v196, v189);
          (*(void (**)(char *, uint64_t))(v146 + 8))(v199, v133);
          result = outlined destroy of GenericMedCompletedLogModel(v153, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
          v65 = v200;
          goto LABEL_12;
        }
        (*(void (**)(char *, uint64_t))(v37 + 8))(v55, v53);
        outlined destroy of GenericMedCompletedLogModel(v52, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
        outlined destroy of Font.Design?((uint64_t)v63, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v55, v53);
        outlined destroy of GenericMedCompletedLogModel(v52, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
      }
    }
  }
  v65 = v200;
  result = AnyView.init<A>(_:)();
  v67 = result;
LABEL_12:
  *v65 = v67;
  return result;
}

void closure #2 in CycleTrackingLogSnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for CycleTrackingLogSnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t CycleTrackingLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for CycleTrackingLogModel);
  v3 = type metadata accessor for CycleTrackingLogSnippet();
  v4 = (uint64_t *)(a2 + *(int *)(v3 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v4 = EnvironmentObject.init()();
  v4[1] = v5;
  v6 = (uint64_t *)(a2 + *(int *)(v3 + 24));
  *v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24A4B6340()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A4B6370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v4 = *(_QWORD *)(v21 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for StatusIndicatorView();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v0 + ((v3 + 16) & ~v3);
  v10 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + ((v3 + 16) & ~v3), v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = v9 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = v9 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  v16 = (((v3 + 16) & ~v3) + v20 + v5) & ~v5;
  v17 = (v16 + v19 + v8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v16, v21);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v17, v6);
  return swift_deallocObject();
}

uint64_t sub_24A4B6578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for CycleTrackingLogSnippet();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v18 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v0 + ((v3 + 16) & ~v3);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + 16) & ~v3), v4);
  v8 = type metadata accessor for CycleTrackingLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v7 + *(int *)(v8 + 32);
  v10 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = v7 + *(int *)(v8 + 36);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = v7 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + ((((v3 + 16) & ~v3) + v18 + v6) & ~v6), v4);
  return swift_deallocObject();
}

void partial apply for closure #2 in CycleTrackingLogSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for CycleTrackingLogSnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in CycleTrackingLogSnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in CycleTrackingLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for CycleTrackingLogSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for AppPunchout();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    v10 = (int *)type metadata accessor for CycleTrackingLogModel();
    v11 = v10[5];
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = v10[6];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v10[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v10[8];
    __dst = (char *)a1 + v23;
    v24 = (char *)a2 + v23;
    v25 = type metadata accessor for SnippetHeaderModel();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(__dst, v24, v29);
      v30 = *(int *)(v25 + 20);
      v31 = &__dst[v30];
      v32 = &v24[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(int *)(v25 + 24);
      v35 = &__dst[v34];
      v36 = &v24[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(__dst, 0, 1, v25);
    }
    v39 = v10[9];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = type metadata accessor for URL();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = *(int *)(a3 + 20);
    v46 = *(int *)(a3 + 24);
    v47 = (uint64_t *)((char *)a1 + v45);
    v48 = (char *)a2 + v45;
    v50 = *(void **)v48;
    v49 = *((_QWORD *)v48 + 1);
    *v47 = v50;
    v47[1] = v49;
    v51 = (uint64_t *)((char *)a1 + v46);
    v52 = (uint64_t *)((char *)a2 + v46);
    v53 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v54 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v51, v52, v54);
    }
    else
    {
      *v51 = *v52;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CycleTrackingLogSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = type metadata accessor for CycleTrackingLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(v6 + 32);
  v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = a1 + *(int *)(v6 + 36);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);

  v13 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v14 = type metadata accessor for ColorScheme();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

char *initializeWithCopy for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  char *v50;
  id v51;
  uint64_t v52;
  char *__dst;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  v8 = (int *)type metadata accessor for CycleTrackingLogModel();
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = v8[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = v8[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = v8[8];
  __dst = &a1[v21];
  v22 = &a2[v21];
  v23 = type metadata accessor for SnippetHeaderModel();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(__dst, v22, v27);
    v28 = *(int *)(v23 + 20);
    v29 = &__dst[v28];
    v30 = &v22[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = *(int *)(v23 + 24);
    v33 = &__dst[v32];
    v34 = &v22[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(__dst, 0, 1, v23);
  }
  v37 = v8[9];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = type metadata accessor for URL();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v43 = *(int *)(a3 + 20);
  v44 = *(int *)(a3 + 24);
  v45 = &a1[v43];
  v46 = &a2[v43];
  v48 = *(void **)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  v49 = &a1[v44];
  v50 = &a2[v44];
  v51 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v52 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v49, v50, v52);
  }
  else
  {
    *(_QWORD *)v49 = *(_QWORD *)v50;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for CycleTrackingLogModel();
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v12[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v12[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = v12[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for SnippetHeaderModel();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v30 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v23, v24, v30);
      v31 = *(int *)(v25 + 20);
      v32 = &v23[v31];
      v33 = &v24[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      v34 = *(int *)(v25 + 24);
      v35 = &v23[v34];
      v36 = &v24[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  v59 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 24))(v23, v24, v59);
  v60 = *(int *)(v25 + 20);
  v61 = &v23[v60];
  v62 = &v24[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = *(int *)(v25 + 24);
  v64 = &v23[v63];
  v65 = &v24[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  v39 = v12[9];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = type metadata accessor for URL();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v42);
LABEL_18:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 24))(v40, v41, v42);
LABEL_19:
  v48 = *(int *)(a3 + 20);
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = *(void **)&a1[v48];
  v52 = *(void **)&a2[v48];
  *(_QWORD *)v49 = v52;
  v53 = v52;

  *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
  if (a1 != a2)
  {
    v54 = *(int *)(a3 + 24);
    v55 = &a1[v54];
    v56 = &a2[v54];
    outlined destroy of Font.Design?((uint64_t)&a1[v54], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v57 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
    }
    else
    {
      *(_QWORD *)v55 = *(_QWORD *)v56;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for CycleTrackingLogModel();
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  v10 = v9[8];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for CycleTrackingLogModel();
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  v18 = v12[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  v23 = v12[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  v28 = v12[8];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for SnippetHeaderModel();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      v36 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v29, v30, v36);
      *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
      *(_OWORD *)&v29[*(int *)(v31 + 24)] = *(_OWORD *)&v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v57 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 40))(v29, v30, v57);
  v58 = *(int *)(v31 + 20);
  v59 = &v29[v58];
  v60 = &v30[v58];
  v62 = *(_QWORD *)v60;
  v61 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v59 = v62;
  *((_QWORD *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  v63 = *(int *)(v31 + 24);
  v64 = &v29[v63];
  v65 = &v30[v63];
  v67 = *(_QWORD *)v65;
  v66 = *((_QWORD *)v65 + 1);
  *(_QWORD *)v64 = v67;
  *((_QWORD *)v64 + 1) = v66;
  swift_bridgeObjectRelease();
LABEL_13:
  v38 = v12[9];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for URL();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
LABEL_18:
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v39, v40, v41);
LABEL_19:
  v47 = *(int *)(a3 + 20);
  v48 = &a1[v47];
  v49 = &a2[v47];
  v50 = *(void **)&a1[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;

  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  if (a1 != a2)
  {
    v51 = *(int *)(a3 + 24);
    v52 = &a1[v51];
    v53 = &a2[v51];
    outlined destroy of Font.Design?((uint64_t)&a1[v51], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v55 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v52, v53, v55);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CycleTrackingLogSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4B7B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for CycleTrackingLogModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for CycleTrackingLogSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4B7C08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for CycleTrackingLogModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CycleTrackingLogSnippet()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CycleTrackingLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t BloodPressureQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureQueryModel);
}

uint64_t BloodPressureQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for BloodPressureQuerySnippet() + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureQueryModel);
}

uint64_t type metadata accessor for BloodPressureQuerySnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BloodPressureQuerySnippet;
  if (!type metadata singleton initialization cache for BloodPressureQuerySnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BloodPressureQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Snippet;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t Model;
  uint64_t *v36;
  void *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(_BYTE *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  void (*v47)(unint64_t, _BYTE *, uint64_t);
  _BYTE *v48;
  _BYTE *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  Swift::String v63;
  Swift::String v64;
  __int128 v65;
  Swift::String v66;
  Swift::String v67;
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  void *v78;
  uint64_t *v79;
  void *v80;
  void (*v81)(_BYTE *, _QWORD, _QWORD *);
  _QWORD *v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(_QWORD, _QWORD);
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  Swift::String v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  _BYTE *v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  _BYTE *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE *v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE v173[4];
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v179;
  void (*v180)(_BYTE *, _QWORD, uint64_t);
  unsigned int v181;
  void *v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  void (*v186)(_BYTE *, _QWORD *);
  uint64_t v187;
  int v188;
  void (*v189)(unint64_t, _BYTE *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  Swift::String v192;
  _BYTE *v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE *v216;
  _QWORD *v217;
  _BYTE *v218;
  _BYTE *v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  Swift::String v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  Swift::String v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;

  v2 = v1;
  v222 = a1;
  Snippet = type metadata accessor for BloodPressureQuerySnippet();
  v205 = *(_QWORD *)(Snippet - 8);
  MEMORY[0x24BDAC7A8](Snippet);
  v206 = v4;
  v207 = &v173[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  v209 = *(_QWORD *)(v212 - 8);
  MEMORY[0x24BDAC7A8](v212);
  v208 = &v173[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v213 = *(_QWORD *)(v6 - 8);
  v214 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v210 = &v173[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v211 = &v173[-v9];
  v10 = type metadata accessor for FactItemHeroNumberView();
  v196 = *(_QWORD *)(v10 - 8);
  v197 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v195 = &v173[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v199 = *(_QWORD *)(v12 - 8);
  v200 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v198 = &v173[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v14);
  v216 = &v173[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v16);
  v217 = (_QWORD *)type metadata accessor for Font.TextStyle();
  v215 = *(v217 - 1);
  v17 = MEMORY[0x24BDAC7A8](v217);
  v194 = &v173[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v218 = &v173[-v19];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v20);
  v22 = &v173[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = type metadata accessor for SnippetHeaderView();
  v201 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v219 = &v173[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v202 = v25;
  MEMORY[0x24BDAC7A8](v24);
  v220 = &v173[-v26];
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v27);
  v29 = &v173[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v221 = type metadata accessor for AppPunchout();
  v30 = *(_QWORD *)(v221 - 8);
  v31 = MEMORY[0x24BDAC7A8](v221);
  v203 = v32;
  v204 = &v173[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v31);
  v34 = &v173[-v33];
  Model = type metadata accessor for BloodPressureQueryModel();
  v36 = (uint64_t *)(v1 + *(int *)(Model + 88));
  v37 = (void *)v36[1];
  if (!v37)
    goto LABEL_5;
  v38 = (int *)Model;
  v39 = v1 + *(int *)(Model + 84);
  if (!*(_QWORD *)(v39 + 8))
    goto LABEL_5;
  v192._object = *(void **)(v39 + 8);
  v193 = v34;
  v40 = *v36;
  v41 = *(_QWORD *)v39;
  v191 = v40;
  v192._countAndFlagsBits = v41;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v29, &demangling cache variable for type metadata for AppPunchout?);
  v42 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48);
  v43 = v30;
  v44 = v221;
  if (v42(v29, 1, v221) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v29, &demangling cache variable for type metadata for AppPunchout?);
LABEL_5:
    result = AnyView.init<A>(_:)();
    v46 = result;
    goto LABEL_6;
  }
  v190 = v43;
  v47 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v43 + 32);
  v48 = v193;
  v189 = v47;
  v47((unint64_t)v193, v29, v44);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + v38[23], (uint64_t)v22, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v49 = v219;
  v50 = (uint64_t *)&v219[*(int *)(v23 + 20)];
  *v50 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v51 = (uint64_t *)&v49[*(int *)(v23 + 24)];
  *v51 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?((uint64_t)v22, (uint64_t)v49);
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v49, (uint64_t)v220, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v52 = (uint64_t *)(v1 + v38[13]);
  v53 = v52[1];
  if (v53
    && (v54 = (uint64_t *)(v1 + v38[14]), (v55 = (void *)v54[1]) != 0)
    && (v56 = (uint64_t *)(v1 + v38[15]), (v57 = v56[1]) != 0)
    && (v58 = (_QWORD *)(v1 + v38[16]), v58[1]))
  {
    v59 = *v52;
    v60 = *v54;
    v61 = *v56;
    v62 = (_BYTE *)*v58;
    v217 = (_QWORD *)v58[1];
    v218 = v62;
    *(_QWORD *)&v233 = v59;
    *((_QWORD *)&v233 + 1) = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63._countAndFlagsBits = 9666786;
    v63._object = (void *)0xA300000000000000;
    String.append(_:)(v63);
    v64._countAndFlagsBits = v60;
    v64._object = v55;
    String.append(_:)(v64);
    v65 = v233;
    *(_QWORD *)&v233 = v61;
    *((_QWORD *)&v233 + 1) = v57;
    swift_bridgeObjectRetain();
    v66._countAndFlagsBits = 9666786;
    v66._object = (void *)0xA300000000000000;
    String.append(_:)(v66);
    v67._object = v217;
    v67._countAndFlagsBits = (uint64_t)v218;
    String.append(_:)(v67);
    v68 = v233;
    v69 = v38[19];
    v70 = (uint64_t *)(v1 + v38[18]);
    v71 = *v70;
    v72 = v70[1];
    v187 = v2;
    v73 = v2 + v69;
    v74 = *(_QWORD *)(v2 + v69);
    v75 = *(_QWORD *)(v73 + 8);
    *(_QWORD *)&v233 = v71;
    *((_QWORD *)&v233 + 1) = v72;
    v234 = v65;
    v235 = 0u;
    v236 = 0u;
    *(_QWORD *)&v237 = v74;
    *((_QWORD *)&v237 + 1) = v75;
    v238 = v68;
    v239 = 0u;
    v240 = 0u;
    *(_QWORD *)&v241 = v191;
    *((_QWORD *)&v241 + 1) = v37;
    v242 = v192;
    v231 = v241;
    v232 = v192;
    v227 = v237;
    v228 = v68;
    v223 = v233;
    v224 = v65;
    v229 = 0u;
    v230 = 0u;
    v225 = 0u;
    v226 = 0u;
    lazy protocol witness table accessor for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v76 = View.eraseToAnyView()();
    outlined release of MultipleDataPointWithSubTypesView(&v233);
  }
  else
  {
    v77 = (uint64_t *)(v1 + v38[11]);
    v78 = (void *)v77[1];
    if (!v78 || (v79 = (uint64_t *)(v1 + v38[12]), (v80 = (void *)v79[1]) == 0))
    {
      v46 = AnyView.init<A>(_:)();
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v220, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      result = (*(uint64_t (**)(_BYTE *, uint64_t))(v190 + 8))(v48, v221);
      goto LABEL_6;
    }
    v187 = v1;
    v183 = *v77;
    v185 = *v79;
    v184 = v80;
    v182 = v78;
    v81 = *(void (**)(_BYTE *, _QWORD, _QWORD *))(v215 + 104);
    v82 = v217;
    v81(v218, *MEMORY[0x24BDF1888], v217);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v83._countAndFlagsBits = 0;
    v83._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v83);
    v84._countAndFlagsBits = v191;
    v84._object = v37;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v84);
    swift_bridgeObjectRelease();
    v85._countAndFlagsBits = 0;
    v85._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v85);
    LocalizedStringKey.init(stringInterpolation:)();
    v86 = Text.init(_:tableName:bundle:comment:)();
    v191 = v87;
    v89 = v88 & 1;
    v90 = v194;
    v81(v194, *MEMORY[0x24BDF1870], v82);
    v181 = *MEMORY[0x24BDF1670];
    v91 = v181;
    v92 = type metadata accessor for Font.Design();
    v93 = *(_QWORD *)(v92 - 8);
    v94 = *(void (**)(_QWORD, _QWORD))(v93 + 104);
    v179 = v92;
    v180 = (void (*)(_BYTE *, _QWORD, uint64_t))v94;
    v95 = v216;
    v96 = v91;
    v97 = v92;
    v94(v216, v96);
    v178 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v93 + 56);
    v178(v95, 0, 1, v97);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v95, &demangling cache variable for type metadata for Font.Design?);
    v186 = *(void (**)(_BYTE *, _QWORD *))(v215 + 8);
    v186(v90, v82);
    v98 = v86;
    v99 = v191;
    v100 = Text.font(_:)();
    v102 = v101;
    LOBYTE(v86) = v103;
    v215 = v104;
    swift_release();
    outlined consume of Text.Storage(v98, v99, v89);
    swift_bridgeObjectRelease();
    LODWORD(v233) = static HierarchicalShapeStyle.secondary.getter();
    v105 = Text.foregroundStyle<A>(_:)();
    v107 = v106;
    LOBYTE(v98) = v108 & 1;
    outlined consume of Text.Storage(v100, v102, v86 & 1);
    swift_bridgeObjectRelease();
    v194 = (_BYTE *)Text.bold()();
    v191 = v109;
    v215 = v110;
    v188 = v111 & 1;
    outlined consume of Text.Storage(v105, v107, v98);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v112._countAndFlagsBits = 0;
    v112._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v112);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v192);
    swift_bridgeObjectRelease();
    v113._countAndFlagsBits = 0;
    v113._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v113);
    LocalizedStringKey.init(stringInterpolation:)();
    v114 = Text.init(_:tableName:bundle:comment:)();
    v175 = v115;
    v176 = v114;
    v177 = v116;
    v174 = v117 & 1;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v118._countAndFlagsBits = 0;
    v118._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v118);
    v119._object = v182;
    v119._countAndFlagsBits = v183;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v119);
    v120._countAndFlagsBits = 47;
    v120._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v120);
    v121._object = v184;
    v121._countAndFlagsBits = v185;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v121);
    v122._countAndFlagsBits = 0;
    v122._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v122);
    LocalizedStringKey.init(stringInterpolation:)();
    v123 = Text.init(_:tableName:bundle:comment:)();
    v125 = v124;
    LOBYTE(v86) = v126 & 1;
    v127 = v216;
    v128 = v179;
    v180(v216, v181, v179);
    v178(v127, 0, 1, v128);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v127, &demangling cache variable for type metadata for Font.Design?);
    v129 = v123;
    v130 = Text.font(_:)();
    v132 = v131;
    LOBYTE(v123) = v133;
    swift_release();
    LOBYTE(v99) = v123 & 1;
    outlined consume of Text.Storage(v129, v125, v86);
    swift_bridgeObjectRelease();
    v134 = (_BYTE *)Text.bold()();
    v216 = v134;
    v136 = v135;
    v192._countAndFlagsBits = v137;
    v192._object = v135;
    v138 = v137;
    LOBYTE(v123) = v139 & 1;
    outlined consume of Text.Storage(v130, v132, v99);
    swift_bridgeObjectRelease();
    v140 = MEMORY[0x24BDF1FA0];
    v141 = MEMORY[0x24BEAD6B8];
    *((_QWORD *)&v234 + 1) = MEMORY[0x24BDF1FA0];
    *(_QWORD *)&v235 = MEMORY[0x24BEAD6B8];
    v142 = swift_allocObject();
    *(_QWORD *)&v233 = v142;
    *(_QWORD *)(v142 + 16) = v134;
    *(_QWORD *)(v142 + 24) = v136;
    *(_BYTE *)(v142 + 32) = v123;
    *(_QWORD *)(v142 + 40) = v138;
    *((_QWORD *)&v224 + 1) = v140;
    *(_QWORD *)&v225 = v141;
    v143 = swift_allocObject();
    *(_QWORD *)&v223 = v143;
    v144 = v194;
    v145 = v191;
    *(_QWORD *)(v143 + 16) = v194;
    *(_QWORD *)(v143 + 24) = v145;
    LOBYTE(v138) = v188;
    *(_BYTE *)(v143 + 32) = v188;
    *(_QWORD *)(v143 + 40) = v215;
    v254 = 0;
    v252 = 0u;
    v253 = 0u;
    v250 = v140;
    v251 = v141;
    v146 = swift_allocObject();
    v248 = 0;
    v249 = v146;
    v148 = v175;
    v147 = v176;
    *(_QWORD *)(v146 + 16) = v176;
    *(_QWORD *)(v146 + 24) = v148;
    LOBYTE(v136) = v174;
    *(_BYTE *)(v146 + 32) = v174;
    *(_QWORD *)(v146 + 40) = v177;
    v246 = 0u;
    v247 = 0u;
    v245 = 0;
    v243 = 0u;
    v244 = 0u;
    outlined copy of Text.Storage((uint64_t)v216, (uint64_t)v192._object, v123);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage((uint64_t)v144, v145, v138);
    swift_bridgeObjectRetain();
    v149 = v147;
    v150 = v148;
    outlined copy of Text.Storage(v147, v148, (char)v136);
    swift_bridgeObjectRetain();
    v151 = v195;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    v152 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
    v153 = v197;
    v154 = v198;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(_BYTE *, uint64_t))(v196 + 8))(v151, v153);
    *(_QWORD *)&v233 = v153;
    *((_QWORD *)&v233 + 1) = v152;
    swift_getOpaqueTypeConformance2();
    v155 = v200;
    v76 = View.eraseToAnyView()();
    outlined consume of Text.Storage(v149, v150, (char)v136);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v194, v191, v188);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v216, (uint64_t)v192._object, v123);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v199 + 8))(v154, v155);
    v186(v218, v217);
  }
  v218 = (_BYTE *)v76;
  v156 = v219;
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v220, (uint64_t)v219, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v157 = (*(unsigned __int8 *)(v201 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80);
  v158 = (v202 + v157 + 7) & 0xFFFFFFFFFFFFFFF8;
  v159 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v156, v159 + v157, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  *(_QWORD *)(v159 + v158) = v76;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>, MEMORY[0x24BDF5420]);
  v160 = v208;
  SnippetBody.init(content:)();
  v161 = v207;
  outlined init with copy of GenericMedCompletedLogModel(v187, (uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureQuerySnippet);
  v162 = v190;
  v163 = v204;
  v164 = v221;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v190 + 16))(v204, v193, v221);
  v165 = (*(unsigned __int8 *)(v205 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v205 + 80);
  v166 = (v206 + *(unsigned __int8 *)(v162 + 80) + v165) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
  v167 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v161, v167 + v165, (uint64_t (*)(_QWORD))type metadata accessor for BloodPressureQuerySnippet);
  v189(v167 + v166, v163, v164);
  v168 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>, MEMORY[0x24BEADBF8]);
  v170 = v211;
  v169 = v212;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v209 + 8))(v160, v169);
  v172 = v213;
  v171 = v214;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v213 + 16))(v210, v170, v214);
  *(_QWORD *)&v233 = v169;
  *((_QWORD *)&v233 + 1) = v168;
  swift_getOpaqueTypeConformance2();
  v46 = AnyView.init<A>(_:)();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v172 + 8))(v170, v171);
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v220, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v162 + 8))(v193, v164);
LABEL_6:
  *v222 = v46;
  return result;
}

void closure #2 in BloodPressureQuerySnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for BloodPressureQuerySnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_24A4B8EA0()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A4B8ED0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + v2;
  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v0 + v2, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = v3 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A4B9050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Model;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t Snippet;

  Snippet = type metadata accessor for BloodPressureQuerySnippet();
  v1 = *(_QWORD *)(Snippet - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v15 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for AppPunchout();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = v0 + ((v2 + 16) & ~v2);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + 16) & ~v2), v3);
  Model = type metadata accessor for BloodPressureQueryModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v6 + *(int *)(Model + 80);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v6 + *(int *)(Model + 92);
  v12 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((((v2 + 16) & ~v2) + v15 + v5) & ~v5), v3);
  return swift_deallocObject();
}

void partial apply for closure #2 in BloodPressureQuerySnippet.body.getter()
{
  uint64_t v0;
  uint64_t Snippet;
  unint64_t v2;

  Snippet = type metadata accessor for BloodPressureQuerySnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in BloodPressureQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in BloodPressureQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Model;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  void *v94;
  id v95;
  uint64_t v97;
  unsigned int (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for AppPunchout();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    Model = (int *)type metadata accessor for BloodPressureQueryModel();
    v11 = Model[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = Model[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = Model[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v20 = Model[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = Model[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v24[8] = v25[8];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v26 = Model[10];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = Model[11];
    v30 = (uint64_t *)((char *)a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v102 = v31[1];
    *v30 = *v31;
    v30[1] = v102;
    v32 = Model[12];
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v101 = v34[1];
    *v33 = *v34;
    v33[1] = v101;
    v35 = Model[13];
    v36 = (uint64_t *)((char *)a1 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    v100 = v37[1];
    *v36 = *v37;
    v36[1] = v100;
    v38 = Model[14];
    v39 = (uint64_t *)((char *)a1 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    v99 = v40[1];
    *v39 = *v40;
    v39[1] = v99;
    v41 = Model[15];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = Model[16];
    v46 = (uint64_t *)((char *)a1 + v45);
    v47 = (uint64_t *)((char *)a2 + v45);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    v49 = Model[17];
    v50 = (uint64_t *)((char *)a1 + v49);
    v51 = (uint64_t *)((char *)a2 + v49);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = Model[18];
    v54 = (uint64_t *)((char *)a1 + v53);
    v55 = (uint64_t *)((char *)a2 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = Model[19];
    v58 = (uint64_t *)((char *)a1 + v57);
    v59 = (uint64_t *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = Model[20];
    __dst = (char *)a1 + v61;
    v62 = (char *)a2 + v61;
    v63 = type metadata accessor for URL();
    v97 = *(_QWORD *)(v63 - 8);
    v98 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v98(v62, 1, v63))
    {
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(__dst, v62, v63);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(__dst, 0, 1, v63);
    }
    v65 = Model[21];
    v66 = (uint64_t *)((char *)a1 + v65);
    v67 = (uint64_t *)((char *)a2 + v65);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    v69 = Model[22];
    v70 = (uint64_t *)((char *)a1 + v69);
    v71 = (uint64_t *)((char *)a2 + v69);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    v73 = Model[23];
    v74 = (char *)a1 + v73;
    v75 = (char *)a2 + v73;
    v76 = type metadata accessor for SnippetHeaderModel();
    v77 = *(_QWORD *)(v76 - 8);
    v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v78(v75, 1, v76))
    {
      v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      v80 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v74, v75, v80);
      v81 = *(int *)(v76 + 20);
      v82 = &v74[v81];
      v83 = &v75[v81];
      v84 = *((_QWORD *)v83 + 1);
      *(_QWORD *)v82 = *(_QWORD *)v83;
      *((_QWORD *)v82 + 1) = v84;
      v85 = *(int *)(v76 + 24);
      v86 = &v74[v85];
      v87 = &v75[v85];
      v88 = *((_QWORD *)v87 + 1);
      *(_QWORD *)v86 = *(_QWORD *)v87;
      *((_QWORD *)v86 + 1) = v88;
      v89 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v89(v74, 0, 1, v76);
    }
    v90 = *(int *)(a3 + 20);
    v91 = (uint64_t *)((char *)a1 + v90);
    v92 = (char *)a2 + v90;
    v94 = *(void **)v92;
    v93 = *((_QWORD *)v92 + 1);
    *v91 = v94;
    v91[1] = v93;
    v95 = v94;
  }
  return a1;
}

void destroy for BloodPressureQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Model;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  Model = type metadata accessor for BloodPressureQueryModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(Model + 80);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(Model + 92);
  v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

char *initializeWithCopy for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *Model;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v95;
  unsigned int (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *__dst;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  Model = (int *)type metadata accessor for BloodPressureQueryModel();
  v9 = Model[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = Model[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = Model[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = Model[10];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = Model[11];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v100 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = v100;
  v30 = Model[12];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v99 = *((_QWORD *)v32 + 1);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = v99;
  v33 = Model[13];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v98 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v98;
  v36 = Model[14];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v97 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v97;
  v39 = Model[15];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = Model[16];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = v46;
  v47 = Model[17];
  v48 = &a1[v47];
  v49 = &a2[v47];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = Model[18];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *((_QWORD *)v52 + 1) = v54;
  v55 = Model[19];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = *((_QWORD *)v57 + 1);
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = v58;
  v59 = Model[20];
  __dst = &a1[v59];
  v60 = &a2[v59];
  v61 = type metadata accessor for URL();
  v95 = *(_QWORD *)(v61 - 8);
  v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v96(v60, 1, v61))
  {
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(__dst, v60, v61);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(__dst, 0, 1, v61);
  }
  v63 = Model[21];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = *((_QWORD *)v65 + 1);
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *((_QWORD *)v64 + 1) = v66;
  v67 = Model[22];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v70 = *((_QWORD *)v69 + 1);
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *((_QWORD *)v68 + 1) = v70;
  v71 = Model[23];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v74 = type metadata accessor for SnippetHeaderModel();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v76(v73, 1, v74))
  {
    v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    v78 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v72, v73, v78);
    v79 = *(int *)(v74 + 20);
    v80 = &v72[v79];
    v81 = &v73[v79];
    v82 = *((_QWORD *)v81 + 1);
    *(_QWORD *)v80 = *(_QWORD *)v81;
    *((_QWORD *)v80 + 1) = v82;
    v83 = *(int *)(v74 + 24);
    v84 = &v72[v83];
    v85 = &v73[v83];
    v86 = *((_QWORD *)v85 + 1);
    *(_QWORD *)v84 = *(_QWORD *)v85;
    *((_QWORD *)v84 + 1) = v86;
    v87 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v87(v72, 0, 1, v74);
  }
  v88 = *(int *)(a3 + 20);
  v89 = &a1[v88];
  v90 = &a2[v88];
  v92 = *(void **)v90;
  v91 = *((_QWORD *)v90 + 1);
  *(_QWORD *)v89 = v92;
  *((_QWORD *)v89 + 1) = v91;
  v93 = v92;
  return a1;
}

char *assignWithCopy for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *Model;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(char *, uint64_t, uint64_t);
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void *v99;
  void *v100;
  id v101;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  Model = (int *)type metadata accessor for BloodPressureQueryModel();
  v13 = Model[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v16;
  v17 = Model[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v20;
  v21 = Model[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = Model[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  v29 = Model[9];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = v31[8];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v32;
  v33 = Model[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *(_QWORD *)v35;
  v34[8] = v35[8];
  *(_QWORD *)v34 = v36;
  v37 = Model[11];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = Model[12];
  v41 = &a1[v40];
  v42 = &a2[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = Model[13];
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = Model[14];
  v47 = &a1[v46];
  v48 = &a2[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = Model[15];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = Model[16];
  v53 = &a1[v52];
  v54 = &a2[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = Model[17];
  v56 = &a1[v55];
  v57 = &a2[v55];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v58 = Model[18];
  v59 = &a1[v58];
  v60 = &a2[v58];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  *((_QWORD *)v59 + 1) = *((_QWORD *)v60 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = Model[19];
  v62 = &a1[v61];
  v63 = &a2[v61];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  *((_QWORD *)v62 + 1) = *((_QWORD *)v63 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64 = Model[20];
  v65 = &a1[v64];
  v66 = &a2[v64];
  v67 = type metadata accessor for URL();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  v70 = v69(v65, 1, v67);
  v71 = v69(v66, 1, v67);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v66, v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v65, v67);
LABEL_12:
    v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v65, v66, v67);
LABEL_13:
  v73 = Model[21];
  v74 = &a1[v73];
  v75 = &a2[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v76 = Model[22];
  v77 = &a1[v76];
  v78 = &a2[v76];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v79 = Model[23];
  v80 = &a1[v79];
  v81 = &a2[v79];
  v82 = type metadata accessor for SnippetHeaderModel();
  v83 = *(_QWORD *)(v82 - 8);
  v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  v85 = v84(v80, 1, v82);
  v86 = v84(v81, 1, v82);
  if (!v85)
  {
    if (!v86)
    {
      v103 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 24))(v80, v81, v103);
      v104 = *(int *)(v82 + 20);
      v105 = &v80[v104];
      v106 = &v81[v104];
      *(_QWORD *)v105 = *(_QWORD *)v106;
      *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v107 = *(int *)(v82 + 24);
      v108 = &v80[v107];
      v109 = &v81[v107];
      *(_QWORD *)v108 = *(_QWORD *)v109;
      *((_QWORD *)v108 + 1) = *((_QWORD *)v109 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v86)
  {
LABEL_18:
    v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_19;
  }
  v87 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v80, v81, v87);
  v88 = *(int *)(v82 + 20);
  v89 = &v80[v88];
  v90 = &v81[v88];
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
  v91 = *(int *)(v82 + 24);
  v92 = &v80[v91];
  v93 = &v81[v91];
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
  v94 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v94(v80, 0, 1, v82);
LABEL_19:
  v96 = *(int *)(a3 + 20);
  v97 = &a1[v96];
  v98 = &a2[v96];
  v99 = *(void **)&a1[v96];
  v100 = *(void **)v98;
  *(_QWORD *)v97 = *(_QWORD *)v98;
  v101 = v100;

  *((_QWORD *)v97 + 1) = *((_QWORD *)v98 + 1);
  return a1;
}

char *initializeWithTake for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for BloodPressureQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = Model[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = Model[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = Model[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = Model[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = Model[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  *(_OWORD *)&a1[Model[16]] = *(_OWORD *)&a2[Model[16]];
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  *(_OWORD *)&a1[Model[18]] = *(_OWORD *)&a2[Model[18]];
  *(_OWORD *)&a1[Model[19]] = *(_OWORD *)&a2[Model[19]];
  v28 = Model[20];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for URL();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  *(_OWORD *)&a1[Model[21]] = *(_OWORD *)&a2[Model[21]];
  *(_OWORD *)&a1[Model[22]] = *(_OWORD *)&a2[Model[22]];
  v34 = Model[23];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = type metadata accessor for SnippetHeaderModel();
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v35, v36, v40);
    *(_OWORD *)&v35[*(int *)(v37 + 20)] = *(_OWORD *)&v36[*(int *)(v37 + 20)];
    *(_OWORD *)&v35[*(int *)(v37 + 24)] = *(_OWORD *)&v36[*(int *)(v37 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *Model;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(char *, uint64_t, uint64_t);
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  void *v108;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  Model = (int *)type metadata accessor for BloodPressureQueryModel();
  v13 = Model[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = Model[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = Model[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = Model[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = Model[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v26[8] = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v28 = Model[10];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  v31 = Model[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v35 = *(_QWORD *)v33;
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = v35;
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  v36 = Model[12];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  v41 = Model[13];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  v46 = Model[14];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  v51 = Model[15];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v55 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = v55;
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  v56 = Model[16];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  v61 = Model[17];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease();
  v66 = Model[18];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v70 = *(_QWORD *)v68;
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = v70;
  *((_QWORD *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  v71 = Model[19];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v75 = *(_QWORD *)v73;
  v74 = *((_QWORD *)v73 + 1);
  *(_QWORD *)v72 = v75;
  *((_QWORD *)v72 + 1) = v74;
  swift_bridgeObjectRelease();
  v76 = Model[20];
  v77 = &a1[v76];
  v78 = &a2[v76];
  v79 = type metadata accessor for URL();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v77, v79);
LABEL_12:
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v77, v78, v79);
LABEL_13:
  v85 = Model[21];
  v86 = &a1[v85];
  v87 = &a2[v85];
  v89 = *(_QWORD *)v87;
  v88 = *((_QWORD *)v87 + 1);
  *(_QWORD *)v86 = v89;
  *((_QWORD *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  v90 = Model[22];
  v91 = &a1[v90];
  v92 = &a2[v90];
  v94 = *(_QWORD *)v92;
  v93 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v91 = v94;
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  v95 = Model[23];
  v96 = &a1[v95];
  v97 = &a2[v95];
  v98 = type metadata accessor for SnippetHeaderModel();
  v99 = *(_QWORD *)(v98 - 8);
  v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
  v101 = v100(v96, 1, v98);
  v102 = v100(v97, 1, v98);
  if (!v101)
  {
    if (!v102)
    {
      v110 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 40))(v96, v97, v110);
      v111 = *(int *)(v98 + 20);
      v112 = &v96[v111];
      v113 = &v97[v111];
      v115 = *(_QWORD *)v113;
      v114 = *((_QWORD *)v113 + 1);
      *(_QWORD *)v112 = v115;
      *((_QWORD *)v112 + 1) = v114;
      swift_bridgeObjectRelease();
      v116 = *(int *)(v98 + 24);
      v117 = &v96[v116];
      v118 = &v97[v116];
      v120 = *(_QWORD *)v118;
      v119 = *((_QWORD *)v118 + 1);
      *(_QWORD *)v117 = v120;
      *((_QWORD *)v117 + 1) = v119;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v102)
  {
LABEL_18:
    v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    goto LABEL_19;
  }
  v103 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v96, v97, v103);
  *(_OWORD *)&v96[*(int *)(v98 + 20)] = *(_OWORD *)&v97[*(int *)(v98 + 20)];
  *(_OWORD *)&v96[*(int *)(v98 + 24)] = *(_OWORD *)&v97[*(int *)(v98 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
LABEL_19:
  v105 = *(int *)(a3 + 20);
  v106 = &a1[v105];
  v107 = &a2[v105];
  v108 = *(void **)&a1[v105];
  *(_QWORD *)v106 = *(_QWORD *)v107;

  *((_QWORD *)v106 + 1) = *((_QWORD *)v107 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureQuerySnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4BABE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model;
  uint64_t v7;
  unint64_t v9;
  int v10;

  Model = type metadata accessor for BloodPressureQueryModel();
  v7 = *(_QWORD *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Model);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for BloodPressureQuerySnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4BAC78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for BloodPressureQueryModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for BloodPressureQuerySnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BloodPressureQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t GenericBinaryButtonModel.invocationIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.invocationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GenericBinaryButtonModel.invocationIdentifier.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericBinaryButtonModel.primaryButtonLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.primaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*GenericBinaryButtonModel.primaryButtonLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericBinaryButtonModel.secondaryButtonLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.secondaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*GenericBinaryButtonModel.secondaryButtonLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*GenericBinaryButtonModel.isSmartEnabled.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

void __swiftcall GenericBinaryButtonModel.init(invocationIdentifier:primaryButtonLabel:secondaryButtonLabel:isSmartEnabled:)(WellnessUI::GenericBinaryButtonModel *__return_ptr retstr, Swift::String invocationIdentifier, Swift::String primaryButtonLabel, Swift::String secondaryButtonLabel, Swift::Bool isSmartEnabled)
{
  retstr->invocationIdentifier = invocationIdentifier;
  retstr->primaryButtonLabel = primaryButtonLabel;
  retstr->secondaryButtonLabel = secondaryButtonLabel;
  retstr->isSmartEnabled = isSmartEnabled;
}

uint64_t GenericBinaryButtonModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A4BAF1C + 4 * byte_24A4EAD90[a1]))(0xD000000000000014, 0x800000024A4F3CF0);
}

uint64_t sub_24A4BAF1C(uint64_t a1)
{
  return a1 - 2;
}

uint64_t sub_24A4BAF40()
{
  return 0x457472616D537369;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericBinaryButtonModel.CodingKeys()
{
  unsigned __int8 *v0;

  return GenericBinaryButtonModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericBinaryButtonModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized GenericBinaryButtonModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericBinaryButtonModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericBinaryButtonModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericBinaryButtonModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GenericBinaryButtonModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericBinaryButtonModel.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v15[2] = *(_QWORD *)(v1 + 24);
  v15[3] = v8;
  v9 = *(_QWORD *)(v1 + 32);
  v15[0] = *(_QWORD *)(v1 + 40);
  v15[1] = v9;
  v16 = *(unsigned __int8 *)(v1 + 48);
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v17 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

unint64_t lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericBinaryButtonModel.CodingKeys, &unk_251BD3AD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericBinaryButtonModel.CodingKeys, &unk_251BD3AD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericBinaryButtonModel.CodingKeys, &unk_251BD3AD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericBinaryButtonModel.CodingKeys, &unk_251BD3AD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

uint64_t GenericBinaryButtonModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericBinaryButtonModel.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v29 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  v24 = v9;
  v28 = 1;
  swift_bridgeObjectRetain();
  v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v25 = v13;
  v23 = v12;
  v27 = 2;
  swift_bridgeObjectRetain();
  v21 = KeyedDecodingContainer.decode(_:forKey:)();
  v22 = v14;
  v26 = 3;
  swift_bridgeObjectRetain();
  v16 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v16 & 1;
  v18 = v25;
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v11;
  v19 = v22;
  *(_QWORD *)(a2 + 16) = v23;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v21;
  *(_QWORD *)(a2 + 40) = v19;
  *(_BYTE *)(a2 + 48) = v17;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericBinaryButtonModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericBinaryButtonModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericBinaryButtonModel(_QWORD *a1)
{
  return GenericBinaryButtonModel.encode(to:)(a1);
}

uint64_t destroy for GenericBinaryButtonModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonModel()
{
  return &type metadata for GenericBinaryButtonModel;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24A4BB7B8 + 4 * byte_24A4EAD99[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24A4BB7EC + 4 * byte_24A4EAD94[v4]))();
}

uint64_t sub_24A4BB7EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4BB7F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4BB7FCLL);
  return result;
}

uint64_t sub_24A4BB808(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4BB810);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24A4BB814(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4BB81C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GenericBinaryButtonModel.CodingKeys()
{
  return &unk_251BD3AD8;
}

uint64_t specialized GenericBinaryButtonModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F3CF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3D10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F3D30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t TemperatureQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t TemperatureQueryModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*TemperatureQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.averageValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 20));
}

uint64_t type metadata accessor for TemperatureQueryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TemperatureQueryModel;
  if (!type metadata singleton initialization cache for TemperatureQueryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TemperatureQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for TemperatureQueryModel();
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.averageValue.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.maxValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 24));
}

uint64_t TemperatureQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for TemperatureQueryModel();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.maxValue.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.minValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 28));
}

uint64_t TemperatureQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for TemperatureQueryModel();
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.minValue.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.mostRecentValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 32));
}

uint64_t TemperatureQueryModel.mostRecentValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for TemperatureQueryModel();
  v6 = v2 + *(int *)(result + 32);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.mostRecentValue.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.basalTemperatureValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 36));
}

uint64_t TemperatureQueryModel.basalTemperatureValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for TemperatureQueryModel();
  v6 = v2 + *(int *)(result + 36);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.basalTemperatureValue.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for TemperatureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t TemperatureQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for TemperatureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 40), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*TemperatureQueryModel.dateLabel.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.averageValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.averageValueString.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.maxValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.maxValueString.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.minValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.minValueString.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.mostRecentValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 56));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.mostRecentValueString.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.basalTemperatureValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.basalTemperatureValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.basalTemperatureValueString.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.unitString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for TemperatureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 64), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t TemperatureQueryModel.unitString.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for TemperatureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 64), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*TemperatureQueryModel.unitString.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.averageLabelString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 68));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.averageLabelString.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for TemperatureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 72), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t TemperatureQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for TemperatureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 72), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*TemperatureQueryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for TemperatureQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.init(averageValue:maxValue:minValue:mostRecentValue:basalTemperatureValue:unitString:dateLabel:url:averageLabelString:headerModel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *Model;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  int v84;
  _BOOL4 v85;
  uint64_t v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v95 = a7;
  v89 = a5;
  v84 = a4;
  v86 = a3;
  v83 = a1;
  v99 = a15;
  v100 = a16;
  v102 = a17;
  v103 = a14;
  v104 = a13;
  v105 = a12;
  v94 = a10;
  v92 = a11;
  v21 = (a2 & 1) == 0;
  v82 = (a4 & 1) == 0;
  v85 = (a6 & 1) == 0;
  v87 = (a8 & 1) == 0;
  v88 = (a11 & 1) == 0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v22);
  v93 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AppPunchout();
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v91 = v24;
  v90(a9, 1, 1, v24);
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  v81 = a9 + Model[10];
  v26 = v81;
  v27 = type metadata accessor for SpeakableString();
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  v29 = (uint64_t *)(a9 + Model[11]);
  *v29 = 0;
  v29[1] = 0;
  v30 = (uint64_t *)(a9 + Model[12]);
  v96 = v30;
  *v30 = 0;
  v30[1] = 0;
  v31 = (uint64_t *)(a9 + Model[13]);
  v97 = v31;
  *v31 = 0;
  v31[1] = 0;
  v32 = (uint64_t *)(a9 + Model[14]);
  v98 = v32;
  *v32 = 0;
  v32[1] = 0;
  v33 = (uint64_t *)(a9 + Model[15]);
  v101 = v33;
  *v33 = 0;
  v33[1] = 0;
  v34 = a9 + Model[16];
  v28(v34, 1, 1, v27);
  v35 = (_QWORD *)(a9 + Model[17]);
  *v35 = 0;
  v35[1] = 0;
  v80 = a9 + Model[18];
  v36 = v80;
  v37 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v38 = v83;
  v39 = (v83 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v21 && v39)
    v38 = 0;
  v40 = a2 | v39;
  v41 = a9 + Model[5];
  *(_QWORD *)v41 = v38;
  *(_BYTE *)(v41 + 8) = v40 & 1;
  v42 = v86;
  v43 = (v86 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v82 && v43)
    v42 = 0;
  v44 = v84 | v43;
  v45 = a9 + Model[6];
  *(_QWORD *)v45 = v42;
  *(_BYTE *)(v45 + 8) = v44 & 1;
  v46 = v89;
  v47 = (v89 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v85 && v47)
    v46 = 0;
  v48 = a6 | v47;
  v49 = a9 + Model[7];
  *(_QWORD *)v49 = v46;
  *(_BYTE *)(v49 + 8) = v48 & 1;
  v50 = v95;
  v51 = (v95 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v87 && v51)
    v50 = 0;
  v52 = a9 + Model[8];
  *(_QWORD *)v52 = v50;
  *(_BYTE *)(v52 + 8) = (a8 | v51) & 1;
  v53 = v94;
  v54 = (v94 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v88 && v54)
    v53 = 0;
  v55 = v92 | v54;
  v56 = a9 + Model[9];
  *(_QWORD *)v56 = v53;
  *(_BYTE *)(v56 + 8) = v55 & 1;
  outlined assign with copy of SpeakableString?(v105, v34, &demangling cache variable for type metadata for SpeakableString?);
  outlined assign with copy of SpeakableString?(v104, v81, &demangling cache variable for type metadata for SpeakableString?);
  v57 = (uint64_t)v93;
  SleepQueryModel.createAppPunchout(url:)(v103);
  v90(v57, 0, 1, v91);
  outlined assign with take of AppPunchout?(v57, a9, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  v58 = v100;
  *v35 = v99;
  v35[1] = v58;
  outlined assign with copy of SpeakableString?(v102, v80, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v59 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(_QWORD *)v41, *(_BYTE *)(v41 + 8), v34, 1);
  v61 = v60;
  swift_bridgeObjectRelease();
  *v29 = v59;
  v29[1] = v61;
  v62 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(_QWORD *)v45, *(_BYTE *)(v45 + 8), v34, 1);
  v64 = v63;
  v65 = v96;
  swift_bridgeObjectRelease();
  *v65 = v62;
  v65[1] = v64;
  v66 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(_QWORD *)v49, *(_BYTE *)(v49 + 8), v34, 0);
  v68 = v67;
  v69 = v97;
  swift_bridgeObjectRelease();
  *v69 = v66;
  v69[1] = v68;
  v70 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(_QWORD *)v52, *(_BYTE *)(v52 + 8), v34, 1);
  v72 = v71;
  v73 = v98;
  swift_bridgeObjectRelease();
  *v73 = v70;
  v73[1] = v72;
  v74 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(_QWORD *)v56, *(_BYTE *)(v56 + 8), v34, 1);
  v76 = v75;
  outlined destroy of Font.Design?(v102, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v103, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v104, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of Font.Design?(v105, &demangling cache variable for type metadata for SpeakableString?);
  v77 = v101;
  result = swift_bridgeObjectRelease();
  *v77 = v74;
  v77[1] = v76;
  return result;
}

uint64_t TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v19 - v10;
  if ((a2 & 1) == 0)
  {
    type metadata accessor for DialogPreciseTemperature.Builder();
    swift_allocObject();
    MEMORY[0x24BD109BC]();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)();
    swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)();
    swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.build()();
    swift_release();
    if ((a4 & 1) != 0)
    {
      dispatch thunk of DialogPreciseTemperature.longSpokenTwoDigits.getter();
      v12 = type metadata accessor for SpeakableString();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        v17 = SpeakableString.print.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
        return v17;
      }
      swift_release();
      v14 = (uint64_t)v11;
    }
    else
    {
      dispatch thunk of DialogPreciseTemperature.mediumSpokenTwoDigits.getter();
      v15 = type metadata accessor for SpeakableString();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) != 1)
      {
        v17 = SpeakableString.print.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
        return v17;
      }
      swift_release();
      v14 = (uint64_t)v9;
    }
    outlined destroy of Font.Design?(v14, &demangling cache variable for type metadata for SpeakableString?);
  }
  return 0;
}

uint64_t TemperatureQueryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4BCB14 + 4 * byte_24A4EAF70[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A4BCB14()
{
  return 0x5665676172657661;
}

uint64_t sub_24A4BCB34()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_24A4BCB5C()
{
  return 0x6563655274736F6DLL;
}

unint64_t sub_24A4BCB80()
{
  return 0xD000000000000015;
}

uint64_t sub_24A4BCC2C()
{
  return 0x6972745374696E75;
}

unint64_t sub_24A4BCC48()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TemperatureQueryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return TemperatureQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TemperatureQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TemperatureQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TemperatureQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TemperatureQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TemperatureQueryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TemperatureQueryModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[31] = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for TemperatureQueryModel();
    v8[30] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[29] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[28] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[27] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[26] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[25] = 6;
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[24] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[15] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[14] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 14;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for TemperatureQueryModel.CodingKeys, &unk_251BD3C30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for TemperatureQueryModel.CodingKeys, &unk_251BD3C30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for TemperatureQueryModel.CodingKeys, &unk_251BD3C30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for TemperatureQueryModel.CodingKeys, &unk_251BD3C30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

uint64_t TemperatureQueryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *Model;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;

  v87 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v88 = (uint64_t)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v102 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v95 = (uint64_t)&v83 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v9);
  v103 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TemperatureQueryModel.CodingKeys>);
  v101 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v108 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for TemperatureQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AppPunchout();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v100 = v15;
  v16(v14, 1, 1);
  v17 = &v14[Model[5]];
  *(_QWORD *)v17 = 0;
  v99 = v17;
  v17[8] = 1;
  v18 = &v14[Model[6]];
  *(_QWORD *)v18 = 0;
  v98 = (uint64_t *)v18;
  v18[8] = 1;
  v19 = &v14[Model[7]];
  *(_QWORD *)v19 = 0;
  v97 = (uint64_t *)v19;
  v19[8] = 1;
  v20 = &v14[Model[8]];
  *(_QWORD *)v20 = 0;
  v96 = (uint64_t *)v20;
  v20[8] = 1;
  v21 = &v14[Model[9]];
  *(_QWORD *)v21 = 0;
  v94 = (uint64_t *)v21;
  v21[8] = 1;
  v22 = (uint64_t)&v14[Model[10]];
  v23 = type metadata accessor for SpeakableString();
  v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 56);
  v93 = v22;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v22, 1, 1, v23);
  v25 = &v14[Model[11]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v92 = v25;
  v26 = &v14[Model[12]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v91 = v26;
  v27 = &v14[Model[13]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v90 = v27;
  v28 = &v14[Model[14]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v29 = &v14[Model[15]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v89 = &v14[Model[16]];
  v24();
  v30 = &v14[Model[17]];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v31 = Model[18];
  v107 = v14;
  v32 = (uint64_t)&v14[v31];
  v33 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = a1;
  v35 = a1[3];
  v106 = v34;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();
  v36 = v105;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v36)
  {
    v82 = (uint64_t)v107;
  }
  else
  {
    v37 = v99;
    v86 = v28;
    v85 = v29;
    v105 = v23;
    v84 = v30;
    v83 = v32;
    v39 = v101;
    v38 = (uint64_t)v102;
    v123 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v40 = (uint64_t)v103;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v40, (uint64_t)v107, &demangling cache variable for type metadata for AppPunchout?);
    v122 = 1;
    *(_QWORD *)v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v37[8] = v42 & 1;
    v121 = 2;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v44 = v98;
    *v98 = v43;
    *((_BYTE *)v44 + 8) = v45 & 1;
    v120 = 3;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v47 = v97;
    *v97 = v46;
    *((_BYTE *)v47 + 8) = v48 & 1;
    v119 = 4;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v50 = v96;
    *v96 = v49;
    *((_BYTE *)v50 + 8) = v51 & 1;
    v118 = 5;
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v53 = v94;
    *v94 = v52;
    *((_BYTE *)v53 + 8) = v54 & 1;
    v117 = 6;
    v55 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v95, v93, &demangling cache variable for type metadata for SpeakableString?);
    v116 = 7;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v58 = v57;
    v100 = v55;
    v59 = v92;
    v103 = (char *)v56;
    swift_bridgeObjectRelease();
    *(_QWORD *)v59 = v103;
    *((_QWORD *)v59 + 1) = v58;
    v115 = 8;
    v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v62 = v61;
    v63 = (uint64_t *)v91;
    swift_bridgeObjectRelease();
    *v63 = v60;
    v63[1] = v62;
    v114 = 9;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v66 = v65;
    v67 = (uint64_t *)v90;
    swift_bridgeObjectRelease();
    *v67 = v64;
    v67[1] = v66;
    v113 = 10;
    v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v70 = v69;
    v71 = (uint64_t *)v86;
    swift_bridgeObjectRelease();
    *v71 = v68;
    v71[1] = v70;
    v112 = 11;
    v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v74 = v73;
    v75 = (uint64_t *)v85;
    swift_bridgeObjectRelease();
    *v75 = v72;
    v75[1] = v74;
    v111 = 12;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v38, (uint64_t)v89, &demangling cache variable for type metadata for SpeakableString?);
    v110 = 13;
    v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v78 = v77;
    v79 = (uint64_t *)v84;
    swift_bridgeObjectRelease();
    *v79 = v76;
    v79[1] = v78;
    v109 = 14;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v80 = v104;
    v81 = v108;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v81, v80);
    v82 = (uint64_t)v107;
    outlined assign with take of AppPunchout?(v88, v83, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of TemperatureQueryModel(v82, v87);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v106);
  return outlined destroy of GenericMedCompletedLogModel(v82, (uint64_t (*)(_QWORD))type metadata accessor for TemperatureQueryModel);
}

uint64_t outlined init with copy of TemperatureQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model;

  Model = type metadata accessor for TemperatureQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in TemperatureQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type TemperatureQueryModel and conformance TemperatureQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for TemperatureQueryModel, (uint64_t)&protocol conformance descriptor for TemperatureQueryModel);
}

uint64_t base witness table accessor for Encodable in TemperatureQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type TemperatureQueryModel and conformance TemperatureQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for TemperatureQueryModel, (uint64_t)&protocol conformance descriptor for TemperatureQueryModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TemperatureQueryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TemperatureQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TemperatureQueryModel(_QWORD *a1)
{
  return TemperatureQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TemperatureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = a3[9];
    v24 = a3[10];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = (char *)a1 + v24;
    v28 = (char *)a2 + v24;
    v29 = type metadata accessor for SpeakableString();
    v30 = *(_QWORD *)(v29 - 8);
    v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v79 = v30;
    if (v78(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = a3[11];
    v33 = a3[12];
    v34 = (uint64_t *)((char *)a1 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (uint64_t *)((char *)a1 + v33);
    v38 = (uint64_t *)((char *)a2 + v33);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = a3[13];
    v41 = a3[14];
    v42 = (uint64_t *)((char *)a1 + v40);
    v43 = (uint64_t *)((char *)a2 + v40);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = (uint64_t *)((char *)a1 + v41);
    v46 = (uint64_t *)((char *)a2 + v41);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = a3[15];
    v49 = a3[16];
    v50 = (uint64_t *)((char *)a1 + v48);
    v51 = (uint64_t *)((char *)a2 + v48);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = (char *)a1 + v49;
    v54 = (char *)a2 + v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v78(v54, 1, v29))
    {
      v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      v56 = v79;
    }
    else
    {
      v56 = v79;
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v53, v54, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v53, 0, 1, v29);
    }
    v57 = a3[17];
    v58 = a3[18];
    v59 = (uint64_t *)((char *)a1 + v57);
    v60 = (uint64_t *)((char *)a2 + v57);
    v61 = v60[1];
    *v59 = *v60;
    v59[1] = v61;
    v62 = (char *)a1 + v58;
    v63 = (char *)a2 + v58;
    v64 = type metadata accessor for SnippetHeaderModel();
    v65 = *(_QWORD *)(v64 - 8);
    v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    swift_bridgeObjectRetain();
    if (v66(v63, 1, v64))
    {
      v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v62, v63, v29);
      v68 = *(int *)(v64 + 20);
      v69 = &v62[v68];
      v70 = &v63[v68];
      v71 = *((_QWORD *)v70 + 1);
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = v71;
      v72 = *(int *)(v64 + 24);
      v73 = &v62[v72];
      v74 = &v63[v72];
      v75 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v75;
      v76 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v76(v62, 0, 1, v64);
    }
  }
  return a1;
}

uint64_t destroy for TemperatureQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + a2[10];
  v7 = type metadata accessor for SpeakableString();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + a2[16];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  v11 = a1 + a2[18];
  v12 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = a3[10];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = &a1[v22];
  v26 = &a2[v22];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v77 = v28;
  if (v76(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[11];
  v31 = a3[12];
  v32 = &a1[v30];
  v33 = &a2[v30];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = &a1[v31];
  v36 = &a2[v31];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v38 = a3[13];
  v39 = a3[14];
  v40 = &a1[v38];
  v41 = &a2[v38];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = &a1[v39];
  v44 = &a2[v39];
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = v45;
  v46 = a3[15];
  v47 = a3[16];
  v48 = &a1[v46];
  v49 = &a2[v46];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = &a1[v47];
  v52 = &a2[v47];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v76(v52, 1, v27))
  {
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    v54 = v77;
  }
  else
  {
    v54 = v77;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v51, v52, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v51, 0, 1, v27);
  }
  v55 = a3[17];
  v56 = a3[18];
  v57 = &a1[v55];
  v58 = &a2[v55];
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *((_QWORD *)v57 + 1) = v59;
  v60 = &a1[v56];
  v61 = &a2[v56];
  v62 = type metadata accessor for SnippetHeaderModel();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
  swift_bridgeObjectRetain();
  if (v64(v61, 1, v62))
  {
    v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v60, v61, v27);
    v66 = *(int *)(v62 + 20);
    v67 = &v60[v66];
    v68 = &v61[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = *(int *)(v62 + 24);
    v71 = &v60[v70];
    v72 = &v61[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v74(v60, 0, 1, v62);
  }
  return a1;
}

char *assignWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *(_QWORD *)v30;
  v29[8] = v30[8];
  *(_QWORD *)v29 = v31;
  v32 = a3[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for SpeakableString();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  v41 = a3[11];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3[13];
  v48 = &a1[v47];
  v49 = &a2[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = a3[14];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = a3[15];
  v54 = &a1[v53];
  v55 = &a2[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = a3[16];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = v37(&a1[v56], 1, v35);
  v60 = v37(v58, 1, v35);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v57, v58, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v57, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v57, v35);
LABEL_18:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v57, v58, v35);
LABEL_19:
  v62 = a3[17];
  v63 = &a1[v62];
  v64 = &a2[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v65 = a3[18];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = type metadata accessor for SnippetHeaderModel();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  v71 = v70(v66, 1, v68);
  v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v66, v67, v35);
      v82 = *(int *)(v68 + 20);
      v83 = &v66[v82];
      v84 = &v67[v82];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      *((_QWORD *)v83 + 1) = *((_QWORD *)v84 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v85 = *(int *)(v68 + 24);
      v86 = &v66[v85];
      v87 = &v67[v85];
      *(_QWORD *)v86 = *(_QWORD *)v87;
      *((_QWORD *)v86 + 1) = *((_QWORD *)v87 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v72)
  {
LABEL_24:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v66, v67, v35);
  v73 = *(int *)(v68 + 20);
  v74 = &v66[v73];
  v75 = &v67[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
  v76 = *(int *)(v68 + 24);
  v77 = &v66[v76];
  v78 = &v67[v76];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
  v79 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79(v66, 0, 1, v68);
  return a1;
}

char *initializeWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = a3[10];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = &a1[v22];
  v26 = &a2[v22];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v29(v26, 1, v27))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v31 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v31] = *(_OWORD *)&a2[v31];
  v32 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v32] = *(_OWORD *)&a2[v32];
  v33 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  v34 = &a1[v33];
  v35 = &a2[v33];
  if (v29(&a2[v33], 1, v27))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v34, v35, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v34, 0, 1, v27);
  }
  v37 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = type metadata accessor for SnippetHeaderModel();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v38, v39, v27);
    *(_OWORD *)&v38[*(int *)(v40 + 20)] = *(_OWORD *)&v39[*(int *)(v40 + 20)];
    *(_OWORD *)&v38[*(int *)(v40 + 24)] = *(_OWORD *)&v39[*(int *)(v40 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

char *assignWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(char *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[9];
  v25 = a3[10];
  v26 = &a1[v24];
  v27 = &a2[v24];
  v26[8] = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v28 = &a1[v25];
  v29 = &a2[v25];
  v30 = type metadata accessor for SpeakableString();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  v36 = a3[11];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  v41 = a3[12];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  v46 = a3[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  v51 = a3[14];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v55 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = v55;
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  v56 = a3[15];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  v61 = a3[16];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v64 = v32(&a1[v61], 1, v30);
  v65 = v32(v63, 1, v30);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v62, v63, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v62, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v62, v30);
LABEL_18:
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v62, v63, v30);
LABEL_19:
  v67 = a3[17];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v71 = *(_QWORD *)v69;
  v70 = *((_QWORD *)v69 + 1);
  *(_QWORD *)v68 = v71;
  *((_QWORD *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
  v72 = a3[18];
  v73 = &a1[v72];
  v74 = &a2[v72];
  v75 = type metadata accessor for SnippetHeaderModel();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  v78 = v77(v73, 1, v75);
  v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v73, v74, v30);
      v82 = *(int *)(v75 + 20);
      v83 = &v73[v82];
      v84 = &v74[v82];
      v86 = *(_QWORD *)v84;
      v85 = *((_QWORD *)v84 + 1);
      *(_QWORD *)v83 = v86;
      *((_QWORD *)v83 + 1) = v85;
      swift_bridgeObjectRelease();
      v87 = *(int *)(v75 + 24);
      v88 = &v73[v87];
      v89 = &v74[v87];
      v91 = *(_QWORD *)v89;
      v90 = *((_QWORD *)v89 + 1);
      *(_QWORD *)v88 = v91;
      *((_QWORD *)v88 + 1) = v90;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v79)
  {
LABEL_24:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v73, v74, v30);
  *(_OWORD *)&v73[*(int *)(v75 + 20)] = *(_OWORD *)&v74[*(int *)(v75 + 20)];
  *(_OWORD *)&v73[*(int *)(v75 + 24)] = *(_OWORD *)&v74[*(int *)(v75 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemperatureQueryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4BF08C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[18];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[11] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for TemperatureQueryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4BF180(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[10];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[11] + 8) = a2;
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[18];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for TemperatureQueryModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, &lazy cache variable for type metadata for SpeakableString?, (void (*)(uint64_t))MEMORY[0x24BE929C8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t storeEnumTagSinglePayload for TemperatureQueryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_24A4BF398 + 4 * byte_24A4EAF84[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_24A4BF3CC + 4 * byte_24A4EAF7F[v4]))();
}

uint64_t sub_24A4BF3CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4BF3D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4BF3DCLL);
  return result;
}

uint64_t sub_24A4BF3E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4BF3F0);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_24A4BF3F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4BF3FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TemperatureQueryModel.CodingKeys()
{
  return &unk_251BD3C30;
}

uint64_t specialized TemperatureQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A4F3D50
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3AF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A4F3B10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000024A4F3D70
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6972745374696E75 && a2 == 0xEA0000000000676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3B50
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t WatchRingsModel.exerciseGoalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t WatchRingsModel.exerciseGoalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.exerciseGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.exerciseTotalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t WatchRingsModel.exerciseTotalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.exerciseTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.moveGoalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t WatchRingsModel.moveGoalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.moveGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.moveTotalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t WatchRingsModel.moveTotalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.moveTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.standGoalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t WatchRingsModel.standGoalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.standTotalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t WatchRingsModel.standTotalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

void __swiftcall WatchRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:)(WellnessUI::WatchRingsModel *__return_ptr retstr, Swift::Double exerciseGoalValue, Swift::Double exerciseTotalValue, Swift::Double moveGoalValue, Swift::Double moveTotalValue, Swift::Double standGoalValue, Swift::Double standTotalValue)
{
  retstr->exerciseGoalValue.value = exerciseGoalValue;
  retstr->exerciseGoalValue.is_nil = 0;
  retstr->exerciseTotalValue.value = exerciseTotalValue;
  retstr->exerciseTotalValue.is_nil = 0;
  retstr->moveGoalValue.value = moveGoalValue;
  retstr->moveGoalValue.is_nil = 0;
  retstr->moveTotalValue.value = moveTotalValue;
  retstr->moveTotalValue.is_nil = 0;
  retstr->standGoalValue.value = standGoalValue;
  retstr->standGoalValue.is_nil = 0;
  retstr->standTotalValue.value = standTotalValue;
  retstr->standTotalValue.is_nil = 0;
}

uint64_t WatchRingsModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A4BFCB0 + 4 * byte_24A4EB1EC[a1]))(0xD000000000000011, 0x800000024A4F3D90);
}

uint64_t sub_24A4BFCB0(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_24A4BFCC8()
{
  return 0x6C616F4765766F6DLL;
}

uint64_t sub_24A4BFCEC()
{
  return 0x61746F5465766F6DLL;
}

uint64_t sub_24A4BFD24()
{
  return 0x746F54646E617473;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchRingsModel.CodingKeys()
{
  unsigned __int8 *v0;

  return WatchRingsModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchRingsModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WatchRingsModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WatchRingsModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchRingsModel.CodingKeys()
{
  lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchRingsModel.CodingKeys()
{
  lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WatchRingsModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchRingsModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v1 + 16);
  v19 = *(unsigned __int8 *)(v1 + 24);
  v18 = *(_QWORD *)(v1 + 32);
  v17 = *(unsigned __int8 *)(v1 + 40);
  v16 = *(_QWORD *)(v1 + 48);
  v7 = *(unsigned __int8 *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v14 = *(unsigned __int8 *)(v1 + 72);
  v15 = v7;
  v12 = *(_QWORD *)(v1 + 80);
  v13 = v8;
  v11[1] = *(unsigned __int8 *)(v1 + 88);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v27 = 0;
  v9 = v21;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v9)
  {
    v26 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v25 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v24 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v23 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v22 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WatchRingsModel.CodingKeys, &unk_251BD3E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WatchRingsModel.CodingKeys, &unk_251BD3E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WatchRingsModel.CodingKeys, &unk_251BD3E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WatchRingsModel.CodingKeys, &unk_251BD3E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

uint64_t WatchRingsModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchRingsModel.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v38 = 0;
    v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v11 = v10;
    v37 = 1;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v31 = v13;
    v32 = v12;
    v36 = 2;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v29 = v15;
    v30 = v14;
    v35 = 3;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v27 = v17;
    v28 = v16;
    v34 = 4;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    HIDWORD(v25) = v19;
    v26 = v18;
    v33 = 5;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v22 = v8;
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v11 & 1;
    *(_QWORD *)(a2 + 16) = v32;
    *(_BYTE *)(a2 + 24) = v31 & 1;
    *(_QWORD *)(a2 + 32) = v30;
    *(_BYTE *)(a2 + 40) = v29 & 1;
    *(_QWORD *)(a2 + 48) = v28;
    *(_BYTE *)(a2 + 56) = v27 & 1;
    *(_QWORD *)(a2 + 64) = v26;
    *(_BYTE *)(a2 + 72) = BYTE4(v25) & 1;
    *(_QWORD *)(a2 + 80) = v21;
    *(_BYTE *)(a2 + 88) = v24 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WatchRingsModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WatchRingsModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WatchRingsModel(_QWORD *a1)
{
  return WatchRingsModel.encode(to:)(a1);
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for WatchRingsModel(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WatchRingsModel(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 89) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WatchRingsModel()
{
  return &type metadata for WatchRingsModel;
}

uint64_t getEnumTagSinglePayload for WatchRingsModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WatchRingsModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24A4C044C + 4 * byte_24A4EB1F7[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24A4C0480 + 4 * byte_24A4EB1F2[v4]))();
}

uint64_t sub_24A4C0480(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4C0488(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4C0490);
  return result;
}

uint64_t sub_24A4C049C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4C04A4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24A4C04A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4C04B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WatchRingsModel.CodingKeys()
{
  return &unk_251BD3E18;
}

uint64_t specialized WatchRingsModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F3D90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3DB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616F4765766F6DLL && a2 == 0xED000065756C6156
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61746F5465766F6DLL && a2 == 0xEE0065756C61566CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616F47646E617473 && a2 == 0xEE0065756C61566CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746F54646E617473 && a2 == 0xEF65756C61566C61)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t OxygenSaturationQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t OxygenSaturationQueryModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*OxygenSaturationQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.averageValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 20));
}

uint64_t type metadata accessor for OxygenSaturationQueryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OxygenSaturationQueryModel;
  if (!type metadata singleton initialization cache for OxygenSaturationQueryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OxygenSaturationQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for OxygenSaturationQueryModel();
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageValue.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.maxValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 24));
}

uint64_t OxygenSaturationQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for OxygenSaturationQueryModel();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.maxValue.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.minValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 28));
}

uint64_t OxygenSaturationQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for OxygenSaturationQueryModel();
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.minValue.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.mostRecentValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 32));
}

uint64_t OxygenSaturationQueryModel.mostRecentValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for OxygenSaturationQueryModel();
  v6 = v2 + *(int *)(result + 32);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.mostRecentValue.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 36), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t OxygenSaturationQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 36), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*OxygenSaturationQueryModel.dateLabel.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.averageValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageValueString.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.maxValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.maxValueString.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.minValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.minValueString.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.mostRecentValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.mostRecentValueString.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.unit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 56));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.unit.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.averageLabelString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageLabelString.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 64), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t OxygenSaturationQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 64), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*OxygenSaturationQueryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for OxygenSaturationQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.init(averageValue:maxValue:minValue:mostRecentValue:unit:dateLabel:url:averageLabelString:headerModel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int *Model;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  _BOOL4 v73;
  int v74;
  uint64_t v75;
  _BOOL4 v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  _BOOL4 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v80 = a8;
  v74 = a4;
  v75 = a3;
  v71 = a1;
  v85 = a14;
  v86 = a15;
  v88 = a16;
  v89 = a13;
  v90 = a12;
  v83 = a7;
  v84 = a11;
  v81 = a5;
  v82 = a10;
  v72 = (a2 & 1) == 0;
  v73 = (a4 & 1) == 0;
  v76 = (a6 & 1) == 0;
  v79 = (a8 & 1) == 0;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AppPunchout();
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v78 = v22;
  v77(a9, 1, 1, v22);
  Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  v70 = a9 + Model[9];
  v24 = v70;
  v25 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = (uint64_t *)(a9 + Model[10]);
  *v26 = 0;
  v26[1] = 0;
  v27 = (uint64_t *)(a9 + Model[11]);
  *v27 = 0;
  v27[1] = 0;
  v28 = (uint64_t *)(a9 + Model[12]);
  *v28 = 0;
  v28[1] = 0;
  v29 = (uint64_t *)(a9 + Model[13]);
  v87 = v29;
  *v29 = 0;
  v29[1] = 0;
  v30 = (_QWORD *)(a9 + Model[15]);
  *v30 = 0;
  v30[1] = 0;
  v69 = a9 + Model[16];
  v31 = v69;
  v32 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = (v71 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v72 && v33)
    v34 = 0;
  else
    v34 = v71;
  v35 = a2 | v33;
  v36 = a9 + Model[5];
  *(_QWORD *)v36 = v34;
  *(_BYTE *)(v36 + 8) = v35 & 1;
  v37 = v75;
  v38 = (v75 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v73 && v38)
    v37 = 0;
  v39 = v74 | v38;
  v40 = a9 + Model[6];
  *(_QWORD *)v40 = v37;
  *(_BYTE *)(v40 + 8) = v39 & 1;
  v41 = v81;
  v42 = (v81 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v76 && v42)
    v41 = 0;
  v43 = a6 | v42;
  v44 = a9 + Model[7];
  *(_QWORD *)v44 = v41;
  *(_BYTE *)(v44 + 8) = v43 & 1;
  v45 = v83;
  v46 = (v83 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  v47 = v80;
  if (v79 && v46)
    v45 = 0;
  v48 = Model[14];
  v49 = a9 + Model[8];
  *(_QWORD *)v49 = v45;
  *(_BYTE *)(v49 + 8) = (v47 | v46) & 1;
  v50 = (_QWORD *)(a9 + v48);
  v51 = v84;
  *v50 = v82;
  v50[1] = v51;
  outlined assign with copy of SpeakableString?(v90, v70, &demangling cache variable for type metadata for SpeakableString?);
  SleepQueryModel.createAppPunchout(url:)(v89);
  v77((uint64_t)v21, 0, 1, v78);
  outlined assign with take of AppPunchout?((uint64_t)v21, a9, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  v52 = v86;
  *v30 = v85;
  v30[1] = v52;
  v53 = v88;
  outlined assign with copy of SpeakableString?(v88, v69, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v54 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v36, *(_BYTE *)(v36 + 8));
  v56 = v55;
  swift_bridgeObjectRelease();
  *v26 = v54;
  v26[1] = v56;
  v57 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v40, *(_BYTE *)(v40 + 8));
  v59 = v58;
  swift_bridgeObjectRelease();
  *v27 = v57;
  v27[1] = v59;
  v60 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v44, *(_BYTE *)(v44 + 8));
  v62 = v61;
  swift_bridgeObjectRelease();
  *v28 = v60;
  v28[1] = v62;
  v63 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v49, *(_BYTE *)(v49 + 8));
  v65 = v64;
  outlined destroy of Font.Design?(v53, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v89, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v90, &demangling cache variable for type metadata for SpeakableString?);
  v66 = v87;
  result = swift_bridgeObjectRelease();
  *v66 = v63;
  v66[1] = v65;
  return result;
}

uint64_t OxygenSaturationQueryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4C14AC + 4 * byte_24A4EB3D0[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A4C14AC()
{
  return 0x5665676172657661;
}

uint64_t sub_24A4C14CC()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_24A4C14F4()
{
  return 0x6563655274736F6DLL;
}

uint64_t sub_24A4C1518()
{
  return 0x6562614C65746164;
}

unint64_t sub_24A4C1534()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance OxygenSaturationQueryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return OxygenSaturationQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance OxygenSaturationQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized OxygenSaturationQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance OxygenSaturationQueryModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OxygenSaturationQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OxygenSaturationQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t OxygenSaturationQueryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OxygenSaturationQueryModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for OxygenSaturationQueryModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[4] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[3] = 12;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for OxygenSaturationQueryModel.CodingKeys, &unk_251BD3F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for OxygenSaturationQueryModel.CodingKeys, &unk_251BD3F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for OxygenSaturationQueryModel.CodingKeys, &unk_251BD3F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for OxygenSaturationQueryModel.CodingKeys, &unk_251BD3F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

uint64_t OxygenSaturationQueryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *Model;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  char *v98;
  char *v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;

  v82 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v83 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v5);
  v92 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v7);
  v93 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OxygenSaturationQueryModel.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v94 = v9;
  v95 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v99 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AppPunchout();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v91 = v15;
  v16(v14, 1, 1);
  v17 = &v14[Model[5]];
  *(_QWORD *)v17 = 0;
  v90 = v17;
  v17[8] = 1;
  v18 = &v14[Model[6]];
  *(_QWORD *)v18 = 0;
  v89 = (uint64_t *)v18;
  v18[8] = 1;
  v19 = &v14[Model[7]];
  *(_QWORD *)v19 = 0;
  v88 = (uint64_t *)v19;
  v19[8] = 1;
  v20 = &v14[Model[8]];
  *(_QWORD *)v20 = 0;
  v86 = (uint64_t *)v20;
  v20[8] = 1;
  v21 = (uint64_t)&v14[Model[9]];
  v22 = type metadata accessor for SpeakableString();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v85 = v21;
  v87 = v22;
  v23(v21, 1, 1);
  v24 = &v14[Model[10]];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v84 = v24;
  v25 = &v14[Model[11]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v26 = &v14[Model[12]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v27 = &v14[Model[13]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v28 = &v14[Model[14]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v29 = (uint64_t *)&v14[Model[15]];
  *v29 = 0;
  v29[1] = 0;
  v30 = Model[16];
  v98 = v14;
  v31 = (uint64_t)&v14[v30];
  v32 = type metadata accessor for SnippetHeaderModel();
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v81 = v31;
  v33(v31, 1, 1, v32);
  v34 = a1;
  v35 = a1[3];
  v97 = v34;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();
  v36 = v96;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v36)
  {
    v77 = (uint64_t)v98;
  }
  else
  {
    v37 = v90;
    v96 = v25;
    v80 = v26;
    v38 = (uint64_t)v92;
    v79 = v27;
    v78 = v28;
    v39 = v95;
    v112 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v40 = (uint64_t)v93;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v40, (uint64_t)v98, &demangling cache variable for type metadata for AppPunchout?);
    v111 = 1;
    *(_QWORD *)v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v37[8] = v42 & 1;
    v110 = 2;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v44 = v89;
    *v89 = v43;
    *((_BYTE *)v44 + 8) = v45 & 1;
    v109 = 3;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v47 = v88;
    *v88 = v46;
    *((_BYTE *)v47 + 8) = v48 & 1;
    v108 = 4;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v50 = v86;
    *v86 = v49;
    *((_BYTE *)v50 + 8) = v51 & 1;
    v107 = 5;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v38, v85, &demangling cache variable for type metadata for SpeakableString?);
    v106 = 6;
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v54 = v53;
    v55 = (uint64_t *)v84;
    swift_bridgeObjectRelease();
    *v55 = v52;
    v55[1] = v54;
    v105 = 7;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v58 = v57;
    v59 = (uint64_t *)v96;
    swift_bridgeObjectRelease();
    *v59 = v56;
    v59[1] = v58;
    v104 = 8;
    v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v62 = v61;
    v63 = (uint64_t *)v80;
    swift_bridgeObjectRelease();
    *v63 = v60;
    v63[1] = v62;
    v103 = 9;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v66 = v65;
    v67 = (uint64_t *)v79;
    swift_bridgeObjectRelease();
    *v67 = v64;
    v67[1] = v66;
    v102 = 10;
    v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v70 = v69;
    v71 = (uint64_t *)v78;
    swift_bridgeObjectRelease();
    *v71 = v68;
    v71[1] = v70;
    v101 = 11;
    v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v74 = v73;
    swift_bridgeObjectRelease();
    *v29 = v72;
    v29[1] = v74;
    v100 = 12;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v75 = v94;
    v76 = v99;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v76, v75);
    v77 = (uint64_t)v98;
    outlined assign with take of AppPunchout?(v83, v81, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of OxygenSaturationQueryModel(v77, v82);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v97);
  return outlined destroy of GenericMedCompletedLogModel(v77, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t outlined init with copy of OxygenSaturationQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model;

  Model = type metadata accessor for OxygenSaturationQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in OxygenSaturationQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type OxygenSaturationQueryModel and conformance OxygenSaturationQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel, (uint64_t)&protocol conformance descriptor for OxygenSaturationQueryModel);
}

uint64_t base witness table accessor for Encodable in OxygenSaturationQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type OxygenSaturationQueryModel and conformance OxygenSaturationQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel, (uint64_t)&protocol conformance descriptor for OxygenSaturationQueryModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance OxygenSaturationQueryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OxygenSaturationQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance OxygenSaturationQueryModel(_QWORD *a1)
{
  return OxygenSaturationQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for OxygenSaturationQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = a3[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for SpeakableString();
    v27 = *(_QWORD *)(v26 - 8);
    v70 = v27;
    v71 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = a3[10];
    v30 = a3[11];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (uint64_t *)((char *)a1 + v30);
    v35 = (uint64_t *)((char *)a2 + v30);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = a3[12];
    v38 = a3[13];
    v39 = (uint64_t *)((char *)a1 + v37);
    v40 = (uint64_t *)((char *)a2 + v37);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = (uint64_t *)((char *)a1 + v38);
    v43 = (uint64_t *)((char *)a2 + v38);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = a3[14];
    v46 = a3[15];
    v47 = (uint64_t *)((char *)a1 + v45);
    v48 = (uint64_t *)((char *)a2 + v45);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = (uint64_t *)((char *)a1 + v46);
    v51 = (uint64_t *)((char *)a2 + v46);
    v52 = *v51;
    v53 = v51[1];
    v54 = a3[16];
    v55 = (char *)a2 + v54;
    __dst = (char *)a1 + v54;
    *v50 = v52;
    v50[1] = v53;
    v56 = type metadata accessor for SnippetHeaderModel();
    v69 = *(_QWORD *)(v56 - 8);
    v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v57(v55, 1, v56))
    {
      v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(__dst, v55, v71);
      v59 = *(int *)(v56 + 20);
      v60 = &__dst[v59];
      v61 = &v55[v59];
      v62 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v62;
      v63 = *(int *)(v56 + 24);
      v64 = &__dst[v63];
      v65 = &v55[v63];
      v66 = *((_QWORD *)v65 + 1);
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *((_QWORD *)v64 + 1) = v66;
      v67 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v67(__dst, 0, 1, v56);
    }
  }
  return a1;
}

uint64_t destroy for OxygenSaturationQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 36);
  v7 = type metadata accessor for SpeakableString();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + *(int *)(a2 + 64);
  v10 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *__dst;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  v68 = v25;
  v69 = v24;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[10];
  v28 = a3[11];
  v29 = &a1[v27];
  v30 = &a2[v27];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = &a1[v28];
  v33 = &a2[v28];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = a3[12];
  v36 = a3[13];
  v37 = &a1[v35];
  v38 = &a2[v35];
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v39;
  v40 = &a1[v36];
  v41 = &a2[v36];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = a3[14];
  v44 = a3[15];
  v45 = &a1[v43];
  v46 = &a2[v43];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = &a1[v44];
  v49 = &a2[v44];
  v50 = *(_QWORD *)v49;
  v51 = *((_QWORD *)v49 + 1);
  v52 = a3[16];
  v53 = &a2[v52];
  __dst = &a1[v52];
  *(_QWORD *)v48 = v50;
  *((_QWORD *)v48 + 1) = v51;
  v54 = type metadata accessor for SnippetHeaderModel();
  v67 = *(_QWORD *)(v54 - 8);
  v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v55(v53, 1, v54))
  {
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(__dst, v53, v69);
    v57 = *(int *)(v54 + 20);
    v58 = &__dst[v57];
    v59 = &v53[v57];
    v60 = *((_QWORD *)v59 + 1);
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = v60;
    v61 = *(int *)(v54 + 24);
    v62 = &__dst[v61];
    v63 = &v53[v61];
    v64 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    v65 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v65(__dst, 0, 1, v54);
  }
  return a1;
}

char *assignWithCopy for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for SpeakableString();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_13:
  v37 = a3[10];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3[11];
  v41 = &a1[v40];
  v42 = &a2[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = a3[12];
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = a3[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = a3[14];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = a3[15];
  v53 = &a1[v52];
  v54 = &a2[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = a3[16];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = type metadata accessor for SnippetHeaderModel();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v56, v57, v31);
      v72 = *(int *)(v58 + 20);
      v73 = &v56[v72];
      v74 = &v57[v72];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v75 = *(int *)(v58 + 24);
      v76 = &v56[v75];
      v77 = &v57[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v62)
  {
LABEL_18:
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v56, v57, v31);
  v63 = *(int *)(v58 + 20);
  v64 = &v56[v63];
  v65 = &v57[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);
  v66 = *(int *)(v58 + 24);
  v67 = &v56[v66];
  v68 = &v57[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_QWORD *)v67 + 1) = *((_QWORD *)v68 + 1);
  v69 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v56, 0, 1, v58);
  return a1;
}

char *initializeWithTake for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  v28 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  v29 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  v30 = a3[16];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for SnippetHeaderModel();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v31, v32, v24);
    *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
    *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

char *assignWithTake for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_13:
  v33 = a3[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = a3[11];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v43 = a3[12];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  v48 = a3[13];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v53 = a3[14];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v57 = *(_QWORD *)v55;
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = v57;
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRelease();
  v58 = a3[15];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v62 = *(_QWORD *)v60;
  v61 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v59 = v62;
  *((_QWORD *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  v63 = a3[16];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = type metadata accessor for SnippetHeaderModel();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68(v65, 1, v66);
  if (!v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v64, v65, v27);
      v73 = *(int *)(v66 + 20);
      v74 = &v64[v73];
      v75 = &v65[v73];
      v77 = *(_QWORD *)v75;
      v76 = *((_QWORD *)v75 + 1);
      *(_QWORD *)v74 = v77;
      *((_QWORD *)v74 + 1) = v76;
      swift_bridgeObjectRelease();
      v78 = *(int *)(v66 + 24);
      v79 = &v64[v78];
      v80 = &v65[v78];
      v82 = *(_QWORD *)v80;
      v81 = *((_QWORD *)v80 + 1);
      *(_QWORD *)v79 = v82;
      *((_QWORD *)v79 + 1) = v81;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v70)
  {
LABEL_18:
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v64, v65, v27);
  *(_OWORD *)&v64[*(int *)(v66 + 20)] = *(_OWORD *)&v65[*(int *)(v66 + 20)];
  *(_OWORD *)&v64[*(int *)(v66 + 24)] = *(_OWORD *)&v65[*(int *)(v66 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQueryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4C3538(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[16];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for OxygenSaturationQueryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4C362C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[9];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[10] + 8) = a2;
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[16];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for OxygenSaturationQueryModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, &lazy cache variable for type metadata for SpeakableString?, (void (*)(uint64_t))MEMORY[0x24BE929C8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OxygenSaturationQueryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_24A4C38D4 + 4 * byte_24A4EB3E2[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_24A4C3908 + 4 * byte_24A4EB3DD[v4]))();
}

uint64_t sub_24A4C3908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4C3910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4C3918);
  return result;
}

uint64_t sub_24A4C3924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4C392CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_24A4C3930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4C3938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for OxygenSaturationQueryModel.CodingKeys()
{
  return &unk_251BD3F70;
}

uint64_t specialized OxygenSaturationQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3AF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A4F3B10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3B50
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t OxygenSaturationQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t OxygenSaturationQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for OxygenSaturationQuerySnippet() + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t type metadata accessor for OxygenSaturationQuerySnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OxygenSaturationQuerySnippet;
  if (!type metadata singleton initialization cache for OxygenSaturationQuerySnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OxygenSaturationQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Snippet;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Model;
  uint64_t *v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, char *, uint64_t);
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;

  v156 = a1;
  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  v145 = *(_QWORD *)(v148 - 8);
  MEMORY[0x24BDAC7A8](v148);
  v144 = (char *)&v120 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v149 = *(_QWORD *)(v3 - 8);
  v150 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v146 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v147 = (char *)&v120 - v6;
  v131 = type metadata accessor for SingleDataPointView();
  MEMORY[0x24BDAC7A8](v131);
  v130 = (uint64_t *)((char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = type metadata accessor for MultipleDataPointView();
  MEMORY[0x24BDAC7A8](v133);
  v132 = (uint64_t *)((char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  Snippet = type metadata accessor for OxygenSaturationQuerySnippet();
  v141 = *(_QWORD *)(Snippet - 8);
  v10 = MEMORY[0x24BDAC7A8](Snippet);
  v143 = (uint64_t)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v135 = (uint64_t)&v120 - v13;
  v142 = v14;
  MEMORY[0x24BDAC7A8](v12);
  v136 = (uint64_t)&v120 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v16);
  v151 = (void (*)(char *, char *, uint64_t))((char *)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for SnippetHeaderView();
  v137 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v152 = (char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v120 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for AppPunchout();
  v154 = *(_QWORD *)(v26 - 8);
  v155 = v26;
  v27 = MEMORY[0x24BDAC7A8](v26);
  v139 = v28;
  v140 = (char *)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v153 = (char *)&v120 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for SpeakableString();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v120 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = type metadata accessor for OxygenSaturationQueryModel();
  v38 = (uint64_t *)(v1 + *(int *)(Model + 56));
  if (!v38[1])
    goto LABEL_7;
  v39 = (int *)Model;
  v129 = v38[1];
  v134 = v22;
  v128 = *v38;
  v40 = v1;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 36), (uint64_t)v32, &demangling cache variable for type metadata for SpeakableString?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v36, v32, v33);
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v25, &demangling cache variable for type metadata for AppPunchout?);
    v44 = v154;
    v43 = v155;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v25, 1, v155) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v41 = &demangling cache variable for type metadata for AppPunchout?;
      v42 = (uint64_t)v25;
      goto LABEL_6;
    }
    v126 = v34;
    v127 = v33;
    v47 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v47(v153, v25, v43);
    v48 = v151;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v40 + v39[16], (uint64_t)v151, &demangling cache variable for type metadata for SnippetHeaderModel?);
    v49 = (uint64_t)v152;
    v50 = (uint64_t *)&v152[*(int *)(v18 + 20)];
    *v50 = swift_getKeyPath();
    v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    v51 = (uint64_t *)(v49 + *(int *)(v18 + 24));
    *v51 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?((uint64_t)v48, v49);
    outlined init with take of GenericMedCompletedLogSnippet(v49, (uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    v52 = (uint64_t)v36;
    v53 = v40 + v39[5];
    if ((*(_BYTE *)(v53 + 8) & 1) == 0 && *(double *)v53 > 0.0)
    {
      v151 = v47;
      v54 = (uint64_t *)(v40 + v39[12]);
      v55 = v54[1];
      v56 = v136;
      outlined init with copy of GenericMedCompletedLogModel(v40, v136, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
      if (v55)
      {
        v57 = *(_QWORD *)(v56 + v39[11] + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of GenericMedCompletedLogModel(v56, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
        swift_bridgeObjectRelease();
        v58 = v40;
        v59 = v40;
        v60 = v135;
        outlined init with copy of GenericMedCompletedLogModel(v59, v135, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
        if (v57)
        {
          outlined destroy of GenericMedCompletedLogModel(v60, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
          v61 = (uint64_t)v134;
LABEL_16:
          v131 = *(_QWORD *)v53;
          LODWORD(v130) = *(unsigned __int8 *)(v53 + 8);
          v64 = v39[11];
          v65 = v58;
          v66 = (uint64_t *)(v58 + v39[10]);
          v67 = v66[1];
          v120 = *v66;
          v68 = v54[1];
          v123 = *v54;
          v69 = *(_QWORD *)(v65 + v64 + 8);
          v135 = *(_QWORD *)(v65 + v64);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v122 = SpeakableString.print.getter();
          v121 = v70;
          v71 = v39[15];
          v136 = v65;
          v72 = (uint64_t *)(v65 + v71);
          v73 = v72[1];
          v124 = *v72;
          type metadata accessor for Context();
          lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
          swift_bridgeObjectRetain();
          v74 = EnvironmentObject.init()();
          v75 = v132;
          *v132 = v74;
          v75[1] = v76;
          v77 = (int *)v133;
          v78 = (uint64_t *)((char *)v75 + *(int *)(v133 + 20));
          *v78 = swift_getKeyPath();
          swift_storeEnumTagMultiPayload();
          v79 = (char *)v75 + v77[6];
          *(_QWORD *)v79 = v131;
          v79[8] = (char)v130;
          v80 = (uint64_t *)((char *)v75 + v77[7]);
          *v80 = v120;
          v80[1] = v67;
          v81 = (uint64_t *)((char *)v75 + v77[8]);
          *v81 = v123;
          v81[1] = v68;
          v82 = (uint64_t *)((char *)v75 + v77[9]);
          *v82 = v135;
          v82[1] = v69;
          v83 = (uint64_t *)((char *)v75 + v77[10]);
          *v83 = 0;
          v83[1] = 0;
          v84 = (uint64_t *)((char *)v75 + v77[11]);
          v85 = v129;
          *v84 = v128;
          v84[1] = v85;
          v86 = (uint64_t *)((char *)v75 + v77[12]);
          v87 = v121;
          *v86 = v122;
          v86[1] = v87;
          *((_BYTE *)v75 + v77[13]) = 1;
          v88 = 0x65676172657641;
          if (v73)
            v88 = v124;
          v89 = 0xE700000000000000;
          if (v73)
            v89 = v73;
          v90 = (uint64_t *)((char *)v75 + v77[14]);
          *v90 = v88;
          v90[1] = v89;
          lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type MultipleDataPointView and conformance MultipleDataPointView, (uint64_t (*)(uint64_t))type metadata accessor for MultipleDataPointView, (uint64_t)&protocol conformance descriptor for MultipleDataPointView);
          v91 = AnyView.init<A>(_:)();
LABEL_24:
          v135 = v52;
          v133 = v91;
          outlined init with copy of GenericMedCompletedLogModel(v61, v49, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          v103 = (*(unsigned __int8 *)(v137 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
          v104 = (v138 + v103 + 7) & 0xFFFFFFFFFFFFFFF8;
          v105 = swift_allocObject();
          outlined init with take of GenericMedCompletedLogSnippet(v49, v105 + v103, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          *(_QWORD *)(v105 + v104) = v91;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
          lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>, MEMORY[0x24BDF5420]);
          v106 = v144;
          SnippetBody.init(content:)();
          v107 = v143;
          outlined init with copy of GenericMedCompletedLogModel(v136, v143, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
          v109 = v153;
          v108 = v154;
          v110 = v140;
          v111 = v155;
          (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v140, v153, v155);
          v112 = (*(unsigned __int8 *)(v141 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
          v113 = (v142 + *(unsigned __int8 *)(v108 + 80) + v112) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
          v114 = swift_allocObject();
          outlined init with take of GenericMedCompletedLogSnippet(v107, v114 + v112, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
          v151((char *)(v114 + v113), v110, v111);
          v115 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>, MEMORY[0x24BEADBF8]);
          v117 = v147;
          v116 = v148;
          View.componentTapped(isNavigation:perform:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v145 + 8))(v106, v116);
          v119 = v149;
          v118 = v150;
          (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v146, v117, v150);
          v157 = v116;
          v158 = v115;
          swift_getOpaqueTypeConformance2();
          v46 = AnyView.init<A>(_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v119 + 8))(v117, v118);
          outlined destroy of GenericMedCompletedLogModel((uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
          (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v111);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 8))(v135, v127);
          goto LABEL_8;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        outlined destroy of GenericMedCompletedLogModel(v56, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
        v58 = v40;
        v62 = v40;
        v60 = v135;
        outlined init with copy of GenericMedCompletedLogModel(v62, v135, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
      }
      v63 = *(_QWORD *)(v60 + v39[10] + 8);
      outlined destroy of GenericMedCompletedLogModel(v60, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
      v61 = (uint64_t)v134;
      if (v63)
        goto LABEL_16;
      swift_bridgeObjectRelease();
      v40 = v58;
      v44 = v154;
      v47 = v151;
    }
    v92 = (uint64_t *)(v40 + v39[13]);
    v93 = v92[1];
    if (!v93)
    {
      v46 = AnyView.init<A>(_:)();
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v153, v155);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 8))(v52, v127);
      goto LABEL_8;
    }
    v151 = v47;
    v94 = *v92;
    v95 = *v38;
    v96 = v38[1];
    v135 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v97 = SpeakableString.print.getter();
    v99 = v98;
    v100 = v130;
    v101 = (uint64_t)v130 + *(int *)(v131 + 32);
    v136 = v40;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v40, v101, &demangling cache variable for type metadata for AppPunchout?);
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    *v100 = EnvironmentObject.init()();
    v100[1] = v102;
    v100[2] = v94;
    v100[3] = v93;
    v100[4] = v135;
    v100[5] = v96;
    v100[6] = v97;
    v100[7] = v99;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SingleDataPointView and conformance SingleDataPointView, (uint64_t (*)(uint64_t))type metadata accessor for SingleDataPointView, (uint64_t)"ٍn\a8m");
    v91 = AnyView.init<A>(_:)();
    v61 = (uint64_t)v134;
    goto LABEL_24;
  }
  v41 = &demangling cache variable for type metadata for SpeakableString?;
  v42 = (uint64_t)v32;
LABEL_6:
  outlined destroy of Font.Design?(v42, v41);
LABEL_7:
  result = AnyView.init<A>(_:)();
  v46 = result;
LABEL_8:
  *v156 = v46;
  return result;
}

void closure #2 in OxygenSaturationQuerySnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for OxygenSaturationQuerySnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_24A4C4E10()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + v2;
  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v0 + v2, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = v3 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A4C4F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Model;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t Snippet;

  Snippet = type metadata accessor for OxygenSaturationQuerySnippet();
  v1 = *(_QWORD *)(Snippet - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for AppPunchout();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = v0 + ((v2 + 16) & ~v2);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + 16) & ~v2), v3);
  Model = type metadata accessor for OxygenSaturationQueryModel();
  v8 = v6 + *(int *)(Model + 36);
  v9 = type metadata accessor for SpeakableString();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v6 + *(int *)(Model + 64);
  v12 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((((v2 + 16) & ~v2) + v14 + v5) & ~v5), v3);
  return swift_deallocObject();
}

void partial apply for closure #2 in OxygenSaturationQuerySnippet.body.getter()
{
  uint64_t v0;
  uint64_t Snippet;
  unint64_t v2;

  Snippet = type metadata accessor for OxygenSaturationQuerySnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in OxygenSaturationQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in OxygenSaturationQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for OxygenSaturationQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Model;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for AppPunchout();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
    v11 = Model[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = Model[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = Model[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v20 = Model[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = Model[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for SpeakableString();
    v27 = *(_QWORD *)(v26 - 8);
    v74 = v27;
    v75 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = Model[10];
    v30 = (uint64_t *)((char *)a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = Model[11];
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = Model[12];
    v38 = (uint64_t *)((char *)a1 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = Model[13];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = Model[14];
    v46 = (uint64_t *)((char *)a1 + v45);
    v47 = (uint64_t *)((char *)a2 + v45);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    v49 = Model[15];
    v50 = (uint64_t *)((char *)a1 + v49);
    v51 = (uint64_t *)((char *)a2 + v49);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = Model[16];
    __dst = (char *)a1 + v53;
    v54 = (char *)a2 + v53;
    v55 = type metadata accessor for SnippetHeaderModel();
    v73 = *(_QWORD *)(v55 - 8);
    v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v76(v54, 1, v55))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dst, v54, v75);
      v57 = *(int *)(v55 + 20);
      v58 = &__dst[v57];
      v59 = &v54[v57];
      v60 = *((_QWORD *)v59 + 1);
      *(_QWORD *)v58 = *(_QWORD *)v59;
      *((_QWORD *)v58 + 1) = v60;
      v61 = *(int *)(v55 + 24);
      v62 = &__dst[v61];
      v63 = &v54[v61];
      v64 = *((_QWORD *)v63 + 1);
      *(_QWORD *)v62 = *(_QWORD *)v63;
      *((_QWORD *)v62 + 1) = v64;
      v65 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65(__dst, 0, 1, v55);
    }
    v66 = *(int *)(a3 + 20);
    v67 = (uint64_t *)((char *)a1 + v66);
    v68 = (char *)a2 + v66;
    v70 = *(void **)v68;
    v69 = *((_QWORD *)v68 + 1);
    *v67 = v70;
    v67[1] = v69;
    v71 = v70;
  }
  return a1;
}

void destroy for OxygenSaturationQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Model;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  Model = type metadata accessor for OxygenSaturationQueryModel();
  v7 = a1 + *(int *)(Model + 36);
  v8 = type metadata accessor for SpeakableString();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(Model + 64);
  v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

char *initializeWithCopy for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *Model;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  char *__dst;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  v9 = Model[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = Model[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = Model[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  v72 = v25;
  v73 = v24;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = Model[10];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = v30;
  v31 = Model[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = Model[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v38;
  v39 = Model[13];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = Model[14];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = v46;
  v47 = Model[15];
  v48 = &a1[v47];
  v49 = &a2[v47];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = Model[16];
  __dst = &a1[v51];
  v52 = &a2[v51];
  v53 = type metadata accessor for SnippetHeaderModel();
  v71 = *(_QWORD *)(v53 - 8);
  v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v74(v52, 1, v53))
  {
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(__dst, v52, v73);
    v55 = *(int *)(v53 + 20);
    v56 = &__dst[v55];
    v57 = &v52[v55];
    v58 = *((_QWORD *)v57 + 1);
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *((_QWORD *)v56 + 1) = v58;
    v59 = *(int *)(v53 + 24);
    v60 = &__dst[v59];
    v61 = &v52[v59];
    v62 = *((_QWORD *)v61 + 1);
    *(_QWORD *)v60 = *(_QWORD *)v61;
    *((_QWORD *)v60 + 1) = v62;
    v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63(__dst, 0, 1, v53);
  }
  v64 = *(int *)(a3 + 20);
  v65 = &a1[v64];
  v66 = &a2[v64];
  v68 = *(void **)v66;
  v67 = *((_QWORD *)v66 + 1);
  *(_QWORD *)v65 = v68;
  *((_QWORD *)v65 + 1) = v67;
  v69 = v68;
  return a1;
}

char *assignWithCopy for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  v16 = Model[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = Model[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = Model[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  v28 = Model[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for SpeakableString();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_13:
  v37 = Model[10];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = Model[11];
  v41 = &a1[v40];
  v42 = &a2[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = Model[12];
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = Model[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = Model[14];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = Model[15];
  v53 = &a1[v52];
  v54 = &a2[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = Model[16];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = type metadata accessor for SnippetHeaderModel();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v56, v57, v31);
      v78 = *(int *)(v58 + 20);
      v79 = &v56[v78];
      v80 = &v57[v78];
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *((_QWORD *)v79 + 1) = *((_QWORD *)v80 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v81 = *(int *)(v58 + 24);
      v82 = &v56[v81];
      v83 = &v57[v81];
      *(_QWORD *)v82 = *(_QWORD *)v83;
      *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v62)
  {
LABEL_18:
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v56, v57, v31);
  v63 = *(int *)(v58 + 20);
  v64 = &v56[v63];
  v65 = &v57[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);
  v66 = *(int *)(v58 + 24);
  v67 = &v56[v66];
  v68 = &v57[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_QWORD *)v67 + 1) = *((_QWORD *)v68 + 1);
  v69 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v56, 0, 1, v58);
LABEL_19:
  v71 = *(int *)(a3 + 20);
  v72 = &a1[v71];
  v73 = &a2[v71];
  v74 = *(void **)&a1[v71];
  v75 = *(void **)v73;
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v76 = v75;

  *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
  return a1;
}

char *initializeWithTake for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = Model[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = Model[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = Model[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = Model[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for SpeakableString();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_OWORD *)&a1[Model[10]] = *(_OWORD *)&a2[Model[10]];
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  v28 = Model[16];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for SnippetHeaderModel();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v30, v25);
    *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
    *(_OWORD *)&v29[*(int *)(v31 + 24)] = *(_OWORD *)&v30[*(int *)(v31 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  void *v75;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = Model[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = Model[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_13:
  v33 = Model[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = Model[11];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v43 = Model[12];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  v48 = Model[13];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v53 = Model[14];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v57 = *(_QWORD *)v55;
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = v57;
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRelease();
  v58 = Model[15];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v62 = *(_QWORD *)v60;
  v61 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v59 = v62;
  *((_QWORD *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  v63 = Model[16];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = type metadata accessor for SnippetHeaderModel();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68(v65, 1, v66);
  if (!v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v64, v65, v27);
      v77 = *(int *)(v66 + 20);
      v78 = &v64[v77];
      v79 = &v65[v77];
      v81 = *(_QWORD *)v79;
      v80 = *((_QWORD *)v79 + 1);
      *(_QWORD *)v78 = v81;
      *((_QWORD *)v78 + 1) = v80;
      swift_bridgeObjectRelease();
      v82 = *(int *)(v66 + 24);
      v83 = &v64[v82];
      v84 = &v65[v82];
      v86 = *(_QWORD *)v84;
      v85 = *((_QWORD *)v84 + 1);
      *(_QWORD *)v83 = v86;
      *((_QWORD *)v83 + 1) = v85;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v70)
  {
LABEL_18:
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v64, v65, v27);
  *(_OWORD *)&v64[*(int *)(v66 + 20)] = *(_OWORD *)&v65[*(int *)(v66 + 20)];
  *(_OWORD *)&v64[*(int *)(v66 + 24)] = *(_OWORD *)&v65[*(int *)(v66 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
LABEL_19:
  v72 = *(int *)(a3 + 20);
  v73 = &a1[v72];
  v74 = &a2[v72];
  v75 = *(void **)&a1[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;

  *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQuerySnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4C664C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model;
  uint64_t v7;
  unint64_t v9;
  int v10;

  Model = type metadata accessor for OxygenSaturationQueryModel();
  v7 = *(_QWORD *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Model);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for OxygenSaturationQuerySnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4C66E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OxygenSaturationQueryModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for OxygenSaturationQuerySnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OxygenSaturationQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t WatchRingsSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  result = *(unsigned __int8 *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  return result;
}

void __swiftcall WatchRingsSnippet.init(model:)(WellnessUI::WatchRingsSnippet *__return_ptr retstr, WellnessUI::WatchRingsModel *model)
{
  Swift::Double value;
  Swift::Bool is_nil;
  Swift::Double v4;
  Swift::Bool v5;
  Swift::Double v6;
  Swift::Bool v7;
  Swift::Double v8;
  Swift::Bool v9;
  Swift::Double v10;
  Swift::Bool v11;
  Swift::Double v12;
  Swift::Bool v13;

  value = model->exerciseGoalValue.value;
  is_nil = model->exerciseGoalValue.is_nil;
  v4 = model->exerciseTotalValue.value;
  v5 = model->exerciseTotalValue.is_nil;
  v6 = model->moveGoalValue.value;
  v7 = model->moveGoalValue.is_nil;
  v8 = model->moveTotalValue.value;
  v9 = model->moveTotalValue.is_nil;
  v10 = model->standGoalValue.value;
  v11 = model->standGoalValue.is_nil;
  v12 = model->standTotalValue.value;
  v13 = model->standTotalValue.is_nil;
  retstr->model.exerciseGoalValue.value = value;
  retstr->model.exerciseGoalValue.is_nil = is_nil;
  retstr->model.exerciseTotalValue.value = v4;
  retstr->model.exerciseTotalValue.is_nil = v5;
  retstr->model.moveGoalValue.value = v6;
  retstr->model.moveGoalValue.is_nil = v7;
  retstr->model.moveTotalValue.value = v8;
  retstr->model.moveTotalValue.is_nil = v9;
  retstr->model.standGoalValue.value = v10;
  retstr->model.standGoalValue.is_nil = v11;
  retstr->model.standTotalValue.value = v12;
  retstr->model.standTotalValue.is_nil = v13;
}

uint64_t WatchRingsSnippet.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  return SnippetBody.init(content:)();
}

double closure #1 in WatchRingsSnippet.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v2 = static Color.red.getter();
  KeyPath = swift_getKeyPath();
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = MEMORY[0x24BDEBED8];
    result = MEMORY[0x24BD11508](MEMORY[0x24BDED300], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>);
    v2[0] = lazy protocol witness table accessor for type Circle and conformance Circle();
    v2[1] = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x24BDF1020]);
    result = MEMORY[0x24BD11508](MEMORY[0x24BDED300], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Circle and conformance Circle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    result = MEMORY[0x24BD11508](MEMORY[0x24BDF4430], MEMORY[0x24BDF4460]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in WatchRingsSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance WatchRingsSnippet()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  return SnippetBody.init(content:)();
}

ValueMetadata *type metadata accessor for WatchRingsSnippet()
{
  return &type metadata for WatchRingsSnippet;
}

uint64_t sub_24A4C6B18()
{
  return lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type SnippetBody<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>> and conformance SnippetBody<A>, &demangling cache variable for type metadata for SnippetBody<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>>, MEMORY[0x24BEAD9C0]);
}

uint64_t sub_24A4C6B44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24A4C6B6C()
{
  swift_retain();
  return EnvironmentValues.foregroundColor.setter();
}

__n128 MultipleDataPointWithSubTypesView.init(firstRowLabel:firstRowData:firstRowTextData:secondRowLabel:secondRowData:secondRowTextData:unitString:dateLabelString:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __n128 a14, uint64_t a15, uint64_t a16)
{
  __n128 result;

  result = a14;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(__n128 *)(a9 + 128) = a14;
  *(_QWORD *)(a9 + 144) = a15;
  *(_QWORD *)(a9 + 152) = a16;
  return result;
}

uint64_t MultipleDataPointWithSubTypesView.firstRowLabel.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.firstRowData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.firstRowTextData.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[4];
  outlined copy of Text?(v1, v0[5], v0[6], v0[7]);
  return v1;
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MultipleDataPointWithSubTypesView.secondRowLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.secondRowData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.secondRowTextData.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[12];
  outlined copy of Text?(v1, v0[13], v0[14], v0[15]);
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.unitString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.dateLabelString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, _QWORD, uint64_t, uint64_t);
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *);
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  void *v131;
  Swift::String v132;
  Swift::String v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  void *v151;
  void *v152;
  void *v153;
  Swift::String v154;
  Swift::String v155;
  Swift::String v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  Swift::String v186;
  Swift::String v187;
  Swift::String v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t countAndFlagsBits;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  void (*v245)(char *, char *, uint64_t);
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, char *, uint64_t);
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(char *, uint64_t);
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  int v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  void *v282;
  char *v283;
  Swift::String v284;
  uint64_t v285;
  Swift::String v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void (*v290)(char *, uint64_t);
  void (*v291)(char *);
  void (*v292)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v293)(char *, uint64_t, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;

  v321 = type metadata accessor for ComponentStackBottomSpacing();
  v319 = *(_QWORD *)(v321 - 8);
  MEMORY[0x24BDAC7A8](v321);
  v318 = (char *)&v271 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v320 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v316 = *(_QWORD *)(v320 - 8);
  MEMORY[0x24BDAC7A8](v320);
  v315 = (char *)&v271 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.lastComponentBottomSpacing(_:)>>.0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v317 = (char *)&v271 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v271 - v9;
  v324 = type metadata accessor for SeparatorStyle();
  v309 = *(_QWORD *)(v324 - 8);
  MEMORY[0x24BDAC7A8](v324);
  v323 = (char *)&v271 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SimpleItemRichView();
  v327 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v313 = v14;
  v314 = (char *)&v271 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v329 = (char *)&v271 - v15;
  v330 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v322 = *(_QWORD *)(v330 - 8);
  v16 = MEMORY[0x24BDAC7A8](v330);
  v312 = (char *)&v271 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v311 = (char *)&v271 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v325 = (char *)&v271 - v21;
  v310 = v22;
  MEMORY[0x24BDAC7A8](v20);
  v328 = (char *)&v271 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v24);
  v331 = (char *)&v271 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v332 = type metadata accessor for Font.TextStyle();
  v26 = *(_QWORD *)(v332 - 8);
  v27 = MEMORY[0x24BDAC7A8](v332);
  v326 = (char *)&v271 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v271 - v29;
  v31 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v271 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = (void *)v1[19];
  if (!v34
    || (v35 = (void *)v1[1]) == 0
    || (v36 = (void *)v1[9]) == 0
    || (v37 = v1[7], v295 = v1[3], !(v295 | v37)))
  {
    result = AnyView.init<A>(_:)();
    v39 = result;
LABEL_6:
    *a1 = v39;
    return result;
  }
  v284._object = v34;
  v296 = v12;
  v278 = v10;
  v294 = *v1;
  v40 = v1[2];
  v303 = v1[4];
  v304 = v37;
  v302 = v1[5];
  v41 = v1[6];
  v286._countAndFlagsBits = v1[8];
  v286._object = v36;
  v273 = v1[10];
  v274 = v40;
  v42 = v1[11];
  v281 = a1;
  v282 = (void *)v42;
  v43 = v1[12];
  v44 = v1[13];
  v305 = v33;
  v306 = v44;
  v271 = v1[14];
  v272 = v41;
  v45 = v1[16];
  v307 = v1[15];
  v308 = v43;
  v46 = (void *)v1[17];
  v284._countAndFlagsBits = v1[18];
  v279 = v6;
  v280 = v5;
  if (v46)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v47._countAndFlagsBits = 0;
    v47._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v47);
    swift_bridgeObjectRetain();
    v48._countAndFlagsBits = v45;
    v48._object = v46;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v49);
    LocalizedStringKey.init(stringInterpolation:)();
    v50 = Text.init(_:tableName:bundle:comment:)();
    v300 = v51;
    v301 = v50;
    LODWORD(v299) = v52 & 1;
    v53 = v332;
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v30, *MEMORY[0x24BDF1870], v332);
    v298 = *MEMORY[0x24BDF1670];
    v54 = v298;
    v55 = type metadata accessor for Font.Design();
    v56 = *(_QWORD *)(v55 - 8);
    v57 = v30;
    v58 = v331;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v331, v54, v55);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v58, 0, 1, v55);
    static Font.system(_:design:weight:)();
    v59 = (uint64_t)v58;
    v30 = v57;
    outlined destroy of Font.Design?(v59);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v57, v53);
    v61 = v300;
    v60 = v301;
    LOBYTE(v53) = v299;
    v62 = Text.font(_:)();
    v292 = v63;
    v293 = (void (*)(char *, uint64_t, uint64_t))v62;
    LOBYTE(v57) = v64;
    v297 = v65;
    swift_release();
    LODWORD(v290) = v57 & 1;
    outlined consume of Text.Storage(v60, v61, v53);
    swift_bridgeObjectRelease();
    LODWORD(v357) = static HierarchicalShapeStyle.secondary.getter();
    v66 = (uint64_t)v292;
    v67 = (uint64_t)v293;
    v68 = Text.foregroundStyle<A>(_:)();
    v70 = v69;
    v291 = v71;
    v73 = v72 & 1;
    outlined consume of Text.Storage(v67, v66, (char)v290);
    swift_bridgeObjectRelease();
    v74 = Text.bold()();
    v300 = v75;
    v301 = v74;
    v299 = v76;
    LODWORD(v297) = v77;
    v78 = v68;
    v79 = v298;
    outlined consume of Text.Storage(v78, v70, v73);
    swift_bridgeObjectRelease();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    v80 = Text.init(_:tableName:bundle:comment:)();
    v300 = v81;
    v301 = v80;
    v299 = v82;
    LODWORD(v297) = v83;
    v79 = *MEMORY[0x24BDF1670];
  }
  v298 = v79;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v84._countAndFlagsBits = 0;
  v84._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v84);
  v85._countAndFlagsBits = v294;
  v85._object = v35;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v85);
  v86._countAndFlagsBits = 0;
  v86._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v86);
  LocalizedStringKey.init(stringInterpolation:)();
  v87 = Text.init(_:tableName:bundle:comment:)();
  v287 = v88;
  v288 = v87;
  v289 = v89;
  v91 = v90 & 1;
  LODWORD(v285) = *MEMORY[0x24BDF18E0];
  v291 = *(void (**)(char *))(v26 + 104);
  v92 = v332;
  v291(v30);
  v93 = type metadata accessor for Font.Design();
  v94 = *(_QWORD *)(v93 - 8);
  v293 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 104);
  v294 = v93;
  v95 = (uint64_t)v331;
  v293(v331, v79, v93);
  v292 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v94 + 56);
  v292(v95, 0, 1, v93);
  v283 = v30;
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v95);
  v290 = *(void (**)(char *, uint64_t))(v26 + 8);
  v290(v30, v92);
  v96 = v287;
  v97 = v288;
  v98 = Text.font(_:)();
  v100 = v99;
  LOBYTE(v94) = v101;
  swift_release();
  outlined consume of Text.Storage(v97, v96, v91);
  swift_bridgeObjectRelease();
  LODWORD(v357) = static HierarchicalShapeStyle.secondary.getter();
  v102 = Text.foregroundStyle<A>(_:)();
  v104 = v103;
  v106 = v105 & 1;
  outlined consume of Text.Storage(v98, v100, v94 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  v107 = Text.fontWeight(_:)();
  v287 = v108;
  v288 = v107;
  v277 = v109;
  v289 = v110;
  outlined consume of Text.Storage(v102, v104, v106);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v111._countAndFlagsBits = 0;
  v111._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v111);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v286);
  v112._countAndFlagsBits = 0;
  v112._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v112);
  LocalizedStringKey.init(stringInterpolation:)();
  v113 = Text.init(_:tableName:bundle:comment:)();
  v115 = v114;
  LOBYTE(v97) = v116 & 1;
  v117 = (uint64_t)v283;
  ((void (*)(char *, _QWORD, uint64_t))v291)(v283, v285, v332);
  v118 = (uint64_t)v331;
  v119 = v294;
  v293(v331, v298, v294);
  v292(v118, 0, 1, v119);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v118);
  v290((char *)v117, v332);
  v120 = Text.font(_:)();
  v122 = v121;
  LOBYTE(v98) = v123;
  swift_release();
  outlined consume of Text.Storage(v113, v115, v97);
  swift_bridgeObjectRelease();
  LODWORD(v357) = static HierarchicalShapeStyle.secondary.getter();
  v124 = Text.foregroundStyle<A>(_:)();
  v126 = v125;
  LOBYTE(v115) = v127 & 1;
  outlined consume of Text.Storage(v120, v122, v98 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  v128 = Text.fontWeight(_:)();
  v285 = v129;
  v286._countAndFlagsBits = v128;
  v276 = v130;
  v286._object = v131;
  outlined consume of Text.Storage(v124, v126, v115);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v132._countAndFlagsBits = 0;
  v132._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v132);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v284);
  v133._countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v133);
  LocalizedStringKey.init(stringInterpolation:)();
  v134 = Text.init(_:tableName:bundle:comment:)();
  v136 = v135;
  LOBYTE(v120) = v137 & 1;
  static Font.footnote.getter();
  v138 = Text.font(_:)();
  v140 = v139;
  v142 = v141;
  swift_release();
  outlined consume of Text.Storage(v134, v136, v120);
  swift_bridgeObjectRelease();
  LODWORD(v357) = static HierarchicalShapeStyle.secondary.getter();
  v143 = Text.foregroundStyle<A>(_:)();
  v145 = v144;
  LOBYTE(v120) = v146 & 1;
  outlined consume of Text.Storage(v138, v140, v142 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.regular.getter();
  v147 = Text.fontWeight(_:)();
  v149 = v148;
  LODWORD(v97) = v150;
  v152 = v151;
  outlined consume of Text.Storage(v143, v145, v120);
  swift_bridgeObjectRelease();
  result = ((uint64_t (*)(char *, _QWORD, uint64_t))v291)(v326, *MEMORY[0x24BDF1888], v332);
  v153 = (void *)v295;
  v284._countAndFlagsBits = v147;
  v284._object = v152;
  v283 = (char *)v149;
  v275 = v97;
  if (v295)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v154._countAndFlagsBits = 0;
    v154._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v154);
    swift_bridgeObjectRetain();
    v155._countAndFlagsBits = v274;
    v155._object = v153;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v155);
    swift_bridgeObjectRelease();
    v156._countAndFlagsBits = 0;
    v156._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v156);
    LocalizedStringKey.init(stringInterpolation:)();
    v157 = Text.init(_:tableName:bundle:comment:)();
    v159 = v158;
    v161 = v160 & 1;
    v162 = (uint64_t)v331;
    v163 = v294;
    v293(v331, v298, v294);
    v292(v162, 0, 1, v163);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v162);
    v164 = Text.font(_:)();
    v166 = v165;
    v168 = v167;
    swift_release();
    outlined consume of Text.Storage(v157, v159, v161);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    v169 = Text.fontWeight(_:)();
    v171 = v170;
    v173 = v172 & 1;
    outlined consume of Text.Storage(v164, v166, v168 & 1);
    swift_bridgeObjectRelease();
    v174 = v297;
    v176 = v300;
    v175 = v301;
    v177 = v299;
    v178 = static Text.+ infix(_:_:)();
    v302 = v179;
    v303 = v178;
    v304 = v180;
    LODWORD(v295) = v181 & 1;
    outlined consume of Text.Storage(v169, v171, v173);
    result = swift_bridgeObjectRelease();
    v183 = v307;
    v182 = v308;
    v184 = v306;
  }
  else
  {
    if (!v304)
    {
      __break(1u);
      goto LABEL_20;
    }
    LODWORD(v295) = v272 & 1;
    outlined copy of Text.Storage(v303, v302, v272 & 1);
    result = swift_bridgeObjectRetain();
    v183 = v307;
    v182 = v308;
    v184 = v306;
    v176 = v300;
    v175 = v301;
    v177 = v299;
    v174 = v297;
  }
  v185 = v282;
  v300 = v176;
  v301 = v175;
  v299 = v177;
  if (v282)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v186._countAndFlagsBits = 0;
    v186._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v186);
    swift_bridgeObjectRetain();
    v187._countAndFlagsBits = v273;
    v187._object = v185;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v187);
    swift_bridgeObjectRelease();
    v188._countAndFlagsBits = 0;
    v188._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v188);
    LocalizedStringKey.init(stringInterpolation:)();
    v189 = Text.init(_:tableName:bundle:comment:)();
    v191 = v190;
    v193 = v192 & 1;
    v194 = (uint64_t)v331;
    LODWORD(v297) = v174;
    v195 = v294;
    v293(v331, v298, v294);
    v292(v194, 0, 1, v195);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v194);
    v196 = Text.font(_:)();
    v198 = v197;
    v200 = v199;
    swift_release();
    outlined consume of Text.Storage(v189, v191, v193);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    v201 = Text.fontWeight(_:)();
    v203 = v202;
    v205 = v204 & 1;
    outlined consume of Text.Storage(v196, v198, v200 & 1);
    swift_bridgeObjectRelease();
    v206 = static Text.+ infix(_:_:)();
    v307 = v207;
    v308 = v206;
    v306 = v208;
    LODWORD(v331) = v209 & 1;
    outlined consume of Text.Storage(v201, v203, v205);
    swift_bridgeObjectRelease();
LABEL_18:
    v210 = v277;
    v359 = MEMORY[0x24BDF1FA0];
    v360 = MEMORY[0x24BEAD6B8];
    v211 = MEMORY[0x24BDF1FA0];
    v212 = MEMORY[0x24BEAD6B8];
    v213 = swift_allocObject();
    v357 = v213;
    v215 = v287;
    v214 = v288;
    *(_QWORD *)(v213 + 16) = v288;
    *(_QWORD *)(v213 + 24) = v215;
    *(_BYTE *)(v213 + 32) = v210 & 1;
    LODWORD(v305) = v210 & 1;
    *(_QWORD *)(v213 + 40) = v289;
    *((_QWORD *)&v355 + 1) = v211;
    v356 = v212;
    v216 = swift_allocObject();
    *(_QWORD *)&v354 = v216;
    v217 = v302;
    v218 = v303;
    *(_QWORD *)(v216 + 16) = v303;
    *(_QWORD *)(v216 + 24) = v217;
    v302 = v217;
    v303 = v218;
    LODWORD(v212) = v295;
    *(_BYTE *)(v216 + 32) = v295;
    LODWORD(v295) = v212;
    v219 = v304;
    *(_QWORD *)(v216 + 40) = v304;
    v304 = v219;
    v353 = 0;
    v351 = 0u;
    v352 = 0u;
    v350 = 0;
    v348 = 0u;
    v349 = 0u;
    v347 = 0;
    v345 = 0u;
    v346 = 0u;
    v344 = 0;
    v342 = 0u;
    v343 = 0u;
    v341 = 0;
    v339 = 0u;
    v340 = 0u;
    v338 = 0;
    v336 = 0u;
    v337 = 0u;
    v335 = 0;
    v333 = 0u;
    v334 = 0u;
    outlined copy of Text.Storage(v214, v215, v210 & 1);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v218, v217, v212);
    swift_bridgeObjectRetain();
    v220 = v329;
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    LODWORD(v294) = *MEMORY[0x24BEAB510];
    v221 = v309;
    v293 = *(void (**)(char *, uint64_t, uint64_t))(v309 + 104);
    v223 = v323;
    v222 = v324;
    ((void (*)(char *))v293)(v323);
    v292 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView();
    v224 = v296;
    View.separators(_:isOverride:)();
    v291 = *(void (**)(char *))(v221 + 8);
    ((void (*)(char *, uint64_t))v291)(v223, v222);
    v309 = *(_QWORD *)(v327 + 8);
    ((void (*)(char *, uint64_t))v309)(v220, v224);
    v225 = MEMORY[0x24BDF1FA0];
    v359 = MEMORY[0x24BDF1FA0];
    v226 = MEMORY[0x24BEAD6B8];
    v360 = MEMORY[0x24BEAD6B8];
    v227 = swift_allocObject();
    v357 = v227;
    v228 = v285;
    countAndFlagsBits = v286._countAndFlagsBits;
    *(_QWORD *)(v227 + 16) = v286._countAndFlagsBits;
    *(_QWORD *)(v227 + 24) = v228;
    LODWORD(v220) = v276 & 1;
    *(_BYTE *)(v227 + 32) = v276 & 1;
    v298 = v220;
    *(_QWORD *)(v227 + 40) = v286._object;
    *((_QWORD *)&v355 + 1) = v225;
    v356 = v226;
    v230 = swift_allocObject();
    *(_QWORD *)&v354 = v230;
    v232 = v307;
    v231 = v308;
    v233 = v306;
    *(_QWORD *)(v230 + 16) = v308;
    *(_QWORD *)(v230 + 24) = v233;
    v306 = v233;
    LODWORD(v218) = (_DWORD)v331;
    *(_BYTE *)(v230 + 32) = (_BYTE)v331;
    LODWORD(v331) = v218;
    *(_QWORD *)(v230 + 40) = v232;
    v353 = 0;
    v351 = 0u;
    v352 = 0u;
    v350 = 0;
    v348 = 0u;
    v349 = 0u;
    v347 = 0;
    v345 = 0u;
    v346 = 0u;
    v344 = 0;
    v342 = 0u;
    v343 = 0u;
    v341 = 0;
    v339 = 0u;
    v340 = 0u;
    v338 = 0;
    v336 = 0u;
    v337 = 0u;
    v335 = 0;
    v333 = 0u;
    v334 = 0u;
    outlined copy of Text.Storage(countAndFlagsBits, v228, (char)v220);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v231, v233, v218);
    swift_bridgeObjectRetain();
    v234 = v329;
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    v235 = v323;
    v236 = v324;
    v293(v323, v294, v324);
    v237 = v325;
    v238 = v296;
    View.separators(_:isOverride:)();
    ((void (*)(char *, uint64_t))v291)(v235, v236);
    ((void (*)(char *, uint64_t))v309)(v234, v238);
    v359 = MEMORY[0x24BDF1FA0];
    v360 = MEMORY[0x24BEAD6B8];
    v239 = swift_allocObject();
    v357 = v239;
    v240 = (uint64_t)v283;
    v241 = v284._countAndFlagsBits;
    *(_QWORD *)(v239 + 16) = v284._countAndFlagsBits;
    *(_QWORD *)(v239 + 24) = v240;
    v242 = v240;
    LODWORD(v240) = v275 & 1;
    *(_BYTE *)(v239 + 32) = v240;
    LODWORD(v324) = v240;
    *(_QWORD *)(v239 + 40) = v284._object;
    v356 = 0;
    v354 = 0u;
    v355 = 0u;
    v353 = 0;
    v351 = 0u;
    v352 = 0u;
    v350 = 0;
    v348 = 0u;
    v349 = 0u;
    v347 = 0;
    v345 = 0u;
    v346 = 0u;
    v344 = 0;
    v342 = 0u;
    v343 = 0u;
    v341 = 0;
    v339 = 0u;
    v340 = 0u;
    v338 = 0;
    v336 = 0u;
    v337 = 0u;
    v335 = 0;
    v333 = 0u;
    v334 = 0u;
    outlined copy of Text.Storage(v241, v242, v240);
    swift_bridgeObjectRetain();
    v243 = v234;
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    v244 = v322;
    v245 = *(void (**)(char *, char *, uint64_t))(v322 + 16);
    v246 = v311;
    v247 = v330;
    v245(v311, v328, v330);
    v248 = v312;
    v245(v312, v237, v247);
    v249 = v327;
    v250 = v314;
    (*(void (**)(char *, char *, uint64_t))(v327 + 16))(v314, v243, v238);
    v251 = *(unsigned __int8 *)(v244 + 80);
    v252 = (v251 + 16) & ~v251;
    v253 = (v310 + v251 + v252) & ~v251;
    v254 = (v310 + *(unsigned __int8 *)(v249 + 80) + v253) & ~(unint64_t)*(unsigned __int8 *)(v249 + 80);
    v255 = swift_allocObject();
    v256 = v255 + v252;
    v257 = *(void (**)(uint64_t, char *, uint64_t))(v244 + 32);
    v258 = v246;
    v259 = v330;
    v257(v256, v258, v330);
    v257(v255 + v253, v248, v259);
    (*(void (**)(unint64_t, char *, uint64_t))(v327 + 32))(v255 + v254, v250, v238);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>, MEMORY[0x24BDF5420]);
    v260 = v315;
    SnippetBody.init(content:)();
    v262 = v318;
    v261 = v319;
    v263 = v321;
    (*(void (**)(char *, _QWORD, uint64_t))(v319 + 104))(v318, *MEMORY[0x24BEAE360], v321);
    v264 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, MEMORY[0x24BEADBF8]);
    v265 = v278;
    v266 = v320;
    View.lastComponentBottomSpacing(_:)();
    (*(void (**)(char *, uint64_t))(v261 + 8))(v262, v263);
    (*(void (**)(char *, uint64_t))(v316 + 8))(v260, v266);
    v268 = v279;
    v267 = v280;
    (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v317, v265, v280);
    v357 = v266;
    v358 = v264;
    swift_getOpaqueTypeConformance2();
    v39 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage(v301, v299, v297 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v284._countAndFlagsBits, (uint64_t)v283, v324);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v286._countAndFlagsBits, v285, v298);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v288, v287, (char)v305);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v303, v302, v295);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v308, v306, (char)v331);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v268 + 8))(v265, v267);
    ((void (*)(char *, uint64_t))v309)(v329, v296);
    v269 = *(void (**)(char *, uint64_t))(v244 + 8);
    v270 = v330;
    v269(v325, v330);
    v269(v328, v270);
    result = ((uint64_t (*)(char *, uint64_t))v290)(v326, v332);
    a1 = v281;
    goto LABEL_6;
  }
  if (v183)
  {
    LODWORD(v331) = v271 & 1;
    outlined copy of Text.Storage(v182, v184, v271 & 1);
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Font.Design?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A4C84DC()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView;
  if (!lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView)
  {
    v1 = type metadata accessor for SimpleItemRichView();
    result = MEMORY[0x24BD11508](MEMORY[0x24BEADE78], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView);
  }
  return result;
}

uint64_t closure #1 in MultipleDataPointWithSubTypesView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;

  v43 = a3;
  v40 = a1;
  v41 = a2;
  v46 = a4;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v37 = *(_QWORD *)(v9 - 8);
  v10 = v37;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v47 = (char *)&v36 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v36 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v36 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v20 = type metadata accessor for SimpleItemRichView();
  v21 = lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView();
  v48 = v20;
  v49 = v21;
  swift_getOpaqueTypeConformance2();
  v38 = v19;
  View.componentSpacing(top:bottom:)();
  v36 = v17;
  View.componentSpacing(top:bottom:)();
  swift_checkMetadataState();
  View.componentSpacing(top:bottom:)();
  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v23 = v47;
  v22(v47, v19, v9);
  v24 = v39;
  v22(v39, v17, v9);
  v25 = v44;
  v26 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v27 = v42;
  v28 = v8;
  v29 = v8;
  v30 = v45;
  v26(v42, v28, v45);
  v31 = v46;
  v22(v46, v23, v9);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v22(&v31[*(int *)(v32 + 48)], v24, v9);
  v26(&v31[*(int *)(v32 + 64)], v27, v30);
  v33 = *(void (**)(char *, uint64_t))(v25 + 8);
  v33(v29, v30);
  v34 = *(void (**)(char *, uint64_t))(v37 + 8);
  v34(v36, v9);
  v34(v38, v9);
  v33(v27, v30);
  v34(v24, v9);
  return ((uint64_t (*)(char *, uint64_t))v34)(v47, v9);
}

uint64_t sub_24A4C8830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = type metadata accessor for SimpleItemRichView();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v5 + *(unsigned __int8 *)(v8 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  v10(v0 + v6, v1);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v9, v7);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MultipleDataPointWithSubTypesView.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0)
                 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (v6 + v4 + v5) & ~v4;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SimpleItemRichView() - 8) + 80);
  return closure #1 in MultipleDataPointWithSubTypesView.body.getter(v1 + v5, v1 + v7, v1 + ((v6 + v8 + v7) & ~v8), a1);
}

uint64_t associated type witness table accessor for View.Body : View in MultipleDataPointWithSubTypesView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for MultipleDataPointWithSubTypesView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 120))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MultipleDataPointWithSubTypesView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v7, v8, v9);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 96);
    v15 = *(_QWORD *)(a2 + 104);
    v16 = *(_BYTE *)(a2 + 112);
    outlined copy of Text.Storage(v14, v15, v16);
    *(_QWORD *)(a1 + 96) = v14;
    *(_QWORD *)(a1 + 104) = v15;
    *(_BYTE *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 120) = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
  }
  v18 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v18;
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultipleDataPointWithSubTypesView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a2 + 40);
      v9 = *(_BYTE *)(a2 + 48);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = v8;
      *(_BYTE *)(a1 + 48) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      v16 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 32);
    v14 = *(_QWORD *)(a2 + 40);
    v15 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v14;
    *(_BYTE *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 48);
    *v4 = *v5;
    *(_OWORD *)(a1 + 48) = v17;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = (_OWORD *)(a1 + 96);
  v19 = (_OWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v20)
    {
      v21 = *(_QWORD *)(a2 + 96);
      v22 = *(_QWORD *)(a2 + 104);
      v23 = *(_BYTE *)(a2 + 112);
      outlined copy of Text.Storage(v21, v22, v23);
      v24 = *(_QWORD *)(a1 + 96);
      v25 = *(_QWORD *)(a1 + 104);
      v26 = *(_BYTE *)(a1 + 112);
      *(_QWORD *)(a1 + 96) = v21;
      *(_QWORD *)(a1 + 104) = v22;
      *(_BYTE *)(a1 + 112) = v23;
      outlined consume of Text.Storage(v24, v25, v26);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 96);
      v30 = *(_OWORD *)(a2 + 112);
      *v18 = *v19;
      *(_OWORD *)(a1 + 112) = v30;
    }
  }
  else if (v20)
  {
    v27 = *(_QWORD *)(a2 + 96);
    v28 = *(_QWORD *)(a2 + 104);
    v29 = *(_BYTE *)(a2 + 112);
    outlined copy of Text.Storage(v27, v28, v29);
    *(_QWORD *)(a1 + 96) = v27;
    *(_QWORD *)(a1 + 104) = v28;
    *(_BYTE *)(a1 + 112) = v29;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 112);
    *v18 = *v19;
    *(_OWORD *)(a1 + 112) = v31;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Text(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDF1FA0] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for MultipleDataPointWithSubTypesView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {
      v7 = *(_BYTE *)(a2 + 48);
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_BYTE *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 48) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 56) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
LABEL_6:
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 120))
  {
LABEL_10:
    v19 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(a2 + 120);
  if (!v14)
  {
    outlined destroy of Text(a1 + 96);
    goto LABEL_10;
  }
  v15 = *(_BYTE *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = *(_BYTE *)(a1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = v15;
  outlined consume of Text.Storage(v16, v17, v18);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease();
LABEL_11:
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultipleDataPointWithSubTypesView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MultipleDataPointWithSubTypesView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultipleDataPointWithSubTypesView()
{
  return &type metadata for MultipleDataPointWithSubTypesView;
}

uint64_t sub_24A4C9008()
{
  return MEMORY[0x24BDF4768];
}

uint64_t GenericButtonModel.label.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericButtonModel.label.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GenericButtonModel.label.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericButtonModel.punchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GenericButtonModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenericButtonModel;
  if (!type metadata singleton initialization cache for GenericButtonModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GenericButtonModel.punchout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GenericButtonModel.punchout.modify())()
{
  type metadata accessor for GenericButtonModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericButtonModel.init(label:punchout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v5 = (char *)a4 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  v6 = type metadata accessor for URL();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GenericButtonModel.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericButtonModel.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x74756F68636E7570;
  else
    return 0x6C6562616CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericButtonModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized GenericButtonModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericButtonModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericButtonModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericButtonModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GenericButtonModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericButtonModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for GenericButtonModel();
    v8[14] = 1;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericButtonModel.CodingKeys, &unk_251BD4340);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericButtonModel.CodingKeys, &unk_251BD4340);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericButtonModel.CodingKeys, &unk_251BD4340);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericButtonModel.CodingKeys, &unk_251BD4340);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

uint64_t GenericButtonModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v22 = a2;
  v4 = type metadata accessor for URL();
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericButtonModel.CodingKeys>);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GenericButtonModel();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v20 = a1;
  v21 = v6;
  v12 = v11;
  v14 = v23;
  v13 = v24;
  v15 = v25;
  v16 = v26;
  v28 = 0;
  *v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v17;
  v27 = 1;
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v16);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v12 + *(int *)(v9 + 20), v14, v15);
  outlined init with copy of GenericButtonModel((uint64_t)v12, v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  return outlined destroy of GenericButtonModel((uint64_t)v12);
}

uint64_t outlined init with copy of GenericButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenericButtonModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GenericButtonModel(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GenericButtonModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Decodable in GenericButtonModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type GenericButtonModel and conformance GenericButtonModel, (uint64_t (*)(uint64_t))type metadata accessor for GenericButtonModel, (uint64_t)&protocol conformance descriptor for GenericButtonModel);
}

uint64_t base witness table accessor for Encodable in GenericButtonModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type GenericButtonModel and conformance GenericButtonModel, (uint64_t (*)(uint64_t))type metadata accessor for GenericButtonModel, (uint64_t)&protocol conformance descriptor for GenericButtonModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericButtonModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericButtonModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericButtonModel(_QWORD *a1)
{
  return GenericButtonModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericButtonModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for GenericButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for GenericButtonModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for GenericButtonModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for GenericButtonModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for GenericButtonModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4C9A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GenericButtonModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4C9AA4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for GenericButtonModel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericButtonModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24A4C9C68 + 4 * byte_24A4EB8D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24A4C9C9C + 4 * asc_24A4EB8D0[v4]))();
}

uint64_t sub_24A4C9C9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4C9CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4C9CACLL);
  return result;
}

uint64_t sub_24A4C9CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4C9CC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24A4C9CC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4C9CCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for GenericButtonModel.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for GenericButtonModel.CodingKeys()
{
  return &unk_251BD4340;
}

uint64_t specialized GenericButtonModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F68636E7570 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SnippetHeaderModel.categoryLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SpeakableString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SnippetHeaderModel.categoryListIconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SnippetHeaderModel() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for SnippetHeaderModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SnippetHeaderModel;
  if (!type metadata singleton initialization cache for SnippetHeaderModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SnippetHeaderModel.categoryIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SnippetHeaderModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;

  v12 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  result = type metadata accessor for SnippetHeaderModel();
  v14 = (_QWORD *)(a6 + *(int *)(result + 20));
  *v14 = a2;
  v14[1] = a3;
  v15 = (_QWORD *)(a6 + *(int *)(result + 24));
  *v15 = a4;
  v15[1] = a5;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SnippetHeaderModel.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000014;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0x79726F6765746163;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SnippetHeaderModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SnippetHeaderModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SnippetHeaderModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SnippetHeaderModel.CodingKeys()
{
  lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SnippetHeaderModel.CodingKeys()
{
  lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SnippetHeaderModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SnippetHeaderModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for SnippetHeaderModel();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SnippetHeaderModel.CodingKeys, &unk_251BD4498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SnippetHeaderModel.CodingKeys, &unk_251BD4498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for SnippetHeaderModel.CodingKeys, &unk_251BD4498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

uint64_t SnippetHeaderModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;

  v24 = a2;
  v25 = type metadata accessor for SpeakableString();
  v3 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v26 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SnippetHeaderModel.CodingKeys>);
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SnippetHeaderModel();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();
  v27 = v7;
  v11 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v29 = v5;
  v32 = 0;
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
  v12 = v25;
  v13 = v26;
  v14 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v13, v12);
  v31 = 1;
  v15 = KeyedDecodingContainer.decode(_:forKey:)();
  v16 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *v16 = v15;
  v16[1] = v17;
  v30 = 2;
  v18 = KeyedDecodingContainer.decode(_:forKey:)();
  v19 = v14;
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v28);
  v22 = (uint64_t *)&v10[*(int *)(v8 + 24)];
  *v22 = v18;
  v22[1] = v21;
  outlined init with copy of SnippetHeaderModel((uint64_t)v10, v24);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of SnippetHeaderModel((uint64_t)v10);
}

uint64_t outlined init with copy of SnippetHeaderModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SnippetHeaderModel(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Decodable in SnippetHeaderModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
}

uint64_t base witness table accessor for Encodable in SnippetHeaderModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SnippetHeaderModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SnippetHeaderModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SnippetHeaderModel(_QWORD *a1)
{
  return SnippetHeaderModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SnippetHeaderModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SnippetHeaderModel(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4CA9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SpeakableString();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4CAA4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SpeakableString();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for SnippetHeaderModel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SpeakableString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24A4CAC18 + 4 * byte_24A4EBAD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24A4CAC4C + 4 * byte_24A4EBAD0[v4]))();
}

uint64_t sub_24A4CAC4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4CAC54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4CAC5CLL);
  return result;
}

uint64_t sub_24A4CAC68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4CAC70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24A4CAC74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4CAC7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SnippetHeaderModel.CodingKeys()
{
  return &unk_251BD4498;
}

uint64_t specialized SnippetHeaderModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79726F6765746163 && a2 == 0xED00006C6562614CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A4F3DD0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3DF0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t SingleActivitySummarySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t SingleActivitySummarySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = type metadata accessor for SingleActivitySummarySnippet();
  v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v5 = EnvironmentObject.init()();
  v5[1] = v6;
  v7 = (_QWORD *)(a2 + *(int *)(v4 + 24));
  *v7 = 0;
  v7[1] = 0;
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t type metadata accessor for SingleActivitySummarySnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SingleActivitySummarySnippet;
  if (!type metadata singleton initialization cache for SingleActivitySummarySnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SingleActivitySummarySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  Swift::String v68;
  _QWORD *v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  char v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  void (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t result;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  void (*v131)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v132)(char *, uint64_t);
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t, uint64_t);
  char *v153;
  uint64_t *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v2 = v1;
  v154 = a1;
  v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  v3 = *(_QWORD *)(v142 - 8);
  v4 = MEMORY[0x24BDAC7A8](v142);
  v150 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v148 = (char *)&v121 - v6;
  v7 = type metadata accessor for FactItemHeroNumberView();
  v144 = *(_QWORD *)(v7 - 8);
  v145 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v143 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v151 = *(_QWORD *)(v139 - 8);
  v9 = MEMORY[0x24BDAC7A8](v139);
  v146 = v10;
  v147 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v149 = (char *)&v121 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v12);
  v153 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v14);
  v155 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SnippetHeaderView();
  v140 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = v21;
  MEMORY[0x24BDAC7A8](v20);
  v156 = (uint64_t)&v121 - v23;
  v24 = type metadata accessor for Font.TextStyle();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v31 = (void *)v2[4];
  if (v31 && (v32 = (void *)v2[6]) != 0)
  {
    v126 = v2[3];
    v127 = v2[5];
    v33 = *MEMORY[0x24BDF1888];
    v130 = v3;
    v152 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 104);
    v124 = v31;
    v125 = v32;
    v137 = v30;
    v138 = (char *)&v121 - v29;
    v152((char *)&v121 - v29, v33, v30);
    v34 = type metadata accessor for SingleActivitySummaryModel();
    outlined init with copy of SnippetHeaderModel?((uint64_t)v2 + *(int *)(v34 + 44), (uint64_t)v18);
    v35 = (uint64_t *)&v22[*(int *)(v19 + 20)];
    v128 = v22;
    *v35 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    v36 = (uint64_t *)&v22[*(int *)(v19 + 24)];
    *v36 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?((uint64_t)v18, (uint64_t)v22);
    outlined init with take of GenericMedCompletedLogSnippet((uint64_t)v22, v156, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v37);
    v122 = v2;
    v39 = v2[7];
    v38 = (void *)v2[8];
    swift_bridgeObjectRetain();
    v40._countAndFlagsBits = v39;
    v40._object = v38;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v41);
    LocalizedStringKey.init(stringInterpolation:)();
    v42 = Text.init(_:tableName:bundle:comment:)();
    v44 = v43;
    v136 = v45;
    v47 = v46 & 1;
    v48 = v137;
    v152(v28, *MEMORY[0x24BDF1870], v137);
    LODWORD(v152) = *MEMORY[0x24BDF1670];
    v49 = v152;
    v50 = type metadata accessor for Font.Design();
    v51 = *(_QWORD *)(v50 - 8);
    v132 = *(void (**)(char *, uint64_t))(v51 + 104);
    v52 = (uint64_t)v153;
    v53 = v49;
    v54 = v50;
    v123 = v50;
    v132(v153, v53);
    v131 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56);
    v131(v52, 0, 1, v54);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v52);
    v129 = *(void (**)(char *, uint64_t))(v25 + 8);
    v129(v28, v48);
    v55 = Text.font(_:)();
    v57 = v56;
    LOBYTE(v52) = v58;
    swift_release();
    outlined consume of Text.Storage(v42, v44, v47);
    swift_bridgeObjectRelease();
    LODWORD(v172) = static HierarchicalShapeStyle.secondary.getter();
    v59 = Text.foregroundStyle<A>(_:)();
    v61 = v60;
    v63 = v62 & 1;
    outlined consume of Text.Storage(v55, v57, v52 & 1);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    v64 = Text.fontWeight(_:)();
    v134 = v65;
    v135 = v64;
    v136 = v66;
    v133 = v67 & 1;
    outlined consume of Text.Storage(v59, v61, v63);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v68._countAndFlagsBits = 0;
    v68._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v68);
    v69 = v122;
    v172 = *v122;
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v70);
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 2109216;
    v71._object = (void *)0xE300000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v71);
    v172 = v69[1];
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v72);
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = 0;
    v73._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v73);
    LocalizedStringKey.init(stringInterpolation:)();
    v74 = Text.init(_:tableName:bundle:comment:)();
    v76 = v75;
    LOBYTE(v57) = v77 & 1;
    v78 = (uint64_t)v153;
    v79 = v123;
    ((void (*)(char *, _QWORD, uint64_t))v132)(v153, v152, v123);
    v131(v78, 0, 1, v79);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v78);
    v80 = Text.font(_:)();
    v82 = v81;
    LOBYTE(v55) = v83;
    swift_release();
    outlined consume of Text.Storage(v74, v76, v57);
    swift_bridgeObjectRelease();
    v132 = (void (*)(char *, uint64_t))Text.bold()();
    v152 = v84;
    v153 = v85;
    LODWORD(v57) = v86 & 1;
    outlined consume of Text.Storage(v80, v82, v55 & 1);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v87._countAndFlagsBits = 0;
    v87._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v87);
    v88._countAndFlagsBits = v126;
    v88._object = v124;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v88);
    swift_bridgeObjectRelease();
    v89._countAndFlagsBits = 8236;
    v89._object = (void *)0xE200000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v89);
    v90._countAndFlagsBits = v127;
    v90._object = v125;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v90);
    swift_bridgeObjectRelease();
    v91._countAndFlagsBits = 0;
    v91._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v91);
    LocalizedStringKey.init(stringInterpolation:)();
    v92 = Text.init(_:tableName:bundle:comment:)();
    v94 = v93;
    v155 = v95;
    LODWORD(v78) = v96 & 1;
    v173 = MEMORY[0x24BDF1FA0];
    v174 = MEMORY[0x24BEAD6B8];
    v97 = MEMORY[0x24BDF1FA0];
    v98 = MEMORY[0x24BEAD6B8];
    v99 = swift_allocObject();
    v171 = v98;
    v172 = v99;
    v100 = v132;
    v101 = v152;
    *(_QWORD *)(v99 + 16) = v132;
    *(_QWORD *)(v99 + 24) = v101;
    LODWORD(v131) = v57;
    *(_BYTE *)(v99 + 32) = v57;
    *(_QWORD *)(v99 + 40) = v153;
    v170 = v97;
    v102 = swift_allocObject();
    v168 = 0;
    v169 = v102;
    v104 = v134;
    v103 = v135;
    *(_QWORD *)(v102 + 16) = v135;
    *(_QWORD *)(v102 + 24) = v104;
    LOBYTE(v48) = v133;
    *(_BYTE *)(v102 + 32) = v133;
    *(_QWORD *)(v102 + 40) = v136;
    v166 = 0u;
    v167 = 0u;
    v164 = MEMORY[0x24BDF1FA0];
    v165 = MEMORY[0x24BEAD6B8];
    v105 = swift_allocObject();
    v162 = 0;
    v163 = v105;
    v126 = v94;
    v127 = v92;
    *(_QWORD *)(v105 + 16) = v92;
    *(_QWORD *)(v105 + 24) = v94;
    LODWORD(v125) = v78;
    *(_BYTE *)(v105 + 32) = v78;
    *(_QWORD *)(v105 + 40) = v155;
    v160 = 0u;
    v161 = 0u;
    v159 = 0;
    v157 = 0u;
    v158 = 0u;
    outlined copy of Text.Storage((uint64_t)v100, (uint64_t)v152, (char)v131);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v103, v104, v48);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v92, v94, v78);
    swift_bridgeObjectRetain();
    v106 = v143;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
    v107 = v149;
    v108 = v145;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(char *, uint64_t))(v144 + 8))(v106, v108);
    v109 = (uint64_t)v128;
    outlined init with copy of GenericMedCompletedLogModel(v156, (uint64_t)v128, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    v110 = v151;
    v111 = v147;
    v112 = v139;
    (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v147, v107, v139);
    v113 = (*(unsigned __int8 *)(v140 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
    v114 = (v141 + *(unsigned __int8 *)(v110 + 80) + v113) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
    v115 = swift_allocObject();
    outlined init with take of GenericMedCompletedLogSnippet(v109, v115 + v113, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    (*(void (**)(unint64_t, char *, uint64_t))(v110 + 32))(v115 + v114, v111, v112);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>, MEMORY[0x24BDF5420]);
    v116 = v148;
    SnippetBody.init(content:)();
    v117 = v130;
    v118 = v142;
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v150, v116, v142);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, MEMORY[0x24BEADBF8]);
    v119 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage(v127, v126, (char)v125);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v135, v134, v133);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v132, (uint64_t)v152, (char)v131);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v118);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v107, v112);
    outlined destroy of GenericMedCompletedLogModel(v156, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    result = ((uint64_t (*)(char *, uint64_t))v129)(v138, v137);
  }
  else
  {
    result = AnyView.init<A>(_:)();
    v119 = result;
  }
  *v154 = v119;
  return result;
}

uint64_t closure #1 in SingleActivitySummarySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  v13 = type metadata accessor for SnippetHeaderView();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v23 - v17;
  outlined init with copy of GenericMedCompletedLogModel(a1, (uint64_t)&v23 - v17, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v12, a2, v6);
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v19(v10, (uint64_t)v12, v6);
  outlined init with copy of GenericMedCompletedLogModel((uint64_t)v16, a3, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v19((char *)(a3 + *(int *)(v20 + 48)), (uint64_t)v10, v6);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v12, v6);
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
  v21(v10, v6);
  return outlined destroy of GenericMedCompletedLogModel((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
}

uint64_t sub_24A4CBD70()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A4CBDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 64);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v0 + v3;
  v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v0 + v3, 1, v8))
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v3, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = v7 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  v12 = v7 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v15 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SingleActivitySummarySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for SnippetHeaderView() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0)
                                      - 8)
                          + 80);
  return closure #1 in SingleActivitySummarySnippet.body.getter(v1 + v4, v1 + ((v5 + v6) & ~v6), a1);
}

uint64_t associated type witness table accessor for View.Body : View in SingleActivitySummarySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleActivitySummarySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    a1[10] = a2[10];
    v10 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
    __dst = (char *)v4 + v10;
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for SnippetHeaderModel();
    v37 = *(_QWORD *)(v12 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(__dst, v11, v16);
      v17 = *(int *)(v12 + 20);
      v18 = &__dst[v17];
      v19 = &v11[v17];
      v20 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = v20;
      v21 = *(int *)(v12 + 24);
      v22 = &__dst[v21];
      v23 = &v11[v21];
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(__dst, 0, 1, v12);
    }
    v26 = *(int *)(a3 + 20);
    v27 = *(int *)(a3 + 24);
    v28 = (uint64_t *)((char *)v4 + v26);
    v29 = (char *)a2 + v26;
    v31 = *(void **)v29;
    v30 = *((_QWORD *)v29 + 1);
    *v28 = v31;
    v28[1] = v30;
    v32 = (uint64_t *)((char *)v4 + v27);
    v33 = (uint64_t *)((char *)a2 + v27);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = v31;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  v5 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  uint64_t v35;
  char *__dst;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  __dst = (char *)(a1 + v9);
  v10 = (char *)(a2 + v9);
  v11 = type metadata accessor for SnippetHeaderModel();
  v35 = *(_QWORD *)(v11 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(__dst, v10, v14);
    v15 = *(int *)(v11 + 20);
    v16 = &__dst[v15];
    v17 = &v10[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v19 = *(int *)(v11 + 24);
    v20 = &__dst[v19];
    v21 = &v10[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(__dst, 0, 1, v11);
  }
  v24 = *(int *)(a3 + 20);
  v25 = *(int *)(a3 + 24);
  v26 = (_QWORD *)(a1 + v24);
  v27 = a2 + v24;
  v29 = *(void **)v27;
  v28 = *(_QWORD *)(v27 + 8);
  *v26 = v29;
  v26[1] = v28;
  v30 = (_QWORD *)(a1 + v25);
  v31 = (_QWORD *)(a2 + v25);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = v29;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SingleActivitySummarySnippet(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SnippetHeaderModel();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v33 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v7, v8, v33);
      v34 = *(int *)(v9 + 20);
      v35 = &v7[v34];
      v36 = &v8[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v37 = *(int *)(v9 + 24);
      v38 = &v7[v37];
      v39 = &v8[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v14 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
  v15 = *(int *)(v9 + 20);
  v16 = &v7[v15];
  v17 = &v8[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  v18 = *(int *)(v9 + 24);
  v19 = &v7[v18];
  v20 = &v8[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v7, 0, 1, v9);
LABEL_7:
  v23 = *(int *)(a3 + 20);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (char *)a2 + v23;
  v26 = *(void **)((char *)a1 + v23);
  v27 = *(void **)((char *)a2 + v23);
  *v24 = v27;
  v28 = v27;

  v24[1] = *((_QWORD *)v25 + 1);
  v29 = *(int *)(a3 + 24);
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for SnippetHeaderModel();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    *(_OWORD *)&v7[*(int *)(v9 + 20)] = *(_OWORD *)&v8[*(int *)(v9 + 20)];
    *(_OWORD *)&v7[*(int *)(v9 + 24)] = *(_OWORD *)&v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v30 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v11, v12, v30);
      v31 = *(int *)(v13 + 20);
      v32 = &v11[v31];
      v33 = &v12[v31];
      v35 = *(_QWORD *)v33;
      v34 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = v35;
      *((_QWORD *)v32 + 1) = v34;
      swift_bridgeObjectRelease();
      v36 = *(int *)(v13 + 24);
      v37 = &v11[v36];
      v38 = &v12[v36];
      v40 = *(_QWORD *)v38;
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = v40;
      *((_QWORD *)v37 + 1) = v39;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v18 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v11, v12, v18);
  *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
  *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v20 = *(int *)(a3 + 20);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = *(void **)(a1 + v20);
  *v21 = *v22;

  v21[1] = v22[1];
  v24 = *(int *)(a3 + 24);
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleActivitySummarySnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4CCA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for SingleActivitySummaryModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleActivitySummarySnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4CCB08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SingleActivitySummaryModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for SingleActivitySummarySnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SingleActivitySummaryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A4CCBF4()
{
  return MEMORY[0x24BDF4768];
}

uint64_t GenericMedCompletedLogModel.medStatus.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t GenericMedCompletedLogModel.time.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.time.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.time.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t type metadata accessor for GenericMedCompletedLogModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenericMedCompletedLogModel;
  if (!type metadata singleton initialization cache for GenericMedCompletedLogModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GenericMedCompletedLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*GenericMedCompletedLogModel.appPunchout.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 28));
}

uint64_t GenericMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GenericMedCompletedLogModel();
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.dontDisplayGranularTime.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.sashBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.sashBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.sashBundleID.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.isSmartEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 36));
}

uint64_t GenericMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GenericMedCompletedLogModel();
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.isSmartEnabled.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.loggedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.loggedLabel.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.skippedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.skippedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.skippedLabel.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.takenLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.takenLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.takenLabel.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.allScheduledMedicationsLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.allScheduledMedicationsLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.allScheduledMedicationsLabel.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t GenericMedCompletedLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 56), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*GenericMedCompletedLogModel.snippetHeaderModel.modify())()
{
  type metadata accessor for GenericMedCompletedLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.init(medStatus:givenTime:url:dontDisplayGranularTime:sashBundleID:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:allScheduledMedicationsLabel:snippetHeaderModel:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  Class isa;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v65 = a7;
  v62 = a5;
  v63 = a6;
  v60 = a4;
  v59 = a3;
  v71 = a16;
  v72 = a17;
  v69 = a14;
  v70 = a15;
  v67 = a8;
  v68 = a13;
  v66 = a12;
  v64 = a11;
  v61 = a10;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v20);
  v51 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0xE000000000000000;
  v22 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  v58 = a9 + v22[6];
  v23 = v58;
  v24 = type metadata accessor for AppPunchout();
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v53 = v24;
  v52(v23, 1, 1, v24);
  v55 = v22[7];
  *(_BYTE *)(a9 + v55) = 0;
  v25 = (_QWORD *)(a9 + v22[8]);
  *v25 = 0xD000000000000010;
  v25[1] = 0x800000024A4F3A70;
  v54 = v22[9];
  *(_BYTE *)(a9 + v54) = 0;
  v26 = (_QWORD *)(a9 + v22[10]);
  *v26 = 0;
  v26[1] = 0;
  v27 = (_QWORD *)(a9 + v22[11]);
  *v27 = 0;
  v27[1] = 0;
  v28 = (_QWORD *)(a9 + v22[12]);
  *v28 = 0;
  v28[1] = 0;
  v29 = (_QWORD *)(a9 + v22[13]);
  v57 = v29;
  *v29 = 0;
  v29[1] = 0;
  v30 = a9 + v22[14];
  v56 = v30;
  v31 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *(_BYTE *)a9 = a1;
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  objc_msgSend(v32, sel_setTimeStyle_, 1);
  v33 = a2;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v35 = objc_msgSend(v32, sel_stringFromDate_, isa);

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v38 = v37;

  *(_QWORD *)(a9 + 8) = v36;
  *(_QWORD *)(a9 + 16) = v38;
  v39 = (uint64_t)v51;
  v40 = v59;
  SleepQueryModel.createAppPunchout(url:)(v59);
  outlined destroy of Font.Design?(v40, &demangling cache variable for type metadata for URL?);
  v41 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v33, v41);
  v52(v39, 0, 1, v53);
  outlined assign with take of AppPunchout?(v39, v58, &demangling cache variable for type metadata for AppPunchout?);
  *(_BYTE *)(a9 + v55) = v60;
  swift_bridgeObjectRelease();
  v42 = v63;
  *v25 = v62;
  v25[1] = v42;
  *(_BYTE *)(a9 + v54) = v65;
  swift_bridgeObjectRelease();
  v43 = v61;
  *v26 = v67;
  v26[1] = v43;
  swift_bridgeObjectRelease();
  v44 = v66;
  *v27 = v64;
  v27[1] = v44;
  swift_bridgeObjectRelease();
  v45 = v69;
  *v28 = v68;
  v28[1] = v45;
  v46 = v57;
  swift_bridgeObjectRelease();
  v48 = v71;
  v47 = v72;
  *v46 = v70;
  v46[1] = v48;
  return outlined assign with take of AppPunchout?(v47, v56, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t GenericMedCompletedLogModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4CD598 + 4 * byte_24A4EBDE0[a1]))(0x757461745364656DLL, 0xE900000000000073);
}

uint64_t sub_24A4CD598()
{
  return 1701669236;
}

uint64_t sub_24A4CD5A8()
{
  return 0x68636E7550707061;
}

unint64_t sub_24A4CD5C8()
{
  return 0xD000000000000017;
}

unint64_t sub_24A4CD688()
{
  return 0xD000000000000012;
}

uint64_t sub_24A4CD6A4()
{
  return 0x62614C6E656B6174;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericMedCompletedLogModel.CodingKeys()
{
  unsigned __int8 *v0;

  return GenericMedCompletedLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericMedCompletedLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized GenericMedCompletedLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericMedCompletedLogModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericMedCompletedLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericMedCompletedLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GenericMedCompletedLogModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericMedCompletedLogModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for GenericMedCompletedLogModel();
    v8[13] = 2;
    type metadata accessor for AppPunchout();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericMedCompletedLogModel.CodingKeys, &unk_251BD4688);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericMedCompletedLogModel.CodingKeys, &unk_251BD4688);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericMedCompletedLogModel.CodingKeys, &unk_251BD4688);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericMedCompletedLogModel.CodingKeys, &unk_251BD4688);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

uint64_t GenericMedCompletedLogModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;

  v58 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v59 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericMedCompletedLogModel.CodingKeys>);
  v61 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0xE000000000000000;
  v13 = (uint64_t)&v12[*(int *)(v10 + 24)];
  v14 = type metadata accessor for AppPunchout();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v73 = v13;
  v15(v13, 1, 1, v14);
  v60 = v9[7];
  v12[v60] = 0;
  v16 = &v12[v9[8]];
  *(_QWORD *)v16 = 0xD000000000000010;
  *((_QWORD *)v16 + 1) = 0x800000024A4F3A70;
  v17 = v9[9];
  v12[v17] = 0;
  v18 = &v12[v9[10]];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v71 = v18;
  v72 = v16;
  v19 = &v12[v9[11]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v70 = v19;
  v20 = &v12[v9[12]];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v69 = v20;
  v21 = &v12[v9[13]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v68 = v21;
  v22 = (uint64_t)&v12[v9[14]];
  v23 = type metadata accessor for SnippetHeaderModel();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v66 = v22;
  v24(v22, 1, 1, v23);
  v25 = a1[3];
  v67 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();
  v63 = v8;
  v26 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    v31 = v73;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v67);
    swift_bridgeObjectRelease();
    outlined destroy of Font.Design?(v31, &demangling cache variable for type metadata for AppPunchout?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of Font.Design?(v66, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    v65 = v17;
    v27 = (uint64_t)v62;
    v57 = v23;
    v29 = v60;
    v28 = v61;
    v84 = 0;
    *v12 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v83 = 1;
    *((_QWORD *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)v12 + 2) = v30;
    v82 = 2;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v27, v73, &demangling cache variable for type metadata for AppPunchout?);
    v81 = 3;
    v12[v29] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v80 = 4;
    v32 = KeyedDecodingContainer.decode(_:forKey:)();
    v34 = v33;
    v35 = (uint64_t *)v72;
    swift_bridgeObjectRelease();
    *v35 = v32;
    v35[1] = v34;
    v79 = 5;
    v36 = KeyedDecodingContainer.decode(_:forKey:)();
    v38 = (uint64_t *)v70;
    v37 = (uint64_t *)v71;
    v12[v65] = v36 & 1;
    v78 = 6;
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v65 = v40;
    swift_bridgeObjectRelease();
    v41 = v65;
    *v37 = v39;
    v37[1] = v41;
    v77 = 7;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v65 = v43;
    swift_bridgeObjectRelease();
    v44 = v65;
    *v38 = v42;
    v38[1] = v44;
    v76 = 8;
    v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v65 = v46;
    v47 = v45;
    v48 = v69;
    swift_bridgeObjectRelease();
    v49 = v65;
    *v48 = v47;
    v48[1] = v49;
    v75 = 9;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v52 = v51;
    v53 = (uint64_t *)v68;
    swift_bridgeObjectRelease();
    *v53 = v50;
    v53[1] = v52;
    v74 = 10;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v55 = v63;
    v54 = v64;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v55, v54);
    outlined assign with take of AppPunchout?(v59, v66, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of GenericMedCompletedLogModel((uint64_t)v12, v58);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v67);
    return outlined destroy of GenericMedCompletedLogModel((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for GenericMedCompletedLogModel);
  }
}

uint64_t outlined init with copy of GenericMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenericMedCompletedLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in GenericMedCompletedLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type GenericMedCompletedLogModel and conformance GenericMedCompletedLogModel, (uint64_t (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel, (uint64_t)&protocol conformance descriptor for GenericMedCompletedLogModel);
}

uint64_t base witness table accessor for Encodable in GenericMedCompletedLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type GenericMedCompletedLogModel and conformance GenericMedCompletedLogModel, (uint64_t (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel, (uint64_t)&protocol conformance descriptor for GenericMedCompletedLogModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericMedCompletedLogModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericMedCompletedLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericMedCompletedLogModel(_QWORD *a1)
{
  return GenericMedCompletedLogModel.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for GenericMedCompletedLogModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AppPunchout();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v21 = (_QWORD *)((char *)v4 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[11];
    v25 = a3[12];
    v26 = (_QWORD *)((char *)v4 + v24);
    v27 = (_QWORD *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (_QWORD *)((char *)v4 + v25);
    v30 = (_QWORD *)((char *)a2 + v25);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = a3[13];
    v33 = a3[14];
    v34 = (_QWORD *)((char *)v4 + v32);
    v35 = (_QWORD *)((char *)a2 + v32);
    v36 = v35[1];
    v37 = (char *)a2 + v33;
    __dst = (char *)v4 + v33;
    *v34 = *v35;
    v34[1] = v36;
    v38 = type metadata accessor for SnippetHeaderModel();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v40(v37, 1, v38))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v42 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(__dst, v37, v42);
      v43 = *(int *)(v38 + 20);
      v44 = &__dst[v43];
      v45 = &v37[v43];
      v46 = *((_QWORD *)v45 + 1);
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *((_QWORD *)v44 + 1) = v46;
      v47 = *(int *)(v38 + 24);
      v48 = &__dst[v47];
      v49 = &v37[v47];
      v50 = *((_QWORD *)v49 + 1);
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v51(__dst, 0, 1, v38);
    }
  }
  return v4;
}

uint64_t destroy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 56);
  v8 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = a3[11];
  v23 = a3[12];
  v24 = (_QWORD *)(a1 + v22);
  v25 = (_QWORD *)(a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = (_QWORD *)(a1 + v23);
  v28 = (_QWORD *)(a2 + v23);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = a3[13];
  v31 = a3[14];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  v35 = (char *)(a2 + v31);
  __dst = (char *)(a1 + v31);
  *v32 = *v33;
  v32[1] = v34;
  v36 = type metadata accessor for SnippetHeaderModel();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38(v35, 1, v36))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(__dst, v35, v40);
    v41 = *(int *)(v36 + 20);
    v42 = &__dst[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = *(int *)(v36 + 24);
    v46 = &__dst[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(__dst, 0, 1, v36);
  }
  return a1;
}

uint64_t assignWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for AppPunchout();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = a3[8];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v18 = a3[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[11];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = a3[12];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[13];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = a3[14];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = type metadata accessor for SnippetHeaderModel();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      v48 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v31, v32, v48);
      v49 = *(int *)(v33 + 20);
      v50 = &v31[v49];
      v51 = &v32[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v52 = *(int *)(v33 + 24);
      v53 = &v31[v52];
      v54 = &v32[v52];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v37)
  {
LABEL_12:
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    return a1;
  }
  v38 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v31, v32, v38);
  v39 = *(int *)(v33 + 20);
  v40 = &v31[v39];
  v41 = &v32[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
  v42 = *(int *)(v33 + 24);
  v43 = &v31[v42];
  v44 = &v32[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  v45 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45(v31, 0, 1, v33);
  return a1;
}

uint64_t initializeWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for AppPunchout();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[13];
  v16 = a3[14];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v19 = type metadata accessor for SnippetHeaderModel();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
    *(_OWORD *)&v17[*(int *)(v19 + 20)] = *(_OWORD *)&v18[*(int *)(v19 + 20)];
    *(_OWORD *)&v17[*(int *)(v19 + 24)] = *(_OWORD *)&v18[*(int *)(v19 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  v21 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = a3[12];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v36 = a3[13];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  v41 = a3[14];
  v42 = (char *)(a1 + v41);
  v43 = (char *)(a2 + v41);
  v44 = type metadata accessor for SnippetHeaderModel();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      v52 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 40))(v42, v43, v52);
      v53 = *(int *)(v44 + 20);
      v54 = &v42[v53];
      v55 = &v43[v53];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      *(_QWORD *)v54 = v57;
      *((_QWORD *)v54 + 1) = v56;
      swift_bridgeObjectRelease();
      v58 = *(int *)(v44 + 24);
      v59 = &v42[v58];
      v60 = &v43[v58];
      v62 = *(_QWORD *)v60;
      v61 = *((_QWORD *)v60 + 1);
      *(_QWORD *)v59 = v62;
      *((_QWORD *)v59 + 1) = v61;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v48)
  {
LABEL_12:
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    return a1;
  }
  v49 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v42, v43, v49);
  *(_OWORD *)&v42[*(int *)(v44 + 20)] = *(_OWORD *)&v43[*(int *)(v44 + 20)];
  *(_OWORD *)&v42[*(int *)(v44 + 24)] = *(_OWORD *)&v43[*(int *)(v44 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4CEFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4CF0A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for GenericMedCompletedLogModel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_24A4CF2F4 + 4 * byte_24A4EBDF0[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_24A4CF328 + 4 * byte_24A4EBDEB[v4]))();
}

uint64_t sub_24A4CF328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4CF330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4CF338);
  return result;
}

uint64_t sub_24A4CF344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4CF34CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_24A4CF350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4CF358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GenericMedCompletedLogModel.CodingKeys()
{
  return &unk_251BD4688;
}

uint64_t specialized GenericMedCompletedLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A4F3AD0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646E754268736173 && a2 == 0xEC0000004449656CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4C64657070696B73 && a2 == 0xEC0000006C656261
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x62614C6E656B6174 && a2 == 0xEA00000000006C65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000024A4F3E10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t HeightQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for HeightQueryModel);
}

uint64_t HeightQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for HeightQuerySnippet() + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of GenericMedCompletedLogSnippet(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for HeightQueryModel);
}

uint64_t type metadata accessor for HeightQuerySnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HeightQuerySnippet;
  if (!type metadata singleton initialization cache for HeightQuerySnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HeightQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Snippet;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(unint64_t, char *, uint64_t);
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char v109;
  char v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void (*v135)(unint64_t, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  int *Model;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  char v187;
  uint64_t v188;
  uint64_t v189;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  v159 = *(_QWORD *)(v3 - 8);
  v160 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v157 = (char *)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v162 = *(_QWORD *)(v5 - 8);
  v163 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v158 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v161 = (char *)&v133 - v8;
  v153 = type metadata accessor for FactItemHeroNumberView();
  v151 = *(_QWORD *)(v153 - 8);
  MEMORY[0x24BDAC7A8](v153);
  v150 = (char *)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  MEMORY[0x24BDAC7A8](v152);
  v149 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v11);
  v144 = (uint64_t)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v13);
  v164 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Font.TextStyle();
  v167 = *(_QWORD *)(v15 - 8);
  v168 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v166 = (char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Snippet = type metadata accessor for HeightQuerySnippet();
  v154 = *(_QWORD *)(Snippet - 8);
  v18 = MEMORY[0x24BDAC7A8](Snippet);
  v155 = v19;
  v156 = (uint64_t)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v143 = (uint64_t)&v133 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v21);
  v141 = (uint64_t)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for SnippetHeaderView();
  v145 = *(_QWORD *)(v140 - 8);
  v23 = MEMORY[0x24BDAC7A8](v140);
  v165 = (uint64_t)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = v24;
  MEMORY[0x24BDAC7A8](v23);
  v170 = (uint64_t)&v133 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for AppPunchout();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v147 = v32;
  v148 = (char *)&v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v169 = (char *)&v133 - v33;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v133 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for HeightQueryModel();
  v37 = v1;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + Model[8], (uint64_t)v36, &demangling cache variable for type metadata for SpeakableString?);
  v38 = type metadata accessor for SpeakableString();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38) != 1)
  {
    v139 = a1;
    v138 = SpeakableString.print.getter();
    v41 = v40;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v28, &demangling cache variable for type metadata for AppPunchout?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of Font.Design?((uint64_t)v28, &demangling cache variable for type metadata for AppPunchout?);
      a1 = v139;
      goto LABEL_5;
    }
    v44 = v1;
    v136 = v30;
    v137 = v29;
    v45 = *(void (**)(unint64_t, char *, uint64_t))(v30 + 32);
    v134 = v41;
    v135 = v45;
    v45((unint64_t)v169, v28, v29);
    v46 = v141;
    v47 = Model;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + Model[10], v141, &demangling cache variable for type metadata for SnippetHeaderModel?);
    v48 = v140;
    v49 = v165;
    v50 = (uint64_t *)(v165 + *(int *)(v140 + 20));
    *v50 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    v51 = (uint64_t *)(v49 + *(int *)(v48 + 24));
    *v51 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?(v46, v49);
    outlined init with take of GenericMedCompletedLogSnippet(v49, v170, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    LOBYTE(v51) = *(_BYTE *)(v37 + v47[7] + 8);
    v52 = v143;
    outlined init with copy of GenericMedCompletedLogModel(v37, v143, (uint64_t (*)(_QWORD))type metadata accessor for HeightQuerySnippet);
    if ((v51 & 1) != 0)
    {
      outlined destroy of GenericMedCompletedLogModel(v52, (uint64_t (*)(_QWORD))type metadata accessor for HeightQuerySnippet);
      (*(void (**)(char *, _QWORD, uint64_t))(v167 + 104))(v166, *MEMORY[0x24BDF1888], v168);
    }
    else
    {
      v53 = *(_BYTE *)(v52 + v47[6] + 8);
      outlined destroy of GenericMedCompletedLogModel(v52, (uint64_t (*)(_QWORD))type metadata accessor for HeightQuerySnippet);
      (*(void (**)(char *, _QWORD, uint64_t))(v167 + 104))(v166, *MEMORY[0x24BDF1888], v168);
      if ((v53 & 1) == 0)
      {
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v78._countAndFlagsBits = 0;
        v78._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v78);
        v186 = *(_OWORD *)(v37 + v47[11]);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        v79._countAndFlagsBits = Optional.description.getter();
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v79);
        swift_bridgeObjectRelease();
        v80._countAndFlagsBits = 2108704;
        v80._object = (void *)0xE300000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v80);
        v186 = *(_OWORD *)(v37 + v47[12]);
        v81._countAndFlagsBits = Optional.description.getter();
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v81);
        swift_bridgeObjectRelease();
        v82._countAndFlagsBits = 0;
        v82._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v82);
        LocalizedStringKey.init(stringInterpolation:)();
        Model = (int *)Text.init(_:tableName:bundle:comment:)();
        v84 = v83;
        LODWORD(v143) = v85 & 1;
        v86 = *MEMORY[0x24BDF1670];
        v87 = type metadata accessor for Font.Design();
        v88 = *(_QWORD *)(v87 - 8);
        v89 = v144;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 104))(v144, v86, v87);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v89, 0, 1, v87);
        static Font.system(_:design:weight:)();
        outlined destroy of Font.Design?(v89, &demangling cache variable for type metadata for Font.Design?);
        v90 = v143;
        v91 = Text.font(_:)();
        v93 = v92;
        LOBYTE(v88) = v94;
        swift_release();
        outlined consume of Text.Storage((uint64_t)Model, v84, v90);
        swift_bridgeObjectRelease();
        v95 = Text.bold()();
        v97 = v96;
        LOBYTE(v86) = v98;
        v100 = v99;
        outlined consume of Text.Storage(v91, v93, v88 & 1);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v186 = v95;
        *((_QWORD *)&v186 + 1) = v97;
        v187 = v86 & 1;
        v188 = v100;
        v77 = AnyView.init<A>(_:)();
        v76 = v44;
        goto LABEL_11;
      }
    }
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v54._countAndFlagsBits = 0;
    v54._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v54);
    v186 = *(_OWORD *)(v37 + v47[13]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v55._countAndFlagsBits = Optional.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v55);
    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v56);
    LocalizedStringKey.init(stringInterpolation:)();
    v57 = Text.init(_:tableName:bundle:comment:)();
    v59 = v58;
    v61 = v60 & 1;
    v62 = *MEMORY[0x24BDF1670];
    v63 = type metadata accessor for Font.Design();
    v143 = v44;
    v64 = *(_QWORD *)(v63 - 8);
    v65 = v144;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 104))(v144, v62, v63);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v63);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v65, &demangling cache variable for type metadata for Font.Design?);
    v66 = Text.font(_:)();
    v68 = v67;
    LOBYTE(v64) = v69;
    swift_release();
    outlined consume of Text.Storage(v57, v59, v61);
    swift_bridgeObjectRelease();
    v70 = Text.bold()();
    v72 = v71;
    LOBYTE(v59) = v73;
    v75 = v74;
    outlined consume of Text.Storage(v66, v68, v64 & 1);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v186 = v70;
    *((_QWORD *)&v186 + 1) = v72;
    v187 = v59 & 1;
    v188 = v75;
    v76 = v143;
    v77 = AnyView.init<A>(_:)();
LABEL_11:
    v141 = v77;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v101._countAndFlagsBits = 0;
    v101._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v101);
    v102._countAndFlagsBits = v138;
    v102._object = v134;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v102);
    swift_bridgeObjectRelease();
    v103._countAndFlagsBits = 0;
    v103._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v103);
    LocalizedStringKey.init(stringInterpolation:)();
    v104 = Text.init(_:tableName:bundle:comment:)();
    v143 = v105;
    v144 = v104;
    v106 = v105;
    v108 = v107;
    v164 = v107;
    v188 = MEMORY[0x24BDF4788];
    v189 = MEMORY[0x24BEAD940];
    v110 = v109 & 1;
    LODWORD(Model) = v109 & 1;
    *(_QWORD *)&v186 = v77;
    v185 = 0;
    v183 = 0u;
    v184 = 0u;
    v182 = 0;
    v180 = 0u;
    v181 = 0u;
    v179 = 0;
    v177 = 0u;
    v178 = 0u;
    v175 = MEMORY[0x24BDF1FA0];
    v176 = MEMORY[0x24BEAD6B8];
    v111 = swift_allocObject();
    v173 = 0;
    v174 = v111;
    *(_QWORD *)(v111 + 16) = v104;
    *(_QWORD *)(v111 + 24) = v106;
    *(_BYTE *)(v111 + 32) = v110;
    *(_QWORD *)(v111 + 40) = v108;
    v171 = 0u;
    v172 = 0u;
    swift_retain();
    outlined copy of Text.Storage(v104, v106, v110);
    swift_bridgeObjectRetain();
    v112 = v150;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    v113 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
    v114 = v153;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v112, v114);
    *(_QWORD *)&v186 = v114;
    *((_QWORD *)&v186 + 1) = v113;
    swift_getOpaqueTypeConformance2();
    v115 = AnyView.init<A>(_:)();
    v116 = v165;
    outlined init with copy of GenericMedCompletedLogModel(v170, v165, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    v117 = (*(unsigned __int8 *)(v145 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
    v118 = (v146 + v117 + 7) & 0xFFFFFFFFFFFFFFF8;
    v119 = swift_allocObject();
    outlined init with take of GenericMedCompletedLogSnippet(v116, v119 + v117, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    v153 = v115;
    *(_QWORD *)(v119 + v118) = v115;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>, MEMORY[0x24BDF5420]);
    v120 = v157;
    SnippetBody.init(content:)();
    v121 = v156;
    outlined init with copy of GenericMedCompletedLogModel(v76, v156, (uint64_t (*)(_QWORD))type metadata accessor for HeightQuerySnippet);
    v122 = v136;
    v123 = v137;
    v124 = v148;
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v148, v169, v137);
    v125 = (*(unsigned __int8 *)(v154 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
    v126 = (v155 + *(unsigned __int8 *)(v122 + 80) + v125) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
    v127 = swift_allocObject();
    outlined init with take of GenericMedCompletedLogSnippet(v121, v127 + v125, (uint64_t (*)(_QWORD))type metadata accessor for HeightQuerySnippet);
    v135(v127 + v126, v124, v123);
    v128 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>, MEMORY[0x24BEADBF8]);
    v129 = v160;
    v130 = v161;
    View.componentTapped(isNavigation:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v159 + 8))(v120, v129);
    v132 = v162;
    v131 = v163;
    (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v158, v130, v163);
    *(_QWORD *)&v186 = v129;
    *((_QWORD *)&v186 + 1) = v128;
    swift_getOpaqueTypeConformance2();
    v43 = AnyView.init<A>(_:)();
    swift_release();
    outlined consume of Text.Storage(v144, v143, (char)Model);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v132 + 8))(v130, v131);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v166, v168);
    outlined destroy of GenericMedCompletedLogModel(v170, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    result = (*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v169, v123);
    a1 = v139;
    goto LABEL_12;
  }
  outlined destroy of Font.Design?((uint64_t)v36, &demangling cache variable for type metadata for SpeakableString?);
LABEL_5:
  result = AnyView.init<A>(_:)();
  v43 = result;
LABEL_12:
  *a1 = v43;
  return result;
}

void closure #2 in HeightQuerySnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for HeightQuerySnippet() + 20));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_24A4D094C()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A4D097C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SnippetHeaderView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + v2;
  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v0 + v2, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = v3 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A4D0AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Model;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t Snippet;
  uint64_t v16;

  Snippet = type metadata accessor for HeightQuerySnippet();
  v1 = *(_QWORD *)(Snippet - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for AppPunchout();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v16 = v0;
  v6 = v0 + ((v2 + 16) & ~v2);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + 16) & ~v2), v3);
  Model = type metadata accessor for HeightQueryModel();
  v8 = v6 + *(int *)(Model + 32);
  v9 = type metadata accessor for SpeakableString();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = v6 + *(int *)(Model + 40);
  v12 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v16 + ((((v2 + 16) & ~v2) + v14 + v5) & ~v5), v3);
  return swift_deallocObject();
}

void partial apply for closure #2 in HeightQuerySnippet.body.getter()
{
  uint64_t v0;
  uint64_t Snippet;
  unint64_t v2;

  Snippet = type metadata accessor for HeightQuerySnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(Snippet - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in HeightQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in HeightQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for HeightQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  void *v58;
  id v59;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    Model = (int *)type metadata accessor for HeightQueryModel();
    v12 = Model[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = Model[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = Model[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v19[8] = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v21 = Model[8];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for SpeakableString();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    *((_BYTE *)a1 + Model[9]) = *((_BYTE *)a2 + Model[9]);
    v27 = Model[10];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for SnippetHeaderModel();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v29, v24);
      v33 = *(int *)(v30 + 20);
      v34 = &v28[v33];
      v35 = &v29[v33];
      v36 = *((_QWORD *)v35 + 1);
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *((_QWORD *)v34 + 1) = v36;
      v37 = *(int *)(v30 + 24);
      v38 = &v28[v37];
      v39 = &v29[v37];
      v40 = *((_QWORD *)v39 + 1);
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *((_QWORD *)v38 + 1) = v40;
      v41 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41(v28, 0, 1, v30);
    }
    v42 = Model[11];
    v43 = (uint64_t *)((char *)a1 + v42);
    v44 = (uint64_t *)((char *)a2 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = Model[12];
    v47 = (uint64_t *)((char *)a1 + v46);
    v48 = (uint64_t *)((char *)a2 + v46);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = Model[13];
    v51 = (uint64_t *)((char *)a1 + v50);
    v52 = (uint64_t *)((char *)a2 + v50);
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    v54 = *(int *)(a3 + 20);
    v55 = (uint64_t *)((char *)a1 + v54);
    v56 = (char *)a2 + v54;
    v58 = *(void **)v56;
    v57 = *((_QWORD *)v56 + 1);
    *v55 = v58;
    v55[1] = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59 = v58;
  }
  return a1;
}

void destroy for HeightQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Model;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  Model = type metadata accessor for HeightQueryModel();
  v7 = a1 + *(int *)(Model + 32);
  v8 = type metadata accessor for SpeakableString();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = a1 + *(int *)(Model + 40);
  v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

char *initializeWithCopy for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void *v56;
  id v57;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for HeightQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = Model[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = Model[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = Model[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for SpeakableString();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a1[Model[9]] = a2[Model[9]];
  v25 = Model[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for SnippetHeaderModel();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v27, v22);
    v31 = *(int *)(v28 + 20);
    v32 = &v26[v31];
    v33 = &v27[v31];
    v34 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    v35 = *(int *)(v28 + 24);
    v36 = &v26[v35];
    v37 = &v27[v35];
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_QWORD *)v36 + 1) = v38;
    v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39(v26, 0, 1, v28);
  }
  v40 = Model[11];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = v43;
  v44 = Model[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = Model[13];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *((_QWORD *)v49 + 1) = v51;
  v52 = *(int *)(a3 + 20);
  v53 = &a1[v52];
  v54 = &a2[v52];
  v56 = *(void **)v54;
  v55 = *((_QWORD *)v54 + 1);
  *(_QWORD *)v53 = v56;
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = v56;
  return a1;
}

char *assignWithCopy for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for HeightQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  v16 = Model[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = Model[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = Model[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  v71 = v28;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_13:
  a1[Model[9]] = a2[Model[9]];
  v33 = Model[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for SnippetHeaderModel();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v34, v35, v27);
      v65 = *(int *)(v36 + 20);
      v66 = &v34[v65];
      v67 = &v35[v65];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v68 = *(int *)(v36 + 24);
      v69 = &v34[v68];
      v70 = &v35[v68];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v40)
  {
LABEL_18:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v34, v35, v27);
  v41 = *(int *)(v36 + 20);
  v42 = &v34[v41];
  v43 = &v35[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  v44 = *(int *)(v36 + 24);
  v45 = &v34[v44];
  v46 = &v35[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  v47 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47(v34, 0, 1, v36);
LABEL_19:
  v49 = Model[11];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = Model[12];
  v53 = &a1[v52];
  v54 = &a2[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = Model[13];
  v56 = &a1[v55];
  v57 = &a2[v55];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v58 = *(int *)(a3 + 20);
  v59 = &a1[v58];
  v60 = &a2[v58];
  v61 = *(void **)&a1[v58];
  v62 = *(void **)v60;
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v63 = v62;

  *((_QWORD *)v59 + 1) = *((_QWORD *)v60 + 1);
  return a1;
}

char *initializeWithTake for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Model;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for HeightQueryModel();
  v10 = Model[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = Model[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = Model[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = Model[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for SpeakableString();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a1[Model[9]] = a2[Model[9]];
  v25 = Model[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for SnippetHeaderModel();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v27, v22);
    *(_OWORD *)&v26[*(int *)(v28 + 20)] = *(_OWORD *)&v27[*(int *)(v28 + 20)];
    *(_OWORD *)&v26[*(int *)(v28 + 24)] = *(_OWORD *)&v27[*(int *)(v28 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v5 = type metadata accessor for AppPunchout();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for HeightQueryModel();
  v12 = Model[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = Model[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = Model[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = Model[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  v69 = v25;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  a1[Model[9]] = a2[Model[9]];
  v30 = Model[10];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for SnippetHeaderModel();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 40))(v31, v32, v24);
      v59 = *(int *)(v33 + 20);
      v60 = &v31[v59];
      v61 = &v32[v59];
      v63 = *(_QWORD *)v61;
      v62 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = v63;
      *((_QWORD *)v60 + 1) = v62;
      swift_bridgeObjectRelease();
      v64 = *(int *)(v33 + 24);
      v65 = &v31[v64];
      v66 = &v32[v64];
      v68 = *(_QWORD *)v66;
      v67 = *((_QWORD *)v66 + 1);
      *(_QWORD *)v65 = v68;
      *((_QWORD *)v65 + 1) = v67;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v31, v32, v24);
  *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
  *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  v39 = Model[11];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v44 = Model[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v49 = Model[13];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v53 = *(_QWORD *)v51;
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = v53;
  *((_QWORD *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  v54 = *(int *)(a3 + 20);
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = *(void **)&a1[v54];
  *(_QWORD *)v55 = *(_QWORD *)v56;

  *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeightQuerySnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4D1F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model;
  uint64_t v7;
  unint64_t v9;
  int v10;

  Model = type metadata accessor for HeightQueryModel();
  v7 = *(_QWORD *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Model);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for HeightQuerySnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4D1FC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HeightQueryModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for HeightQuerySnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HeightQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A4D20B0()
{
  return MEMORY[0x24BDF4768];
}

void Image.init(fileName:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjCClassFromMetadata;
  id v5;
  void *v6;
  id v7;
  id v8;

  type metadata accessor for Dummy #1 in Image.init(fileName:)();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v6 = (void *)MEMORY[0x24BD11028](a1, a2);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_withConfiguration_, v6, v5, 0);

  if (v7)
  {
    v8 = v7;
    Image.init(uiImage:)();

  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for Dummy #1 in Image.init(fileName:)()
{
  return objc_opt_self();
}

uint64_t __deallocating_deinit in Dummy #1 in Image.init(fileName:)()
{
  return swift_deallocClassInstance();
}

uint64_t HeightQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t HeightQueryModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*HeightQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 20));
}

uint64_t type metadata accessor for HeightQueryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HeightQueryModel;
  if (!type metadata singleton initialization cache for HeightQueryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HeightQueryModel.height.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for HeightQueryModel();
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*HeightQueryModel.height.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.maxHeight.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 24));
}

uint64_t HeightQueryModel.maxHeight.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for HeightQueryModel();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*HeightQueryModel.maxHeight.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.minHeight.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 28));
}

uint64_t HeightQueryModel.minHeight.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for HeightQueryModel();
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*HeightQueryModel.minHeight.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for HeightQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 32), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t HeightQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for HeightQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 32), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*HeightQueryModel.dateLabel.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.isDifferenceNegligible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 36));
}

uint64_t HeightQueryModel.isDifferenceNegligible.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HeightQueryModel();
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*HeightQueryModel.isDifferenceNegligible.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for HeightQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t HeightQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for HeightQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 40), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*HeightQueryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.minHeightSymbolic.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HeightQueryModel.minHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HeightQueryModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.minHeightSymbolic.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.maxHeightSymbolic.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HeightQueryModel.maxHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HeightQueryModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.maxHeightSymbolic.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.heightSymbolic.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HeightQueryModel.heightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HeightQueryModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.heightSymbolic.modify())()
{
  type metadata accessor for HeightQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.init(height:maxHeight:minHeight:dateLabel:isDifferenceNegligible:unit:url:headerModel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *Model;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  _BOOL4 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  int v56;
  _BOOL4 v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v62 = a8;
  v61 = a5;
  v59 = a3;
  v63 = a12;
  v64 = a10;
  v65 = a11;
  v66 = a7;
  v55 = (a2 & 1) == 0;
  v56 = a2;
  v57 = (a4 & 1) == 0;
  v60 = (a6 & 1) == 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AppPunchout();
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v58(a9, 1, 1, v19);
  Model = (int *)type metadata accessor for HeightQueryModel();
  v53 = a9 + Model[8];
  v21 = v53;
  v22 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v54 = a9 + Model[10];
  v23 = v54;
  v24 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = (uint64_t *)(a9 + Model[11]);
  *v25 = 0;
  v25[1] = 0;
  v26 = (uint64_t *)(a9 + Model[12]);
  *v26 = 0;
  v26[1] = 0;
  v27 = (uint64_t *)(a9 + Model[13]);
  v28 = (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  v29 = v56;
  if (v55 && v28)
    v30 = 0;
  else
    v30 = a1;
  *v27 = 0;
  v27[1] = 0;
  v31 = a9 + Model[5];
  *(_QWORD *)v31 = v30;
  *(_BYTE *)(v31 + 8) = (v29 | v28) & 1;
  v32 = v59;
  v33 = (v59 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v57 && v33)
    v32 = 0;
  v34 = a4 | v33;
  v35 = a9 + Model[6];
  *(_QWORD *)v35 = v32;
  *(_BYTE *)(v35 + 8) = v34 & 1;
  v36 = v61;
  v37 = (v61 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v60 && v37)
    v36 = 0;
  v38 = a6 | v37;
  v39 = a9 + Model[7];
  *(_QWORD *)v39 = v36;
  *(_BYTE *)(v39 + 8) = v38 & 1;
  *(_BYTE *)(a9 + Model[9]) = v62;
  outlined assign with copy of SpeakableString?(v66, v53, &demangling cache variable for type metadata for SpeakableString?);
  SleepQueryModel.createAppPunchout(url:)(v65);
  v58((uint64_t)v18, 0, 1, v19);
  outlined assign with take of AppPunchout?((uint64_t)v18, a9, &demangling cache variable for type metadata for AppPunchout?);
  v40 = v63;
  outlined assign with copy of SpeakableString?(v63, v54, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v41 = v64;
  v42 = HeightQueryModel.getFormattedSymbolicString(value:unit:)(*(_QWORD *)v39, *(_BYTE *)(v39 + 8), v64);
  v44 = v43;
  swift_bridgeObjectRelease();
  *v25 = v42;
  v25[1] = v44;
  v45 = HeightQueryModel.getFormattedSymbolicString(value:unit:)(*(_QWORD *)v35, *(_BYTE *)(v35 + 8), v41);
  v47 = v46;
  swift_bridgeObjectRelease();
  *v26 = v45;
  v26[1] = v47;
  v48 = HeightQueryModel.getFormattedSymbolicString(value:unit:)(*(_QWORD *)v31, *(_BYTE *)(v31 + 8), v41);
  v50 = v49;
  outlined destroy of Font.Design?(v40, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v65, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v41, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of Font.Design?(v66, &demangling cache variable for type metadata for SpeakableString?);
  result = swift_bridgeObjectRelease();
  *v27 = v48;
  v27[1] = v50;
  return result;
}

uint64_t HeightQueryModel.getFormattedSymbolicString(value:unit:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = 0;
  if ((a2 & 1) == 0)
  {
    outlined init with copy of Environment<ColorSchemeContrast>.Content(a3, (uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v18(v12, 1, v13) == 1)
    {
      v19 = (uint64_t)v12;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
      type metadata accessor for DialogPersonHeight.Builder();
      swift_allocObject();
      DialogPersonHeight.Builder.init()();
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
      swift_release();
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v16, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
      swift_release();
      outlined destroy of Font.Design?((uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
      dispatch thunk of DialogAbstractMeasurement.Builder.build()();
      swift_release();
      v20 = v24;
      dispatch thunk of DialogPersonHeight.symbolic.getter();
      if (v18(v20, 1, v13) != 1)
      {
        v17 = SpeakableString.print.getter();
        swift_release();
        v21 = *(void (**)(char *, uint64_t))(v14 + 8);
        v21(v16, v13);
        v21(v20, v13);
        return v17;
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      swift_release();
      v19 = (uint64_t)v20;
    }
    outlined destroy of Font.Design?(v19, &demangling cache variable for type metadata for SpeakableString?);
    return 0;
  }
  return v17;
}

uint64_t HeightQueryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4D2DB8 + 4 * a7[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A4D2DB8()
{
  return 0x746867696568;
}

uint64_t sub_24A4D2DCC()
{
  return 0x686769654878616DLL;
}

uint64_t sub_24A4D2DF4()
{
  return 0x6562614C65746164;
}

unint64_t sub_24A4D2E14()
{
  return 0xD000000000000016;
}

unint64_t sub_24A4D2E4C()
{
  return 0xD000000000000011;
}

uint64_t sub_24A4D2E74()
{
  return 0x7953746867696568;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HeightQueryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return HeightQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HeightQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized HeightQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance HeightQueryModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HeightQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HeightQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t HeightQueryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HeightQueryModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for HeightQueryModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HeightQueryModel.CodingKeys, &unk_251BD48A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HeightQueryModel.CodingKeys, &unk_251BD48A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HeightQueryModel.CodingKeys, &unk_251BD48A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for HeightQueryModel.CodingKeys, &unk_251BD48A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

uint64_t HeightQueryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *Model;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;

  v56 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v5);
  v59 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v7);
  v60 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HeightQueryModel.CodingKeys>);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for HeightQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v13 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AppPunchout();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v58 = v14;
  v15(v13, 1, 1);
  v16 = &v13[Model[5]];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = &v13[Model[6]];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = &v13[Model[7]];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = (uint64_t)&v13[Model[8]];
  v20 = type metadata accessor for SpeakableString();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v67 = v19;
  v21(v19, 1, 1, v20);
  v22 = (uint64_t)&v13[Model[10]];
  v23 = type metadata accessor for SnippetHeaderModel();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v66 = v22;
  v24(v22, 1, 1, v23);
  v25 = &v13[Model[11]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v69 = v25;
  v70 = v13;
  v26 = &v13[Model[12]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v68 = v26;
  v27 = &v13[Model[13]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v28 = a1[3];
  v63 = v27;
  v64 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();
  v29 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29)
  {
    v31 = v66;
    v30 = v67;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
    outlined destroy of Font.Design?((uint64_t)v70, &demangling cache variable for type metadata for AppPunchout?);
    outlined destroy of Font.Design?(v30, &demangling cache variable for type metadata for SpeakableString?);
    outlined destroy of Font.Design?(v31, &demangling cache variable for type metadata for SnippetHeaderModel?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v32 = v16;
    v65 = (uint64_t *)v17;
    v55[1] = v23;
    v55[2] = v20;
    v33 = (uint64_t)v59;
    v81 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v34 = (uint64_t)v60;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v35 = (uint64_t *)v69;
    outlined assign with take of AppPunchout?(v34, (uint64_t)v70, &demangling cache variable for type metadata for AppPunchout?);
    v80 = 1;
    *(_QWORD *)v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v32[8] = v36 & 1;
    v79 = 2;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v38 = v65;
    *v65 = v37;
    *((_BYTE *)v38 + 8) = v39 & 1;
    v78 = 3;
    *(_QWORD *)v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v18[8] = v41 & 1;
    v77 = 4;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v33, v67, &demangling cache variable for type metadata for SpeakableString?);
    v76 = 5;
    v70[Model[9]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v75 = 6;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v42 = (uint64_t)v57;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v42, v66, &demangling cache variable for type metadata for SnippetHeaderModel?);
    v74 = 7;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v45 = v44;
    swift_bridgeObjectRelease();
    *v35 = v43;
    v35[1] = v45;
    v73 = 8;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v48 = v47;
    v49 = (uint64_t *)v68;
    swift_bridgeObjectRelease();
    *v49 = v46;
    v49[1] = v48;
    v72 = 9;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v71, v62);
    v53 = (uint64_t *)v63;
    swift_bridgeObjectRelease();
    *v53 = v50;
    v53[1] = v52;
    v54 = (uint64_t)v70;
    outlined init with copy of HeightQueryModel((uint64_t)v70, v56);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
    return outlined destroy of GenericMedCompletedLogModel(v54, (uint64_t (*)(_QWORD))type metadata accessor for HeightQueryModel);
  }
}

uint64_t outlined init with copy of HeightQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model;

  Model = type metadata accessor for HeightQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in HeightQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type HeightQueryModel and conformance HeightQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for HeightQueryModel, (uint64_t)&protocol conformance descriptor for HeightQueryModel);
}

uint64_t base witness table accessor for Encodable in HeightQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type HeightQueryModel and conformance HeightQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for HeightQueryModel, (uint64_t)&protocol conformance descriptor for HeightQueryModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance HeightQueryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HeightQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HeightQueryModel(_QWORD *a1)
{
  return HeightQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HeightQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    v23 = type metadata accessor for SpeakableString();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for SnippetHeaderModel();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v28, v23);
      v32 = *(int *)(v29 + 20);
      v33 = &v27[v32];
      v34 = &v28[v32];
      v35 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = v35;
      v36 = *(int *)(v29 + 24);
      v37 = &v27[v36];
      v38 = &v28[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v27, 0, 1, v29);
    }
    v41 = a3[11];
    v42 = a3[12];
    v43 = (uint64_t *)((char *)a1 + v41);
    v44 = (uint64_t *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = (uint64_t *)((char *)a1 + v42);
    v47 = (uint64_t *)((char *)a2 + v42);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    v49 = a3[13];
    v50 = (uint64_t *)((char *)a1 + v49);
    v51 = (uint64_t *)((char *)a2 + v49);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HeightQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for SpeakableString();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = a1 + *(int *)(a2 + 40);
  v10 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SnippetHeaderModel();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v26, v21);
    v30 = *(int *)(v27 + 20);
    v31 = &v25[v30];
    v32 = &v26[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = *(int *)(v27 + 24);
    v35 = &v25[v34];
    v36 = &v26[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v25, 0, 1, v27);
  }
  v39 = a3[11];
  v40 = a3[12];
  v41 = &a1[v39];
  v42 = &a2[v39];
  v43 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = v43;
  v44 = &a1[v40];
  v45 = &a2[v40];
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = v46;
  v47 = a3[13];
  v48 = &a1[v47];
  v49 = &a2[v47];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  v65 = v28;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_13:
  a1[a3[9]] = a2[a3[9]];
  v33 = a3[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for SnippetHeaderModel();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 24))(v34, v35, v27);
      v59 = *(int *)(v36 + 20);
      v60 = &v34[v59];
      v61 = &v35[v59];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v62 = *(int *)(v36 + 24);
      v63 = &v34[v62];
      v64 = &v35[v62];
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v40)
  {
LABEL_18:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v34, v35, v27);
  v41 = *(int *)(v36 + 20);
  v42 = &v34[v41];
  v43 = &v35[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  v44 = *(int *)(v36 + 24);
  v45 = &v34[v44];
  v46 = &v35[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  v47 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47(v34, 0, 1, v36);
LABEL_19:
  v49 = a3[11];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = a3[12];
  v53 = &a1[v52];
  v54 = &a2[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = a3[13];
  v56 = &a1[v55];
  v57 = &a2[v55];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SnippetHeaderModel();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v25, v26, v21);
    *(_OWORD *)&v25[*(int *)(v27 + 20)] = *(_OWORD *)&v26[*(int *)(v27 + 20)];
    *(_OWORD *)&v25[*(int *)(v27 + 24)] = *(_OWORD *)&v26[*(int *)(v27 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  return a1;
}

char *assignWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  v65 = v25;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  v30 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for SnippetHeaderModel();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v31, v32, v24);
      v55 = *(int *)(v33 + 20);
      v56 = &v31[v55];
      v57 = &v32[v55];
      v59 = *(_QWORD *)v57;
      v58 = *((_QWORD *)v57 + 1);
      *(_QWORD *)v56 = v59;
      *((_QWORD *)v56 + 1) = v58;
      swift_bridgeObjectRelease();
      v60 = *(int *)(v33 + 24);
      v61 = &v31[v60];
      v62 = &v32[v60];
      v64 = *(_QWORD *)v62;
      v63 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = v64;
      *((_QWORD *)v61 + 1) = v63;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v31, v32, v24);
  *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
  *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  v39 = a3[11];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v44 = a3[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v49 = a3[13];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v53 = *(_QWORD *)v51;
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = v53;
  *((_QWORD *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HeightQueryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4D4A94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[8];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[10];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[11] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  v17 = v16 - 1;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for HeightQueryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4D4B88(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[8];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[10];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[11] + 8) = a2;
  return result;
}

void type metadata completion function for HeightQueryModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, &lazy cache variable for type metadata for SpeakableString?, (void (*)(uint64_t))MEMORY[0x24BE929C8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for HeightQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HeightQueryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_24A4D4E2C + 4 * byte_24A4EC18F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_24A4D4E60 + 4 * byte_24A4EC18A[v4]))();
}

uint64_t sub_24A4D4E60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4D4E68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4D4E70);
  return result;
}

uint64_t sub_24A4D4E7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4D4E84);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_24A4D4E88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4D4E90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for HeightQueryModel.CodingKeys()
{
  return &unk_251BD48A0;
}

uint64_t specialized HeightQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x686769654878616DLL && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x68676965486E696DLL && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000024A4F3E70
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F3E90
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F3EB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7953746867696568 && a2 == 0xEE0063696C6F626DLL)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t SnippetHeaderView.init(headerModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  v4 = type metadata accessor for SnippetHeaderView();
  v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  *v5 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)(a2 + *(int *)(v4 + 24));
  *v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of SnippetHeaderModel?(a1, a2);
}

uint64_t type metadata accessor for SnippetHeaderView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SnippetHeaderView;
  if (!type metadata singleton initialization cache for SnippetHeaderView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SnippetHeaderView.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SnippetHeaderModel?(v1, a1);
}

uint64_t SnippetHeaderView.isLightMode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for ColorScheme();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - v5;
  type metadata accessor for SnippetHeaderView();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x24BDEB408], v0);
  v7 = static ColorScheme.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t SnippetHeaderView.isIncreasedContrast.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for ColorSchemeContrast();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - v5;
  type metadata accessor for SnippetHeaderView();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x24BDEEDF8], v0);
  v7 = static ColorScheme.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

void one-time initialization function for sideLength()
{
  static SnippetHeaderView.sideLength = 0x4034000000000000;
}

uint64_t SnippetHeaderView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;

  v90 = type metadata accessor for SashStandardView();
  v3 = *(_QWORD *)(v90 - 8);
  v4 = MEMORY[0x24BDAC7A8](v90);
  v88 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v89 = (char *)&v77 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v7);
  v87 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for Font.TextStyle();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v84 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Image.ResizingMode();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for SpeakableString();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v95 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SnippetHeaderModel();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v94 = (uint64_t)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = v1;
  outlined init with copy of SnippetHeaderModel?(v1, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v20, &demangling cache variable for type metadata for SnippetHeaderModel?);
    result = AnyView.init<A>(_:)();
    v25 = result;
  }
  else
  {
    v77 = v12;
    v82 = v3;
    v83 = a1;
    v26 = v94;
    outlined init with take of SnippetHeaderModel((uint64_t)v20, v94);
    (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v95, v26, v93);
    v27 = (uint64_t *)(v26 + *(int *)(v21 + 20));
    v29 = *v27;
    v28 = v27[1];
    swift_bridgeObjectRetain();
    Image.init(fileName:)(v29, v28);
    v31 = v30;
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BDF3FD8], v13);
    v81 = v31;
    v78 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (one-time initialization token for sideLength != -1)
      swift_once();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v32 = v107;
    v33 = v108;
    v34 = v109;
    v35 = v110;
    v37 = v111;
    v36 = v112;
    v79 = v94 + *(int *)(v21 + 24);
    v38 = *(unint64_t **)v79;
    v39 = *(_QWORD *)(v79 + 8);
    swift_bridgeObjectRetain();
    v40 = SnippetHeaderView.getCategoryColor(id:)(v38, v39);
    swift_bridgeObjectRelease();
    v99 = v78;
    v100 = v32;
    v101 = v33;
    v102 = v34;
    LOBYTE(v103) = v35;
    v104 = v37;
    v105 = v36;
    v106 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    v80 = View.eraseToAnyView()();
    swift_release();
    swift_release();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v41);
    v42._countAndFlagsBits = SpeakableString.print.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v43);
    LocalizedStringKey.init(stringInterpolation:)();
    v44 = Text.init(_:tableName:bundle:comment:)();
    v46 = v45;
    LOBYTE(v32) = v47 & 1;
    v48 = Text.bold()();
    v50 = v49;
    v78 = v51;
    LOBYTE(v36) = v52 & 1;
    outlined consume of Text.Storage(v44, v46, v32);
    swift_bridgeObjectRelease();
    v53 = v85;
    v54 = v84;
    v55 = v86;
    (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, *MEMORY[0x24BDF1870], v86);
    v56 = *MEMORY[0x24BDF1670];
    v57 = type metadata accessor for Font.Design();
    v58 = *(_QWORD *)(v57 - 8);
    v59 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 104))(v87, v56, v57);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v59, &demangling cache variable for type metadata for Font.Design?);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
    v60 = Text.font(_:)();
    v62 = v61;
    LOBYTE(v55) = v63;
    swift_release();
    LOBYTE(v56) = v55 & 1;
    outlined consume of Text.Storage(v48, v50, v36);
    swift_bridgeObjectRelease();
    v64 = *(unint64_t **)v79;
    v65 = *(_QWORD *)(v79 + 8);
    swift_bridgeObjectRetain();
    v66 = SnippetHeaderView.getCategoryColor(id:)(v64, v65);
    swift_bridgeObjectRelease();
    v99 = v66;
    v67 = Text.foregroundStyle<A>(_:)();
    v69 = v68;
    v71 = v70;
    LOBYTE(v55) = v72 & 1;
    outlined consume of Text.Storage(v60, v62, v56);
    swift_release();
    swift_bridgeObjectRelease();
    v99 = v67;
    v100 = v69;
    v101 = v55;
    v102 = v71;
    v73 = View.eraseToAnyView()();
    outlined consume of Text.Storage(v67, v69, v55);
    swift_bridgeObjectRelease();
    v102 = MEMORY[0x24BDF4788];
    v103 = MEMORY[0x24BEAD940];
    v99 = v80;
    v97 = MEMORY[0x24BDF4788];
    v98 = MEMORY[0x24BEAD940];
    v96 = v73;
    swift_retain();
    swift_retain();
    v74 = v89;
    SashStandardView.init(icon:title:showOnWatch:)();
    v75 = v82;
    v76 = v90;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v88, v74, v90);
    lazy protocol witness table accessor for type SashStandardView and conformance SashStandardView();
    v25 = AnyView.init<A>(_:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v95, v93);
    outlined destroy of GenericMedCompletedLogModel(v94, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v74, v76);
    a1 = v83;
  }
  *a1 = v25;
  return result;
}

uint64_t SnippetHeaderView.getCategoryColor(id:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char v73;
  char *v74;
  char v75;
  void (*v76)(_QWORD, _QWORD, _QWORD);
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  void (*v82)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  char *v87;
  uint64_t v88;
  char v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  char v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  char v99;
  BOOL v100;
  BOOL v101;
  char v102;
  BOOL v103;
  BOOL v104;
  char v105;
  BOOL v106;
  BOOL v107;
  char v108;
  BOOL v109;
  BOOL v110;
  char v111;
  BOOL v112;
  char v113;
  char v114;
  BOOL v115;
  char v116;
  char v117;
  BOOL v118;
  char v119;
  char v120;
  BOOL v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, _QWORD, uint64_t);
  char v141;
  char v142;
  void (*v143)(char *, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char v148;
  void (*v149)(char *, uint64_t);
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char v177;
  void (*v178)(char *, uint64_t);
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char v192;
  void (*v193)(char *, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char v199;
  void (*v200)(char *, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char v206;
  void (*v207)(char *, uint64_t);
  char v208;
  BOOL v209;
  char v210;
  char v211;
  BOOL v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char v219;
  void (*v220)(char *, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char v226;
  void (*v227)(char *, uint64_t);
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char v242;
  void (*v243)(char *, uint64_t);
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char v251;
  void (*v252)(_QWORD, _QWORD, _QWORD);
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  char v257;
  void (*v258)(char *, uint64_t);
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char v264;
  void (*v265)(char *, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  char v271;
  void (*v272)(char *, uint64_t);
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char v286;
  void (*v287)(char *, uint64_t);
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  char v293;
  void (*v294)(char *, uint64_t);
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  void (*v309)(char *, uint64_t);
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  uint64_t v322;
  unint64_t *v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  void (*v327)(char *, uint64_t, uint64_t);
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;

  v4 = type metadata accessor for Color.RGBColorSpace();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v310 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v326 = type metadata accessor for ColorSchemeContrast();
  v331 = *(_QWORD *)(v326 - 8);
  v8 = MEMORY[0x24BDAC7A8](v326);
  v324 = (char *)&v310 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v325 = (uint64_t)&v310 - v10;
  v333 = type metadata accessor for SnippetHeaderView();
  v11 = MEMORY[0x24BDAC7A8](v333);
  v13 = (char *)&v310 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v320 = (uint64_t)&v310 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v322 = (uint64_t)&v310 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v318 = (uint64_t)&v310 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v321 = (unint64_t *)((char *)&v310 - v21);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v317 = (uint64_t)&v310 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v319 = (uint64_t)&v310 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v315 = (uint64_t)&v310 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v316 = (uint64_t)&v310 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v313 = (uint64_t)&v310 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v314 = (uint64_t)&v310 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v312 = (uint64_t)&v310 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v327 = (void (*)(char *, uint64_t, uint64_t))((char *)&v310 - v37);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v310 - v39;
  v41 = MEMORY[0x24BDAC7A8](v38);
  v323 = (unint64_t *)((char *)&v310 - v42);
  MEMORY[0x24BDAC7A8](v41);
  v44 = (char *)&v310 - v43;
  v334 = type metadata accessor for ColorScheme();
  v45 = *(_QWORD *)(v334 - 8);
  v46 = MEMORY[0x24BDAC7A8](v334);
  v335 = (char *)&v310 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v46);
  v336 = (uint64_t)&v310 - v48;
  v329 = v5;
  v330 = v4;
  v328 = v7;
  if (a1 == (unint64_t *)0xD000000000000021 && a2 == 0x800000024A4F3ED0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == (unint64_t *)0xD00000000000002FLL && a2 == 0x800000024A4F3F00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == (unint64_t *)0xD000000000000028 && a2 == 0x800000024A4F3F30
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v49 = v332;
    v50 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v51 = *MEMORY[0x24BDEB408];
    v53 = v334;
    v52 = v335;
    v327 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
    v327(v335, v51, v334);
    v54 = static ColorScheme.== infix(_:_:)();
    v55 = *(void (**)(char *, uint64_t))(v45 + 8);
    v55(v52, v53);
    v55((char *)v50, v53);
    outlined init with copy of SnippetHeaderView(v49, (uint64_t)v44);
    if ((v54 & 1) != 0)
    {
      v56 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v57 = v331;
      v58 = v324;
      v59 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v60 = static ColorScheme.== infix(_:_:)();
      v61 = *(void (**)(char *, uint64_t))(v57 + 8);
      v62 = v58;
      v63 = v57;
      v61(v62, v59);
      v64 = v59;
      v53 = v334;
      v61((char *)v56, v64);
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v60 & 1) != 0)
      {
LABEL_12:
        v65 = v328;
        (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
        v67.n128_u64[0] = 0x3FEA7A7A7A7A7A7ALL;
        v68.n128_u64[0] = 0x3FAE1E1E1E1E1E1ELL;
        v69.n128_u64[0] = 0x3FD1515151515151;
        goto LABEL_17;
      }
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      v63 = v331;
    }
    v70 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v71 = v335;
    v72 = v327;
    v327(v335, v51, v53);
    v73 = static ColorScheme.== infix(_:_:)();
    v55(v71, v53);
    v55((char *)v70, v53);
    if ((v73 & 1) != 0)
      goto LABEL_15;
    specialized Environment.wrappedValue.getter(v70);
    v72(v71, v51, v53);
    v75 = static ColorScheme.== infix(_:_:)();
    v55(v71, v53);
    v55((char *)v70, v53);
    v76 = (void (*)(_QWORD, _QWORD, _QWORD))v323;
    outlined init with copy of SnippetHeaderView(v332, (uint64_t)v323);
    if ((v75 & 1) != 0)
    {
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      v77 = v328;
    }
    else
    {
      v78 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v79 = v324;
      v80 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v81 = static ColorScheme.== infix(_:_:)();
      v82 = *(void (**)(char *, uint64_t))(v63 + 8);
      v82(v79, v80);
      v82((char *)v78, v80);
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      v77 = v328;
      if ((v81 & 1) != 0)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
        v68.n128_u64[0] = 0x3FD9191919191919;
        v69.n128_u64[0] = 0x3FE0505050505050;
LABEL_23:
        v67.n128_u64[0] = 1.0;
        v66.n128_u64[0] = 1.0;
        v74 = v77;
        return MEMORY[0x24BD10E84](v74, v67, v68, v69, v66);
      }
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v77, *MEMORY[0x24BDF3C20], v330);
    v68.n128_u64[0] = 0x3FCB9B9B9B9B9B9CLL;
    v69.n128_u64[0] = 0x3FD7D7D7D7D7D7D8;
    goto LABEL_23;
  }
  if (a1 == (unint64_t *)0xD00000000000002ELL && a2 == 0x800000024A4F3F60)
    goto LABEL_27;
  v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v100 = a1 == (unint64_t *)0xD000000000000021 && a2 == 0x800000024A4F3B70;
  v101 = v100;
  if ((v99 & 1) != 0
    || v101
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == (unint64_t *)0xD000000000000027 && a2 == 0x800000024A4F3F90)
  {
    goto LABEL_27;
  }
  v323 = (unint64_t *)0xD000000000000027;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == (unint64_t *)0xD00000000000002ALL && a2 == 0x800000024A4F3BD0)
  {
    goto LABEL_27;
  }
  v311 = 0xD00000000000002ALL;
  v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v103 = a1 == (unint64_t *)0xD000000000000021 && a2 == 0x800000024A4F3FC0;
  v104 = v103;
  if ((v102 & 1) != 0 || v104)
    goto LABEL_27;
  v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v106 = a1 == (unint64_t *)v311 && a2 == 0x800000024A4F3FF0;
  v107 = v106;
  if ((v105 & 1) != 0)
    goto LABEL_27;
  if (v107)
    goto LABEL_27;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_27;
  v311 = 0xD000000000000029;
  if (a1 == (unint64_t *)0xD000000000000029 && a2 == 0x800000024A4F3BA0)
    goto LABEL_27;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_27;
  v310 = 0xD000000000000026;
  if (a1 == (unint64_t *)0xD000000000000026 && a2 == 0x800000024A4F4020)
    goto LABEL_27;
  v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v109 = a1 == (unint64_t *)v311 && a2 == 0x800000024A4F3C00;
  v110 = v109;
  if ((v108 & 1) != 0
    || v110
    || ((v111 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == (unint64_t *)v310)
      ? (v112 = a2 == 0x800000024A4F4050)
      : (v112 = 0),
        !v112 ? (v113 = 0) : (v113 = 1),
        (v111 & 1) != 0
     || (v113 & 1) != 0
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || (v311 = 0xD000000000000025, a1 == (unint64_t *)0xD000000000000025) && a2 == 0x800000024A4F4080
     || ((v114 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == (unint64_t *)v310)
       ? (v115 = a2 == 0x800000024A4F40B0)
       : (v115 = 0),
         !v115 ? (v116 = 0) : (v116 = 1),
         (v114 & 1) != 0 || (v116 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
LABEL_27:
    v84 = v332;
    v85 = v336;
    v322 = v332 + *(int *)(v333 + 20);
    specialized Environment.wrappedValue.getter(v336);
    v86 = *(unint64_t **)(v45 + 104);
    v88 = v334;
    v87 = v335;
    LODWORD(v323) = *MEMORY[0x24BDEB408];
    v321 = v86;
    ((void (*)(char *))v86)(v335);
    v89 = static ColorScheme.== infix(_:_:)();
    v90 = *(void (**)(char *, uint64_t))(v45 + 8);
    v90(v87, v88);
    v90((char *)v85, v88);
    outlined init with copy of SnippetHeaderView(v84, (uint64_t)v40);
    if ((v89 & 1) != 0)
    {
      v91 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v92 = v331;
      v93 = v324;
      v94 = v90;
      v95 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v96 = static ColorScheme.== infix(_:_:)();
      v97 = *(void (**)(char *, uint64_t))(v92 + 8);
      v97(v93, v95);
      v98 = v95;
      v90 = v94;
      v97((char *)v91, v98);
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v96 & 1) != 0)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF3C20], v4);
        v67.n128_u64[0] = 0x3FEA9A9A9A9A9A9BLL;
        v68.n128_u64[0] = 0x3FD0D0D0D0D0D0D1;
        v69.n128_u64[0] = 0;
LABEL_125:
        v66.n128_u64[0] = 1.0;
        v74 = v7;
        return MEMORY[0x24BD10E84](v74, v67, v68, v69, v66);
      }
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    v137 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v138 = v334;
    v139 = v335;
    v140 = (void (*)(char *, _QWORD, uint64_t))v321;
    ((void (*)(char *, _QWORD, uint64_t))v321)(v335, v323, v334);
    v141 = static ColorScheme.== infix(_:_:)();
    v90(v139, v138);
    v90((char *)v137, v138);
    if ((v141 & 1) != 0)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF3C20], v4);
      v68.n128_u64[0] = 0x3FD6D6D6D6D6D6D7;
      v69.n128_u64[0] = 0x3FC2121212121212;
LABEL_119:
      v67.n128_u64[0] = 1.0;
      goto LABEL_125;
    }
    specialized Environment.wrappedValue.getter(v137);
    v140(v139, v323, v138);
    v142 = static ColorScheme.== infix(_:_:)();
    v90(v139, v138);
    v90((char *)v137, v138);
    v143 = v327;
    outlined init with copy of SnippetHeaderView(v332, (uint64_t)v327);
    if ((v142 & 1) != 0)
    {
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    else
    {
      v144 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v145 = v331;
      v146 = v324;
      v147 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v148 = static ColorScheme.== infix(_:_:)();
      v149 = *(void (**)(char *, uint64_t))(v145 + 8);
      v149(v146, v147);
      v149((char *)v144, v147);
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v148 & 1) != 0)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF3C20], v4);
        v68.n128_u64[0] = 0x3FDE5E5E5E5E5E5ELL;
        v69.n128_u64[0] = 0x3FD3535353535353;
        goto LABEL_119;
      }
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF3C20], v4);
    v67.n128_u64[0] = 0x3FEF9F9F9F9F9FA0;
    v68.n128_u64[0] = 0x3FD999999999999ALL;
    v69.n128_u64[0] = 0x3FC999999999999ALL;
    goto LABEL_125;
  }
  if (a1 == (unint64_t *)0xD00000000000002CLL && a2 == 0x800000024A4F40E0
    || ((v117 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == (unint64_t *)v311)
      ? (v118 = a2 == 0x800000024A4F4110)
      : (v118 = 0),
        !v118 ? (v119 = 0) : (v119 = 1),
        (v117 & 1) != 0
     || (v119 & 1) != 0
     || ((v120 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == (unint64_t *)0xD00000000000002ELL)
       ? (v121 = a2 == 0x800000024A4F4140)
       : (v121 = 0),
         !v121 ? (v122 = 0) : (v122 = 1),
         (v120 & 1) != 0 || (v122 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    v123 = v332;
    v124 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v125 = *MEMORY[0x24BDEB408];
    v127 = v334;
    v126 = v335;
    v327 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
    v327(v335, v125, v334);
    v128 = static ColorScheme.== infix(_:_:)();
    v129 = *(void (**)(char *, uint64_t))(v45 + 8);
    v129(v126, v127);
    v129((char *)v124, v127);
    outlined init with copy of SnippetHeaderView(v123, v312);
    if ((v128 & 1) != 0)
    {
      v130 = v312;
      v131 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v132 = v331;
      v133 = v324;
      v134 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v135 = static ColorScheme.== infix(_:_:)();
      v136 = *(void (**)(char *, uint64_t))(v132 + 8);
      v136(v133, v134);
      v136((char *)v131, v134);
      outlined destroy of GenericMedCompletedLogModel(v130, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v135 & 1) != 0)
      {
        v65 = v328;
        (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
        v67.n128_u64[0] = 0x3FCB1B1B1B1B1B1BLL;
        v68.n128_u64[0] = 0x3FCA1A1A1A1A1A1ALL;
        v69.n128_u64[0] = 0x3FE4747474747474;
        goto LABEL_17;
      }
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel(v312, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    v150 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v152 = v334;
    v151 = v335;
    v327(v335, v125, v334);
    v153 = static ColorScheme.== infix(_:_:)();
    v129(v151, v152);
    v129((char *)v150, v152);
    if ((v153 & 1) != 0)
    {
      v65 = v328;
      (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
      v67.n128_u64[0] = 0x3FD6161616161616;
      v68.n128_u64[0] = 0x3FD5959595959596;
      v69.n128_u64[0] = 0x3FEADADADADADADBLL;
      goto LABEL_17;
    }
    v154 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v155 = v334;
    v156 = v335;
    v327(v335, v125, v334);
    v157 = static ColorScheme.== infix(_:_:)();
    v129(v156, v155);
    v129((char *)v154, v155);
    outlined init with copy of SnippetHeaderView(v332, v314);
    if ((v157 & 1) != 0)
    {
      outlined destroy of GenericMedCompletedLogModel(v314, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    else
    {
      v158 = v314;
      v159 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v160 = v331;
      v161 = v324;
      v162 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v163 = static ColorScheme.== infix(_:_:)();
      v164 = *(void (**)(char *, uint64_t))(v160 + 8);
      v164(v161, v162);
      v164((char *)v159, v162);
      outlined destroy of GenericMedCompletedLogModel(v158, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v163 & 1) != 0)
      {
        v65 = v328;
        (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
        v67.n128_u64[0] = 0x3FDF5F5F5F5F5F5FLL;
        v68.n128_u64[0] = 0x3FDE9E9E9E9E9E9FLL;
        v69.n128_u64[0] = 1.0;
        goto LABEL_17;
      }
    }
    v65 = v328;
    (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
    v67.n128_u64[0] = 0x3FD7979797979798;
    v68.n128_u64[0] = 0x3FD7171717171717;
LABEL_134:
    v69.n128_u64[0] = 0x3FECDCDCDCDCDCDDLL;
    goto LABEL_17;
  }
  if (a1 == (unint64_t *)0xD00000000000001ELL && a2 == 0x800000024A4F4170
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == (unint64_t *)0xD000000000000020 && a2 == 0x800000024A4F4190
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v165 = v332;
    v166 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v167 = *MEMORY[0x24BDEB408];
    v168 = v334;
    v169 = v335;
    v327 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
    v327(v335, v167, v334);
    v170 = static ColorScheme.== infix(_:_:)();
    v171 = *(void (**)(char *, uint64_t))(v45 + 8);
    v171(v169, v168);
    v171((char *)v166, v168);
    outlined init with copy of SnippetHeaderView(v165, v313);
    if ((v170 & 1) != 0)
    {
      v172 = v313;
      v173 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v174 = v331;
      v175 = v324;
      v176 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v177 = static ColorScheme.== infix(_:_:)();
      v178 = *(void (**)(char *, uint64_t))(v174 + 8);
      v178(v175, v176);
      v178((char *)v173, v176);
      outlined destroy of GenericMedCompletedLogModel(v172, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v177 & 1) != 0)
      {
        v65 = v328;
        (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
        v67.n128_u64[0] = 0x3FE1313131313131;
        v68.n128_u64[0] = 0x3FD1111111111111;
        v69.n128_u64[0] = 0x3FE5757575757575;
        goto LABEL_17;
      }
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel(v313, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    v179 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v180 = v334;
    v181 = v335;
    v327(v335, v167, v334);
    v182 = static ColorScheme.== infix(_:_:)();
    v171(v181, v180);
    v171((char *)v179, v180);
    if ((v182 & 1) == 0)
    {
      v183 = v336;
      specialized Environment.wrappedValue.getter(v336);
      v184 = v334;
      v185 = v335;
      v327(v335, v167, v334);
      v186 = static ColorScheme.== infix(_:_:)();
      v171(v185, v184);
      v171((char *)v183, v184);
      outlined init with copy of SnippetHeaderView(v332, v316);
      if ((v186 & 1) != 0)
      {
        outlined destroy of GenericMedCompletedLogModel(v316, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      }
      else
      {
        v187 = v316;
        v188 = v325;
        specialized Environment.wrappedValue.getter(v325);
        v189 = v331;
        v190 = v324;
        v191 = v326;
        (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
        v192 = static ColorScheme.== infix(_:_:)();
        v193 = *(void (**)(char *, uint64_t))(v189 + 8);
        v193(v190, v191);
        v193((char *)v188, v191);
        outlined destroy of GenericMedCompletedLogModel(v187, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
        if ((v192 & 1) != 0)
        {
          v65 = v328;
          (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
          v67.n128_u64[0] = 0x3FEB5B5B5B5B5B5BLL;
          v68.n128_u64[0] = 0x3FE1F1F1F1F1F1F2;
          v69.n128_u64[0] = 1.0;
          goto LABEL_17;
        }
      }
      v65 = v328;
      (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
      v67.n128_u64[0] = 0x3FE7F7F7F7F7F7F8;
      v68.n128_u64[0] = 0x3FD6969696969697;
      v69.n128_u64[0] = 0x3FEE5E5E5E5E5E5ELL;
      goto LABEL_17;
    }
    v65 = v328;
    (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
    v67.n128_u64[0] = 0x3FE5F5F5F5F5F5F6;
    v68.n128_u64[0] = 0x3FD4949494949495;
    v69.n128_u64[0] = 0x3FEBDBDBDBDBDBDCLL;
LABEL_17:
    v66.n128_u64[0] = 1.0;
    v74 = v65;
    return MEMORY[0x24BD10E84](v74, v67, v68, v69, v66);
  }
  if (a1 == v323 && a2 == 0x800000024A4F41C0
    || ((v208 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == (unint64_t *)0xD000000000000028)
      ? (v209 = a2 == 0x800000024A4F41F0)
      : (v209 = 0),
        !v209 ? (v210 = 0) : (v210 = 1),
        (v208 & 1) != 0 || (v210 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v194 = v332;
    v195 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v196 = *MEMORY[0x24BDEB408];
    v197 = v334;
    v198 = v335;
    v327 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
    v327(v335, v196, v334);
    v199 = static ColorScheme.== infix(_:_:)();
    v200 = *(void (**)(char *, uint64_t))(v45 + 8);
    v200(v198, v197);
    v200((char *)v195, v197);
    outlined init with copy of SnippetHeaderView(v194, v315);
    if ((v199 & 1) != 0)
    {
      v201 = v315;
      v202 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v203 = v331;
      v204 = v324;
      v205 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v206 = static ColorScheme.== infix(_:_:)();
      v207 = *(void (**)(char *, uint64_t))(v203 + 8);
      v207(v204, v205);
      v207((char *)v202, v205);
      outlined destroy of GenericMedCompletedLogModel(v201, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v206 & 1) != 0)
        goto LABEL_156;
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel(v315, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    v228 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v229 = v334;
    v230 = v335;
    v327(v335, v196, v334);
    v231 = static ColorScheme.== infix(_:_:)();
    v200(v230, v229);
    v200((char *)v228, v229);
    if ((v231 & 1) == 0)
    {
      v232 = v336;
      specialized Environment.wrappedValue.getter(v336);
      v233 = v334;
      v234 = v335;
      v327(v335, v196, v334);
      v235 = static ColorScheme.== infix(_:_:)();
      v200(v234, v233);
      v200((char *)v232, v233);
      outlined init with copy of SnippetHeaderView(v332, v319);
      if ((v235 & 1) != 0)
      {
        v236 = v319;
LABEL_185:
        outlined destroy of GenericMedCompletedLogModel(v236, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
        goto LABEL_189;
      }
      v237 = v319;
LABEL_187:
      v238 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v239 = v331;
      v240 = v324;
      v241 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v242 = static ColorScheme.== infix(_:_:)();
      v243 = *(void (**)(char *, uint64_t))(v239 + 8);
      v243(v240, v241);
      v243((char *)v238, v241);
      outlined destroy of GenericMedCompletedLogModel(v237, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v242 & 1) != 0)
      {
        v65 = v328;
        (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
        v67.n128_u64[0] = 0x3FDC1C1C1C1C1C1CLL;
        v68.n128_u64[0] = 0x3FEAFAFAFAFAFAFBLL;
        v69.n128_u64[0] = 1.0;
        goto LABEL_17;
      }
LABEL_189:
      v65 = v328;
      (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
      v67.n128_u64[0] = 0x3FD9191919191919;
      v68.n128_u64[0] = 0x3FEA5A5A5A5A5A5ALL;
      v69.n128_u64[0] = 1.0;
      goto LABEL_17;
    }
LABEL_182:
    v65 = v328;
    (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
    v67.n128_u64[0] = 0x3FC9191919191919;
    v68.n128_u64[0] = 0x3FE5B5B5B5B5B5B6;
    goto LABEL_134;
  }
  if (a1 == (unint64_t *)0xD000000000000024 && a2 == 0x800000024A4F4220
    || ((v211 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == v323)
      ? (v212 = a2 == 0x800000024A4F4250)
      : (v212 = 0),
        !v212 ? (v213 = 0) : (v213 = 1),
        (v211 & 1) != 0 || (v213 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v214 = v332;
    v215 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v216 = *MEMORY[0x24BDEB408];
    v217 = v334;
    v218 = v335;
    v327 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
    v327(v335, v216, v334);
    v219 = static ColorScheme.== infix(_:_:)();
    v220 = *(void (**)(char *, uint64_t))(v45 + 8);
    v220(v218, v217);
    v220((char *)v215, v217);
    outlined init with copy of SnippetHeaderView(v214, v317);
    if ((v219 & 1) != 0)
    {
      v221 = v317;
      v222 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v223 = v331;
      v224 = v324;
      v225 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v226 = static ColorScheme.== infix(_:_:)();
      v227 = *(void (**)(char *, uint64_t))(v223 + 8);
      v227(v224, v225);
      v227((char *)v222, v225);
      outlined destroy of GenericMedCompletedLogModel(v221, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v226 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel(v317, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    v244 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v245 = v334;
    v246 = v335;
    v327(v335, v216, v334);
    v247 = static ColorScheme.== infix(_:_:)();
    v220(v246, v245);
    v220((char *)v244, v245);
    if ((v247 & 1) == 0)
    {
      v248 = v336;
      specialized Environment.wrappedValue.getter(v336);
      v249 = v334;
      v250 = v335;
      v327(v335, v216, v334);
      v251 = static ColorScheme.== infix(_:_:)();
      v220(v250, v249);
      v220((char *)v248, v249);
      outlined init with copy of SnippetHeaderView(v332, (uint64_t)v321);
      if ((v251 & 1) != 0)
      {
        outlined destroy of GenericMedCompletedLogModel((uint64_t)v321, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      }
      else
      {
        v252 = (void (*)(_QWORD, _QWORD, _QWORD))v321;
        v253 = v325;
        specialized Environment.wrappedValue.getter(v325);
        v254 = v331;
        v255 = v324;
        v256 = v326;
        (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
        v257 = static ColorScheme.== infix(_:_:)();
        v258 = *(void (**)(char *, uint64_t))(v254 + 8);
        v258(v255, v256);
        v258((char *)v253, v256);
        outlined destroy of GenericMedCompletedLogModel((uint64_t)v252, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
        if ((v257 & 1) != 0)
        {
          v65 = v328;
          (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
          v68.n128_u64[0] = 0x3FD9191919191919;
          v69.n128_u64[0] = 0x3FE0505050505050;
          goto LABEL_16;
        }
      }
      v65 = v328;
      (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
      v68.n128_u64[0] = 0x3FCB9B9B9B9B9B9CLL;
      v69.n128_u64[0] = 0x3FD7D7D7D7D7D7D8;
      goto LABEL_16;
    }
LABEL_15:
    v65 = v328;
    (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
    v68.n128_u64[0] = 0x3FC6969696969697;
    v69.n128_u64[0] = 0x3FD5555555555555;
LABEL_16:
    v67.n128_u64[0] = 1.0;
    goto LABEL_17;
  }
  if (a1 == (unint64_t *)0xD000000000000036 && a2 == 0x800000024A4F4280
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v259 = v332;
    v260 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v261 = *MEMORY[0x24BDEB408];
    v262 = v334;
    v263 = v335;
    v327 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
    v327(v335, v261, v334);
    v264 = static ColorScheme.== infix(_:_:)();
    v265 = *(void (**)(char *, uint64_t))(v45 + 8);
    v265(v263, v262);
    v265((char *)v260, v262);
    outlined init with copy of SnippetHeaderView(v259, v318);
    if ((v264 & 1) == 0)
    {
      outlined destroy of GenericMedCompletedLogModel(v318, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      goto LABEL_204;
    }
    v266 = v318;
    v267 = v325;
    specialized Environment.wrappedValue.getter(v325);
    v268 = v331;
    v269 = v324;
    v270 = v326;
    (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
    v271 = static ColorScheme.== infix(_:_:)();
    v272 = *(void (**)(char *, uint64_t))(v268 + 8);
    v272(v269, v270);
    v272((char *)v267, v270);
    outlined destroy of GenericMedCompletedLogModel(v266, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    if ((v271 & 1) == 0)
    {
LABEL_204:
      v273 = v336;
      specialized Environment.wrappedValue.getter(v336);
      v274 = v334;
      v275 = v335;
      v327(v335, v261, v334);
      v276 = static ColorScheme.== infix(_:_:)();
      v265(v275, v274);
      v265((char *)v273, v274);
      if ((v276 & 1) == 0)
      {
        v277 = v336;
        specialized Environment.wrappedValue.getter(v336);
        v278 = v334;
        v279 = v335;
        v327(v335, v261, v334);
        v280 = static ColorScheme.== infix(_:_:)();
        v265(v279, v278);
        v265((char *)v277, v278);
        outlined init with copy of SnippetHeaderView(v332, v322);
        if ((v280 & 1) != 0)
        {
          v236 = v322;
          goto LABEL_185;
        }
        v237 = v322;
        goto LABEL_187;
      }
      goto LABEL_182;
    }
LABEL_156:
    v65 = v328;
    (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
    v68.n128_u64[0] = 0x3FDC5C5C5C5C5C5CLL;
    v69.n128_u64[0] = 0x3FE4949494949495;
    v67.n128_u64[0] = 0;
    goto LABEL_17;
  }
  if (a1 == (unint64_t *)v311 && a2 == 0x800000024A4F42C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v281 = v332;
    v282 = v336;
    v327 = (void (*)(char *, uint64_t, uint64_t))(v332 + *(int *)(v333 + 20));
    specialized Environment.wrappedValue.getter(v336);
    v283 = *MEMORY[0x24BDEB408];
    v284 = v334;
    v285 = v335;
    v323 = *(unint64_t **)(v45 + 104);
    ((void (*)(char *, uint64_t, uint64_t))v323)(v335, v283, v334);
    v286 = static ColorScheme.== infix(_:_:)();
    v287 = *(void (**)(char *, uint64_t))(v45 + 8);
    v287(v285, v284);
    v287((char *)v282, v284);
    outlined init with copy of SnippetHeaderView(v281, v320);
    if ((v286 & 1) != 0)
    {
      v288 = v320;
      v289 = v325;
      specialized Environment.wrappedValue.getter(v325);
      v290 = v331;
      v291 = v324;
      v292 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
      v293 = static ColorScheme.== infix(_:_:)();
      v294 = *(void (**)(char *, uint64_t))(v290 + 8);
      v294(v291, v292);
      v294((char *)v289, v292);
      outlined destroy of GenericMedCompletedLogModel(v288, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      if ((v293 & 1) != 0)
      {
        v65 = v328;
        (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
        v67.n128_u64[0] = 0x3FA8181818181818;
        v68.n128_u64[0] = 0x3FE0303030303030;
        v69.n128_u64[0] = 0x3FDEDEDEDEDEDEDFLL;
        goto LABEL_17;
      }
    }
    else
    {
      outlined destroy of GenericMedCompletedLogModel(v320, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    }
    v295 = v336;
    specialized Environment.wrappedValue.getter(v336);
    v296 = v334;
    v297 = v335;
    ((void (*)(char *, uint64_t, uint64_t))v323)(v335, v283, v334);
    v298 = static ColorScheme.== infix(_:_:)();
    v287(v297, v296);
    v287((char *)v295, v296);
    if ((v298 & 1) != 0)
    {
      v65 = v328;
      (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
      v68.n128_u64[0] = 0x3FE8F8F8F8F8F8F9;
      v69.n128_u64[0] = 0x3FE7D7D7D7D7D7D8;
      v67.n128_u64[0] = 0;
    }
    else
    {
      v299 = v336;
      specialized Environment.wrappedValue.getter(v336);
      v300 = v334;
      v301 = v335;
      ((void (*)(char *, uint64_t, uint64_t))v323)(v335, v283, v334);
      v302 = static ColorScheme.== infix(_:_:)();
      v287(v301, v300);
      v287((char *)v299, v300);
      outlined init with copy of SnippetHeaderView(v332, (uint64_t)v13);
      if ((v302 & 1) != 0)
      {
        v303 = (uint64_t)v13;
      }
      else
      {
        v304 = v13;
        v305 = v325;
        specialized Environment.wrappedValue.getter(v325);
        v306 = v331;
        v307 = v324;
        v308 = v326;
        (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v324, *MEMORY[0x24BDEEDF8], v326);
        static ColorScheme.== infix(_:_:)();
        v309 = *(void (**)(char *, uint64_t))(v306 + 8);
        v309(v307, v308);
        v309((char *)v305, v308);
        v303 = (uint64_t)v304;
      }
      outlined destroy of GenericMedCompletedLogModel(v303, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
      v65 = v328;
      (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, *MEMORY[0x24BDF3C20], v330);
      v67.n128_u64[0] = 0x3FD999999999999ALL;
      v68.n128_u64[0] = 0x3FEA9A9A9A9A9A9BLL;
      v69.n128_u64[0] = 0x3FE9F9F9F9F9F9FALL;
    }
    goto LABEL_17;
  }
  return static Color.black.getter();
}

uint64_t outlined init with take of SnippetHeaderModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>();
    result = MEMORY[0x24BD11508](MEMORY[0x24BDED300], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _FrameLayout>);
    v2[0] = MEMORY[0x24BDF40F0];
    v2[1] = MEMORY[0x24BDEBED8];
    result = MEMORY[0x24BD11508](MEMORY[0x24BDED300], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ForegroundStyleModifier<Color>);
    result = MEMORY[0x24BD11508](MEMORY[0x24BDF0718], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SashStandardView and conformance SashStandardView()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView;
  if (!lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView)
  {
    v1 = type metadata accessor for SashStandardView();
    result = MEMORY[0x24BD11508](MEMORY[0x24BEADD80], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SnippetHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SnippetHeaderView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SnippetHeaderModel();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(v7 + 20);
      v13 = (uint64_t *)((char *)a1 + v12);
      v14 = (uint64_t *)((char *)a2 + v12);
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      v16 = *(int *)(v7 + 24);
      v17 = (uint64_t *)((char *)a1 + v16);
      v18 = (uint64_t *)((char *)a2 + v16);
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      v20 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20(a1, 0, 1, v7);
    }
    v21 = *(int *)(a3 + 20);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v24 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    }
    else
    {
      *v22 = *v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v25 = *(int *)(a3 + 24);
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v28 = type metadata accessor for ColorSchemeContrast();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    }
    else
    {
      *v26 = *v27;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SnippetHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v9 = type metadata accessor for ColorSchemeContrast();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

char *initializeWithCopy for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(v6 + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = *(int *)(v6 + 24);
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18(a1, 0, 1, v6);
  }
  v19 = *(int *)(a3 + 20);
  v20 = &a1[v19];
  v21 = &a2[v19];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v23 = *(int *)(a3 + 24);
  v24 = &a1[v23];
  v25 = &a2[v23];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)v25;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(v6 + 20);
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      v15 = *(int *)(v6 + 24);
      v16 = &a1[v15];
      v17 = &a2[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
      v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(a1, 0, 1, v6);
      if (a1 == a2)
        return a1;
      goto LABEL_8;
    }
LABEL_7:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_8;
  }
  if (v10)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_7;
  }
  v29 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(a1, a2, v29);
  v30 = *(int *)(v6 + 20);
  v31 = &a1[v30];
  v32 = &a2[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = *(int *)(v6 + 24);
  v34 = &a1[v33];
  v35 = &a2[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 == a2)
    return a1;
LABEL_8:
  v20 = *(int *)(a3 + 20);
  v21 = &a1[v20];
  v22 = &a2[v20];
  outlined destroy of Font.Design?((uint64_t)&a1[v20], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v23 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v24 = *(int *)(a3 + 24);
  v25 = &a1[v24];
  v26 = &a2[v24];
  outlined destroy of Font.Design?((uint64_t)&a1[v24], &demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)v26;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *initializeWithTake for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for SnippetHeaderModel();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      if (a1 == a2)
        return a1;
      goto LABEL_8;
    }
LABEL_7:
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_8;
  }
  if (v10)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_7;
  }
  v24 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(a1, a2, v24);
  v25 = *(int *)(v6 + 20);
  v26 = &a1[v25];
  v27 = &a2[v25];
  v29 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v30 = *(int *)(v6 + 24);
  v31 = &a1[v30];
  v32 = &a2[v30];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  if (a1 == a2)
    return a1;
LABEL_8:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  outlined destroy of Font.Design?((uint64_t)&a1[v13], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  outlined destroy of Font.Design?((uint64_t)&a1[v18], &demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4D9084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4D9134(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for SnippetHeaderView()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for SnippetHeaderModel?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SnippetHeaderModel?(319, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB420], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB568]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for SnippetHeaderModel?(319, &lazy cache variable for type metadata for Environment<ColorSchemeContrast>.Content, (uint64_t (*)(uint64_t))MEMORY[0x24BDEEE08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB568]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for SnippetHeaderModel?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_24A4D9320()
{
  return MEMORY[0x24BDF4768];
}

uint64_t outlined init with copy of SnippetHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SnippetHeaderView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CycleTrackingLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t CycleTrackingLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1);
}

uint64_t outlined assign with take of AppPunchout?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CycleTrackingLogModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t CycleTrackingLogModel.dateLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for CycleTrackingLogModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CycleTrackingLogModel;
  if (!type metadata singleton initialization cache for CycleTrackingLogModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CycleTrackingLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CycleTrackingLogModel.dateLabel.modify())()
{
  type metadata accessor for CycleTrackingLogModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t CycleTrackingLogModel.loggedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CycleTrackingLogModel.cycleTrackingType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CycleTrackingLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CycleTrackingLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t CycleTrackingLogModel.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CycleTrackingLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 36), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t CycleTrackingLogModel.init(date:loggedLabel:cycleTrackingType:snippetHeaderModel:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a7;
  v38 = a4;
  v35 = a2;
  v36 = a3;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AppPunchout();
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v37(a8, 1, 1, v18);
  v19 = (int *)type metadata accessor for CycleTrackingLogModel();
  v20 = (uint64_t *)(a8 + v19[5]);
  *v20 = 0;
  v20[1] = 0;
  v39 = a1;
  if (a1)
  {
    v34 = a6;
    dispatch thunk of DialogCalendar.dateDescriptive.getter();
    v21 = type metadata accessor for SpeakableString();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v17, 1, v21) == 1)
    {
      outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      a1 = 0;
      v23 = 0;
    }
    else
    {
      v24 = SpeakableString.print.getter();
      v33 = a5;
      v26 = v25;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v21);
      v41 = v24;
      v42 = v26;
      lazy protocol witness table accessor for type String and conformance String();
      a1 = StringProtocol.capitalized.getter();
      v23 = v27;
      a5 = v33;
      swift_bridgeObjectRelease();
    }
    a6 = v34;
  }
  else
  {
    v23 = 0;
  }
  swift_bridgeObjectRelease();
  *v20 = a1;
  v20[1] = v23;
  v28 = (_QWORD *)(a8 + v19[6]);
  v29 = v36;
  *v28 = v35;
  v28[1] = v29;
  v30 = (_QWORD *)(a8 + v19[7]);
  *v30 = v38;
  v30[1] = a5;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a6, a8 + v19[8], &demangling cache variable for type metadata for SnippetHeaderModel?);
  v31 = v40;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v40, a8 + v19[9], &demangling cache variable for type metadata for URL?);
  SleepQueryModel.createAppPunchout(url:)(v31);
  swift_release();
  outlined destroy of Font.Design?(v31, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(a6, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v37((uint64_t)v14, 0, 1, v18);
  return outlined assign with take of AppPunchout?((uint64_t)v14, a8);
}

uint64_t CycleTrackingLogModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4D9890
                                                            + 4 * asc_24A4EC650[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A4D9890()
{
  return 0x6562614C65746164;
}

uint64_t sub_24A4D98AC()
{
  return 0x614C646567676F6CLL;
}

unint64_t sub_24A4D98CC()
{
  return 0xD000000000000011;
}

unint64_t sub_24A4D98E8()
{
  return 0xD000000000000012;
}

uint64_t sub_24A4D9908()
{
  return 7107189;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CycleTrackingLogModel.CodingKeys()
{
  unsigned __int8 *v0;

  return CycleTrackingLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CycleTrackingLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CycleTrackingLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CycleTrackingLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CycleTrackingLogModel.CodingKeys()
{
  lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CycleTrackingLogModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CycleTrackingLogModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for CycleTrackingLogModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 5;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for CycleTrackingLogModel.CodingKeys, &unk_251BD4A40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for CycleTrackingLogModel.CodingKeys, &unk_251BD4A40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for CycleTrackingLogModel.CodingKeys, &unk_251BD4A40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for CycleTrackingLogModel.CodingKeys, &unk_251BD4A40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

uint64_t CycleTrackingLogModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  int *v39;
  char *v40;
  char *v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v34 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v8);
  v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CycleTrackingLogModel.CodingKeys>);
  v10 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CycleTrackingLogModel();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AppPunchout();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v38 = a1;
  v39 = (int *)v13;
  v17 = &v15[*(int *)(v13 + 20)];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v41 = v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();
  v18 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
    outlined destroy of Font.Design?((uint64_t)v15, &demangling cache variable for type metadata for AppPunchout?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v40 = v7;
    v47 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v19 = (uint64_t)v36;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v19, (uint64_t)v15);
    v46 = 1;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v22 = v21;
    v23 = (uint64_t *)v41;
    swift_bridgeObjectRelease();
    *v23 = v20;
    v23[1] = v22;
    v45 = 2;
    v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v25 = v39;
    v26 = (uint64_t *)&v15[v39[6]];
    *v26 = v24;
    v26[1] = v27;
    v44 = 3;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v29 = (uint64_t *)&v15[v25[7]];
    *v29 = v28;
    v29[1] = v30;
    type metadata accessor for SnippetHeaderModel();
    v43 = 4;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v31 = (uint64_t)v40;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>(v31, (uint64_t)&v15[v25[8]], &demangling cache variable for type metadata for SnippetHeaderModel?);
    type metadata accessor for URL();
    v42 = 5;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v32 = (uint64_t)v35;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v37);
    outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>(v32, (uint64_t)&v15[v25[9]], &demangling cache variable for type metadata for URL?);
    outlined init with copy of CycleTrackingLogModel((uint64_t)v15, v34);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
    return outlined destroy of GenericMedCompletedLogModel((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for CycleTrackingLogModel);
  }
}

uint64_t outlined init with copy of CycleTrackingLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CycleTrackingLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in CycleTrackingLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type CycleTrackingLogModel and conformance CycleTrackingLogModel, (uint64_t (*)(uint64_t))type metadata accessor for CycleTrackingLogModel, (uint64_t)"كn\a@S");
}

uint64_t base witness table accessor for Encodable in CycleTrackingLogModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type CycleTrackingLogModel and conformance CycleTrackingLogModel, (uint64_t (*)(uint64_t))type metadata accessor for CycleTrackingLogModel, (uint64_t)&protocol conformance descriptor for CycleTrackingLogModel);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CycleTrackingLogModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CycleTrackingLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CycleTrackingLogModel(_QWORD *a1)
{
  return CycleTrackingLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for CycleTrackingLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[7];
    v20 = a3[8];
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    __dst = (char *)a1 + v20;
    v24 = (char *)a2 + v20;
    v25 = type metadata accessor for SnippetHeaderModel();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(__dst, v24, v29);
      v30 = *(int *)(v25 + 20);
      v31 = &__dst[v30];
      v32 = &v24[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(int *)(v25 + 24);
      v35 = &__dst[v34];
      v36 = &v24[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(__dst, 0, 1, v25);
    }
    v39 = a3[9];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = type metadata accessor for URL();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
  }
  return a1;
}

uint64_t destroy for CycleTrackingLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v9 = a1 + *(int *)(a2 + 36);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

char *initializeWithCopy for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *__dst;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = a3[7];
  v18 = a3[8];
  v19 = &a1[v17];
  v20 = &a2[v17];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  __dst = &a1[v18];
  v22 = &a2[v18];
  v23 = type metadata accessor for SnippetHeaderModel();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(__dst, v22, v27);
    v28 = *(int *)(v23 + 20);
    v29 = &__dst[v28];
    v30 = &v22[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = *(int *)(v23 + 24);
    v33 = &__dst[v32];
    v34 = &v22[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(__dst, 0, 1, v23);
  }
  v37 = a3[9];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = type metadata accessor for URL();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

char *assignWithCopy for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SnippetHeaderModel();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v22, v23, v29);
      v30 = *(int *)(v24 + 20);
      v31 = &v22[v30];
      v32 = &v23[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      v33 = *(int *)(v24 + 24);
      v34 = &v22[v33];
      v35 = &v23[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
      v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v48 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v22, v23, v48);
  v49 = *(int *)(v24 + 20);
  v50 = &v22[v49];
  v51 = &v23[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = *(int *)(v24 + 24);
  v53 = &v22[v52];
  v54 = &v23[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  v38 = a3[9];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for URL();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
    goto LABEL_18;
  }
  if (v45)
  {
LABEL_18:
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  return a1;
}

char *initializeWithTake for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for SnippetHeaderModel();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

char *assignWithTake for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v27 = a3[8];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for SnippetHeaderModel();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      v35 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v28, v29, v35);
      *(_OWORD *)&v28[*(int *)(v30 + 20)] = *(_OWORD *)&v29[*(int *)(v30 + 20)];
      *(_OWORD *)&v28[*(int *)(v30 + 24)] = *(_OWORD *)&v29[*(int *)(v30 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  v47 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 40))(v28, v29, v47);
  v48 = *(int *)(v30 + 20);
  v49 = &v28[v48];
  v50 = &v29[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v53 = *(int *)(v30 + 24);
  v54 = &v28[v53];
  v55 = &v29[v53];
  v57 = *(_QWORD *)v55;
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = v57;
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRelease();
LABEL_13:
  v37 = a3[9];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = type metadata accessor for URL();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v38, v39, v40);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v40);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CycleTrackingLogModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4DB1C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + a3[5] + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[8];
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v12 = *(_QWORD *)(v13 - 8);
      v14 = a3[9];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for CycleTrackingLogModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4DB2BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = a2;
      return result;
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[8];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CycleTrackingLogModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AppPunchout?(319, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t storeEnumTagSinglePayload for CycleTrackingLogModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24A4DB4BC + 4 * byte_24A4EC65B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24A4DB4F0 + 4 * byte_24A4EC656[v4]))();
}

uint64_t sub_24A4DB4F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4DB4F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4DB500);
  return result;
}

uint64_t sub_24A4DB50C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4DB514);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24A4DB518(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4DB520(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CycleTrackingLogModel.CodingKeys()
{
  return &unk_251BD4A40;
}

uint64_t specialized CycleTrackingLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F42F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t SpecificMedCompletedLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
}

uint64_t SpecificMedCompletedLogSnippet.text2.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Text.Storage(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for SpecificMedCompletedLogSnippet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SpecificMedCompletedLogSnippet;
  if (!type metadata singleton initialization cache for SpecificMedCompletedLogSnippet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SpecificMedCompletedLogSnippet.text2.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;

  v9 = v4 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 20);
  outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_BYTE *)(v9 + 16) = a3 & 1;
  *(_QWORD *)(v9 + 24) = a4;
  return result;
}

uint64_t (*SpecificMedCompletedLogSnippet.text2.modify())()
{
  type metadata accessor for SpecificMedCompletedLogSnippet();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogSnippet.text3.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of Text.Storage(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SpecificMedCompletedLogSnippet.text3.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;

  v9 = v4 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 24);
  outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_BYTE *)(v9 + 16) = a3 & 1;
  *(_QWORD *)(v9 + 24) = a4;
  return result;
}

uint64_t (*SpecificMedCompletedLogSnippet.text3.modify())()
{
  type metadata accessor for SpecificMedCompletedLogSnippet();
  return GenericMedCompletedLogSnippet.text3.modify;
}

void SpecificMedCompletedLogSnippet.init(model:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  v4 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = (int *)type metadata accessor for SpecificMedCompletedLogSnippet();
  v11 = (uint64_t *)(a2 + v10[7]);
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v11 = EnvironmentObject.init()();
  v11[1] = v12;
  v13 = a2;
  outlined init with copy of GenericMedCompletedLogModel(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
  v14 = *(void **)(a1 + 32);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 24);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v16._object = (void *)0x800000024A4F4310;
    v16._countAndFlagsBits = 0x1000000000000010;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + v4[12]));
    v17._countAndFlagsBits = 32;
    v17._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
    v18._countAndFlagsBits = v15;
    v18._object = v14;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v18);
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
    goto LABEL_5;
  }
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v20._object = (void *)0x800000024A4F4310;
  v20._countAndFlagsBits = 0x1000000000000010;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v20);
  v21 = *(_QWORD *)(a1 + 48);
  if (v21)
  {
    v22 = *(_QWORD *)(a1 + 40);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(&v21 - 1));
    v23._countAndFlagsBits = 0x6C75646568635320;
    v23._object = (void *)0xE900000000000065;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v23);
LABEL_5:
    LocalizedStringKey.init(stringInterpolation:)();
    v24 = Text.init(_:tableName:bundle:comment:)();
    v25 = v13 + v10[5];
    *(_QWORD *)v25 = v24;
    *(_QWORD *)(v25 + 8) = v26;
    *(_BYTE *)(v25 + 16) = v27 & 1;
    *(_QWORD *)(v25 + 24) = v28;
    v29 = *(_BYTE *)(a1 + v4[9] + 8);
    outlined init with copy of GenericMedCompletedLogModel(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
    if ((v29 & 1) != 0)
    {
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
    }
    else
    {
      v30 = *(_QWORD *)&v6[v4[11] + 8];
      outlined destroy of GenericMedCompletedLogModel((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
      if (v30)
      {
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v31._countAndFlagsBits = 0;
        v31._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v31);
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + v4[10]));
        v32._countAndFlagsBits = 32;
        v32._object = (void *)0xE100000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v32);
        v33 = (uint64_t *)(a1 + v4[11]);
        v34 = v33[1];
        if (v34)
          v35 = *v33;
        else
          v35 = 0;
        if (v34)
          v36 = (void *)v33[1];
        else
          v36 = (void *)0xE000000000000000;
        swift_bridgeObjectRetain();
        v37._countAndFlagsBits = v35;
        v37._object = v36;
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 544497952;
        v38._object = (void *)0xE400000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v38);
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + 8));
        v39._countAndFlagsBits = 0;
        v39._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
        LocalizedStringKey.init(stringInterpolation:)();
        v40 = Text.init(_:tableName:bundle:comment:)();
        v42 = v41;
        v44 = v43;
        v46 = v45;
        outlined destroy of GenericMedCompletedLogModel(a1, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
        v47 = v13 + v10[6];
        goto LABEL_19;
      }
    }
    if (*(_BYTE *)(a1 + v4[14]) == 1)
    {
      LocalizedStringKey.init(stringLiteral:)();
    }
    else
    {
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v48._countAndFlagsBits = 0;
      v48._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + 8));
      v49._countAndFlagsBits = 0;
      v49._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v49);
      LocalizedStringKey.init(stringInterpolation:)();
    }
    v40 = Text.init(_:tableName:bundle:comment:)();
    v42 = v50;
    v44 = v51;
    v46 = v52;
    outlined destroy of GenericMedCompletedLogModel(a1, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogModel);
    v47 = v13 + v10[6];
LABEL_19:
    *(_QWORD *)v47 = v40;
    *(_QWORD *)(v47 + 8) = v42;
    *(_BYTE *)(v47 + 16) = v44 & 1;
    *(_QWORD *)(v47 + 24) = v46;
    return;
  }
  __break(1u);
}

uint64_t SpecificMedCompletedLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t *v51;
  void *v52;
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  Swift::String v132;
  Swift::String v133;
  Swift::String v134;
  uint64_t v135;
  Swift::String v136;
  void (*v137)(char *, char *, uint64_t);
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  Swift::String v203;
  uint64_t v204;
  uint64_t v205;

  v186 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetBody<TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>);
  v184 = *(_QWORD *)(v1 - 8);
  v185 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v135 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for SpecificMedCompletedLogSnippet();
  v4 = *(_QWORD *)(v156 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v156);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>);
  v166 = *(_QWORD *)(v6 - 8);
  v167 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v165 = (char *)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v169 = *(_QWORD *)(v8 - 8);
  v170 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v168 = (char *)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeparatorStyle();
  v162 = *(_QWORD *)(v10 - 8);
  v163 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v160 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FactItemHeroNumberView();
  v158 = *(_QWORD *)(v12 - 8);
  v159 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v157 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v177 = *(_QWORD *)(v14 - 8);
  v178 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v164 = (char *)&v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = v16;
  MEMORY[0x24BDAC7A8](v15);
  v176 = (char *)&v135 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x24BDAC7A8](v18);
  v152 = (char *)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x24BDAC7A8](v20);
  v151 = (char *)&v135 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for StatusIndicatorView.IndicatorType();
  v148 = *(_QWORD *)(v150 - 8);
  MEMORY[0x24BDAC7A8](v150);
  v149 = (uint64_t)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for StatusIndicatorView();
  v174 = *(_QWORD *)(v23 - 8);
  v175 = v23;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v171 = (char *)&v135 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = v25;
  MEMORY[0x24BDAC7A8](v24);
  v180 = (char *)&v135 - v26;
  v147 = type metadata accessor for SnippetHeaderView();
  v27 = MEMORY[0x24BDAC7A8](v147);
  v145 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v146 = (uint64_t)&v135 - v29;
  v30 = type metadata accessor for Font.TextStyle();
  v172 = *(_QWORD *)(v30 - 8);
  v173 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v179 = (char *)&v135 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v144 = (uint64_t)&v135 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v135 - v35;
  v37 = type metadata accessor for SpeakableString();
  v142 = *(_QWORD *)(v37 - 8);
  v143 = v37;
  v38 = MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v135 - v41;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v43);
  v45 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for AppPunchout();
  v182 = *(_QWORD *)(v46 - 8);
  v183 = v46;
  v47 = MEMORY[0x24BDAC7A8](v46);
  v153 = v48;
  v154 = (char *)&v135 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v47);
  v181 = (char *)&v135 - v49;
  v50 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  if (*(_BYTE *)(v187 + v50[15]) != 1)
  {
    outlined init with copy of GenericMedCompletedLogModel(v187, (uint64_t)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogSnippet);
    v60 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v61 = swift_allocObject();
    outlined init with take of GenericMedCompletedLogSnippet((uint64_t)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v61 + v60, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogSnippet);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>, MEMORY[0x24BDF5420]);
    SnippetBody.init(content:)();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type SnippetBody<TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>> and conformance SnippetBody<A>, &demangling cache variable for type metadata for SnippetBody<TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>, MEMORY[0x24BEAD9C0]);
    v62 = v185;
    v59 = View.eraseToAnyView()();
    result = (*(uint64_t (**)(char *, uint64_t))(v184 + 8))(v3, v62);
    goto LABEL_8;
  }
  v141 = v4;
  v184 = v5;
  v185 = (uint64_t)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = (uint64_t *)(v187 + v50[18]);
  v52 = (void *)v51[1];
  if (!v52 || (v53 = (uint64_t *)(v187 + v50[17]), (v54 = (void *)v53[1]) == 0))
  {
LABEL_6:
    result = AnyView.init<A>(_:)();
    v59 = result;
LABEL_8:
    *v186 = v59;
    return result;
  }
  v55 = *v51;
  v139 = *v53;
  v140 = v55;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v187 + v50[8], (uint64_t)v45, &demangling cache variable for type metadata for AppPunchout?);
  v57 = v182;
  v56 = v183;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v45, 1, v183) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v45, &demangling cache variable for type metadata for AppPunchout?);
    goto LABEL_6;
  }
  v137 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
  v138 = v54;
  v137(v181, v45, v56);
  if (*(_QWORD *)(v187 + 32))
  {
    swift_bridgeObjectRetain();
    v63 = v138;
    swift_bridgeObjectRetain();
    v136 = String.firstLetterCapitalized()();
    v64 = (uint64_t)v152;
LABEL_11:
    (*(void (**)(char *, _QWORD, uint64_t))(v172 + 104))(v179, *MEMORY[0x24BDF1888], v173);
    v65 = (_BYTE *)v187;
    v66 = v144;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v187 + v50[19], v144, &demangling cache variable for type metadata for SnippetHeaderModel?);
    v67 = v147;
    v68 = (uint64_t)v145;
    v69 = (uint64_t *)&v145[*(int *)(v147 + 20)];
    *v69 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    v70 = (uint64_t *)(v68 + *(int *)(v67 + 24));
    *v70 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?(v66, v68);
    v71 = v146;
    outlined init with take of GenericMedCompletedLogSnippet(v68, v146, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderView and conformance SnippetHeaderView, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderView, (uint64_t)&protocol conformance descriptor for SnippetHeaderView);
    v152 = (char *)View.eraseToAnyView()();
    outlined destroy of GenericMedCompletedLogModel(v71, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderView);
    if (*v65)
      v72 = v140;
    else
      v72 = v139;
    if (*v65)
    {
      v73 = (unsigned int *)MEMORY[0x24BEADF80];
    }
    else
    {
      v52 = v63;
      v73 = (unsigned int *)MEMORY[0x24BEADF90];
    }
    swift_bridgeObjectRelease();
    v204 = MEMORY[0x24BEE0D00];
    v205 = MEMORY[0x24BEAE5C0];
    v203._countAndFlagsBits = v72;
    v203._object = v52;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v148 + 104))(v149, *v73, v150);
    StatusIndicatorView.init(message:type:showIndicator:)();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v74);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v136);
    swift_bridgeObjectRelease();
    v75._countAndFlagsBits = 0;
    v75._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v75);
    LocalizedStringKey.init(stringInterpolation:)();
    v76 = Text.init(_:tableName:bundle:comment:)();
    v78 = v77;
    v80 = v79 & 1;
    v81 = *MEMORY[0x24BDF1670];
    v82 = type metadata accessor for Font.Design();
    v83 = *(_QWORD *)(v82 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 104))(v64, v81, v82);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v64, 0, 1, v82);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v64, &demangling cache variable for type metadata for Font.Design?);
    v84 = Text.font(_:)();
    v86 = v85;
    LOBYTE(v82) = v87;
    swift_release();
    LOBYTE(v81) = v82 & 1;
    outlined consume of Text.Storage(v76, v78, v80);
    swift_bridgeObjectRelease();
    v88 = Text.bold()();
    v90 = v89;
    v92 = v91;
    LODWORD(v76) = v93 & 1;
    outlined consume of Text.Storage(v84, v86, v81);
    swift_bridgeObjectRelease();
    v94 = MEMORY[0x24BDF1FA0];
    v204 = MEMORY[0x24BDF1FA0];
    v205 = MEMORY[0x24BEAD6B8];
    v95 = swift_allocObject();
    v203._countAndFlagsBits = v95;
    *(_QWORD *)(v95 + 16) = v88;
    *(_QWORD *)(v95 + 24) = v90;
    v96 = v88;
    v148 = v90;
    v149 = v88;
    LODWORD(v151) = v76;
    *(_BYTE *)(v95 + 32) = v76;
    *(_QWORD *)(v95 + 40) = v92;
    v150 = v92;
    v202 = 0;
    v200 = 0u;
    v201 = 0u;
    v199 = 0;
    v197 = 0u;
    v198 = 0u;
    v97 = v187 + *(int *)(v156 + 24);
    v98 = *(_QWORD *)v97;
    v99 = *(_QWORD *)(v97 + 8);
    LOBYTE(v84) = *(_BYTE *)(v97 + 16);
    v100 = *(_QWORD *)(v97 + 24);
    v195 = v94;
    v196 = MEMORY[0x24BEAD6B8];
    v101 = swift_allocObject();
    v194 = v101;
    *(_QWORD *)(v101 + 16) = v98;
    *(_QWORD *)(v101 + 24) = v99;
    *(_BYTE *)(v101 + 32) = v84;
    *(_QWORD *)(v101 + 40) = v100;
    v193 = 0;
    v191 = 0u;
    v192 = 0u;
    v190 = 0;
    v188 = 0u;
    v189 = 0u;
    outlined copy of Text.Storage(v96, v90, v76);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v98, v99, v84);
    swift_bridgeObjectRetain();
    v102 = v157;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    v104 = v162;
    v103 = v163;
    v105 = v160;
    (*(void (**)(char *, _QWORD, uint64_t))(v162 + 104))(v160, *MEMORY[0x24BEAB510], v163);
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
    v106 = v176;
    v107 = v159;
    View.separators(_:isOverride:)();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v103);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v102, v107);
    v108 = v177;
    v109 = v178;
    v110 = v164;
    (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v164, v106, v178);
    v111 = v175;
    v112 = v174;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v171, v180, v175);
    v113 = (*(unsigned __int8 *)(v108 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
    v114 = v112;
    v115 = (v161 + *(unsigned __int8 *)(v112 + 80) + v113) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
    v116 = swift_allocObject();
    *(_QWORD *)(v116 + 16) = v152;
    (*(void (**)(unint64_t, char *, uint64_t))(v108 + 32))(v116 + v113, v110, v109);
    (*(void (**)(unint64_t, char *, uint64_t))(v114 + 32))(v116 + v115, v171, v111);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>, MEMORY[0x24BDF5420]);
    v117 = v165;
    SnippetBody.init(content:)();
    v118 = v185;
    outlined init with copy of GenericMedCompletedLogModel(v187, v185, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogSnippet);
    v119 = v182;
    v120 = v154;
    v121 = v183;
    (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v154, v181, v183);
    v122 = (*(unsigned __int8 *)(v141 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
    v123 = (v184 + *(unsigned __int8 *)(v119 + 80) + v122) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
    v124 = swift_allocObject();
    outlined init with take of GenericMedCompletedLogSnippet(v118, v124 + v122, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogSnippet);
    v137((char *)(v124 + v123), v120, v121);
    v125 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>, MEMORY[0x24BEADBF8]);
    v126 = v167;
    v127 = v168;
    View.componentTapped(isNavigation:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v166 + 8))(v117, v126);
    v203._countAndFlagsBits = v126;
    v203._object = (void *)v125;
    swift_getOpaqueTypeConformance2();
    v128 = v170;
    v59 = View.eraseToAnyView()();
    swift_release();
    outlined consume of Text.Storage(v149, v148, (char)v151);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v169 + 8))(v127, v128);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v176, v178);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v180, v175);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v179, v173);
    result = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v181, v121);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v187 + 48))
  {
LABEL_21:
    v59 = AnyView.init<A>(_:)();
    result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v181, v56);
    goto LABEL_8;
  }
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v187 + v50[19], (uint64_t)v36, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v129 = type metadata accessor for SnippetHeaderModel();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 48))(v36, 1, v129) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of Font.Design?((uint64_t)v36, &demangling cache variable for type metadata for SnippetHeaderModel?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v131 = v142;
  v130 = v143;
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v40, v36, v143);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of GenericMedCompletedLogModel((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v131 + 32))(v42, v40, v130);
  if (*(_QWORD *)(v187 + 48))
  {
    v132 = String.firstLetterCapitalized()();
    v136._object = (void *)v132._countAndFlagsBits;
    v203._countAndFlagsBits = 32;
    v203._object = (void *)0xE100000000000000;
    v133._countAndFlagsBits = SpeakableString.print.getter();
    String.append(_:)(v133);
    swift_bridgeObjectRelease();
    v134 = v203;
    v203._countAndFlagsBits = (uint64_t)v136._object;
    v203._object = v132._object;
    swift_bridgeObjectRetain();
    String.append(_:)(v134);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v136 = v203;
    (*(void (**)(char *, uint64_t))(v131 + 8))(v42, v130);
    v64 = (uint64_t)v152;
    v63 = v138;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void closure #2 in SpecificMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 28));
  if (v1)
  {
    v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();

  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t closure #3 in SpecificMedCompletedLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v86 = a1;
  v104 = a2;
  v102 = type metadata accessor for StatusIndicatorView.IndicatorType();
  v100 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  v101 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for StatusIndicatorView();
  v103 = *(_QWORD *)(v105 - 8);
  v4 = MEMORY[0x24BDAC7A8](v105);
  v109 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v108 = (char *)&v85 - v6;
  v90 = type metadata accessor for SpecificMedCompletedLogSnippet();
  v92 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v93 = v7;
  v94 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FactItemHeroNumberView();
  v96 = *(_QWORD *)(v8 - 8);
  v97 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v95 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  v107 = *(_QWORD *)(v99 - 8);
  v10 = MEMORY[0x24BDAC7A8](v99);
  v98 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v91 = (char *)&v85 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v106 = (char *)&v85 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v89 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v85 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SashStandard.Title();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (uint64_t *)((char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for SashStandard();
  MEMORY[0x24BDAC7A8](v27);
  v28 = type metadata accessor for SashStandardView();
  v29 = *(_QWORD *)(v28 - 8);
  v87 = v28;
  v88 = v29;
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = (_QWORD *)(a1 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 52));
  v33 = v32[1];
  *v26 = *v32;
  v26[1] = v33;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x24BEAB120], v23);
  v34 = type metadata accessor for VisualProperty();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v22, 1, 1, v34);
  v35 = type metadata accessor for Color();
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v36(v19, 1, 1, v35);
  v36(v89, 1, 1, v35);
  v127 = 0;
  v125 = 0u;
  v126 = 0u;
  swift_bridgeObjectRetain();
  SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)();
  SashStandardView.init(model:)();
  lazy protocol witness table accessor for type Context and conformance Context((unint64_t *)&lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView, (uint64_t (*)(uint64_t))MEMORY[0x24BEADDA8], MEMORY[0x24BEADD80]);
  v37 = v87;
  v89 = (char *)View.eraseToAnyView()();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v31, v37);
  v38 = v86;
  LocalizedStringKey.init(stringLiteral:)();
  v39 = Text.init(_:tableName:bundle:comment:)();
  v41 = v40;
  LOBYTE(v35) = v42;
  v44 = v43;
  *((_QWORD *)&v126 + 1) = MEMORY[0x24BDF1FA0];
  v127 = MEMORY[0x24BEAD6B8];
  v45 = MEMORY[0x24BDF1FA0];
  v46 = MEMORY[0x24BEAD6B8];
  v47 = swift_allocObject();
  *(_QWORD *)&v125 = v47;
  *(_QWORD *)(v47 + 16) = v39;
  *(_QWORD *)(v47 + 24) = v41;
  *(_BYTE *)(v47 + 32) = v35 & 1;
  *(_QWORD *)(v47 + 40) = v44;
  v124 = 0;
  v122 = 0u;
  v123 = 0u;
  v48 = v90;
  v49 = v38 + *(int *)(v90 + 20);
  v50 = *(_QWORD *)v49;
  v51 = *(_QWORD *)(v49 + 8);
  LOBYTE(v35) = *(_BYTE *)(v49 + 16);
  v52 = *(_QWORD *)(v49 + 24);
  v120 = v45;
  v121 = v46;
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = v50;
  *(_QWORD *)(v53 + 24) = v51;
  *(_BYTE *)(v53 + 32) = v35;
  *(_QWORD *)(v53 + 40) = v52;
  v54 = v38 + *(int *)(v48 + 24);
  v55 = *(_QWORD *)v54;
  v56 = *(_QWORD *)(v54 + 8);
  LOBYTE(v22) = *(_BYTE *)(v54 + 16);
  v57 = *(_QWORD *)(v54 + 24);
  v117 = MEMORY[0x24BDF1FA0];
  v119 = v53;
  v118 = MEMORY[0x24BEAD6B8];
  v58 = swift_allocObject();
  v116 = v58;
  *(_QWORD *)(v58 + 16) = v55;
  *(_QWORD *)(v58 + 24) = v56;
  *(_BYTE *)(v58 + 32) = (_BYTE)v22;
  *(_QWORD *)(v58 + 40) = v57;
  v115 = 0;
  v113 = 0u;
  v114 = 0u;
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  outlined copy of Text.Storage(v50, v51, v35);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v55, v56, (char)v22);
  swift_bridgeObjectRetain();
  v59 = v95;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  v60 = v94;
  outlined init with copy of GenericMedCompletedLogModel(v38, v94, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogSnippet);
  v61 = (*(unsigned __int8 *)(v92 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  v62 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v60, v62 + v61, (uint64_t (*)(_QWORD))type metadata accessor for SpecificMedCompletedLogSnippet);
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE128], MEMORY[0x24BEAE118]);
  v63 = v91;
  v64 = v97;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v59, v64);
  v65 = v106;
  v66 = v107;
  v67 = v63;
  v68 = v99;
  (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v67, v99);
  *((_QWORD *)&v126 + 1) = MEMORY[0x24BEE0D00];
  v127 = MEMORY[0x24BEAE5C0];
  *(_QWORD *)&v125 = 0x646567676F4CLL;
  *((_QWORD *)&v125 + 1) = 0xE600000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v101, *MEMORY[0x24BEADF80], v102);
  v69 = v108;
  StatusIndicatorView.init(message:type:showIndicator:)();
  v70 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
  v71 = v98;
  v72 = v65;
  v73 = v68;
  v70(v98, v72, v68);
  v74 = v103;
  v75 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  v76 = v69;
  v77 = v105;
  v75(v109, v76, v105);
  v78 = v104;
  *(_QWORD *)v104 = v89;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView));
  v70(&v78[*(int *)(v79 + 48)], v71, v73);
  v80 = &v78[*(int *)(v79 + 64)];
  v81 = v109;
  v75(v80, v109, v77);
  v82 = *(void (**)(char *, uint64_t))(v74 + 8);
  swift_retain_n();
  v82(v108, v77);
  v83 = *(void (**)(char *, uint64_t))(v107 + 8);
  v83(v106, v73);
  swift_release();
  v82(v81, v77);
  v83(v71, v73);
  return swift_release();
}

uint64_t partial apply for closure #3 in SpecificMedCompletedLogSnippet.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SpecificMedCompletedLogSnippet() - 8) + 80);
  return closure #3 in SpecificMedCompletedLogSnippet.body.getter(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t closure #1 in closure #3 in SpecificMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(a1 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 28));
  if (v5)
  {
    v6 = type metadata accessor for SpecificMedCompletedLogModel();
    outlined init with copy of Environment<ColorSchemeContrast>.Content(a1 + *(int *)(v6 + 32), (uint64_t)v4, &demangling cache variable for type metadata for AppPunchout?);
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) != 1)
    {
      v9 = v5;
      dispatch thunk of Context.perform(appPunchout:)();

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v4, v7);
    }
    __break(1u);
  }
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_24A4DD9B4()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A4DD9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for StatusIndicatorView();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_24A4DDAA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = (int *)type metadata accessor for SpecificMedCompletedLogSnippet();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v14 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for SpecificMedCompletedLogModel();
  v9 = v0 + v3 + *(int *)(v8 + 32);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v9, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v7 + *(int *)(v8 + 76);
  v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(v7 + v1[5]), *(_QWORD *)(v7 + v1[5] + 8), *(_BYTE *)(v7 + v1[5] + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8), *(_BYTE *)(v7 + v1[6] + 16));
  swift_bridgeObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v14 + v6) & ~v6), v4);
  return swift_deallocObject();
}

void partial apply for closure #2 in SpecificMedCompletedLogSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for SpecificMedCompletedLogSnippet();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  type metadata accessor for AppPunchout();
  closure #2 in SpecificMedCompletedLogSnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in SpecificMedCompletedLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for SpecificMedCompletedLogSnippet(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  id v78;
  uint64_t v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  char *__dst;
  char *__dsta;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = a2[6];
    a1[5] = a2[5];
    a1[6] = v8;
    v9 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
    v10 = v9[8];
    __dst = (char *)v4 + v10;
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for AppPunchout();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = v9[9];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v9[10];
    v21 = (_QWORD *)((char *)v4 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v82 = v22[1];
    *v21 = *v22;
    v21[1] = v82;
    v23 = v9[11];
    v24 = (_QWORD *)((char *)v4 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v9[12];
    v28 = (_QWORD *)((char *)v4 + v27);
    v29 = (_QWORD *)((char *)a2 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = v9[13];
    v32 = (_QWORD *)((char *)v4 + v31);
    v33 = (_QWORD *)((char *)a2 + v31);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    *((_BYTE *)v4 + v9[14]) = *((_BYTE *)a2 + v9[14]);
    *((_BYTE *)v4 + v9[15]) = *((_BYTE *)a2 + v9[15]);
    v35 = v9[16];
    v36 = (_QWORD *)((char *)v4 + v35);
    v37 = (_QWORD *)((char *)a2 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = v9[17];
    v40 = (_QWORD *)((char *)v4 + v39);
    v41 = (_QWORD *)((char *)a2 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = v9[18];
    v44 = (_QWORD *)((char *)v4 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = v9[19];
    __dsta = (char *)v4 + v47;
    v48 = (char *)a2 + v47;
    v49 = type metadata accessor for SnippetHeaderModel();
    v80 = *(_QWORD *)(v49 - 8);
    v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v81(v48, 1, v49))
    {
      v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v51 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(__dsta, v48, v51);
      v52 = *(int *)(v49 + 20);
      v53 = &__dsta[v52];
      v54 = &v48[v52];
      v55 = *((_QWORD *)v54 + 1);
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v55;
      v56 = *(int *)(v49 + 24);
      v57 = &__dsta[v56];
      v58 = &v48[v56];
      v59 = *((_QWORD *)v58 + 1);
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *((_QWORD *)v57 + 1) = v59;
      v60 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60(__dsta, 0, 1, v49);
    }
    v61 = a3[5];
    v62 = (char *)v4 + v61;
    v63 = (char *)a2 + v61;
    v64 = *(_QWORD *)((char *)a2 + v61);
    v65 = *(_QWORD *)((char *)a2 + v61 + 8);
    v66 = *((_BYTE *)a2 + v61 + 16);
    outlined copy of Text.Storage(v64, v65, v66);
    *(_QWORD *)v62 = v64;
    *((_QWORD *)v62 + 1) = v65;
    v62[16] = v66;
    *((_QWORD *)v62 + 3) = *((_QWORD *)v63 + 3);
    v67 = a3[6];
    v68 = (char *)v4 + v67;
    v69 = (char *)a2 + v67;
    v70 = *(_QWORD *)((char *)a2 + v67);
    v71 = *(_QWORD *)((char *)a2 + v67 + 8);
    v72 = *((_BYTE *)a2 + v67 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v70, v71, v72);
    *(_QWORD *)v68 = v70;
    *((_QWORD *)v68 + 1) = v71;
    v68[16] = v72;
    *((_QWORD *)v68 + 3) = *((_QWORD *)v69 + 3);
    v73 = a3[7];
    v74 = (_QWORD *)((char *)v4 + v73);
    v75 = (char *)a2 + v73;
    v77 = *(void **)v75;
    v76 = *((_QWORD *)v75 + 1);
    *v74 = v77;
    v74[1] = v76;
    swift_bridgeObjectRetain();
    v78 = v77;
  }
  return v4;
}

void destroy for SpecificMedCompletedLogSnippet(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for SpecificMedCompletedLogModel();
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(v4 + 76);
  v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8), *(_BYTE *)(a1 + a2[6] + 16));
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  void *__dst;
  char *__dsta;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  v9 = v8[8];
  __dst = (void *)(a1 + v9);
  v10 = (const void *)(a2 + v9);
  v11 = type metadata accessor for AppPunchout();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = v8[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = v8[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v80 = v20[1];
  *v19 = *v20;
  v19[1] = v80;
  v21 = v8[11];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = v8[12];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = v8[13];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  *(_BYTE *)(a1 + v8[14]) = *(_BYTE *)(a2 + v8[14]);
  *(_BYTE *)(a1 + v8[15]) = *(_BYTE *)(a2 + v8[15]);
  v33 = v8[16];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = v8[17];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = v8[18];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = v8[19];
  __dsta = (char *)(a1 + v45);
  v46 = (char *)(a2 + v45);
  v47 = type metadata accessor for SnippetHeaderModel();
  v78 = *(_QWORD *)(v47 - 8);
  v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v79(v46, 1, v47))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dsta, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v49 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(__dsta, v46, v49);
    v50 = *(int *)(v47 + 20);
    v51 = &__dsta[v50];
    v52 = &v46[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v54 = *(int *)(v47 + 24);
    v55 = &__dsta[v54];
    v56 = &v46[v54];
    v57 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v57;
    v58 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58(__dsta, 0, 1, v47);
  }
  v59 = a3[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = *(_QWORD *)(a2 + v59);
  v63 = *(_QWORD *)(a2 + v59 + 8);
  v64 = *(_BYTE *)(a2 + v59 + 16);
  outlined copy of Text.Storage(v62, v63, v64);
  *(_QWORD *)v60 = v62;
  *(_QWORD *)(v60 + 8) = v63;
  *(_BYTE *)(v60 + 16) = v64;
  *(_QWORD *)(v60 + 24) = *(_QWORD *)(v61 + 24);
  v65 = a3[6];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = *(_QWORD *)(a2 + v65);
  v69 = *(_QWORD *)(a2 + v65 + 8);
  v70 = *(_BYTE *)(a2 + v65 + 16);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v68, v69, v70);
  *(_QWORD *)v66 = v68;
  *(_QWORD *)(v66 + 8) = v69;
  *(_BYTE *)(v66 + 16) = v70;
  *(_QWORD *)(v66 + 24) = *(_QWORD *)(v67 + 24);
  v71 = a3[7];
  v72 = (_QWORD *)(a1 + v71);
  v73 = a2 + v71;
  v75 = *(void **)v73;
  v74 = *(_QWORD *)(v73 + 8);
  *v72 = v75;
  v72[1] = v74;
  swift_bridgeObjectRetain();
  v76 = v75;
  return a1;
}

uint64_t assignWithCopy for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  v7 = v6[8];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = v6[9];
  v17 = a1 + v16;
  v18 = (uint64_t *)(a2 + v16);
  v19 = *v18;
  *(_BYTE *)(v17 + 8) = *((_BYTE *)v18 + 8);
  *(_QWORD *)v17 = v19;
  v20 = v6[10];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = v6[11];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = v6[12];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = v6[13];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  v32 = v6[16];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = v6[17];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = v6[18];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = v6[19];
  v42 = (char *)(a1 + v41);
  v43 = (char *)(a2 + v41);
  v44 = type metadata accessor for SnippetHeaderModel();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      v83 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v42, v43, v83);
      v84 = *(int *)(v44 + 20);
      v85 = &v42[v84];
      v86 = &v43[v84];
      *(_QWORD *)v85 = *(_QWORD *)v86;
      *((_QWORD *)v85 + 1) = *((_QWORD *)v86 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v87 = *(int *)(v44 + 24);
      v88 = &v42[v87];
      v89 = &v43[v87];
      *(_QWORD *)v88 = *(_QWORD *)v89;
      *((_QWORD *)v88 + 1) = *((_QWORD *)v89 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v48)
  {
LABEL_12:
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_13;
  }
  v49 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v42, v43, v49);
  v50 = *(int *)(v44 + 20);
  v51 = &v42[v50];
  v52 = &v43[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  v53 = *(int *)(v44 + 24);
  v54 = &v42[v53];
  v55 = &v43[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56(v42, 0, 1, v44);
LABEL_13:
  v58 = a3[5];
  v59 = a1 + v58;
  v60 = a2 + v58;
  v61 = *(_QWORD *)(a2 + v58);
  v62 = *(_QWORD *)(a2 + v58 + 8);
  v63 = *(_BYTE *)(a2 + v58 + 16);
  outlined copy of Text.Storage(v61, v62, v63);
  v64 = *(_QWORD *)v59;
  v65 = *(_QWORD *)(v59 + 8);
  v66 = *(_BYTE *)(v59 + 16);
  *(_QWORD *)v59 = v61;
  *(_QWORD *)(v59 + 8) = v62;
  *(_BYTE *)(v59 + 16) = v63;
  outlined consume of Text.Storage(v64, v65, v66);
  *(_QWORD *)(v59 + 24) = *(_QWORD *)(v60 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v67 = a3[6];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = *(_QWORD *)(a2 + v67);
  v71 = *(_QWORD *)(a2 + v67 + 8);
  v72 = *(_BYTE *)(a2 + v67 + 16);
  outlined copy of Text.Storage(v70, v71, v72);
  v73 = *(_QWORD *)v68;
  v74 = *(_QWORD *)(v68 + 8);
  v75 = *(_BYTE *)(v68 + 16);
  *(_QWORD *)v68 = v70;
  *(_QWORD *)(v68 + 8) = v71;
  *(_BYTE *)(v68 + 16) = v72;
  outlined consume of Text.Storage(v73, v74, v75);
  *(_QWORD *)(v68 + 24) = *(_QWORD *)(v69 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v76 = a3[7];
  v77 = (_QWORD *)(a1 + v76);
  v78 = a2 + v76;
  v79 = *(void **)(a1 + v76);
  v80 = *(void **)v78;
  *v77 = *(_QWORD *)v78;
  v81 = v80;

  v77[1] = *(_QWORD *)(v78 + 8);
  return a1;
}

uint64_t initializeWithTake for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  v7 = v6[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AppPunchout();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = v6[9];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_OWORD *)(a1 + v6[10]) = *(_OWORD *)(a2 + v6[10]);
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(_OWORD *)(a1 + v6[17]) = *(_OWORD *)(a2 + v6[17]);
  *(_OWORD *)(a1 + v6[18]) = *(_OWORD *)(a2 + v6[18]);
  v16 = v6[19];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for SnippetHeaderModel();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
    *(_OWORD *)&v17[*(int *)(v19 + 20)] = *(_OWORD *)&v18[*(int *)(v19 + 20)];
    *(_OWORD *)&v17[*(int *)(v19 + 24)] = *(_OWORD *)&v18[*(int *)(v19 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v23 = a3[5];
  v24 = a3[6];
  v25 = *(_OWORD *)(a2 + v23);
  v26 = *(_OWORD *)(a2 + v23 + 16);
  v27 = (_OWORD *)(a1 + v23);
  *v27 = v25;
  v27[1] = v26;
  v28 = (_OWORD *)(a1 + v24);
  v29 = (_OWORD *)(a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  v10 = v9[8];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for AppPunchout();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = v9[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = v9[10];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = v9[11];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = v9[12];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v37 = v9[13];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  *(_BYTE *)(a1 + v9[15]) = *(_BYTE *)(a2 + v9[15]);
  v42 = v9[16];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (uint64_t *)(a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  v47 = v9[17];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v51 = *v49;
  v50 = v49[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  v52 = v9[18];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (uint64_t *)(a2 + v52);
  v56 = *v54;
  v55 = v54[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  v57 = v9[19];
  v58 = (char *)(a1 + v57);
  v59 = (char *)(a2 + v57);
  v60 = type metadata accessor for SnippetHeaderModel();
  v61 = *(_QWORD *)(v60 - 8);
  v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  v63 = v62(v58, 1, v60);
  v64 = v62(v59, 1, v60);
  if (!v63)
  {
    if (!v64)
    {
      v84 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 40))(v58, v59, v84);
      v85 = *(int *)(v60 + 20);
      v86 = &v58[v85];
      v87 = &v59[v85];
      v89 = *(_QWORD *)v87;
      v88 = *((_QWORD *)v87 + 1);
      *(_QWORD *)v86 = v89;
      *((_QWORD *)v86 + 1) = v88;
      swift_bridgeObjectRelease();
      v90 = *(int *)(v60 + 24);
      v91 = &v58[v90];
      v92 = &v59[v90];
      v94 = *(_QWORD *)v92;
      v93 = *((_QWORD *)v92 + 1);
      *(_QWORD *)v91 = v94;
      *((_QWORD *)v91 + 1) = v93;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v64)
  {
LABEL_12:
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_13;
  }
  v65 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v58, v59, v65);
  *(_OWORD *)&v58[*(int *)(v60 + 20)] = *(_OWORD *)&v59[*(int *)(v60 + 20)];
  *(_OWORD *)&v58[*(int *)(v60 + 24)] = *(_OWORD *)&v59[*(int *)(v60 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
LABEL_13:
  v67 = a3[5];
  v68 = a1 + v67;
  v69 = a2 + v67;
  LOBYTE(v67) = *(_BYTE *)(a2 + v67 + 16);
  v70 = *(_QWORD *)v68;
  v71 = *(_QWORD *)(v68 + 8);
  v72 = *(_BYTE *)(v68 + 16);
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *(_BYTE *)(v68 + 16) = v67;
  outlined consume of Text.Storage(v70, v71, v72);
  *(_QWORD *)(v68 + 24) = *(_QWORD *)(v69 + 24);
  swift_bridgeObjectRelease();
  v73 = a3[6];
  v74 = a1 + v73;
  v75 = a2 + v73;
  LOBYTE(v73) = *(_BYTE *)(a2 + v73 + 16);
  v76 = *(_QWORD *)v74;
  v77 = *(_QWORD *)(v74 + 8);
  v78 = *(_BYTE *)(v74 + 16);
  *(_OWORD *)v74 = *(_OWORD *)v75;
  *(_BYTE *)(v74 + 16) = v73;
  outlined consume of Text.Storage(v76, v77, v78);
  *(_QWORD *)(v74 + 24) = *(_QWORD *)(v75 + 24);
  swift_bridgeObjectRelease();
  v79 = a3[7];
  v80 = (_QWORD *)(a1 + v79);
  v81 = (_QWORD *)(a2 + v79);
  v82 = *(void **)(a1 + v79);
  *v80 = *v81;

  v80[1] = v81[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecificMedCompletedLogSnippet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4DF1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SpecificMedCompletedLogModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogSnippet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4DF254(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SpecificMedCompletedLogModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for SpecificMedCompletedLogSnippet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SpecificMedCompletedLogModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for SpecificMedCompletedLogSnippet();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for SpecificMedCompletedLogModel();
  v5 = v3 + *(int *)(v4 + 32);
  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v3 + *(int *)(v4 + 76);
  v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(v3 + v1[5]), *(_QWORD *)(v3 + v1[5] + 8), *(_BYTE *)(v3 + v1[5] + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(_QWORD *)(v3 + v1[6]), *(_QWORD *)(v3 + v1[6] + 8), *(_BYTE *)(v3 + v1[6] + 16));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in SpecificMedCompletedLogSnippet.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SpecificMedCompletedLogSnippet() - 8) + 80);
  return closure #1 in closure #3 in SpecificMedCompletedLogSnippet.body.getter(v0 + ((v1 + 16) & ~v1));
}

uint64_t BodyMassQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BodyMassQueryModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*BodyMassQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.averageValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 20));
}

uint64_t type metadata accessor for BodyMassQueryModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BodyMassQueryModel;
  if (!type metadata singleton initialization cache for BodyMassQueryModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BodyMassQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BodyMassQueryModel();
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.averageValue.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.maxValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 24));
}

uint64_t BodyMassQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BodyMassQueryModel();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.maxValue.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.minValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 28));
}

uint64_t BodyMassQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BodyMassQueryModel();
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.minValue.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 32));
}

uint64_t BodyMassQueryModel.value.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for BodyMassQueryModel();
  v6 = v2 + *(int *)(result + 32);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.value.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BodyMassQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 36), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t BodyMassQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BodyMassQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 36), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*BodyMassQueryModel.dateLabel.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.averageValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.averageValueString.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.maxValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.maxValueString.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.minValueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.minValueString.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.valueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.valueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.valueString.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.unitString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BodyMassQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 56), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t BodyMassQueryModel.unitString.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BodyMassQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 56), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*BodyMassQueryModel.unitString.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BodyMassQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 60), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t BodyMassQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;

  Model = type metadata accessor for BodyMassQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 60), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*BodyMassQueryModel.snippetHeaderModel.modify())()
{
  type metadata accessor for BodyMassQueryModel();
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.init(averageValue:maxValue:minValue:value:unitString:dateLabel:url:headerModel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *Model;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  int v65;
  uint64_t v66;
  _BOOL4 v67;
  int v68;
  _BOOL4 v69;
  uint64_t v70;
  _BOOL4 v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v74 = a8;
  v75 = a5;
  v76 = a7;
  v70 = a3;
  v66 = a1;
  v77 = a13;
  v79 = a12;
  v80 = a11;
  v81 = a10;
  v64 = (a2 & 1) == 0;
  v65 = a2;
  v67 = (a4 & 1) == 0;
  v68 = a4;
  v69 = (a6 & 1) == 0;
  v71 = (a8 & 1) == 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AppPunchout();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v73 = v18;
  v72(a9, 1, 1, v18);
  Model = (int *)type metadata accessor for BodyMassQueryModel();
  v63 = a9 + Model[9];
  v20 = v63;
  v21 = type metadata accessor for SpeakableString();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  v23 = (uint64_t *)(a9 + Model[10]);
  *v23 = 0;
  v23[1] = 0;
  v24 = (uint64_t *)(a9 + Model[11]);
  *v24 = 0;
  v24[1] = 0;
  v25 = (uint64_t *)(a9 + Model[12]);
  *v25 = 0;
  v25[1] = 0;
  v26 = (uint64_t *)(a9 + Model[13]);
  v78 = v26;
  *v26 = 0;
  v26[1] = 0;
  v27 = a9 + Model[14];
  v22(v27, 1, 1, v21);
  v62 = a9 + Model[15];
  v28 = v62;
  v29 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = v66;
  v31 = (v66 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v64 && v31)
    v30 = 0;
  v32 = v65 | v31;
  v33 = a9 + Model[5];
  *(_QWORD *)v33 = v30;
  *(_BYTE *)(v33 + 8) = v32 & 1;
  v34 = v70;
  v35 = (v70 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v67 && v35)
    v34 = 0;
  v36 = v68 | v35;
  v37 = a9 + Model[6];
  *(_QWORD *)v37 = v34;
  *(_BYTE *)(v37 + 8) = v36 & 1;
  v38 = v75;
  v39 = (v75 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v69 && v39)
    v38 = 0;
  v40 = a6 | v39;
  v41 = a9 + Model[7];
  *(_QWORD *)v41 = v38;
  *(_BYTE *)(v41 + 8) = v40 & 1;
  v42 = v76;
  v43 = (v76 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v71 && v43)
    v42 = 0;
  v44 = v74 | v43;
  v45 = a9 + Model[8];
  *(_QWORD *)v45 = v42;
  *(_BYTE *)(v45 + 8) = v44 & 1;
  outlined assign with copy of SpeakableString?(v81, v27, &demangling cache variable for type metadata for SpeakableString?);
  outlined assign with copy of SpeakableString?(v80, v63, &demangling cache variable for type metadata for SpeakableString?);
  SleepQueryModel.createAppPunchout(url:)(v79);
  v72((uint64_t)v17, 0, 1, v73);
  outlined assign with take of AppPunchout?((uint64_t)v17, a9, &demangling cache variable for type metadata for AppPunchout?);
  v46 = v77;
  outlined assign with copy of SpeakableString?(v77, v62, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v47 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v33, *(_BYTE *)(v33 + 8));
  v49 = v48;
  swift_bridgeObjectRelease();
  *v23 = v47;
  v23[1] = v49;
  v50 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v37, *(_BYTE *)(v37 + 8));
  v52 = v51;
  swift_bridgeObjectRelease();
  *v24 = v50;
  v24[1] = v52;
  v53 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v41, *(_BYTE *)(v41 + 8));
  v55 = v54;
  swift_bridgeObjectRelease();
  *v25 = v53;
  v25[1] = v55;
  v56 = GenericQueryModel.roundUp(inputValue:)(*(_QWORD *)v45, *(_BYTE *)(v45 + 8));
  v58 = v57;
  outlined destroy of Font.Design?(v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v79, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v80, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of Font.Design?(v81, &demangling cache variable for type metadata for SpeakableString?);
  v59 = v78;
  result = swift_bridgeObjectRelease();
  *v59 = v56;
  v59[1] = v58;
  return result;
}

uint64_t BodyMassQueryModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A4E00D4 + 4 * byte_24A4EC9A0[a1]))(0x68636E7550707061, 0xEB0000000074756FLL);
}

uint64_t sub_24A4E00D4()
{
  return 0x5665676172657661;
}

uint64_t sub_24A4E00F4()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_24A4E011C()
{
  return 0x65756C6176;
}

uint64_t sub_24A4E0130()
{
  return 0x6562614C65746164;
}

unint64_t sub_24A4E014C()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BodyMassQueryModel.CodingKeys()
{
  unsigned __int8 *v0;

  return BodyMassQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BodyMassQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized BodyMassQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance BodyMassQueryModel.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BodyMassQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BodyMassQueryModel.CodingKeys()
{
  lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t BodyMassQueryModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BodyMassQueryModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[31] = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6E8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for BodyMassQueryModel();
    v8[30] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[29] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[28] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[27] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[26] = 5;
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[25] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[24] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[15] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[14] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[12] = 11;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BodyMassQueryModel.CodingKeys, &unk_251BD4CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BodyMassQueryModel.CodingKeys, &unk_251BD4CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for BodyMassQueryModel.CodingKeys, &unk_251BD4CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508]("Ձn\apO", &unk_251BD4CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

uint64_t BodyMassQueryModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *Model;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;

  v75 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x24BDAC7A8](v3);
  v77 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v85 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v84 = (char *)&v71 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x24BDAC7A8](v9);
  v86 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BodyMassQueryModel.CodingKeys>);
  v87 = *(_QWORD *)(v11 - 8);
  v88 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v92 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = (int *)type metadata accessor for BodyMassQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AppPunchout();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v83 = v16;
  v17(v15, 1, 1);
  v18 = &v15[Model[5]];
  *(_QWORD *)v18 = 0;
  v82 = v18;
  v18[8] = 1;
  v19 = &v15[Model[6]];
  *(_QWORD *)v19 = 0;
  v81 = (uint64_t *)v19;
  v19[8] = 1;
  v20 = &v15[Model[7]];
  *(_QWORD *)v20 = 0;
  v80 = (uint64_t *)v20;
  v20[8] = 1;
  v21 = &v15[Model[8]];
  *(_QWORD *)v21 = 0;
  v79 = (uint64_t *)v21;
  v21[8] = 1;
  v22 = (uint64_t)&v15[Model[9]];
  v23 = type metadata accessor for SpeakableString();
  v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 56);
  v78 = v22;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v22, 1, 1, v23);
  v25 = &v15[Model[10]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v26 = &v15[Model[11]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v27 = &v15[Model[12]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v28 = &v15[Model[13]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v76 = &v15[Model[14]];
  v24();
  v29 = Model[15];
  v91 = v15;
  v30 = (uint64_t)&v15[v29];
  v31 = type metadata accessor for SnippetHeaderModel();
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v74 = v30;
  v32(v30, 1, 1, v31);
  v33 = a1[3];
  v90 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v33);
  lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();
  v34 = v89;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v34)
  {
    v70 = (uint64_t)v91;
  }
  else
  {
    v35 = v82;
    v89 = v26;
    v73 = v27;
    v36 = (uint64_t)v84;
    v72 = v28;
    v71 = v31;
    v37 = (uint64_t)v85;
    v38 = v87;
    v104 = 0;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, (uint64_t (*)(uint64_t))MEMORY[0x24BEAA6D0], MEMORY[0x24BEAA6F0]);
    v39 = (uint64_t)v86;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v39, (uint64_t)v91, &demangling cache variable for type metadata for AppPunchout?);
    v103 = 1;
    *(_QWORD *)v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v35[8] = v41 & 1;
    v102 = 2;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v43 = v81;
    *v81 = v42;
    *((_BYTE *)v43 + 8) = v44 & 1;
    v101 = 3;
    v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v46 = v80;
    *v80 = v45;
    *((_BYTE *)v46 + 8) = v47 & 1;
    v100 = 4;
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v49 = v79;
    *v79 = v48;
    *((_BYTE *)v49 + 8) = v50 & 1;
    v99 = 5;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v36, v78, &demangling cache variable for type metadata for SpeakableString?);
    v98 = 6;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v53 = v52;
    v54 = v25;
    v55 = v51;
    swift_bridgeObjectRelease();
    *v54 = v55;
    v54[1] = v53;
    v97 = 7;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v58 = v57;
    v59 = (uint64_t *)v89;
    swift_bridgeObjectRelease();
    *v59 = v56;
    v59[1] = v58;
    v96 = 8;
    v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v62 = v61;
    v63 = (uint64_t *)v73;
    swift_bridgeObjectRelease();
    *v63 = v60;
    v63[1] = v62;
    v95 = 9;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v66 = v65;
    v67 = (uint64_t *)v72;
    swift_bridgeObjectRelease();
    *v67 = v64;
    v67[1] = v66;
    v94 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v37, (uint64_t)v76, &demangling cache variable for type metadata for SpeakableString?);
    v93 = 11;
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    v68 = v88;
    v69 = v92;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v69, v68);
    v70 = (uint64_t)v91;
    outlined assign with take of AppPunchout?(v77, v74, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of BodyMassQueryModel(v70, v75);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v90);
  return outlined destroy of GenericMedCompletedLogModel(v70, (uint64_t (*)(_QWORD))type metadata accessor for BodyMassQueryModel);
}

uint64_t outlined init with copy of BodyMassQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model;

  Model = type metadata accessor for BodyMassQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in BodyMassQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BodyMassQueryModel and conformance BodyMassQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for BodyMassQueryModel, (uint64_t)&protocol conformance descriptor for BodyMassQueryModel);
}

uint64_t base witness table accessor for Encodable in BodyMassQueryModel()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type BodyMassQueryModel and conformance BodyMassQueryModel, (uint64_t (*)(uint64_t))type metadata accessor for BodyMassQueryModel, (uint64_t)"тn\a\\P");
}

uint64_t protocol witness for Decodable.init(from:) in conformance BodyMassQueryModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BodyMassQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BodyMassQueryModel(_QWORD *a1)
{
  return BodyMassQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyMassQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AppPunchout();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = a3[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for SpeakableString();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    v67 = v27;
    if (v28(v25, 1, v26))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v30 = a3[10];
    v31 = a3[11];
    v32 = (uint64_t *)((char *)a1 + v30);
    v33 = (uint64_t *)((char *)a2 + v30);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = (uint64_t *)((char *)a1 + v31);
    v36 = (uint64_t *)((char *)a2 + v31);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = a3[12];
    v39 = a3[13];
    v40 = (uint64_t *)((char *)a1 + v38);
    v41 = (uint64_t *)((char *)a2 + v38);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = (uint64_t *)((char *)a1 + v39);
    v44 = (uint64_t *)((char *)a2 + v39);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = a3[14];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28(v48, 1, v26))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      v50 = v67;
    }
    else
    {
      v50 = v67;
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v47, v48, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v47, 0, 1, v26);
    }
    v51 = a3[15];
    v52 = (char *)a1 + v51;
    v53 = (char *)a2 + v51;
    v54 = type metadata accessor for SnippetHeaderModel();
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v52, v53, v26);
      v57 = *(int *)(v54 + 20);
      v58 = &v52[v57];
      v59 = &v53[v57];
      v60 = *((_QWORD *)v59 + 1);
      *(_QWORD *)v58 = *(_QWORD *)v59;
      *((_QWORD *)v58 + 1) = v60;
      v61 = *(int *)(v54 + 24);
      v62 = &v52[v61];
      v63 = &v53[v61];
      v64 = *((_QWORD *)v63 + 1);
      *(_QWORD *)v62 = *(_QWORD *)v63;
      *((_QWORD *)v62 + 1) = v64;
      v65 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65(v52, 0, 1, v54);
    }
  }
  return a1;
}

uint64_t destroy for BodyMassQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = type metadata accessor for AppPunchout();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for SpeakableString();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + a2[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  v11 = a1 + a2[15];
  v12 = type metadata accessor for SnippetHeaderModel();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v65;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v65 = v25;
  if (v26(v23, 1, v24))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v28 = a3[10];
  v29 = a3[11];
  v30 = &a1[v28];
  v31 = &a2[v28];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  v33 = &a1[v29];
  v34 = &a2[v29];
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v35;
  v36 = a3[12];
  v37 = a3[13];
  v38 = &a1[v36];
  v39 = &a2[v36];
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = v40;
  v41 = &a1[v37];
  v42 = &a2[v37];
  v43 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = v43;
  v44 = a3[14];
  v45 = &a1[v44];
  v46 = &a2[v44];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26(v46, 1, v24))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    v48 = v65;
  }
  else
  {
    v48 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v45, v46, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v45, 0, 1, v24);
  }
  v49 = a3[15];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v52 = type metadata accessor for SnippetHeaderModel();
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v50, v51, v24);
    v55 = *(int *)(v52 + 20);
    v56 = &v50[v55];
    v57 = &v51[v55];
    v58 = *((_QWORD *)v57 + 1);
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *((_QWORD *)v56 + 1) = v58;
    v59 = *(int *)(v52 + 24);
    v60 = &v50[v59];
    v61 = &v51[v59];
    v62 = *((_QWORD *)v61 + 1);
    *(_QWORD *)v60 = *(_QWORD *)v61;
    *((_QWORD *)v60 + 1) = v62;
    v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63(v50, 0, 1, v52);
  }
  return a1;
}

char *assignWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for SpeakableString();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_13:
  v37 = a3[10];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3[11];
  v41 = &a1[v40];
  v42 = &a2[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = a3[12];
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = a3[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = a3[14];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v52 = v33(&a1[v49], 1, v31);
  v53 = v33(v51, 1, v31);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v50, v51, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v50, 0, 1, v31);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v50, v31);
LABEL_18:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v50, v51, v31);
LABEL_19:
  v55 = a3[15];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = type metadata accessor for SnippetHeaderModel();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v56, v57, v31);
      v72 = *(int *)(v58 + 20);
      v73 = &v56[v72];
      v74 = &v57[v72];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v75 = *(int *)(v58 + 24);
      v76 = &v56[v75];
      v77 = &v57[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v62)
  {
LABEL_24:
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v56, v57, v31);
  v63 = *(int *)(v58 + 20);
  v64 = &v56[v63];
  v65 = &v57[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);
  v66 = *(int *)(v58 + 24);
  v67 = &v56[v66];
  v68 = &v57[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_QWORD *)v67 + 1) = *((_QWORD *)v68 + 1);
  v69 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v56, 0, 1, v58);
  return a1;
}

char *initializeWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v23, 1, v24))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v28 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  v29 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  v30 = a3[14];
  v31 = &a1[v30];
  v32 = &a2[v30];
  if (v26(&a2[v30], 1, v24))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v31, v32, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v31, 0, 1, v24);
  }
  v34 = a3[15];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = type metadata accessor for SnippetHeaderModel();
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v35, v36, v24);
    *(_OWORD *)&v35[*(int *)(v37 + 20)] = *(_OWORD *)&v36[*(int *)(v37 + 20)];
    *(_OWORD *)&v35[*(int *)(v37 + 24)] = *(_OWORD *)&v36[*(int *)(v37 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  return a1;
}

char *assignWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  v6 = type metadata accessor for AppPunchout();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SpeakableString();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_13:
  v33 = a3[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = a3[11];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v43 = a3[12];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  v48 = a3[13];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v53 = a3[14];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v56 = v29(&a1[v53], 1, v27);
  v57 = v29(v55, 1, v27);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v54, v55, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v54, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v54, v27);
LABEL_18:
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v54, v55, v27);
LABEL_19:
  v59 = a3[15];
  v60 = &a1[v59];
  v61 = &a2[v59];
  v62 = type metadata accessor for SnippetHeaderModel();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v60, v61, v27);
      v69 = *(int *)(v62 + 20);
      v70 = &v60[v69];
      v71 = &v61[v69];
      v73 = *(_QWORD *)v71;
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = v73;
      *((_QWORD *)v70 + 1) = v72;
      swift_bridgeObjectRelease();
      v74 = *(int *)(v62 + 24);
      v75 = &v60[v74];
      v76 = &v61[v74];
      v78 = *(_QWORD *)v76;
      v77 = *((_QWORD *)v76 + 1);
      *(_QWORD *)v75 = v78;
      *((_QWORD *)v75 + 1) = v77;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v66)
  {
LABEL_24:
    v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v60, v61, v27);
  *(_OWORD *)&v60[*(int *)(v62 + 20)] = *(_OWORD *)&v61[*(int *)(v62 + 20)];
  *(_OWORD *)&v60[*(int *)(v62 + 24)] = *(_OWORD *)&v61[*(int *)(v62 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyMassQueryModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4E22C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[15];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for BodyMassQueryModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A4E23BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[9];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[10] + 8) = a2;
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[15];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for BodyMassQueryModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, (void (*)(uint64_t))MEMORY[0x24BEAA6D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, &lazy cache variable for type metadata for SpeakableString?, (void (*)(uint64_t))MEMORY[0x24BE929C8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for BodyMassQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BodyMassQueryModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_24A4E2660 + 4 * byte_24A4EC9B1[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_24A4E2694 + 4 * byte_24A4EC9AC[v4]))();
}

uint64_t sub_24A4E2694(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4E269C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4E26A4);
  return result;
}

uint64_t sub_24A4E26B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4E26B8);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_24A4E26BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4E26C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for BodyMassQueryModel.CodingKeys()
{
  return &unk_251BD4CA8;
}

uint64_t specialized BodyMassQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3AF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6972745374696E75 && a2 == 0xEA0000000000676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F39B0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t PhoneRingsModel.exerciseGoalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PhoneRingsModel.exerciseGoalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseTotalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PhoneRingsModel.exerciseTotalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveGoalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PhoneRingsModel.moveGoalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.moveGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveTotalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t PhoneRingsModel.moveTotalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.moveTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standGoalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t PhoneRingsModel.standGoalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.standGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standTotalValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t PhoneRingsModel.standTotalValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.standTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.exerciseLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseValueLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.exerciseValueLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseValueLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseUnitLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.exerciseUnitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseUnitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.moveLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.moveLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveValueLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.moveValueLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.moveValueLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveUnitLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.moveUnitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.moveUnitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.standLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 192) = a1;
  *(_QWORD *)(v2 + 200) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.standLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standValueLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.standValueLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 216) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.standValueLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standUnitLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.standUnitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 224) = a1;
  *(_QWORD *)(v2 + 232) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.standUnitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.isSmartEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 240);
}

uint64_t PhoneRingsModel.isSmartEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 240) = result;
  return result;
}

uint64_t (*PhoneRingsModel.isSmartEnabled.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

void __swiftcall PhoneRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:exerciseLabel:exerciseUnitLabel:moveLabel:moveUnitLabel:standLabel:standUnitLabel:isSmartEnabled:)(WellnessUI::PhoneRingsModel *__return_ptr retstr, Swift::Double exerciseGoalValue, Swift::Double exerciseTotalValue, Swift::Double moveGoalValue, Swift::Double moveTotalValue, Swift::Double standGoalValue, Swift::Double standTotalValue, Swift::String exerciseLabel, Swift::String exerciseUnitLabel, Swift::String moveLabel, Swift::String moveUnitLabel, Swift::String standLabel, Swift::String standUnitLabel, Swift::Bool isSmartEnabled)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String_optional v39;
  Swift::String_optional v40;
  Swift::String_optional v41;
  __int128 v42;
  Swift::String_optional v43;
  __int128 v44;
  __int128 v45;
  Swift::String_optional v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String_optional v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  Swift::String_optional v56;
  Swift::String_optional v57;
  Swift::String_optional v58;
  Swift::String_optional v59;
  Swift::String_optional v60;
  Swift::String_optional v61;
  Swift::String v62;
  Swift::String_optional v63;
  Swift::String v64;
  Swift::Bool v65;

  if ((~*(_QWORD *)&exerciseTotalValue & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (exerciseTotalValue <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (exerciseTotalValue >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  object = moveUnitLabel._object;
  countAndFlagsBits = moveUnitLabel._countAndFlagsBits;
  v19 = moveLabel._object;
  v20 = moveLabel._countAndFlagsBits;
  v21 = exerciseUnitLabel._object;
  v22 = exerciseUnitLabel._countAndFlagsBits;
  v23 = exerciseLabel._object;
  v49 = exerciseLabel._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v50.value._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v50.value._object = v28;
  v29._countAndFlagsBits = 47;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  if ((~*(_QWORD *)&exerciseGoalValue & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (exerciseGoalValue <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (exerciseGoalValue >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v48 = v22;
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  if ((~*(_QWORD *)&moveTotalValue & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (moveTotalValue <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (moveTotalValue >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v31 = v50.value._object;
  v47 = v50.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50.value._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v50.value._object = v32;
  v33._countAndFlagsBits = 47;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  if ((~*(_QWORD *)&moveGoalValue & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (moveGoalValue <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (moveGoalValue >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  if ((~*(_QWORD *)&standTotalValue & 0x7FF0000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (standTotalValue <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (standTotalValue >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v46 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50.value._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v50.value._object = v35;
  v36._countAndFlagsBits = 47;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  if ((~*(_QWORD *)&standGoalValue & 0x7FF0000000000000) == 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (standGoalValue <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (standGoalValue < 9.22337204e18)
  {
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38 = v50;
    *(Swift::Double *)&v50.value._countAndFlagsBits = exerciseGoalValue;
    LOBYTE(v50.value._object) = 0;
    *(Swift::Double *)&v51 = exerciseTotalValue;
    BYTE8(v51) = 0;
    *(Swift::Double *)&v52 = moveGoalValue;
    BYTE8(v52) = 0;
    *(Swift::Double *)&v53 = moveTotalValue;
    BYTE8(v53) = 0;
    *(Swift::Double *)&v54 = standGoalValue;
    BYTE8(v54) = 0;
    *(Swift::Double *)&v55 = standTotalValue;
    BYTE8(v55) = 0;
    v56.value._countAndFlagsBits = v49;
    v56.value._object = v23;
    v57.value._countAndFlagsBits = v47;
    v57.value._object = v31;
    v58.value._countAndFlagsBits = v48;
    v58.value._object = v21;
    v59.value._countAndFlagsBits = v20;
    v59.value._object = v19;
    v60 = v46;
    v61.value._countAndFlagsBits = countAndFlagsBits;
    v61.value._object = object;
    v62 = standLabel;
    v63 = v38;
    v64 = standUnitLabel;
    v65 = isSmartEnabled;
    outlined retain of PhoneRingsModel((uint64_t)&v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of PhoneRingsModel((uint64_t)&v50);
    v39 = v63;
    retstr->standLabel.value = v62;
    retstr->standValueLabel = v39;
    retstr->standUnitLabel.value = v64;
    retstr->isSmartEnabled = v65;
    v40 = v59;
    retstr->exerciseUnitLabel = v58;
    retstr->moveLabel = v40;
    v41 = v61;
    retstr->moveValueLabel = v60;
    retstr->moveUnitLabel = v41;
    v42 = v55;
    *(_OWORD *)&retstr->standGoalValue.value = v54;
    *(_OWORD *)&retstr->standTotalValue.value = v42;
    v43 = v57;
    retstr->exerciseLabel = v56;
    retstr->exerciseValueLabel = v43;
    v44 = v51;
    *(Swift::String_optional *)&retstr->exerciseGoalValue.value = v50;
    *(_OWORD *)&retstr->exerciseTotalValue.value = v44;
    v45 = v53;
    *(_OWORD *)&retstr->moveGoalValue.value = v52;
    *(_OWORD *)&retstr->moveTotalValue.value = v45;
    return;
  }
LABEL_37:
  __break(1u);
}

uint64_t PhoneRingsModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A4E3738 + 4 * byte_24A4ECC0C[a1]))(0xD000000000000011, 0x800000024A4F3D90);
}

uint64_t sub_24A4E3738(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_24A4E3800()
{
  return 0x6562614C65766F6DLL;
}

uint64_t sub_24A4E381C()
{
  return 0x756C615665766F6DLL;
}

uint64_t sub_24A4E3864()
{
  return 0x62614C646E617473;
}

uint64_t sub_24A4E3880()
{
  return 0x6C6156646E617473;
}

uint64_t sub_24A4E38A4()
{
  return 0x696E55646E617473;
}

uint64_t sub_24A4E38CC()
{
  return 0x457472616D537369;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneRingsModel.CodingKeys()
{
  unsigned __int8 *v0;

  return PhoneRingsModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PhoneRingsModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PhoneRingsModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneRingsModel.CodingKeys()
{
  lazy protocol witness table accessor for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneRingsModel.CodingKeys()
{
  lazy protocol witness table accessor for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PhoneRingsModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[19];
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneRingsModel.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v31 = *(unsigned __int8 *)(v1 + 24);
  v28 = *(_QWORD *)(v1 + 32);
  v29 = v7;
  v27 = *(unsigned __int8 *)(v1 + 40);
  v26 = *(_QWORD *)(v1 + 48);
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 56);
  v23 = *(_QWORD *)(v1 + 64);
  v24 = *(unsigned __int8 *)(v1 + 72);
  v25 = v7;
  v8 = *(_QWORD *)(v1 + 80);
  v22 = *(unsigned __int8 *)(v1 + 88);
  v9 = *(_QWORD *)(v1 + 96);
  v21[17] = *(_QWORD *)(v1 + 104);
  v21[18] = v8;
  v10 = *(_QWORD *)(v1 + 112);
  v21[15] = *(_QWORD *)(v1 + 120);
  v21[16] = v9;
  v11 = *(_QWORD *)(v1 + 128);
  v21[13] = *(_QWORD *)(v1 + 136);
  v21[14] = v10;
  v12 = *(_QWORD *)(v1 + 144);
  v21[11] = *(_QWORD *)(v1 + 152);
  v21[12] = v11;
  v13 = *(_QWORD *)(v1 + 160);
  v21[9] = *(_QWORD *)(v1 + 168);
  v21[10] = v12;
  v21[6] = *(_QWORD *)(v1 + 176);
  v21[7] = *(_QWORD *)(v1 + 184);
  v21[8] = v13;
  v21[4] = *(_QWORD *)(v1 + 192);
  v21[5] = *(_QWORD *)(v1 + 200);
  v21[2] = *(_QWORD *)(v1 + 208);
  v21[3] = *(_QWORD *)(v1 + 216);
  v21[0] = *(_QWORD *)(v1 + 224);
  v21[1] = *(_QWORD *)(v1 + 232);
  v14 = *(unsigned __int8 *)(v1 + 240);
  v15 = a1[3];
  v16 = a1;
  v18 = v17;
  __swift_project_boxed_opaque_existential_1(v16, v15);
  lazy protocol witness table accessor for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v32 = 0;
  v19 = v30;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v19)
  {
    LODWORD(v30) = v14;
    v32 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v32 = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v18);
}

unint64_t lazy protocol witness table accessor for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for PhoneRingsModel.CodingKeys, &unk_251BD4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for PhoneRingsModel.CodingKeys, &unk_251BD4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for PhoneRingsModel.CodingKeys, &unk_251BD4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for PhoneRingsModel.CodingKeys, &unk_251BD4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys);
  }
  return result;
}

uint64_t PhoneRingsModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  uint64_t v118;
  char v119;
  _BYTE v120[7];
  uint64_t v121;
  char v122;
  _BYTE v123[7];
  uint64_t v124;
  char v125;
  _BYTE v126[7];
  uint64_t v127;
  char v128;
  _BYTE v129[7];
  uint64_t v130;
  char v131;
  _BYTE v132[7];
  uint64_t v133;
  char v134;
  _BYTE v135[7];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  _BYTE v156[7];
  char v157;
  _BYTE v158[7];
  char v159;
  _BYTE v160[7];
  char v161;
  _BYTE v162[7];
  char v163;
  _BYTE v164[7];
  char v165;
  _BYTE v166[7];
  char v167;
  uint64_t v168;

  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneRingsModel.CodingKeys>);
  v5 = *(_QWORD *)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = 1;
  v161 = 1;
  v159 = 1;
  v157 = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneRingsModel.CodingKeys and conformance PhoneRingsModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v100 = a1;
  if (v2)
  {
    v168 = v2;
    v101 = 0;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v100);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v8 = v5;
  v98 = a2;
  LOBYTE(v118) = 0;
  v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v167 = v10 & 1;
  LOBYTE(v118) = 1;
  v11 = v10;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v96 = v11;
  v97 = v12;
  v165 = v13 & 1;
  LOBYTE(v118) = 2;
  v14 = v13;
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v94 = v14;
  v95 = v15;
  v163 = v16 & 1;
  LOBYTE(v118) = 3;
  v17 = v16;
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v92 = v17;
  v93 = v18;
  v161 = v19 & 1;
  LOBYTE(v118) = 4;
  v20 = v19;
  v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v90 = v20;
  v91 = v21;
  v159 = v22 & 1;
  LOBYTE(v118) = 5;
  v23 = v22;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v88 = v23;
  v89 = v24;
  v157 = v25 & 1;
  LOBYTE(v118) = 6;
  v26 = v25;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v30 = v29;
  v86 = v26;
  v87 = v27;
  LOBYTE(v118) = 7;
  swift_bridgeObjectRetain();
  v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v85 = v30;
  LOBYTE(v118) = 8;
  v32 = v31;
  swift_bridgeObjectRetain();
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v168 = 0;
  v35 = v33;
  v82 = v34;
  v83 = v32;
  LOBYTE(v118) = 9;
  swift_bridgeObjectRetain();
  v36 = v168;
  v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v81 = v38;
  v168 = v36;
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = 0;
    goto LABEL_4;
  }
  v39 = v37;
  LOBYTE(v118) = 10;
  swift_bridgeObjectRetain();
  v40 = v168;
  v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v80 = v42;
  v168 = v40;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = 0;
    goto LABEL_4;
  }
  v43 = v41;
  LOBYTE(v118) = 11;
  swift_bridgeObjectRetain();
  v44 = v168;
  *(_QWORD *)&v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((_QWORD *)&v79 + 1) = v45;
  v168 = v44;
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = 0;
    goto LABEL_4;
  }
  LOBYTE(v118) = 12;
  swift_bridgeObjectRetain();
  v46 = v168;
  *(_QWORD *)&v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((_QWORD *)&v78 + 1) = v47;
  v168 = v46;
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = 0;
    goto LABEL_4;
  }
  LOBYTE(v118) = 13;
  swift_bridgeObjectRetain();
  v48 = v168;
  *(_QWORD *)&v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((_QWORD *)&v77 + 1) = v49;
  v168 = v48;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = 0;
    goto LABEL_4;
  }
  LOBYTE(v118) = 14;
  swift_bridgeObjectRetain();
  v50 = v168;
  v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v101 = v51;
  v168 = v50;
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = 0;
    goto LABEL_4;
  }
  v155 = 15;
  swift_bridgeObjectRetain();
  v52 = v168;
  v53 = KeyedDecodingContainer.decode(_:forKey:)();
  v168 = v52;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v54 = v53;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v99);
  LODWORD(v99) = v54 & 1;
  v72 = v9;
  *(_QWORD *)&v102 = v9;
  BYTE8(v102) = v96 & 1;
  *(_QWORD *)&v103 = v97;
  BYTE8(v103) = v94 & 1;
  *(_QWORD *)&v104 = v95;
  BYTE8(v104) = v92 & 1;
  *(_QWORD *)&v105 = v93;
  BYTE8(v105) = v90 & 1;
  *(_QWORD *)&v106 = v91;
  BYTE8(v106) = v88 & 1;
  *(_QWORD *)&v107 = v89;
  BYTE8(v107) = v86 & 1;
  *(_QWORD *)&v108 = v87;
  *((_QWORD *)&v108 + 1) = v85;
  *(_QWORD *)&v109 = v84;
  *((_QWORD *)&v109 + 1) = v83;
  v74 = v39;
  v75 = v35;
  *(_QWORD *)&v110 = v35;
  *((_QWORD *)&v110 + 1) = v82;
  v56 = v80;
  v55 = v81;
  *(_QWORD *)&v111 = v39;
  *((_QWORD *)&v111 + 1) = v81;
  v73 = v43;
  *(_QWORD *)&v112 = v43;
  *((_QWORD *)&v112 + 1) = v80;
  v57 = *((_QWORD *)&v79 + 1);
  v113 = v79;
  v58 = *((_QWORD *)&v78 + 1);
  v114 = v78;
  v59 = *((_QWORD *)&v77 + 1);
  v115 = v77;
  v60 = v101;
  *(_QWORD *)&v116 = v76;
  *((_QWORD *)&v116 + 1) = v101;
  v117 = v54 & 1;
  outlined retain of PhoneRingsModel((uint64_t)&v102);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v61 = v82;
  swift_bridgeObjectRelease();
  v62 = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v63 = v115;
  v64 = v98;
  *(_OWORD *)(v98 + 192) = v114;
  *(_OWORD *)(v64 + 208) = v63;
  *(_OWORD *)(v64 + 224) = v116;
  *(_BYTE *)(v64 + 240) = v117;
  v65 = v111;
  *(_OWORD *)(v64 + 128) = v110;
  *(_OWORD *)(v64 + 144) = v65;
  v66 = v113;
  *(_OWORD *)(v64 + 160) = v112;
  *(_OWORD *)(v64 + 176) = v66;
  v67 = v107;
  *(_OWORD *)(v64 + 64) = v106;
  *(_OWORD *)(v64 + 80) = v67;
  v68 = v109;
  *(_OWORD *)(v64 + 96) = v108;
  *(_OWORD *)(v64 + 112) = v68;
  v69 = v103;
  *(_OWORD *)v64 = v102;
  *(_OWORD *)(v64 + 16) = v69;
  v70 = v105;
  *(_OWORD *)(v64 + 32) = v104;
  *(_OWORD *)(v64 + 48) = v70;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v100);
  v118 = v72;
  v119 = v167;
  *(_DWORD *)v120 = *(_DWORD *)v166;
  *(_DWORD *)&v120[3] = *(_DWORD *)&v166[3];
  v121 = v97;
  v122 = v165;
  *(_DWORD *)v123 = *(_DWORD *)v164;
  *(_DWORD *)&v123[3] = *(_DWORD *)&v164[3];
  v124 = v95;
  v125 = v163;
  *(_DWORD *)&v126[3] = *(_DWORD *)&v162[3];
  *(_DWORD *)v126 = *(_DWORD *)v162;
  v127 = v93;
  v128 = v161;
  *(_DWORD *)v129 = *(_DWORD *)v160;
  *(_DWORD *)&v129[3] = *(_DWORD *)&v160[3];
  v130 = v91;
  v131 = v159;
  *(_DWORD *)v132 = *(_DWORD *)v158;
  *(_DWORD *)&v132[3] = *(_DWORD *)&v158[3];
  v133 = v89;
  v134 = v157;
  *(_DWORD *)&v135[3] = *(_DWORD *)&v156[3];
  *(_DWORD *)v135 = *(_DWORD *)v156;
  v136 = v87;
  v137 = v85;
  v138 = v84;
  v139 = v83;
  v140 = v75;
  v141 = v61;
  v142 = v74;
  v143 = v62;
  v144 = v73;
  v145 = v56;
  v146 = v79;
  v147 = v57;
  v148 = v78;
  v149 = v58;
  v150 = v77;
  v151 = v59;
  v152 = v76;
  v153 = v60;
  v154 = v99;
  return outlined release of PhoneRingsModel((uint64_t)&v118);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhoneRingsModel@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PhoneRingsModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneRingsModel(_QWORD *a1)
{
  return PhoneRingsModel.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for PhoneRingsModel()
{
  return &type metadata for PhoneRingsModel;
}

uint64_t storeEnumTagSinglePayload for PhoneRingsModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_24A4E498C + 4 * byte_24A4ECC21[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_24A4E49C0 + 4 * byte_24A4ECC1C[v4]))();
}

uint64_t sub_24A4E49C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4E49C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A4E49D0);
  return result;
}

uint64_t sub_24A4E49DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A4E49E4);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_24A4E49E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A4E49F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PhoneRingsModel.CodingKeys()
{
  return &unk_251BD4EB8;
}

uint64_t specialized PhoneRingsModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F3D90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F3DB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616F4765766F6DLL && a2 == 0xED000065756C6156
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61746F5465766F6DLL && a2 == 0xEE0065756C61566CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616F47646E617473 && a2 == 0xEE0065756C61566CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746F54646E617473 && a2 == 0xEF65756C61566C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6573696372657865 && a2 == 0xED00006C6562614CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A4F4330
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A4F4350
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6562614C65766F6DLL && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x756C615665766F6DLL && a2 == 0xEE006C6562614C65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x74696E5565766F6DLL && a2 == 0xED00006C6562614CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x62614C646E617473 && a2 == 0xEA00000000006C65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6C6156646E617473 && a2 == 0xEF6C6562614C6575
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x696E55646E617473 && a2 == 0xEE006C6562614C74
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t WellnessUIPlugin.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t WellnessUIPlugin.init()()
{
  uint64_t v0;

  return v0;
}

void WellnessUIPlugin.snippet(for:mode:idiom:)(uint64_t a1)
{
  specialized WellnessUIPlugin.snippet(for:mode:idiom:)(a1);
}

uint64_t WellnessUIPlugin.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t WellnessUIPlugin.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SnippetProviding.init() in conformance WellnessUIPlugin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *a1 = result;
  return result;
}

void protocol witness for SnippetProviding.snippet(for:mode:idiom:) in conformance WellnessUIPlugin(uint64_t a1)
{
  specialized WellnessUIPlugin.snippet(for:mode:idiom:)(a1);
}

void specialized WellnessUIPlugin.snippet(for:mode:idiom:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t Model;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  char *v54;
  _QWORD v55[4];
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t Snippet;
  uint64_t v95;

  v95 = a1;
  Snippet = type metadata accessor for TemperatureQuerySnippet();
  MEMORY[0x24BDAC7A8](Snippet);
  v93 = (char *)v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model = type metadata accessor for TemperatureQueryModel();
  MEMORY[0x24BDAC7A8](Model);
  v92 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for SpecificMedCompletedLogSnippet();
  MEMORY[0x24BDAC7A8](v91);
  v90 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SpecificMedCompletedLogModel();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v84 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v87 = (char *)v55 - v8;
  v89 = type metadata accessor for SleepQuerySnippet();
  MEMORY[0x24BDAC7A8](v89);
  v88 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SleepQueryModel();
  MEMORY[0x24BDAC7A8](v10);
  v86 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for SingleActivitySummarySnippet();
  MEMORY[0x24BDAC7A8](v82);
  v81 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SingleActivitySummaryModel();
  MEMORY[0x24BDAC7A8](v13);
  v79 = (char *)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for PhoneRingsSnippet();
  v15 = MEMORY[0x24BDAC7A8](v85);
  v80 = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v83 = (char *)v55 - v17;
  v78 = type metadata accessor for HeightQuerySnippet();
  MEMORY[0x24BDAC7A8](v78);
  v76 = (char *)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for HeightQueryModel();
  MEMORY[0x24BDAC7A8](v19);
  v74 = (char *)v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for HealthDataLogSnippet();
  v21 = MEMORY[0x24BDAC7A8](v77);
  v73 = (char *)v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v75 = (char *)v55 - v23;
  v24 = type metadata accessor for HealthDataLogModel();
  v25 = MEMORY[0x24BDAC7A8](v24);
  v71 = (char *)v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v72 = (char *)v55 - v27;
  v70 = type metadata accessor for GenericQuerySnippet();
  MEMORY[0x24BDAC7A8](v70);
  v69 = (char *)v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for GenericQueryModel();
  MEMORY[0x24BDAC7A8](v29);
  v68 = (char *)v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for GenericMedCompletedLogSnippet();
  MEMORY[0x24BDAC7A8](v67);
  v66 = (char *)v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for GenericMedCompletedLogModel();
  v33 = MEMORY[0x24BDAC7A8](v32);
  v62 = (char *)v55 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v65 = (char *)v55 - v35;
  v61 = type metadata accessor for GenericButtonSnippet();
  MEMORY[0x24BDAC7A8](v61);
  v60 = (char *)v55 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for GenericButtonModel();
  MEMORY[0x24BDAC7A8](v37);
  v58 = (char *)v55 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for CycleTrackingLogSnippet();
  MEMORY[0x24BDAC7A8](v64);
  v63 = (char *)v55 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for CycleTrackingLogModel();
  MEMORY[0x24BDAC7A8](v40);
  v59 = (char *)v55 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for BloodPressureQuerySnippet();
  MEMORY[0x24BDAC7A8](v57);
  v55[3] = (char *)v55 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for BloodPressureQueryModel();
  MEMORY[0x24BDAC7A8](v43);
  v55[1] = (char *)v55 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for BloodPressureLogSnippet();
  v45 = MEMORY[0x24BDAC7A8](v56);
  MEMORY[0x24BDAC7A8](v45);
  v55[2] = (char *)v55 - v46;
  v47 = type metadata accessor for BloodPressureLogModel();
  v48 = MEMORY[0x24BDAC7A8](v47);
  MEMORY[0x24BDAC7A8](v48);
  v49 = type metadata accessor for OxygenSaturationQuerySnippet();
  MEMORY[0x24BDAC7A8](v49);
  v50 = type metadata accessor for OxygenSaturationQueryModel();
  MEMORY[0x24BDAC7A8](v50);
  v51 = type metadata accessor for WellnessSnippets();
  MEMORY[0x24BDAC7A8](v51);
  outlined init with copy of GenericMedCompletedLogModel(v95, (uint64_t)v55 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0), v53);
  v54 = (char *)sub_24A4E5A80 + 4 * word_24A4ECE20[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_24A4E5A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with take of GenericMedCompletedLogSnippet(v3, v2, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
  outlined init with copy of GenericMedCompletedLogModel(v2, v0, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
  v4 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, (uint64_t (*)(uint64_t))MEMORY[0x24BEAE578], MEMORY[0x24BEAE528]);
  *v4 = EnvironmentObject.init()();
  v4[1] = v5;
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type OxygenSaturationQuerySnippet and conformance OxygenSaturationQuerySnippet, (uint64_t (*)(uint64_t))type metadata accessor for OxygenSaturationQuerySnippet, (uint64_t)&protocol conformance descriptor for OxygenSaturationQuerySnippet);
  v6 = View.eraseToAnyView()();
  outlined destroy of GenericMedCompletedLogModel(v0, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQuerySnippet);
  outlined destroy of GenericMedCompletedLogModel(v2, (uint64_t (*)(_QWORD))type metadata accessor for OxygenSaturationQueryModel);
  return v6;
}

void sub_24A4E64F4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_BYTE *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)(v0 + 352) = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 360) = v2;
  *(_QWORD *)(v0 + 368) = v3;
  *(_BYTE *)(v0 + 376) = v4;
  *(_QWORD *)(v0 + 384) = v5;
  *(_BYTE *)(v0 + 392) = v6;
  *(_QWORD *)(v0 + 400) = v7;
  *(_BYTE *)(v0 + 408) = v8;
  *(_QWORD *)(v0 + 416) = v9;
  *(_BYTE *)(v0 + 424) = v10;
  *(_QWORD *)(v0 + 432) = v11;
  *(_BYTE *)(v0 + 440) = v12;
  lazy protocol witness table accessor for type WatchRingsSnippet and conformance WatchRingsSnippet();
  View.eraseToAnyView()();
  JUMPOUT(0x24A4E64CCLL);
}

uint64_t associated type witness table accessor for SnippetProviding.SnippetPluginModelType : SnippetPluginModel in WellnessUIPlugin()
{
  return lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type WellnessSnippets and conformance WellnessSnippets, (uint64_t (*)(uint64_t))type metadata accessor for WellnessSnippets, (uint64_t)&protocol conformance descriptor for WellnessSnippets);
}

uint64_t type metadata accessor for WellnessUIPlugin()
{
  return objc_opt_self();
}

uint64_t method lookup function for WellnessUIPlugin()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WellnessUIPlugin.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t lazy protocol witness table accessor for type WatchRingsSnippet and conformance WatchRingsSnippet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WatchRingsSnippet and conformance WatchRingsSnippet;
  if (!lazy protocol witness table cache variable for type WatchRingsSnippet and conformance WatchRingsSnippet)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for WatchRingsSnippet, &type metadata for WatchRingsSnippet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsSnippet and conformance WatchRingsSnippet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GenericBinaryButtonSnippet and conformance GenericBinaryButtonSnippet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericBinaryButtonSnippet and conformance GenericBinaryButtonSnippet;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonSnippet and conformance GenericBinaryButtonSnippet)
  {
    result = MEMORY[0x24BD11508](&protocol conformance descriptor for GenericBinaryButtonSnippet, &type metadata for GenericBinaryButtonSnippet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonSnippet and conformance GenericBinaryButtonSnippet);
  }
  return result;
}

objc_class *one-time initialization function for resourceBundle()
{
  uint64_t ObjCClassFromMetadata;
  objc_class *result;

  type metadata accessor for ResourceBundleClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = (objc_class *)objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  resourceBundle.super.isa = result;
  return result;
}

uint64_t one-time initialization function for healthdataGlyphBodymeasurements(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphBodymeasurements, 0xD000000000000021, 0x800000024A4F44E0);
}

uint64_t ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphBodymeasurements, (uint64_t)static ImageResource.healthdataGlyphBodymeasurements);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t static ImageResource.healthdataGlyphBodymeasurements.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphBodymeasurements, (uint64_t)static ImageResource.healthdataGlyphBodymeasurements, a1);
}

uint64_t one-time initialization function for healthdataGlyphFitness(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphFitness, 0xD000000000000018, 0x800000024A4F44C0);
}

uint64_t ImageResource.healthdataGlyphFitness.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphFitness, (uint64_t)static ImageResource.healthdataGlyphFitness);
}

uint64_t ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for ImageResource();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static ImageResource.healthdataGlyphFitness.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphFitness, (uint64_t)static ImageResource.healthdataGlyphFitness, a1);
}

uint64_t static ImageResource.healthdataGlyphBodymeasurements.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for ImageResource();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for healthdataGlyphHeart(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphHeart, 0xD000000000000016, 0x800000024A4F44A0);
}

uint64_t ImageResource.healthdataGlyphHeart.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphHeart, (uint64_t)static ImageResource.healthdataGlyphHeart);
}

uint64_t static ImageResource.healthdataGlyphHeart.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphHeart, (uint64_t)static ImageResource.healthdataGlyphHeart, a1);
}

uint64_t one-time initialization function for healthdataGlyphMedicationTracking(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphMedicationTracking, 0xD000000000000023, 0x800000024A4F4470);
}

uint64_t ImageResource.healthdataGlyphMedicationTracking.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphMedicationTracking, (uint64_t)static ImageResource.healthdataGlyphMedicationTracking);
}

uint64_t static ImageResource.healthdataGlyphMedicationTracking.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphMedicationTracking, (uint64_t)static ImageResource.healthdataGlyphMedicationTracking, a1);
}

uint64_t one-time initialization function for healthdataGlyphReproductive(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphReproductive, 0xD00000000000001DLL, 0x800000024A4F4450);
}

uint64_t ImageResource.healthdataGlyphReproductive.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphReproductive, (uint64_t)static ImageResource.healthdataGlyphReproductive);
}

uint64_t static ImageResource.healthdataGlyphReproductive.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphReproductive, (uint64_t)static ImageResource.healthdataGlyphReproductive, a1);
}

uint64_t one-time initialization function for healthdataGlyphRespiratory(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphRespiratory, 0xD00000000000001CLL, 0x800000024A4F4430);
}

uint64_t ImageResource.healthdataGlyphRespiratory.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphRespiratory, (uint64_t)static ImageResource.healthdataGlyphRespiratory);
}

uint64_t static ImageResource.healthdataGlyphRespiratory.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphRespiratory, (uint64_t)static ImageResource.healthdataGlyphRespiratory, a1);
}

uint64_t one-time initialization function for healthdataGlyphSleep(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphSleep, 0xD000000000000016, 0x800000024A4F4410);
}

uint64_t ImageResource.healthdataGlyphSleep.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphSleep, (uint64_t)static ImageResource.healthdataGlyphSleep);
}

uint64_t static ImageResource.healthdataGlyphSleep.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphSleep, (uint64_t)static ImageResource.healthdataGlyphSleep, a1);
}

uint64_t one-time initialization function for healthdataGlyphVitals(uint64_t a1)
{
  return one-time initialization function for healthdataGlyphBodymeasurements(a1, static ImageResource.healthdataGlyphVitals, 0xD000000000000017, 0x800000024A4F43F0);
}

uint64_t one-time initialization function for healthdataGlyphBodymeasurements(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for ImageResource();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (one-time initialization token for resourceBundle != -1)
    swift_once();
  return MEMORY[0x24BD10A70](a3, a4, resourceBundle.super.isa);
}

uint64_t ImageResource.healthdataGlyphVitals.unsafeMutableAddressor()
{
  return ImageResource.healthdataGlyphBodymeasurements.unsafeMutableAddressor(&one-time initialization token for healthdataGlyphVitals, (uint64_t)static ImageResource.healthdataGlyphVitals);
}

uint64_t static ImageResource.healthdataGlyphVitals.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.healthdataGlyphBodymeasurements.getter(&one-time initialization token for healthdataGlyphVitals, (uint64_t)static ImageResource.healthdataGlyphVitals, a1);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x24BDCD820]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t SnippetPluginModel.snippetHidden(for:idiom:)()
{
  return MEMORY[0x24BEAA5D0]();
}

uint64_t AppPunchout.init(punchOutUri:bundleId:appDisplayName:)()
{
  return MEMORY[0x24BEAA6B0]();
}

uint64_t type metadata accessor for AppPunchout()
{
  return MEMORY[0x24BEAA6D0]();
}

uint64_t type metadata accessor for SashStandard.Title()
{
  return MEMORY[0x24BEAB138]();
}

uint64_t SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)()
{
  return MEMORY[0x24BEAB158]();
}

uint64_t type metadata accessor for SashStandard()
{
  return MEMORY[0x24BEAB188]();
}

uint64_t type metadata accessor for ActionProperty()
{
  return MEMORY[0x24BEAB3D0]();
}

uint64_t ActionProperty.init(_:)()
{
  return MEMORY[0x24BEAB420]();
}

uint64_t type metadata accessor for SeparatorStyle()
{
  return MEMORY[0x24BEAB540]();
}

uint64_t type metadata accessor for VisualProperty()
{
  return MEMORY[0x24BEAB600]();
}

uint64_t type metadata accessor for Color()
{
  return MEMORY[0x24BEACF08]();
}

uint64_t type metadata accessor for Command()
{
  return MEMORY[0x24BEAD208]();
}

uint64_t DialogPersonHeight.Builder.init()()
{
  return MEMORY[0x24BE921B0]();
}

uint64_t type metadata accessor for DialogPersonHeight.Builder()
{
  return MEMORY[0x24BE921B8]();
}

uint64_t dispatch thunk of DialogPersonHeight.symbolic.getter()
{
  return MEMORY[0x24BE921C0]();
}

uint64_t dispatch thunk of DialogPreciseTemperature.longSpokenTwoDigits.getter()
{
  return MEMORY[0x24BE92348]();
}

uint64_t dispatch thunk of DialogPreciseTemperature.mediumSpokenTwoDigits.getter()
{
  return MEMORY[0x24BE92350]();
}

uint64_t DialogPreciseTemperature.Builder.init()()
{
  return MEMORY[0x24BE92358]();
}

uint64_t type metadata accessor for DialogPreciseTemperature.Builder()
{
  return MEMORY[0x24BE92360]();
}

uint64_t dispatch thunk of DialogAbstractMeasurement.Builder.build()()
{
  return MEMORY[0x24BE92398]();
}

uint64_t dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)()
{
  return MEMORY[0x24BE923A8]();
}

uint64_t dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)()
{
  return MEMORY[0x24BE923B0]();
}

uint64_t dispatch thunk of DialogConvertibleMeasurement.Builder.build()()
{
  return MEMORY[0x24BE923E8]();
}

uint64_t dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)()
{
  return MEMORY[0x24BE923F0]();
}

uint64_t dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)()
{
  return MEMORY[0x24BE923F8]();
}

uint64_t dispatch thunk of DialogCalendar.dateDescriptive.getter()
{
  return MEMORY[0x24BE92628]();
}

uint64_t dispatch thunk of DialogCalendar.timeDescriptive.getter()
{
  return MEMORY[0x24BE92630]();
}

uint64_t type metadata accessor for DialogCalendar()
{
  return MEMORY[0x24BE92690]();
}

uint64_t dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter()
{
  return MEMORY[0x24BE92710]();
}

uint64_t type metadata accessor for DialogDuration()
{
  return MEMORY[0x24BE92770]();
}

uint64_t SpeakableString.print.getter()
{
  return MEMORY[0x24BE929B0]();
}

uint64_t type metadata accessor for SpeakableString()
{
  return MEMORY[0x24BE929C8]();
}

uint64_t ImageResource.init(name:bundle:)()
{
  return MEMORY[0x24BDC6D38]();
}

uint64_t type metadata accessor for ImageResource()
{
  return MEMORY[0x24BDC6D50]();
}

uint64_t EdgeInsets.init(_all:)()
{
  return MEMORY[0x24BDEB038]();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return MEMORY[0x24BDEB3E8]();
}

uint64_t type metadata accessor for ColorScheme()
{
  return MEMORY[0x24BDEB420]();
}

uint64_t type metadata accessor for Environment.Content()
{
  return MEMORY[0x24BDEB568]();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return MEMORY[0x24BDEB7C0]();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return MEMORY[0x24BDEBEC8]();
}

uint64_t static DynamicTypeSize.== infix(_:_:)()
{
  return MEMORY[0x24BDECEF0]();
}

uint64_t type metadata accessor for DynamicTypeSize()
{
  return MEMORY[0x24BDECF48]();
}

uint64_t EnvironmentObject.error()()
{
  return MEMORY[0x24BDEDE48]();
}

uint64_t EnvironmentObject.init()()
{
  return MEMORY[0x24BDEDE68]();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return MEMORY[0x24BDEDEF0]();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return MEMORY[0x24BDEDF00]();
}

uint64_t EnvironmentValues.dynamicTypeSize.getter()
{
  return MEMORY[0x24BDEE018]();
}

uint64_t EnvironmentValues.dynamicTypeSize.setter()
{
  return MEMORY[0x24BDEE030]();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return MEMORY[0x24BDEE040]();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return MEMORY[0x24BDEE050]();
}

uint64_t EnvironmentValues.colorSchemeContrast.getter()
{
  return MEMORY[0x24BDEE1B8]();
}

uint64_t EnvironmentValues.init()()
{
  return MEMORY[0x24BDEE4E8]();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return MEMORY[0x24BDEE4F0]();
}

uint64_t static VerticalAlignment.lastTextBaseline.getter()
{
  return MEMORY[0x24BDEE6F0]();
}

uint64_t static VerticalAlignment.center.getter()
{
  return MEMORY[0x24BDEE738]();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
  MEMORY[0x24BDEEA10](a1._countAndFlagsBits, a1._object);
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  MEMORY[0x24BDEEA20](a1._countAndFlagsBits, a1._object);
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x24BDEEA38]();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return MEMORY[0x24BDEEA48]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x24BDEEA58]();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return MEMORY[0x24BDEEA68]();
}

uint64_t static ColorSchemeContrast.== infix(_:_:)()
{
  return MEMORY[0x24BDEEDE0]();
}

uint64_t type metadata accessor for ColorSchemeContrast()
{
  return MEMORY[0x24BDEEE08]();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return MEMORY[0x24BDEEF70]();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return MEMORY[0x24BDEF230]();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return MEMORY[0x24BDEF240]();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return MEMORY[0x24BDEF250]();
}

uint64_t static UIViewRepresentable._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDEF258]();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return MEMORY[0x24BDEF268]();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return MEMORY[0x24BDEF280]();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return MEMORY[0x24BDEF290]();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return MEMORY[0x24BDEF2A0]();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return MEMORY[0x24BDEF2B0]();
}

uint64_t UIViewRepresentable.body.getter()
{
  return MEMORY[0x24BDEF2B8]();
}

uint64_t static UIViewRepresentable._makeView(view:inputs:)()
{
  return MEMORY[0x24BDEF2D0]();
}

uint64_t UIViewRepresentable<>.makeCoordinator()()
{
  return MEMORY[0x24BDEF2E0]();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return MEMORY[0x24BDEF3A8]();
}

uint64_t static PrimitiveButtonStyle<>.rfButton.getter()
{
  return MEMORY[0x24BEAD698]();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return MEMORY[0x24BDEFCC0]();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return MEMORY[0x24BDF1428]();
}

uint64_t static Edge.Set.all.getter()
{
  return MEMORY[0x24BDF14B0]();
}

uint64_t static Edge.Set.top.getter()
{
  return MEMORY[0x24BDF14B8]();
}

uint64_t static Edge.Set.bottom.getter()
{
  return MEMORY[0x24BDF14D0]();
}

uint64_t static Edge.Set.leading.getter()
{
  return MEMORY[0x24BDF14D8]();
}

uint64_t static Edge.Set.trailing.getter()
{
  return MEMORY[0x24BDF1500]();
}

uint64_t static Font.subheadline.getter()
{
  return MEMORY[0x24BDF1578]();
}

uint64_t type metadata accessor for Font.Design()
{
  return MEMORY[0x24BDF1680]();
}

uint64_t static Font.Weight.medium.getter()
{
  return MEMORY[0x24BDF16E0]();
}

uint64_t static Font.Weight.regular.getter()
{
  return MEMORY[0x24BDF16F0]();
}

uint64_t static Font.Weight.semibold.getter()
{
  return MEMORY[0x24BDF16F8]();
}

uint64_t static Font.system(_:design:weight:)()
{
  return MEMORY[0x24BDF1770]();
}

uint64_t Font.weight(_:)()
{
  return MEMORY[0x24BDF17A0]();
}

uint64_t static Font.footnote.getter()
{
  return MEMORY[0x24BDF1830]();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return MEMORY[0x24BDF1908]();
}

uint64_t Font.smallCaps()()
{
  return MEMORY[0x24BDF1928]();
}

uint64_t Text.fontWeight(_:)()
{
  return MEMORY[0x24BDF1BF0]();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return MEMORY[0x24BDF1D10]();
}

uint64_t static Text.+ infix(_:_:)()
{
  return MEMORY[0x24BDF1D70]();
}

uint64_t Text.bold()()
{
  return MEMORY[0x24BDF1DB0]();
}

uint64_t Text.font(_:)()
{
  return MEMORY[0x24BDF1DD0]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x24BDF1FC8]();
}

uint64_t Text.init<A>(_:)()
{
  return MEMORY[0x24BDF1FE8]();
}

uint64_t View.eraseToAnyView()()
{
  return MEMORY[0x24BEAD6D8]();
}

uint64_t View.buttonRole(_:)()
{
  return MEMORY[0x24BEAD700]();
}

uint64_t View.separators(_:isOverride:)()
{
  return MEMORY[0x24BEAD760]();
}

uint64_t View.componentTapped(isNavigation:perform:)()
{
  return MEMORY[0x24BEAD7C8]();
}

uint64_t View.componentSpacing(top:bottom:)()
{
  return MEMORY[0x24BEAD810]();
}

uint64_t View.lastComponentBottomSpacing(_:)()
{
  return MEMORY[0x24BEAD890]();
}

uint64_t static View._makeView(view:inputs:)()
{
  return MEMORY[0x24BDF2090]();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDF2098]();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return MEMORY[0x24BDF22A8]();
}

uint64_t static View._viewListCount(inputs:)()
{
  return MEMORY[0x24BDF26A0]();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return MEMORY[0x24BDF3C38]();
}

uint64_t static Color.red.getter()
{
  return MEMORY[0x24BDF3C80]();
}

uint64_t static Color.blue.getter()
{
  return MEMORY[0x24BDF3C88]();
}

uint64_t static Color.gray.getter()
{
  return MEMORY[0x24BDF3CB0]();
}

uint64_t static Color.black.getter()
{
  return MEMORY[0x24BDF3CF8]();
}

uint64_t static Color.green.getter()
{
  return MEMORY[0x24BDF3D20]();
}

uint64_t static Color.white.getter()
{
  return MEMORY[0x24BDF3D28]();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return MEMORY[0x24BDF3E68]();
}

uint64_t Image.init(uiImage:)()
{
  return MEMORY[0x24BDF3F60]();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return MEMORY[0x24BDF3FE0]();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return MEMORY[0x24BDF40E0]();
}

uint64_t Button.init(action:label:)()
{
  return MEMORY[0x24BDF4348]();
}

uint64_t Button<>.init<A>(_:action:)()
{
  return MEMORY[0x24BDF4388]();
}

uint64_t AnyView.init<A>(_:)()
{
  return MEMORY[0x24BDF4798]();
}

uint64_t static Alignment.center.getter()
{
  return MEMORY[0x24BDF4F10]();
}

uint64_t static Alignment.trailing.getter()
{
  return MEMORY[0x24BDF4F30]();
}

uint64_t type metadata accessor for ButtonItemButtonStyle.Role()
{
  return MEMORY[0x24BEAD988]();
}

uint64_t SnippetBody.init(content:)()
{
  return MEMORY[0x24BEAD9B0]();
}

uint64_t ActionHandler.wrappedValue.getter()
{
  return MEMORY[0x24BEADAE0]();
}

uint64_t ActionHandler.init()()
{
  return MEMORY[0x24BEADAF0]();
}

uint64_t type metadata accessor for ActionHandler()
{
  return MEMORY[0x24BEADB00]();
}

uint64_t type metadata accessor for RFButtonStyle()
{
  return MEMORY[0x24BEADB80]();
}

uint64_t ComponentStack.init(content:)()
{
  return MEMORY[0x24BEADBD8]();
}

uint64_t type metadata accessor for InteractionType()
{
  return MEMORY[0x24BEADCA8]();
}

uint64_t BinaryButtonView.init(primaryButton:secondaryButton:)()
{
  return MEMORY[0x24BEADCD8]();
}

uint64_t type metadata accessor for BinaryButtonView()
{
  return MEMORY[0x24BEADCE8]();
}

uint64_t SashStandardView.init(icon:title:showOnWatch:)()
{
  return MEMORY[0x24BEADD90]();
}

uint64_t SashStandardView.init(model:)()
{
  return MEMORY[0x24BEADD98]();
}

uint64_t type metadata accessor for SashStandardView()
{
  return MEMORY[0x24BEADDA8]();
}

uint64_t SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)()
{
  return MEMORY[0x24BEADE80]();
}

uint64_t type metadata accessor for SimpleItemRichView()
{
  return MEMORY[0x24BEADE98]();
}

uint64_t type metadata accessor for StatusIndicatorView.IndicatorType()
{
  return MEMORY[0x24BEADFA0]();
}

uint64_t StatusIndicatorView.init(message:type:showIndicator:)()
{
  return MEMORY[0x24BEADFB8]();
}

uint64_t type metadata accessor for StatusIndicatorView()
{
  return MEMORY[0x24BEADFC8]();
}

uint64_t StandardActionHandler.perform(_:interactionType:)()
{
  return MEMORY[0x24BEAE090]();
}

uint64_t type metadata accessor for StandardActionHandler()
{
  return MEMORY[0x24BEAE0A0]();
}

uint64_t FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)()
{
  return MEMORY[0x24BEAE120]();
}

uint64_t type metadata accessor for FactItemHeroNumberView()
{
  return MEMORY[0x24BEAE128]();
}

uint64_t type metadata accessor for ComponentStackBottomSpacing()
{
  return MEMORY[0x24BEAE378]();
}

uint64_t dispatch thunk of Context.perform(appPunchout:)()
{
  return MEMORY[0x24BEAE558]();
}

uint64_t dispatch thunk of Context.perform(directInvocation:payload:)()
{
  return MEMORY[0x24BEAE560]();
}

uint64_t type metadata accessor for Context()
{
  return MEMORY[0x24BEAE578]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(format:arguments:)()
{
  return MEMORY[0x24BDCFA68]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

Swift::String __swiftcall String.firstLetterCapitalized()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BE40EE8]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x24BEE0AD8]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t Optional.description.getter()
{
  return MEMORY[0x24BE8DCC8]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t StringProtocol.capitalized.getter()
{
  return MEMORY[0x24BDD04F0]();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return MEMORY[0x24BEE5E68]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

{
  return MEMORY[0x24BEE32E8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3370]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

{
  return MEMORY[0x24BEE3438]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34C0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

