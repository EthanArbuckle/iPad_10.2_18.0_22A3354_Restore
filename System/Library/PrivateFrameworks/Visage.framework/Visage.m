void VGForceMissingSymbolsToBeLinked(vg::shared *a1)
{
  char *v1;
  void *v2;
  objc_object *v3;
  vg::shared *v4;
  double v5;
  _BYTE v6[60];
  int v7;
  _QWORD v8[3];
  _QWORD v9[3];
  char v10;
  int v11;
  void *v12;
  void *v13[2];
  int v14;
  void *v15;
  void *memptr;

  vg::shared::clipFToUInt8(a1, 1.0, 1.0, 0.0);
  memset(&v6[20], 0, 40);
  *(_OWORD *)&v6[4] = 0u;
  *(_DWORD *)v6 = 1065353216;
  *(_DWORD *)&v6[20] = 1065353216;
  *(_DWORD *)&v6[40] = 1065353216;
  v7 = 1065353216;
  v13[1] = (void *)16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v1 = (char *)memptr;
  v13[0] = memptr;
  v14 = 3;
  *(_QWORD *)((char *)memptr + 12) = 0;
  *(_QWORD *)(v1 + 4) = 0;
  *(_QWORD *)(v1 + 20) = 0;
  *(_QWORD *)(v1 + 28) = 0x3F80000000000000;
  *(_DWORD *)v1 = 1065353216;
  *((_DWORD *)v1 + 4) = 1065353216;
  vg::common::transformPoints(v6, (uint64_t)v13, (uint64_t)&v15);
  free(v13[0]);
  free(v15);
  memset(v6, 0, 24);
  *(_QWORD *)&v6[24] = 0x100000001;
  *(int64x2_t *)&v6[32] = vdupq_n_s64(1uLL);
  v6[48] = 0;
  vg::shared::remapImage((uint64_t)v6);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  vg::ObjIO::read(0, 0, (uint64_t)v6);
  vg::ObjContents::~ObjContents((vg::ObjContents *)v6);
  vg::common::deserializedObjectFromObject(0, v3);

  vg::shared::MemoryUsage(v4);
  memset(v6, 0, 24);
  vg::VertexAttributeBuffer::bytesPerElement((vg::VertexAttributeBuffer *)v6);

  vg::shared::getAssetsForType(&stru_251B237C0, (_QWORD **)v6);
  *(_OWORD *)v6 = xmmword_249D3A610;
  *(_DWORD *)&v6[16] = 1061997773;
  *(_OWORD *)&v6[24] = xmmword_249D3A620;
  *(_OWORD *)&v6[40] = xmmword_249D3A630;
  v6[56] = 0;
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  v10 = 1;
  v11 = 1083808154;
  v12 = &unk_251B34940;
  vg::frame_selection::VGEarCaptureOptions::toDictionary((vg::frame_selection::VGEarCaptureOptions *)v6, v5);

  vg::frame_selection::VGEarCaptureOptions::~VGEarCaptureOptions((id *)v6);
  _os_crash();
  __break(1u);
}

void sub_249CAF5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  vg::frame_selection::VGEarCaptureOptions::~VGEarCaptureOptions((id *)&a9);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarCaptureOptions::~VGEarCaptureOptions(id *this)
{

  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
}

void vg::ObjContents::~ObjContents(vg::ObjContents *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 96);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 72);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)this;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251B22350, MEMORY[0x24BEDAAF0]);
}

void sub_249CAF8C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_249CAF9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CAFE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void vg::hrtf::setError(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  __VGLogSharedInstance();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v12 = objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
    _os_log_impl(&dword_249CAD000, v4, OS_LOG_TYPE_ERROR, " %s ", buf, 0xCu);
  }

  if (a1)
  {
    v5 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(MEMORY[0x24BDD1488], "vg_bundle");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bundleIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *MEMORY[0x24BDD0FC8];
    v10 = v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "errorWithDomain:code:userInfo:", v7, 100, v8);
    *a1 = (id)objc_claimAutoreleasedReturnValue();

  }
}

void sub_249CB0088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CB0500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_249CB06A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CB0840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CB15FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CB1718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CB22B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void), void (**a10)(void), void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;
  void *v58;
  void *v59;
  void *v60;

  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&a57);

  a10[2]();
  a9[2]();

  std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

id detail::getEarPoseList(detail *this, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  void *v5;
  unsigned int i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = this;
  if (this >= a2)
    v4 = a2;
  else
    v4 = this;
  v5 = (void *)objc_opt_new();
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", (double)i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, v8);

    }
  }
  if (a2 > v3)
  {
    do
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", (double)v4);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, v10);

      ++v4;
    }
    while (a2 != v4);
  }
  return v5;
}

void sub_249CB2628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id detail::getEarFrameData(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = (void *)objc_opt_new();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = -[VGHRTFEarFrameData initEmpty]([VGHRTFEarFrameData alloc], "initEmpty");
      objc_msgSend(v5, "setRgbImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(*(id *)v3, "rgbRectified")));
      objc_msgSend(v5, "setDepthImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(*(id *)v3, "depth")));
      objc_msgSend(v5, "setEarBox:", *(double *)(v3 + 128));
      objc_msgSend(v2, "addObject:", v5);

      v3 += 192;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_249CB2724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

void vg::ear_detection::EarPose::~EarPose(vg::ear_detection::EarPose *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
}

void std::vector<EarFrame>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::__destroy_at[abi:ne180100]<EarFrame,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<EarFrame,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }

}

uint64_t std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
  {

  }
  return a1;
}

vg::hrtf::Rectify *std::unique_ptr<vg::hrtf::Rectify>::reset[abi:ne180100](vg::hrtf::Rectify **a1, vg::hrtf::Rectify *a2)
{
  vg::hrtf::Rectify *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::Rectify::~Rectify(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void sub_249CB2A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CB2F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CB31C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CB3A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_249CB3FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CB46A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void), uint64_t a12, void (**a13)(void), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  a13[2]();
  a11[2]();

  std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_249CB4FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void), void *a10, void *a11)
{
  void *v11;
  void *v12;
  uint64_t v13;

  a9[2]();
  _Unwind_Resume(a1);
}

id detail::getFacePoseList(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  double v11;
  double v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = v3;
  if (a2 == 1)
  {
    objc_msgSend(v3, "pitchAngleCapturedPoses");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else if (a2)
  {
    v18 = 0;
  }
  else
  {
    objc_msgSend(v3, "yawAngleCapturedPoses");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v5 = (void *)objc_opt_new();
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = v18;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v10, "doubleValue");
        v12 = v11;
        objc_msgSend(v6, "objectForKey:", v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "valid");

        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", round(v12 * 100.0) / 100.0);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "setObject:forKeyedSubscript:", v15, v16);

      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v7);
  }

  return v5;
}

void sub_249CB5454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CB574C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CB58E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CB59DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CB6344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void), void *a10, void (**a11)(void), uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  void *v65;

  vg::frame_selection::VGEarSelectionState::~VGEarSelectionState(&a35);
  a11[2]();

  a9[2]();
  std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a63);

  _Unwind_Resume(a1);
}

id detail::getEarPoseList(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v14 = a1;
  v1 = (void *)objc_opt_new();
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = v14;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v16 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v2, "objectForKey:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "BOOLValue");
        objc_msgSend(v6, "doubleValue");
        v10 = v9;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", ceil(v10 * 100.0) / 100.0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "setObject:forKeyedSubscript:", v11, v12);

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v3);
  }

  return v1;
}

void sub_249CB66E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

NSObject *detail::getEarFrameData(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  const __CFDictionary *v9;
  void *v10;
  CGSize v11;
  double y;
  double x;
  id v14;
  void *v15;
  void *v16;
  double v17;
  float v18;
  NSObject *v19;
  NSObject *v20;
  id v22;
  double v23;
  uint8_t buf[16];
  CGRect rect;

  v3 = a1;
  v22 = a2;
  objc_msgSend(v22, "allValues");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");
  if (v5 == objc_msgSend(v3, "count"))
  {
    v6 = objc_opt_new();
    v7 = 0;
    v8 = MEMORY[0x24BDBF090];
    while (1)
    {
      if (v7 >= objc_msgSend(v4, "count"))
      {
        v6 = v6;
        v19 = v6;
        goto LABEL_13;
      }
      objc_msgSend(v4, "objectAtIndexedSubscript:", v7);
      v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "objectAtIndexedSubscript:", v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(CGSize *)(v8 + 16);
      rect.origin = *(CGPoint *)v8;
      rect.size = v11;
      if (!CGRectMakeWithDictionaryRepresentation(v9, &rect))
        break;
      x = rect.origin.x;
      y = rect.origin.y;
      v14 = -[VGHRTFEarFrameData initEmpty]([VGHRTFEarFrameData alloc], "initEmpty");
      objc_msgSend(v10, "captureData");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setRgbImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(v15, "rgbRectified")));

      objc_msgSend(v10, "captureData");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setDepthImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(v16, "depth")));
      *(float *)&v17 = x;
      v18 = y;
      *((float *)&v17 + 1) = v18;
      v23 = v17;

      objc_msgSend(v14, "setEarBox:", v23);
      -[NSObject addObject:](v6, "addObject:", v14);

      ++v7;
    }
    __VGLogSharedInstance();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v20, OS_LOG_TYPE_ERROR, " CGRectMakeWithDictionaryRepresentation failed. ", buf, 2u);
    }

  }
  else
  {
    __VGLogSharedInstance();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(rect.origin.x) = 0;
      _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_ERROR, " Captured size and Rect dictionary size doesn't match ", (uint8_t *)&rect, 2u);
    }
  }
  v19 = 0;
LABEL_13:

  return v19;
}

void sub_249CB69B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarSelectionState::~VGEarSelectionState(id *this)
{
  id v2;
  id v3;

  v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }
  v3 = this[18];
  if (v3)
  {
    this[19] = v3;
    operator delete(v3);
  }
}

void sub_249CB6B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

vg::frame_selection::VGEarFrameSelectorImpl **std::unique_ptr<vg::frame_selection::VGEarFrameSelector>::reset[abi:ne180100](vg::frame_selection::VGEarFrameSelectorImpl ***a1, vg::frame_selection::VGEarFrameSelectorImpl **a2)
{
  vg::frame_selection::VGEarFrameSelectorImpl **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::frame_selection::VGEarFrameSelector::~VGEarFrameSelector(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void sub_249CB70E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_249CB7A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;

  if (*(_BYTE *)(v35 - 168))
  {
    if (*(char *)(v35 - 169) < 0)
      operator delete(*(void **)(v35 - 192));
  }

  vg::hrtf::HRTFModelInputs::~HRTFModelInputs(&__p);
  std::unique_ptr<vg::hrtf::HRTFModel>::reset[abi:ne180100]((void ****)(v35 - 216), 0);

  _Unwind_Resume(a1);
}

void vg::hrtf::FaceFrameData::~FaceFrameData(void **this)
{
  free(this[8]);

}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(std::string *a1, std::string::value_type **a2)
{
  std::string::value_type *v3;

  v3 = *a2;
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, v3);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void vg::hrtf::HRTFModelInputs::~HRTFModelInputs(void **this)
{
  void **v2;

  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v2 = this + 6;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t std::vector<vg::hrtf::FaceFrameData>::__push_back_slow_path<vg::hrtf::FaceFrameData>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>>(v7, v9);
  v11 = &v10[96 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[96 * v12];
  v13 = *a2;
  *a2 = 0u;
  *(_OWORD *)v11 = v13;
  v14 = a2[2];
  v15 = a2[3];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v14;
  *((_OWORD *)v11 + 3) = v15;
  *((_OWORD *)v11 + 4) = 0u;
  *((_QWORD *)v11 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)v11 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  *((_DWORD *)v11 + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  v18[2] = v11 + 96;
  std::vector<vg::hrtf::FaceFrameData>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<vg::hrtf::FaceFrameData>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_249CB7FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<vg::hrtf::FaceFrameData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::FaceFrameData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  result = a6;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      v10 = a3 + v8;
      v11 = *(_OWORD *)(a3 + v8 - 96);
      *(_OWORD *)(v10 - 96) = 0uLL;
      *(_OWORD *)(v9 - 96) = v11;
      v12 = *(_OWORD *)(a3 + v8 - 64);
      v13 = *(_OWORD *)(a3 + v8 - 48);
      *(_OWORD *)(v9 - 80) = *(_OWORD *)(a3 + v8 - 80);
      *(_OWORD *)(v9 - 64) = v12;
      *(_OWORD *)(v9 - 48) = v13;
      *(_OWORD *)(v9 - 32) = 0uLL;
      v14 = *(_QWORD *)(a3 + v8 - 24);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 + v8 - 32);
      *(_QWORD *)(v9 - 24) = v14;
      *(_QWORD *)(v10 - 32) = 0;
      *(_QWORD *)(v10 - 24) = 0;
      *(_DWORD *)(v9 - 16) = *(_DWORD *)(a3 + v8 - 16);
      *(_DWORD *)(v10 - 16) = 0;
      v8 -= 96;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>(id *a1)
{
  free(a1[8]);

}

uint64_t std::__split_buffer<vg::hrtf::FaceFrameData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>((id *)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<vg::hrtf::EarFrameData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 32) = v8;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 16);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {

    i = (id *)(*(_QWORD *)(a2 + 32) + 32);
  }
}

uint64_t std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<vg::hrtf::EarFrameData>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<vg::hrtf::EarFrameData>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

  }
}

void std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<vg::hrtf::EarFrameData>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<vg::hrtf::EarFrameData>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {

    v5 = *(void **)(i - 32);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<vg::hrtf::HRTFModel>::reset[abi:ne180100](void ****a1, void ***a2)
{
  void ***result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFModel::~HRTFModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void vg::ear_detection::BoxModelPreProcessor::create(uint32x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *__p;
  char *v26;
  char *v27;
  uint8_t buf[16];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v26 = 0;
  v27 = 0;
  v9 = *a2;
  v8 = a2[1];
  v10 = (v8 - *a2) >> 2;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, v10);
  if (v8 != v9)
  {
    v11 = 0;
    if (v10 <= 1)
      v10 = 1;
    while (1)
    {
      vg::ear_detection::makeSquareCropBox(a1, buf, *(float *)(*a2 + 4 * v11));
      if (!v29)
        goto LABEL_31;
      v12 = v26;
      if (v26 >= v27)
      {
        v14 = (v26 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v15 = (v27 - (_BYTE *)__p) >> 3;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v27 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v27, v16);
        else
          v17 = 0;
        v18 = &v17[16 * v14];
        *(_OWORD *)v18 = *(_OWORD *)buf;
        v13 = v18 + 16;
        v20 = (char *)__p;
        v19 = v26;
        if (v26 != __p)
        {
          do
          {
            v21 = *((_OWORD *)v19 - 1);
            v19 -= 16;
            *((_OWORD *)v18 - 1) = v21;
            v18 -= 16;
          }
          while (v19 != v20);
          v19 = (char *)__p;
        }
        __p = v18;
        v26 = v13;
        v27 = &v17[16 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_OWORD *)v26 = *(_OWORD *)buf;
        v13 = v12 + 16;
      }
      v26 = v13;
      if (++v11 == v10)
        goto LABEL_24;
    }
  }
  v13 = v26;
LABEL_24:
  if ((a2[1] - *a2) >> 2 != (v13 - (_BYTE *)__p) >> 4)
  {
    __VGLogSharedInstance();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v24, OS_LOG_TYPE_ERROR, " Number of crop alignments and crop boxes must be same. ", buf, 2u);
    }

LABEL_31:
    *a4 = 0;
    goto LABEL_32;
  }
  v22 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  v23 = v22;
  if (v22)
    vg::ear_detection::BoxModelPreProcessor::BoxModelPreProcessor((uint64_t)v22, a1, a3, (uint64_t)a2, (uint64_t)&__p);
  *a4 = v23;
LABEL_32:
  if (__p)
  {
    v26 = (char *)__p;
    operator delete(__p);
  }
}

void sub_249CB87D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x24BD02D54](v11, MEMORY[0x24BEDB6B8]);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t vg::ear_detection::BoxModelPreProcessor::BoxModelPreProcessor(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int64x2_t v36;
  char *v37;
  int32x2_t v38;
  _WORD *v39;
  unint64_t v40;
  _WORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  int32x2_t v52;
  _WORD *v53;
  unint64_t v54;
  _WORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  int64x2_t *v70;
  char **v71;
  int32x2_t v72;
  int32x2_t v73;
  uint64_t v74;
  int64x2_t v75;
  char *v76;
  uint64_t v77;
  _QWORD v78[4];
  _QWORD v79[6];

  v79[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v68 = a1 + 8;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 8), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v67 = a1 + 32;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((_QWORD *)(a1 + 32), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v70 = (int64x2_t *)(a1 + 104);
  v71 = (char **)(a1 + 56);
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
  {
    v9 = 0;
    v69 = (char **)(a1 + 80);
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v15 = objc_alloc(MEMORY[0x24BDD8DE8]);
      v78[0] = *MEMORY[0x24BDD8D90];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a3, v67, v68);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v79[0] = v16;
      v78[1] = *MEMORY[0x24BDD8D58];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a3);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *MEMORY[0x24BDD8D60];
      v79[1] = v17;
      v79[2] = &unk_251B34A78;
      v19 = *MEMORY[0x24BDD8D38];
      v78[2] = v18;
      v78[3] = v19;
      v79[3] = &unk_251B34A90;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v79, v78, 4);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v15, "initWithProperties:", v20);
      v22 = v21;
      v24 = *(uint64_t **)(a1 + 112);
      v23 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((uint64_t)v24 - v70->i64[0]) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v27 = v23 - v70->i64[0];
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        v77 = a1 + 120;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(a1 + 120, v29);
        else
          v30 = 0;
        v31 = (uint64_t *)&v30[8 * v26];
        v32 = &v30[8 * v29];
        v76 = v32;
        *v31 = v22;
        v25 = v31 + 1;
        v75.i64[1] = (uint64_t)(v31 + 1);
        v34 = *(_QWORD **)(a1 + 104);
        v33 = *(_QWORD **)(a1 + 112);
        if (v33 == v34)
        {
          v36 = vdupq_n_s64((unint64_t)v33);
        }
        else
        {
          do
          {
            v35 = *--v33;
            *v33 = 0;
            *--v31 = v35;
          }
          while (v33 != v34);
          v36 = *v70;
          v25 = (_QWORD *)v75.i64[1];
          v32 = v76;
        }
        *(_QWORD *)(a1 + 104) = v31;
        *(_QWORD *)(a1 + 112) = v25;
        v75 = v36;
        v37 = *(char **)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v32;
        v76 = v37;
        v74 = v36.i64[0];
        std::__split_buffer<IOSurface * {__strong}>::~__split_buffer((uint64_t)&v74);
      }
      else
      {
        *v24 = v21;
        v25 = v24 + 1;
      }
      *(_QWORD *)(a1 + 112) = v25;

      v38 = vcvt_s32_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 32) + 16 * v9));
      v39 = *(_WORD **)(a1 + 64);
      v40 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v39 >= v40)
      {
        v72 = v38;
        v42 = ((char *)v39 - *v71) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v44 = v40 - (_QWORD)*v71;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 72, v45);
        else
          v46 = 0;
        v47 = &v46[4 * v42];
        *((_WORD *)v47 + 1) = v72.i16[2];
        *(_WORD *)v47 = v72.i16[0];
        v49 = *(char **)(a1 + 56);
        v48 = *(char **)(a1 + 64);
        v50 = v47;
        if (v48 != v49)
        {
          do
          {
            v51 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *((_DWORD *)v50 - 1) = v51;
            v50 -= 4;
          }
          while (v48 != v49);
          v48 = *v71;
        }
        v41 = v47 + 4;
        *(_QWORD *)(a1 + 56) = v50;
        *(_QWORD *)(a1 + 64) = v47 + 4;
        *(_QWORD *)(a1 + 72) = &v46[4 * v45];
        if (v48)
          operator delete(v48);
      }
      else
      {
        v39[1] = v38.i16[2];
        *v39 = v38.i16[0];
        v41 = v39 + 2;
      }
      *(_QWORD *)(a1 + 64) = v41;
      v52 = vcvt_s32_f32(vadd_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 32) + 16 * v9 + 8), *(float32x2_t *)(*(_QWORD *)(a1 + 32) + 16 * v9)), _D8));
      v53 = *(_WORD **)(a1 + 88);
      v54 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)v53 >= v54)
      {
        v73 = v52;
        v56 = ((char *)v53 - *v69) >> 2;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v58 = v54 - (_QWORD)*v69;
        if (v58 >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v59);
        else
          v60 = 0;
        v61 = &v60[4 * v56];
        *((_WORD *)v61 + 1) = v73.i16[2];
        *(_WORD *)v61 = v73.i16[0];
        v63 = *(char **)(a1 + 80);
        v62 = *(char **)(a1 + 88);
        v64 = v61;
        if (v62 != v63)
        {
          do
          {
            v65 = *((_DWORD *)v62 - 1);
            v62 -= 4;
            *((_DWORD *)v64 - 1) = v65;
            v64 -= 4;
          }
          while (v62 != v63);
          v62 = *v69;
        }
        v55 = v61 + 4;
        *(_QWORD *)(a1 + 80) = v64;
        *(_QWORD *)(a1 + 88) = v61 + 4;
        *(_QWORD *)(a1 + 96) = &v60[4 * v59];
        if (v62)
          operator delete(v62);
      }
      else
      {
        v53[1] = v52.i16[2];
        *v53 = v52.i16[0];
        v55 = v53 + 2;
      }
      *(_QWORD *)(a1 + 88) = v55;
      ++v9;
    }
    while (v9 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  }
  return a1;
}

void sub_249CB8D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v24 + 16) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void vg::ear_detection::BoxModelPreProcessor::preProcessImage(vg::ear_detection::BoxModelPreProcessor *this@<X0>, IOSurface *a2@<X1>, uint64_t a3@<X8>)
{
  IOSurface *v5;
  unint64_t v6;
  char v7;
  NSObject *v8;
  uint8_t v9[16];

  v5 = a2;
  if (-[IOSurface width](v5, "width") == *(_QWORD *)this
    && -[IOSurface height](v5, "height") == *((_DWORD *)this + 1))
  {
    if (*((_QWORD *)this + 5) != *((_QWORD *)this + 4))
    {
      v6 = 0;
      do
      {
        -[IOSurface vg_cropAndResizeYIntoSurface:origin:size:](v5, "vg_cropAndResizeYIntoSurface:origin:size:", *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v6), *(unsigned int *)(*((_QWORD *)this + 7) + 4 * v6), *(unsigned int *)(*((_QWORD *)this + 10) + 4 * v6));
        ++v6;
      }
      while (v6 < (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::vector<IOSurface * {__strong}>::__init_with_size[abi:ne180100]<IOSurface * {__strong}*,IOSurface * {__strong}*>((char *)a3, *((void ***)this + 13), *((void ***)this + 14), (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3);
    v7 = 1;
  }
  else
  {
    __VGLogSharedInstance();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_249CAD000, v8, OS_LOG_TYPE_ERROR, " Invalid input image size. ", v9, 2u);
    }

    v7 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v7;

}

void sub_249CB8F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::BoxModelPreProcessor::getCropCount(vg::ear_detection::BoxModelPreProcessor *this)
{
  return (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2;
}

float vg::ear_detection::BoxModelPreProcessor::getCropAlignment(vg::ear_detection::BoxModelPreProcessor *this, uint64_t a2)
{
  return *(float *)(*((_QWORD *)this + 1) + 4 * a2);
}

__n128 vg::ear_detection::BoxModelPreProcessor::getCropBox(vg::ear_detection::BoxModelPreProcessor *this, uint64_t a2)
{
  return *(__n128 *)(*((_QWORD *)this + 4) + 16 * a2);
}

double vg::ear_detection::BoxModelPreProcessor::makeScaledBox(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  float32x4_t v4;
  double result;

  v3 = *(_QWORD *)(a1 + 32) + 16 * a3;
  v4.i64[0] = *(_QWORD *)v3;
  v4.i64[1] = *(_QWORD *)v3;
  __asm { FMOV            V4.4S, #1.0 }
  *(_QWORD *)&result = vmlaq_n_f32(v4, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(*a2, _Q4), (int8x16_t)_Q4, *(int8x16_t *)a2), (int8x16_t)vcltzq_f32(*a2)), (float)(*(float *)(v3 + 8) - COERCE_FLOAT(*(_QWORD *)v3)) + -1.0).u64[0];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_249CB9078(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_249CB9164(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<IOSurface * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<IOSurface * {__strong}>::__init_with_size[abi:ne180100]<IOSurface * {__strong}*,IOSurface * {__strong}*>(char *result, void **a2, void **a3, unint64_t a4)
{
  char *v6;
  char **v7;
  void *v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](result, a4);
    v7 = (char **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      result = v8;
      *v7++ = result;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_249CB9318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

BOOL vg::ear_detection::isTooClose(vg::ear_detection *this, const IOSurface *a2)
{
  vg::ear_detection *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  float *v8;
  uint64_t i;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  id v14[5];

  v2 = this;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v14, (IOSurface *)v2, 1);
  v3 = -[vg::ear_detection width](v2, "width");
  v4 = -[vg::ear_detection height](v2, "height");
  v5 = 0;
  if (v4)
  {
    v6 = 0;
    v7 = (float *)v14[2];
    do
    {
      v8 = v7;
      for (i = v3; i; --i)
      {
        v10 = *v8++;
        v5 += v10 < 0.3;
      }
      ++v6;
      v7 = (float *)((char *)v7 + (unint64_t)v14[3]);
    }
    while (v6 != v4);
  }
  v11 = -[vg::ear_detection width](v2, "width");
  v12 = (float)((float)v5 / (float)(-[vg::ear_detection height](v2, "height") * v11)) > 0.8;
  vg::IOSurfaceData::~IOSurfaceData(v14);

  return v12;
}

void sub_249CB9458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

BOOL vg::ear_detection::isEarTooFar(void *a1, int32x4_t a2)
{
  IOSurface *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  id v10[5];

  v2 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v10, v2, 1);
  v3 = -[IOSurface width](v2, "width");
  v4 = -[IOSurface height](v2, "height");
  LODWORD(v5) = vmuls_lane_f32(0.5, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(a2, 3), (float32x4_t)a2), 1);
  LODWORD(v6) = (float)(0.5 * vaddq_f32((float32x4_t)vdupq_laneq_s32(a2, 2), (float32x4_t)a2).f32[0]);
  if (v3 - 1 >= v6)
    v6 = v6;
  else
    v6 = (v3 - 1);
  if (v4 - 1 >= v5)
    v5 = v5;
  else
    v5 = (v4 - 1);
  v7 = *(float *)((char *)v10[2] + (uint64_t)v10[3] * v5 + (uint64_t)v10[4] * v6) > 0.6;
  vg::IOSurfaceData::~IOSurfaceData(v10);

  return v7;
}

void sub_249CB9544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

void vg::IOSurfaceData::~IOSurfaceData(id *this)
{
  objc_msgSend(*this, "unlockWithOptions:seed:", *((unsigned int *)this + 2), 0);

}

vg::IOSurfaceData *vg::IOSurfaceData::IOSurfaceData(vg::IOSurfaceData *this, IOSurface *a2, int a3)
{
  IOSurface *v5;
  IOSurface *v6;

  v5 = a2;
  *(_QWORD *)this = v5;
  *((_DWORD *)this + 2) = a3;
  v6 = objc_retainAutorelease(v5);
  *((_QWORD *)this + 2) = -[IOSurface baseAddress](v6, "baseAddress");
  *((_QWORD *)this + 3) = -[IOSurface bytesPerRow](v6, "bytesPerRow");
  *((_QWORD *)this + 4) = -[IOSurface bytesPerElement](v6, "bytesPerElement");
  objc_msgSend(*(id *)this, "lockWithOptions:seed:", *((unsigned int *)this + 2), 0);

  return this;
}

void sub_249CB961C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

int64x2_t vg::ear_detection::EarSideSmoothPredictorImpl::pushSide(int64x2_t *this, int a2)
{
  int32x2_t v3;
  int32x2_t v4;
  int8x16_t v5;
  int64x2_t result;
  int v7;

  v7 = a2;
  if (this[2].i64[1] == this[4].i64[0])
    vg::ear_detection::EarSideSmoothPredictorImpl::popSide(this);
  std::deque<vg::ear_detection::EarSide>::push_back(this, &v7);
  v3 = (int32x2_t)vld1_dup_f32((const float *)&v7);
  v4 = vceq_s32(v3, (int32x2_t)0x100000000);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  result = vaddq_s64(this[3], (int64x2_t)vandq_s8(v5, (int8x16_t)vdupq_n_s64(1uLL)));
  this[3] = result;
  return result;
}

BOOL vg::ear_detection::EarSideSmoothPredictorImpl::popSide(int64x2_t *this)
{
  uint64_t v1;
  const float *v3;
  int32x2_t v4;

  v1 = this[2].i64[1];
  if (v1)
  {
    v3 = (const float *)(*(_QWORD *)(this->i64[1] + (((unint64_t)this[2].i64[0] >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (this[2].i64[0] & 0x3FF));
    ++this[2].i64[0];
    this[2].i64[1] = v1 - 1;
    v4 = (int32x2_t)vld1_dup_f32(v3);
    std::deque<vg::ear_detection::EarSide>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this, 1);
    this[3] = vaddw_s32(this[3], vceq_s32(v4, (int32x2_t)0x100000000));
  }
  return v1 != 0;
}

uint64_t vg::ear_detection::EarSideSmoothPredictorImpl::estimateSmoothEarSide(int64x2_t *this, int a2)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  const char *v11;
  float v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v17;
  const char *v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = this[2].u64[1];
  v5 = 0.0;
  if (v4 == this[4].i64[0])
  {
    v6 = 7;
    if (!a2)
      v6 = 6;
    v5 = (float)this->u64[v6] / (float)v4;
  }
  vg::ear_detection::EarSideSmoothPredictorImpl::pushSide(this, a2);
  if (v4 >= this[4].i64[0])
  {
    if (v5 >= *(float *)&this[4].i32[2])
    {
      v15 = a2 & 0xFFFFFF00;
      v13 = a2;
      v14 = 0x100000000;
      return v14 | v15 | v13;
    }
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = "right";
      v12 = *(float *)&this[4].i32[2];
      if (!a2)
        v11 = "left";
      v17 = 136315650;
      v18 = v11;
      v19 = 2048;
      v20 = v5;
      v21 = 2048;
      v22 = v12;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_INFO, " Ear side not consistent with the buffer threshold; ignoring frame for selection purposes; side: %s, ratio: %f, threshold: %f ",
        (uint8_t *)&v17,
        0x20u);
    }

  }
  else
  {
    __VGLogSharedInstance();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = this[2].i64[1];
      v9 = *(double *)this[4].i64;
      v17 = 134218240;
      v18 = (const char *)v8;
      v19 = 2048;
      v20 = v9;
      _os_log_impl(&dword_249CAD000, v7, OS_LOG_TYPE_INFO, " Collecting data for the ear side smoothing buffer: %zu / %zu ", (uint8_t *)&v17, 0x16u);
    }

  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  return v14 | v15 | v13;
}

uint64_t vg::ear_detection::EarSideSmoothPredictor::estimateSmoothEarSide(int64x2_t **a1, int a2)
{
  return vg::ear_detection::EarSideSmoothPredictorImpl::estimateSmoothEarSide(*a1, a2);
}

float vg::ear_detection::EarSideSmoothPredictor::create@<S0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = 0;
  v4 = 0;
  return vg::ear_detection::EarSideSmoothPredictor::create((uint64_t)&v3, a1);
}

float vg::ear_detection::EarSideSmoothPredictor::create@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  float result;

  v4 = (_QWORD *)operator new();
  v5 = operator new();
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_QWORD *)(v5 + 64) = *(_QWORD *)a1;
  result = *(float *)(a1 + 8);
  *(float *)(v5 + 72) = result;
  *v4 = v5;
  *a2 = v4;
  return result;
}

void sub_249CB99B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *vg::ear_detection::EarSideSmoothPredictor::EarSideSmoothPredictor(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 64) = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 72) = *(_DWORD *)(a2 + 8);
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 64) = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 72) = *(_DWORD *)(a2 + 8);
  *a1 = v4;
  return a1;
}

void vg::ear_detection::EarSideSmoothPredictor::~EarSideSmoothPredictor(vg::ear_detection::EarSideSmoothPredictor *this)
{
  std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((_QWORD **)this, 0);
}

{
  std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((_QWORD **)this, 0);
}

void std::deque<vg::ear_detection::EarSide>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<vg::ear_detection::EarSide>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<vg::ear_detection::EarSide>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<vg::ear_detection::EarSide *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<vg::ear_detection::EarSide *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<vg::ear_detection::EarSide *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<vg::ear_detection::EarSide *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_249CB9E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<vg::ear_detection::EarSide *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<vg::ear_detection::EarSide *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<vg::ear_detection::EarSide>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

_QWORD *std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100](_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::deque<vg::ear_detection::EarSide>::~deque[abi:ne180100](result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

uint64_t std::deque<vg::ear_detection::EarSide>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<vg::ear_detection::EarSide *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<vg::ear_detection::EarSide *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void vg::ear_detection::EarPoseDetectorImpl::detect(vg::ear_detection::EarPoseDetectorImpl *this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, simd::float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, uint64_t a5@<X8>)
{
  IOSurface *v8;
  IOSurface *v9;
  int v10;
  float64x2_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t v18;
  int64x2_t v19;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  __n128 v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  __n128 v36;
  float32x4_t v37;
  float32x2_t v39;
  __n128 v40;
  float32x4_t v41;
  float32x2_t v42;
  __n128 v43;
  float32x4_t v44;
  float32x2_t v45;
  __n128 v46;
  float32x4_t v47;
  double *v48;
  __n128 v49;
  int32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  NSObject *v53;
  const char *v54;
  NSObject *v55;
  int v56;
  int v57;
  float32x4_t v58;
  __int128 v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int64x2_t v68;
  float64x2_t v69;
  float32x2_t v70;
  float v71;
  __n128 CompactBoundingBox;
  double v73;
  __int128 v74;
  __n128 v75;
  float32x4_t v76;
  uint8_t v77[16];
  int v78;
  float32x4_t v79;
  __int128 buf;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  char v86;
  float v87;
  float v88;
  float32x4_t v89;
  _OWORD v90[3];
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _BYTE v96[16];
  float64x2_t v97[73];
  _BYTE v98[24];
  int32x4_t v99[2];
  char v100;
  uint64_t v101;

  v73 = *(double *)a4.columns[1].i64;
  v75 = (__n128)a4.columns[2];
  v71 = a4.columns[0].f32[0];
  v101 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v9 = a3;
  vg::ear_detection::EarBoundingBoxModel::predictBoundingBox(*(vg::ear_detection::EarBoundingBoxModelImpl ***)this, v8, (uint64_t)v99);
  if (!v100)
    goto LABEL_24;
  vg::ear_detection::EarLandmarksModel::predictLandmarks(*((uint64_t ***)this + 1), v8, v99, v96);
  if (!v98[8])
    goto LABEL_24;
  v10 = vg::ear_detection::EarPoseDetectorImpl::checkEarQuality(this, v8, v9, (const vg::ear_detection::EarBoundingBoxModel::BoundingBox *)v99, (const vg::ear_detection::EarLandmarksModel::Landmarks *)v96);
  if (!v10)
  {
    v11 = v97;
    v12 = vg::ear_detection::EarLandmarksModel::estimateEarSide(v97[0].f64);
    v13 = v12;
    if ((v12 & 0xFF00000000) != 0)
    {
      if (*((_DWORD *)this + 10) != (_DWORD)v12)
        *((_DWORD *)this + 9) = 0;
      v14 = -[IOSurface width](v9, "width");
      v15 = -[IOSurface height](v9, "height");
      v16 = -[IOSurface width](v8, "width");
      v17 = -[IOSurface height](v8, "height");
      v18.f32[0] = (float)v14;
      v19.i64[0] = v16;
      v19.i64[1] = v17;
      v18.f32[1] = (float)v15;
      __asm { FMOV            V1.2S, #-1.0 }
      v25 = vadd_f32(v18, _D1);
      v26 = vdiv_f32(v18, vcvt_f32_f64(vcvtq_f64_s64(v19)));
      v27 = vmul_f32(v26, vcvt_f32_f64(*(float64x2_t *)((char *)&v97[19] + 8)));
      v70 = vmul_f32(v26, vcvt_f32_f64(v97[0]));
      v28 = vmul_f32(vadd_f32(v70, v27), (float32x2_t)0x3F0000003F000000);
      v29 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v28, v25), (int8x8_t)v25, (int8x8_t)v28), (int8x8_t)vcltz_f32(v28));
      v30 = vg::ear_detection::pointFromPixelOnDepthImage(v9, *(double *)&v29, v71, v73, v75);
      v31 = vmulq_f32((float32x4_t)v30, (float32x4_t)v30);
      v95 = (float32x4_t)v30;
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0] != 0.0)
      {
        v32 = (float32x2_t)vrev64_s32((int32x2_t)v27);
        v33 = (float32x2_t)vzip1_s32((int32x2_t)v32, (int32x2_t)v70);
        v32.i32[0] = v70.i32[1];
        v34 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v13 == 1), 0x1FuLL)), (int8x8_t)vsub_f32(v33, v32), (int8x8_t)vsub_f32(v32, v33));
        v35 = vmla_f32(v29, (float32x2_t)0x3F0000003F000000, v34);
        v36 = vg::ear_detection::pointFromPixelOnDepthImage(v9, COERCE_DOUBLE(vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v35, v25), (int8x8_t)v25, (int8x8_t)v35), (int8x8_t)vcltz_f32(v35))), v71, v73, v75);
        v37 = vmulq_f32((float32x4_t)v36, (float32x4_t)v36);
        v94 = (float32x4_t)v36;
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0] != 0.0)
        {
          __asm { FMOV            V0.2S, #0.75 }
          v39 = vmla_f32(v29, _D0, v34);
          v40 = vg::ear_detection::pointFromPixelOnDepthImage(v9, COERCE_DOUBLE(vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v39, v25), (int8x8_t)v25, (int8x8_t)v39), (int8x8_t)vcltz_f32(v39))), v71, v73, v75);
          v41 = vmulq_f32((float32x4_t)v40, (float32x4_t)v40);
          v93 = (float32x4_t)v40;
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0] != 0.0)
          {
            v42 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v27, v25), (int8x8_t)v25, (int8x8_t)v27), (int8x8_t)vcltz_f32(v27));
            v43 = vg::ear_detection::pointFromPixelOnDepthImage(v9, *(double *)&v42, v71, v73, v75);
            v44 = vmulq_f32((float32x4_t)v43, (float32x4_t)v43);
            v92 = (float32x4_t)v43;
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0] != 0.0)
            {
              v45 = vmla_f32(v42, (float32x2_t)vdup_n_s32(0x3E4CCCCDu), vsub_f32(v27, v70));
              v46 = vg::ear_detection::pointFromPixelOnDepthImage(v9, COERCE_DOUBLE(vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v45, v25), (int8x8_t)v25, (int8x8_t)v45), (int8x8_t)vcltz_f32(v45))), v71, v73, v75);
              v47 = vmulq_f32((float32x4_t)v46, (float32x4_t)v46);
              v91 = (float32x4_t)v46;
              if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0] != 0.0)
              {
                if (vg::shared::arePointsCollinear(&v95, &v94, &v93, 0.9)
                  && vg::shared::arePointsCollinear(&v95, &v92, &v91, 0.9))
                {
                  v83 = 0u;
                  v84 = 0u;
                  v81 = 0u;
                  v82 = 0u;
                  v85 = 0;
                  v86 = 0;
                  memset(v90, 0, sizeof(v90));
                  std::vector<float>::reserve((void **)v90, 0x62uLL);
                  do
                  {
                    std::vector<float>::emplace_back<double const&>((uint64_t)v90, v11->f64);
                    v48 = &v11->f64[1];
                    std::vector<float>::emplace_back<double const&>((uint64_t)v90, v48);
                    v11 = (float64x2_t *)(v48 + 2);
                  }
                  while (v11 != (float64x2_t *)v98);
                  v49 = vg::ear_detection::EarPoseDetectorImpl::computeEarPlaneNormal(v71, v73, v75, (uint64_t)this, *(float **)&v90[0], v13, v8, v9);
                  v50 = (int32x4_t)vmulq_f32((float32x4_t)v49, (float32x4_t)v49);
                  v50.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v50, 2), vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 1))).u32[0];
                  v51 = vrsqrte_f32((float32x2_t)v50.u32[0]);
                  v52 = vmul_f32(v51, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v51, v51)));
                  v79 = vnegq_f32(vmulq_n_f32((float32x4_t)v49, vmul_f32(v52, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v52, v52))).f32[0]));
                  v78 = 0;
                  *(_OWORD *)v77 = 0u;
                  if (vg::shared::intersectPlane(&v79, &v95, (float32x4_t *)v77, &v92, &v78))
                  {
                    v76 = v79;
                    if (fabsf(v79.f32[2]) >= 0.1)
                    {
                      v57 = *((_DWORD *)this + 9);
                      if (v57)
                      {
                        v58 = vmlaq_n_f32(vmulq_n_f32(*((float32x4_t *)this + 3), 1.0 - *((float *)this + 16)), v79, *((float *)this + 16));
                        *((float32x4_t *)this + 3) = v58;
                        v76 = v58;
                      }
                      else
                      {
                        *((float32x4_t *)this + 3) = v79;
                      }
                      *((_DWORD *)this + 9) = v57 + 1;
                      if (v13)
                      {
                        *(_QWORD *)&v59 = 0;
                        HIDWORD(v59) = 0;
                        v60 = v76.f32[0];
                      }
                      else
                      {
                        v60 = -v76.f32[0];
                        *(_QWORD *)&v59 = 0;
                        HIDWORD(v59) = 0;
                      }
                      *((float *)&v59 + 2) = v60;
                      v74 = v59;
                      v61 = v76.f32[2];
                      if (v76.f32[2] == 0.0)
                        v61 = 0.001;
                      v62 = atanf(*((float *)&v59 + 2) / v61);
                      v63 = asinf(v76.f32[1]);
                      CompactBoundingBox = vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox((vg::ear_detection::EarLandmarksModel::Landmarks *)v96, 0.1);
                      v64 = -[IOSurface width](v8, "width");
                      v65 = -[IOSurface height](v8, "height");
                      *(_QWORD *)&v66 = 0;
                      *(_QWORD *)&v67 = 0;
                      *((_QWORD *)&v67 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.25, *(float32x2_t *)v76.f32, 1));
                      *((_QWORD *)&v66 + 1) = v76.u32[2];
                      v68.i64[0] = v64;
                      v68.i64[1] = v65;
                      v69 = vcvtq_f64_s64(v68);
                      LODWORD(buf) = v13;
                      v81 = v74;
                      v82 = v67;
                      v83 = v66;
                      v84 = xmmword_249D3A6B0;
                      v87 = v62 * 57.296;
                      v88 = v63 * -57.296;
                      v89 = vdivq_f32((float32x4_t)CompactBoundingBox, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v69), v69));
                      std::__optional_destruct_base<vg::ear_detection::EarPose,false>::__optional_destruct_base[abi:ne180100]<vg::ear_detection::EarPose&>(a5, &buf);
                      v56 = 0;
                      goto LABEL_39;
                    }
                    __VGLogSharedInstance();
                    v53 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)v77 = 0;
                      v54 = " Frame rejected by pose estimator because of noise in angle estimation. test ";
LABEL_28:
                      _os_log_impl(&dword_249CAD000, v53, OS_LOG_TYPE_DEBUG, v54, v77, 2u);
                    }
                  }
                  else
                  {
                    __VGLogSharedInstance();
                    v53 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)v77 = 0;
                      v54 = " Frame rejected by pose estimator because of failing normal - plane intersection test ";
                      goto LABEL_28;
                    }
                  }

                  *(_BYTE *)a5 = 0;
                  *(_BYTE *)(a5 + 176) = 0;
                  v56 = 1;
LABEL_39:
                  *(_DWORD *)(a5 + 192) = v56;
                  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&buf);
                  goto LABEL_25;
                }
                __VGLogSharedInstance();
                v55 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl(&dword_249CAD000, v55, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of noisy depth ", (uint8_t *)&buf, 2u);
                }

              }
            }
          }
        }
      }
    }
LABEL_24:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 176) = 0;
    *(_DWORD *)(a5 + 192) = 1;
    goto LABEL_25;
  }
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 176) = 0;
  *(_DWORD *)(a5 + 192) = v10;
LABEL_25:

}

void sub_249CBAB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a15);
  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)va);

  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::EarPoseDetectorImpl::checkEarQuality(vg::ear_detection::EarPoseDetectorImpl *this, IOSurface *a2, IOSurface *a3, const vg::ear_detection::EarBoundingBoxModel::BoundingBox *a4, const vg::ear_detection::EarLandmarksModel::Landmarks *a5)
{
  IOSurface *v9;
  IOSurface *v10;
  const IOSurface *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  int32x4_t v23;
  uint8_t v24[16];
  __int16 v25;
  __int16 v26;
  uint8_t v27[16];
  uint8_t v28[2];
  uint8_t buf[16];

  v9 = a2;
  v10 = a3;
  if (vg::ear_detection::isTooClose((vg::ear_detection *)v10, v11))
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too close. ", buf, 2u);
    }
    v13 = 6;
    goto LABEL_14;
  }
  if (*((float *)a4 + 6) < *((float *)this + 4))
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
LABEL_9:
      v13 = 1;
      goto LABEL_14;
    }
    *(_WORD *)v28 = 0;
    v14 = " Frame rejected by pose estimator because of ear not present. ";
    v15 = v28;
LABEL_8:
    _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, v14, v15, 2u);
    goto LABEL_9;
  }
  if (*((float *)a4 + 7) < *((float *)this + 5))
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of ear occlusion. ", v27, 2u);
    }
    v13 = 4;
    goto LABEL_14;
  }
  if (vg::ear_detection::EarBoundingBoxModel::BoundingBox::getMeanVisibility(a4) < *((float *)this + 6))
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      goto LABEL_9;
    v26 = 0;
    v14 = " Frame rejected by pose estimator because of low confidence bbox ";
    v15 = (uint8_t *)&v26;
    goto LABEL_8;
  }
  if (vg::ear_detection::EarLandmarksModel::Landmarks::getVisibleLandmarksFraction(a5, *((float *)this + 7)) < *((float *)this + 8))
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      goto LABEL_9;
    v25 = 0;
    v14 = " Frame rejected by pose estimator because of low percentile confidence landmarks ";
    v15 = (uint8_t *)&v25;
    goto LABEL_8;
  }
  v17 = -[IOSurface width](v10, "width");
  v18 = -[IOSurface width](v9, "width");
  v19 = -[IOSurface height](v10, "height");
  v20 = -[IOSurface height](v9, "height");
  v21 = (float)v17 / (float)v18;
  v22 = (float)v19 / (float)v20;
  *(float *)v23.i32 = v21 * *(float *)a4;
  *(float *)&v23.i32[1] = v22 * *((float *)a4 + 1);
  *(float *)&v23.i32[2] = v21 * *((float *)a4 + 2);
  *(float *)&v23.i32[3] = v22 * *((float *)a4 + 3);
  if (!vg::ear_detection::isEarTooFar(v10, v23))
  {
    v13 = 0;
    goto LABEL_15;
  }
  __VGLogSharedInstance();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too far. ", v24, 2u);
  }
  v13 = 7;
LABEL_14:

LABEL_15:
  return v13;
}

void sub_249CBAE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

float *std::vector<float>::emplace_back<double const&>(uint64_t a1, double *a2)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  float *v15;
  char *v16;
  float v17;
  int v18;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(float **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(float **)a1;
    v10 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v9 = *(float **)a1;
      v6 = *(float **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (float *)&v14[4 * v10];
    v16 = &v14[4 * v13];
    v17 = *a2;
    *v15 = v17;
    v8 = v15 + 1;
    while (v6 != v9)
    {
      v18 = *((_DWORD *)v6-- - 1);
      *((_DWORD *)v15-- - 1) = v18;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    v7 = *a2;
    *v6 = v7;
    v8 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return v8 - 1;
}

__n128 vg::ear_detection::EarPoseDetectorImpl::computeEarPlaneNormal(float a1, double a2, __n128 a3, uint64_t a4, float *a5, int a6, void *a7, void *a8)
{
  __n128 result;
  __n128 v9;
  void *__p[3];

  vg::ear_detection::EarPoseDetectorImpl::findROI(a5, a6, a7, a8, __p, a1, a2, a3);
  result.n128_f64[0] = vg::ear_detection::computePlaneNormal(__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    v9 = result;
    operator delete(__p[0]);
    return v9;
  }
  return result;
}

void sub_249CBB088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vg::ear_detection::EarPoseDetectorImpl::findROI(float *a1@<X1>, int a2@<W2>, void *a3@<X3>, void *a4@<X4>, void **a5@<X8>, float a6@<S0>, double a7@<D1>, __n128 a8@<Q2>)
{
  IOSurface *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t EarTriangleROIVertex;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _DWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  float v39;
  float v40;
  float32x2_t v41;
  float v42;
  unint64_t v43;
  float32x2_t v44;
  uint64_t v45;
  float v46;
  __n128 v47;
  __int128 v48;
  unint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  float v67;
  __int128 v68;
  float32x2_t v69;
  void *__p[3];
  id v71[5];
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74[2];

  v61 = a3;
  v12 = a4;
  v13 = -[IOSurface width](v12, "width");
  v14 = -[IOSurface height](v12, "height");
  v15 = objc_msgSend(v61, "width");
  v16 = objc_msgSend(v61, "height");
  v17 = (float)v13 / (float)v15;
  v18 = (float)v14 / (float)v16;
  v19.f32[0] = v17 * *a1;
  v19.f32[1] = v18 * a1[1];
  v20.f32[0] = v17 * a1[26];
  v20.f32[1] = v18 * a1[27];
  v73 = v20;
  v74[0] = v19;
  EarTriangleROIVertex = vg::ear_detection::getEarTriangleROIVertex(a2, v19, v20);
  v72 = EarTriangleROIVertex;
  v23 = v73;
  v22 = v74[0];
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v71, v12, 1);
  v69.i32[0] = 0;
  std::vector<float>::vector(__p, -[IOSurface height](v12, "height") * -[IOSurface width](v12, "width"), &v69);
  v24 = -[IOSurface width](v12, "width");
  v25 = -[IOSurface height](v12, "height");
  v26 = vminnm_f32(EarTriangleROIVertex, vminnm_f32(v22, v23));
  v27 = vmaxnm_f32(EarTriangleROIVertex, vmaxnm_f32(v22, v23));
  if (v25)
  {
    v28 = 0;
    v29 = 0;
    v30 = (char *)v71[2];
    v31 = (char *)v71[3];
    v32 = __p[0];
    do
    {
      v33 = v24;
      v34 = v30;
      v35 = v28;
      if ((_DWORD)v24)
      {
        do
        {
          v36 = *(_DWORD *)v34;
          v34 += 4;
          v32[v35++] = v36;
          --v33;
        }
        while (v33);
      }
      ++v29;
      v28 += v24;
      v30 = &v31[(_QWORD)v30];
    }
    while (v29 != v25);
  }
  v37 = (unint64_t)v26.f32[0];
  v62 = (unint64_t)v27.f32[0];
  if ((unint64_t)v26.f32[0] < (unint64_t)v27.f32[0])
  {
    v63 = (unint64_t)v26.f32[1];
    v38 = (unint64_t)v27.f32[1];
    v39 = (float)v13 + -1.0;
    v40 = (float)v14 + -1.0;
    v41 = (float32x2_t)vdup_n_s32(0x4479FFFFu);
    do
    {
      if (v63 < v38)
      {
        v42 = (float)v37;
        if (v39 < (float)v37)
          v42 = v39;
        v67 = v42;
        v43 = v63;
        do
        {
          v44.f32[0] = (float)v37;
          v44.f32[1] = (float)v43;
          v69 = v44;
          if (vg::shared::isPointInTriangle(&v69, v74, &v73, &v72))
          {
            v45 = -[IOSurface width](v12, "width");
            *((_DWORD *)__p[0] + v37 + v45 * v43) = 0;
            if (v40 >= (float)v43)
              v46 = (float)v43;
            else
              v46 = v40;
            v47 = vg::ear_detection::pointFromPixelOnDepthImage(v12, COERCE_DOUBLE(__PAIR64__(LODWORD(v46), LODWORD(v67))), a6, a7, a8);
            *(float32x2_t *)&v48 = vmul_f32((float32x2_t)v47.n128_u64[0], v41);
            DWORD2(v48) = vmuls_lane_f32(1000.0, (float32x4_t)v47, 2);
            v50 = a5[1];
            v49 = (unint64_t)a5[2];
            if ((unint64_t)v50 >= v49)
            {
              v68 = v48;
              v52 = ((char *)v50 - (_BYTE *)*a5) >> 4;
              if ((unint64_t)(v52 + 1) >> 60)
                std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
              v53 = v49 - (_QWORD)*a5;
              v54 = v53 >> 3;
              if (v53 >> 3 <= (unint64_t)(v52 + 1))
                v54 = v52 + 1;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
                v55 = 0xFFFFFFFFFFFFFFFLL;
              else
                v55 = v54;
              if (v55)
                v56 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a5 + 2), v55);
              else
                v56 = 0;
              v57 = &v56[16 * v52];
              *(_OWORD *)v57 = v68;
              v51 = v57 + 16;
              v59 = (char *)*a5;
              v58 = (char *)a5[1];
              if (v58 != *a5)
              {
                do
                {
                  v60 = *((_OWORD *)v58 - 1);
                  v58 -= 16;
                  *((_OWORD *)v57 - 1) = v60;
                  v57 -= 16;
                }
                while (v58 != v59);
                v58 = (char *)*a5;
              }
              *a5 = v57;
              a5[1] = v51;
              a5[2] = &v56[16 * v55];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v50 = v48;
              v51 = v50 + 1;
            }
            a5[1] = v51;
          }
          ++v43;
        }
        while (v43 != v38);
      }
      ++v37;
    }
    while (v37 != v62);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  vg::IOSurfaceData::~IOSurfaceData(v71);

}

void sub_249CBB428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  uint64_t v31;
  void *v33;

  if (__p)
    operator delete(__p);
  vg::IOSurfaceData::~IOSurfaceData(&a30);
  v33 = *(void **)v31;
  if (*(_QWORD *)v31)
  {
    *(_QWORD *)(v31 + 8) = v33;
    operator delete(v33);
  }

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPoseDetector::detectPose(vg::ear_detection::EarPoseDetectorImpl **this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, simd::float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, uint64_t a5@<X8>)
{
  vg::ear_detection::EarPoseDetectorImpl::detect(*this, a2, a3, a4, a5);
}

uint64_t *vg::ear_detection::EarPoseDetector::create@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v4;
  uint64_t *result;

  v4 = (uint64_t *)operator new();
  result = vg::ear_detection::EarPoseDetector::EarPoseDetector(v4, a1);
  *a2 = v4;
  return result;
}

void sub_249CBB500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *vg::ear_detection::EarPoseDetector::EarPoseDetector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  vg::ear_detection::EarPoseDetectorImpl::EarPoseDetectorImpl(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_249CBB57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x1020C40B1F4174DLL);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPoseDetector::~EarPoseDetector(vg::ear_detection::EarBoundingBoxModel ***this)
{
  vg::ear_detection::EarBoundingBoxModel **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarPoseDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  vg::ear_detection::EarBoundingBoxModel **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarPoseDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t std::__optional_destruct_base<vg::ear_detection::EarPose,false>::__optional_destruct_base[abi:ne180100]<vg::ear_detection::EarPose&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 128), *((const void **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 152), *((const void **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
  *(_BYTE *)(a1 + 176) = 1;
  return a1;
}

void sub_249CBB69C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 136) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_249CBB71C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vg::ear_detection::EarPoseDetectorImpl::EarPoseDetectorImpl(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)(a2 + 24);
  vg::ear_detection::EarBoundingBoxModel::create((uint64_t *)(a2 + 24), (_QWORD *)a1);
  vg::ear_detection::EarLandmarksModel::create(v4, (uint64_t **)(a1 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 36) = 0x100000000;
  *(_DWORD *)(a1 + 64) = 1051372203;
  return a1;
}

void sub_249CBB7A8(_Unwind_Exception *a1)
{
  vg::ear_detection::EarBoundingBoxModel **v1;

  std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

vg::ear_detection::EarBoundingBoxModel *std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](vg::ear_detection::EarBoundingBoxModel **a1, vg::ear_detection::EarBoundingBoxModel *a2)
{
  vg::ear_detection::EarBoundingBoxModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarBoundingBoxModel::~EarBoundingBoxModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void std::default_delete<vg::ear_detection::EarPoseDetectorImpl>::operator()[abi:ne180100](uint64_t a1, vg::ear_detection::EarBoundingBoxModel **a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](a2 + 1, 0);
    std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](a2, 0);
    JUMPOUT(0x24BD02D60);
  }
}

vg::ear_detection::EarLandmarksModel *std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](vg::ear_detection::EarLandmarksModel **a1, vg::ear_detection::EarLandmarksModel *a2)
{
  vg::ear_detection::EarLandmarksModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarLandmarksModel::~EarLandmarksModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void vg::ear_detection::makeSquareCropBox(uint32x2_t *a1@<X0>, _BYTE *a2@<X8>, float a3@<S0>)
{
  BOOL v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  __int128 v12;
  char v13;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v4 = a3 >= 0.0 && a3 <= 1.0;
  if (!v4)
  {
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v17 = 0;
      v6 = " Invalid input alignment. ";
      v7 = (uint8_t *)&v17;
LABEL_16:
      _os_log_impl(&dword_249CAD000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  v8 = vcvt_f32_u32(*a1);
  v9 = v8.f32[0] + -1.0;
  v10 = v8.f32[1] + -1.0;
  if (v8.f32[1] <= v8.f32[0])
  {
    *(float *)&v12 = (float)(v8.f32[0] - v8.f32[1]) * a3;
    v11 = 0.0;
    v4 = (float)((float)(*(float *)&v12 + v8.f32[1]) + -1.0) <= v9;
    v9 = (float)(*(float *)&v12 + v8.f32[1]) + -1.0;
    if (!v4)
    {
      __VGLogSharedInstance();
      v5 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      v15 = 0;
      v6 = " Invalid alignment, box bottom-right corner extends beyond image size. ";
      v7 = (uint8_t *)&v15;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = (float)(v8.f32[1] - v8.f32[0]) * a3;
    LODWORD(v12) = 0;
    v4 = (float)((float)(v11 + v8.f32[0]) + -1.0) <= v10;
    v10 = (float)(v11 + v8.f32[0]) + -1.0;
    if (!v4)
    {
      __VGLogSharedInstance();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v16 = 0;
        v6 = " Invalid alignment, box bottom-right corner extends beyond image size. ";
        v7 = (uint8_t *)&v16;
        goto LABEL_16;
      }
LABEL_17:

      v13 = 0;
      *a2 = 0;
      goto LABEL_18;
    }
  }
  *((float *)&v12 + 1) = v11;
  *((_QWORD *)&v12 + 1) = __PAIR64__(LODWORD(v10), LODWORD(v9));
  *(_OWORD *)a2 = v12;
  v13 = 1;
LABEL_18:
  a2[16] = v13;
}

uint64_t vg::ear_detection::EarLandmarksModelImpl::EarLandmarksModelImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  E5RT::IOPort **v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *InputPorts;
  unsigned __int8 *v12;
  _QWORD *OutputPorts;
  unsigned __int8 *v14;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  E5RT::ExecutionStream *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v25;
  _BYTE buf[12];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (E5RT::IOPort **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = (_QWORD *)(a1 + 64);
  *(_OWORD *)a1 = 0u;
  vg::ear_detection::LandmarkModelPreProcessor::create((vg::ear_detection::LandmarkModelPreProcessor *)0x190, (vg::ear_detection::LandmarkModelPreProcessor **)(a1 + 80));
  VGLogEarLandmarksModel();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl(&dword_249CAD000, v8, OS_LOG_TYPE_INFO, "Using model root path %s", buf, 0xCu);
  }

  vg::shared::VGE5RT::compileModel((uint64_t *)a2, 1, buf);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1, (uint64_t *)buf);
  v10 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "input_image");
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, buf);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100](v5, (uint64_t *)v12 + 5);
  if (v27 < 0)
    operator delete(*(void **)buf);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "detection");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, buf);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100](v6, (uint64_t *)v14 + 5);
  if (v27 < 0)
    operator delete(*(void **)buf);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*v6);
  E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  E5RT::TensorDescriptor::AllocateMemory();
  std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(v7, (uint64_t *)buf);
  v16 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(std::__shared_weak_count **)(a1 + 72);
  v25 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  E5RT::ExecutionStream::CreateExecutionStream(v20);
  std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(v4, (uint64_t *)buf);
  v23 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return a1;
}

void sub_249CBBCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id **v21;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  std::unique_ptr<vg::ear_detection::LandmarkModelPreProcessor>::reset[abi:ne180100](v21, 0);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

id VGLogEarLandmarksModel(void)
{
  if (VGLogEarLandmarksModel(void)::onceToken != -1)
    dispatch_once(&VGLogEarLandmarksModel(void)::onceToken, &__block_literal_global);
  return (id)VGLogEarLandmarksModel(void)::handle;
}

_QWORD *std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_251B22D50;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_251B22DB0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_251B22E10;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void vg::ear_detection::EarLandmarksModelImpl::predictLandmarks(uint64_t *a1@<X0>, void *a2@<X1>, int32x4_t *a3@<X2>, _BYTE *a4@<X8>)
{
  id v7;
  unsigned int v8;
  double v9;
  __int128 v10;
  void *v11;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v13;
  uint64_t TensorStrides;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  NSObject *v19;
  uint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  vg::shared::VGE5RT *v27;
  E5RT::OperandDescriptor *v28;
  IOSurface *v29;
  const E5RT::TensorDescriptor *v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  int v34;
  float64_t v35;
  int v36;
  NSObject *v37;
  NSObject *v38;
  __int128 v39;
  char v40;
  float64x2_t v41;
  _OWORD __src[75];
  _DWORD *v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  float32x2_t v49[3];
  unint64_t v50;

  v7 = a2;
  v8 = objc_msgSend(v7, "width");
  v50 = __PAIR64__(objc_msgSend(v7, "height"), v8);
  *(_OWORD *)v49[0].f32 = 0uLL;
  LODWORD(v9) = 1036831949;
  *(double *)&v10 = vg::ear_detection::makeLargeBox((uint32x2_t *)&v50, *a3, v9);
  *(_OWORD *)v49[0].f32 = v10;
  vg::ear_detection::LandmarkModelPreProcessor::preProcessImage((id *)a1[10], v7, v49);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    v13 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v13);
    v15 = *(_QWORD *)(*(_QWORD *)(TensorStrides + 8) - 16);
    if (v15 != objc_msgSend(v11, "bytesPerRow"))
    {
      objc_msgSend(v11, "vg_convertSurfaceStride:", *(_QWORD *)(*(_QWORD *)(TensorStrides + 8) - 16));
      v16 = objc_claimAutoreleasedReturnValue();

      v11 = (void *)v16;
    }
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    v47 = *(_QWORD *)&__src[0];
    if (*(_QWORD *)&__src[0])
    {
      v17 = (std::__shared_weak_count *)operator new();
      v18 = *(std::__shared_weak_count_vtbl **)&__src[0];
      v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B22DB0;
      v17->__shared_owners_ = 0;
      v17->__shared_weak_owners_ = 0;
      v17[1].__vftable = v18;
    }
    else
    {
      v17 = 0;
    }
    v48 = v17;
    *(_QWORD *)&__src[0] = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v48)
    {
      p_shared_owners = &v48->__shared_owners_;
      do
        v21 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v21 - 1, (unint64_t *)p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    *(_QWORD *)&__src[0] = 0;
    v22 = (std::__shared_weak_count *)a1[1];
    v45 = *a1;
    v46 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v46)
    {
      v25 = &v46->__shared_owners_;
      do
        v26 = __ldaxr((unint64_t *)v25);
      while (__stlxr(v26 - 1, (unint64_t *)v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    v27 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    if (v27)
    {
      v28 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
      v29 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v28);
      vg::shared::VGE5RT::convertSurfaceTo2DMatrix(v27, v29, v30, (uint64_t)&v43);
      if (v44 == 49)
      {
        v31 = 0;
        __src[0] = *a3;
        v32 = v43;
        v33 = &__src[2];
        v34 = 49;
        while (1)
        {
          v41 = 0uLL;
          v35 = *(float *)&v32[(v31 + v34)];
          v41.f64[0] = *(float *)&v32[v31];
          v41.f64[1] = v35;
          vg::ear_detection::LandmarkModelPreProcessor::makeScaledPoint(v49, &v41, (uint64_t)&v39);
          if (!v40)
            break;
          v34 = v44;
          v32 = v43;
          v36 = v43[(v31 + 2 * v44)];
          *((_OWORD *)v33 - 1) = v39;
          *v33 = v36;
          v33 += 6;
          if (++v31 == 49)
          {
            memcpy(a4, __src, 0x4B0uLL);
            a4[1200] = 1;
            goto LABEL_37;
          }
        }
        VGLogEarLandmarksModel();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();
      }
      else
      {
        VGLogEarLandmarksModel();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();
      }

      *a4 = 0;
      a4[1200] = 0;
LABEL_37:
      free(v43);
    }
    else
    {
      VGLogEarLandmarksModel();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();

      *a4 = 0;
      a4[1200] = 0;
    }

  }
  else
  {
    VGLogEarLandmarksModel();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();

    *a4 = 0;
    a4[1200] = 0;
  }

}

void sub_249CBC3E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t *vg::ear_detection::EarLandmarksModel::EarLandmarksModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  vg::ear_detection::EarLandmarksModelImpl::EarLandmarksModelImpl(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_249CBC4C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x20C40D3FB9507);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarLandmarksModel::~EarLandmarksModel(vg::ear_detection::EarLandmarksModel *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarLandmarksModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarLandmarksModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::ear_detection::EarLandmarksModel::create(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  void *__p[2];
  char v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a1 + 23;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v5 = a1;
    if (!*((_BYTE *)a1 + 23))
      goto LABEL_11;
LABEL_6:
    v6 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v7;
    v19[1] = CFSTR("ear_landmarks_detector_mlmodel");
    v19[2] = CFSTR("ear_landmarks_fp16.espresso.net");
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v19, 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "pathWithComponents:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v9)
    {
      if ((objc_msgSend(v10, "fileExistsAtPath:", v9) & 1) != 0)
      {
        v12 = (uint64_t *)operator new(8uLL, MEMORY[0x24BEDB6B8]);
        if (v12)
        {
          v13 = v12;
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
          vg::ear_detection::EarLandmarksModel::EarLandmarksModel(v13, (uint64_t)__p);
          *a2 = v13;
          if (v18 < 0)
            operator delete(__p[0]);
          goto LABEL_21;
        }
      }
      else
      {
        VGLogEarLandmarksModel();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          vg::ear_detection::EarLandmarksModel::create((uint64_t)v9, v16);

      }
    }
    else
    {
      VGLogEarLandmarksModel();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        vg::ear_detection::EarLandmarksModel::create(v4, a1, v15);

    }
    *a2 = 0;
LABEL_21:

    return;
  }
  if (a1[1])
  {
    v5 = (uint64_t *)*a1;
    goto LABEL_6;
  }
LABEL_11:
  VGLogEarLandmarksModel();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    vg::ear_detection::EarLandmarksModel::create();

  *a2 = 0;
}

void sub_249CBC750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x24BD02D54](v17, MEMORY[0x24BEDB6B8]);

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarLandmarksModel::predictLandmarks(uint64_t **a1@<X0>, void *a2@<X1>, int32x4_t *a3@<X2>, _BYTE *a4@<X8>)
{
  vg::ear_detection::EarLandmarksModelImpl::predictLandmarks(*a1, a2, a3, a4);
}

float vg::ear_detection::EarLandmarksModel::Landmarks::getMeanLandmarkVisibility(vg::ear_detection::EarLandmarksModel::Landmarks *this)
{
  float v1;
  uint64_t i;

  v1 = 0.0;
  for (i = 32; i != 1208; i += 24)
    v1 = v1 + *(float *)((char *)this + i);
  return v1 / 49.0;
}

float vg::ear_detection::EarLandmarksModel::Landmarks::getVisibleLandmarksFraction(vg::ear_detection::EarLandmarksModel::Landmarks *this, float a2)
{
  unsigned int v2;
  uint64_t i;

  v2 = 0;
  for (i = 32; i != 1208; i += 24)
  {
    if (*(float *)((char *)this + i) > a2)
      ++v2;
  }
  return (float)v2 / 49.0;
}

__n128 vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox(vg::ear_detection::EarLandmarksModel::Landmarks *this, float a2)
{
  uint64_t v3;
  float *v4;
  _OWORD *v5;
  float64x2_t v6;
  float v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t i;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t j;
  float32x4_t v15;
  __int128 v16;
  __int128 v19;
  void *memptr;

  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x1A0uLL, 0x49090899uLL);
  v3 = 0;
  v4 = (float *)memptr;
  v5 = (_OWORD *)((char *)this + 16);
  do
  {
    v6 = *(float64x2_t *)v5;
    v5 = (_OWORD *)((char *)v5 + 24);
    *(float32x2_t *)&v4[v3] = vcvt_f32_f64(v6);
    v3 += 2;
  }
  while (v3 != 98);
  v7 = *v4;
  v8 = 2;
  v9.f32[0] = *v4;
  do
  {
    if (v4[v8] < v9.f32[0])
      v9.f32[0] = v4[v8];
    v8 += 2;
  }
  while (v8 != 98);
  for (i = 2; i != 98; i += 2)
  {
    if (v7 < v4[i])
      v7 = v4[i];
  }
  v11 = v4[1];
  v12 = 3;
  v13 = v11;
  do
  {
    if (v4[v12] < v13)
      v13 = v4[v12];
    v12 += 2;
  }
  while (v12 != 99);
  for (j = 3; j != 99; j += 2)
  {
    if (v11 < v4[j])
      v11 = v4[j];
  }
  *(float32x2_t *)v15.f32 = vmul_n_f32(vsub_f32((float32x2_t)__PAIR64__(LODWORD(v11), LODWORD(v7)), (float32x2_t)__PAIR64__(LODWORD(v13), v9.u32[0])), a2);
  v15.i64[1] = v15.i64[0];
  v9.f32[1] = v13;
  v9.i64[1] = __PAIR64__(LODWORD(v11), LODWORD(v7));
  *(_QWORD *)&v16 = vsubq_f32(v9, v15).u64[0];
  *((_QWORD *)&v16 + 1) = vaddq_f32(v9, v15).i64[1];
  v19 = v16;
  free(v4);
  return (__n128)v19;
}

uint64_t vg::ear_detection::EarLandmarksModel::estimateEarSide(double *a1)
{
  double v1;
  float v2;
  float v3;
  float v4;

  v1 = a1[1];
  v2 = a1[12] - *a1;
  v3 = a1[13] - v1;
  v4 = a1[39] - *a1;
  *(float *)&v1 = a1[40] - v1;
  return ((float)((float)(v2 * *(float *)&v1) - (float)(v3 * v4)) <= 0.0) | 0x100000000;
}

void ___ZL22VGLogEarLandmarksModelv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "EarLandmarksModel");
  v1 = (void *)VGLogEarLandmarksModel(void)::handle;
  VGLogEarLandmarksModel(void)::handle = (uint64_t)v0;

}

void sub_249CBC9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id **std::unique_ptr<vg::ear_detection::LandmarkModelPreProcessor>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x24BD02D60);
  }
  return result;
}

uint64_t std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD02D60);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251B22358, MEMORY[0x24BEDAB00]);
}

void sub_249CBCBB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::default_delete<vg::ear_detection::EarLandmarksModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::LandmarkModelPreProcessor>::reset[abi:ne180100]((id **)(a2 + 80), 0);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 64);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 48);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x24BD02D60);
  }
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void vg::ear_detection::EarLandmarksModelImpl::predictLandmarks()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to prep image for landmark model.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Invalid landmark network output.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to scale CG point.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Incorrect number of detections for landmarks points.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void vg::ear_detection::EarLandmarksModel::create()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Unable to create model with empty modelRootPath", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void vg::ear_detection::EarLandmarksModel::create(char *a1, _QWORD *a2, os_log_t log)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  __int16 v6;
  const __CFString *v7;
  __int16 v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*a1 >= 0)
    v3 = a2;
  else
    v3 = (_QWORD *)*a2;
  v4 = 136315650;
  v5 = v3;
  v6 = 2112;
  v7 = CFSTR("ear_landmarks_detector_mlmodel");
  v8 = 2112;
  v9 = CFSTR("ear_landmarks_fp16.espresso.net");
  _os_log_error_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, "Failed to create model path from modelRootPath: %s with directory: %@ and model file: %@", (uint8_t *)&v4, 0x20u);
}

void vg::ear_detection::EarLandmarksModel::create(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_249CAD000, a2, OS_LOG_TYPE_ERROR, "No model found at path: %@", (uint8_t *)&v2, 0xCu);
}

float32x2_t vg::ear_detection::getEarTriangleROIVertex(int a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3;
  float32x2_t v4;
  float v5;
  float32x2_t v6;
  float v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;

  v3 = vmul_f32(vadd_f32(a2, a3), (float32x2_t)0x3F0000003F000000);
  v4 = vsub_f32(a2, a3);
  v5 = sqrtf(vaddv_f32(vmul_f32(v4, v4)));
  v6 = vsub_f32((float32x2_t)vext_s8((int8x8_t)a2, (int8x8_t)a3, 4uLL), (float32x2_t)vext_s8((int8x8_t)a3, (int8x8_t)a2, 4uLL));
  v7 = -(float)(v5 * 0.5);
  if (a1 != 1)
    v7 = v5 * 0.5;
  v8 = vmul_f32(v6, v6);
  v8.i32[0] = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
  v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  return vmla_n_f32(v3, vmul_n_f32(v6, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]), v7);
}

__n128 vg::ear_detection::pointFromPixelOnDepthImage(void *a1, double a2, float a3, double a4, __n128 a5)
{
  IOSurface *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  NSObject *v10;
  float v11;
  __int128 v12;
  unsigned int v15;
  __int128 v18;
  id buf[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v15 = HIDWORD(a4);
  v5 = a1;
  v6 = -[IOSurface width](v5, "width");
  v7 = -[IOSurface height](v5, "height");
  if (*(float *)&a2 < 0.0
    || (*((float *)&a2 + 1) >= 0.0 ? (v8 = *(float *)&a2 < (float)v6) : (v8 = 0),
        v8 ? (v9 = *((float *)&a2 + 1) < (float)v7) : (v9 = 0),
        !v9))
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " Point outside of depthImage image size bounds. ", (uint8_t *)buf, 2u);
    }

  }
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, v5, 1);
  v11 = *(float *)(v20 + v21 * (unint64_t)*((float *)&a2 + 1) + v22 * (unint64_t)*(float *)&a2);
  *(float32x2_t *)&v12 = vdiv_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)&a2, (float32x2_t)a5.n128_u64[0]), v11), (float32x2_t)__PAIR64__(v15, LODWORD(a3)));
  *((_QWORD *)&v12 + 1) = __PAIR64__(a5.n128_u32[3], LODWORD(v11));
  v18 = v12;
  vg::IOSurfaceData::~IOSurfaceData(buf);

  return (__n128)v18;
}

void sub_249CBD70C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double vg::ear_detection::computePlaneNormal(_QWORD *a1)
{
  float32x4_t v1;
  int8x16_t v2;
  float32x2_t v3;
  float32x2_t v4;
  double result;

  MEMORY[0x24BD0306C]((uint64_t)(a1[1] - *a1) >> 4);
  v2 = (int8x16_t)vmulq_f32(v1, v1);
  *(float32x2_t *)v2.i8 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i32[0] = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  *(_QWORD *)&result = vmulq_n_f32(v1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]).u64[0];
  return result;
}

void vg::ear_detection::EarPCADetectorImpl::detect(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  IOSurface *v10;
  IOSurface *v11;
  float v12;
  NSObject *v13;
  double v14;
  int v15;
  int v16;
  double *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  float *v22;
  char *v23;
  float v24;
  float *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  float *v32;
  float v33;
  int v34;
  float v35;
  void *v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  float *v43;
  float v44;
  int v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int64x2_t v58;
  float64x2_t v59;
  IOSurface *v60;
  __n128 CompactBoundingBox;
  _OWORD v62[4];
  __int128 v63[5];
  uint64_t v64;
  int v65;
  int v66;
  char v67;
  float32x4_t v68;
  void *__p[2];
  void *v70[2];
  __int128 v71;
  uint8_t buf[4];
  double v73;
  __int16 v74;
  _QWORD v75[147];
  _BYTE v76[24];
  int32x4_t v77[2];
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v9 = BYTE4(a4);
  v10 = a2;
  v11 = a3;
  if (v9)
  {
    v12 = *(float *)&a4;
    if (fabsf(*(float *)&a4) < *(float *)(a1 + 44))
    {
      __VGLogSharedInstance();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(float *)(a1 + 44);
        *(_DWORD *)buf = 134218240;
        v73 = v12;
        v74 = 2048;
        *(double *)v75 = v14;
        _os_log_impl(&dword_249CAD000, v13, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of front facing view, yaw = %f, limit = %f ", buf, 0x16u);
      }

      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 176) = 0;
      v15 = 3;
      goto LABEL_69;
    }
  }
  vg::ear_detection::EarBoundingBoxModel::predictBoundingBox(*(vg::ear_detection::EarBoundingBoxModelImpl ***)a1, v10, (uint64_t)v77);
  if (!v78)
    goto LABEL_68;
  vg::ear_detection::EarLandmarksModel::predictLandmarks(*(uint64_t ***)(a1 + 8), v10, v77, buf);
  if (!v76[8])
    goto LABEL_68;
  v16 = vg::ear_detection::EarPCADetectorImpl::checkEarQuality((vg::ear_detection::EarPCADetectorImpl *)a1, v10, v11, (const vg::ear_detection::EarBoundingBoxModel::BoundingBox *)v77, (const vg::ear_detection::EarLandmarksModel::Landmarks *)buf);
  if (v16)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 176) = 0;
    *(_DWORD *)(a5 + 192) = v16;
    goto LABEL_70;
  }
  v17 = (double *)((char *)v75 + 2);
  v18 = vg::ear_detection::EarLandmarksModel::estimateEarSide((double *)((char *)v75 + 2));
  v19 = v18;
  v20 = BYTE4(v18);
  if (*(_BYTE *)(a1 + 48))
  {
    if (BYTE4(v18))
    {
      v21 = vg::ear_detection::EarSideSmoothPredictor::estimateSmoothEarSide(*(int64x2_t ***)(a1 + 24), v18);
      v20 = BYTE4(v21);
      v19 = v21;
      goto LABEL_13;
    }
LABEL_68:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 176) = 0;
    v15 = 1;
LABEL_69:
    *(_DWORD *)(a5 + 192) = v15;
    goto LABEL_70;
  }
LABEL_13:
  if (!v20)
    goto LABEL_68;
  v60 = v11;
  memset(&v63[1], 0, 64);
  LOBYTE(v66) = 0;
  v67 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v70 = 0u;
  v71 = 0u;
  LODWORD(v63[0]) = v19;
  std::vector<float>::reserve(__p, 0x31uLL);
  std::vector<float>::reserve(&v70[1], 0x31uLL);
  do
  {
    v23 = (char *)__p[1];
    v22 = (float *)v70[0];
    if (__p[1] >= v70[0])
    {
      v26 = (char *)__p[0];
      v27 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62)
        goto LABEL_71;
      v29 = (char *)v70[0] - (char *)__p[0];
      if (((char *)v70[0] - (char *)__p[0]) >> 1 > v28)
        v28 = v29 >> 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
        v30 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v70, v30);
        v26 = (char *)__p[0];
        v23 = (char *)__p[1];
      }
      else
      {
        v31 = 0;
      }
      v32 = (float *)&v31[4 * v27];
      v33 = *v17;
      *v32 = v33;
      v25 = v32 + 1;
      while (v23 != v26)
      {
        v34 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v32-- - 1) = v34;
      }
      v22 = (float *)&v31[4 * v30];
      __p[0] = v32;
      __p[1] = v25;
      v70[0] = v22;
      if (v26)
      {
        operator delete(v26);
        v22 = (float *)v70[0];
      }
    }
    else
    {
      v24 = *v17;
      *(float *)__p[1] = v24;
      v25 = (float *)(v23 + 4);
    }
    __p[1] = v25;
    if (v25 >= v22)
    {
      v37 = (float *)__p[0];
      v38 = ((char *)v25 - (char *)__p[0]) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        goto LABEL_71;
      v40 = (char *)v22 - (char *)__p[0];
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v70, v41);
        v37 = (float *)__p[0];
        v25 = (float *)__p[1];
      }
      else
      {
        v42 = 0;
      }
      v43 = (float *)&v42[4 * v38];
      v44 = v17[1];
      *v43 = v44;
      v36 = v43 + 1;
      while (v25 != v37)
      {
        v45 = *((_DWORD *)v25-- - 1);
        *((_DWORD *)v43-- - 1) = v45;
      }
      __p[0] = v43;
      __p[1] = v36;
      v70[0] = &v42[4 * v41];
      if (v37)
        operator delete(v37);
    }
    else
    {
      v35 = v17[1];
      *v25 = v35;
      v36 = v25 + 1;
    }
    __p[1] = v36;
    v46 = (char *)v71;
    if ((unint64_t)v71 >= *((_QWORD *)&v71 + 1))
    {
      v48 = (char *)v70[1];
      v49 = (uint64_t)(v71 - (unint64_t)v70[1]) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
LABEL_71:
        std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
      v51 = *((_QWORD *)&v71 + 1) - (unint64_t)v70[1];
      if ((uint64_t)(*((_QWORD *)&v71 + 1) - (unint64_t)v70[1]) >> 1 > v50)
        v50 = v51 >> 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
        v52 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v71 + 8, v52);
        v48 = (char *)v70[1];
        v46 = (char *)v71;
      }
      else
      {
        v53 = 0;
      }
      v54 = &v53[4 * v49];
      *(_DWORD *)v54 = *((_DWORD *)v17 + 4);
      v47 = v54 + 4;
      while (v46 != v48)
      {
        v55 = *((_DWORD *)v46 - 1);
        v46 -= 4;
        *((_DWORD *)v54 - 1) = v55;
        v54 -= 4;
      }
      v70[1] = v54;
      *(_QWORD *)&v71 = v47;
      *((_QWORD *)&v71 + 1) = &v53[4 * v52];
      if (v48)
        operator delete(v48);
    }
    else
    {
      *(_DWORD *)v71 = *((_DWORD *)v17 + 4);
      v47 = v46 + 4;
    }
    *(_QWORD *)&v71 = v47;
    v17 += 3;
  }
  while (v17 != (double *)v76);
  CompactBoundingBox = vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox((vg::ear_detection::EarLandmarksModel::Landmarks *)buf, 0.1);
  v56 = -[IOSurface width](v10, "width");
  v57 = -[IOSurface height](v10, "height");
  v58.i64[0] = v56;
  v58.i64[1] = v57;
  v59 = vcvtq_f64_s64(v58);
  v68 = vdivq_f32((float32x4_t)CompactBoundingBox, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v59), v59));
  memset(v62, 0, sizeof(v62));
  vg::ear_detection::EarLandmarksPCA::computePCA(*(const float ***)(a1 + 16), (double *)((char *)v75 + 2), v63[0], (float *)v62);
  v64 = *(_QWORD *)&v62[0];
  v65 = DWORD2(v62[0]);
  v66 = a4;
  v67 = BYTE4(a4);
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::__optional_destruct_base[abi:ne180100]<vg::ear_detection::EarPose&>(a5, v63);
  *(_DWORD *)(a5 + 192) = 0;
  v11 = v60;
  if (v70[1])
  {
    *(void **)&v71 = v70[1];
    operator delete(v70[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_70:

}

void sub_249CBDCA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::EarPCADetectorImpl::checkEarQuality(vg::ear_detection::EarPCADetectorImpl *this, IOSurface *a2, IOSurface *a3, const vg::ear_detection::EarBoundingBoxModel::BoundingBox *a4, const vg::ear_detection::EarLandmarksModel::Landmarks *a5)
{
  IOSurface *v9;
  IOSurface *v10;
  const IOSurface *v11;
  NSObject *v12;
  uint64_t v13;
  float MeanLandmarkVisibility;
  float v15;
  const char *v16;
  uint8_t *v17;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  __n128 CompactBoundingBox;
  uint8_t v32[16];
  uint8_t v33[16];
  __int16 v34;
  uint8_t v35[2];
  uint8_t v36[16];
  uint8_t v37[16];
  uint8_t buf[16];

  v9 = a2;
  v10 = a3;
  if (vg::ear_detection::isTooClose((vg::ear_detection *)v10, v11))
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too close. ", buf, 2u);
    }
    v13 = 6;
  }
  else if (*((float *)a4 + 6) >= *((float *)this + 8))
  {
    if (*((float *)a4 + 7) >= *((float *)this + 9))
    {
      MeanLandmarkVisibility = vg::ear_detection::EarLandmarksModel::Landmarks::getMeanLandmarkVisibility(a5);
      v15 = *((float *)this + 10);
      if (MeanLandmarkVisibility >= v15
        && vg::ear_detection::EarLandmarksModel::Landmarks::getVisibleLandmarksFraction(a5, v15) >= 0.5)
      {
        for (i = 704; i != 1136; i += 24)
        {
          if (*(float *)((char *)a5 + i) < *((float *)this + 10))
          {
            __VGLogSharedInstance();
            v12 = objc_claimAutoreleasedReturnValue();
            v13 = 2;
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
              goto LABEL_18;
            v34 = 0;
            v16 = " Frame rejected by pose estimator because of low inner landmarks visibility ";
            v17 = (uint8_t *)&v34;
            goto LABEL_17;
          }
        }
        v20 = -[IOSurface width](v10, "width");
        v21 = -[IOSurface width](v9, "width");
        v22 = -[IOSurface height](v10, "height");
        v23 = -[IOSurface height](v9, "height");
        v24 = (float)v20 / (float)v21;
        v25 = (float)v22 / (float)v23;
        *(float *)v26.i32 = v24 * *(float *)a4;
        *(float *)&v26.i32[1] = v25 * *((float *)a4 + 1);
        *(float *)&v26.i32[2] = v24 * *((float *)a4 + 2);
        *(float *)&v26.i32[3] = v25 * *((float *)a4 + 3);
        if (vg::ear_detection::isEarTooFar(v10, v26))
        {
          __VGLogSharedInstance();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v33 = 0;
            _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too far. ", v33, 2u);
          }
          v13 = 7;
        }
        else
        {
          CompactBoundingBox = vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox(a5, 0.1);
          v27 = -[IOSurface height](v9, "height");
          v28 = -[IOSurface width](v9, "width");
          if (CompactBoundingBox.n128_f32[0] >= 0.0)
          {
            v29 = (float)(v28 - 1);
            if (CompactBoundingBox.n128_f32[0] <= v29 && CompactBoundingBox.n128_f32[1] >= 0.0)
            {
              v30 = (float)(v27 - 1);
              if (CompactBoundingBox.n128_f32[1] <= v30
                && CompactBoundingBox.n128_f32[2] >= 0.0
                && CompactBoundingBox.n128_f32[2] <= v29
                && CompactBoundingBox.n128_f32[3] >= 0.0
                && CompactBoundingBox.n128_f32[3] <= v30)
              {
                v13 = 0;
                goto LABEL_19;
              }
            }
          }
          __VGLogSharedInstance();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v32 = 0;
            _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of box out of image bounds. ", v32, 2u);
          }
          v13 = 8;
        }
      }
      else
      {
        __VGLogSharedInstance();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = 2;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v35 = 0;
          v16 = " Frame rejected by pose estimator because of low mean or percentile confidence landmarks ";
          v17 = v35;
LABEL_17:
          _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, v16, v17, 2u);
        }
      }
    }
    else
    {
      __VGLogSharedInstance();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of ear occlusion. ", v36, 2u);
      }
      v13 = 4;
    }
  }
  else
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of ear not present. ", v37, 2u);
    }
    v13 = 1;
  }
LABEL_18:

LABEL_19:
  return v13;
}

void sub_249CBE0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPCADetector::detectPCA(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  vg::ear_detection::EarPCADetectorImpl::detect(*a1, a2, a3, a4, a5);
}

void vg::ear_detection::EarPCADetector::create(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  vg::ear_detection::EarBoundingBoxModel ***v8;
  __int16 v9;
  __int16 v10;
  uint64_t *v11;

  v4 = (uint64_t *)operator new();
  vg::ear_detection::EarPCADetector::EarPCADetector(v4, a1);
  v11 = v4;
  if (!*(_QWORD *)*v4)
  {
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v10 = 0;
    v6 = " Failed to initialize EarBoundingBoxModel ";
    v7 = (uint8_t *)&v10;
    goto LABEL_8;
  }
  if (*(_QWORD *)(*v4 + 8))
  {
    *a2 = v4;
    return;
  }
  __VGLogSharedInstance();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v9 = 0;
    v6 = " Failed to initialize EarLandmarksModel ";
    v7 = (uint8_t *)&v9;
LABEL_8:
    _os_log_impl(&dword_249CAD000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
  }
LABEL_9:

  *a2 = 0;
  v8 = (vg::ear_detection::EarBoundingBoxModel ***)v11;
  v11 = 0;
  if (v8)
    std::default_delete<vg::ear_detection::EarPCADetector>::operator()[abi:ne180100]((uint64_t)&v11, v8);
}

void sub_249CBE21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, vg::ear_detection::EarBoundingBoxModel ***a12)
{
  vg::ear_detection::EarBoundingBoxModel ***v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<vg::ear_detection::EarPCADetector>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t *vg::ear_detection::EarPCADetector::EarPCADetector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = operator new();
  vg::ear_detection::EarPCADetectorImpl::EarPCADetectorImpl(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_249CBE2B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x1020C40F2144117);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPCADetector::~EarPCADetector(vg::ear_detection::EarBoundingBoxModel ***this)
{
  vg::ear_detection::EarBoundingBoxModel **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  vg::ear_detection::EarBoundingBoxModel **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t vg::ear_detection::EarPCADetectorImpl::EarPCADetectorImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  int v6;
  vg::ear_detection::EarSideSmoothPredictor *v7;
  vg::ear_detection::EarSideSmoothPredictor *v8;
  uint64_t v10;
  int v11;
  vg::ear_detection::EarSideSmoothPredictor *v12;

  v4 = a2 + 3;
  vg::ear_detection::EarBoundingBoxModel::create(a2 + 3, (_QWORD *)a1);
  vg::ear_detection::EarLandmarksModel::create(v4, (uint64_t **)(a1 + 8));
  vg::ear_detection::EarLandmarksPCA::create((_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *(_OWORD *)a2;
  *((_QWORD *)&v5 + 1) = *(uint64_t *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *((unsigned __int8 *)a2 + 48);
  *(_BYTE *)(a1 + 48) = v6;
  if (v6)
  {
    v10 = *((unsigned int *)a2 + 13);
    v11 = *((_DWORD *)a2 + 14);
    vg::ear_detection::EarSideSmoothPredictor::create((uint64_t)&v10, &v12);
    v7 = v12;
    v12 = 0;
    std::unique_ptr<vg::ear_detection::EarSideSmoothPredictor>::reset[abi:ne180100]((vg::ear_detection::EarSideSmoothPredictor **)(a1 + 24), v7);
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      vg::ear_detection::EarSideSmoothPredictor::~EarSideSmoothPredictor(v8);
      MEMORY[0x24BD02D60]();
    }
  }
  return a1;
}

void sub_249CBE420(_Unwind_Exception *a1)
{
  vg::ear_detection::EarBoundingBoxModel **v1;
  vg::ear_detection::EarLandmarksModel **v2;
  vg::ear_detection::EarLandmarksPCA **v3;
  vg::ear_detection::EarSideSmoothPredictor **v4;

  std::unique_ptr<vg::ear_detection::EarSideSmoothPredictor>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<vg::ear_detection::EarLandmarksPCA>::reset[abi:ne180100](v3, 0);
  std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

vg::ear_detection::EarSideSmoothPredictor *std::unique_ptr<vg::ear_detection::EarSideSmoothPredictor>::reset[abi:ne180100](vg::ear_detection::EarSideSmoothPredictor **a1, vg::ear_detection::EarSideSmoothPredictor *a2)
{
  vg::ear_detection::EarSideSmoothPredictor *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarSideSmoothPredictor::~EarSideSmoothPredictor(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::ear_detection::EarLandmarksPCA *std::unique_ptr<vg::ear_detection::EarLandmarksPCA>::reset[abi:ne180100](vg::ear_detection::EarLandmarksPCA **a1, vg::ear_detection::EarLandmarksPCA *a2)
{
  vg::ear_detection::EarLandmarksPCA *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarLandmarksPCA::~EarLandmarksPCA(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void std::default_delete<vg::ear_detection::EarPCADetector>::operator()[abi:ne180100](uint64_t a1, vg::ear_detection::EarBoundingBoxModel ***a2)
{
  vg::ear_detection::EarBoundingBoxModel **v3;

  if (a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
      std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100](uint64_t a1, vg::ear_detection::EarBoundingBoxModel **a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::EarSideSmoothPredictor>::reset[abi:ne180100](a2 + 3, 0);
    std::unique_ptr<vg::ear_detection::EarLandmarksPCA>::reset[abi:ne180100](a2 + 2, 0);
    std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](a2 + 1, 0);
    std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](a2, 0);
    JUMPOUT(0x24BD02D60);
  }
}

void vg::ear_detection::EarLandmarksPCAImpl::create(_QWORD *a1@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  char *v9;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13[2];
  char v14;
  void *__p[2];
  int v16;
  char v17;
  void *__src;
  unsigned int v19;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_resourcePath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("ear_landmarks_pca/lm_pca_mean.bin"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_retainAutorelease(v4);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v5, "UTF8String"));
  vg::load1DVectorData<float>((uint64_t *)__p, (uint64_t)&__src);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 == 147)
  {
    objc_msgSend(MEMORY[0x24BDD1488], "vg_resourcePath");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingPathComponent:", CFSTR("ear_landmarks_pca/lm_pca_weights.bin"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_retainAutorelease(v7);
    std::string::basic_string[abi:ne180100]<0>(v13, (char *)objc_msgSend(v8, "UTF8String"));
    vg::load1DVectorData<float>((uint64_t *)v13, (uint64_t)__p);
    if (v14 < 0)
      operator delete(v13[0]);
    if (v16 == 2352)
    {
      v9 = (char *)operator new(0x270CuLL, MEMORY[0x24BEDB6B8]);
      v10 = v9;
      if (v9)
      {
        if (v19)
          memmove(v9, __src, 4 * v19);
        memmove(v10 + 588, __p[0], 0x24C0uLL);
      }
    }
    else
    {
      __VGLogSharedInstance();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13[0]) = 0;
        _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_ERROR, " Invalid input data size for PCA matrix. ", (uint8_t *)v13, 2u);
      }

      v10 = 0;
    }
    *a1 = v10;
    free(__p[0]);

  }
  else
  {
    __VGLogSharedInstance();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_ERROR, " Invalid input data size for PCA mean vector. ", (uint8_t *)__p, 2u);
    }

    *a1 = 0;
  }
  free(__src);

}

void sub_249CBE794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  void *v22;
  void *v23;

  free(a16);

  free(a22);
  _Unwind_Resume(a1);
}

void vg::load1DVectorData<float>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  size_t v7;
  void *v8;
  void *memptr;

  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithContentsOfFile:", v4);
  v6 = objc_msgSend(v5, "length");
  v7 = ((v6 & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v7 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
  v8 = memptr;
  *(_QWORD *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v6 >> 2;
  objc_msgSend(v5, "getBytes:length:", v8, v6 & 0xFFFFFFFFFFFFFFFCLL);

}

void sub_249CBE8EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  free(v3);

  _Unwind_Resume(a1);
}

char *vg::ear_detection::EarLandmarksPCAImpl::EarLandmarksPCAImpl(char *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
    memmove(__dst, *(const void **)a2, 4 * v5);
  v6 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v6)
    memmove(__dst + 588, *(const void **)a3, 4 * v6);
  return __dst;
}

{
  uint64_t v5;
  uint64_t v6;

  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
    memmove(__dst, *(const void **)a2, 4 * v5);
  v6 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v6)
    memmove(__dst + 588, *(const void **)a3, 4 * v6);
  return __dst;
}

void vg::ear_detection::EarLandmarksPCAImpl::computePCA(const float *a1@<X0>, double *a2@<X1>, int a3@<W2>, float *a4@<X8>)
{
  uint64_t v8;
  float64x2_t *v9;
  int v10;
  float v11;
  float v12;
  _OWORD __A[37];
  float v14;
  float v15;
  float __B;
  float __C;

  v8 = 0;
  v9 = (float64x2_t *)(a2 + 2);
  memset(__A, 0, 512);
  do
  {
    *((float32x2_t *)__A + v8) = vcvt_f32_f64(v9[-1]);
    v10 = LODWORD(v9->f64[0]);
    v9 = (float64x2_t *)((char *)v9 + 24);
    *((_DWORD *)&__A[24] + v8++ + 2) = v10;
  }
  while (v8 != 49);
  __C = 0.0;
  vDSP_meanv((const float *)__A, 2, &__C, 0x31uLL);
  __C = -__C;
  __B = 0.0;
  vDSP_meanv((const float *)__A + 1, 2, &__B, 0x31uLL);
  __B = -__B;
  vDSP_vsadd((const float *)__A, 2, &__C, (float *)__A, 2, 0x31uLL);
  vDSP_vsadd((const float *)__A + 1, 2, &__B, (float *)__A + 1, 2, 0x31uLL);
  v11 = sqrt((a2[7] - a2[34]) * (a2[7] - a2[34]) + (a2[6] - a2[33]) * (a2[6] - a2[33]));
  v15 = 1.0 / (float)(v11 + 0.000001);
  vDSP_vsmul((const float *)__A, 1, &v15, (float *)__A, 1, 0x62uLL);
  v12 = -1.0;
  if (a3 != 1)
    v12 = 1.0;
  v14 = v12;
  vDSP_vsmul((const float *)__A, 2, &v14, (float *)__A, 2, 0x31uLL);
  vDSP_vsub(a1, 1, (const float *)__A, 1, (float *)__A, 1, 0x93uLL);
  vDSP_mmul(a1 + 147, 1, (const float *)__A, 1, a4, 1, 0x10uLL, 1uLL, 0x93uLL);
}

_QWORD *vg::ear_detection::EarLandmarksPCA::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  vg::ear_detection::EarLandmarksPCAImpl::create(&v5);
  v3 = v5;
  if (v5)
  {
    result = operator new(8uLL, MEMORY[0x24BEDB6B8]);
    if (!result)
    {
      *a1 = 0;
      JUMPOUT(0x24BD02D60);
    }
    *result = v3;
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

_QWORD *vg::ear_detection::EarLandmarksPCA::EarLandmarksPCA(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void vg::ear_detection::EarLandmarksPCA::computePCA(const float **a1@<X0>, double *a2@<X1>, int a3@<W2>, float *a4@<X8>)
{
  vg::ear_detection::EarLandmarksPCAImpl::computePCA(*a1, a2, a3, a4);
}

void vg::ear_detection::EarLandmarksPCA::~EarLandmarksPCA(vg::ear_detection::EarLandmarksPCA *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x24BD02D60](v2, 0x1000C40DA03932ELL);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x24BD02D60](v2, 0x1000C40DA03932ELL);
}

double vg::ear_detection::makeLargeBox(uint32x2_t *a1, int32x4_t a2, double a3)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v7;
  double result;

  v3 = vsubq_f32((float32x4_t)vdupq_laneq_s32(a2, 2), (float32x4_t)a2).f32[0];
  v4 = vsubq_f32((float32x4_t)vdupq_laneq_s32(a2, 3), (float32x4_t)a2);
  *(float *)&a3 = *(float *)&a3 + 1.0;
  if (v3 < v4.f32[1])
    v3 = v4.f32[1];
  *(float *)&a3 = (float)(*(float *)&a3 * v3) * 0.5;
  *(float32x2_t *)v5.f32 = vmul_f32(vadd_f32(*(float32x2_t *)a2.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL)), (float32x2_t)0x3F0000003F000000);
  v5.i64[1] = v5.i64[0];
  _Q1 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v7.i64[0] = vsubq_f32(v5, _Q1).u64[0];
  v7.i64[1] = vaddq_f32(v5, _Q1).i64[1];
  __asm { FMOV            V1.2S, #-1.0 }
  *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_u32(*a1), *(float32x2_t *)_Q1.f32);
  v5.i64[1] = v5.i64[0];
  *(_QWORD *)&result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v7, v5), (int8x16_t)v5, (int8x16_t)v7), (int8x16_t)vcltzq_f32(v7)).u64[0];
  return result;
}

vg::ear_detection::LandmarkModelPreProcessor *vg::ear_detection::LandmarkModelPreProcessor::create@<X0>(vg::ear_detection::LandmarkModelPreProcessor *this@<X0>, vg::ear_detection::LandmarkModelPreProcessor **a2@<X8>)
{
  vg::ear_detection::LandmarkModelPreProcessor *result;
  vg::ear_detection::LandmarkModelPreProcessor *v5;

  result = (vg::ear_detection::LandmarkModelPreProcessor *)operator new(8uLL, MEMORY[0x24BEDB6B8]);
  v5 = result;
  if (result)
    result = vg::ear_detection::LandmarkModelPreProcessor::LandmarkModelPreProcessor(result, (uint64_t)this);
  *a2 = v5;
  return result;
}

void sub_249CBEDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D54](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

id vg::ear_detection::LandmarkModelPreProcessor::preProcessImage(id *a1, void *a2, float32x2_t *a3)
{
  int32x2_t v4;
  int32x2_t v5;
  unsigned int v7;
  unsigned int v8;

  v4 = (int32x2_t)vcvt_u32_f32(*a3);
  HIWORD(v8) = v4.i16[2];
  LOWORD(v8) = v4.i16[0];
  v5 = vadd_s32(vsub_s32((int32x2_t)vcvt_u32_f32(a3[1]), v4), (int32x2_t)0x100000001);
  HIWORD(v7) = v5.i16[2];
  LOWORD(v7) = v5.i16[0];
  objc_msgSend(a2, "vg_cropAndResizeYIntoSurface:origin:size:", *a1, v8, v7);
  return *a1;
}

float64x2_t vg::ear_detection::LandmarkModelPreProcessor::makeScaledPoint@<Q0>(float32x2_t *a1@<X1>, float64x2_t *a2@<X2>, uint64_t a3@<X8>)
{
  float64x2_t result;

  __asm { FMOV            V3.2S, #-1.0 }
  result = vmlaq_f64(vcvtq_f64_f32(*a1), vcvtq_f64_f32(vadd_f32(vsub_f32(a1[1], *a1), _D3)), *a2);
  *(float64x2_t *)a3 = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

vg::ear_detection::LandmarkModelPreProcessor *vg::ear_detection::LandmarkModelPreProcessor::LandmarkModelPreProcessor(vg::ear_detection::LandmarkModelPreProcessor *this, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[4];
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  v4 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v13[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v5;
  v13[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *MEMORY[0x24BDD8D60];
  v14[1] = v6;
  v14[2] = &unk_251B34AA8;
  v8 = *MEMORY[0x24BDD8D38];
  v13[2] = v7;
  v13[3] = v8;
  v14[3] = &unk_251B34AC0;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, v13, 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v4, "initWithProperties:", v9);
  v11 = *(void **)this;
  *(_QWORD *)this = v10;

  return this;
}

void sub_249CBEFCC(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *vg::ear_detection::EarBoundingBoxModelImpl::EarBoundingBoxModelImpl(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  E5RT::IOPort **v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *InputPorts;
  unsigned __int8 *v12;
  _QWORD *OutputPorts;
  unsigned __int8 *v14;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  E5RT::ExecutionStream *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v25;
  _BYTE buf[12];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)a1 + 1) = 0u;
  v4 = a1 + 2;
  *((_OWORD *)a1 + 2) = 0u;
  v5 = a1 + 4;
  *((_OWORD *)a1 + 3) = 0u;
  v6 = (E5RT::IOPort **)(a1 + 6);
  *((_OWORD *)a1 + 4) = 0u;
  v7 = a1 + 8;
  a1[10] = 0;
  *(_OWORD *)a1 = 0u;
  VGLogEarBoundingBoxModel();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl(&dword_249CAD000, v8, OS_LOG_TYPE_INFO, "Using model root path %s", buf, 0xCu);
  }

  vg::shared::VGE5RT::compileModel((uint64_t *)a2, 1, buf);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>(a1, (uint64_t *)buf);
  v10 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts((E5RT::ExecutionStreamOperation *)*a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "input_image");
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, buf);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100](v5, (uint64_t *)v12 + 5);
  if (v27 < 0)
    operator delete(*(void **)buf);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts((E5RT::ExecutionStreamOperation *)*a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "detection");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, buf);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100](v6, (uint64_t *)v14 + 5);
  if (v27 < 0)
    operator delete(*(void **)buf);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*v6);
  E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  E5RT::TensorDescriptor::AllocateMemory();
  std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(v7, (uint64_t *)buf);
  v16 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)a1[9];
  v25 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  E5RT::ExecutionStream::CreateExecutionStream(v20);
  std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(v4, (uint64_t *)buf);
  v23 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return a1;
}

void sub_249CBF2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100]((vg::ear_detection::BoxModelPreProcessor **)(v16 + 80), 0);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

id VGLogEarBoundingBoxModel(void)
{
  if (VGLogEarBoundingBoxModel(void)::onceToken != -1)
    dispatch_once(&VGLogEarBoundingBoxModel(void)::onceToken, &__block_literal_global_0);
  return (id)VGLogEarBoundingBoxModel(void)::handle;
}

void vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox(vg::ear_detection::EarBoundingBoxModelImpl *this@<X0>, IOSurface *a2@<X1>, uint64_t a3@<X8>)
{
  IOSurface *v5;
  vg::ear_detection::BoxModelPreProcessor *v6;
  vg::ear_detection::BoxModelPreProcessor **v7;
  _DWORD *v8;
  unsigned int v9;
  vg::ear_detection::BoxModelPreProcessor *v10;
  vg::ear_detection::BoxModelPreProcessor *v11;
  id v12;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v14;
  uint64_t TensorStrides;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  vg::ear_detection::BoxModelPreProcessor *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  vg::ear_detection::BoxModelPreProcessor *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  vg::shared::VGE5RT *v31;
  E5RT::OperandDescriptor *v32;
  IOSurface *v33;
  const E5RT::TensorDescriptor *v34;
  __int128 v35;
  vg::ear_detection::BoxModelPreProcessor *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  NSObject *v41;
  float32x4_t v42;
  vg::ear_detection::BoxModelPreProcessor *v43[4];
  std::__shared_weak_count *v44;
  vg::ear_detection::BoxModelPreProcessor *v45;
  std::__shared_weak_count *v46;
  void *__p;
  void *v48;
  _DWORD *v49;
  char v50;

  v5 = a2;
  v7 = (vg::ear_detection::BoxModelPreProcessor **)((char *)this + 80);
  v6 = (vg::ear_detection::BoxModelPreProcessor *)*((_QWORD *)this + 10);
  if (!v6)
  {
    v8 = operator new(4uLL);
    __p = v8;
    *v8 = 1056964608;
    v48 = v8 + 1;
    v49 = v8 + 1;
    v9 = -[IOSurface width](v5, "width");
    v42.i64[0] = __PAIR64__(-[IOSurface height](v5, "height"), v9);
    vg::ear_detection::BoxModelPreProcessor::create((uint32x2_t *)&v42, (uint64_t *)&__p, 400, v43);
    v10 = v43[0];
    v43[0] = 0;
    std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100]((vg::ear_detection::BoxModelPreProcessor **)this + 10, v10);
    v11 = v43[0];
    v43[0] = 0;
    if (v11)
    {
      vg::ear_detection::BoxModelPreProcessor::~BoxModelPreProcessor(v11);
      MEMORY[0x24BD02D60]();
    }
    if (__p)
    {
      v48 = __p;
      operator delete(__p);
    }
    v6 = *v7;
  }
  vg::ear_detection::BoxModelPreProcessor::preProcessImage(v6, v5, (uint64_t)&__p);
  if (!v50)
  {
    VGLogEarBoundingBoxModel();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox();
    goto LABEL_18;
  }
  if (vg::ear_detection::BoxModelPreProcessor::getCropCount(*v7) != 1)
  {
    VGLogEarBoundingBoxModel();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox();
LABEL_18:

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    goto LABEL_47;
  }
  if (!v50)
    std::__throw_bad_optional_access[abi:ne180100]();
  v12 = *(id *)__p;
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)this + 4));
  v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v14);
  v16 = *(_QWORD *)(*(_QWORD *)(TensorStrides + 8) - 16);
  if (v16 != objc_msgSend(v12, "bytesPerRow"))
  {
    objc_msgSend(v12, "vg_convertSurfaceStride:", *(_QWORD *)(*(_QWORD *)(TensorStrides + 8) - 16));
    v17 = objc_claimAutoreleasedReturnValue();

    v12 = (id)v17;
  }
  E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
  v45 = v43[0];
  if (v43[0])
  {
    v18 = (std::__shared_weak_count *)operator new();
    v19 = v43[0];
    v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B22DB0;
    v18->__shared_owners_ = 0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
  }
  else
  {
    v18 = 0;
  }
  v46 = v18;
  v43[0] = 0;
  E5RT::IOPort::BindMemoryObject();
  v21 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v43[0];
  v43[0] = 0;
  if (v24)
    (*(void (**)(vg::ear_detection::BoxModelPreProcessor *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v43[3] = *(vg::ear_detection::BoxModelPreProcessor **)this;
  v44 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  E5RT::ExecutionStream::EncodeOperation();
  v28 = v44;
  if (v44)
  {
    v29 = (unint64_t *)&v44->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*((E5RT::ExecutionStream **)this + 2));
  E5RT::ExecutionStream::ResetStream(*((E5RT::ExecutionStream **)this + 2));
  E5RT::BufferObject::GetHandle<__IOSurface *>();
  v31 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
  if (v31)
  {
    v32 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)this + 6));
    v33 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v32);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v31, v33, v34, (uint64_t)v43);
    v42 = *(float32x4_t *)v43[0];
    *(double *)&v35 = vg::ear_detection::BoxModelPreProcessor::makeScaledBox((uint64_t)*v7, &v42, 0);
    v36 = v43[0];
    v37 = *((float *)v43[0] + 4);
    v38 = 0.0;
    v39 = 0.0;
    if (v37 >= 0.0)
    {
      v39 = 1.0;
      if (v37 <= 1.0)
        v39 = *((float *)v43[0] + 4);
    }
    v40 = *((float *)v43[0] + 5);
    if (v40 >= 0.0)
    {
      v38 = 1.0;
      if (v40 <= 1.0)
        v38 = *((float *)v43[0] + 5);
    }
    *(_OWORD *)a3 = v35;
    *(_QWORD *)(a3 + 16) = 0x3F8000003F800000;
    *(float *)(a3 + 24) = v39;
    *(float *)(a3 + 28) = v38;
    *(_BYTE *)(a3 + 32) = 1;
    free(v36);
  }
  else
  {
    VGLogEarBoundingBoxModel();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox();

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }

LABEL_47:
  if (v50)
  {
    v43[0] = (vg::ear_detection::BoxModelPreProcessor *)&__p;
    std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
  }

}

void sub_249CBF7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **p_p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  free(p_p);

  if (a22)
  {
    p_p = &__p;
    std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }

  _Unwind_Resume(a1);
}

_QWORD *vg::ear_detection::EarBoundingBoxModel::EarBoundingBoxModel(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  vg::ear_detection::EarBoundingBoxModelImpl::EarBoundingBoxModelImpl(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_249CBF8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x20C40D3FB9507);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarBoundingBoxModel::~EarBoundingBoxModel(vg::ear_detection::EarBoundingBoxModel *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarBoundingBoxModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::ear_detection::EarBoundingBoxModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::ear_detection::EarBoundingBoxModel::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  void *__p[2];
  char v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a1 + 23;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v5 = a1;
    if (!*((_BYTE *)a1 + 23))
      goto LABEL_11;
LABEL_6:
    v6 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v7;
    v19[1] = CFSTR("ear_bbox_detector_mlmodel");
    v19[2] = CFSTR("ear_box_fp16.espresso.net");
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v19, 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "pathWithComponents:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v9)
    {
      if ((objc_msgSend(v10, "fileExistsAtPath:", v9) & 1) != 0)
      {
        v12 = operator new(8uLL, MEMORY[0x24BEDB6B8]);
        if (v12)
        {
          v13 = v12;
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
          vg::ear_detection::EarBoundingBoxModel::EarBoundingBoxModel(v13, (uint64_t)__p);
          *a2 = v13;
          if (v18 < 0)
            operator delete(__p[0]);
          goto LABEL_21;
        }
      }
      else
      {
        VGLogEarBoundingBoxModel();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          vg::ear_detection::EarLandmarksModel::create((uint64_t)v9, v16);

      }
    }
    else
    {
      VGLogEarBoundingBoxModel();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        vg::ear_detection::EarBoundingBoxModel::create(v4, a1, v15);

    }
    *a2 = 0;
LABEL_21:

    return;
  }
  if (a1[1])
  {
    v5 = (uint64_t *)*a1;
    goto LABEL_6;
  }
LABEL_11:
  VGLogEarBoundingBoxModel();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    vg::ear_detection::EarLandmarksModel::create();

  *a2 = 0;
}

void sub_249CBFB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x24BD02D54](v17, MEMORY[0x24BEDB6B8]);

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarBoundingBoxModel::predictBoundingBox(vg::ear_detection::EarBoundingBoxModelImpl **this@<X0>, IOSurface *a2@<X1>, uint64_t a3@<X8>)
{
  vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox(*this, a2, a3);
}

float vg::ear_detection::EarBoundingBoxModel::BoundingBox::getMeanVisibility(vg::ear_detection::EarBoundingBoxModel::BoundingBox *this)
{
  return (float)(*((float *)this + 4) + *((float *)this + 5)) * 0.5;
}

void ___ZL24VGLogEarBoundingBoxModelv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "EarBoundingBoxModel");
  v1 = (void *)VGLogEarBoundingBoxModel(void)::handle;
  VGLogEarBoundingBoxModel(void)::handle = (uint64_t)v0;

}

void sub_249CBFC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

vg::ear_detection::BoxModelPreProcessor *std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100](vg::ear_detection::BoxModelPreProcessor **a1, vg::ear_detection::BoxModelPreProcessor *a2)
{
  vg::ear_detection::BoxModelPreProcessor *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::BoxModelPreProcessor::~BoxModelPreProcessor(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void vg::ear_detection::BoxModelPreProcessor::~BoxModelPreProcessor(vg::ear_detection::BoxModelPreProcessor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v6 = (void **)((char *)this + 104);
  std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

void std::default_delete<vg::ear_detection::EarBoundingBoxModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100]((vg::ear_detection::BoxModelPreProcessor **)(a2 + 80), 0);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 64);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 48);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x24BD02D60);
  }
}

void vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to prep image.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Invalid box network output.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Single crop expected.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void vg::ear_detection::EarBoundingBoxModel::create(char *a1, _QWORD *a2, os_log_t log)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  __int16 v6;
  const __CFString *v7;
  __int16 v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*a1 >= 0)
    v3 = a2;
  else
    v3 = (_QWORD *)*a2;
  v4 = 136315650;
  v5 = v3;
  v6 = 2112;
  v7 = CFSTR("ear_bbox_detector_mlmodel");
  v8 = 2112;
  v9 = CFSTR("ear_box_fp16.espresso.net");
  _os_log_error_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, "Failed to create model path from modelRootPath: %s with directory: %@ and model file: %@", (uint8_t *)&v4, 0x20u);
}

float vg::frame_selection::VGExpressionFilter::remap(vg::frame_selection::VGExpressionFilter *this, float a2, float a3, float a4)
{
  float v4;
  float v5;
  float result;
  BOOL v7;

  if (a4 >= a2)
    v4 = a2;
  else
    v4 = a4;
  if (a2 >= a3)
    v5 = v4;
  else
    v5 = a3;
  if (a3 < a4)
    return (float)(v5 - a3) / (float)(a4 - a3);
  if (a3 != a4)
    return 0.0;
  v7 = v5 < a4;
  result = 1.0;
  if (v7)
    return 0.0;
  return result;
}

void sub_249CC0128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CC0198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VGFaceCapture;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_249CC0458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  id *v26;
  void *v27;
  uint64_t v28;

  objc_destroyWeak(v26);
  objc_destroyWeak((id *)(v28 - 104));

  _Unwind_Resume(a1);
}

void sub_249CC06E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CC083C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CC0A84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void std::default_delete<vg::frame_selection::metrics::Data>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;

  if (a2)
  {
    for (i = 0; i != -48; i -= 24)
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a2 + i + 464, *(_QWORD **)(a2 + i + 472));
    for (j = 0; j != -48; j -= 24)
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a2 + j + 376, *(_QWORD **)(a2 + j + 384));
    JUMPOUT(0x24BD02D60);
  }
}

void std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_249CC0DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_249CC0ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_249CC0FF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CC1110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC12D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC138C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC145C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC152C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC16C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC18CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC19A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1B24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1BD4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x24BD02D60](v2, 0x10A1C4037ACD87BLL);

  _Unwind_Resume(a1);
}

void sub_249CC1D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC1F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC2018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC20E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC23D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CC26F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CC297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CC2B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CC2D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CC2EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC31E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249CC3B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  void *v23;
  void *v24;

  a23 = (void **)&a19;
  std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](&a23);

  _Unwind_Resume(a1);
}

void sub_249CC4098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  a23 = (void **)&a15;
  std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](&a23);
  a23 = (void **)(v25 - 128);
  std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](&a23);

  _Unwind_Resume(a1);
}

void sub_249CC43B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __74__VGFrameSelector_applyVisionFilters_bestTargetPoseData_frameTimestampMS___block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGFrameSelector(void)
{
  if (VGLogVGFrameSelector(void)::onceToken != -1)
    dispatch_once(&VGLogVGFrameSelector(void)::onceToken, &__block_literal_global_592);
  return (id)VGLogVGFrameSelector(void)::handle;
}

void sub_249CC4748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __86__VGFrameSelector_applyVisionFaceLandmarksFilter_bestTargetPoseData_frameTimestampMS___block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CC47B0()
{
  JUMPOUT(0x249CC47A4);
}

void sub_249CC4D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CC50AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(void))
{
  void *v12;
  void *v13;

  a12[2]();
  _Unwind_Resume(a1);
}

void sub_249CC535C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CC5E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(void), uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  void *a72;
  void *v72;
  void *v73;
  uint64_t v74;

  a15[2]();
  __93__VGFrameSelector_processHeadPose_captureData_trackingData_validDataBounds_frameTimestampMS___block_invoke();

  _Unwind_Resume(a1);
}

void sub_249CC614C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CC665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_249CC70DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;

  __82__VGFrameSelector_processCaptureData_trackingData_framePose_validDataFrameBounds___block_invoke();
  _Unwind_Resume(a1);
}

void vg::frame_selection::frameRejectionReasonToString(int a1@<W0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  char *v5;

  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString, "kNone");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[3], "kBadState");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[6], "kNoTrackingData");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[9], "kNoTrackedFace");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[12], "kTrackedFaceIdentifierChanged");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[15], "kLowContrast");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[18], "kMotionBlurDetected");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[21], "kMotionBlurTemporalStateInit");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[24], "kLowTrackingConfidence");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[27], "kFaceLandmarksNotDetected");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[30], "kWarmupFrameFiltering");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[33], "kFaceLeftOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[36], "kFaceRightOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[39], "kFaceTopOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[42], "kFaceBottomOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[45], "kOutOfRange");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[48], "kExpressionOtherFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[51], "kExpressionIsEyesNeutralOpenFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[54], "kExpressionIsNeutralFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[57], "kExpressionIsEyesForwardFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[60], "kExpressionIsAlmostNeutralFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[63], "kExpressionIsMouthOpenFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[66], "kExpressionIsSmileClosedMouthFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[69], "kLowerScore");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[72], "kBadAlignment");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[75], "kLowerAlignment");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[78], "kDistanceFilterFaceTooClose");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[81], "kDistanceFilterFaceTooFar");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[84], "kExpressionIsBlink");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[87], "kBodyPoseGuidanceBodyJointsNotVisible");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[90], "kBodyPoseGuidanceHeadNotUpright");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[93], "kBodyPoseGuidanceShouldersNotStraight");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[96], "kBodyPoseGuidanceLeftElbowTooHigh");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[99], "kBodyPoseGuidanceLeftElbowTooLow");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[102], "kBodyPoseGuidanceRightElbowTooHigh");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[105], "kBodyPoseGuidanceRightElbowTooLow");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[108], "kBodyPoseGuidanceShoulderHeightAsymmetric");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[111], "kBodyPoseGuidanceLeftShoulderTooFarBehind");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[114], "kBodyPoseGuidanceLeftShoulderTooFarInFront");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[117], "kBodyPoseGuidanceRightShoulderTooFarBehind");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[120], "kBodyPoseGuidanceRightShoulderTooFarInFront");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[123], "kBodyPoseGuidanceLowerAggregatedScore");
  }
  v5 = (char *)&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[3 * a1];
  if (v5[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
  }
}

void sub_249CC7690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_249CC7788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CC789C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CC7928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CC7988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<TargetPoseData>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TargetPoseData>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 112 * ((((112 * a2 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_249CC7A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<TargetPoseData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TargetPoseData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TargetPoseData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a2);
}

void std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 14;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<TargetPoseData>::__assign_with_size[abi:ne180100]<TargetPoseData*,TargetPoseData*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v8 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4) >= a4)
  {
    if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v8) >> 4) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>((uint64_t)&v17, a2, a3, v8);
      v13 = v12;
      v14 = a1[1];
      if (v14 != v12)
      {
        do
        {
          v15 = v14 - 112;

          v14 = v15;
        }
        while (v15 != v13);
      }
      a1[1] = v13;
    }
    else
    {
      v11 = a2 + 16 * ((a1[1] - v8) >> 4);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>((uint64_t)&v16, a2, v11, v8);
      std::vector<TargetPoseData>::__construct_at_end<TargetPoseData*,TargetPoseData*>(a1, v11, a3);
    }
  }
  else
  {
    std::vector<TargetPoseData>::__vdeallocate((void **)a1);
    if (a4 > 0x249249249249249)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
    if (v9 <= a4)
      v9 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
      v10 = 0x249249249249249;
    else
      v10 = v9;
    std::vector<TargetPoseData>::__vallocate[abi:ne180100](a1, v10);
    std::vector<TargetPoseData>::__construct_at_end<TargetPoseData*,TargetPoseData*>(a1, a2, a3);
  }
}

_QWORD *std::vector<TargetPoseData>::__construct_at_end<TargetPoseData*,TargetPoseData*>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      result = *(id *)(v6 + 16);
      *(_QWORD *)(v4 + 16) = result;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 32);
      v8 = *(_OWORD *)(v6 + 64);
      v7 = *(_OWORD *)(v6 + 80);
      v9 = *(_OWORD *)(v6 + 48);
      *(_DWORD *)(v4 + 96) = *(_DWORD *)(v6 + 96);
      *(_OWORD *)(v4 + 64) = v8;
      *(_OWORD *)(v4 + 80) = v7;
      *(_OWORD *)(v4 + 48) = v9;
      v4 += 112;
      v6 += 112;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

void std::vector<TargetPoseData>::__vdeallocate(void **a1)
{
  id *v1;
  id *v3;
  void *v4;
  id *v5;

  v1 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 14;

        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    objc_storeStrong((id *)(a4 + 16), *(id *)(v5 + 16));
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
    v7 = *(_OWORD *)(v5 + 48);
    v8 = *(_OWORD *)(v5 + 64);
    v9 = *(_OWORD *)(v5 + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(v5 + 96);
    *(_OWORD *)(a4 + 64) = v8;
    *(_OWORD *)(a4 + 80) = v9;
    *(_OWORD *)(a4 + 48) = v7;
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::vector<TargetPoseData>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TargetPoseData*>>,std::move_iterator<std::__wrap_iter<TargetPoseData*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v35[5];

  v5 = a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) < a5)
  {
    v13 = *a1;
    v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 4);
    if (v14 > 0x249249249249249)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 4);
    v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 4);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 4);
    if (v16 >= 0x124924924924924)
      v18 = 0x249249249249249;
    else
      v18 = v17;
    v35[4] = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TargetPoseData>>(v9, v18);
    else
      v19 = 0;
    v28 = &v19[112 * v15];
    v35[0] = v19;
    v35[1] = v28;
    v35[3] = &v19[112 * v18];
    v29 = &v28[112 * a5];
    do
    {
      *(_OWORD *)v28 = *(_OWORD *)a3;
      v30 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *((_QWORD *)v28 + 2) = v30;
      *((_OWORD *)v28 + 2) = *(_OWORD *)(a3 + 32);
      v31 = *(_OWORD *)(a3 + 48);
      v32 = *(_OWORD *)(a3 + 64);
      v33 = *(_OWORD *)(a3 + 80);
      *((_DWORD *)v28 + 24) = *(_DWORD *)(a3 + 96);
      *((_OWORD *)v28 + 4) = v32;
      *((_OWORD *)v28 + 5) = v33;
      *((_OWORD *)v28 + 3) = v31;
      v28 += 112;
      a3 += 112;
    }
    while (v28 != v29);
    v35[2] = v29;
    v5 = std::vector<TargetPoseData>::__swap_out_circular_buffer(a1, v35, v5);
    std::__split_buffer<TargetPoseData>::~__split_buffer((uint64_t)v35);
    return v5;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 4) >= a5)
  {
    v20 = a3 + 112 * a5;
LABEL_18:
    std::vector<TargetPoseData>::__move_range((uint64_t)a1, a2, v12, a2 + 112 * a5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<TargetPoseData *>>,std::move_iterator<std::__wrap_iter<TargetPoseData *>>,TargetPoseData *>((uint64_t)v35, a3, v20, v5);
    return v5;
  }
  v20 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
  v21 = *(_QWORD *)(v9 - 8);
  if (v20 != a4)
  {
    v22 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
    v23 = *(_QWORD *)(v9 - 8);
    do
    {
      *(_OWORD *)v23 = *(_OWORD *)v22;
      v24 = *(_QWORD *)(v22 + 16);
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v23 + 16) = v24;
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(v22 + 32);
      v25 = *(_OWORD *)(v22 + 48);
      v26 = *(_OWORD *)(v22 + 64);
      v27 = *(_OWORD *)(v22 + 80);
      *(_DWORD *)(v23 + 96) = *(_DWORD *)(v22 + 96);
      *(_OWORD *)(v23 + 64) = v26;
      *(_OWORD *)(v23 + 80) = v27;
      *(_OWORD *)(v23 + 48) = v25;
      v21 += 112;
      v22 += 112;
      v23 += 112;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_249CC81A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TargetPoseData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TargetPoseData>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v15;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v10 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v8 + 16) = v10;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      v11 = *(_OWORD *)(v9 + 48);
      v12 = *(_OWORD *)(v9 + 64);
      v13 = *(_OWORD *)(v9 + 80);
      *(_DWORD *)(v8 + 96) = *(_DWORD *)(v9 + 96);
      *(_OWORD *)(v8 + 64) = v12;
      *(_OWORD *)(v8 + 80) = v13;
      *(_OWORD *)(v8 + 48) = v11;
      v8 += 112;
      v9 += 112;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>((uint64_t)&v15, a2, v7, v6);
}

uint64_t std::vector<TargetPoseData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = 0;
    do
    {
      v8 = result + v7;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 + v7 - 112);
      v9 = *(_QWORD *)(a3 + v7 - 96);
      *(_QWORD *)(a3 + v7 - 96) = 0;
      *(_QWORD *)(v8 - 96) = v9;
      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      v10 = *(_OWORD *)(a3 + v7 - 64);
      v11 = *(_OWORD *)(a3 + v7 - 48);
      v12 = *(_OWORD *)(a3 + v7 - 32);
      *(_DWORD *)(v8 - 16) = *(_DWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 48) = v11;
      *(_OWORD *)(v8 - 32) = v12;
      *(_OWORD *)(v8 - 64) = v10;
      v7 -= 112;
    }
    while (a3 + v7 != v5);
    v6 = result + v7;
  }
  a2[1] = v6;
  v13 = a1[1];
  v14 = a2[2];
  if (v13 != a3)
  {
    do
    {
      *(_OWORD *)v14 = *(_OWORD *)a3;
      v15 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v14 + 16) = v15;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 48);
      v17 = *(_OWORD *)(a3 + 64);
      v18 = *(_OWORD *)(a3 + 80);
      *(_DWORD *)(v14 + 96) = *(_DWORD *)(a3 + 96);
      *(_OWORD *)(v14 + 64) = v17;
      *(_OWORD *)(v14 + 80) = v18;
      *(_OWORD *)(v14 + 48) = v16;
      v14 += 112;
      a3 += 112;
    }
    while (a3 != v13);
    v6 = a2[1];
  }
  a2[2] = v14;
  v19 = *a1;
  *a1 = v6;
  a2[1] = v19;
  v20 = a1[1];
  a1[1] = a2[2];
  a2[2] = v20;
  v21 = a1[2];
  a1[2] = a2[3];
  a2[3] = v21;
  *a2 = a2[1];
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 + v7 - 112);
      v9 = *(_QWORD *)(a3 + v7 - 96);
      *(_QWORD *)(a3 + v7 - 96) = 0;
      v10 = *(void **)(a4 + v7 - 96);
      *(_QWORD *)(v8 - 96) = v9;

      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      v11 = *(_OWORD *)(a3 + v7 - 64);
      v12 = *(_OWORD *)(a3 + v7 - 48);
      v13 = *(_OWORD *)(a3 + v7 - 32);
      *(_DWORD *)(v8 - 16) = *(_DWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 48) = v12;
      *(_OWORD *)(v8 - 32) = v13;
      *(_OWORD *)(v8 - 64) = v11;
      v7 -= 112;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<TargetPoseData *>>,std::move_iterator<std::__wrap_iter<TargetPoseData *>>,TargetPoseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    v7 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = 0;
    v8 = *(void **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v7;

    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
    v9 = *(_OWORD *)(v5 + 48);
    v10 = *(_OWORD *)(v5 + 64);
    v11 = *(_OWORD *)(v5 + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(v5 + 96);
    *(_OWORD *)(a4 + 64) = v10;
    *(_OWORD *)(a4 + 80) = v11;
    *(_OWORD *)(a4 + 48) = v9;
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__split_buffer<TargetPoseData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZL20VGLogVGFrameSelectorv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGFrameSelector");
  v1 = (void *)VGLogVGFrameSelector(void)::handle;
  VGLogVGFrameSelector(void)::handle = (uint64_t)v0;

}

void sub_249CC8524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void vg::frame_selection::frameRejectionReasonToString(_QWORD *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0)
      operator delete((void *)*(a1 - 3));
    a1 -= 3;
  }
  while (a1 != vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString);
}

void sub_249CC95D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249CC99AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

void sub_249CC9BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 136) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_249CCA038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id VGLogVGEarPCASelectionState(void)
{
  if (VGLogVGEarPCASelectionState(void)::onceToken != -1)
    dispatch_once(&VGLogVGEarPCASelectionState(void)::onceToken, &__block_literal_global_2);
  return (id)VGLogVGEarPCASelectionState(void)::handle;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_249CCA1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<EarFrame>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EarFrame>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<EarFrame>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 192 * v6;
    std::vector<EarFrame>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_249CCA26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_249CCA484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CCA8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_249CCAFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;

  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&a59);
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x320]);

  _Unwind_Resume(a1);
}

void `anonymous namespace'::EarFrameGroup::addFrame(_anonymous_namespace_::EarFrameGroup *this, const EarFrame *a2)
{
  uint64_t v4;
  float v5;
  uint64_t i;
  float *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float v12;
  float v13;
  uint64_t j;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  void *v24;
  void *v25;
  uint64_t k;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE *v33;
  void *v34;
  void *v35;
  const EarFrame *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float v43[144];
  _BYTE v44[592];

  v4 = 0;
  while (*(_QWORD *)((char *)this + v4))
  {
    v4 += 192;
    if ((_DWORD)v4 == 576)
    {
      v5 = *((float *)this + 144);
      std::array<EarFrame,3ul>::array((uint64_t)v44, (uint64_t)this);
      for (i = 0; i != 3; ++i)
      {
        std::array<EarFrame,3ul>::array((uint64_t)v43, (uint64_t)this);
        v7 = &v43[48 * i];
        objc_storeStrong((id *)v7, a2->captureData);
        v8 = *(_OWORD *)&a2[2].captureData;
        *((_OWORD *)v7 + 5) = *(_OWORD *)&a2[1].pose.yawAngle;
        *((_OWORD *)v7 + 6) = v8;
        v9 = *(_OWORD *)&a2[2].pose.yawAngle;
        *((_OWORD *)v7 + 7) = *(_OWORD *)&a2[2].pose.lmPCA.__elems_[1];
        *((_OWORD *)v7 + 8) = v9;
        v10 = *(_OWORD *)&a2->pose.yawAngle;
        *((_OWORD *)v7 + 1) = *(_OWORD *)&a2->pose.lmPCA.__elems_[1];
        *((_OWORD *)v7 + 2) = v10;
        v11 = *(_OWORD *)&a2[1].pose.lmPCA.__elems_[1];
        *((_OWORD *)v7 + 3) = *(_OWORD *)&a2[1].captureData;
        *((_OWORD *)v7 + 4) = v11;
        if (v7 != (float *)a2)
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v43[48 * i + 36], (char *)a2[3].captureData, *(_QWORD *)&a2[3].pose.side, (uint64_t)(*(_QWORD *)&a2[3].pose.side - (unint64_t)a2[3].captureData) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v43[48 * i + 42], *(char **)&a2[3].pose.faceYawAngle, *(_QWORD *)&a2[3].pose.yawAngle, (uint64_t)(*(_QWORD *)&a2[3].pose.yawAngle - *(_QWORD *)&a2[3].pose.faceYawAngle) >> 2);
        }
        if (v12 > v5)
        {
          v13 = v12;
          for (j = 0; j != 144; j += 48)
          {
            v15 = &v44[j * 4];
            objc_storeStrong((id *)&v44[j * 4], *(id *)&v43[j]);
            v16 = *(_OWORD *)&v43[j + 24];
            v15[5] = *(_OWORD *)&v43[j + 20];
            v15[6] = v16;
            v17 = *(_OWORD *)&v43[j + 32];
            v15[7] = *(_OWORD *)&v43[j + 28];
            v15[8] = v17;
            v18 = *(_OWORD *)&v43[j + 8];
            v15[1] = *(_OWORD *)&v43[j + 4];
            v15[2] = v18;
            v19 = *(_OWORD *)&v43[j + 16];
            v20 = *(char **)&v43[j + 36];
            v21 = *(_QWORD *)&v43[j + 38];
            v15[3] = *(_OWORD *)&v43[j + 12];
            v15[4] = v19;
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v44[j * 4 + 144], v20, v21, (v21 - (uint64_t)v20) >> 2);
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v44[j * 4 + 168], *(char **)&v43[j + 42], *(_QWORD *)&v43[j + 44], (uint64_t)(*(_QWORD *)&v43[j + 44] - *(_QWORD *)&v43[j + 42]) >> 2);
          }
          v5 = v13;
        }
        v22 = 144;
        do
        {
          v23 = &v43[v22];
          v24 = *(void **)&v43[v22 - 6];
          if (v24)
          {
            *((_QWORD *)v23 - 2) = v24;
            operator delete(v24);
          }
          v25 = (void *)*((_QWORD *)v23 - 6);
          if (v25)
          {
            *(_QWORD *)&v43[v22 - 10] = v25;
            operator delete(v25);
          }

          v22 -= 48;
        }
        while (v22 * 4);
      }
      for (k = 0; k != 576; k += 192)
      {
        v27 = (char *)this + k;
        objc_storeStrong((id *)((char *)this + k), *(id *)&v44[k]);
        v28 = *(_OWORD *)&v44[k + 96];
        *((_OWORD *)v27 + 5) = *(_OWORD *)&v44[k + 80];
        *((_OWORD *)v27 + 6) = v28;
        v29 = *(_OWORD *)&v44[k + 128];
        *((_OWORD *)v27 + 7) = *(_OWORD *)&v44[k + 112];
        *((_OWORD *)v27 + 8) = v29;
        v30 = *(_OWORD *)&v44[k + 32];
        *((_OWORD *)v27 + 1) = *(_OWORD *)&v44[k + 16];
        *((_OWORD *)v27 + 2) = v30;
        v31 = *(_OWORD *)&v44[k + 64];
        *((_OWORD *)v27 + 3) = *(_OWORD *)&v44[k + 48];
        *((_OWORD *)v27 + 4) = v31;
        if (v44 != (_BYTE *)this)
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v27 + 144, *(char **)&v44[k + 144], *(_QWORD *)&v44[k + 152], (uint64_t)(*(_QWORD *)&v44[k + 152] - *(_QWORD *)&v44[k + 144]) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + k + 168, *(char **)&v44[k + 168], *(_QWORD *)&v44[k + 176], (uint64_t)(*(_QWORD *)&v44[k + 176] - *(_QWORD *)&v44[k + 168]) >> 2);
        }
      }
      *((float *)this + 144) = v5;
      v32 = 144;
      do
      {
        v33 = &v44[v32 * 4];
        v34 = *(void **)&v43[v32 + 138];
        if (v34)
        {
          *((_QWORD *)v33 - 2) = v34;
          operator delete(v34);
        }
        v35 = (void *)*((_QWORD *)v33 - 6);
        if (v35)
        {
          *(_QWORD *)&v43[v32 + 134] = v35;
          operator delete(v35);
        }

        v32 -= 48;
      }
      while (v32 * 4);
      return;
    }
  }
  v36 = (const EarFrame *)((char *)this + v4);
  objc_storeStrong((id *)((char *)this + v4), a2->captureData);
  v37 = *(_OWORD *)&a2->pose.lmPCA.__elems_[1];
  v38 = *(_OWORD *)&a2->pose.yawAngle;
  v39 = *(_OWORD *)&a2[1].pose.lmPCA.__elems_[1];
  *(_OWORD *)&v36[1].captureData = *(_OWORD *)&a2[1].captureData;
  *(_OWORD *)&v36[1].pose.lmPCA.__elems_[1] = v39;
  *(_OWORD *)&v36->pose.lmPCA.__elems_[1] = v37;
  *(_OWORD *)&v36->pose.yawAngle = v38;
  v40 = *(_OWORD *)&a2[1].pose.yawAngle;
  v41 = *(_OWORD *)&a2[2].captureData;
  v42 = *(_OWORD *)&a2[2].pose.yawAngle;
  *(_OWORD *)&v36[2].pose.lmPCA.__elems_[1] = *(_OWORD *)&a2[2].pose.lmPCA.__elems_[1];
  *(_OWORD *)&v36[2].pose.yawAngle = v42;
  *(_OWORD *)&v36[1].pose.yawAngle = v40;
  *(_OWORD *)&v36[2].captureData = v41;
  if (v36 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v36[3], (char *)a2[3].captureData, *(_QWORD *)&a2[3].pose.side, (uint64_t)(*(_QWORD *)&a2[3].pose.side - (unint64_t)a2[3].captureData) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v36[3].pose.faceYawAngle, *(char **)&a2[3].pose.faceYawAngle, *(_QWORD *)&a2[3].pose.yawAngle, (uint64_t)(*(_QWORD *)&a2[3].pose.yawAngle - *(_QWORD *)&a2[3].pose.faceYawAngle) >> 2);
  }
  if ((_DWORD)v4 == 384)
}

void sub_249CCB404(_Unwind_Exception *a1)
{
  std::array<EarFrame,3ul>::~array((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void EarFrame::~EarFrame(EarFrame *this)
{
  void *faceYawAngle;
  VGCaptureData *captureData;

  faceYawAngle = (void *)this[3].pose.faceYawAngle;
  if (faceYawAngle)
  {
    *(_QWORD *)&this[3].pose.yawAngle = faceYawAngle;
    operator delete(faceYawAngle);
  }
  captureData = this[3].captureData;
  if (captureData)
  {
    *(_QWORD *)&this[3].pose.side = captureData;
    operator delete(captureData);
  }

}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void ___ZL27VGLogVGEarPCASelectionStatev_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGEarPCASelectionState");
  v1 = (void *)VGLogVGEarPCASelectionState(void)::handle;
  VGLogVGEarPCASelectionState(void)::handle = (uint64_t)v0;

}

void sub_249CCB724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<EarFrame>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EarFrame>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EarFrame>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(192 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EarFrame>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = (_QWORD *)(a7 - 48);
    do
    {
      v9 = *(_QWORD *)(a3 - 192);
      a3 -= 192;
      *(_QWORD *)a3 = 0;
      *(v8 - 18) = v9;
      v10 = *(_OWORD *)(a3 + 16);
      v11 = *(_OWORD *)(a3 + 32);
      v12 = *(_OWORD *)(a3 + 64);
      *((_OWORD *)v8 - 6) = *(_OWORD *)(a3 + 48);
      *((_OWORD *)v8 - 5) = v12;
      *((_OWORD *)v8 - 8) = v10;
      *((_OWORD *)v8 - 7) = v11;
      v13 = *(_OWORD *)(a3 + 80);
      v14 = *(_OWORD *)(a3 + 96);
      v15 = *(_OWORD *)(a3 + 128);
      *((_OWORD *)v8 - 2) = *(_OWORD *)(a3 + 112);
      *((_OWORD *)v8 - 1) = v15;
      *((_OWORD *)v8 - 4) = v13;
      *((_OWORD *)v8 - 3) = v14;
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *(_OWORD *)v8 = *(_OWORD *)(a3 + 144);
      v8[2] = *(_QWORD *)(a3 + 160);
      *(_QWORD *)(a3 + 144) = 0;
      *(_QWORD *)(a3 + 152) = 0;
      *(_QWORD *)(a3 + 160) = 0;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      result = *(__n128 *)(a3 + 168);
      *(__n128 *)(v8 + 3) = result;
      v8[5] = *(_QWORD *)(a3 + 184);
      *(_QWORD *)(a3 + 168) = 0;
      *(_QWORD *)(a3 + 176) = 0;
      *(_QWORD *)(a3 + 184) = 0;
      v8 -= 24;
      v7 -= 192;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<EarFrame>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    std::__destroy_at[abi:ne180100]<EarFrame,0>(i - 192);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<EarFrame>::__emplace_back_slow_path<EarFrame const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAALL)
    v9 = 0x155555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EarFrame>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[192 * v4];
  v16 = &v10[192 * v9];
  std::construct_at[abi:ne180100]<EarFrame,EarFrame const&,EarFrame*>((uint64_t)v14, a2);
  v15 = v14 + 192;
  std::vector<EarFrame>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_249CCBAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<EarFrame,EarFrame const&,EarFrame*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(id *)a2;
  v4 = *(_OWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 96);
  v6 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 144), *(const void **)(a2 + 144), *(_QWORD *)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  return a1;
}

void sub_249CCBB68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 152) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

float `anonymous namespace'::ComputeArea(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v1 = a1[72];
  v2 = a1[24];
  v3 = a1[25];
  v4 = a1[73];
  v5 = a1[26];
  v6 = a1[74];
  v7 = sqrtf((float)((float)((float)(v3 - v4) * (float)(v3 - v4)) + (float)((float)(v2 - v1) * (float)(v2 - v1)))+ (float)((float)(v5 - v6) * (float)(v5 - v6)));
  v8 = a1[120];
  v9 = a1[121];
  v10 = (float)((float)(v4 - v9) * (float)(v4 - v9)) + (float)((float)(v1 - v8) * (float)(v1 - v8));
  v11 = a1[122];
  v12 = sqrtf(v10 + (float)((float)(v6 - v11) * (float)(v6 - v11)));
  v13 = sqrtf((float)((float)((float)(v9 - v3) * (float)(v9 - v3)) + (float)((float)(v8 - v2) * (float)(v8 - v2)))+ (float)((float)(v11 - v5) * (float)(v11 - v5)));
  return sqrtf((float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5) - v13)* (float)((float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5) - v12)* (float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5)* (float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5) - v7))));
}

uint64_t std::array<EarFrame,3ul>::~array(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = 576;
  do
  {
    v3 = a1 + v2;
    v4 = *(void **)(a1 + v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v3 - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v3 - 48);
    if (v5)
    {
      *(_QWORD *)(a1 + v2 - 40) = v5;
      operator delete(v5);
    }

    v2 -= 192;
  }
  while (v2);
  return a1;
}

uint64_t std::array<EarFrame,3ul>::array(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  v3 = 0;
  v4 = a2 + 144;
  do
  {
    v5 = a1 + v3;
    v6 = v4 + v3;
    *(_QWORD *)v5 = *(id *)(v4 + v3 - 144);
    v7 = *(_OWORD *)(v4 + v3 - 64);
    v8 = *(_OWORD *)(v4 + v3 - 48);
    v9 = *(_OWORD *)(v4 + v3 - 32);
    v10 = *(_OWORD *)(v4 + v3 - 16);
    v11 = *(_OWORD *)(v4 + v3 - 128);
    v12 = *(_OWORD *)(v4 + v3 - 112);
    v13 = *(_OWORD *)(v4 + v3 - 96);
    v14 = *(_OWORD *)(v4 + v3 - 80);
    *(_QWORD *)(v5 + 144) = 0;
    *(_OWORD *)(v5 + 48) = v13;
    *(_OWORD *)(v5 + 64) = v14;
    *(_OWORD *)(v5 + 16) = v11;
    *(_OWORD *)(v5 + 32) = v12;
    *(_OWORD *)(v5 + 112) = v9;
    *(_OWORD *)(v5 + 128) = v10;
    *(_OWORD *)(v5 + 80) = v7;
    *(_OWORD *)(v5 + 96) = v8;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + v3 + 144), *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
    *(_QWORD *)(v5 + 168) = 0;
    *(_QWORD *)(v5 + 176) = 0;
    v15 = (_QWORD *)(a1 + v3 + 168);
    v15[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)(v6 + 24), *(_QWORD *)(v6 + 32), (uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 2);
    v3 += 192;
  }
  while (v3 != 576);
  return a1;
}

void sub_249CCBE54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(v1 + v2 + 144);
  if (v4)
  {
    *(_QWORD *)(v1 + v2 + 152) = v4;
    operator delete(v4);
  }

  if (v2)
  {
    v5 = v1 - 192;
    do
    {
      EarFrame::~EarFrame((EarFrame *)(v5 + v2));
      v2 -= 192;
    }
    while (v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(void **)(a1 + 152);
    if (v2)
    {
      *(_QWORD *)(a1 + 160) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 128);
    if (v3)
    {
      *(_QWORD *)(a1 + 136) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

vg::ear_detection::EarBoundingBoxModel ***std::unique_ptr<vg::ear_detection::EarPCADetector>::reset[abi:ne180100](vg::ear_detection::EarBoundingBoxModel ****a1, vg::ear_detection::EarBoundingBoxModel ***a2)
{
  vg::ear_detection::EarBoundingBoxModel ***result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarPCADetector::~EarPCADetector(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_249CCC360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CCC420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGFaceKitTracker;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_249CCC554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);
  _Unwind_Resume(a1);
}

void sub_249CCC65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);
  _Unwind_Resume(a1);
}

void sub_249CCCAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_249CCCCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_249CCCDC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CCD358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_249CCD47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_249CCD4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CCDE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void sub_249CCE76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  _Unwind_Resume(a1);
}

BOOL device_space_joint_pos(float32x4_t *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  float v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  void *v14;
  void *v15;
  float32x4_t v16;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;

  v5 = a2;
  objc_msgSend(v5, "jointConfidence");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectAtIndexedSubscript:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "floatValue");
  v9 = v8;

  if (v9 >= 0.2)
  {
    objc_msgSend(v5, "rootTransform");
    v18 = v10;
    v19 = v11;
    v20 = v12;
    v21 = v13;
    objc_msgSend(v5, "modelPoses");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectAtIndexedSubscript:", a3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "modelPose");
    *a1 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v16.f32[0]), v19, *(float32x2_t *)v16.f32, 1), v20, v16, 2), v21, v16, 3);

  }
  return v9 >= 0.2;
}

void sub_249CCE8FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void missing_joint(NSString *a1@<X0>, uint64_t a2@<X8>)
{
  NSString *v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Could not calculate pose values. Joint %@ not visible. Try a different pose."), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)a2 = 29;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Body Pose Guidance filter failed with feedback: %@"), v4);
  *(_QWORD *)(a2 + 8) = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a2 + 16) = 0;
  v7 = v4;
  v8 = CFSTR("poseGuidance");
  v6 = CFSTR("feedback");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  *(_QWORD *)(a2 + 24) = objc_claimAutoreleasedReturnValue();

}

void sub_249CCEA4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

float angle_deg_in_2d_plane(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = vmulq_f32(a1, a3);
  v4 = vmulq_f32(a1, a2);
  return (float)(atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0])* 180.0)/ 3.14159265;
}

float deg_angle_between(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;

  v2 = vmulq_f32(a1, a1);
  v2.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).u64[0];
  v2.f32[0] = sqrtf(v2.f32[0]) + 1.0e-16;
  v3 = vdivq_f32(a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 0));
  v4 = vmulq_f32(a2, a2);
  v4.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).u64[0];
  v4.f32[0] = sqrtf(v4.f32[0]) + 1.0e-16;
  v5 = vmulq_f32(v3, vdivq_f32(a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0)));
  return (float)(acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])* 180.0)/ 3.14159265;
}

void ___ZL25blendshapesInitializationv_block_invoke()
{
  void *v0;
  void *v1;
  unint64_t i;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[52];

  v8[51] = *MEMORY[0x24BDAC8D0];
  v8[0] = CFSTR("eyeBlink_L");
  v8[1] = CFSTR("eyeBlink_R");
  v8[2] = CFSTR("eyeSquint_L");
  v8[3] = CFSTR("eyeSquint_R");
  v8[4] = CFSTR("eyeLookDown_L");
  v8[5] = CFSTR("eyeLookDown_R");
  v8[6] = CFSTR("eyeLookIn_L");
  v8[7] = CFSTR("eyeLookIn_R");
  v8[8] = CFSTR("eyeWide_L");
  v8[9] = CFSTR("eyeWide_R");
  v8[10] = CFSTR("eyeLookOut_L");
  v8[11] = CFSTR("eyeLookOut_R");
  v8[12] = CFSTR("eyeLookUp_L");
  v8[13] = CFSTR("eyeLookUp_R");
  v8[14] = CFSTR("browDown_L");
  v8[15] = CFSTR("browDown_R");
  v8[16] = CFSTR("browInnerUp");
  v8[17] = CFSTR("browOuterUp_L");
  v8[18] = CFSTR("browOuterUp_R");
  v8[19] = CFSTR("jawOpen");
  v8[20] = CFSTR("mouthClose");
  v8[21] = CFSTR("jawLeft");
  v8[22] = CFSTR("jawRight");
  v8[23] = CFSTR("jawForward");
  v8[24] = CFSTR("mouthUpperUp_L");
  v8[25] = CFSTR("mouthUpperUp_R");
  v8[26] = CFSTR("mouthLowerDown_L");
  v8[27] = CFSTR("mouthLowerDown_R");
  v8[28] = CFSTR("mouthRollUpper");
  v8[29] = CFSTR("mouthRollLower");
  v8[30] = CFSTR("mouthSmile_L");
  v8[31] = CFSTR("mouthSmile_R");
  v8[32] = CFSTR("mouthDimple_L");
  v8[33] = CFSTR("mouthDimple_R");
  v8[34] = CFSTR("mouthStretch_L");
  v8[35] = CFSTR("mouthStretch_R");
  v8[36] = CFSTR("mouthFrown_L");
  v8[37] = CFSTR("mouthFrown_R");
  v8[38] = CFSTR("mouthPress_L");
  v8[39] = CFSTR("mouthPress_R");
  v8[40] = CFSTR("mouthPucker");
  v8[41] = CFSTR("mouthFunnel");
  v8[42] = CFSTR("mouthLeft");
  v8[43] = CFSTR("mouthRight");
  v8[44] = CFSTR("mouthShrugLower");
  v8[45] = CFSTR("mouthShrugUpper");
  v8[46] = CFSTR("noseSneer_L");
  v8[47] = CFSTR("noseSneer_R");
  v8[48] = CFSTR("cheekPuff");
  v8[49] = CFSTR("cheekSquint_L");
  v8[50] = CFSTR("cheekSquint_R");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 51);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)objc_opt_new();
  for (i = 0; i < objc_msgSend(v0, "count"); ++i)
  {
    objc_msgSend(v0, "objectAtIndex:", i);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", i);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setObject:forKeyedSubscript:", v4, v3);

  }
  v5 = (void *)_blendshapeNames;
  _blendshapeNames = (uint64_t)v0;
  v6 = v0;

  v7 = (void *)_blendshapeNameToIdx;
  _blendshapeNameToIdx = (uint64_t)v1;

}

void sub_249CCEF4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CCF134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CCF1A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CCF448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249CCF488()
{
  JUMPOUT(0x249CCF478);
}

id vg::frame_selection::VGEarCaptureOptions::toDictionary(vg::frame_selection::VGEarCaptureOptions *this, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD *v17;
  void *v18;
  id v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD v35[17];
  _QWORD v36[19];

  v36[17] = *MEMORY[0x24BDAC8D0];
  v35[0] = CFSTR("earPresenceThreshold");
  LODWORD(a2) = *(_DWORD *)this;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a2);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v36[0] = v34;
  v35[1] = CFSTR("earOcclusionThreshold");
  LODWORD(v3) = *((_DWORD *)this + 1);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v3);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v36[1] = v33;
  v35[2] = CFSTR("bboxVisibilityThreshold");
  LODWORD(v4) = *((_DWORD *)this + 2);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v4);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v36[2] = v32;
  v35[3] = CFSTR("landmarkVisibilityThreshold");
  LODWORD(v5) = *((_DWORD *)this + 3);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v5);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v36[3] = v31;
  v35[4] = CFSTR("percentileDetectionConfidence");
  LODWORD(v6) = *((_DWORD *)this + 4);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v6);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v36[4] = v30;
  v35[5] = CFSTR("yawCount");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)this + 3));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v36[5] = v29;
  v35[6] = CFSTR("pitchCount");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)this + 4));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v36[6] = v28;
  v35[7] = CFSTR("yawLimit");
  LODWORD(v7) = *((_DWORD *)this + 10);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v36[7] = v8;
  v35[8] = CFSTR("yawSensitivity");
  LODWORD(v9) = *((_DWORD *)this + 11);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v36[8] = v10;
  v35[9] = CFSTR("pitchLimit");
  LODWORD(v11) = *((_DWORD *)this + 12);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v36[9] = v12;
  v35[10] = CFSTR("pitchSensitivity");
  LODWORD(v13) = *((_DWORD *)this + 13);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v36[10] = v14;
  v35[11] = CFSTR("writeDebugData");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *((unsigned __int8 *)this + 56));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v36[11] = v15;
  v35[12] = CFSTR("debugDataPath");
  v16 = objc_alloc(MEMORY[0x24BDD17C8]);
  v17 = (_QWORD *)((char *)this + 64);
  if (*((char *)this + 87) < 0)
    v17 = (_QWORD *)*v17;
  v18 = (void *)objc_msgSend(v16, "initWithUTF8String:", v17);
  v36[12] = v18;
  v35[13] = CFSTR("modelsRootPath");
  v19 = objc_alloc(MEMORY[0x24BDD17C8]);
  v20 = (_QWORD *)((char *)this + 88);
  if (*((char *)this + 111) < 0)
    v20 = (_QWORD *)*v20;
  v21 = (void *)objc_msgSend(v19, "initWithUTF8String:", v20);
  v36[13] = v21;
  v35[14] = CFSTR("useMotionBlurFilter");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *((unsigned __int8 *)this + 112));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v36[14] = v22;
  v35[15] = CFSTR("motionBlurFilterThreshold");
  LODWORD(v23) = *((_DWORD *)this + 29);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v35[16] = CFSTR("yawAngles");
  v25 = *((_QWORD *)this + 15);
  v36[15] = v24;
  v36[16] = v25;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v36, v35, 17);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

void sub_249CCFA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

id vg::frame_selection::face_tracker::createARKitDictFromFaceKitDict(vg::frame_selection::face_tracker *this, NSDictionary *a2, const CGSize *a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  CFDictionaryRef DictionaryRepresentation;
  void *v35;
  id v36;
  double *v38;
  void *v39;
  vg::frame_selection::face_tracker *v40;
  void *__p;
  void *v42;
  uint64_t v43;
  _QWORD v44[2];
  CGRect v45;

  v44[1] = *MEMORY[0x24BDAC8D0];
  v40 = this;
  v4 = (void *)objc_opt_new();
  -[vg::frame_selection::face_tracker objectForKeyedSubscript:](v40, "objectForKeyedSubscript:", CFSTR("timestamp"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("timestamp"));

  -[vg::frame_selection::face_tracker objectForKeyedSubscript:](v40, "objectForKeyedSubscript:", CFSTR("tracked_faces"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(v6, "firstObject");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_opt_new();
    objc_msgSend(v7, "setObject:forKeyedSubscript:", &unk_251B347F8, CFSTR("confidence"));
    v38 = (double *)a2;
    objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("smooth_data"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_opt_new();
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("pose"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, CFSTR("pose"));

    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("geometry"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_opt_new();
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("vertices"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("vertices"));

    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("landmarks"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v14, CFSTR("landmarks"));

    objc_msgSend(v9, "setObject:forKeyedSubscript:", v12, CFSTR("geometry"));
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("animation"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_opt_new();
    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("left_eye_pitch"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("left_eye_pitch"));

    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("left_eye_yaw"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v18, CFSTR("left_eye_yaw"));

    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("right_eye_pitch"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v19, CFSTR("right_eye_pitch"));

    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("right_eye_yaw"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v20, CFSTR("right_eye_yaw"));

    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("gaze"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v21, CFSTR("gaze"));

    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("blendshapes"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v22, CFSTR("blendshapes"));

    objc_msgSend(v9, "setObject:forKeyedSubscript:", v16, CFSTR("animation"));
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("rgb_camera"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_opt_new();
    objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("intrinsics"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setObject:forKeyedSubscript:", v25, CFSTR("intrinsics"));

    objc_msgSend(v9, "setObject:forKeyedSubscript:", v24, CFSTR("rgb_camera"));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, CFSTR("smooth_data"));
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("geometry"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("landmarks"));
    v27 = (id)objc_claimAutoreleasedReturnValue();
    v28 = v27;
    if (v27)
    {
      v29 = objc_msgSend(v27, "length");
      v30 = objc_msgSend(objc_retainAutorelease(v28), "bytes");
      _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(&__p, v29 >> 3);
      if (v29 >= 8)
      {
        v31 = 0;
        if (v29 >> 3 <= 1)
          v32 = 1;
        else
          v32 = v29 >> 3;
        do
        {
          *((_QWORD *)__p + v31) = *(_QWORD *)(v30 + 8 * v31);
          ++v31;
        }
        while (v32 != v31);
      }
    }
    else
    {
      __p = 0;
      v42 = 0;
      v43 = 0;
    }

    v45.origin.x = vg::shared::computeBBox((uint64_t **)&__p, v38, 0.1);
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v45);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", DictionaryRepresentation, CFSTR("Rect"));

    v44[0] = v7;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v44, 1);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v35, CFSTR("tracked_faces"));

    v36 = v4;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }

  }
  else
  {
    objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1A8], CFSTR("tracked_faces"));
    v33 = v4;
  }

  return v4;
}

void sub_249CD009C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

double vg::frame_selection::face_tracker::createFaceBoundsFromARKitLandmarks(uint64_t **a1, double *a2)
{
  return vg::shared::computeBBox(a1, a2, 0.1);
}

_QWORD *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_249CD0280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_249CD0300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249CD0460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_249CD0638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD0858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_249CD0960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGFaceCaptureData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_249CD3EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CD4030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD40C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CD4194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD42D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CD4660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CD46D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD4D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CD5630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD58B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CD5B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD610C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void sub_249CD692C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);
  void (**v2)(_QWORD);
  void *v3;

  v2[2](v2);
  v1[2](v1);

  __39__VGCaptureData__createColorFromYCbCr___block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGCaptureData(void)
{
  if (VGLogVGCaptureData(void)::onceToken != -1)
    dispatch_once(&VGLogVGCaptureData(void)::onceToken, &__block_literal_global_346);
  return (id)VGLogVGCaptureData(void)::handle;
}

void sub_249CD6EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  __88__VGCaptureData_computeYuvHighResChromaticAdaptationReverted_chromaticAdaptationMatrix___block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CD70F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD71A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CD723C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CD76A8(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void (**v3)(_QWORD);
  void (**v4)(_QWORD);
  void (**v5)(_QWORD);
  void *v6;

  v5[2](v5);
  v4[2](v4);

  v3[2](v3);
  v2[2](v2);

  _Unwind_Resume(a1);
}

void sub_249CD7938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_249CD7BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CD7CF8(_Unwind_Exception *a1)
{
  __29__VGCaptureData_rgbRectified__block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CD7EF4(_Unwind_Exception *a1)
{
  __33__VGCaptureData_mcamLeftColorRGB__block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CD80A0(_Unwind_Exception *a1)
{
  void *v1;

  __60__VGCaptureData_mcamLeftColorYuvChromaticAdaptationReverted__block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CD81E8(_Unwind_Exception *a1)
{
  __60__VGCaptureData_mcamLeftColorRGBChromaticAdaptationReverted__block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CD8350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGCaptureData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_249CD86CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249CD9454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_249CD98CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CD9C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249CD9F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CDA1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a10)
  {
    if (!v17)
      goto LABEL_6;
  }
  else
  {

    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (v15)
      {
        if (!v19)
          goto LABEL_11;
      }
      else
      {

        if ((v19 & 1) == 0)
        {
LABEL_11:
          if (!v18)

          _Unwind_Resume(a1);
        }
      }

      goto LABEL_11;
    }
  }

  goto LABEL_6;
}

void ___ZL18VGLogVGCaptureDatav_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGCaptureData");
  v1 = (void *)VGLogVGCaptureData(void)::handle;
  VGLogVGCaptureData(void)::handle = (uint64_t)v0;

}

void sub_249CDA3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void vg::frame_selection::VGBlendshapeExpressionFilter::processBlendshapeConfigFile(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  void *v17;
  _BOOL4 v18;
  id v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSString *v30;
  void *v31;
  id obj;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _QWORD v44[3];
  uint8_t buf[4];
  uint64_t v46;
  uint8_t v47[24];
  uint64_t v48;
  int v49;
  int v50;
  _QWORD v51[6];

  v2 = a1;
  v51[3] = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) < 0)
    v2 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v2, objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding", a2));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BDD1488], "vg_resourcePath");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v44[0] = v4;
  v44[1] = CFSTR("VGExpressionFilterConfigs");
  v44[2] = v29;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v44, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathWithComponents:", v5);
  v30 = (NSString *)objc_claimAutoreleasedReturnValue();

  VGReadJSON(v30);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v6;
  if (v6)
  {
    +[VGFaceTrackerHelper blendshapeNamesToIdx](VGFaceTrackerHelper, "blendshapeNamesToIdx");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = 0uLL;
    v38 = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v34 != v8)
            objc_enumerationMutation(obj);
          v10 = *(id *)(*((_QWORD *)&v33 + 1) + 8 * i);
          v51[0] = CFSTR("name");
          v51[1] = CFSTR("clip_threshold_low");
          v51[2] = CFSTR("clip_threshold_high");
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v51, 3);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v12 = v11;
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
          if (v13)
          {
            v14 = *(_QWORD *)v40;
            while (2)
            {
              for (j = 0; j != v13; ++j)
              {
                if (*(_QWORD *)v40 != v14)
                  objc_enumerationMutation(v12);
                v16 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * j);
                objc_msgSend(v10, "objectForKey:", v16);
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                v18 = v17 == 0;

                if (v18)
                {
                  __VGLogSharedInstance();
                  v25 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    v46 = v16;
                    _os_log_impl(&dword_249CAD000, v25, OS_LOG_TYPE_ERROR, " Blendshape config is invalid. Missing key: %@ ", buf, 0xCu);
                  }

                  goto LABEL_23;
                }
              }
              v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
              if (v13)
                continue;
              break;
            }
          }

          objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("name"));
          v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(v47, (char *)objc_msgSend(v19, "UTF8String"));
          objc_msgSend(v31, "objectForKeyedSubscript:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = objc_msgSend(v20, "unsignedIntValue");
          objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("clip_threshold_low"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "floatValue");
          v49 = v22;
          objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("clip_threshold_high"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "floatValue");
          v50 = v24;
          std::vector<vg::frame_selection::BlendshapeConfig>::push_back[abi:ne180100]((uint64_t *)&v37, (__int128 *)v47);
          if ((char)v47[23] < 0)
            operator delete(*(void **)v47);

LABEL_23:
          ;
        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
      }
      while (v7);
    }

    *(_OWORD *)v27 = v37;
    *(_QWORD *)(v27 + 16) = v38;
    v38 = 0;
    v37 = 0uLL;
    *(_BYTE *)(v27 + 24) = 1;
    *(_QWORD *)v47 = &v37;
    std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);

  }
  else
  {
    __VGLogSharedInstance();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v47 = 138412290;
      *(_QWORD *)&v47[4] = v30;
      _os_log_impl(&dword_249CAD000, v26, OS_LOG_TYPE_ERROR, " Unable to parse blendshape config from file: %@ ", v47, 0xCu);
    }

    *(_BYTE *)v27 = 0;
    *(_BYTE *)(v27 + 24) = 0;
  }

}

void sub_249CDA850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::frame_selection::BlendshapeConfig>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[40 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[40 * v13];
    v16 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v15 + 24) = *(__int128 *)((char *)a2 + 24);
    v17[2] = v15 + 40;
    std::vector<vg::frame_selection::BlendshapeConfig>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<vg::frame_selection::BlendshapeConfig>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(__int128 *)((char *)a2 + 24);
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_249CDAAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<vg::frame_selection::BlendshapeConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGBlendshapeExpressionFilter::getBlendshapesFromTrackingData(vg::frame_selection::VGBlendshapeExpressionFilter *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  id v14;
  const void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x24BDAC8D0];
  -[vg::frame_selection::VGBlendshapeExpressionFilter objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("tracked_faces"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4 && objc_msgSend(v4, "count"))
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("smooth_data"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("animation"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("blendshapes"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        v12 = objc_msgSend(v10, "length");
        +[VGFaceTrackerHelper blendshapeNames](VGFaceTrackerHelper, "blendshapeNames");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12 >> 2 == objc_msgSend(v13, "count"))
        {
          v14 = objc_retainAutorelease(v11);
          v15 = (const void *)objc_msgSend(v14, "bytes");
          v16 = objc_msgSend(v14, "length");
          memset(__p, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v15, (uint64_t)v15 + (v16 & 0xFFFFFFFFFFFFFFFCLL), v16 >> 2);
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a2, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
          *(_BYTE *)(a2 + 24) = 1;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          __VGLogSharedInstance();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 134217984;
            *(void **)((char *)__p + 4) = (void *)objc_msgSend(v13, "count");
            _os_log_impl(&dword_249CAD000, v18, OS_LOG_TYPE_ERROR, " Blendshape values should consist of %lu floats ", (uint8_t *)__p, 0xCu);
          }

          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
        }

      }
      else
      {
        __VGLogSharedInstance();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_249CAD000, v17, OS_LOG_TYPE_ERROR, " Blendshape values not found in the tracking dictionary ", (uint8_t *)__p, 2u);
        }

        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 24) = 0;
      }

    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }

  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }

}

void sub_249CDAD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

vg::frame_selection::VGExpressionIsNeutralFilter *vg::frame_selection::VGExpressionIsNeutralFilter::VGExpressionIsNeutralFilter(vg::frame_selection::VGExpressionIsNeutralFilter *this)
{
  std::string *v2;
  NSObject *v3;
  unint64_t v4;
  std::string __p;
  __int128 *v7;
  __int128 *v8;
  char v9;
  std::string v10;
  std::string *p_buf;
  std::string buf;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 2) = 0;
  v2 = (std::string *)((char *)this + 16);
  *((_DWORD *)this + 2) = 16;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = off_251B22FF0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "VGExpressionIsNeutralFilter.ExpressionFilterConfig.json");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  vg::frame_selection::VGBlendshapeExpressionFilter::processBlendshapeConfigFile((uint64_t *)&__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&buf, 0, sizeof(buf));
  if (v9)
    std::vector<vg::frame_selection::BlendshapeConfig>::__init_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(&buf, v7, v8, 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v7) >> 3));
  if (v2 != &buf)
    std::vector<vg::frame_selection::BlendshapeConfig>::__assign_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>((uint64_t)v2, (std::string *)buf.__r_.__value_.__l.__data_, (__int128 *)buf.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3));
  p_buf = &buf;
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
  __VGLogSharedInstance();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v4;
    _os_log_impl(&dword_249CAD000, v3, OS_LOG_TYPE_INFO, " Loaded %zu blendshape configurations for VGExpressionIsNeutralFilter_New filter ", (uint8_t *)&buf, 0xCu);
  }

  if (v9)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
    std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return this;
}

void sub_249CDAF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _QWORD *v25;

  if (a25 < 0)
    operator delete(__p);
  *v25 = &unk_251B23058;
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

float vg::frame_selection::VGExpressionIsNeutralFilter::filter(vg::frame_selection::VGExpressionIsNeutralFilter *this, NSDictionary *a2)
{
  NSDictionary *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  NSObject *v10;
  std::string *p_p;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  float v15;
  float v16;
  NSObject *v17;
  uint64_t v19;
  std::string __p;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  char v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  std::string *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  vg::frame_selection::VGBlendshapeExpressionFilter::getBlendshapesFromTrackingData((vg::frame_selection::VGBlendshapeExpressionFilter *)v3, (uint64_t)&v24);
  if (v26)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v4 = (std::string *)std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
    memset(&__p, 0, sizeof(__p));
    v19 = 0x80000000000000;
    v5 = *((_QWORD *)this + 2);
    v6 = *((_QWORD *)this + 3);
    v7 = 0.0;
    while (v5 != v6)
    {
      v8 = vg::frame_selection::VGExpressionFilter::remap((vg::frame_selection::VGExpressionFilter *)v4, *((float *)v21 + *(_QWORD *)(v5 + 24)), *(float *)(v5 + 32), *(float *)(v5 + 36));
      v9 = *((float *)&v19 + 1);
      if (v8 > *((float *)&v19 + 1))
      {
        if (*((float *)&v19 + 1) <= v8)
          v9 = v8;
        *((float *)&v19 + 1) = v9;
        v4 = std::string::operator=(&__p, (const std::string *)v5);
        LODWORD(v19) = *((_DWORD *)v21 + *(_QWORD *)(v5 + 24));
      }
      v7 = v7 + v8;
      v5 += 40;
    }
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 134218498;
      v28 = *((float *)&v19 + 1);
      v29 = 2048;
      v30 = *(float *)&v19;
      v31 = 2080;
      v32 = p_p;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_DEBUG, " VGExpressionIsNeutralFilter: Max blendshape found: clippedValue: %f, rawValue: %f, name: %s ", buf, 0x20u);
    }

    v13 = *((_QWORD *)this + 2);
    v12 = *((_QWORD *)this + 3);
    __VGLogSharedInstance();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = v7 / (float)(0xCCCCCCCCCCCCCCCDLL * ((v12 - v13) >> 3));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v28 = v15;
      _os_log_impl(&dword_249CAD000, v14, OS_LOG_TYPE_DEBUG, " VGExpressionIsNeutralFilter: L1Distance = %f ", buf, 0xCu);
    }

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    v16 = 1.0 - v15;
  }
  else
  {
    __VGLogSharedInstance();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19) = 0;
      _os_log_impl(&dword_249CAD000, v17, OS_LOG_TYPE_ERROR, " No blendshapes found in tracking data ", (uint8_t *)&v19, 2u);
    }

    v16 = 0.0;
  }
  if (v26 && v24)
  {
    v25 = v24;
    operator delete(v24);
  }

  return v16;
}

void sub_249CDB2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  if (a23)
  {
    if (__p)
      operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void vg::frame_selection::VGExpressionIsNeutralFilter::~VGExpressionIsNeutralFilter(vg::frame_selection::VGExpressionIsNeutralFilter *this)
{
  void **v1;

  *(_QWORD *)this = &unk_251B23058;
  v1 = (void **)((char *)this + 16);
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_251B23058;
  v2 = (void **)((char *)this + 16);
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x24BD02D60](this, 0x10A1C4037ACD87BLL);
}

uint64_t std::vector<vg::frame_selection::BlendshapeConfig>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 40;
  }
}

uint64_t std::__split_buffer<vg::frame_selection::BlendshapeConfig>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<vg::frame_selection::BlendshapeConfig>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<vg::frame_selection::BlendshapeConfig>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<vg::frame_selection::BlendshapeConfig>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

std::string *std::vector<vg::frame_selection::BlendshapeConfig>::__init_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<vg::frame_selection::BlendshapeConfig>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_249CDB73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<vg::frame_selection::BlendshapeConfig>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)v6 + 24);
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = (std::string *)((char *)v8 + 40);
      v13 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_249CDB860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0)
      operator delete(*(void **)(v1 - 40));
    v1 -= 40;
  }
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__assign_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<vg::frame_selection::BlendshapeConfig>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x666666666666666)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<vg::frame_selection::BlendshapeConfig>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,0>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(v8, (__int128 *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,0>(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 17) < 0)
        operator delete(*(void **)(v16 - 40));
      v16 -= 40;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_249CDBA50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_249CDBA58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<vg::frame_selection::BlendshapeConfig>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 40);
    v4 = (std::string *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v5;
}

void sub_249CDBC60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CDBF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CDC46C(_Unwind_Exception *a1)
{
  id *v1;

  vg::frame_selection::FrameRejectionState::~FrameRejectionState(v1);
  _Unwind_Resume(a1);
}

void vg::frame_selection::FrameRejectionState::~FrameRejectionState(id *this)
{

}

void sub_249CDC6AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_249CDC794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CDC87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CDCA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CDCB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CDCC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CDCDC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_249CDCE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249CDCF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t vg::frame_selection::VGBlurDetectorImpl::init(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 40) = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 8);
  return 1;
}

unint64_t vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlur(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  NSObject *v9;
  double v10;
  double v11;
  NSObject *v12;
  double v13;
  void *v14;
  unint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  float32x2_t v25;
  float v26;
  float *v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  float *v34;
  int v35;
  float v36;
  NSObject *v37;
  double v38;
  float v39;
  NSObject *v40;
  double v41;
  double v42;
  void *__p;
  float *v44;
  float *v45;
  uint8_t buf[4];
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = (uint64_t)(a2 + 1);
  if (v4 == v5)
  {
    __VGLogSharedInstance();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = *a2;
      *(_DWORD *)buf = 134217984;
      v47 = v13;
      _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::isMotionBlurPresent: no landmarks data for frame#%zu ", buf, 0xCu);
    }

    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_17;
    v14 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v14;
      operator delete(v14);
    }
    v15 = 0;
    v16 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    v7 = *a2;
    v8 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)a2 < v8)
    {
      __VGLogSharedInstance();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *a2;
        v11 = *(double *)(a1 + 32);
        *(_DWORD *)buf = 134218496;
        v47 = v10;
        v48 = 2048;
        v49 = v10;
        v50 = 2048;
        v51 = v11;
        _os_log_impl(&dword_249CAD000, v9, OS_LOG_TYPE_ERROR, " Frame#%zu has timestamp value lower than the timestamp of the previously processed frame (%zu < %zu) ", buf, 0x20u);
      }

LABEL_17:
      v15 = 0;
      v16 = 0;
      return v16 | v15;
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v17 = *(_QWORD *)&v7 - v8;
      if (*(_QWORD *)&v7 == v8)
      {
        __VGLogSharedInstance();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_249CAD000, v18, OS_LOG_TYPE_ERROR, " VGBlurDetectorImpl::isMotionBlurPresent: delta time must be positive ", buf, 2u);
        }

        goto LABEL_17;
      }
      __p = 0;
      v44 = 0;
      v45 = 0;
      std::vector<float>::reserve(&__p, (v5 - v4) >> 3);
      v22 = *((_QWORD *)a2 + 1);
      if (*((_QWORD *)a2 + 2) != v22)
      {
        v23 = 0;
        v24 = v44;
        do
        {
          v25 = vsub_f32(*(float32x2_t *)(v22 + 8 * v23), *(float32x2_t *)(*(_QWORD *)a1 + 8 * v23));
          v26 = sqrtf(vaddv_f32(vmul_f32(v25, v25))) / (float)v17;
          if (v24 >= v45)
          {
            v28 = (float *)__p;
            v29 = ((char *)v24 - (_BYTE *)__p) >> 2;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
              std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
            v31 = (char *)v45 - (_BYTE *)__p;
            if (((char *)v45 - (_BYTE *)__p) >> 1 > v30)
              v30 = v31 >> 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v45, v32);
              v28 = (float *)__p;
              v24 = v44;
            }
            else
            {
              v33 = 0;
            }
            v34 = (float *)&v33[4 * v29];
            *v34 = v26;
            v27 = v34 + 1;
            while (v24 != v28)
            {
              v35 = *((_DWORD *)v24-- - 1);
              *((_DWORD *)v34-- - 1) = v35;
            }
            __p = v34;
            v44 = v27;
            v45 = (float *)&v33[4 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v24 = v26;
            v27 = v24 + 1;
          }
          v44 = v27;
          ++v23;
          v22 = *((_QWORD *)a2 + 1);
          v24 = v27;
        }
        while (v23 < (*((_QWORD *)a2 + 2) - v22) >> 3);
      }
      v36 = vg::shared::computeMedian<float>((uint64_t)&__p);
      _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(a1, v6);
      *(double *)(a1 + 32) = *a2;
      __VGLogSharedInstance();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        v38 = *a2;
        *(_DWORD *)buf = 134218240;
        v47 = v38;
        v48 = 2048;
        v49 = v36;
        _os_log_impl(&dword_249CAD000, v37, OS_LOG_TYPE_DEBUG, " Frame#%zu has median velocity of landmarks: %g ", buf, 0x16u);
      }

      v39 = *(float *)(a1 + 44);
      if (v36 >= v39)
      {
        __VGLogSharedInstance();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          v41 = *a2;
          v42 = *(float *)(a1 + 44);
          *(_DWORD *)buf = 134218496;
          v47 = v41;
          v48 = 2048;
          v49 = v36;
          v50 = 2048;
          v51 = v42;
          _os_log_impl(&dword_249CAD000, v40, OS_LOG_TYPE_DEBUG, " Frame#%zu has blur detected, with median velocity of landmarks greater or equal to the threshold [%g >= %g] ", buf, 0x20u);
        }

      }
      if (__p)
      {
        v44 = (float *)__p;
        operator delete(__p);
      }
      v16 = v36 >= v39;
      v15 = (unint64_t)LODWORD(v36) << 32;
    }
    else
    {
      __VGLogSharedInstance();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        v21 = *a2;
        *(_DWORD *)buf = 134217984;
        v47 = v21;
        _os_log_impl(&dword_249CAD000, v20, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::isMotionBlurPresent: no previous landmarks data recorded, updated with data from frame#%zu ", buf, 0xCu);
      }

      _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(a1, v6);
      v15 = 0;
      v16 = 0;
      *(double *)(a1 + 32) = *a2;
    }
  }
  return v16 | v15;
}

void sub_249CDD438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

unint64_t vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlurHRTF(uint64_t a1, double *a2)
{
  unint64_t v4;
  NSObject *v5;
  double v6;
  double v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  unint64_t v12;
  _BOOL8 v13;
  float v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  float32x2_t v19;
  float v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  int v29;
  float v30;
  NSObject *v31;
  double v32;
  float v33;
  NSObject *v34;
  double v35;
  double v36;
  void *__p;
  float *v39;
  float *v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)a2 < v4)
  {
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *a2;
      v7 = *(double *)(a1 + 32);
      *(_DWORD *)buf = 134218496;
      v42 = v6;
      v43 = 2048;
      v44 = v6;
      v45 = 2048;
      v46 = v7;
      _os_log_impl(&dword_249CAD000, v5, OS_LOG_TYPE_ERROR, " Frame#%zu has timestamp value lower than the timestamp of the previously processed frame (%zu < %zu) ", buf, 0x20u);
    }

    goto LABEL_45;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v8 = *(_QWORD *)a2 - v4;
    if (!v8)
    {
      __VGLogSharedInstance();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v9, OS_LOG_TYPE_ERROR, " VGBlurDetectorImpl::isMotionBlurPresent: delta time must be positive ", buf, 2u);
      }
LABEL_44:

LABEL_45:
      v12 = 0;
      v13 = 0;
      return v13 | v12;
    }
    v14 = (float)v8;
    v15 = (float)v8 / *(float *)(a1 + 40);
    if (v15 <= 0.0)
    {
      __VGLogSharedInstance();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v9, OS_LOG_TYPE_ERROR, " VGBlurDetectorImpl::isMotionBlurPresent: delta frames must be positive ", buf, 2u);
      }
      goto LABEL_44;
    }
    __p = 0;
    v39 = 0;
    v40 = 0;
    std::vector<float>::reserve(&__p, (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    v16 = *((_QWORD *)a2 + 1);
    if (*((_QWORD *)a2 + 2) != v16)
    {
      v17 = 0;
      v18 = v39;
      do
      {
        v19 = vsub_f32(*(float32x2_t *)(v16 + 8 * v17), *(float32x2_t *)(*(_QWORD *)a1 + 8 * v17));
        v20 = (float)(vaddv_f32(vmul_f32(v19, v19)) / v14) / v15;
        if (v18 >= v40)
        {
          v22 = (float *)__p;
          v23 = ((char *)v18 - (_BYTE *)__p) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v25 = (char *)v40 - (_BYTE *)__p;
          if (((char *)v40 - (_BYTE *)__p) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v40, v26);
            v22 = (float *)__p;
            v18 = v39;
          }
          else
          {
            v27 = 0;
          }
          v28 = (float *)&v27[4 * v23];
          *v28 = v20;
          v21 = v28 + 1;
          while (v18 != v22)
          {
            v29 = *((_DWORD *)v18-- - 1);
            *((_DWORD *)v28-- - 1) = v29;
          }
          __p = v28;
          v39 = v21;
          v40 = (float *)&v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v18 = v20;
          v21 = v18 + 1;
        }
        v39 = v21;
        ++v17;
        v16 = *((_QWORD *)a2 + 1);
        v18 = v21;
      }
      while (v17 < (*((_QWORD *)a2 + 2) - v16) >> 3);
    }
    v30 = vg::shared::computeMedian<float>((uint64_t)&__p);
    _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(a1, (uint64_t)(a2 + 1));
    *(double *)(a1 + 32) = *a2;
    __VGLogSharedInstance();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      v32 = *a2;
      *(_DWORD *)buf = 134218496;
      v42 = v32;
      v43 = 2048;
      v44 = v30;
      v45 = 2048;
      v46 = v15;
      _os_log_impl(&dword_249CAD000, v31, OS_LOG_TYPE_DEBUG, " Frame#%zu has median velocity of landmarks: %g (averaged over %g frames) ", buf, 0x20u);
    }

    v33 = *(float *)(a1 + 44);
    if (v30 >= v33)
    {
      __VGLogSharedInstance();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        v35 = *a2;
        v36 = *(float *)(a1 + 44);
        *(_DWORD *)buf = 134218752;
        v42 = v35;
        v43 = 2048;
        v44 = v30;
        v45 = 2048;
        v46 = v36;
        v47 = 2048;
        v48 = v15;
        _os_log_impl(&dword_249CAD000, v34, OS_LOG_TYPE_DEBUG, " Frame#%zu has blur detected, with median velocity of landmarks greater or equal to the threshold [%g >= %g (averaged over %g frames)] ", buf, 0x2Au);
      }

    }
    if (__p)
    {
      v39 = (float *)__p;
      operator delete(__p);
    }
    v13 = v30 >= v33;
    v12 = (unint64_t)LODWORD(v30) << 32;
  }
  else
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *a2;
      *(_DWORD *)buf = 134217984;
      v42 = v11;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::isMotionBlurPresent: no previous landmarks data recorded, updated with data from frame#%zu ", buf, 0xCu);
    }

    _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(a1, (uint64_t)(a2 + 1));
    v12 = 0;
    v13 = 0;
    *(double *)(a1 + 32) = *a2;
  }
  return v13 | v12;
}

void sub_249CDD980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t vg::frame_selection::VGBlurDetectorImpl::detectMotionBlur(uint64_t a1, double *a2)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v8[8];

  VGLogVGBlurDetector();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v4))
  {
    v8[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DetectMotionBlur", (const char *)&unk_249D51699, (uint8_t *)v8, 2u);
  }

  if (*(_BYTE *)(a1 + 48))
    v5 = vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlurHRTF(a1, a2);
  else
    v5 = vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlur(a1, a2);
  v6 = v5;
  ___ZN2vg15frame_selection18VGBlurDetectorImpl16detectMotionBlurERKNS0_19VGBlurDetectorInputE_block_invoke();
  return v6;
}

void sub_249CDDA74(_Unwind_Exception *a1)
{
  ___ZN2vg15frame_selection18VGBlurDetectorImpl16detectMotionBlurERKNS0_19VGBlurDetectorInputE_block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGBlurDetector(void)
{
  if (VGLogVGBlurDetector(void)::onceToken != -1)
    dispatch_once(&VGLogVGBlurDetector(void)::onceToken, &__block_literal_global_2);
  return (id)VGLogVGBlurDetector(void)::handle;
}

void ___ZN2vg15frame_selection18VGBlurDetectorImpl16detectMotionBlurERKNS0_19VGBlurDetectorInputE_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGBlurDetector();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DetectMotionBlur", (const char *)&unk_249D51699, v1, 2u);
  }

}

void vg::frame_selection::VGBlurDetectorImpl::resetPreviousState(vg::frame_selection::VGBlurDetectorImpl *this)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  __VGLogSharedInstance();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_249CAD000, v2, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::resetPreviousState: resetting previous state of the detector ", v4, 2u);
  }

  if (*((_BYTE *)this + 24))
  {
    v3 = *(void **)this;
    if (*(_QWORD *)this)
    {
      *((_QWORD *)this + 1) = v3;
      operator delete(v3);
    }
    *((_BYTE *)this + 24) = 0;
  }
  *((_QWORD *)this + 4) = 0;
}

double vg::frame_selection::VGBlurDetector::create@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = 0x3F80000041F00000;
  v4 = 0;
  return vg::frame_selection::VGBlurDetector::create((uint64_t)&v3, a1);
}

double vg::frame_selection::VGBlurDetector::create@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;

  v4 = (_QWORD *)operator new();
  v5 = operator new();
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)v5 = 0u;
  *v4 = v5;
  result = *(double *)a1;
  *(_QWORD *)(v5 + 40) = *(_QWORD *)a1;
  *(_BYTE *)(v5 + 48) = *(_BYTE *)(a1 + 8);
  *a2 = v4;
  return result;
}

void sub_249CDDC74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

vg::frame_selection::VGBlurDetector *vg::frame_selection::VGBlurDetector::VGBlurDetector(vg::frame_selection::VGBlurDetector *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void vg::frame_selection::VGBlurDetector::~VGBlurDetector(vg::frame_selection::VGBlurDetector *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::frame_selection::VGBlurDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::frame_selection::VGBlurDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

unint64_t vg::frame_selection::VGBlurDetector::detectMotionBlur(uint64_t *a1, double *a2)
{
  return vg::frame_selection::VGBlurDetectorImpl::detectMotionBlur(*a1, a2);
}

void vg::frame_selection::VGBlurDetector::resetPreviousState(vg::frame_selection::VGBlurDetectorImpl **this)
{
  vg::frame_selection::VGBlurDetectorImpl::resetPreviousState(*this);
}

_QWORD *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_249CDDE18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL19VGLogVGBlurDetectorv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGBlurDetector");
  v1 = (void *)VGLogVGBlurDetector(void)::handle;
  VGLogVGBlurDetector(void)::handle = (uint64_t)v0;

}

void sub_249CDDE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::default_delete<vg::frame_selection::VGBlurDetectorImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v2 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v2;
        operator delete(v2);
      }
    }
    JUMPOUT(0x24BD02D60);
  }
}

uint64_t vg::frame_selection::metrics::sendStartEvent(vg::frame_selection::metrics *this)
{
  vg::shared::metrics *isSupported;
  char *v2;
  NSDictionary *v3;
  uint64_t v4;

  isSupported = (vg::shared::metrics *)vg::shared::metrics::isSupported(this);
  if (!(_DWORD)isSupported)
    return 0;
  vg::shared::metrics::createDictionary(isSupported);
  v2 = (char *)objc_claimAutoreleasedReturnValue();
  v4 = vg::shared::metrics::sendEvent((vg::shared::metrics *)"com.apple.visage.frameSelectionStart", v2, v3);

  return v4;
}

void sub_249CDDF48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vg::frame_selection::metrics::sendCompleteEvent(vg::frame_selection::metrics *this, const Data *a2)
{
  vg::shared::metrics *isSupported;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t i;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  const char *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSDictionary *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  const char *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  uint8_t buf[8];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  isSupported = (vg::shared::metrics *)vg::shared::metrics::isSupported(this);
  if (!(_DWORD)isSupported)
    return 0;
  if (!*((_QWORD *)this + 1))
  {
    __VGLogSharedInstance();
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v56, OS_LOG_TYPE_ERROR, " Invalid metrics data: no processed frame ", buf, 2u);
    }

    return 0;
  }
  vg::shared::metrics::createDictionary(isSupported);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "stateFullyComplete");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, v6);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)this + 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "counterNumProcessedFrames");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, v8);

  v9 = (uint64_t *)((char *)this + 16);
  for (i = -1; i != 41; ++i)
  {
    v11 = *v9++;
    if (v11 && i < 0x29)
    {
      v12 = off_251B230D0[i];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v13, v14);

    }
  }
  v15 = 0;
  *(_QWORD *)buf = 0x100000000;
  do
  {
    v16 = *(_DWORD *)&buf[4 * v15];
    v17 = (_QWORD *)((char *)this + 24 * v16 + 352);
    v20 = (_QWORD *)*v17;
    v19 = v17 + 1;
    v18 = v20;
    if (v20 != v19)
    {
      do
      {
        v21 = v18[4];
        if (v16 == 1)
        {
          if (!v21)
          {
            v22 = "counterPosePitch0NumCaptures";
            goto LABEL_18;
          }
          if (v21 == 1)
          {
            v22 = "counterPosePitch1NumCaptures";
            goto LABEL_18;
          }
        }
        else if (!v16 && v21 < 3)
        {
          v22 = off_251B23218[v21];
LABEL_18:
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v18[5]);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v23, v24);

        }
        v25 = (_QWORD *)v18[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v18[2];
            v27 = *v26 == (_QWORD)v18;
            v18 = v26;
          }
          while (!v27);
        }
        v18 = v26;
      }
      while (v26 != v19);
    }
    ++v15;
  }
  while (v15 != 2);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (unint64_t)(float)((float)(unint64_t)(*((_QWORD *)this + 51) - *((_QWORD *)this + 50)) * 0.001));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "timingDurationUS");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v28, v29);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (unint64_t)(float)((float)(unint64_t)(*((_QWORD *)this + 52) / *((_QWORD *)this + 1)) * 0.001));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "timingAverageProcessDurationUS");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v30, v31);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (unint64_t)(float)((float)(unint64_t)(*((_QWORD *)this + 53) / *((_QWORD *)this + 1)) * 0.001));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "timingAverageFaceTrackingDurationUS");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v32, v33);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (unint64_t)(float)((float)(unint64_t)(*((_QWORD *)this + 54) / *((_QWORD *)this + 1)) * 0.001));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "timingAverageFaceSelectorDurationUS");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v34, v35);

  v37 = 0;
  *(_QWORD *)buf = 0x100000000;
  do
  {
    v38 = *(_DWORD *)&buf[4 * v37];
    v39 = (_QWORD *)((char *)this + 24 * v38 + 440);
    v42 = (_QWORD *)*v39;
    v41 = v39 + 1;
    v40 = v42;
    if (v42 != v41)
    {
      do
      {
        v43 = v40[4];
        if (v38 == 1)
        {
          if (!v43)
          {
            v44 = "timingPosePitch0FirstCaptureTimeUS";
            goto LABEL_36;
          }
          if (v43 == 1)
          {
            v44 = "timingPosePitch1FirstCaptureTimeUS";
            goto LABEL_36;
          }
        }
        else if (!v38 && v43 < 3)
        {
          v44 = off_251B23230[v43];
LABEL_36:
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (unint64_t)(float)((float)(unint64_t)(v40[5] - *((_QWORD *)this + 50)) * 0.001));
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v44);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v45, v46);

        }
        v47 = (_QWORD *)v40[1];
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = (_QWORD *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (_QWORD *)v40[2];
            v27 = *v48 == (_QWORD)v40;
            v40 = v48;
          }
          while (!v27);
        }
        v40 = v48;
      }
      while (v48 != v41);
    }
    ++v37;
  }
  while (v37 != 2);
  v49 = *((_QWORD *)this + 61);
  v50 = *((_QWORD *)this + 62);
  v51 = v50 >= v49;
  v52 = v50 - v49;
  if (v52 != 0 && v51)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v52 >> 10);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "memoryUsageKB");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v53, v54);

  }
  v55 = vg::shared::metrics::sendEvent((vg::shared::metrics *)"com.apple.visage.frameSelectionComplete", (char *)v4, v36);

  return v55;
}

void sub_249CDE510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CDE968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CDE9C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249CDEB14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249CDEC90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  __57__VGFaceFittingFrameSelector_getFaceKitTrackedLandmarks___block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGFaceFittingFrameSelector(void)
{
  if (VGLogVGFaceFittingFrameSelector(void)::onceToken != -1)
    dispatch_once(&VGLogVGFaceFittingFrameSelector(void)::onceToken, &__block_literal_global_254);
  return (id)VGLogVGFaceFittingFrameSelector(void)::handle;
}

void sub_249CDEEFC(_Unwind_Exception *a1)
{
  __67__VGFaceFittingFrameSelector_checkDistanceFilter_frameTimestampMS___block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CDF0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  __69__VGFaceFittingFrameSelector_checkMotionBlurFilter_frameTimestampMS___block_invoke();

  _Unwind_Resume(a1);
}

void sub_249CDF2E4(_Unwind_Exception *a1)
{
  void *v1;

  __54__VGFaceFittingFrameSelector_getValidDataFrameBounds___block_invoke();

  _Unwind_Resume(a1);
}

void sub_249CDF768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_249CDF970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CDFF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_249CE0E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  __91__VGFaceFittingFrameSelector_addPoseWithCaptureData_tracking_externalTracking_metricsData___block_invoke();
  _Unwind_Resume(a1);
}

void sub_249CE1290(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;

  vg::frame_selection::FrameRejectionState::~FrameRejectionState(v2);
  _Unwind_Resume(a1);
}

void sub_249CE15A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249CE16EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CE17B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249CE1A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249CE1BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL31VGLogVGFaceFittingFrameSelectorv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGFaceFittingFrameSelector");
  v1 = (void *)VGLogVGFaceFittingFrameSelector(void)::handle;
  VGLogVGFaceFittingFrameSelector(void)::handle = (uint64_t)v0;

}

void sub_249CE1CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

vg::frame_selection::VGBlurDetector *std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100](vg::frame_selection::VGBlurDetector **a1, vg::frame_selection::VGBlurDetector *a2)
{
  vg::frame_selection::VGBlurDetector *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::frame_selection::VGBlurDetector::~VGBlurDetector(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

id vg::frame_selection::VGEarSelectionState::leftEarYawAngleCaptured(void **this)
{
  return vg::frame_selection::detail::capturedStatesFromCapturedPoses(this[25]);
}

id vg::frame_selection::detail::capturedStatesFromCapturedPoses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        v8 = (void *)MEMORY[0x24BDD16E0];
        objc_msgSend(v3, "objectForKey:", v7, (_QWORD)v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "numberWithBool:", objc_msgSend(v9, "valid"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v7);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

  v11 = (void *)objc_msgSend(v2, "copy");
  return v11;
}

void sub_249CE2138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarSelectionState::rightEarYawAngleCaptured(void **this)
{
  return vg::frame_selection::detail::capturedStatesFromCapturedPoses(this[26]);
}

uint64_t vg::frame_selection::VGEarFrameSelectorImpl::init(vg::frame_selection::VGEarFrameSelectorImpl *this, const vg::frame_selection::VGEarCaptureOptions *a2)
{
  const std::string *v4;
  vg::ear_detection::EarBoundingBoxModel ***v5;
  vg::ear_detection::EarBoundingBoxModel ***v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  VGFrameSelector *v16;
  void *v17;
  VGFrameSelector *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  vg::frame_selection::VGBlurDetector **v24;
  int v25;
  uint64_t v26;
  vg::frame_selection::VGBlurDetector *v27;
  vg::frame_selection::VGBlurDetector *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  uint8_t *v32;
  vg::frame_selection::VGBlurDetector *v34[2];
  uint8_t buf[8];
  char v36;
  __int128 v37;
  int v38;
  std::string __p;

  v37 = *(_OWORD *)a2;
  v38 = *((_DWORD *)a2 + 4);
  v4 = (const std::string *)((char *)a2 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 13);
  }
  vg::ear_detection::EarPoseDetector::create((uint64_t)&v37, (uint64_t **)buf);
  v5 = *(vg::ear_detection::EarBoundingBoxModel ****)buf;
  *(_QWORD *)buf = 0;
  std::unique_ptr<vg::ear_detection::EarPoseDetector>::reset[abi:ne180100]((vg::ear_detection::EarBoundingBoxModel ****)this, v5);
  v6 = *(vg::ear_detection::EarBoundingBoxModel ****)buf;
  *(_QWORD *)buf = 0;
  if (v6)
  {
    vg::ear_detection::EarPoseDetector::~EarPoseDetector(v6);
    MEMORY[0x24BD02D60]();
  }
  if (!*(_QWORD *)this)
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " Unable to create ear pose detector ", buf, 2u);
    }
    goto LABEL_21;
  }
  v7 = *(_OWORD *)a2;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 97) = *(_OWORD *)((char *)a2 + 41);
  *(_OWORD *)((char *)this + 88) = v9;
  *(_OWORD *)((char *)this + 72) = v8;
  *(_OWORD *)((char *)this + 56) = v7;
  std::string::operator=((std::string *)this + 5, (const std::string *)((char *)a2 + 64));
  std::string::operator=((std::string *)this + 6, v4);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 14);
  objc_storeStrong((id *)this + 22, *((id *)a2 + 15));
  v10 = objc_opt_new();
  -[NSObject setYawFrameCount:](v10, "setYawFrameCount:", *((_QWORD *)a2 + 3));
  v11 = *((float *)a2 + 10) * 3.14159265 / 180.0;
  *(float *)&v11 = v11;
  -[NSObject setYawLimit:](v10, "setYawLimit:", v11);
  LODWORD(v12) = *((_DWORD *)a2 + 11);
  LODWORD(v13) = LODWORD(v12);
  LODWORD(v14) = LODWORD(v12);
  LODWORD(v15) = LODWORD(v12);
  -[NSObject setYawPosesFrustumOffsets:](v10, "setYawPosesFrustumOffsets:", v12, v13, v14, v15);
  -[NSObject setYawAngles:](v10, "setYawAngles:", *((_QWORD *)this + 22));
  v16 = -[VGFrameSelector initWithOptions:]([VGFrameSelector alloc], "initWithOptions:", v10);
  v17 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v16;

  v18 = -[VGFrameSelector initWithOptions:]([VGFrameSelector alloc], "initWithOptions:", v10);
  v19 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v18;

  if (!*((_QWORD *)this + 1) || !*((_QWORD *)this + 2))
  {
    __VGLogSharedInstance();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v31 = " Unable to create frame selector ";
      v32 = buf;
      goto LABEL_17;
    }
LABEL_18:

LABEL_21:
    v26 = 0;
    goto LABEL_22;
  }
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  v20 = objc_opt_new();
  v21 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v20;

  v22 = objc_opt_new();
  v23 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v22;

  v24 = (vg::frame_selection::VGBlurDetector **)((char *)this + 200);
  std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0);
  v25 = *((unsigned __int8 *)this + 168);
  v26 = 1;
  if (v25)
  {
    *(_DWORD *)buf = 1106247680;
    *(_DWORD *)&buf[4] = *((_DWORD *)a2 + 29);
    v36 = 1;
    vg::frame_selection::VGBlurDetector::create((uint64_t)buf, v34);
    v27 = v34[0];
    v34[0] = 0;
    std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100](v24, v27);
    v28 = v34[0];
    v34[0] = 0;
    if (v28)
    {
      vg::frame_selection::VGBlurDetector::~VGBlurDetector(v28);
      MEMORY[0x24BD02D60](v29);
    }
    if (!*v24)
    {
      __VGLogSharedInstance();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v34[0]) = 0;
        v31 = " Unable to instantiate blur detector ";
        v32 = (uint8_t *)v34;
LABEL_17:
        _os_log_impl(&dword_249CAD000, v30, OS_LOG_TYPE_ERROR, v31, v32, 2u);
        goto LABEL_18;
      }
      goto LABEL_18;
    }
  }
LABEL_22:

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v26;
}

void sub_249CE24D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::enrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  void *v1;
  void *v2;

  vg::frame_selection::VGEarFrameSelectorImpl::allPoseSelectors(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors((uint64_t)v1, v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_249CE254C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v7), "yawResults", (_QWORD)v12);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "allValues");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObjectsFromArray:", v9);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  v10 = (void *)objc_msgSend(v3, "copy");
  return v10;
}

void sub_249CE26AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::allPoseSelectors(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 2);
  v3[0] = *((_QWORD *)this + 1);
  v3[1] = v1;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v3, 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  void *v1;
  void *v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v4[0] = *((_QWORD *)this + 1);
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors((uint64_t)v1, v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_249CE27EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  void *v1;
  void *v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v4[0] = *((_QWORD *)this + 2);
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors((uint64_t)v1, v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_249CE288C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelectorImpl::currentState(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  unsigned int v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  vg::frame_selection::VGEarFrameSelectorImpl::allPoseSelectors((vg::frame_selection::VGEarFrameSelectorImpl *)this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        v7 += objc_msgSend(v10, "remainingPosesCount", (_QWORD)v12);
        v6 += objc_msgSend(v10, "requiredPosesCount");
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_BYTE *)(a2 + 108) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 1) = v6 == 0;
  if (v6)
  {
    *(_BYTE *)a2 = v7 == 0;
    *(float *)(a2 + 4) = (float)(v6 - v7) / (float)v6;
    objc_msgSend(this[1], "results");
    *(_QWORD *)(a2 + 200) = objc_claimAutoreleasedReturnValue();
    objc_msgSend(this[2], "results");
    *(_QWORD *)(a2 + 208) = objc_claimAutoreleasedReturnValue();
  }
  __VGLogSharedInstance();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v17 = v7;
    v18 = 1024;
    v19 = v6;
    _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_DEBUG, " %u/%u ", buf, 0xEu);
  }

}

void sub_249CE2AAC(_Unwind_Exception *a1)
{
  id *v1;

  vg::frame_selection::VGEarSelectionState::~VGEarSelectionState(v1);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelectorImpl::addPoseWithCaptureData(vg::frame_selection::VGEarFrameSelectorImpl *this@<X0>, VGCaptureData *a2@<X1>, uint64_t a3@<X8>)
{
  VGCaptureData *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double Seconds;
  IOSurface *v14;
  IOSurface *v15;
  vg::ear_detection::EarPoseDetectorImpl **v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  NSObject *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  NSObject *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  vg::frame_selection::VGBlurDetectorImpl **v34;
  NSObject *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char v53;
  char v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  id v62;
  unint64_t v63;
  void *v64;
  void *v70;
  NSObject *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  void *v87;
  _BOOL4 v89;
  NSObject *v90;
  const __CFString *v91;
  CFDictionaryRef DictionaryRepresentation;
  void *v93;
  void *v94;
  void *v95;
  unint64_t v96;
  IOSurface *v97;
  IOSurface *v98;
  void *v99;
  char *v100;
  char *v101;
  CMTime time;
  _BYTE v103[32];
  char v104;
  uint8_t v105[4];
  unint64_t v106;
  uint8_t v107[16];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *v115;
  _BYTE *v116;
  uint64_t v117;
  void *v118;
  _BYTE *v119;
  uint64_t v120;
  uint8_t buf[16];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  const void *v129;
  uint64_t v130;
  const void *v131;
  uint64_t v132;
  char v133;
  int v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  void *v144[2];
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  int v148;
  __int128 v149;
  uint64_t v150;
  simd::float3x3 v151;
  CGRect v152;

  v150 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  vg::frame_selection::VGEarFrameSelectorImpl::currentState((id *)this, (uint64_t)&v135);
  v148 = 1;
  if (BYTE1(v135))
  {
    v6 = 0;
    *(_QWORD *)a3 = v135;
    v7 = v147;
    *(_QWORD *)(a3 + 160) = v145;
    *(_QWORD *)(a3 + 184) = v7;
    v8 = v141;
    *(_OWORD *)(a3 + 80) = v140;
    *(_OWORD *)(a3 + 96) = v8;
    v9 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v9;
    v10 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v10;
    v11 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v11;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    v145 = 0;
    v146 = 0uLL;
    v147 = 0;
    *(_DWORD *)(a3 + 192) = 1;
    v12 = v149;
    v149 = 0uLL;
    *(_OWORD *)(a3 + 200) = v12;
    goto LABEL_79;
  }
  if (v5)
    -[VGCaptureData timestamp](v5, "timestamp");
  else
    memset(&time, 0, sizeof(time));
  Seconds = CMTimeGetSeconds(&time);
  CVPixelBufferGetIOSurface(-[VGCaptureData yuvRectified](v5, "yuvRectified"));
  v14 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  if (!v14)
  {
    __VGLogSharedInstance();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v20, OS_LOG_TYPE_ERROR, " color image must be IOSurface backend. ", buf, 2u);
    }

    *(_QWORD *)a3 = v135;
    v21 = v147;
    *(_QWORD *)(a3 + 160) = v145;
    v22 = v141;
    *(_OWORD *)(a3 + 80) = v140;
    *(_OWORD *)(a3 + 96) = v22;
    v23 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v23;
    v24 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v24;
    v25 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v25;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(_QWORD *)(a3 + 184) = v21;
    v145 = 0;
    v146 = 0uLL;
    v147 = 0;
    *(_DWORD *)(a3 + 192) = v148;
    v26 = v149;
    v149 = 0uLL;
    *(_OWORD *)(a3 + 200) = v26;
    goto LABEL_78;
  }
  CVPixelBufferGetIOSurface(-[VGCaptureData depth](v5, "depth"));
  v15 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    __VGLogSharedInstance();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v27, OS_LOG_TYPE_ERROR, " depth image must be IOSurface backend. ", buf, 2u);
    }

    *(_QWORD *)a3 = v135;
    v28 = v147;
    *(_QWORD *)(a3 + 160) = v145;
    v29 = v141;
    *(_OWORD *)(a3 + 80) = v140;
    *(_OWORD *)(a3 + 96) = v29;
    v30 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v30;
    v31 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v31;
    v32 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v32;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(_QWORD *)(a3 + 184) = v28;
    v145 = 0;
    v146 = 0uLL;
    v147 = 0;
    *(_DWORD *)(a3 + 192) = v148;
    v33 = v149;
    v149 = 0uLL;
    *(_OWORD *)(a3 + 200) = v33;
    goto LABEL_77;
  }
  v98 = v14;
  v16 = *(vg::ear_detection::EarPoseDetectorImpl ***)this;
  -[VGCaptureData depthIntrinsics](v5, "depthIntrinsics");
  vg::ear_detection::EarPoseDetector::detectPose(v16, v98, v15, v151, (uint64_t)buf);
  v148 = v134;
  if (!v133 || v134)
  {
    v34 = (vg::frame_selection::VGBlurDetectorImpl **)*((_QWORD *)this + 25);
    v14 = v98;
    if (v34)
      vg::frame_selection::VGBlurDetector::resetPreviousState(v34);
    __VGLogSharedInstance();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v107 = 134217984;
      *(_QWORD *)&v107[4] = (unint64_t)(Seconds * 1000.0);
      _os_log_impl(&dword_249CAD000, v35, OS_LOG_TYPE_DEBUG, " Frame#%zu rejected because No Ear detected ", v107, 0xCu);
    }

    *(_QWORD *)a3 = v135;
    v36 = v147;
    *(_QWORD *)(a3 + 160) = v145;
    v37 = v141;
    *(_OWORD *)(a3 + 80) = v140;
    *(_OWORD *)(a3 + 96) = v37;
    v38 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v38;
    v39 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v39;
    v40 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v40;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(_QWORD *)(a3 + 184) = v36;
    v145 = 0;
    v146 = 0uLL;
    v147 = 0;
    *(_DWORD *)(a3 + 192) = v148;
    v41 = v149;
    v149 = 0uLL;
    *(_OWORD *)(a3 + 200) = v41;
    goto LABEL_76;
  }
  v111 = v125;
  v112 = v126;
  v113 = v127;
  v114 = v128;
  *(_OWORD *)v107 = *(_OWORD *)buf;
  v108 = v122;
  v109 = v123;
  v110 = v124;
  v116 = 0;
  v117 = 0;
  v115 = 0;
  v14 = v98;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v115, v129, v130, (v130 - (uint64_t)v129) >> 2);
  v118 = 0;
  v119 = 0;
  v120 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v118, v131, v132, (v132 - (uint64_t)v131) >> 2);
  v140 = v111;
  v141 = v112;
  v142 = v113;
  v143 = v114;
  v136 = *(_OWORD *)v107;
  v137 = v108;
  v138 = v109;
  v139 = v110;
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v144, (char *)v115, (uint64_t)v116, (v116 - (_BYTE *)v115) >> 2);
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v146, (char *)v118, (uint64_t)v119, (v119 - (_BYTE *)v118) >> 2);
  if (*((_QWORD *)this + 25))
  {
    v97 = v15;
    v17 = v116 - (_BYTE *)v115;
    v18 = (unint64_t)((v116 - (_BYTE *)v115) >> 2) >> 1;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&v99, v18);
    v96 = (unint64_t)(Seconds * 1000.0);
    if (v17 > 7)
    {
      v42 = 0;
      if (v18 <= 1)
        v43 = 1;
      else
        v43 = v18;
      v19 = v100;
      do
      {
        v44 = *((_QWORD *)v115 + v42);
        if (v19 >= v101)
        {
          v45 = (v19 - (_BYTE *)v99) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v46 = (v101 - (_BYTE *)v99) >> 2;
          if (v46 <= v45 + 1)
            v46 = v45 + 1;
          if ((unint64_t)(v101 - (_BYTE *)v99) >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          if (v47)
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v101, v47);
          else
            v48 = 0;
          v49 = &v48[8 * v45];
          *(_QWORD *)v49 = v44;
          v19 = v49 + 8;
          v51 = (char *)v99;
          v50 = v100;
          if (v100 != v99)
          {
            do
            {
              v52 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *((_QWORD *)v49 - 1) = v52;
              v49 -= 8;
            }
            while (v50 != v51);
            v50 = (char *)v99;
          }
          v99 = v49;
          v100 = v19;
          v101 = &v48[8 * v47];
          if (v50)
            operator delete(v50);
        }
        else
        {
          *(_QWORD *)v19 = v44;
          v19 += 8;
        }
        v100 = v19;
        ++v42;
      }
      while (v42 != v43);
    }
    else
    {
      v19 = v100;
    }
    *(_QWORD *)v103 = v96;
    memset(&v103[8], 0, 24);
    v14 = v98;
    v15 = v97;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v103[8], v99, (uint64_t)v19, (v19 - (_BYTE *)v99) >> 3);
    v53 = vg::frame_selection::VGBlurDetector::detectMotionBlur(*((uint64_t **)this + 25), (double *)v103);
    if (!v54 || v53)
    {
      __VGLogSharedInstance();
      v71 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v105 = 134217984;
        v106 = v96;
        _os_log_impl(&dword_249CAD000, v71, OS_LOG_TYPE_DEBUG, " Frame#%zu rejected because of motion blur ", v105, 0xCu);
      }

      v148 = 5;
      *(_QWORD *)a3 = v135;
      v72 = v141;
      *(_OWORD *)(a3 + 80) = v140;
      *(_OWORD *)(a3 + 96) = v72;
      v73 = v143;
      *(_OWORD *)(a3 + 112) = v142;
      *(_OWORD *)(a3 + 128) = v73;
      v74 = v137;
      *(_OWORD *)(a3 + 16) = v136;
      *(_OWORD *)(a3 + 32) = v74;
      v75 = v139;
      *(_OWORD *)(a3 + 48) = v138;
      *(_OWORD *)(a3 + 64) = v75;
      *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
      v76 = v147;
      *(_QWORD *)(a3 + 160) = v145;
      v144[1] = 0;
      v145 = 0;
      v144[0] = 0;
      *(_OWORD *)(a3 + 168) = v146;
      *(_QWORD *)(a3 + 184) = v76;
      v147 = 0;
      v146 = 0uLL;
      *(_DWORD *)(a3 + 192) = 5;
      v77 = v149;
      v149 = 0uLL;
      *(_OWORD *)(a3 + 200) = v77;
      if (*(_QWORD *)&v103[8])
      {
        *(_QWORD *)&v103[16] = *(_QWORD *)&v103[8];
        operator delete(*(void **)&v103[8]);
      }
      if (v99)
      {
        v100 = (char *)v99;
        operator delete(v99);
      }
      goto LABEL_72;
    }
    if (*(_QWORD *)&v103[8])
    {
      *(_QWORD *)&v103[16] = *(_QWORD *)&v103[8];
      operator delete(*(void **)&v103[8]);
    }
    if (v99)
    {
      v100 = (char *)v99;
      operator delete(v99);
    }
  }
  v55 = *((_QWORD *)this + 4) + 1;
  *((_QWORD *)this + 4) = v55;
  if (v55 > 1)
  {
    v62 = objc_alloc_init(MEMORY[0x24BDBCE70]);
    if (*(_DWORD *)v107 == 1)
    {
      v78 = *((_QWORD *)this + 5) + 1;
      *((_QWORD *)this + 5) = v78;
      if (v78 >= 2)
      {
        if ((objc_msgSend(*((id *)this + 2), "completed") & 1) == 0)
        {
          v87 = (void *)*((_QWORD *)this + 2);
          *(_QWORD *)v103 = 0;
          *(_QWORD *)&v103[8] = 0;
          __asm { FMOV            V4.2D, #1.0 }
          *(_OWORD *)&v103[16] = _Q4;
          v104 = 1;
          objc_msgSend(v87, "processCaptureData:trackingData:framePose:validDataFrameBounds:", v5, v62, v103, *(double *)&v108, *(double *)&v109, *(double *)&v110, *(double *)&v111);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        }
LABEL_67:
        v79 = 0;
LABEL_68:
        vg::frame_selection::VGEarFrameSelectorImpl::currentState((id *)this, a3);
        *(_DWORD *)(a3 + 192) = v148;
        vg::ear_detection::EarPose::operator=(a3 + 16, &v136);
        if (*(_BYTE *)a3)
        {
          *((_BYTE *)this + 24) = 1;
          if (*((_BYTE *)this + 112))
            vg::frame_selection::VGEarFrameSelectorImpl::writeToPath(this, (uint64_t *)this + 15);
        }
        goto LABEL_71;
      }
    }
    else
    {
      if (*(_DWORD *)v107)
        goto LABEL_67;
      v63 = *((_QWORD *)this + 6) + 1;
      *((_QWORD *)this + 6) = v63;
      if (v63 >= 2)
      {
        if ((objc_msgSend(*((id *)this + 1), "completed") & 1) == 0)
        {
          v64 = (void *)*((_QWORD *)this + 1);
          *(_QWORD *)v103 = 0;
          *(_QWORD *)&v103[8] = 0;
          __asm { FMOV            V4.2D, #1.0 }
          *(_OWORD *)&v103[16] = _Q4;
          v104 = 1;
          objc_msgSend(v64, "processCaptureData:trackingData:framePose:validDataFrameBounds:", v5, v62, v103, *(double *)&v108, *(double *)&v109, *(double *)&v110, *(double *)&v111);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_85:
          v79 = v70;
          if (v70)
          {
            objc_msgSend(v70, "rejectionState");
            v89 = *(_DWORD *)v103 == 0;

            if (v89)
            {
              __VGLogSharedInstance();
              v90 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
              {
                v91 = CFSTR("RIGHT");
                if (!*(_DWORD *)v107)
                  v91 = CFSTR("LEFT");
                *(_DWORD *)v103 = 138412802;
                *(_QWORD *)&v103[4] = v91;
                *(_WORD *)&v103[12] = 2048;
                *(double *)&v103[14] = *((float *)&v113 + 1);
                *(_WORD *)&v103[22] = 2048;
                *(double *)&v103[24] = *((float *)&v113 + 2);
                _os_log_impl(&dword_249CAD000, v90, OS_LOG_TYPE_DEBUG, " Captured Ear side %@, yaw %f , pitch %f ", v103, 0x20u);
              }

              v152.origin.x = *(float *)&v114;
              v152.origin.y = *((float *)&v114 + 1);
              v152.size.width = (float)(*((float *)&v114 + 2) - *(float *)&v114);
              v152.size.height = (float)(*((float *)&v114 + 3) - *((float *)&v114 + 1));
              DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v152);
              v93 = (void *)MEMORY[0x24BDD16E0];
              if (*(_DWORD *)v107)
                v94 = (void *)*((_QWORD *)this + 24);
              else
                v94 = (void *)*((_QWORD *)this + 23);
              objc_msgSend(v79, "angleInDegrees");
              objc_msgSend(v93, "numberWithFloat:");
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v94, "setObject:forKeyedSubscript:", DictionaryRepresentation, v95);

            }
          }
          goto LABEL_68;
        }
        goto LABEL_67;
      }
    }
    v79 = 0;
    *(_QWORD *)a3 = v135;
    v80 = v141;
    *(_OWORD *)(a3 + 80) = v140;
    *(_OWORD *)(a3 + 96) = v80;
    v81 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v81;
    v82 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v82;
    v83 = v138;
    v84 = v139;
    v85 = v147;
    *(_QWORD *)(a3 + 160) = v145;
    *(_OWORD *)(a3 + 48) = v83;
    *(_OWORD *)(a3 + 64) = v84;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v145 = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(_QWORD *)(a3 + 184) = v85;
    v147 = 0;
    v146 = 0uLL;
    *(_DWORD *)(a3 + 192) = v148;
    v86 = v149;
    v149 = 0uLL;
    *(_OWORD *)(a3 + 200) = v86;
LABEL_71:

    goto LABEL_72;
  }
  *(_QWORD *)a3 = v135;
  v56 = v141;
  *(_OWORD *)(a3 + 80) = v140;
  *(_OWORD *)(a3 + 96) = v56;
  v57 = v143;
  *(_OWORD *)(a3 + 112) = v142;
  *(_OWORD *)(a3 + 128) = v57;
  v58 = v137;
  *(_OWORD *)(a3 + 16) = v136;
  *(_OWORD *)(a3 + 32) = v58;
  v59 = v139;
  *(_OWORD *)(a3 + 48) = v138;
  *(_OWORD *)(a3 + 64) = v59;
  *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
  v60 = v147;
  *(_QWORD *)(a3 + 160) = v145;
  v144[1] = 0;
  v145 = 0;
  v144[0] = 0;
  *(_OWORD *)(a3 + 168) = v146;
  *(_QWORD *)(a3 + 184) = v60;
  v147 = 0;
  v146 = 0uLL;
  *(_DWORD *)(a3 + 192) = v148;
  v61 = v149;
  v149 = 0uLL;
  *(_OWORD *)(a3 + 200) = v61;
LABEL_72:
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
LABEL_76:
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
LABEL_77:

LABEL_78:
  v6 = (void *)*((_QWORD *)&v149 + 1);
LABEL_79:

  if ((_QWORD)v146)
  {
    *((_QWORD *)&v146 + 1) = v146;
    operator delete((void *)v146);
  }
  if (v144[0])
  {
    v144[1] = v144[0];
    operator delete(v144[0]);
  }

}

void sub_249CE363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&a29);
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a51);

  vg::frame_selection::VGEarSelectionState::~VGEarSelectionState((id *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::EarPose::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  if ((__int128 *)a1 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 128), *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 152), *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
  }
  return a1;
}

void vg::frame_selection::VGEarFrameSelectorImpl::writeToPath(vg::frame_selection::VGEarFrameSelectorImpl *a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  objc_object *v9;

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3);
  v9 = (objc_object *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[objc_object stringByAppendingPathComponent:](v9, "stringByAppendingPathComponent:", CFSTR("capturedata"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v5, 1, 0, 0);

  v6 = (void *)objc_opt_new();
  vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledPoses(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setLeftEarEnrolledPoses:", v7);

  vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledPoses(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setRightEarEnrolledPoses:", v8);

  objc_msgSend(v6, "setLeftEarEnrolledYawToBoundingBox:", *((_QWORD *)a1 + 23));
  objc_msgSend(v6, "setRightEarEnrolledYawToBoundingBox:", *((_QWORD *)a1 + 24));
  vg::common::dumpDebugObject((vg::common *)v6, v9, (NSString *)1);

}

void sub_249CE3940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledYawToBoundingBox(id *this)
{
  return this[23];
}

id vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledYawToBoundingBox(id *this)
{
  return this[24];
}

void vg::frame_selection::VGEarFrameSelector::create(vg::frame_selection::VGEarFrameSelectorImpl ***a1@<X8>)
{
  __int128 v3;
  int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  int v13;
  id v14;

  v3 = xmmword_249D3A610;
  v4 = 1061997773;
  v5 = xmmword_249D3A620;
  v6 = xmmword_249D3A630;
  v7 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v12 = 1;
  v13 = 1083808154;
  v14 = &unk_251B34988;
  vg::frame_selection::VGEarFrameSelector::create((vg::frame_selection::VGEarFrameSelector *)&v3, a1);

  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
}

void sub_249CE3A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  vg::frame_selection::VGEarCaptureOptions::~VGEarCaptureOptions((id *)&a9);
  _Unwind_Resume(a1);
}

vg::frame_selection::VGEarFrameSelectorImpl **vg::frame_selection::VGEarFrameSelector::create@<X0>(vg::frame_selection::VGEarFrameSelector *this@<X0>, vg::frame_selection::VGEarFrameSelectorImpl ***a2@<X8>)
{
  vg::frame_selection::VGEarFrameSelector *v5;
  vg::frame_selection::VGEarFrameSelectorImpl **v6;
  vg::frame_selection::VGEarFrameSelectorImpl **v8;

  v5 = (vg::frame_selection::VGEarFrameSelector *)operator new();
  vg::frame_selection::VGEarFrameSelector::VGEarFrameSelector(v5);
  v8 = (vg::frame_selection::VGEarFrameSelectorImpl **)v5;
  if ((vg::frame_selection::VGEarFrameSelectorImpl::init(*(vg::frame_selection::VGEarFrameSelectorImpl **)v5, this) & 1) != 0)
  {
    v6 = v8;
    v8 = 0;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return std::unique_ptr<vg::frame_selection::VGEarFrameSelector>::reset[abi:ne180100](&v8, 0);
}

void sub_249CE3B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<vg::frame_selection::VGEarFrameSelector>::reset[abi:ne180100]((vg::frame_selection::VGEarFrameSelectorImpl ***)va, 0);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelector::~VGEarFrameSelector(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
  std::unique_ptr<vg::frame_selection::VGEarFrameSelectorImpl>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<vg::frame_selection::VGEarFrameSelectorImpl>::reset[abi:ne180100](this, 0);
}

vg::frame_selection::VGEarFrameSelector *vg::frame_selection::VGEarFrameSelector::VGEarFrameSelector(vg::frame_selection::VGEarFrameSelector *this)
{
  vg::frame_selection::VGEarFrameSelectorImpl *v2;

  v2 = (vg::frame_selection::VGEarFrameSelectorImpl *)operator new();
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  vg::frame_selection::VGEarFrameSelectorImpl::VGEarFrameSelectorImpl(v2);
  *(_QWORD *)this = v2;
  return this;
}

void sub_249CE3C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x10B2C40C4E6D2A4);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelector::addPoseWithCaptureData(vg::frame_selection::VGEarFrameSelectorImpl **this@<X0>, VGCaptureData *a2@<X1>, uint64_t a3@<X8>)
{
  vg::frame_selection::VGEarFrameSelectorImpl::addPoseWithCaptureData(*this, a2, a3);
}

id vg::frame_selection::VGEarFrameSelector::enrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
  return vg::frame_selection::VGEarFrameSelectorImpl::enrolledPoses(*this);
}

id vg::frame_selection::VGEarFrameSelector::leftEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
  return vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledPoses(*this);
}

id vg::frame_selection::VGEarFrameSelector::rightEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
  return vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledPoses(*this);
}

void vg::frame_selection::VGEarFrameSelector::currentState(id **this@<X0>, uint64_t a2@<X8>)
{
  vg::frame_selection::VGEarFrameSelectorImpl::currentState(*this, a2);
}

void vg::frame_selection::VGEarFrameSelector::writeToPath(vg::frame_selection::VGEarFrameSelectorImpl **a1, uint64_t *a2)
{
  vg::frame_selection::VGEarFrameSelectorImpl::writeToPath(*a1, a2);
}

id vg::frame_selection::VGEarFrameSelector::leftEarEnrolledYawToBoundingBox(vg::frame_selection::VGEarFrameSelector *this)
{
  return *(id *)(*(_QWORD *)this + 184);
}

id vg::frame_selection::VGEarFrameSelector::rightEarEnrolledYawToBoundingBox(vg::frame_selection::VGEarFrameSelector *this)
{
  return *(id *)(*(_QWORD *)this + 192);
}

vg::frame_selection::VGEarFrameSelectorImpl *vg::frame_selection::VGEarFrameSelectorImpl::VGEarFrameSelectorImpl(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 56) = xmmword_249D3A610;
  *((_DWORD *)this + 18) = 1061997773;
  *((_OWORD *)this + 5) = xmmword_249D3A620;
  *((_OWORD *)this + 6) = xmmword_249D3A630;
  *((_BYTE *)this + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 15, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 18, "");
  *((_BYTE *)this + 168) = 1;
  *((_DWORD *)this + 43) = 1083808154;
  *((_QWORD *)this + 22) = &unk_251B34988;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  return this;
}

void sub_249CE3D18(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v2);

  std::unique_ptr<vg::ear_detection::EarPoseDetector>::reset[abi:ne180100]((vg::ear_detection::EarBoundingBoxModel ****)v1, 0);
  _Unwind_Resume(a1);
}

vg::ear_detection::EarBoundingBoxModel ***std::unique_ptr<vg::ear_detection::EarPoseDetector>::reset[abi:ne180100](vg::ear_detection::EarBoundingBoxModel ****a1, vg::ear_detection::EarBoundingBoxModel ***a2)
{
  vg::ear_detection::EarBoundingBoxModel ***result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarPoseDetector::~EarPoseDetector(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::frame_selection::VGEarFrameSelectorImpl *std::unique_ptr<vg::frame_selection::VGEarFrameSelectorImpl>::reset[abi:ne180100](vg::frame_selection::VGEarFrameSelectorImpl **a1, vg::frame_selection::VGEarFrameSelectorImpl *a2)
{
  vg::frame_selection::VGEarFrameSelectorImpl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::frame_selection::VGEarFrameSelectorImpl::~VGEarFrameSelectorImpl(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void vg::frame_selection::VGEarFrameSelectorImpl::~VGEarFrameSelectorImpl(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0);

  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));

  std::unique_ptr<vg::ear_detection::EarPoseDetector>::reset[abi:ne180100]((vg::ear_detection::EarBoundingBoxModel ****)this, 0);
}

void vg::hrtf::unwrapPhaseAngles(float **a1@<X0>, uint64_t a2@<X8>)
{
  float *v3;
  uint64_t v4;
  unint64_t v6;
  float *v7;
  float *v8;
  char *v9;
  float *v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float *v15;
  unint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  float *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float *v45;
  int v46;
  int v47;
  void *__p[3];

  v3 = a1[1];
  v4 = (char *)v3 - (char *)*a1;
  if (v3 == *a1)
    vg::hrtf::unwrapPhaseAngles();
  v6 = v4 >> 2;
  v47 = 0;
  std::vector<float>::vector(__p, v4 >> 2, &v47);
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    v9 = (char *)__p[0];
    v11 = *v7;
    v10 = v7 + 1;
    v12 = v11;
    *(float *)__p[0] = v11;
    if (v10 != v8)
    {
      v13 = (float *)(v9 + 4);
      do
      {
        v14 = *v10++;
        *v13++ = v14 - v12;
        v12 = v14;
      }
      while (v10 != v8);
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<float>::reserve((void **)a2, v4 >> 2);
  v15 = *a1;
  v17 = (_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 16);
  v18 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v18 >= v16)
  {
    v20 = *(_DWORD **)a2;
    v21 = ((uint64_t)v18 - *(_QWORD *)a2) >> 2;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v23 = v16 - (_QWORD)v20;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v24);
      v20 = *(_DWORD **)a2;
      v18 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[4 * v21];
    v27 = &v25[4 * v24];
    *(float *)v26 = *v15;
    v19 = (float *)(v26 + 4);
    while (v18 != v20)
    {
      v28 = *--v18;
      *((_DWORD *)v26 - 1) = v28;
      v26 -= 4;
    }
    *(_QWORD *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v27;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v18 = *(_DWORD *)v15;
    v19 = (float *)(v18 + 1);
  }
  *(_QWORD *)(a2 + 8) = v19;
  if ((unint64_t)v4 >= 5)
  {
    if (v6 <= 2)
      v6 = 2;
    v29 = 1;
    v30 = 0.0;
    do
    {
      v31 = *((float *)__p[0] + v29);
      v32 = (float)(v31 + 3.1416) - (float)(floorf((float)(v31 + 3.1416) / 6.2832) * 6.2832);
      v33 = v31 > 0.0 && v32 == 0.0;
      v34 = v32 + -3.1416;
      if (v33)
        v34 = 3.1416;
      v35 = fabsf(v31);
      v36 = v34 - v31;
      if (v35 < 3.1416)
        v36 = 0.0;
      v30 = v30 + v36;
      v37 = (*a1)[v29] + v30;
      if ((unint64_t)v19 >= *v17)
      {
        v39 = *(float **)a2;
        v40 = ((uint64_t)v19 - *(_QWORD *)a2) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v42 = *v17 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v43);
          v39 = *(float **)a2;
          v19 = *(float **)(a2 + 8);
        }
        else
        {
          v44 = 0;
        }
        v45 = (float *)&v44[4 * v40];
        *v45 = v37;
        v38 = v45 + 1;
        while (v19 != v39)
        {
          v46 = *((_DWORD *)v19-- - 1);
          *((_DWORD *)v45-- - 1) = v46;
        }
        *(_QWORD *)a2 = v45;
        *(_QWORD *)(a2 + 8) = v38;
        *(_QWORD *)(a2 + 16) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v19 = v37;
        v38 = v19 + 1;
      }
      *(_QWORD *)(a2 + 8) = v38;
      ++v29;
      v19 = v38;
    }
    while (v29 != v6);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_249CE64AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::tukeyWindow(unint64_t this@<X0>, int32x2_t a2@<D0>, _QWORD *a3@<X8>)
{
  float v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t v9;
  uint64x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  unint64_t v18;
  float32x2_t v19;
  float v20;
  int32x2_t v21;
  unint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  float32x2_t v25;
  unint64_t v26;
  float *v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  int32x2_t v32;
  int64x2_t v33;
  uint64x2_t v34;
  float v35;
  float v36;
  float v37;
  int32x2_t v38;
  float v39;
  int64x2_t v40;
  int64x2_t v41;
  int v42;

  if (this <= 1)
    vg::hrtf::tukeyWindow();
  v4 = *(float *)a2.i32;
  if (*(float *)a2.i32 <= 0.0)
    vg::hrtf::tukeyWindow();
  if (*(float *)a2.i32 >= 1.0)
    vg::hrtf::tukeyWindow();
  *(float *)a2.i32 = (float)(this - 1) * *(float *)a2.i32;
  v5 = vcvtms_u32_f32(*(float *)a2.i32 * 0.5);
  v6 = (char *)(this - v5);
  if (this <= v5)
    vg::hrtf::tukeyWindow();
  v42 = 1065353216;
  *(float *)a2.i32 = 2.0 / *(float *)a2.i32;
  v32 = a2;
  v7 = 0;
  v8 = *std::vector<float>::vector(a3, this, &v42);
  v34 = (uint64x2_t)vdupq_n_s64(v5);
  v9 = (float32x2_t)vdup_lane_s32(v32, 0);
  v10 = (uint64x2_t)xmmword_249D3AD10;
  __asm { FMOV            V11.2S, #-1.0 }
  v16 = (float32x2_t)vdup_n_s32(0x40490FDBu);
  v33 = vdupq_n_s64(2uLL);
  do
  {
    v38 = vmovn_s64((int64x2_t)vcgeq_u64(v34, v10));
    v40 = (int64x2_t)v10;
    v17.f32[0] = (float)v7;
    v18 = v7 + 1;
    v17.f32[1] = (float)(v7 + 1);
    v19 = vmul_f32(vmla_f32(_D11, v9, v17), v16);
    v35 = v19.f32[0];
    v36 = cosf(v19.f32[1]);
    v20 = cosf(v35);
    if ((v38.i8[0] & 1) != 0)
      *(float *)(v8 + 4 * v7) = (float)(v20 + 1.0) * 0.5;
    if ((v38.i8[4] & 1) != 0)
      *(float *)(v8 + 4 * v7 + 4) = (float)(v36 + 1.0) * 0.5;
    v21.i32[1] = v33.i32[1];
    v10 = (uint64x2_t)vaddq_s64(v40, v33);
    v7 += 2;
  }
  while (v18 - 1 != (v5 & 0xFFFFFFFFFFFFFFFELL));
  if (__CFADD__(~v5, this))
  {
    v22 = 0;
    *(float *)v21.i32 = (float)(-2.0 / v4) + 1.0;
    v23 = v8 - 4 * v5;
    v24 = (float32x2_t)vdup_lane_s32(v32, 0);
    v25 = (float32x2_t)vdup_lane_s32(v21, 0);
    v26 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 2;
    v27 = (float *)(v23 + 4 * this);
    v28 = (float32x2_t)vdup_n_s32(0x40490FDBu);
    do
    {
      *(int32x2_t *)v41.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v34, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v22), (int8x16_t)xmmword_249D3AD10)));
      v29.f32[0] = (float)(unint64_t)&v6[v22 - 1];
      v29.f32[1] = (float)(unint64_t)&v6[v22];
      v30 = vmul_f32(vmla_f32(v25, v24, v29), v28);
      v37 = v30.f32[0];
      v39 = cosf(v30.f32[1]);
      v31 = cosf(v37);
      if ((v41.i8[0] & 1) != 0)
        *(v27 - 1) = (float)(v31 + 1.0) * 0.5;
      if ((v41.i8[4] & 1) != 0)
        *v27 = (float)(v39 + 1.0) * 0.5;
      v22 += 2;
      v27 += 2;
    }
    while (v26 != v22);
  }
}

void vg::hrtf::getPhaseShiftParameters(float **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  __float2 v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;
  float v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  float *v32;
  int v33;
  unint64_t v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  float *v48;
  float *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  float *v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  float *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  float *v67;
  float *v68;
  float *v69;
  float *v70;
  uint64_t v71;
  int v72;
  float v73;
  float v74;
  float v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  float *v82;
  char *v83;
  char *v84;
  float *v85;
  uint64_t v86;
  int v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  void *__p[3];
  void *v107;
  float *v108;
  unint64_t v109;
  float *v110;
  char *v111;
  unint64_t v112;
  float *v113;
  float *v114;
  unint64_t v115;
  float *v116;
  float *v117;
  unint64_t v118;
  float *v119;
  float *v120;
  unint64_t v121;

  v8 = __sincosf_stret(6283.2 / a4);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<float>::reserve((void **)&v119, a2);
  std::vector<float>::reserve((void **)&v116, a2);
  if (a2)
  {
    v9 = 0;
    v10 = a4 / (float)a2;
    v11 = 6.2832 / a4;
    do
    {
      v12 = v10 * (float)v9;
      v13 = v120;
      if ((unint64_t)v120 >= v121)
      {
        v15 = v119;
        v16 = v120 - v119;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v18 = v121 - (_QWORD)v119;
        if ((uint64_t)(v121 - (_QWORD)v119) >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v121, v19);
          v15 = v119;
          v13 = v120;
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[4 * v16];
        *v21 = v12;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *((_DWORD *)v13-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        v119 = v21;
        v120 = v14;
        v121 = (unint64_t)&v20[4 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v120 = v12;
        v14 = v13 + 1;
      }
      v120 = v14;
      v23 = v11 * v119[v9];
      v24 = v117;
      if ((unint64_t)v117 >= v118)
      {
        v26 = v116;
        v27 = v117 - v116;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v29 = v118 - (_QWORD)v116;
        if ((uint64_t)(v118 - (_QWORD)v116) >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v118, v30);
          v26 = v116;
          v24 = v117;
        }
        else
        {
          v31 = 0;
        }
        v32 = (float *)&v31[4 * v27];
        *v32 = v23;
        v25 = v32 + 1;
        while (v24 != v26)
        {
          v33 = *((_DWORD *)v24-- - 1);
          *((_DWORD *)v32-- - 1) = v33;
        }
        v116 = v32;
        v117 = v25;
        v118 = (unint64_t)&v31[4 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v117 = v23;
        v25 = v24 + 1;
      }
      v117 = v25;
      ++v9;
    }
    while (v9 != a2);
  }
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v34 = ((char *)a1[1] - (char *)*a1) >> 3;
  std::vector<float>::reserve((void **)&v113, v34);
  std::vector<std::array<float,3ul>>::reserve((char **)&v110, v34);
  std::vector<std::array<float,3ul>>::reserve((char **)&v107, v34);
  v35 = *a1;
  v36 = a1[1];
  if (*a1 != v36)
  {
    v37 = v8.__cosval * -2.0;
    v38 = v8.__sinval * 0.5;
    do
    {
      v39 = 90.0 - fabsf(fmodf(v35[1], 180.0) + -90.0);
      v40 = *v35 * 3.14159265 / 180.0;
      v41 = cosf(v40);
      if (v41 < 0.0)
        v41 = 0.0;
      v42 = v39 + -36.0;
      v43 = sqrtf(v41);
      if ((float)(v39 + -36.0) <= 0.0)
      {
        v44 = v39 * 0.0;
        v45 = (float)(v39 * 0.041667) * v43;
      }
      else
      {
        v44 = (float)(v42 * 0.029089) + 0.0;
        v45 = (float)((float)(v42 * -0.027778) * v43) + 1.5;
      }
      v46 = v43 * v44;
      v47 = v114;
      if ((unint64_t)v114 >= v115)
      {
        v49 = v113;
        v50 = v114 - v113;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v52 = v115 - (_QWORD)v113;
        if ((uint64_t)(v115 - (_QWORD)v113) >> 1 > v51)
          v51 = v52 >> 1;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v115, v53);
          v49 = v113;
          v47 = v114;
        }
        else
        {
          v54 = 0;
        }
        v55 = (float *)&v54[4 * v50];
        *v55 = v46;
        v48 = v55 + 1;
        while (v47 != v49)
        {
          v56 = *((_DWORD *)v47-- - 1);
          *((_DWORD *)v55-- - 1) = v56;
        }
        v113 = v55;
        v114 = v48;
        v115 = (unint64_t)&v54[4 * v53];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *v114 = v46;
        v48 = v47 + 1;
      }
      v114 = v48;
      v57 = v45 / 20.0;
      v58 = sqrtf(__exp10f(v57));
      v59 = (float)(v38 * v58) + 1.0;
      v60 = (float)((float)-(float)(v8.__sinval * 0.5) * v58) + 1.0;
      v61 = v108;
      if ((unint64_t)v108 >= v109)
      {
        v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (_BYTE *)v107) >> 2);
        v64 = v63 + 1;
        if (v63 + 1 > 0x1555555555555555)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v109 - (_QWORD)v107) >> 2) > v64)
          v64 = 0x5555555555555556 * ((uint64_t)(v109 - (_QWORD)v107) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - (_QWORD)v107) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v65 = 0x1555555555555555;
        else
          v65 = v64;
        if (v65)
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v109, v65);
        else
          v66 = 0;
        v67 = (float *)&v66[12 * v63];
        *v67 = v59;
        v67[1] = v37;
        v67[2] = v60;
        v69 = (float *)v107;
        v68 = v108;
        v70 = v67;
        if (v108 != v107)
        {
          do
          {
            v71 = *(_QWORD *)(v68 - 3);
            v68 -= 3;
            v72 = *((_DWORD *)v68 + 2);
            *(_QWORD *)(v70 - 3) = v71;
            v70 -= 3;
            *((_DWORD *)v70 + 2) = v72;
          }
          while (v68 != v69);
          v68 = (float *)v107;
        }
        v62 = v67 + 3;
        v107 = v70;
        v108 = v67 + 3;
        v109 = (unint64_t)&v66[12 * v65];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *v108 = v59;
        v61[1] = v37;
        v62 = v61 + 3;
        v61[2] = v60;
      }
      v108 = v62;
      v73 = v38 / sqrtf(__exp10f(v57));
      v74 = v73 + 1.0;
      v75 = 1.0 - v73;
      v76 = v111;
      if ((unint64_t)v111 >= v112)
      {
        v78 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (char *)v110) >> 2);
        v79 = v78 + 1;
        if (v78 + 1 > 0x1555555555555555)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v112 - (_QWORD)v110) >> 2) > v79)
          v79 = 0x5555555555555556 * ((uint64_t)(v112 - (_QWORD)v110) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (_QWORD)v110) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v80 = 0x1555555555555555;
        else
          v80 = v79;
        if (v80)
          v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v112, v80);
        else
          v81 = 0;
        v82 = (float *)&v81[12 * v78];
        *v82 = v74;
        v82[1] = v37;
        v82[2] = v75;
        v84 = (char *)v110;
        v83 = v111;
        v85 = v82;
        if (v111 != (char *)v110)
        {
          do
          {
            v86 = *(_QWORD *)(v83 - 12);
            v83 -= 12;
            v87 = *((_DWORD *)v83 + 2);
            *(_QWORD *)(v85 - 3) = v86;
            v85 -= 3;
            *((_DWORD *)v85 + 2) = v87;
          }
          while (v83 != v84);
          v83 = (char *)v110;
        }
        v77 = (char *)(v82 + 3);
        v110 = v85;
        v111 = (char *)(v82 + 3);
        v112 = (unint64_t)&v81[12 * v80];
        if (v83)
          operator delete(v83);
      }
      else
      {
        *(float *)v111 = v74;
        *((float *)v76 + 1) = v37;
        v77 = v76 + 12;
        *((float *)v76 + 2) = v75;
      }
      v111 = v77;
      v35 += 2;
    }
    while (v35 != v36);
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v88, v113, (uint64_t)v114, v114 - v113);
  v91 = 0;
  v92 = 0;
  v93 = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>(&v91, v110, (uint64_t)v111, 0xAAAAAAAAAAAAAAABLL * ((v111 - (char *)v110) >> 2));
  v94 = 0;
  v95 = 0;
  v96 = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>(&v94, v107, (uint64_t)v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (_BYTE *)v107) >> 2));
  v97 = 0;
  v98 = 0;
  v99 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v97, v119, (uint64_t)v120, v120 - v119);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v100, v116, (uint64_t)v117, v117 - v116);
  v103 = xmmword_249D3AD38;
  v104 = xmmword_249D3AD20;
  v105 = 0x3F8000003FC00000;
  vg::hrtf::tukeyWindow(a2, (int32x2_t)0x3F8000003DCCCCCDLL, __p);
  std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::__optional_destruct_base[abi:ne180100]<vg::hrtf::PhaseShiftParameters>(a3, (uint64_t)&v88);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v107)
  {
    v108 = (float *)v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = (char *)v110;
    operator delete(v110);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
}

void sub_249CE6F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a22)
    operator delete(a22);
  if (a19)
    operator delete(a19);
  if (a16)
    operator delete(a16);
  if (a39)
    operator delete(a39);
  v42 = *(void **)(v40 - 248);
  if (v42)
  {
    *(_QWORD *)(v40 - 240) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(v40 - 224);
  if (v43)
  {
    *(_QWORD *)(v40 - 216) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(v40 - 200);
  if (v44)
  {
    *(_QWORD *)(v40 - 192) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v40 - 176);
  if (v45)
  {
    *(_QWORD *)(v40 - 168) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::array<float,3ul>>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void vg::hrtf::PhaseShiftParameters::~PhaseShiftParameters(vg::hrtf::PhaseShiftParameters *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  v7 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v7;
    operator delete(v7);
  }
}

void vg::hrtf::addDelayFractions(uint64_t a1, uint64_t a2, const vDSP_DFT_SetupStruct *a3, const DSPSplitComplex *a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  DSPSplitComplex __A;
  DSPSplitComplex __B;
  void *__p[3];
  void *v30[3];
  float *__Oi[3];
  float *__Or[3];
  void *v33[3];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
    vg::hrtf::addDelayFractions();
  if ((v6 & 4) != 0)
    vg::hrtf::addDelayFractions();
  v12 = v6 >> 2;
  LODWORD(__Or[0]) = 0;
  std::vector<float>::vector(v33, v6 >> 2, __Or);
  LODWORD(__Oi[0]) = 0;
  std::vector<float>::vector(__Or, v6 >> 2, __Oi);
  LODWORD(v30[0]) = 0;
  std::vector<float>::vector(__Oi, v6 >> 2, v30);
  vDSP_DFT_Execute(a3, *(const float **)a1, (const float *)v33[0], __Or[0], __Oi[0]);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v30, v6 >> 2, __p);
  LODWORD(__B.realp) = 0;
  std::vector<float>::vector(__p, v6 >> 2, &__B);
  v13 = (unint64_t)(v6 >> 2) >> 1;
  if ((unint64_t)v6 > 7)
  {
    v16 = 0;
    if (v13 <= 1)
      v17 = 1;
    else
      v17 = v12 >> 1;
    do
    {
      v18 = *(float *)(*(_QWORD *)(a2 + 96) + 4 * v16);
      *(float *)&__B.realp = (float)(v18 * a5) * -0.0;
      *((float *)&__B.realp + 1) = -(float)(v18 * a5);
      std::exp[abi:ne180100]<float>((float *)&__B);
      v14 = (float *)v30[0];
      *((_DWORD *)v30[0] + v16) = v19;
      v15 = (float *)__p[0];
      *((_DWORD *)__p[0] + v16++) = v20;
    }
    while (v17 != v16);
    v14[v13] = 0.0;
    v15[v13] = 0.0;
    if ((unint64_t)v6 >= 0xD)
    {
      v21 = 2;
      if (v13 > 2)
        v21 = v12 >> 1;
      v22 = v21 - 1;
      v23 = v15 - 1;
      v24 = v14 - 1;
      v25 = v15 + 1;
      v26 = v14 + 1;
      do
      {
        v26[v13] = v24[v13];
        v25[v13] = -v23[v13];
        --v23;
        --v24;
        ++v25;
        ++v26;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    v14 = (float *)v30[0];
    v15 = (float *)__p[0];
    *((_DWORD *)v30[0] + v13) = 0;
    v15[v13] = 0.0;
  }
  __B.realp = v14;
  __B.imagp = v15;
  __A.realp = __Or[0];
  __A.imagp = __Oi[0];
  vDSP_zvmul(&__A, 1, &__B, 1, a4, 1, v6 >> 2, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (__Oi[0])
  {
    __Oi[1] = __Oi[0];
    operator delete(__Oi[0]);
  }
  if (__Or[0])
  {
    __Or[1] = __Or[0];
    operator delete(__Or[0]);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
}

void sub_249CE7414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  v26 = *(void **)(v24 - 104);
  if (v26)
  {
    *(_QWORD *)(v24 - 96) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void std::exp[abi:ne180100]<float>(float *a1)
{
  float v1;
  float v2;
  float v3;

  v1 = *a1;
  v2 = a1[1];
  if (v2 == 0.0)
  {
    expf(v1);
    return;
  }
  if (fabsf(v1) == INFINITY)
  {
    if (v1 >= 0.0)
    {
      if ((LODWORD(v2) & 0x7FFFFFFFu) >= 0x7F800000)
        return;
    }
    else if ((LODWORD(v2) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      v2 = 1.0;
    }
  }
  v3 = v2;
  expf(v1);
  __sincosf_stret(v3);
}

void vg::hrtf::phaseShift(uint64_t a1@<X0>, float *a2@<X1>, const float **a3@<X2>, const vDSP_DFT_SetupStruct *a4@<X3>, uint64_t a5@<X4>, const vDSP_biquad_SetupStruct *a6@<X5>, uint64_t a7@<X8>, float a8@<S0>)
{
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v18;
  float *realp;
  _DWORD *v20;
  float **v21;
  uint64_t i;
  void *v23;
  uint64_t j;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  float v33;
  float *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  float v48;
  const float *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const float *v53;
  uint64_t v54;
  const float *v55;
  int v57;
  float *__Delay[3];
  float v59;
  float *v60[3];
  float *__X[3];
  DSPSplitComplex __C;
  unint64_t *v63;
  float *v64;
  float v65;
  float *v66[3];
  DSPSplitComplex v67;
  DSPSplitComplex __A;
  void *v69[3];
  DSPSplitComplex v70;
  _QWORD v71[3];
  const float *v72[3];
  _QWORD v73[3];
  unint64_t v74;
  uint64_t v75;
  float __B[3];

  __B[0] = a8;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = v9 - *(_QWORD *)a1;
  v10 = v9 == *(_QWORD *)a1;
  v12 = v11 >> 2;
  v74 = v11 >> 2;
  v75 = a5;
  if (v10)
    vg::hrtf::addDelayFractions();
  v14 = a1 + 32;
  if (v12 != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2)
    vg::hrtf::phaseShift();
  if ((v11 & 4) != 0)
    vg::hrtf::addDelayFractions();
  LODWORD(v70.realp) = 0;
  std::vector<float>::vector(v72, v11 >> 2, &v70);
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(v73, v74, &__C);
  v70.realp = (float *)v72[0];
  v70.imagp = (float *)v73[0];
  vg::hrtf::addDelayFractions(a1, (uint64_t)a2, a4, &v70, *(float *)(a1 + 24));
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(&v70, v74, &__C);
  LODWORD(v69[0]) = 0;
  std::vector<float>::vector(v71, v74, v69);
  __C.realp = v70.realp;
  __C.imagp = (float *)v71[0];
  vg::hrtf::addDelayFractions(v14, (uint64_t)a2, a4, &__C, *(float *)(a1 + 56));
  v18 = v12 >> 1;
  LODWORD(__A.realp) = 0;
  std::vector<float>::vector(&__C, v12 >> 1, &__A);
  __A.realp = (float *)v72[0];
  __A.imagp = (float *)v73[0];
  vDSP_zvphas(&__A, 1, __C.realp, 1, v12 >> 1);
  vg::hrtf::unwrapPhaseAngles(&__C.realp, (uint64_t)v69);
  if (__C.realp)
  {
    __C.imagp = __C.realp;
    operator delete(__C.realp);
  }
  LODWORD(v67.realp) = 0;
  std::vector<float>::vector(&__C, v12 >> 1, &v67);
  v67.realp = v70.realp;
  v67.imagp = (float *)v71[0];
  vDSP_zvphas(&v67, 1, __C.realp, 1, v12 >> 1);
  vg::hrtf::unwrapPhaseAngles(&__C.realp, (uint64_t)&__A);
  if (__C.realp)
  {
    __C.imagp = __C.realp;
    operator delete(__C.realp);
  }
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(&v67, v12 >> 1, &__C);
  vDSP_vsub((const float *)v69[0], 1, __A.realp, 1, v67.realp, 1, v12 >> 1);
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(v66, v12 >> 1, &__C);
  if (*(float *)(a1 + 24) >= *(float *)(a1 + 56))
  {
    *(float *)v60 = -__B[0];
    vDSP_vsadd(v67.realp, 1, (const float *)v60, v66[0], 1, v12 >> 1);
    vDSP_vmul(v66[0], 1, *a3, 1, v66[0], 1, v12 >> 1);
    if ((unint64_t)v11 <= 7)
    {
      realp = (float *)v72[0];
      v20 = (_DWORD *)v73[0];
      goto LABEL_13;
    }
    v41 = 0;
    v42 = v18 - 1;
    if (v18 <= 1)
      v43 = 1;
    else
      v43 = v18;
    do
    {
      v44 = v66[0][v41];
      *(float *)__X = v44 * 0.0;
      *((float *)__X + 1) = v44;
      std::exp[abi:ne180100]<float>((float *)__X);
      __C.realp = (float *)__PAIR64__(v46, v45);
      v47 = *(_DWORD *)(v73[0] + 4 * v41);
      *(float *)__X = v72[0][v41];
      HIDWORD(__X[0]) = v47;
      v48 = std::operator*[abi:ne180100]<float>((float *)__X, (float *)&__C);
      v49 = v72[0];
      v72[0][v41] = v48;
      v50 = v73[0];
      *(_DWORD *)(v73[0] + 4 * v41++) = v51;
    }
    while (v43 != v41);
    v49[v18] = 0.0;
    *(_DWORD *)(v50 + 4 * v18) = 0;
    if ((unint64_t)v11 >= 0xD)
    {
      v52 = v50 - 4;
      v53 = v49 - 1;
      v54 = v50 + 4;
      v55 = v49 + 1;
      do
      {
        v55[v18] = v53[v18];
        *(float *)(v54 + 4 * v18) = -*(float *)(v52 + 4 * v18);
        v52 -= 4;
        --v53;
        v54 += 4;
        ++v55;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
    vDSP_vsadd(v67.realp, 1, __B, v66[0], 1, v12 >> 1);
    vDSP_vmul(v66[0], 1, *a3, 1, v66[0], 1, v12 >> 1);
    if ((unint64_t)v11 <= 7)
    {
      realp = v70.realp;
      v20 = (_DWORD *)v71[0];
LABEL_13:
      *realp = 0.0;
      *v20 = 0;
      goto LABEL_14;
    }
    v26 = 0;
    v27 = v18 - 1;
    if (v18 <= 1)
      v28 = 1;
    else
      v28 = v18;
    do
    {
      v29 = v66[0][v26];
      *(float *)__X = v29 * -0.0;
      *((float *)__X + 1) = -v29;
      std::exp[abi:ne180100]<float>((float *)__X);
      __C.realp = (float *)__PAIR64__(v31, v30);
      v32 = *(_DWORD *)(v71[0] + 4 * v26);
      *(float *)__X = v70.realp[v26];
      HIDWORD(__X[0]) = v32;
      v33 = std::operator*[abi:ne180100]<float>((float *)__X, (float *)&__C);
      v34 = v70.realp;
      v70.realp[v26] = v33;
      v35 = v71[0];
      *(_DWORD *)(v71[0] + 4 * v26++) = v36;
    }
    while (v28 != v26);
    v34[v18] = 0.0;
    *(_DWORD *)(v35 + 4 * v18) = 0;
    if ((unint64_t)v11 >= 0xD)
    {
      v37 = v35 - 4;
      v38 = v34 - 1;
      v39 = v35 + 4;
      v40 = v34 + 1;
      do
      {
        v40[v18] = v38[v18];
        *(float *)(v39 + 4 * v18) = -*(float *)(v37 + 4 * v18);
        v37 -= 4;
        --v38;
        v39 += 4;
        ++v40;
        --v27;
      }
      while (v27);
    }
  }
LABEL_14:
  v65 = 1.0 / (float)v74;
  __C.realp = a2;
  __C.imagp = (float *)&v75;
  v63 = &v74;
  v64 = &v65;
  vg::hrtf::phaseShift(vg::hrtf::IRFilters const&,vg::hrtf::PhaseShiftParameters const&,float,std::vector<float> const&,vDSP_DFT_SetupStruct *,vDSP_DFT_SetupStruct *,vDSP_biquad_SetupStruct *)::$_3::operator()((uint64_t)&__C, v72, __X);
  vg::hrtf::phaseShift(vg::hrtf::IRFilters const&,vg::hrtf::PhaseShiftParameters const&,float,std::vector<float> const&,vDSP_DFT_SetupStruct *,vDSP_DFT_SetupStruct *,vDSP_biquad_SetupStruct *)::$_3::operator()((uint64_t)&__C, (const float **)&v70.realp, v60);
  v59 = 0.0;
  v21 = __X;
  if (*(float *)(a1 + 24) >= *(float *)(a1 + 56))
    v21 = v60;
  vDSP_vfill(&v59, *v21, 1, (int)a2[32]);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 40) = 0;
  *(_QWORD *)(a7 + 48) = 0;
  LODWORD(__Delay[0]) = 0;
  std::vector<float>::resize(a7, v74, __Delay);
  *(_DWORD *)(a7 + 24) = 0;
  LODWORD(__Delay[0]) = 0;
  std::vector<float>::resize(a7 + 32, v74, __Delay);
  *(_DWORD *)(a7 + 56) = 0;
  v57 = 0;
  std::vector<float>::vector(__Delay, 4uLL, &v57);
  vDSP_biquad(a6, __Delay[0], __X[0], 1, *(float **)a7, 1, v74);
  vDSP_biquad(a6, __Delay[0], v60[0], 1, *(float **)(a7 + 32), 1, v74);
  if (__Delay[0])
  {
    __Delay[1] = __Delay[0];
    operator delete(__Delay[0]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (__X[0])
  {
    __X[1] = __X[0];
    operator delete(__X[0]);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if (v67.realp)
  {
    v67.imagp = v67.realp;
    operator delete(v67.realp);
  }
  if (__A.realp)
  {
    __A.imagp = __A.realp;
    operator delete(__A.realp);
  }
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  for (i = 0; i != -6; i -= 3)
  {
    v23 = (void *)v71[i];
    if (v23)
    {
      v71[i + 1] = v23;
      operator delete(v23);
    }
  }
  for (j = 0; j != -6; j -= 3)
  {
    v25 = (float *)v72[j + 3];
    if (v25)
    {
      v73[j + 1] = v25;
      operator delete(v25);
    }
  }
}

void vg::hrtf::phaseShift(vg::hrtf::IRFilters const&,vg::hrtf::PhaseShiftParameters const&,float,std::vector<float> const&,vDSP_DFT_SetupStruct *,vDSP_DFT_SetupStruct *,vDSP_biquad_SetupStruct *)::$_3::operator()(uint64_t a1@<X0>, const float **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t i;
  float *v10;
  int v11;
  float *__Or;
  int *v13;
  float *__Oi[3];
  int *v15[4];

  v6 = **(_QWORD **)(a1 + 16);
  LODWORD(v15[0]) = 0;
  std::vector<float>::vector(&__Or, v6, v15);
  v7 = **(_QWORD **)(a1 + 16);
  v11 = 0;
  std::vector<float>::vector(__Oi, v7, &v11);
  vDSP_DFT_Execute(**(const vDSP_DFT_SetupStruct ***)(a1 + 8), *a2, a2[3], __Or, __Oi[0]);
  vDSP_vsmul(__Or, 1, *(const float **)(a1 + 24), __Or, 1, **(_QWORD **)(a1 + 16));
  v8 = &v13[-(int)*(float *)(*(_QWORD *)a1 + 128)];
  std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>,std::reverse_iterator<std::__wrap_iter<float *>>>((int *)__Or, v13, (char *)v13, v8, v8, (int *)__Or, v15);
  vDSP_vmul(__Or, 1, *(const float **)(*(_QWORD *)a1 + 160), 1, __Or, 1, **(_QWORD **)(a1 + 16));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, __Or, (uint64_t)v13, ((char *)v13 - (char *)__Or) >> 2);
  for (i = 0; i != -6; i -= 3)
  {
    v10 = __Oi[i];
    if (v10)
    {
      __Oi[i + 1] = v10;
      operator delete(v10);
    }
  }
}

void sub_249CE7EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  void *v17;

  v16 = 0;
  while (1)
  {
    v17 = *(void **)((char *)&a14 + v16);
    if (v17)
    {
      *(uint64_t *)((char *)&a15 + v16) = (uint64_t)v17;
      operator delete(v17);
    }
    v16 -= 24;
    if (v16 == -48)
      _Unwind_Resume(exception_object);
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void vg::hrtf::IRFilters::~IRFilters(vg::hrtf::IRFilters *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void vg::hrtf::ITDWindow(vg::hrtf *this@<X0>, float a2@<S0>, float a3@<S1>, uint64_t a4@<X1>, float **a5@<X8>)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float v17;
  int v18;

  v10 = fmodf(a3, 180.0);
  v11 = a2 * 3.14159265 / 180.0;
  v12 = cosf(v11);
  v18 = 0;
  std::vector<float>::vector(a5, (unint64_t)this, &v18);
  if (this)
  {
    v13 = 90.0 - fabsf(v10 + -90.0);
    v14 = (float)(*(float *)(a4 + 132) - *(float *)(a4 + 120)) / (float)(fabsf(*(float *)(a4 + 136) + -45.0) + 45.0);
    v15 = *(float **)(a4 + 72);
    v16 = *a5;
    do
    {
      v17 = *v15++;
      *v16++ = (float)(1.0
                     - tanhf((float)((float)(*(float *)(a4 + 120)+ (float)((float)(v14 * vabds_f32(v13, *(float *)(a4 + 136))) * v12))- v17)/ *(float *)(a4 + 124)))* 0.5;
      this = (vg::hrtf *)((char *)this - 1);
    }
    while (this);
  }
}

float64x2_t vg::hrtf::biquadParameters@<Q0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  float64x2_t result;

  if (*(float *)a1 <= 0.00000011921)
    vg::hrtf::biquadParameters();
  v3 = 1.0 / *(float *)a1;
  *(float64x2_t *)a3 = vcvtq_f64_f32(vmul_n_f32(*a2, v3));
  *(double *)(a3 + 16) = (float)(v3 * a2[1].f32[0]);
  result = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 4), v3));
  *(float64x2_t *)(a3 + 24) = result;
  return result;
}

uint64_t vg::hrtf::modifyIRDataWithITD@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int FilterLength;
  vDSP_Length v11;
  vDSP_DFT_Setup Setup;
  const vDSP_DFT_SetupStruct *v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  vDSP_DFT_Setup v16;
  vDSP_DFT_Setup v17;
  void (**v18)(_QWORD);
  float v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  vDSP_biquad_Setup v29;
  const vDSP_biquad_SetupStruct *v30;
  uint64_t v31;
  void (**v32)(_QWORD);
  int v33;
  unint64_t v34;
  NSObject *v35;
  NSObject *v36;
  const char *v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t PeriodForCyclicalDimensions;
  uint64_t InterpolationMethod;
  void (**v43)(_QWORD);
  void (**v44)(_QWORD);
  uint64_t v45;
  const vDSP_DFT_SetupStruct *v46;
  CFTypeRef cf;
  uint8_t buf[8];
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *__p;
  void *v53;
  _QWORD v54[5];
  __int128 __Coefficients;
  __int128 v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t v64[8];
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint8_t v76[8];
  char v77;
  _QWORD v78[5];
  _QWORD v79[5];
  float *v80;
  float *v81;
  uint64_t v82;
  _QWORD v83[3];
  IR::IRData *v84;
  std::__shared_weak_count *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;

  v4 = *(std::__shared_weak_count **)(a1 + 8);
  v84 = *(IR::IRData **)a1;
  v85 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  vg::hrtf::getIRValues(&v84, (uint64_t)&v86);
  v7 = v85;
  if (v85)
  {
    v8 = (unint64_t *)&v85->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (!v90)
  {
    __VGLogSharedInstance();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v76 = 0;
      _os_log_impl(&dword_249CAD000, v35, OS_LOG_TYPE_ERROR, " Failed to read coefficients and delay values from IRData. ", v76, 2u);
    }

    *a2 = 0;
    a2[1] = 0;
    return std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
  }
  memset(v83, 0, sizeof(v83));
  std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(v83, v88, v89, (v89 - v88) >> 6);
  if (!v90)
    std::__throw_bad_optional_access[abi:ne180100]();
  v80 = 0;
  v81 = 0;
  v82 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v80, v86, v87, (v87 - (uint64_t)v86) >> 3);
  FilterLength = IR::IRData::getFilterLength(*(IR::IRData **)a1);
  if ((FilterLength & 1) != 0)
  {
    __VGLogSharedInstance();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v76 = 0;
      v37 = " Number of IR taps must be multiple of 2. ";
LABEL_42:
      _os_log_impl(&dword_249CAD000, v36, OS_LOG_TYPE_ERROR, v37, v76, 2u);
    }
LABEL_43:

    *a2 = 0;
    a2[1] = 0;
    goto LABEL_75;
  }
  v11 = FilterLength;
  Setup = vDSP_DFT_zop_CreateSetup(0, FilterLength, vDSP_DFT_FORWARD);
  v13 = Setup;
  if (!Setup)
  {
    __VGLogSharedInstance();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v76 = 0;
      v37 = " Failed to setup fft. ";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  v14 = MEMORY[0x24BDAC760];
  v79[0] = MEMORY[0x24BDAC760];
  v79[1] = 3221225472;
  v79[2] = ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke;
  v79[3] = &__block_descriptor_40_e5_v8__0l;
  v79[4] = Setup;
  v15 = (void (**)(_QWORD))MEMORY[0x24BD03294](v79);
  v16 = vDSP_DFT_zop_CreateSetup(0, v11, vDSP_DFT_INVERSE);
  v17 = v16;
  if (!v16)
  {
    __VGLogSharedInstance();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v76 = 0;
      _os_log_impl(&dword_249CAD000, v38, OS_LOG_TYPE_ERROR, " Failed to setup inverse fft. ", v76, 2u);
    }

    *a2 = 0;
    a2[1] = 0;
    goto LABEL_74;
  }
  v78[0] = v14;
  v78[1] = 3221225472;
  v78[2] = ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_10;
  v78[3] = &__block_descriptor_40_e5_v8__0l;
  v78[4] = v16;
  v18 = (void (**)(_QWORD))MEMORY[0x24BD03294](v78);
  IR::IRData::getSampleRate(*(IR::IRData **)a1);
  vg::hrtf::getPhaseShiftParameters(&v80, v11, (uint64_t)v76, v19);
  if (!v77)
  {
    __VGLogSharedInstance();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v64 = 0;
      _os_log_impl(&dword_249CAD000, v39, OS_LOG_TYPE_ERROR, " Failed to compute phaseShift params. ", v64, 2u);
    }

    *a2 = 0;
    a2[1] = 0;
    goto LABEL_73;
  }
  v43 = v15;
  v44 = v18;
  vg::hrtf::PhaseShiftParameters::PhaseShiftParameters((vg::hrtf::PhaseShiftParameters *)v64, (const vg::hrtf::PhaseShiftParameters *)v76);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  std::vector<vg::hrtf::IRFilters>::reserve(&v61, ((char *)v81 - (char *)v80) >> 3);
  v20 = v80;
  v21 = (uint64_t)v81;
  if (v81 == v80)
  {
    v34 = 0;
    v20 = v81;
    goto LABEL_51;
  }
  v45 = (uint64_t)v17;
  v46 = v13;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    vg::hrtf::ITDWindow((vg::hrtf *)v11, v20[v24], v20[v24 + 1], (uint64_t)v64, (float **)&v58);
    if (fabsf(*(float *)((char *)v66 + v23)) < 0.00000001)
    {
      __VGLogSharedInstance();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v27 = v26;
        v28 = " IIR biquad a0 filter too small. ";
LABEL_28:
        _os_log_impl(&dword_249CAD000, v27, OS_LOG_TYPE_ERROR, v28, buf, 2u);
        goto LABEL_29;
      }
      goto LABEL_29;
    }
    v57 = 0;
    __Coefficients = 0u;
    v56 = 0u;
    vg::hrtf::biquadParameters((uint64_t)v66 + v23, (float32x2_t *)((char *)v68 + v23), (uint64_t)&__Coefficients);
    v29 = vDSP_biquad_CreateSetup((const double *)&__Coefficients, 1uLL);
    v30 = v29;
    if (!v29)
    {
      __VGLogSharedInstance();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v27 = v26;
        v28 = " Failed to setup biquadratic filter. ";
        goto LABEL_28;
      }
LABEL_29:

      *a2 = 0;
      a2[1] = 0;
      v33 = 1;
      goto LABEL_30;
    }
    v31 = v14;
    v54[0] = v14;
    v54[1] = 3221225472;
    v54[2] = ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_11;
    v54[3] = &__block_descriptor_40_e5_v8__0l;
    v54[4] = v29;
    v32 = (void (**)(_QWORD))MEMORY[0x24BD03294](v54);
    vg::hrtf::phaseShift(v83[0] + v22, (float *)v64, (const float **)&v58, v46, v45, v30, (uint64_t)buf, *(float *)(*(_QWORD *)v64 + 4 * v25));
    std::vector<vg::hrtf::IRFilters>::emplace_back<vg::hrtf::IRFilters&>(&v61, (uint64_t)buf);
    if (__p)
    {
      v53 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      v49 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    v32[2](v32);

    v33 = 0;
    v14 = v31;
LABEL_30:
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (v33)
      goto LABEL_61;
    ++v25;
    v20 = v80;
    v21 = (uint64_t)v81;
    v24 += 2;
    v23 += 12;
    v22 += 64;
  }
  while (v25 < ((char *)v81 - (char *)v80) >> 3);
  v34 = ((char *)v81 - (char *)v80) >> 3;
LABEL_51:
  *(_QWORD *)buf = 0;
  v49 = 0;
  v50 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(buf, v20, v21, v34);
  v51 = 0;
  __p = 0;
  v53 = 0;
  std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(&v51, v61, v62, (v62 - v61) >> 6);
  PeriodForCyclicalDimensions = IR::IRData::getPeriodForCyclicalDimensions(*(IR::IRData **)a1);
  __Coefficients = 0uLL;
  *(_QWORD *)&v56 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__Coefficients, *(const void **)PeriodForCyclicalDimensions, *(_QWORD *)(PeriodForCyclicalDimensions + 8), (uint64_t)(*(_QWORD *)(PeriodForCyclicalDimensions + 8) - *(_QWORD *)PeriodForCyclicalDimensions) >> 2);
  InterpolationMethod = IR::IRData::getInterpolationMethod(*(IR::IRData **)a1);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v58, *(const void **)InterpolationMethod, *(_QWORD *)(InterpolationMethod + 8), (uint64_t)(*(_QWORD *)(InterpolationMethod + 8) - *(_QWORD *)InterpolationMethod) >> 2);
  IR::IRData::getUserData(*(IR::IRData **)a1);
  if (cf)
    CFRetain(cf);
  vg::hrtf::getIRData((uint64_t *)buf, a2);
  if (cf)
  {
    CFRelease(cf);
    CFRelease(cf);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if ((_QWORD)__Coefficients)
  {
    *((_QWORD *)&__Coefficients + 1) = __Coefficients;
    operator delete((void *)__Coefficients);
  }
  *(_QWORD *)&__Coefficients = &v51;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)&__Coefficients);
  if (*(_QWORD *)buf)
  {
    v49 = *(void **)buf;
    operator delete(*(void **)buf);
  }
LABEL_61:
  *(_QWORD *)buf = &v61;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  v15 = v43;
  v18 = v44;
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (*(_QWORD *)v64)
  {
    v65 = *(void **)v64;
    operator delete(*(void **)v64);
  }
LABEL_73:
  std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v76);
  v18[2](v18);

LABEL_74:
  v15[2](v15);

LABEL_75:
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  *(_QWORD *)v76 = v83;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
  return std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
}

void sub_249CE8850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  void (**v65)(void);
  void (**v66)(void);
  uint64_t v67;
  void *v69;

  std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a65);
  v66[2]();

  v65[2]();
  v69 = *(void **)(v67 - 240);
  if (v69)
  {
    *(_QWORD *)(v67 - 232) = v69;
    operator delete(v69);
  }
  a65 = v67 - 216;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100](v67 - 176);
  _Unwind_Resume(a1);
}

void ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke(uint64_t a1)
{
  vDSP_DFT_DestroySetup(*(vDSP_DFT_Setup *)(a1 + 32));
}

void ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_10(uint64_t a1)
{
  vDSP_DFT_DestroySetup(*(vDSP_DFT_Setup *)(a1 + 32));
}

uint64_t std::vector<vg::hrtf::IRFilters>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    std::vector<vg::hrtf::IRFilters>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_249CE8AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_11(uint64_t a1)
{
  vDSP_biquad_DestroySetup(*(vDSP_biquad_Setup *)(a1 + 32));
}

uint64_t std::vector<vg::hrtf::IRFilters>::emplace_back<vg::hrtf::IRFilters&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v9 + 1) >> 58)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[64 * v9];
    v18 = &v13[64 * v12];
    std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>((uint64_t)v16, a2);
    v17 = v16 + 64;
    std::vector<vg::hrtf::IRFilters>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v8;
  return v8 - 64;
}

void sub_249CE8BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void vg::hrtf::IRGrid::~IRGrid(vg::hrtf::IRGrid *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 24);
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

_QWORD *std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::array<float,3ul>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_249CE8CE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::array<float,3ul>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

__n128 std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::__optional_destruct_base[abi:ne180100]<vg::hrtf::PhaseShiftParameters>(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v2 = *(_OWORD *)(a2 + 120);
  v3 = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v2;
  *(_QWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  result = *(__n128 *)(a2 + 160);
  *(__n128 *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 1;
  return result;
}

float std::operator*[abi:ne180100]<float>(float *a1, float *a2)
{
  return (float)(*a1 * *a2) - (float)(a1[1] * a2[1]);
}

int *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>,std::reverse_iterator<std::__wrap_iter<float *>>>@<X0>(int *__dst@<X5>, int *result@<X0>, char *a3@<X1>, int *a4@<X2>, int *a5@<X3>, int *a6@<X4>, int **a7@<X8>)
{
  int *v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  size_t v15;

  if (a3 == (char *)a5)
  {
    *a7 = a6;
    a7[1] = __dst;
  }
  else
  {
    if (a5 != __dst)
    {
      v10 = (int *)(a3 - 4);
      if (a3 - 4 == (char *)a5)
      {
        v11 = *a5;
        do
        {
          v12 = *--a5;
          *v10-- = v12;
          a3 -= 4;
        }
        while (a5 != __dst);
        *v10 = v11;
      }
      else
      {
        if (a5 - 1 == __dst)
        {
          v14 = *__dst;
          v13 = (char *)__dst;
          if (__dst + 1 != (int *)a3)
          {
            v15 = ((a3 - (char *)__dst - 8) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            memmove(__dst, __dst + 1, v15);
            v13 = (char *)__dst + v15;
          }
          *v10 = v14;
          result = a6;
          goto LABEL_15;
        }
        result = std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>>((uint64_t)result, (int *)a3, a4, a5, (uint64_t)a6, __dst);
      }
      v13 = a3;
LABEL_15:
      *a7 = result;
      a7[1] = (int *)v13;
      goto LABEL_16;
    }
    *a7 = result;
    a7[1] = (int *)a3;
  }
LABEL_16:
  a7[2] = a6;
  a7[3] = __dst;
  return result;
}

int *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>>(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, int *a6)
{
  uint64_t v6;
  int *result;
  int *v8;
  int *v9;
  int *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  BOOL v23;

  v6 = a2 - a4;
  if (v6 == a4 - a6)
  {
    result = a3;
    if (a2 != a4 && a4 != a6)
    {
      v8 = a2 - 1;
      v9 = a4 - 1;
      v10 = a4 - 1;
      do
      {
        v11 = *v8;
        v12 = v8 == a4;
        *v8-- = *v9;
        *v10-- = v11;
        if (v12)
          break;
        v12 = v9 == a6;
        v9 = v10;
      }
      while (!v12);
    }
  }
  else
  {
    v13 = a4 - a6;
    v14 = a2 - a4;
    do
    {
      v15 = v14;
      v14 = v13;
      v13 = v15 % v13;
    }
    while (v13);
    if (v14)
    {
      v16 = &a2[-v14];
      do
      {
        v17 = *v16++;
        v18 = v17;
        v19 = &v16[-v6];
        v20 = v16;
        do
        {
          v21 = v19;
          *(v20 - 1) = *(v19 - 1);
          v22 = v19 - a6;
          v23 = v22 <= v6;
          v19 = &a2[v22 - v6];
          if (!v23)
            v19 = &v21[-v6];
          v20 = v21;
        }
        while (v19 != v16);
        *(v21 - 1) = v18;
      }
      while (v16 != a2);
    }
    return &a2[-(a4 - a6)];
  }
  return result;
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<vg::hrtf::IRFilters>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249CE9338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<vg::hrtf::IRFilters>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>(a4 + v7, a2 + v7);
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_249CE9428(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 64;
    do
    {
      std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v4 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_249CE94B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

vg::hrtf::PhaseShiftParameters *vg::hrtf::PhaseShiftParameters::PhaseShiftParameters(vg::hrtf::PhaseShiftParameters *this, const vg::hrtf::PhaseShiftParameters *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2));
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 2));
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 12, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
  v4 = *(_OWORD *)((char *)a2 + 120);
  v5 = *(_OWORD *)((char *)a2 + 136);
  v6 = *((_QWORD *)a2 + 19);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = v6;
  *(_OWORD *)((char *)this + 136) = v5;
  *(_OWORD *)((char *)this + 120) = v4;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 20, *((const void **)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 2);
  return this;
}

void sub_249CE969C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 104) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v9;
    operator delete(v9);
  }
  v10 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v10;
    operator delete(v10);
  }
  v11 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<vg::hrtf::IRFilters>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

float std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 64) = 0;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v8 - 48) = *(_QWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_DWORD *)(v8 - 40) = *(_DWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      result = *(float *)(a3 + v7 - 8);
      *(float *)(v8 - 8) = result;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(void **)(a1 + 160);
    if (v2)
    {
      *(_QWORD *)(a1 + 168) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 96);
    if (v3)
    {
      *(_QWORD *)(a1 + 104) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 72);
    if (v4)
    {
      *(_QWORD *)(a1 + 80) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 48);
    if (v5)
    {
      *(_QWORD *)(a1 + 56) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 24);
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = v6;
      operator delete(v6);
    }
    v7 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v4 = (void **)(a1 + 24);
    std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](&v4);
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

void vg::hrtf::unwrapPhaseAngles()
{
  _os_crash();
  __break(1u);
}

void vg::hrtf::tukeyWindow()
{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

void vg::hrtf::addDelayFractions()
{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

void vg::hrtf::phaseShift()
{
  _os_crash();
  __break(1u);
}

void vg::hrtf::biquadParameters()
{
  _os_crash();
  __break(1u);
}

BOOL vg::hrtf::HRTFDecoderModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _BOOL8 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  VGMLEspressoModel *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  std::string v25;
  id v26;
  id v27;
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[2];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  __VGLogSharedInstance();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v25.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_DEBUG, " Initializing HRTFDecoderModel (EspressoV1)... ", (uint8_t *)&v25, 2u);
  }

  v7 = objc_alloc(MEMORY[0x24BDD17C8]);
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (void *)objc_msgSend(v7, "initWithCString:", v8);
  v27 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v9, 0, &v27);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v27;
  if (v11)
  {
    v12 = v11;
    v13 = 0;
  }
  else
  {
    v26 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v10, 0, &v26);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v26;
    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("properties"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    v13 = 0;
    if (!v12 && v15)
    {
      v31[0] = v9;
      v30[0] = CFSTR("model_path");
      v30[1] = CFSTR("config");
      v28[0] = CFSTR("version");
      objc_msgSend(v15, "objectForKeyedSubscript:");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v29[0] = v17;
      v29[1] = CFSTR("CPU");
      v28[1] = CFSTR("engine");
      v28[2] = CFSTR("input_name");
      v28[3] = CFSTR("output_name");
      v29[2] = &unk_251B349A0;
      v29[3] = &unk_251B349B8;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 4);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v31[1] = v18;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v31, v30, 2);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = -[VGMLEspressoModel initWithModelInfo:]([VGMLEspressoModel alloc], "initWithModelInfo:", v19);
      v21 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v20;

      v22 = *(_QWORD *)(a1 + 24);
      v13 = v22 != 0;
      if (v22)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v25);
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        *(std::string *)a1 = v25;
        __VGLogSharedInstance();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v25.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_DEBUG, " Successfully initialized HRTFDecoderModel (EspressoV1) ", (uint8_t *)&v25, 2u);
        }

      }
    }

  }
  return v13;
}

void sub_249CE9D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
}

void vg::hrtf::HRTFDecoderModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  VGMLFloatIOData *v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  VGMLFloatIOData *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  VGMLFloatIOData *v19;
  uint8_t buf[8];

  __VGLogSharedInstance();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_DEBUG, " Running predict for HRTFDecoderModel (EspressoV1)... ", buf, 2u);
  }

  if (*(_DWORD *)(a2 + 16) != 32)
  {
    __VGLogSharedInstance();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v18 = " Face encoding input dimension mismatch. ";
LABEL_16:
      _os_log_impl(&dword_249CAD000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    }
LABEL_17:

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  if (*(_DWORD *)(a2 + 40) != 64)
  {
    __VGLogSharedInstance();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v18 = " Ear encoding input dimension mismatch. ";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  v19 = -[VGMLFloatIOData initWithSize:withData:]([VGMLFloatIOData alloc], "initWithSize:withData:", 32, *(_QWORD *)a2);
  v7 = -[VGMLFloatIOData initWithSize:withData:]([VGMLFloatIOData alloc], "initWithSize:withData:", 64, *(_QWORD *)(a2 + 24));
  v8 = objc_msgSend(*(id *)(a1 + 24), "getOutputSize");
  v9 = (4 * v8 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)buf = 0;
  malloc_type_posix_memalign((void **)buf, 0x20uLL, v9, 0x49090899uLL);
  v10 = *(_QWORD *)buf;
  v11 = -[VGMLFloatIOData initWithSize:withData:]([VGMLFloatIOData alloc], "initWithSize:withData:", v8, *(_QWORD *)buf);
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v19, v7, 0);
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v11, 0);
  __VGLogSharedInstance();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v14, OS_LOG_TYPE_DEBUG, " Running infer for HRTFDecoderModel (EspressoV1)... ", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 24), "inferInputs:toOutputs:", v12, v13);
  __VGLogSharedInstance();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v15, OS_LOG_TYPE_DEBUG, " Successfully completed infer for HRTFDecoderModel (EspressoV1) ", buf, 2u);
  }

  __VGLogSharedInstance();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_DEBUG, " Successfully completed predict for HRTFDecoderModel (EspressoV1) ", buf, 2u);
  }

  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v9 >> 2;
  *(_DWORD *)(a3 + 16) = v8;
  *(_BYTE *)(a3 + 24) = 1;

}

void sub_249CEA094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  free(v13);
  _Unwind_Resume(a1);
}

void sub_249CEA0E4()
{
  JUMPOUT(0x249CEA0D0);
}

void sub_249CEA0EC()
{
  JUMPOUT(0x249CEA0D4);
}

void vg::hrtf::HRTFDecoderModelEspresso::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = (_OWORD *)operator new();
  *v7 = 0u;
  v7[1] = 0u;
  *v6 = (uint64_t)v7;
  v9 = v6;
  if (vg::hrtf::HRTFDecoderModelEspressoImpl::init((uint64_t)v7, a1, a2))
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CEA1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::HRTFDecoderModelEspresso *vg::hrtf::HRTFDecoderModelEspresso::HRTFDecoderModelEspresso(vg::hrtf::HRTFDecoderModelEspresso *this)
{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::HRTFDecoderModelEspresso::~HRTFDecoderModelEspresso(vg::hrtf::HRTFDecoderModelEspresso *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::HRTFDecoderModelEspresso::predictHRTFDecoderModel(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::HRTFDecoderModelEspressoImpl::predict(*a1, a2, a3);
}

BOOL vg::hrtf::DTFModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _BOOL8 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  VGMLEspressoModel *v19;
  void *v20;
  uint64_t v21;
  std::string v23;
  id v24;
  id v25;
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[2];
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v6 = objc_alloc(MEMORY[0x24BDD17C8]);
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  v8 = (void *)objc_msgSend(v6, "initWithCString:", v7);
  v25 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v8, 0, &v25);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v25;
  if (v10)
  {
    v11 = v10;
    v12 = 0;
  }
  else
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v9, 0, &v24);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v24;
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("properties"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    v12 = 0;
    if (!v11 && v14)
    {
      v29[0] = v8;
      v28[0] = CFSTR("model_path");
      v28[1] = CFSTR("config");
      v26[0] = CFSTR("version");
      objc_msgSend(v14, "objectForKeyedSubscript:");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = v16;
      v27[1] = CFSTR("CPU");
      v26[1] = CFSTR("engine");
      v26[2] = CFSTR("input_name");
      v26[3] = CFSTR("output_name");
      v27[2] = &unk_251B349D0;
      v27[3] = &unk_251B349E8;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v27, v26, 4);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v29[1] = v17;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = -[VGMLEspressoModel initWithModelInfo:]([VGMLEspressoModel alloc], "initWithModelInfo:", v18);
      v20 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v19;

      v21 = *(_QWORD *)(a1 + 24);
      v12 = v21 != 0;
      if (v21)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v23);
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        *(std::string *)a1 = v23;
      }

    }
  }

  return v12;
}

void sub_249CEA544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void vg::hrtf::DTFModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  _DWORD *v8;
  int v9;
  VGMLFloatIOData *v10;
  VGMLFloatIOData *v11;
  VGMLFloatIOData *v12;
  VGMLFloatIOData *v13;
  VGMLFloatIOData *v14;
  VGMLFloatIOData *v15;
  void *v16;
  void *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  void *v26;
  NSObject *v27;
  void *memptr;
  __int128 v29;
  void *v30[4];
  void *v31[2];
  int v32;
  void *v33[2];
  uint64_t v34;
  void *__p[3];
  void *v36[3];
  _DWORD *v37;
  _BYTE *v38;

  if (*(_DWORD *)(a2 + 16) == 284160)
  {
    std::vector<float>::vector(&v37, 0x45600uLL);
    v6 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v6)
    {
      v7 = *(int **)a2;
      v8 = v37;
      do
      {
        v9 = *v7++;
        *v8++ = v9;
        --v6;
      }
      while (v6);
    }
    v10 = [VGMLFloatIOData alloc];
    v11 = -[VGMLFloatIOData initWithSize:withData:](v10, "initWithSize:withData:", (v38 - (_BYTE *)v37) >> 2);
    std::vector<float>::vector(v36, 0x2C680uLL);
    v12 = [VGMLFloatIOData alloc];
    v13 = -[VGMLFloatIOData initWithSize:withData:](v12, "initWithSize:withData:", 181888, v36[0]);
    std::vector<float>::vector(__p, 0x40uLL);
    v14 = [VGMLFloatIOData alloc];
    v15 = -[VGMLFloatIOData initWithSize:withData:](v14, "initWithSize:withData:", 64, __p[0]);
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v11, 0);
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v13, v15, 0);
    objc_msgSend(*(id *)(a1 + 24), "inferInputs:toOutputs:", v16, v17);
    v33[1] = (void *)181888;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0xB1A00uLL, 0x49090899uLL);
    v18 = memptr;
    v33[0] = memptr;
    v34 = 0xB1A00000040;
    v31[1] = (void *)64;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0x100uLL, 0x49090899uLL);
    v19 = 0;
    v20 = memptr;
    v31[0] = memptr;
    v32 = 64;
    v21 = v36[0];
    v22 = __p[0];
    do
    {
      v23 = 0;
      v24 = v18;
      do
      {
        *v24 = v21[v23++];
        v24 += 64;
      }
      while (v23 != 2842);
      v20[v19] = v22[v19];
      ++v19;
      ++v18;
      v21 += 2842;
    }
    while (v19 != 64);
    cva::MatrixData<float,0ul,0ul,false>::MatrixData(&memptr, (const void **)v33, 181888);
    *((_QWORD *)&v29 + 1) = v34;
    cva::MatrixData<float,0ul,0ul,false>::MatrixData(v30, (const void **)v31, 64);
    v25 = v32;
    *(_QWORD *)a3 = memptr;
    *(_OWORD *)(a3 + 8) = v29;
    v26 = v30[1];
    *(void **)(a3 + 24) = v30[0];
    *(_QWORD *)(a3 + 32) = v26;
    *(_DWORD *)(a3 + 40) = v25;
    *(_BYTE *)(a3 + 48) = 1;
    free(v31[0]);
    free(v33[0]);

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }

    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
  }
  else
  {
    __VGLogSharedInstance();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LOWORD(memptr) = 0;
      _os_log_impl(&dword_249CAD000, v27, OS_LOG_TYPE_ERROR, " HRTF input dimension mismatch. ", (uint8_t *)&memptr, 2u);
    }

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
}

void sub_249CEA8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v32;
  void *v33;

  free(a11);
  free(a18);
  free(a21);

  if (__p)
    operator delete(__p);

  v32 = *(void **)(v30 - 128);
  if (v32)
  {
    *(_QWORD *)(v30 - 120) = v32;
    operator delete(v32);
  }

  v33 = *(void **)(v30 - 104);
  if (v33)
  {
    *(_QWORD *)(v30 - 96) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void sub_249CEA954()
{
  JUMPOUT(0x249CEA914);
}

void sub_249CEA95C()
{
  JUMPOUT(0x249CEA928);
}

void sub_249CEA964()
{
  JUMPOUT(0x249CEA93CLL);
}

void vg::hrtf::DTFModelEspresso::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = (_OWORD *)operator new();
  *v7 = 0u;
  v7[1] = 0u;
  *v6 = (uint64_t)v7;
  v9 = v6;
  if (vg::hrtf::DTFModelEspressoImpl::init((uint64_t)v7, a1, a2))
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CEAA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::DTFModelEspresso *vg::hrtf::DTFModelEspresso::DTFModelEspresso(vg::hrtf::DTFModelEspresso *this)
{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::DTFModelEspresso::~DTFModelEspresso(vg::hrtf::DTFModelEspresso *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::DTFModelEspresso::predictDTFFromHRTF(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::DTFModelEspressoImpl::predict(*a1, a2, a3);
}

BOOL vg::hrtf::DTFBiasModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _BOOL8 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  VGMLEspressoModel *v19;
  void *v20;
  uint64_t v21;
  std::string v23;
  id v24;
  id v25;
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[2];
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v6 = objc_alloc(MEMORY[0x24BDD17C8]);
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  v8 = (void *)objc_msgSend(v6, "initWithCString:", v7);
  v25 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v8, 0, &v25);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v25;
  if (v10)
  {
    v11 = v10;
    v12 = 0;
  }
  else
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v9, 0, &v24);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v24;
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("properties"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    v12 = 0;
    if (!v11 && v14)
    {
      v29[0] = v8;
      v28[0] = CFSTR("model_path");
      v28[1] = CFSTR("config");
      v26[0] = CFSTR("version");
      objc_msgSend(v14, "objectForKeyedSubscript:");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = v16;
      v27[1] = CFSTR("CPU");
      v26[1] = CFSTR("engine");
      v26[2] = CFSTR("input_name");
      v26[3] = CFSTR("output_name");
      v27[2] = &unk_251B34A00;
      v27[3] = &unk_251B34A18;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v27, v26, 4);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v29[1] = v17;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = -[VGMLEspressoModel initWithModelInfo:]([VGMLEspressoModel alloc], "initWithModelInfo:", v18);
      v20 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v19;

      v21 = *(_QWORD *)(a1 + 24);
      v12 = v21 != 0;
      if (v21)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v23);
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        *(std::string *)a1 = v23;
      }

    }
  }

  return v12;
}

void sub_249CEADBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void vg::hrtf::DTFBiasModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  VGMLFloatIOData *v12;
  VGMLFloatIOData *v13;
  VGMLFloatIOData *v14;
  VGMLFloatIOData *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  NSObject *v24;
  void *__p[3];
  uint8_t buf[8];
  uint64_t v27;
  void *memptr;

  if (*((_DWORD *)a2 + 4) == 64 && *((_DWORD *)a2 + 5) == 2842)
  {
    std::vector<float>::vector(buf, 0x2C680uLL);
    v6 = 0;
    v7 = *((_DWORD *)a2 + 4);
    v8 = *a2;
    v9 = *(_QWORD *)buf;
    do
    {
      v10 = 0;
      v11 = v6;
      do
      {
        *(_DWORD *)(v9 + 4 * v10++) = *(_DWORD *)(v8 + 4 * v11);
        v11 += v7;
      }
      while (v10 != 2842);
      ++v6;
      v9 += 11368;
    }
    while (v6 != 64);
    v12 = [VGMLFloatIOData alloc];
    v13 = -[VGMLFloatIOData initWithSize:withData:](v12, "initWithSize:withData:", 181888, *(_QWORD *)buf);
    std::vector<float>::vector(__p, 0x2C680uLL);
    v14 = [VGMLFloatIOData alloc];
    v15 = -[VGMLFloatIOData initWithSize:withData:](v14, "initWithSize:withData:", 181888, __p[0]);
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v13, 0);
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v15, 0);
    objc_msgSend(*(id *)(a1 + 24), "inferInputs:toOutputs:", v16, v17);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0xB1A00uLL, 0x49090899uLL);
    v18 = 0;
    v19 = memptr;
    v20 = __p[0];
    v21 = memptr;
    do
    {
      v22 = 0;
      v23 = v21;
      do
      {
        *v23 = v20[v22++];
        v23 += 64;
      }
      while (v22 != 2842);
      ++v18;
      ++v21;
      v20 += 2842;
    }
    while (v18 != 64);
    *(_QWORD *)a3 = v19;
    *(_OWORD *)(a3 + 8) = xmmword_249D3AD70;
    *(_BYTE *)(a3 + 24) = 1;

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (*(_QWORD *)buf)
    {
      v27 = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    __VGLogSharedInstance();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v24, OS_LOG_TYPE_ERROR, " DTF input dimension mismatch. ", buf, 2u);
    }

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

void sub_249CEB060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  if (a13)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_249CEB0C0()
{
  JUMPOUT(0x249CEB0A8);
}

void vg::hrtf::DTFBiasModelEspresso::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = (_OWORD *)operator new();
  *v7 = 0u;
  v7[1] = 0u;
  *v6 = (uint64_t)v7;
  v9 = v6;
  if (vg::hrtf::DTFBiasModelEspressoImpl::init((uint64_t)v7, a1, a2))
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CEB174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::DTFBiasModelEspresso *vg::hrtf::DTFBiasModelEspresso::DTFBiasModelEspresso(vg::hrtf::DTFBiasModelEspresso *this)
{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::DTFBiasModelEspresso::~DTFBiasModelEspresso(vg::hrtf::DTFBiasModelEspresso *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::DTFBiasModelEspresso::predictBiasDTF(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::DTFBiasModelEspressoImpl::predict(*a1, a2, a3);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_249CEB304(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
      std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x24BD02D60);
  }
}

void **cva::MatrixData<float,0ul,0ul,false>::MatrixData(void **a1, const void **a2, uint64_t a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  void *memptr;

  v6 = 4 * a3;
  v7 = (4 * a3 + 31) & 0xFFFFFFFFFFFFFFE0;
  *a1 = 0;
  a1[1] = (void *)(v7 >> 2);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
  v8 = memptr;
  *a1 = memptr;
  if (a3)
    memcpy(v8, *a2, v6);
  return a1;
}

uint64_t vg::hrtf::RectifyImpl::rectifyColor(vg::hrtf::RectifyImpl *this, IOSurface *a2, IOSurface *a3)
{
  IOSurface *v5;
  IOSurface *v6;
  uint64_t v7;

  v5 = a2;
  v6 = a3;
  if ((vg::hrtf::detail::map<unsigned char>((uint64_t)this, 0, v5, v6) & 1) != 0)
    v7 = vg::hrtf::detail::map<unsigned short>((uint64_t *)this + 3, 1, v5, v6);
  else
    v7 = 0;

  return v7;
}

void sub_249CEB4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::detail::map<unsigned char>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int i;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  NSObject *v27;
  void (**v30)(_QWORD);
  id v31;
  unsigned int v32;
  id v33;
  _QWORD v34[4];
  id v35;
  _QWORD v36[4];
  NSObject *v37;
  uint8_t buf[16];

  v7 = a3;
  v31 = a4;
  v8 = objc_msgSend(v7, "heightOfPlaneAtIndex:", a2);
  v9 = objc_msgSend(v7, "widthOfPlaneAtIndex:", a2);
  v10 = objc_msgSend(v7, "bytesPerRowOfPlaneAtIndex:", a2);
  v11 = objc_msgSend(v31, "bytesPerRowOfPlaneAtIndex:", a2);
  v33 = objc_retainAutorelease(v7);
  v12 = objc_msgSend(v33, "baseAddressOfPlaneAtIndex:", a2);
  v13 = objc_retainAutorelease(v31);
  v14 = objc_msgSend(v13, "baseAddressOfPlaneAtIndex:", a2);
  v15 = *(_DWORD *)(a1 + 16) == 2 * v9 && v8 == *(_DWORD *)(a1 + 20);
  v16 = v15;
  v32 = v16;
  if (v15)
  {
    v17 = v14;
    objc_msgSend(v13, "lockWithOptions:seed:", 0, 0);
    objc_msgSend(v33, "lockWithOptions:seed:", 1, 0);
    v18 = MEMORY[0x24BDAC760];
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 3221225472;
    v36[2] = ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke;
    v36[3] = &unk_251B22CB8;
    v37 = v13;
    v30 = (void (**)(_QWORD))MEMORY[0x24BD03294](v36);
    v34[0] = v18;
    v34[1] = 3221225472;
    v34[2] = ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2;
    v34[3] = &unk_251B22CB8;
    v35 = v33;
    v19 = MEMORY[0x24BD03294](v34);
    v20 = (void *)v19;
    if (v8)
    {
      for (i = 0; i < v8; ++i)
      {
        if (v9)
        {
          v22 = 0;
          v23 = 1;
          do
          {
            v24 = v23 + i * *(_DWORD *)(a1 + 16);
            v25 = *(unsigned int *)(*(_QWORD *)a1 + 4 * (v24 - 1));
            if ((v25 & 0x80000000) != 0)
              v26 = 0;
            else
              v26 = *(_BYTE *)(v12 + v10 * *(int *)(*(_QWORD *)a1 + 4 * v24) + v25);
            *(_BYTE *)(v17 + v22++) = v26;
            v23 += 2;
          }
          while (v9 > v22);
        }
        v17 += v11;
      }
    }
    (*(void (**)(uint64_t))(v19 + 16))(v19);

    v30[2](v30);
    v27 = v37;
  }
  else
  {
    __VGLogSharedInstance();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v27, OS_LOG_TYPE_ERROR, " Lookup table dimension mismatch. ", buf, 2u);
    }
  }

  return v32;
}

void sub_249CEB734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::detail::map<unsigned short>(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  __int16 v28;
  NSObject *v29;
  void (**v32)(_QWORD);
  id v33;
  unsigned int v34;
  id v35;
  _QWORD v36[4];
  id v37;
  _QWORD v38[4];
  NSObject *v39;
  uint8_t buf[16];

  v7 = a3;
  v33 = a4;
  v8 = objc_msgSend(v7, "heightOfPlaneAtIndex:", a2);
  v9 = objc_msgSend(v7, "widthOfPlaneAtIndex:", a2);
  v10 = objc_msgSend(v7, "bytesPerRowOfPlaneAtIndex:", a2);
  v11 = objc_msgSend(v33, "bytesPerRowOfPlaneAtIndex:", a2);
  v35 = objc_retainAutorelease(v7);
  v12 = objc_msgSend(v35, "baseAddressOfPlaneAtIndex:", a2);
  v13 = objc_retainAutorelease(v33);
  v14 = objc_msgSend(v13, "baseAddressOfPlaneAtIndex:", a2);
  v15 = *((_DWORD *)a1 + 4) == 2 * v9 && v8 == *((_DWORD *)a1 + 5);
  v16 = v15;
  v34 = v16;
  if (v15)
  {
    v17 = v14;
    objc_msgSend(v13, "lockWithOptions:seed:", 0, 0);
    objc_msgSend(v35, "lockWithOptions:seed:", 1, 0);
    v18 = MEMORY[0x24BDAC760];
    v38[0] = MEMORY[0x24BDAC760];
    v38[1] = 3221225472;
    v38[2] = ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke;
    v38[3] = &unk_251B22CB8;
    v39 = v13;
    v32 = (void (**)(_QWORD))MEMORY[0x24BD03294](v38);
    v36[0] = v18;
    v36[1] = 3221225472;
    v36[2] = ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2;
    v36[3] = &unk_251B22CB8;
    v37 = v35;
    v19 = MEMORY[0x24BD03294](v36);
    v20 = (void *)v19;
    if (v8)
    {
      v21 = 0;
      v22 = *((_DWORD *)a1 + 4);
      v23 = *a1;
      v24 = 1;
      do
      {
        if (v9)
        {
          v25 = 0;
          v26 = v24;
          do
          {
            v27 = *(unsigned int *)(v23 + 4 * (v26 - 1));
            if ((v27 & 0x80000000) != 0)
              v28 = 0;
            else
              v28 = *(_WORD *)(v12 + v10 * *(int *)(v23 + 4 * v26) + 2 * v27);
            *(_WORD *)(v17 + 2 * v25++) = v28;
            v26 += 2;
          }
          while (v9 > v25);
        }
        ++v21;
        v17 += v11;
        v24 += v22;
      }
      while (v8 > v21);
    }
    (*(void (**)(uint64_t))(v19 + 16))(v19);

    v32[2](v32);
    v29 = v39;
  }
  else
  {
    __VGLogSharedInstance();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v29, OS_LOG_TYPE_ERROR, " Lookup table dimension mismatch. ", buf, 2u);
    }
  }

  return v34;
}

void sub_249CEBA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::RectifyImpl::rectifyDepth(vg::hrtf::RectifyImpl *this, IOSurface *a2, IOSurface *a3)
{
  IOSurface *v5;
  IOSurface *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  id v26[5];
  id buf[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = a2;
  v6 = a3;
  if (-[IOSurface pixelFormat](v5, "pixelFormat") != 1278226534
    && -[IOSurface pixelFormat](v5, "pixelFormat") != 1717855600)
  {
    __VGLogSharedInstance();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      v24 = " Invalid depth image format. ";
      goto LABEL_19;
    }
LABEL_20:

    v22 = 0;
    goto LABEL_21;
  }
  v7 = *((unsigned int *)this + 16);
  if (v7 != 2 * -[IOSurface width](v5, "width")
    || (v8 = *((unsigned int *)this + 17), -[IOSurface height](v5, "height") != v8))
  {
    __VGLogSharedInstance();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      v24 = " Depth lookup table dimension mismatch. ";
LABEL_19:
      _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)buf, 2u);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, v5, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v26, v6, 0);
  v9 = -[IOSurface height](v5, "height");
  v10 = -[IOSurface width](v5, "width");
  if (v9)
  {
    v11 = 0;
    v12 = (char *)v26[2];
    v13 = (char *)v26[3];
    do
    {
      if (v10)
      {
        v14 = 0;
        v15 = *((_QWORD *)this + 6);
        v16 = v28;
        v17 = v29;
        v18 = v30;
        v19 = *((_DWORD *)this + 16) * v11;
        do
        {
          v20 = *(unsigned int *)(v15 + 4 * v19);
          if ((v20 & 0x80000000) != 0)
            v21 = 0;
          else
            v21 = *(_DWORD *)(v16 + v17 * *(int *)(v15 + 4 * (v19 + 1)) + v18 * v20);
          *(_DWORD *)&v12[4 * v14++] = v21;
          v19 += 2;
        }
        while (v10 > v14);
      }
      ++v11;
      v12 = &v13[(_QWORD)v12];
    }
    while (v9 > v11);
  }
  vg::IOSurfaceData::~IOSurfaceData(v26);
  vg::IOSurfaceData::~IOSurfaceData(buf);
  v22 = 1;
LABEL_21:

  return v22;
}

void sub_249CEBC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  id v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, id);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

void vg::hrtf::RectifyImpl::process(float32x2_t *this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, IOSurface *a4@<X3>, IOSurface *a5@<X4>, simd_float3x3 a6@<0:Q0, 16:Q1, 32:Q2>, VGHRTFDepthCalibrationData *a7@<X5>, uint64_t a8@<X8>)
{
  IOSurface *v14;
  IOSurface *v15;
  IOSurface *v16;
  VGHRTFDepthCalibrationData *v17;
  id v18;
  unint64_t v19;
  id v20;
  _DWORD *v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  double v41;
  void *v42;
  float32x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void *v49;
  float32x2_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  void *v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  IOSurface *v62;
  IOSurface *v63;
  __int128 v64;
  char v65;
  NSObject *v66;
  const char *v67;
  simd_float3x3 v68;
  float32x2_t v69;
  float v70;
  float v71;
  float v72;
  double v73;
  IOSurface *v74;
  uint8_t buf[8];
  float32x2_t v76;
  float32x2_t v77;
  float *v78;
  float *v79;
  uint64_t v80;

  v68 = a6;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v74 = a5;
  v17 = a7;
  -[VGHRTFDepthCalibrationData lensDistortionLut](v17, "lensDistortionLut");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "length");
  v20 = objc_retainAutorelease(v18);
  v21 = (_DWORD *)objc_msgSend(v20, "bytes");
  v19 >>= 2;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<float>::reserve((void **)&v78, v19);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,float const*,float const*,std::back_insert_iterator<std::vector<float>>,0>(v21, &v21[v19], (uint64_t)&v78);

  if (!this[20].i8[0])
    goto LABEL_14;
  v22 = v79 - v78;
  v23 = (float *)this[17];
  if (v22 != (uint64_t)(*(_QWORD *)&this[18] - (_QWORD)v23) >> 2)
    goto LABEL_14;
  if (v79 != v78)
  {
    v24 = v22 <= 1 ? 1 : v79 - v78;
    if (vabds_f32(*v78, *v23) > 0.000001)
      goto LABEL_14;
    v25 = 1;
    do
    {
      v26 = v25;
      if (v24 == v25)
        break;
      v27 = vabds_f32(v78[v25], v23[v25]);
      ++v25;
    }
    while (v27 <= 0.000001);
    if (v26 < v22)
      goto LABEL_14;
  }
  -[VGHRTFDepthCalibrationData lensDistortionCenter](v17, "lensDistortionCenter", *(_OWORD *)v68.columns, *(_OWORD *)&v68.columns[1], *(_OWORD *)&v68.columns[2]);
  v29 = vsub_f32(v28, this[16]);
  if (fabsf(v29.f32[0]) > 0.000001 || fabsf(v29.f32[1]) > 0.000001)
  {
LABEL_14:
    v30 = -[IOSurface width](v16, "width", *(_OWORD *)v68.columns, *(_OWORD *)&v68.columns[1], *(_OWORD *)&v68.columns[2]);
    -[VGHRTFDepthCalibrationData intrinsicMatrixReferenceDimension](v17, "intrinsicMatrixReferenceDimension");
    v72 = v31;
    -[VGHRTFDepthCalibrationData lensDistortionCenter](v17, "lensDistortionCenter");
    v70 = v32;
    -[VGHRTFDepthCalibrationData lensDistortionCenter](v17, "lensDistortionCenter");
    v69 = v33;
    v34 = -[IOSurface width](v14, "width");
    v35 = -[IOSurface width](v16, "width");
    v36 = -[IOSurface width](v14, "width");
    v37 = -[IOSurface height](v14, "height");
    v38 = (float)v30 / v72;
    v39.f32[0] = v38 * v70;
    v71 = v38;
    v39.i32[1] = vmuls_lane_f32(v38, v69, 1);
    v73 = *(double *)&v39;
    v40 = vmul_n_f32(v39, (float)v34 / (float)v35);
    *(float *)&v41 = (float)v36;
    *((float *)&v41 + 1) = (float)v37;
    vg::hrtf::detail::buildLUT((uint64_t *)&v78, (uint64_t)buf, v41, *(double *)&v40);
    v42 = (void *)*this;
    v43 = v76;
    *this = *(float32x2_t *)buf;
    this[1] = v43;
    this[2] = v77;
    free(v42);
    v44 = -[IOSurface width](v14, "width");
    v45 = -[IOSurface height](v14, "height");
    if (v44 >= 0)
      v46 = v44;
    else
      v46 = v44 + 1;
    *(float *)&v47 = (float)(v46 >> 1);
    if (v45 >= 0)
      v48 = v45;
    else
      v48 = v45 + 1;
    *((float *)&v47 + 1) = (float)(v48 >> 1);
    vg::hrtf::detail::buildLUT((uint64_t *)&v78, (uint64_t)buf, v47, COERCE_DOUBLE(vmul_f32(v40, (float32x2_t)0x3F0000003F000000)));
    v49 = (void *)this[3];
    v50 = v76;
    this[3] = *(float32x2_t *)buf;
    this[4] = v50;
    this[5] = v77;
    free(v49);
    v51 = -[IOSurface width](v16, "width");
    v52 = -[IOSurface height](v16, "height");
    *(float *)&v53 = (float)v51;
    *((float *)&v53 + 1) = (float)v52;
    vg::hrtf::detail::buildLUT((uint64_t *)&v78, (uint64_t)buf, v53, v73);
    v54 = (void *)this[6];
    v55 = v76;
    this[6] = *(float32x2_t *)buf;
    this[7] = v55;
    this[8] = v77;
    free(v54);
    -[VGHRTFDepthCalibrationData intrinsicMatrix](v17, "intrinsicMatrix");
    v57 = vmulq_n_f32(v56, v71);
    v59 = vmulq_n_f32(v58, v71);
    this[11].i32[0] = v57.i32[2];
    this[10] = *(float32x2_t *)v57.f32;
    this[13].i32[0] = v59.i32[2];
    this[12] = *(float32x2_t *)v59.f32;
    this[15].i32[0] = 1065353216;
    this[14] = (float32x2_t)vmulq_n_f32(v60, v71).u64[0];
    -[VGHRTFDepthCalibrationData lensDistortionCenter](v17, "lensDistortionCenter");
    this[16] = v61;
    if (&this[17] != (float32x2_t *)&v78)
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&this[17], (char *)v78, (uint64_t)v79, v79 - v78);
    this[20].i8[0] = 1;
  }
  if ((vg::hrtf::RectifyImpl::rectifyColor((vg::hrtf::RectifyImpl *)this, v14, v15) & 1) != 0)
  {
    if ((vg::hrtf::RectifyImpl::rectifyDepth((vg::hrtf::RectifyImpl *)this, v16, v74) & 1) != 0)
    {
      v62 = v15;
      v63 = v74;
      *(_QWORD *)a8 = v62;
      *(simd_float3x3 *)(a8 + 16) = v68;
      *(_QWORD *)(a8 + 64) = v63;
      v64 = *(_OWORD *)this[12].f32;
      *(_OWORD *)(a8 + 80) = *(_OWORD *)this[10].f32;
      *(_OWORD *)(a8 + 96) = v64;
      v65 = 1;
      *(_OWORD *)(a8 + 112) = *(_OWORD *)this[14].f32;
      goto LABEL_32;
    }
    __VGLogSharedInstance();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v67 = " Failed to rectify depth image. ";
      goto LABEL_30;
    }
  }
  else
  {
    __VGLogSharedInstance();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v67 = " Failed to rectify YUV image. ";
LABEL_30:
      _os_log_impl(&dword_249CAD000, v66, OS_LOG_TYPE_ERROR, v67, buf, 2u);
    }
  }

  v65 = 0;
  *(_BYTE *)a8 = 0;
LABEL_32:
  *(_BYTE *)(a8 + 128) = v65;
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }

}

void sub_249CEC148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
  }

  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::detail::buildLUT@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  uint64_t result;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  unsigned int v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  int v33;
  _BOOL4 v35;
  void *memptr;

  v6 = *((float *)&a3 + 1);
  v7 = (int)*(float *)&a3;
  v8 = (int)*((float *)&a3 + 1);
  v10 = *a1;
  v9 = a1[1];
  v11 = 2 * (int)*(float *)&a3;
  v12 = (4 * (v11 * (int)*((float *)&a3 + 1)) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v12 >> 2;
  memptr = 0;
  result = malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
  v14 = memptr;
  *(_QWORD *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 20) = v8;
  if (*(float *)&a3 > 0.0)
  {
    v15 = 0;
    v16 = 0;
    v17 = vsub_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a4);
    v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v17, *(float32x2_t *)&a4), (int8x8_t)v17, *(int8x8_t *)&a4);
    v19 = sqrtf(vaddv_f32(vmul_f32(v18, v18)));
    v20 = ((v9 - v10) >> 2) - 1;
    v21 = 0.0;
    do
    {
      if (v6 > 0.0)
      {
        v22 = v21 - *(float *)&a4;
        v23 = *a1;
        v24 = 0.0;
        v25 = 1;
        v26 = v15;
        do
        {
          v27 = v24 - *((float *)&a4 + 1);
          v28 = sqrtf(vaddv_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v27), LODWORD(v22)), (float32x2_t)__PAIR64__(LODWORD(v27), LODWORD(v22)))));
          if (v28 >= v19)
          {
            v30 = *(float *)(v23 + 4 * v20);
          }
          else
          {
            v29 = (float)(v28 * (float)(unint64_t)v20) / v19;
            v30 = (float)((float)(v29 - (float)(int)v29) * *(float *)(v23 + 4 * (int)v29 + 4))
                + (float)((float)(1.0 - (float)(v29 - (float)(int)v29)) * *(float *)(v23 + 4 * (int)v29));
          }
          v31 = v30 + 1.0;
          v32 = (int)(float)(*(float *)&a4 + (float)(v22 * v31));
          if (v32 < 0)
          {
            v32 = -1;
            v33 = -1;
          }
          else
          {
            v33 = (int)(float)(*((float *)&a4 + 1) + (float)(v27 * v31));
            v35 = v32 < v7 && v33 >= 0;
            result = v33 < v8;
            if ((v35 & result) == 0)
            {
              v32 = -1;
              v33 = -1;
            }
          }
          v14[v26] = v32;
          v14[v26 + 1] = v33;
          v24 = (float)v25;
          v26 += v11;
          ++v25;
        }
        while (v6 > v24);
      }
      v21 = (float)++v16;
      v15 += 2;
    }
    while (*(float *)&a3 > (float)v16);
  }
  return result;
}

double vg::hrtf::Rectify::create@<D0>(vg::hrtf::Rectify *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  double result;

  v3 = (_QWORD *)operator new();
  v4 = operator new();
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(v4 + 128) = result;
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 160) = 0;
  *v3 = v4;
  *a2 = v3;
  return result;
}

void sub_249CEC430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

vg::hrtf::Rectify *vg::hrtf::Rectify::Rectify(vg::hrtf::Rectify *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v2 + 128) = _D0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_BYTE *)(v2 + 160) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v2 + 128) = _D0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_BYTE *)(v2 + 160) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::Rectify::~Rectify(vg::hrtf::Rectify *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::RectifyImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::RectifyImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::Rectify::process(vg::hrtf::Rectify *this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, simd_float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, VGHRTFDepthCalibrationData *a5@<X3>, uint64_t a6@<X8>)
{
  IOSurface *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  IOSurface *v37;
  float32x2_t **v39;
  uint64_t v41;
  simd_float3x3 v43;
  IOSurface *v44;
  VGHRTFDepthCalibrationData *v45;
  IOSurface *v46;
  _QWORD v47[4];
  _QWORD v48[4];
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[2];
  _QWORD v54[4];
  _QWORD v55[6];

  v55[4] = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v46 = a3;
  v45 = a5;
  v9 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v54[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v46, "width"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v55[0] = v10;
  v54[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface height](v46, "height"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x24BDD8D60];
  v55[1] = v11;
  v55[2] = &unk_251B34BE0;
  v13 = *MEMORY[0x24BDD8D38];
  v54[2] = v12;
  v54[3] = v13;
  v55[3] = &unk_251B34BF8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v55, v54, 4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = (IOSurface *)objc_msgSend(v9, "initWithProperties:", v14);

  v15 = (_QWORD *)MEMORY[0x24BDD8D88];
  v51[0] = *MEMORY[0x24BDD8D88];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v8, "width"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v52[0] = v16;
  v17 = (_QWORD *)MEMORY[0x24BDD8D78];
  v51[1] = *MEMORY[0x24BDD8D78];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface height](v8, "height"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (_QWORD *)MEMORY[0x24BDD8D68];
  v51[2] = *MEMORY[0x24BDD8D68];
  v52[1] = v18;
  v52[2] = &unk_251B34C10;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v52, v51, 3);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v53[0] = v20;
  v49[0] = *v15;
  v21 = (void *)MEMORY[0x24BDD16E0];
  v22 = -[IOSurface width](v8, "width");
  if (v22 >= 0)
    v23 = v22;
  else
    v23 = v22 + 1;
  objc_msgSend(v21, "numberWithInteger:", v23 >> 1, this, a6, *(_OWORD *)a4.columns, *(_OWORD *)&a4.columns[1], *(_OWORD *)&a4.columns[2]);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v50[0] = v24;
  v49[1] = *v17;
  v25 = (void *)MEMORY[0x24BDD16E0];
  v26 = -[IOSurface height](v8, "height");
  if (v26 >= 0)
    v27 = v26;
  else
    v27 = v26 + 1;
  objc_msgSend(v25, "numberWithInteger:", v27 >> 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v49[2] = *v19;
  v50[1] = v28;
  v50[2] = &unk_251B34C28;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v50, v49, 3);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v53[1] = v29;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v53, 2);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  v31 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v47[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v8, "width"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v48[0] = v32;
  v47[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface height](v8, "height"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = *MEMORY[0x24BDD8D60];
  v48[1] = v33;
  v48[2] = &unk_251B34C40;
  v35 = *MEMORY[0x24BDD8D80];
  v47[2] = v34;
  v47[3] = v35;
  v48[3] = v30;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v48, v47, 4);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (IOSurface *)objc_msgSend(v31, "initWithProperties:", v36);

  vg::hrtf::RectifyImpl::process(*v39, v8, v37, v46, v44, v43, v45, v41);
}

void sub_249CEC9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,float const*,float const*,std::back_insert_iterator<std::vector<float>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 1, 0);
}

uint64_t ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 1, 0);
}

void std::default_delete<vg::hrtf::RectifyImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 136);
    if (v3)
    {
      *(_QWORD *)(a2 + 144) = v3;
      operator delete(v3);
    }
    free(*(void **)(a2 + 48));
    free(*(void **)(a2 + 24));
    free(*(void **)a2);
    JUMPOUT(0x24BD02D60);
  }
}

id vg::hrtf::createUserData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint8_t v15[8];
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v2)
  {
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      v13 = " No CTF values found for user data field in IRData. ";
LABEL_12:
      _os_log_impl(&dword_249CAD000, v5, OS_LOG_TYPE_ERROR, v13, v15, 2u);
    }
LABEL_13:
    v12 = 0;
    goto LABEL_14;
  }
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v2)
  {
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      v13 = " Left and right CTF values must be of same length. ";
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v7 = 0;
  v8 = 4 * v2;
  do
  {
    LODWORD(v6) = *(_DWORD *)(*(_QWORD *)a1 + v7);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject addObject:](v5, "addObject:", v9);

    v7 += 4;
  }
  while (v8 != v7);
  v10 = 0;
  do
  {
    LODWORD(v6) = *(_DWORD *)(*(_QWORD *)a2 + v10);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject addObject:](v5, "addObject:", v11);

    v10 += 4;
  }
  while (v8 != v10);
  v16[0] = CFSTR("DiffuseFieldPowerRMS");
  v16[1] = CFSTR("CTF");
  v17[0] = &unk_251B34838;
  v17[1] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:

  return v12;
}

void sub_249CECE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::hrtf::hrtfToIRData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  int *v20;
  _DWORD **v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  float **v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD v42[2];
  CFTypeRef cf;
  void *v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50[4];
  uint8_t buf[8];
  const void *v52;
  _QWORD *v53;
  void *__p;
  _BYTE *v55;
  _QWORD v56[3];
  float *v57;
  float *v58;
  uint64_t v59;
  uint8_t v60[8];
  void *v61;
  char v62;

  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 16)
    && (v9 = *(unsigned int *)(a1 + 20), (_DWORD)v9 == *(_DWORD *)(a2 + 20))
    && *(_DWORD *)(a3 + 16) == *(_DWORD *)(a4 + 16))
  {
    LODWORD(v57) = 0;
    std::vector<float>::vector(v60, 4 * v6, &v57);
    std::vector<std::vector<float>>::vector(v56, v9, (uint64_t)v60);
    if (*(_QWORD *)v60)
    {
      v61 = *(void **)v60;
      operator delete(*(void **)v60);
    }
    if ((_DWORD)v9)
    {
      v12 = 0;
      v13 = 0;
      v14 = 2 * v6;
      do
      {
        vg::hrtf::getTaps(a1, v13, (uint64_t)v60);
        vg::hrtf::getTaps(a2, v13, (uint64_t)&v57);
        *(_DWORD *)buf = 0;
        std::vector<float>::vector(&__p, v14, buf);
        if (vg::hrtf::makeMinimumPhase((float **)v60, (float **)&__p))
        {
          LODWORD(v50[0]) = 0;
          std::vector<float>::vector(buf, v14, v50);
          if (!vg::hrtf::makeMinimumPhase(&v57, (float **)buf))
          {
            __VGLogSharedInstance();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v50[0]) = 0;
              _os_log_impl(&dword_249CAD000, v18, OS_LOG_TYPE_ERROR, " Failed to transform right HRTF coefficients from the frequency domain to the time domain. ", (uint8_t *)v50, 2u);
            }

            *a5 = 0;
            a5[1] = 0;
            v16 = 1;
LABEL_20:
            v15 = *(void **)buf;
            if (!*(_QWORD *)buf)
              goto LABEL_22;
LABEL_21:
            v52 = v15;
            operator delete(v15);
            goto LABEL_22;
          }
          if (v55 != __p)
            memmove(*(void **)(v56[0] + v12), __p, v55 - (_BYTE *)__p);
          v15 = *(void **)buf;
          if (v52 != *(const void **)buf)
          {
            memmove((void *)(*(_QWORD *)(v56[0] + v12) + v55 - (_BYTE *)__p), *(const void **)buf, (size_t)v52 - *(_QWORD *)buf);
            v16 = 0;
            goto LABEL_20;
          }
          v16 = 0;
          if (*(_QWORD *)buf)
            goto LABEL_21;
        }
        else
        {
          __VGLogSharedInstance();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_249CAD000, v17, OS_LOG_TYPE_ERROR, " Failed to transform left HRTF coefficients from the frequency domain to the time domain. ", buf, 2u);
          }

          *a5 = 0;
          a5[1] = 0;
          v16 = 1;
        }
LABEL_22:
        if (__p)
        {
          v55 = __p;
          operator delete(__p);
        }
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (*(_QWORD *)v60)
        {
          v61 = *(void **)v60;
          operator delete(*(void **)v60);
        }
        if (v16)
          goto LABEL_61;
        ++v13;
        v12 += 24;
      }
      while (v9 != v13);
    }
    LODWORD(v57) = 0;
    std::vector<float>::vector(v60, 2uLL, &v57);
    std::vector<std::vector<float>>::vector(&__p, v9, (uint64_t)v60);
    if (*(_QWORD *)v60)
    {
      v61 = *(void **)v60;
      operator delete(*(void **)v60);
    }
    if ((_DWORD)v9)
    {
      v20 = *(int **)a3;
      v21 = (_DWORD **)__p;
      v22 = v9;
      v23 = *(_DWORD **)a4;
      do
      {
        v24 = *v20++;
        v25 = v24;
        v27 = *v21;
        v21 += 3;
        v26 = v27;
        *v27 = v25;
        LODWORD(v27) = *v23++;
        v26[1] = (_DWORD)v27;
        --v22;
      }
      while (v22);
      v28 = (float **)__p;
      do
      {
        v30 = *v28;
        v28 += 3;
        v29 = v30;
        v32 = *v30;
        v31 = v30[1];
        if (v31 >= *v30)
          v33 = v32;
        else
          v33 = v31;
        *v29 = v32 - v33;
        v29[1] = v31 - v33;
        --v9;
      }
      while (v9);
    }
    v34 = operator new(8uLL);
    *(_QWORD *)buf = v34;
    *v34 = 1;
    v52 = v34 + 1;
    v53 = v34 + 1;
    objc_msgSend(MEMORY[0x24BDD1488], "vg_resourcePath");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "stringByAppendingPathComponent:", CFSTR("ir_coordinates/ir_dimensions.bin"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    v37 = objc_retainAutorelease(v36);
    v38 = std::string::basic_string[abi:ne180100]<0>(v60, (char *)objc_msgSend(v37, "UTF8String"));
    vg::load2DVectorData<float>(v38, 0xB1AuLL, 2uLL, (uint64_t)&v57);
    if (v62 < 0)
      operator delete(*(void **)v60);

    vg::toStdVector<float>((uint64_t *)&v57, v50);
    free(v57);
    v39 = operator new(8uLL);
    v47 = v39;
    *v39 = 0x43B4000000000000;
    v48 = v39 + 1;
    v49 = v39 + 1;
    v40 = operator new(8uLL);
    v44 = v40;
    *v40 = 0x100000001;
    v45 = v40 + 1;
    v46 = v40 + 1;
    v42[0] = 0;
    v42[1] = 0;
    cf = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v42);
    v41 = operator new(0x20uLL);
    v41[2] = 0;
    *v41 = &unk_251B232F8;
    v41[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(v60, "");
    v57 = 0;
    v58 = 0;
    v59 = 0;
    IR::IRData::IRData();
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v62 < 0)
      operator delete(*(void **)v60);
    *a5 = v41 + 3;
    a5[1] = v41;
    if (cf)
      CFRelease(cf);
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    *(_QWORD *)v60 = v50;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
    if (*(_QWORD *)buf)
    {
      v52 = *(const void **)buf;
      operator delete(*(void **)buf);
    }
    *(_QWORD *)v60 = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
LABEL_61:
    *(_QWORD *)v60 = v56;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
  }
  else
  {
    __VGLogSharedInstance();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_249CAD000, v19, OS_LOG_TYPE_ERROR, " Invalid inputs for HRTF to IRData conversion. ", v60, 2u);
    }

    *a5 = 0;
    a5[1] = 0;
  }
}

void sub_249CED3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  std::__shared_weak_count *v31;
  uint64_t v32;
  void *v34;
  void *v35;

  v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(_QWORD *)(v32 - 128) = v34;
    operator delete(v34);
  }
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v35);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a16);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  *(_QWORD *)(v32 - 136) = &a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 136));
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  *(_QWORD *)(v32 - 136) = &a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = v32 - 160;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 136));
  _Unwind_Resume(a1);
}

void vg::hrtf::getTaps(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  int v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  int v20;

  v6 = *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::vector<float>::reserve((void **)a3, v6);
  if ((_DWORD)v6)
  {
    v7 = 0;
    do
    {
      v8 = __exp10f(*(float *)(*(_QWORD *)a1 + 4 * (v7 + *(_DWORD *)(a1 + 16) * a2)) / 20.0);
      v9 = v8;
      v11 = *(float **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(float **)a3;
        v14 = ((uint64_t)v11 - *(_QWORD *)a3) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a3 + 16, v17);
          v13 = *(float **)a3;
          v11 = *(float **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      ++v7;
    }
    while (v7 != (_DWORD)v6);
  }
}

void sub_249CED6B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL vg::hrtf::makeMinimumPhase(float **a1, float **a2)
{
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  int v21;
  const vDSP_DFT_SetupStruct *Setup;
  _BOOL8 v23;
  float v24;
  float *v25;
  uint64_t v26;
  float *v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float v35;
  const vDSP_DFT_SetupStruct *v36;
  vDSP_DFT_SetupStruct *v37;
  float *v38;
  float *v39;
  float *v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  const vDSP_DFT_SetupStruct *v46;
  float *v47;
  uint64_t v48;
  int v50;
  float *v51[3];
  float *v52[3];
  float *__Ir[3];
  float *__Oi[3];
  float *__Or[3];
  float *__Ii[3];
  void *v57[4];

  v5 = *a1;
  v4 = a1[1];
  v7 = *a2;
  v6 = a2[1];
  v8 = (char *)v6 - (char *)*a2;
  v9 = v8 >> 2;
  LODWORD(__Ii[0]) = 0;
  std::vector<float>::vector(v57, v8 >> 2, __Ii);
  v10 = v4 == v5;
  v11 = v4 - v5;
  if (!v10)
  {
    v12 = *a1;
    if (v11 <= 1)
      v13 = 1;
    else
      v13 = v11;
    v14 = (float *)((char *)v57[0] + 4);
    do
    {
      v15 = *v12++;
      v16 = logf(v15);
      if (v15 <= 0.000001)
        v16 = 0.0;
      *v14++ = v16;
      --v13;
    }
    while (v13);
  }
  if (v11 + 1 < v9)
  {
    v17 = v9 + ~v11;
    v18 = (char *)v57[0] + 4 * v11;
    v19 = v18 + 4;
    v20 = v18 - 4;
    do
    {
      v21 = *(_DWORD *)v20;
      v20 -= 4;
      *v19++ = v21;
      --v17;
    }
    while (v17);
  }
  LODWORD(__Or[0]) = 0;
  std::vector<float>::vector(__Ii, v8 >> 2, __Or);
  LODWORD(__Oi[0]) = 0;
  std::vector<float>::vector(__Or, v8 >> 2, __Oi);
  LODWORD(__Ir[0]) = 0;
  std::vector<float>::vector(__Oi, v8 >> 2, __Ir);
  Setup = vDSP_DFT_zop_CreateSetup(0, v8 >> 2, vDSP_DFT_INVERSE);
  v23 = (_BOOL8)Setup;
  if (Setup)
  {
    vDSP_DFT_Execute(Setup, (const float *)v57[0], __Ii[0], __Or[0], __Oi[0]);
    vDSP_DFT_DestroySetup((vDSP_DFT_Setup)v23);
    v24 = 1.0 / (float)v9;
    if (v6 != v7)
    {
      v25 = __Or[0];
      if (v9 <= 1)
        v26 = 1;
      else
        v26 = v8 >> 2;
      do
      {
        *v25 = v24 * *v25;
        ++v25;
        --v26;
      }
      while (v26);
    }
    LODWORD(v52[0]) = 0;
    std::vector<float>::vector(__Ir, v8 >> 2, v52);
    v27 = __Or[0];
    v28 = __Ir[0];
    *__Ir[0] = *__Or[0];
    v29 = ((unint64_t)v8 >> 2) & 1;
    v30 = (v29 + v9) >> 1;
    if (v29 + v9 >= 4)
    {
      v31 = 2;
      if (v30 > 2)
        v31 = (v29 + v9) >> 1;
      v32 = v31 - 1;
      v33 = v27 + 1;
      v34 = v28 + 1;
      do
      {
        v35 = *v33++;
        *v34++ = v35 + v35;
        --v32;
      }
      while (v32);
    }
    if (!v29)
      v28[v30] = v27[v30];
    v36 = vDSP_DFT_zop_CreateSetup(0, v8 >> 2, vDSP_DFT_FORWARD);
    v37 = v36;
    v23 = v36 != 0;
    if (v36)
    {
      vDSP_DFT_Execute(v36, __Ir[0], __Ii[0], __Or[0], __Oi[0]);
      vDSP_DFT_DestroySetup(v37);
      LODWORD(v51[0]) = 0;
      std::vector<float>::vector(v52, v9, v51);
      v50 = 0;
      std::vector<float>::vector(v51, v9, &v50);
      if (v6 != v7)
      {
        v38 = __Or[0];
        v39 = __Oi[0];
        v40 = v52[0];
        v41 = v51[0];
        if (v9 <= 1)
          v42 = 1;
        else
          v42 = v9;
        do
        {
          v43 = *v38++;
          v44 = expf(v43);
          *v40++ = v44 * cosf(*v39);
          v45 = *v39++;
          *v41++ = v44 * sinf(v45);
          --v42;
        }
        while (v42);
      }
      v46 = vDSP_DFT_zop_CreateSetup(0, v9, vDSP_DFT_INVERSE);
      vDSP_DFT_Execute(v46, v52[0], v51[0], *a2, __Oi[0]);
      vDSP_DFT_DestroySetup(v46);
      if (v6 != v7)
      {
        v47 = *a2;
        if (v9 <= 1)
          v48 = 1;
        else
          v48 = v9;
        do
        {
          *v47 = v24 * *v47;
          ++v47;
          --v48;
        }
        while (v48);
      }
      if (v51[0])
      {
        v51[1] = v51[0];
        operator delete(v51[0]);
      }
      if (v52[0])
      {
        v52[1] = v52[0];
        operator delete(v52[0]);
      }
    }
    if (__Ir[0])
    {
      __Ir[1] = __Ir[0];
      operator delete(__Ir[0]);
    }
  }
  if (__Oi[0])
  {
    __Oi[1] = __Oi[0];
    operator delete(__Oi[0]);
  }
  if (__Or[0])
  {
    __Or[1] = __Or[0];
    operator delete(__Or[0]);
  }
  if (__Ii[0])
  {
    __Ii[1] = __Ii[0];
    operator delete(__Ii[0]);
  }
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  return v23;
}

void sub_249CEDA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void vg::toStdVector<float>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  void *__p[3];

  v4 = *((unsigned int *)a1 + 4);
  std::vector<float>::vector(__p, *((unsigned int *)a1 + 5));
  std::vector<std::vector<float>>::vector(a2, v4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v5 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *((unsigned int *)a1 + 5);
    v8 = *a1;
    v9 = *a2;
    do
    {
      if ((_DWORD)v7)
      {
        v10 = *(_DWORD **)(v9 + 24 * v6);
        v11 = v7;
        v12 = v6;
        do
        {
          *v10++ = *(_DWORD *)(v8 + 4 * v12);
          v12 += v5;
          --v11;
        }
        while (v11);
      }
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_249CEDBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::getIRValues(IR::IRData **a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  vg::hrtf::IRGrid *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  unint64_t FilterLength;
  vg::hrtf::IRGrid *i;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _DWORD *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  void *v47[5];
  void *v48[3];
  _QWORD v49[3];
  uint8_t v50[16];
  char *v51;
  __int128 v52;
  uint64_t v53;
  void *__p;
  char *v55;
  char *v56;
  uint8_t buf[8];
  _DWORD *v58;
  _BYTE *v59;
  _QWORD v60[4];

  if (IR::IRData::getNumFiltersPerSpatialPoint(*a1) == 2)
  {
    IR::IRData::getCoordinateTree(*a1);
    if (*(_DWORD *)buf == 1)
    {
      v4 = v58;
      v3 = v59;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v60[1] - v60[0]) >> 3) == (v59 - (_BYTE *)v58) >> 2)
      {
        __p = 0;
        v55 = 0;
        v56 = 0;
        if (v59 == (_BYTE *)v58)
        {
          v7 = 0;
LABEL_43:
          FilterLength = IR::IRData::getFilterLength(*a1);
          vg::hrtf::IRGrid::GetIRGrid(v7, FilterLength, (uint64_t)v50);
          if (v7)
          {
            for (i = 0; i != v7; i = (vg::hrtf::IRGrid *)((char *)i + 1))
            {
              std::vector<float>::vector(v47, FilterLength);
              std::vector<std::vector<float>>::vector(v49, 2uLL, (uint64_t)v47);
              if (v47[0])
              {
                v47[1] = v47[0];
                operator delete(v47[0]);
              }
              std::vector<float>::vector(v48, 2uLL);
              IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)v47);
              IR::IRCoordinates::set();
              IR::IRCoordinates::set();
              IR::IRData::getInterpolatedTimeDomainCoeffs();
              v27 = __p;
              v28 = *(_QWORD *)&v50[8];
              if (*(_QWORD *)&v50[8] >= (unint64_t)v51)
              {
                v30 = (uint64_t)(*(_QWORD *)&v50[8] - *(_QWORD *)v50) >> 3;
                if ((unint64_t)(v30 + 1) >> 61)
                  std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
                v31 = (uint64_t)&v51[-*(_QWORD *)v50] >> 2;
                if (v31 <= v30 + 1)
                  v31 = v30 + 1;
                if ((unint64_t)&v51[-*(_QWORD *)v50] >= 0x7FFFFFFFFFFFFFF8)
                  v32 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v32 = v31;
                if (v32)
                  v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v51, v32);
                else
                  v33 = 0;
                v34 = &v33[8 * v30];
                *(_QWORD *)v34 = v27[(_QWORD)i];
                v29 = v34 + 8;
                v36 = *(char **)v50;
                v35 = *(char **)&v50[8];
                if (*(_QWORD *)&v50[8] != *(_QWORD *)v50)
                {
                  do
                  {
                    v37 = *((_QWORD *)v35 - 1);
                    v35 -= 8;
                    *((_QWORD *)v34 - 1) = v37;
                    v34 -= 8;
                  }
                  while (v35 != v36);
                  v35 = *(char **)v50;
                }
                *(_QWORD *)v50 = v34;
                *(_QWORD *)&v50[8] = v29;
                v51 = &v33[8 * v32];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                **(_QWORD **)&v50[8] = *((_QWORD *)__p + (_QWORD)i);
                v29 = (_QWORD *)(v28 + 8);
              }
              *(_QWORD *)&v50[8] = v29;
              v38 = v49[0];
              v39 = v52;
              v40 = (char *)(v52 + ((_QWORD)i << 6));
              if (v40 != (char *)v49[0])
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v40, *(char **)v49[0], *(_QWORD *)(v49[0] + 8), (uint64_t)(*(_QWORD *)(v49[0] + 8) - *(_QWORD *)v49[0]) >> 2);
                v38 = v49[0];
                v39 = v52;
              }
              v41 = (char *)(v39 + ((_QWORD)i << 6) + 32);
              if (v41 != (char *)(v38 + 24))
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v41, *(char **)(v38 + 24), *(_QWORD *)(v38 + 32), (uint64_t)(*(_QWORD *)(v38 + 32) - *(_QWORD *)(v38 + 24)) >> 2);
                v39 = v52;
              }
              v42 = v48[0];
              v43 = v39 + ((_QWORD)i << 6);
              *(_DWORD *)(v43 + 24) = *(_DWORD *)v48[0];
              *(_DWORD *)(v43 + 56) = v42[1];
              v48[1] = v42;
              operator delete(v42);
              v47[0] = v49;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
            }
          }
          *(_OWORD *)a2 = *(_OWORD *)v50;
          *(_QWORD *)(a2 + 16) = v51;
          memset(v50, 0, sizeof(v50));
          *(_OWORD *)(a2 + 24) = v52;
          *(_QWORD *)(a2 + 40) = v53;
          v51 = 0;
          v52 = 0uLL;
          v53 = 0;
          *(_BYTE *)(a2 + 48) = 1;
          v47[0] = &v52;
          std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
          if (*(_QWORD *)v50)
          {
            *(_QWORD *)&v50[8] = *(_QWORD *)v50;
            operator delete(*(void **)v50);
          }
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v7 = 0;
          while (1)
          {
            if (*(_DWORD *)(v60[0] + 56 * v6))
            {
              __VGLogSharedInstance();
              v44 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                goto LABEL_75;
              *(_WORD *)v50 = 0;
              v45 = " Subnode dimension must be of Azimuth type. ";
              goto LABEL_74;
            }
            if (*(_QWORD *)(v60[0] + 56 * v6 + 32) != *(_QWORD *)(v60[0] + 56 * v6 + 40))
              break;
            v8 = v60[0] + 56 * v6;
            v10 = *(int **)(v8 + 8);
            v9 = *(int **)(v8 + 16);
            if (v10 != v9)
            {
              v11 = v4[v6];
              do
              {
                v12 = *v10;
                if (v5 >= v56)
                {
                  v13 = (char *)__p;
                  v14 = (v5 - (_BYTE *)__p) >> 3;
                  v15 = v14 + 1;
                  if ((unint64_t)(v14 + 1) >> 61)
                    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
                  v16 = v56 - (_BYTE *)__p;
                  if ((v56 - (_BYTE *)__p) >> 2 > v15)
                    v15 = v16 >> 2;
                  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
                    v17 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v17 = v15;
                  if (v17)
                  {
                    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v56, v17);
                    v13 = (char *)__p;
                    v5 = v55;
                  }
                  else
                  {
                    v18 = 0;
                  }
                  v19 = &v18[8 * v14];
                  *(_DWORD *)v19 = v11;
                  *((_DWORD *)v19 + 1) = v12;
                  v20 = v19;
                  if (v5 != v13)
                  {
                    do
                    {
                      v21 = *((_QWORD *)v5 - 1);
                      v5 -= 8;
                      *((_QWORD *)v20 - 1) = v21;
                      v20 -= 8;
                    }
                    while (v5 != v13);
                    v13 = (char *)__p;
                  }
                  v5 = v19 + 8;
                  __p = v20;
                  v55 = v19 + 8;
                  v56 = &v18[8 * v17];
                  if (v13)
                    operator delete(v13);
                }
                else
                {
                  *(_DWORD *)v5 = v11;
                  *((_DWORD *)v5 + 1) = v12;
                  v5 += 8;
                }
                v55 = v5;
                v7 = (vg::hrtf::IRGrid *)((char *)v7 + 1);
                ++v10;
              }
              while (v10 != v9);
              v4 = v58;
              v3 = v59;
            }
            if (++v6 >= (unint64_t)((v3 - (_BYTE *)v4) >> 2))
              goto LABEL_43;
          }
          __VGLogSharedInstance();
          v44 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            goto LABEL_75;
          *(_WORD *)v50 = 0;
          v45 = " Unexpected dimension in subnode. ";
LABEL_74:
          _os_log_impl(&dword_249CAD000, v44, OS_LOG_TYPE_ERROR, v45, v50, 2u);
LABEL_75:

          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 48) = 0;
        }
        if (__p)
        {
          v55 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_39;
      }
      __VGLogSharedInstance();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v50 = 0;
        v24 = " Wrong subnode count in coordinate tree. ";
        goto LABEL_37;
      }
    }
    else
    {
      __VGLogSharedInstance();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v50 = 0;
        v24 = " Elevation must be the first level of coordinates in coordinate tree. ";
LABEL_37:
        _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_ERROR, v24, v50, 2u);
      }
    }

    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
LABEL_39:
    *(_QWORD *)v50 = v60;
    std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    return;
  }
  __VGLogSharedInstance();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v22, OS_LOG_TYPE_ERROR, " Incorrect number of filters in IRData. Expected two filters, left and right ears. ", buf, 2u);
  }

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
}

void sub_249CEE1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;

  if (__p)
    operator delete(__p);
  IR::IRCoordinateTree::~IRCoordinateTree((IR::IRCoordinateTree *)(v29 - 160));
  _Unwind_Resume(a1);
}

void vg::hrtf::IRGrid::GetIRGrid(vg::hrtf::IRGrid *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::IRGrid *v4;
  void *v6;
  void *v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;

  v4 = this;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  std::vector<void const*>::reserve((void **)a3, (unint64_t)this);
  std::vector<vg::hrtf::IRFilters>::reserve((uint64_t *)(a3 + 24), (unint64_t)v4);
  for (; v4; v4 = (vg::hrtf::IRGrid *)((char *)v4 - 1))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v10 = 0;
    v11 = 0;
    __p = 0;
    std::vector<float>::reserve(&v6, a2);
    std::vector<float>::reserve(&__p, a2);
    std::vector<vg::hrtf::IRFilters>::emplace_back<vg::hrtf::IRFilters&>((uint64_t *)(a3 + 24), (uint64_t)&v6);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      v7 = v6;
      operator delete(v6);
    }
  }
}

void sub_249CEE350(_Unwind_Exception *a1)
{
  vg::hrtf::IRGrid *v1;

  vg::hrtf::IRGrid::~IRGrid(v1);
  _Unwind_Resume(a1);
}

void IR::IRCoordinateTree::~IRCoordinateTree(IR::IRCoordinateTree *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 32);
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void vg::hrtf::getIRData(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _QWORD *v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  void *__p;
  void *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  char v35;

  v5 = *a1;
  v4 = a1[1];
  v6 = (v4 - *a1) >> 3;
  v7 = (uint64_t *)a1[3];
  v9 = *v7;
  v8 = v7[1];
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v33, 2uLL, &__p);
  std::vector<std::vector<float>>::vector(v29, v6, (uint64_t)&v33);
  v10 = v8 - v9;
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v33, v10 >> 1, &__p);
  std::vector<std::vector<float>>::vector(v28, v6, (uint64_t)&v33);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v33, 2uLL, &__p);
  std::vector<std::vector<float>>::vector(v27, v6, (uint64_t)&v33);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  v11 = operator new(8uLL);
  *v11 = 1;
  v26 = v11;
  if (v4 != v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v10 >> 2;
    if (v6 <= 1)
      v6 = 1;
    v15 = 4;
    do
    {
      v16 = (_DWORD *)(*a1 + v15);
      v17 = *(_DWORD **)(v29[0] + v12);
      *v17 = *(v16 - 1);
      v17[1] = *v16;
      v18 = a1[3];
      v19 = *(_DWORD **)(v27[0] + v12);
      *v19 = *(_DWORD *)(v18 + v13 + 24);
      v19[1] = *(_DWORD *)(v18 + v13 + 56);
      v20 = *(_BYTE **)(v18 + v13);
      v21 = *(_BYTE **)(v18 + v13 + 8);
      if (v21 != v20)
      {
        memmove(*(void **)(v28[0] + v12), v20, v21 - v20);
        v18 = a1[3];
      }
      v22 = v18 + v13;
      v23 = *(_BYTE **)(v22 + 32);
      v24 = *(_BYTE **)(v22 + 40);
      if (v24 != v23)
        memmove((void *)(*(_QWORD *)(v28[0] + v12) + 4 * v14), v23, v24 - v23);
      v13 += 64;
      v12 += 24;
      v15 += 8;
      --v6;
    }
    while (v6);
  }
  v25 = operator new(0x20uLL);
  v25[2] = 0;
  *v25 = &unk_251B232F8;
  v25[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  __p = 0;
  v31 = 0;
  v32 = 0;
  IR::IRData::IRData();
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v35 < 0)
    operator delete(v33);
  *a2 = v25 + 3;
  a2[1] = v25;
  if (v26)
    operator delete(v26);
  v33 = (void **)v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v33);
  v33 = (void **)v28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v33);
  v33 = (void **)v29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_249CEE690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *__p,char *a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  void *v32;

  if (__p)
  {
    a29 = __p;
    operator delete(__p);
  }
  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v32);
  if (a16)
    operator delete(a16);
  __p = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_249CEE744()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(_QWORD *)(v0 - 120) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x249CEE72CLL);
}

void sub_249CEE75C()
{
  JUMPOUT(0x249CEE72CLL);
}

void sub_249CEE764()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(_QWORD *)(v0 - 120) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x249CEE73CLL);
}

void vg::hrtf::createIRDataWithUserData(IR::IRData **a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  IR::IRData *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t PeriodForCyclicalDimensions;
  uint64_t InterpolationMethod;
  CFTypeRef v13;
  NSObject *v14;
  CFTypeRef cf;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint8_t buf[8];
  void *v23;
  uint64_t v24;
  void *v25[4];
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  IR::IRData *v32[2];
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v5 = a2;
  v6 = a1[1];
  v32[0] = *a1;
  v32[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)((char *)v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  vg::hrtf::getIRValues(v32, (uint64_t)&v33);
  if (v6)
  {
    v9 = (unint64_t *)((char *)v6 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(IR::IRData *))(*(_QWORD *)v6 + 16))(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  if (v37)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(&v29, v35, v36, (v36 - v35) >> 6);
    if (!v37)
      std::__throw_bad_optional_access[abi:ne180100]();
    v26 = 0;
    v27 = 0;
    v28 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v26, v33, v34, (v34 - (uint64_t)v33) >> 3);
    IR::IRData::getSampleRate(*a1);
    *(_QWORD *)buf = 0;
    v23 = 0;
    v24 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(buf, v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 3);
    memset(v25, 0, 24);
    std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(v25, v29, v30, (v30 - v29) >> 6);
    PeriodForCyclicalDimensions = IR::IRData::getPeriodForCyclicalDimensions(*a1);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v19, *(const void **)PeriodForCyclicalDimensions, *(_QWORD *)(PeriodForCyclicalDimensions + 8), (uint64_t)(*(_QWORD *)(PeriodForCyclicalDimensions + 8) - *(_QWORD *)PeriodForCyclicalDimensions) >> 2);
    InterpolationMethod = IR::IRData::getInterpolationMethod(*a1);
    __p = 0;
    v17 = 0;
    v18 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)InterpolationMethod, *(_QWORD *)(InterpolationMethod + 8), (uint64_t)(*(_QWORD *)(InterpolationMethod + 8) - *(_QWORD *)InterpolationMethod) >> 2);
    if (v5)
      CFRetain(v5);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v5);
    v13 = cf;
    if (cf)
      CFRetain(cf);
    vg::hrtf::getIRData((uint64_t *)buf, a3);
    if (v13)
      CFRelease(v13);
    if (cf)
      CFRelease(cf);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    v19 = v25;
    std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
    if (*(_QWORD *)buf)
    {
      v23 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    *(_QWORD *)buf = &v29;
    std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    __VGLogSharedInstance();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v14, OS_LOG_TYPE_ERROR, " Failed to create IR values from IRData. ", buf, 2u);
    }

    *a3 = 0;
    a3[1] = 0;
  }
  std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);

}

void sub_249CEEA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100](v28 - 120);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_249CEEB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void vg::load2DVectorData<float>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  void *v8;
  void *v9;
  size_t v10;
  _DWORD *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  void *__p[3];
  void *memptr;

  if (*((char *)a1 + 23) >= 0)
    v7 = a1;
  else
    v7 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithContentsOfFile:", v8);
  std::vector<float>::vector(__p, a3 * a2);
  objc_msgSend(v9, "getBytes:length:", __p[0], 4 * a3 * a2);
  v10 = (((4 * a3 * a2) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v10 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
  v11 = memptr;
  *(_QWORD *)a4 = memptr;
  *(_DWORD *)(a4 + 16) = a2;
  *(_DWORD *)(a4 + 20) = a3;
  v12 = (char *)__p[0];
  if (a2)
  {
    LODWORD(v13) = 0;
    do
    {
      if (a3)
      {
        v14 = 0;
        v15 = v13;
        do
        {
          v11[v15] = *(_DWORD *)&v12[4 * v14++];
          v15 += a2;
        }
        while (a3 > v14);
      }
      v13 = (v13 + 1);
      v12 += 4 * a3;
    }
    while (v13 < a2);
    v12 = (char *)__p[0];
  }
  if (v12)
  {
    __p[1] = v12;
    operator delete(v12);
  }

}

void sub_249CEED8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void **v24;
  void **v25;
  void **v26;
  void *v27;
  CFDictionaryRef v28;
  std::runtime_error *exception;
  void **values;
  void **v32;
  void **v33;
  void **keys;
  void **v35;
  void **v36;

  v2 = *(_QWORD *)(a1 + 8);
  keys = 0;
  v35 = 0;
  v36 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v32 = 0;
  v33 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void ***)a1;
    v5 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      v6 = *v4;
      v7 = v35;
      if (v35 >= v36)
      {
        v9 = v35 - keys;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v10 = ((char *)v36 - (char *)keys) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v36, v11);
        else
          v12 = 0;
        v13 = (void **)&v12[8 * v9];
        *v13 = v6;
        v8 = v13 + 1;
        v15 = keys;
        v14 = v35;
        if (v35 != keys)
        {
          do
          {
            v16 = *--v14;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = keys;
        }
        keys = v13;
        v35 = v8;
        v36 = (void **)&v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v35 = v6;
        v8 = v7 + 1;
      }
      v35 = v8;
      v17 = v4[1];
      v18 = v32;
      if (v32 >= v33)
      {
        v20 = v32 - values;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v21 = ((char *)v33 - (char *)values) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v33, v22);
        else
          v23 = 0;
        v24 = (void **)&v23[8 * v20];
        *v24 = v17;
        v19 = v24 + 1;
        v26 = values;
        v25 = v32;
        if (v32 != values)
        {
          do
          {
            v27 = *--v25;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = values;
        }
        values = v24;
        v32 = v19;
        v33 = (void **)&v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v32 = v17;
        v19 = v18 + 1;
      }
      v32 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  v28 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (values)
  {
    v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    v35 = keys;
    operator delete(keys);
  }
  return v28;
}

void sub_249CEF048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<IR::IRCoordinateTree,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<IR::IRCoordinateTree,0>(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v3 = a1 + 32;
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  return this;
}

void sub_249CEF264(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IR::IRData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B232F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::IRData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B232F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD02D60);
}

void std::__shared_ptr_emplace<IR::IRData>::__on_zero_shared(uint64_t a1)
{
  IR::IRData::~IRData((IR::IRData *)(a1 + 24));
}

uint64_t vg::hrtf::HRTFDecoderModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int isANESupported;
  std::string::size_type v7;
  _QWORD *InputPorts;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  _QWORD *OutputPorts;
  unsigned __int8 *v13;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t result;
  std::string::size_type v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  E5RT::ExecutionStream *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  void **v24;
  std::__shared_weak_count *v25;
  std::string __p;

  isANESupported = vg::shared::VGE5RT::isANESupported((vg::shared::VGE5RT *)a1);
  vg::shared::VGE5RT::compileModel(a2, isANESupported, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1, (uint64_t *)&__p);
  v7 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v7)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v7 + 8))(v7);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "face_encodings");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), (uint64_t *)v9 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ear_encodings");
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, (unsigned __int8 *)&__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), (uint64_t *)v11 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "hrtf");
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), (uint64_t *)v13 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 64));
  result = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  if (result)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)(a1 + 80), (uint64_t *)&__p);
    v16 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v16)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v16 + 8))(v16);
    v17 = *(std::__shared_weak_count **)(a1 + 88);
    v25 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
    if (v25)
    {
      v21 = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    E5RT::ExecutionStream::CreateExecutionStream(v20);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((_QWORD *)(a1 + 16), (uint64_t *)&__p);
    v23 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v23)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v23 + 8))(v23);
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    v24 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      operator delete(*v24);
    *(_OWORD *)v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    return *(_QWORD *)(a1 + 16) && *(_QWORD *)a1 != 0;
  }
  return result;
}

void vg::hrtf::HRTFDecoderModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  E5RT::OperandDescriptor *PortDescriptorRef;
  vg::shared::VGE5RT *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t *p_shared_owners;
  unint64_t v14;
  E5RT::OperandDescriptor *v15;
  vg::shared::VGE5RT *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  vg::shared::VGE5RT *v22;
  E5RT::OperandDescriptor *v23;
  IOSurface *v24;
  const E5RT::TensorDescriptor *v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (*(_DWORD *)(a2 + 16) != 32)
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v27[0]) = 0;
      v11 = " Face encoding input dimension mismatch. ";
LABEL_9:
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)v27, 2u);
    }
LABEL_10:

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  if (*(_DWORD *)(a2 + 40) != 64)
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v27[0]) = 0;
      v11 = " Ear encoding input dimension mismatch. ";
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
  v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  vg::shared::VGE5RT::convert1DVectorToSurface(a2, v7);
  E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
  v33 = v27[0];
  if (v27[0])
  {
    v8 = (std::__shared_weak_count *)operator new();
    v9 = (std::__shared_weak_count_vtbl *)v27[0];
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B22DB0;
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = v9;
  }
  else
  {
    v8 = 0;
  }
  v34 = v8;
  v27[0] = 0;
  E5RT::IOPort::BindMemoryObject();
  v12 = a2 + 24;
  if (v34)
  {
    p_shared_owners = &v34->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v14 - 1, (unint64_t *)p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v27[0] = 0;
  v15 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
  v16 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v15);
  vg::shared::VGE5RT::convert1DVectorToSurface(v12, v16);
  E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
  v31 = 0;
  v32 = 0;
  E5RT::IOPort::BindMemoryObject();
  v27[0] = 0;
  v17 = (std::__shared_weak_count *)a1[1];
  v29 = *a1;
  v30 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v30)
  {
    v20 = &v30->__shared_owners_;
    do
      v21 = __ldaxr((unint64_t *)v20);
    while (__stlxr(v21 - 1, (unint64_t *)v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
  E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
  E5RT::BufferObject::GetHandle<__IOSurface *>();
  v22 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
  v23 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[8]);
  v24 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v23);
  vg::shared::VGE5RT::convertSurfaceTo1DVector(v22, v24, v25, (uint64_t)v27);
  v26 = v27[1];
  *(_QWORD *)a3 = v27[0];
  *(_QWORD *)(a3 + 8) = v26;
  *(_DWORD *)(a3 + 16) = v28;
  *(_BYTE *)(a3 + 24) = 1;

}

void sub_249CEF938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::HRTFDecoderModel::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = operator new();
  *(_QWORD *)(v7 + 112) = 0;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)v7 = 0u;
  *v6 = v7;
  v9 = v6;
  if ((vg::hrtf::HRTFDecoderModelImpl::init(v7, a1, a2) & 1) != 0)
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::HRTFDecoderModel>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CEFA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::HRTFDecoderModel>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::HRTFDecoderModel *vg::hrtf::HRTFDecoderModel::HRTFDecoderModel(vg::hrtf::HRTFDecoderModel *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::HRTFDecoderModel::~HRTFDecoderModel(vg::hrtf::HRTFDecoderModel *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::HRTFDecoderModel::predictHRTFDecoderModel(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::HRTFDecoderModelImpl::predict(*a1, a2, a3);
}

BOOL vg::hrtf::DTFModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::size_type v5;
  _QWORD *InputPorts;
  unsigned __int8 *v7;
  _QWORD *OutputPorts;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t v13;
  E5RT::OperandDescriptor *v14;
  uint64_t v15;
  _BOOL8 result;
  std::string::size_type v17;
  std::string::size_type v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  E5RT::ExecutionStream *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type v30;
  void **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::string __p;

  vg::shared::VGE5RT::compileModel(a2, 1, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1, (uint64_t *)&__p);
  v5 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v5)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v5 + 8))(v5);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "hrtf");
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), (uint64_t *)v7 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtf");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), (uint64_t *)v9 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ctf");
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, (unsigned __int8 *)&__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), (uint64_t *)v11 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  v13 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 64));
  v15 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v14);
  result = 0;
  if (v13 && v15)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)(a1 + 80), (uint64_t *)&__p);
    v17 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v17)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v17 + 8))(v17);
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)(a1 + 96), (uint64_t *)&__p);
    v18 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v18)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(std::__shared_weak_count **)(a1 + 88);
    v33 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    E5RT::IOPort::BindMemoryObject();
    if (v33)
    {
      v22 = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v24 = *(std::__shared_weak_count **)(a1 + 104);
    v32 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    E5RT::ExecutionStream::CreateExecutionStream(v27);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((_QWORD *)(a1 + 16), (uint64_t *)&__p);
    v30 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v30)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v30 + 8))(v30);
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    v31 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      operator delete(*v31);
    *(_OWORD *)v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    return *(_QWORD *)(a1 + 16) && *(_QWORD *)a1 != 0;
  }
  return result;
}

void sub_249CEFF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  E5RT::OperandDescriptor *PortDescriptorRef;
  vg::shared::VGE5RT *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  NSObject *v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  vg::shared::VGE5RT *v18;
  vg::shared::VGE5RT *v19;
  E5RT::OperandDescriptor *v20;
  IOSurface *v21;
  E5RT::OperandDescriptor *v22;
  IOSurface *v23;
  const E5RT::TensorDescriptor *v24;
  const E5RT::TensorDescriptor *v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  __int128 v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;

  if (*(_DWORD *)(a2 + 16) == 284160)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    vg::shared::VGE5RT::convert1DVectorToSurface(a2, v7);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    v33 = v27;
    if (v27)
    {
      v8 = (std::__shared_weak_count *)operator new();
      v9 = v27;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B22DB0;
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8[1].__vftable = v9;
    }
    else
    {
      v8 = 0;
    }
    v34 = v8;
    v27 = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v34)
    {
      p_shared_owners = &v34->__shared_owners_;
      do
        v12 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v27 = 0;
    v13 = (std::__shared_weak_count *)a1[1];
    v31 = *a1;
    v32 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v32)
    {
      v16 = &v32->__shared_owners_;
      do
        v17 = __ldaxr((unint64_t *)v16);
      while (__stlxr(v17 - 1, (unint64_t *)v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    v18 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    v19 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    v20 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
    v21 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v20);
    v22 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[8]);
    v23 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v22);
    vg::shared::VGE5RT::convertSurfaceTo2DMatrix(v18, v21, v24, (uint64_t)&v27);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v19, v23, v25, (uint64_t)v29);
    *(_QWORD *)a3 = v27;
    *(_OWORD *)(a3 + 8) = v28;
    v26 = v29[1];
    *(_QWORD *)(a3 + 24) = v29[0];
    *(_QWORD *)(a3 + 32) = v26;
    *(_DWORD *)(a3 + 40) = v30;
    *(_BYTE *)(a3 + 48) = 1;

  }
  else
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v27) = 0;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " HRTF input dimension mismatch. ", (uint8_t *)&v27, 2u);
    }

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
}

void sub_249CF01F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a9)
    (*(void (**)(void *))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFModel::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = operator new();
  *(_QWORD *)(v7 + 128) = 0;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *v6 = v7;
  v9 = v6;
  if (vg::hrtf::DTFModelImpl::init(v7, a1, a2))
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::DTFModel>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CF0320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::DTFModel>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::DTFModel *vg::hrtf::DTFModel::DTFModel(vg::hrtf::DTFModel *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::DTFModel::~DTFModel(vg::hrtf::DTFModel *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::DTFModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::DTFModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::DTFModel::predictDTFFromHRTF(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::DTFModelImpl::predict(*a1, a2, a3);
}

uint64_t vg::hrtf::DTFBiasModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int isANESupported;
  std::string::size_type v7;
  _QWORD *InputPorts;
  unsigned __int8 *v9;
  _QWORD *OutputPorts;
  unsigned __int8 *v11;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t result;
  std::string::size_type v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  E5RT::ExecutionStream *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string::size_type v21;
  void **v22;
  std::__shared_weak_count *v23;
  std::string __p;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  isANESupported = vg::shared::VGE5RT::isANESupported((vg::shared::VGE5RT *)a1);
  vg::shared::VGE5RT::compileModel(a2, isANESupported, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1, (uint64_t *)&__p);
  v7 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v7)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v7 + 8))(v7);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtf");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), (uint64_t *)v9 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtf_bias");
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), (uint64_t *)v11 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  result = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  if (result)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)(a1 + 64), (uint64_t *)&__p);
    v14 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v14)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(std::__shared_weak_count **)(a1 + 72);
    v23 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
    if (v23)
    {
      v19 = (unint64_t *)&v23->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    E5RT::ExecutionStream::CreateExecutionStream(v18);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((_QWORD *)(a1 + 16), (uint64_t *)&__p);
    v21 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v21)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v21 + 8))(v21);
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    v22 = (void **)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      operator delete(*v22);
    *(_OWORD *)v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    return *(_QWORD *)(a1 + 16) && *(_QWORD *)a1 != 0;
  }
  return result;
}

void sub_249CF07E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_249CF07F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void vg::hrtf::DTFBiasModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  E5RT::OperandDescriptor *PortDescriptorRef;
  vg::shared::VGE5RT *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  NSObject *v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  vg::shared::VGE5RT *v18;
  E5RT::OperandDescriptor *v19;
  IOSurface *v20;
  const E5RT::TensorDescriptor *v21;
  std::__shared_weak_count_vtbl *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;

  if (*(_DWORD *)(a2 + 16) == 64 && *(_DWORD *)(a2 + 20) == 2842)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    vg::shared::VGE5RT::convert2DMatrixToSurface(a2, v7);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    v26 = v22;
    if (v22)
    {
      v8 = (std::__shared_weak_count *)operator new();
      v9 = v22;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B22DB0;
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8[1].__vftable = v9;
    }
    else
    {
      v8 = 0;
    }
    v27 = v8;
    v22 = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v27)
    {
      p_shared_owners = &v27->__shared_owners_;
      do
        v12 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v22 = 0;
    v13 = (std::__shared_weak_count *)a1[1];
    v24 = *a1;
    v25 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v25)
    {
      v16 = &v25->__shared_owners_;
      do
        v17 = __ldaxr((unint64_t *)v16);
      while (__stlxr(v17 - 1, (unint64_t *)v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    v18 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    v19 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
    v20 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v19);
    vg::shared::VGE5RT::convertSurfaceTo2DMatrix(v18, v20, v21, (uint64_t)&v22);
    *(_QWORD *)a3 = v22;
    *(_OWORD *)(a3 + 8) = v23;
    *(_BYTE *)(a3 + 24) = 1;

  }
  else
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v22) = 0;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " DTF input dimension mismatch. ", (uint8_t *)&v22, 2u);
    }

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

void sub_249CF0A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFBiasModel::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = operator new();
  *(_QWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *v6 = v7;
  v9 = v6;
  if ((vg::hrtf::DTFBiasModelImpl::init(v7, a1, a2) & 1) != 0)
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::DTFBiasModel>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CF0B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::DTFBiasModel>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::DTFBiasModel *vg::hrtf::DTFBiasModel::DTFBiasModel(vg::hrtf::DTFBiasModel *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::DTFBiasModel::~DTFBiasModel(vg::hrtf::DTFBiasModel *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::DTFBiasModel::predictBiasDTF(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::DTFBiasModelImpl::predict(*a1, a2, a3);
}

void std::default_delete<vg::hrtf::HRTFDecoderModel>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
      std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 119) < 0)
      operator delete(*(void **)(a2 + 96));
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 80);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 64);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 48);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::hrtf::DTFModel>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
      std::default_delete<vg::hrtf::DTFModelImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::hrtf::DTFModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 135) < 0)
      operator delete(*(void **)(a2 + 112));
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 96);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 80);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 64);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 48);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::hrtf::DTFBiasModel>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
      std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 103) < 0)
      operator delete(*(void **)(a2 + 80));
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 64);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 48);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x24BD02D60);
  }
}

std::string *vg::hrtf::HRTFModelImpl::HRTFModelImpl(std::string *this, const vg::hrtf::HRTFModelImplInput *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  }
  this[7].__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(__p[0]) = 0;
  vg::hrtf::HRTFModelImpl::setDefaultsWithSuiteName(__p, CFSTR("com.apple.visage"));
  this[7].__r_.__value_.__s.__data_[0] = (std::string::value_type)__p[0];
  __VGLogSharedInstance();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    vg::hrtf::HRTFModelImpl::HRTFModelOptions::description((vg::hrtf::HRTFModelImpl::HRTFModelOptions *)&this[7], __p);
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v17 = v12;
    _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_INFO, " HRTFModel initialized with options:\n%s ", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }

  return this;
}

void sub_249CF1130(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t vg::hrtf::HRTFModelImpl::initOptions(vg::hrtf::HRTFModelImpl *this)
{
  unsigned __int8 v2;

  v2 = 0;
  vg::hrtf::HRTFModelImpl::setDefaultsWithSuiteName(&v2, CFSTR("com.apple.visage"));
  return v2;
}

_QWORD *vg::hrtf::HRTFModelImpl::HRTFModelOptions::description@<X0>(vg::hrtf::HRTFModelImpl::HRTFModelOptions *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  _QWORD *result;
  uint64_t v5[3];
  _QWORD v6[6];

  v6[5] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)this)
    v3 = "true";
  else
    v3 = "false";
  v6[2] = 12;
  v5[2] = 12;
  v6[0] = v3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5[0] = 1;
  v5[1] = (uint64_t)v6;
  result = a2;
  std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)a2, "Skip DtfBias model: {}", 22, v5);
  return result;
}

void sub_249CF12CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::HRTFModelImpl::setDefaultsWithSuiteName(_BYTE *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", v5);
  objc_msgSend(v3, "objectForKey:", CFSTR("skipDtfBiasModel"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    *a1 = objc_msgSend(v3, "BOOLForKey:", CFSTR("skipDtfBiasModel"));

}

void sub_249CF1370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL vg::hrtf::HRTFModelImpl::checkInputs(uint64_t a1, _QWORD *a2)
{
  return a2[4] - a2[3] == a2[7] - a2[6];
}

void vg::hrtf::HRTFModelImpl::preprocessData(const vg::hrtf::HRTFModelInputs *a1@<X1>, uint64_t a2@<X8>)
{
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26[3];
  void **v27;

  VGLogHRTFModel();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    vg::hrtf::HRTFModelImpl::preprocessData();

  v6 = *(_QWORD *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 5) > 2)
  {
    memset(v26, 0, sizeof(v26));
    std::vector<vg::hrtf::FaceFrameData>::__init_with_size[abi:ne180100]<std::__wrap_iter<vg::hrtf::FaceFrameData const*>,std::__wrap_iter<vg::hrtf::FaceFrameData const*>>(v26, v6, v6 + 288, 3uLL);
    vg::hrtf::preprocessFaceCaptureData(v26, 320, 240, (uint64_t)&v23);
    if (v25)
    {
      vg::hrtf::preprocessEarCaptureData((uint64_t *)a1 + 3, 320, 240, 0, (uint64_t)&v20);
      if (v22)
      {
        vg::hrtf::preprocessEarCaptureData((uint64_t *)a1 + 6, 320, 240, 1, (uint64_t)&v17);
        if (v19)
        {
          if (!v25)
            std::__throw_bad_optional_access[abi:ne180100]();
          v11 = 0uLL;
          v12 = 0;
          std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v11, v23, v24, 0xCCCCCCCCCCCCCCCDLL * ((v24 - v23) >> 4));
          if (!v22)
            std::__throw_bad_optional_access[abi:ne180100]();
          v13 = 0uLL;
          v14 = 0;
          std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v13, v20, v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 4));
          if (!v19)
            std::__throw_bad_optional_access[abi:ne180100]();
          v15 = 0uLL;
          v16 = 0;
          std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v15, v17, v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - v17) >> 4));
          *(_OWORD *)a2 = v11;
          *(_QWORD *)(a2 + 16) = v12;
          v12 = 0;
          v11 = 0uLL;
          *(_OWORD *)(a2 + 24) = v13;
          *(_QWORD *)(a2 + 40) = v14;
          v14 = 0;
          v13 = 0uLL;
          *(_OWORD *)(a2 + 48) = v15;
          *(_QWORD *)(a2 + 64) = v16;
          v16 = 0;
          v15 = 0uLL;
          *(_BYTE *)(a2 + 72) = 1;
          v27 = (void **)&v15;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v27);
          v27 = (void **)&v13;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v27);
          v27 = (void **)&v11;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v27);
        }
        else
        {
          VGLogHRTFModel();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            vg::hrtf::HRTFModelImpl::preprocessData();

          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 72) = 0;
        }
        if (v19)
        {
          *(_QWORD *)&v11 = &v17;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
        }
      }
      else
      {
        VGLogHRTFModel();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          vg::hrtf::HRTFModelImpl::preprocessData();

        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 72) = 0;
      }
      if (v22)
      {
        *(_QWORD *)&v11 = &v20;
        std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
      }
    }
    else
    {
      VGLogHRTFModel();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        vg::hrtf::HRTFModelImpl::preprocessData();

      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (v25)
    {
      *(_QWORD *)&v11 = &v23;
      std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    }
    *(_QWORD *)&v11 = v26;
    std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  }
  else
  {
    VGLogHRTFModel();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      vg::hrtf::HRTFModelImpl::preprocessData();

    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
  }
}

void sub_249CF16F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (a26)
  {
    a9 = (void **)&a23;
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a9);
  }
  if (*(_BYTE *)(v26 - 88))
  {
    a9 = (void **)(v26 - 112);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a9);
  }
  a9 = (void **)(v26 - 80);
  std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

id VGLogHRTFModel(void)
{
  if (VGLogHRTFModel(void)::onceToken != -1)
    dispatch_once(&VGLogHRTFModel(void)::onceToken, &__block_literal_global_4);
  return (id)VGLogHRTFModel(void)::handle;
}

void vg::hrtf::HRTFModelImpl::predictHRTFData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  NSObject *v10;
  vg::shared::VGE5RT *v11;
  NSObject *v12;
  uint64_t **v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t *v18;
  _BOOL4 v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  vg::hrtf::HRTFDecoderModelEspresso *v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t **v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t *v36;
  uint64_t v37;
  vg::hrtf::DTFModelEspresso *v38;
  void *v39;
  NSObject *v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  vg::shared::VGE5RT *v47;
  vg::hrtf::DTFBiasModel *v48;
  _BOOL4 v49;
  int v50;
  NSObject *v51;
  NSObject *v52;
  int v53;
  void **v54;
  NSObject *v55;
  void *__p;
  uint64_t v57;
  unint64_t v58;
  void *v59[2];
  unsigned int v60;
  void *v61;
  unsigned int v62;
  int v63;
  void *v64[3];
  void *v65;
  unsigned int v66;
  void *v67;
  char v68;
  vg::hrtf::DTFBiasModel *v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  void *v78;
  unsigned int v79;
  char v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int v84;
  unsigned __int8 v85;

  VGLogHRTFModel();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    vg::hrtf::HRTFModelImpl::predictHRTFData();

  LOBYTE(v82) = 0;
  v85 = 0;
  v11 = (vg::shared::VGE5RT *)MEMORY[0x24BD03120]();
  v70 = 0;
  if (vg::shared::VGE5RT::isANESupported(v11))
  {
    VGLogHRTFModel();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      vg::hrtf::HRTFModelImpl::predictHRTFData();

    LOBYTE(__p) = 0;
    LOBYTE(v59[0]) = 0;
    vg::hrtf::HRTFDecoderModel::create((uint64_t *)(a1 + 96), (uint64_t)&__p, &v74);
    v13 = (uint64_t **)v74;
    v70 = v74;
    v74 = 0;
    if (LOBYTE(v59[0]) && SHIBYTE(v58) < 0)
      operator delete(__p);
    if (v13)
    {
      VGLogHRTFModel();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        vg::hrtf::HRTFModelImpl::predictHRTFData();

      cva::MatrixData<float,0ul,0ul,false>::MatrixData(&__p, (const void **)a2, *(unsigned int *)(a2 + 16));
      LODWORD(v58) = *(_DWORD *)(a2 + 16);
      cva::MatrixData<float,0ul,0ul,false>::MatrixData(v59, (const void **)a3, *(unsigned int *)(a3 + 16));
      v60 = *(_DWORD *)(a3 + 16);
      vg::hrtf::HRTFDecoderModel::predictHRTFDecoderModel(v13, (uint64_t)&__p, (uint64_t)&v74);
      if (v85 == v78)
      {
        if (v85)
        {
          v15 = v82;
          v16 = v83;
          v82 = v74;
          v83 = v75;
          v74 = v15;
          v75 = v16;
          v84 = v76;
          v76 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        if (!v85)
        {
          v43 = v74;
          v44 = v75;
          v74 = 0;
          v75 = 0;
          v82 = v43;
          v83 = v44;
          v84 = v76;
          v76 = 0;
          v85 = 1;
          if (!(_BYTE)v78)
            goto LABEL_38;
          goto LABEL_37;
        }
        free(v82);
        v85 = 0;
        if ((_BYTE)v78)
LABEL_37:
          free(v74);
      }
LABEL_38:
      free(v59[0]);
      free(__p);
      vg::hrtf::HRTFDecoderModel::~HRTFDecoderModel((vg::hrtf::HRTFDecoderModel *)v13);
      MEMORY[0x24BD02D60]();
      v19 = 1;
      goto LABEL_39;
    }
  }
  VGLogHRTFModel();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    vg::hrtf::HRTFModelImpl::predictHRTFData();

  LOBYTE(__p) = 0;
  LOBYTE(v59[0]) = 0;
  vg::hrtf::HRTFDecoderModelEspresso::create((uint64_t *)(a1 + 96), (uint64_t)&__p, &v81);
  if (LOBYTE(v59[0]) && SHIBYTE(v58) < 0)
    operator delete(__p);
  v18 = v81;
  v19 = v81 != 0;
  VGLogHRTFModel();
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = v20;
  if (!v18)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      vg::hrtf::HRTFModelImpl::predictHRTFData();

    *a5 = 0;
    a5[152] = 0;
    goto LABEL_33;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    vg::hrtf::HRTFModelImpl::predictHRTFData();

  v22 = v81;
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(&__p, (const void **)a2, *(unsigned int *)(a2 + 16));
  LODWORD(v58) = *(_DWORD *)(a2 + 16);
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(v59, (const void **)a3, *(unsigned int *)(a3 + 16));
  v60 = *(_DWORD *)(a3 + 16);
  vg::hrtf::HRTFDecoderModelEspresso::predictHRTFDecoderModel(v22, (uint64_t)&__p, (uint64_t)&v74);
  if (v85 == v78)
  {
    if (v85)
    {
      v23 = v82;
      v24 = v83;
      v82 = v74;
      v83 = v75;
      v74 = v23;
      v75 = v24;
      v84 = v76;
      v76 = 0;
      goto LABEL_31;
    }
  }
  else
  {
    if (!v85)
    {
      v36 = v74;
      v37 = v75;
      v74 = 0;
      v75 = 0;
      v82 = v36;
      v83 = v37;
      v84 = v76;
      v76 = 0;
      v85 = 1;
      if (!(_BYTE)v78)
        goto LABEL_32;
      goto LABEL_31;
    }
    free(v82);
    v85 = 0;
    if ((_BYTE)v78)
LABEL_31:
      free(v74);
  }
LABEL_32:
  free(v59[0]);
  free(__p);
LABEL_33:
  v25 = (vg::hrtf::HRTFDecoderModelEspresso *)v81;
  v81 = 0;
  if (v25)
  {
    vg::hrtf::HRTFDecoderModelEspresso::~HRTFDecoderModelEspresso(v25);
    MEMORY[0x24BD02D60]();
  }
LABEL_39:
  objc_autoreleasePoolPop(v11);
  if (!v19)
    goto LABEL_133;
  v26 = v85;
  VGLogHRTFModel();
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = v27;
  if (v26)
  {
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      vg::hrtf::HRTFModelImpl::predictHRTFData();

    LOBYTE(v74) = 0;
    v80 = 0;
    v29 = MEMORY[0x24BD03120]();
    v70 = 0;
    if (!vg::shared::VGE5RT::isANESupported((vg::shared::VGE5RT *)v29))
      goto LABEL_54;
    LOBYTE(__p) = 0;
    LOBYTE(v59[0]) = 0;
    vg::hrtf::DTFModel::create(a4, (uint64_t)&__p, &v81);
    v30 = (uint64_t **)v81;
    v70 = v81;
    v81 = 0;
    if (LOBYTE(v59[0]) && SHIBYTE(v58) < 0)
      operator delete(__p);
    if (v30)
    {
      VGLogHRTFModel();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        vg::hrtf::HRTFModelImpl::predictHRTFData();

      if (!v85)
        std::__throw_bad_optional_access[abi:ne180100]();
      vg::hrtf::DTFModel::predictDTFFromHRTF(v30, (uint64_t)&v82, (uint64_t)&__p);
      std::__optional_storage_base<vg::hrtf::DTFOutputs,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<vg::hrtf::DTFOutputs,false>>((uint64_t)&v74, (uint64_t)&__p);
      if ((_BYTE)v61)
      {
        free(v59[0]);
        free(__p);
      }
      vg::hrtf::DTFModel::~DTFModel((vg::hrtf::DTFModel *)v30);
      MEMORY[0x24BD02D60]();
      LODWORD(v30) = 1;
    }
    else
    {
LABEL_54:
      VGLogHRTFModel();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        vg::hrtf::HRTFModelImpl::predictHRTFData();

      LOBYTE(__p) = 0;
      LOBYTE(v59[0]) = 0;
      vg::hrtf::DTFModelEspresso::create(a4, (uint64_t)&__p, &v81);
      if (LOBYTE(v59[0]) && SHIBYTE(v58) < 0)
        operator delete(__p);
      v33 = v81;
      LODWORD(v30) = v81 != 0;
      VGLogHRTFModel();
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = v34;
      if (v33)
      {
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          vg::hrtf::HRTFModelImpl::predictHRTFData();

        if (!v85)
          std::__throw_bad_optional_access[abi:ne180100]();
        vg::hrtf::DTFModelEspresso::predictDTFFromHRTF(v81, (uint64_t)&v82, (uint64_t)&__p);
        std::__optional_storage_base<vg::hrtf::DTFOutputs,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<vg::hrtf::DTFOutputs,false>>((uint64_t)&v74, (uint64_t)&__p);
        if ((_BYTE)v61)
        {
          free(v59[0]);
          free(__p);
        }
      }
      else
      {
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          vg::hrtf::HRTFModelImpl::predictHRTFData();

        *a5 = 0;
        a5[152] = 0;
      }
      v38 = (vg::hrtf::DTFModelEspresso *)v81;
      v81 = 0;
      if (v38)
      {
        vg::hrtf::DTFModelEspresso::~DTFModelEspresso(v38);
        MEMORY[0x24BD02D60]();
      }
    }
    objc_autoreleasePoolPop((void *)v29);
    if (!(_DWORD)v30)
      goto LABEL_131;
    if (!v80)
    {
      VGLogHRTFModel();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        vg::hrtf::HRTFModelImpl::predictHRTFData();

      *a5 = 0;
      a5[152] = 0;
      goto LABEL_131;
    }
    LOBYTE(v70) = 0;
    v73 = 0;
    v39 = (void *)MEMORY[0x24BD03120]();
    if (*(_BYTE *)(a1 + 168))
    {
      __VGLogSharedInstance();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_249CAD000, v40, OS_LOG_TYPE_INFO, " Skipping DTFBiasModel ", (uint8_t *)&__p, 2u);
      }

      v41 = 0;
      v42 = 1;
      goto LABEL_117;
    }
    VGLogHRTFModel();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      vg::hrtf::HRTFModelImpl::predictHRTFData();

    v81 = 0;
    if (vg::shared::VGE5RT::isANESupported(v47))
    {
      LOBYTE(__p) = 0;
      LOBYTE(v59[0]) = 0;
      vg::hrtf::DTFBiasModel::create((uint64_t *)(a1 + 120), (uint64_t)&__p, (uint64_t **)&v69);
      v48 = v69;
      v69 = 0;
      std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100]((vg::hrtf::DTFBiasModel **)&v81, v48);
      std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100](&v69, 0);
      if (LOBYTE(v59[0]))
      {
        if (SHIBYTE(v58) < 0)
          operator delete(__p);
      }
    }
    v30 = (uint64_t **)v81;
    VGLogHRTFModel();
    v29 = objc_claimAutoreleasedReturnValue();
    v49 = os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEBUG);
    if (v30)
    {
      if (v49)
        vg::hrtf::HRTFModelImpl::predictHRTFData();

      if (!v80)
        std::__throw_bad_optional_access[abi:ne180100]();
      vg::hrtf::DTFBiasModel::predictBiasDTF((uint64_t **)v81, (uint64_t)&v74, (uint64_t)&__p);
      if (LOBYTE(v59[0]))
      {
        v70 = __p;
        v71 = v57;
        LODWORD(v29) = v58;
        v72 = v58;
        __p = 0;
        v57 = 0;
        v58 = 0;
        v50 = 1;
        v73 = 1;
        v30 = (uint64_t **)HIDWORD(v72);
        free(0);
      }
      else
      {
        v50 = 0;
      }
    }
    else
    {
      if (v49)
        vg::hrtf::HRTFModelImpl::predictHRTFData();

      LOBYTE(__p) = 0;
      LOBYTE(v59[0]) = 0;
      vg::hrtf::DTFBiasModelEspresso::create((uint64_t *)(a1 + 120), (uint64_t)&__p, (uint64_t **)&v69);
      if (LOBYTE(v59[0]) && SHIBYTE(v58) < 0)
        operator delete(__p);
      v29 = (uint64_t)v69;
      VGLogHRTFModel();
      v51 = objc_claimAutoreleasedReturnValue();
      v52 = v51;
      if (!v29)
      {
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          vg::hrtf::HRTFModelImpl::predictHRTFData();

        *a5 = 0;
        a5[152] = 0;
        std::unique_ptr<vg::hrtf::DTFBiasModelEspresso>::reset[abi:ne180100](&v69, 0);
        goto LABEL_139;
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        vg::hrtf::HRTFModelImpl::predictHRTFData();

      if (!v80)
        std::__throw_bad_optional_access[abi:ne180100]();
      vg::hrtf::DTFBiasModelEspresso::predictBiasDTF((uint64_t *)v69, (uint64_t *)&v74, (uint64_t)&__p);
      if (LOBYTE(v59[0]))
      {
        v70 = __p;
        v71 = v57;
        LODWORD(v29) = v58;
        v72 = v58;
        __p = 0;
        v57 = 0;
        v58 = 0;
        v50 = 1;
        v73 = 1;
        v30 = (uint64_t **)HIDWORD(v72);
        free(0);
      }
      else
      {
        v50 = 0;
      }
      std::unique_ptr<vg::hrtf::DTFBiasModelEspresso>::reset[abi:ne180100](&v69, 0);
    }
    if (v50)
    {
      std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100]((vg::hrtf::DTFBiasModel **)&v81, 0);
      v42 = 0;
      v41 = 1;
LABEL_117:
      v53 = 1;
LABEL_118:
      objc_autoreleasePoolPop(v39);
      if (v53)
      {
        cva::MatrixData<float,0ul,0ul,false>::MatrixData(&__p, (const void **)a3, *(unsigned int *)(a3 + 16));
        LODWORD(v58) = *(_DWORD *)(a3 + 16);
        if (!v85)
          std::__throw_bad_optional_access[abi:ne180100]();
        cva::MatrixData<float,0ul,0ul,false>::MatrixData(v59, (const void **)&v82, v84);
        v60 = v84;
        if (!v80)
          std::__throw_bad_optional_access[abi:ne180100]();
        cva::MatrixData<float,0ul,0ul,false>::MatrixData(&v61, (const void **)&v74, v77 * v76);
        v62 = v76;
        v63 = v77;
        if (v42)
        {
          if (!v80)
            std::__throw_bad_optional_access[abi:ne180100]();
          v54 = (void **)&v74;
          LODWORD(v30) = v77;
          LODWORD(v29) = v76;
        }
        else
        {
          v54 = &v70;
        }
        cva::MatrixData<float,0ul,0ul,false>::MatrixData(v64, (const void **)v54, ((_DWORD)v30 * v29));
        v64[2] = v54[2];
        if (!v80)
          std::__throw_bad_optional_access[abi:ne180100]();
        cva::MatrixData<float,0ul,0ul,false>::MatrixData(&v65, (const void **)&v78, v79);
        v66 = v79;
        LOBYTE(v67) = 0;
        v68 = 0;
        std::__optional_destruct_base<vg::hrtf::HRTFData,false>::__optional_destruct_base[abi:ne180100]<vg::hrtf::HRTFData>((uint64_t)a5, (uint64_t)&__p);
        if (v68)
          free(v67);
        free(v65);
        free(v64[0]);
        free(v61);
        free(v59[0]);
        free(__p);
        v41 = v73;
      }
      if (v41)
        free(v70);
LABEL_131:
      if (v80)
      {
        free(v78);
        free(v74);
      }
      goto LABEL_133;
    }
    VGLogHRTFModel();
    v55 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      vg::hrtf::HRTFModelImpl::predictHRTFData();

    *a5 = 0;
    a5[152] = 0;
LABEL_139:
    std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100]((vg::hrtf::DTFBiasModel **)&v81, 0);
    v41 = 0;
    v53 = 0;
    v42 = 1;
    goto LABEL_118;
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    vg::hrtf::HRTFModelImpl::predictHRTFData();

  *a5 = 0;
  a5[152] = 0;
LABEL_133:
  if (v85)
    free(v82);
}

void sub_249CF22C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if ((_BYTE)a15 && a14 < 0)
    operator delete(__p);
  std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100]((vg::hrtf::DTFBiasModel **)(v35 - 120), 0);
  std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::~__optional_destruct_base[abi:ne180100](v35 - 176);
  if (*(_BYTE *)(v35 - 88))
    free(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void vg::hrtf::HRTFData::~HRTFData(void **this)
{
  if (*((_BYTE *)this + 144))
    free(this[15]);
  free(this[12]);
  free(this[9]);
  free(this[6]);
  free(this[3]);
  free(*this);
}

id vg::hrtf::HRTFModelImpl::predict(uint64_t a1, const vg::hrtf::HRTFModelInputs *a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  NSObject *v9;
  int v10;
  vg::hrtf::DelayCoefficientsModel *v11;
  uint64_t v12;
  _OWORD *v13;
  int v14;
  vg::hrtf::DelayCoefficientsModel *v15;
  uint64_t v16;
  vg::hrtf::DelayCoefficientsModel *v17;
  uint64_t v18;
  int v19;
  vg::hrtf::DelayCoefficientsModel *v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  void *v24;
  vg::hrtf::DelayCoefficientsModel *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  vg::hrtf::DelayCoefficientsModel *v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  id v37;
  vg::hrtf::DelayCoefficientsModel *v38;
  uint64_t v39;
  vg::hrtf::DelayCoefficientsModel *v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  void *v44[3];
  void *v45;
  void *v46[3];
  char v47;
  void *v48;
  _QWORD v49[3];
  std::string v50;
  char v51;
  char v52;
  vg::hrtf::DelayCoefficientsModel *v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  void *v58[2];
  char v59;
  void *v60;
  unsigned __int8 v61;
  vg::hrtf::DelayCoefficientsModel *v62;
  uint64_t v63;
  int v64;
  char v65;
  vg::hrtf::DelayCoefficientsModel *v66;
  uint64_t v67;
  int v68;
  char v69;
  vg::hrtf::DelayCoefficientsModel *v70;
  uint64_t v71;
  int v72;
  char v73;

  if (*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3) == *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6))
  {
    LOBYTE(v70) = 0;
    v73 = 0;
    LOBYTE(v66) = 0;
    v69 = 0;
    LOBYTE(v62) = 0;
    v65 = 0;
    v6 = (void *)MEMORY[0x24BD03120]();
    vg::hrtf::HRTFModelImpl::preprocessData(a2, (uint64_t)v44);
    if (!v47)
    {
      VGLogHRTFModel();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        vg::hrtf::HRTFModelImpl::predict();
      goto LABEL_73;
    }
    if (*(_BYTE *)(a3 + 24))
      vg::hrtf::writeDebugPreprocessedData((uint64_t *)v44, (uint64_t *)a3);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v50 = *(std::string *)a1;
    v51 = 1;
    std::string::basic_string[abi:ne180100]<0>(v58, "faceEncoderModel");
    if (!v47)
      std::__throw_bad_optional_access[abi:ne180100]();
    vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()((uint64_t)&v50, v44, (uint64_t)&v53);
    v10 = v56;
    if (v73 == v56)
    {
      if (v73)
      {
        v11 = v70;
        v12 = v71;
        v70 = v53;
        v71 = v54;
        v53 = v11;
        v54 = v12;
        v72 = v55;
        if (!v56)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    else
    {
      if (!v73)
      {
        v17 = v53;
        v18 = v54;
        v54 = 0;
        v53 = 0;
        v70 = v17;
        v71 = v18;
        v72 = v55;
        v55 = 0;
        v73 = 1;
        if (!v56)
        {
LABEL_22:
          if (v59 < 0)
            operator delete(v58[0]);
          if (v51 && SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          if (!v73)
          {
            VGLogHRTFModel();
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
              vg::hrtf::HRTFModelImpl::predict();
            goto LABEL_73;
          }
          v13 = (_OWORD *)(a1 + 24);
          if (*(char *)(a1 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
          }
          else
          {
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *v13;
            v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
          }
          v51 = 1;
          std::string::basic_string[abi:ne180100]<0>(v58, "earEncoderModel");
          if (!v47)
            std::__throw_bad_optional_access[abi:ne180100]();
          vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()((uint64_t)&v50, &v45, (uint64_t)&v53);
          v14 = v56;
          if (v69 == v56)
          {
            if (v69)
            {
              v15 = v66;
              v16 = v67;
              v66 = v53;
              v67 = v54;
              v53 = v15;
              v54 = v16;
              v68 = v55;
              if (!v56)
                goto LABEL_42;
              goto LABEL_41;
            }
          }
          else
          {
            if (!v69)
            {
              v38 = v53;
              v39 = v54;
              v54 = 0;
              v53 = 0;
              v66 = v38;
              v67 = v39;
              v68 = v55;
              v55 = 0;
              v69 = 1;
              if (!v56)
              {
LABEL_42:
                if (v59 < 0)
                  operator delete(v58[0]);
                if (v51 && SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v50.__r_.__value_.__l.__data_);
                if (!v69)
                {
                  VGLogHRTFModel();
                  v9 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                    vg::hrtf::HRTFModelImpl::predict();
                  goto LABEL_73;
                }
                if (*(char *)(a1 + 47) < 0)
                {
                  std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
                }
                else
                {
                  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *v13;
                  v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
                }
                v51 = 1;
                std::string::basic_string[abi:ne180100]<0>(v58, "earEncoderModel");
                if (!v47)
                  std::__throw_bad_optional_access[abi:ne180100]();
                vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()((uint64_t)&v50, v46, (uint64_t)&v53);
                v19 = v56;
                if (v65 == v56)
                {
                  if (v65)
                  {
                    v20 = v62;
                    v21 = v63;
                    v62 = v53;
                    v63 = v54;
                    v53 = v20;
                    v54 = v21;
                    v64 = v55;
                    if (!v56)
                      goto LABEL_64;
                    goto LABEL_63;
                  }
                }
                else
                {
                  if (!v65)
                  {
                    v40 = v53;
                    v41 = v54;
                    v54 = 0;
                    v53 = 0;
                    v62 = v40;
                    v63 = v41;
                    v64 = v55;
                    v55 = 0;
                    v65 = 1;
                    if (!v56)
                      goto LABEL_64;
                    goto LABEL_63;
                  }
                  free(v62);
                  v65 = 0;
                }
                if (!v19)
                {
LABEL_64:
                  if (v59 < 0)
                    operator delete(v58[0]);
                  if (v51 && SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v50.__r_.__value_.__l.__data_);
                  if (v65)
                  {
                    v22 = 1;
                    goto LABEL_74;
                  }
                  VGLogHRTFModel();
                  v9 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                    vg::hrtf::HRTFModelImpl::predict();
LABEL_73:

                  v22 = 0;
LABEL_74:
                  std::__optional_destruct_base<vg::hrtf::HRTFPrepData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v44);
                  objc_autoreleasePoolPop(v6);
                  if (!v22)
                  {
                    v28 = 0;
LABEL_137:
                    if (v65)
                      free(v62);
                    if (v69)
                      free(v66);
                    if (v73)
                      free(v70);
                    return v28;
                  }
                  VGLogHRTFModel();
                  v23 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
                    vg::hrtf::HRTFModelImpl::predict();

                  LOBYTE(v58[0]) = 0;
                  v61 = 0;
                  v24 = (void *)MEMORY[0x24BD03120]();
                  vg::hrtf::DelayCoefficientsModel::create((uint64_t *)(a1 + 144), a3, (uint64_t **)&v53);
                  v25 = v53;
                  VGLogHRTFModel();
                  v26 = objc_claimAutoreleasedReturnValue();
                  v27 = v26;
                  if (v25)
                  {
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                      vg::hrtf::HRTFModelImpl::predict();

                    if (!v73)
                      std::__throw_bad_optional_access[abi:ne180100]();
                    vg::hrtf::DelayCoefficientsModel::predictDelayCoefficients((uint64_t **)v53, (uint64_t)&v70, (uint64_t)v44);
                    std::__optional_storage_base<vg::hrtf::DelayData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<vg::hrtf::DelayData,false>>((uint64_t)v58, (uint64_t)v44);
                    if (LOBYTE(v46[0]))
                    {
                      free(v45);
                      free(v44[0]);
                    }
                  }
                  else
                  {
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                      vg::hrtf::HRTFModelImpl::predict();

                  }
                  v29 = v53;
                  v53 = 0;
                  if (v29)
                  {
                    vg::hrtf::DelayCoefficientsModel::~DelayCoefficientsModel(v29);
                    MEMORY[0x24BD02D60]();
                  }
                  objc_autoreleasePoolPop(v24);
                  if (v25)
                  {
                    v30 = v61;
                    VGLogHRTFModel();
                    v31 = objc_claimAutoreleasedReturnValue();
                    v32 = v31;
                    if (v30)
                    {
                      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
                        vg::hrtf::HRTFModelImpl::predict();

                      if (!v73 || !v69)
                        std::__throw_bad_optional_access[abi:ne180100]();
                      vg::hrtf::HRTFModelImpl::predictHRTFData(a1, (uint64_t)&v70, (uint64_t)&v66, (uint64_t *)(a1 + 48), &v53);
                      v33 = v57;
                      VGLogHRTFModel();
                      v34 = objc_claimAutoreleasedReturnValue();
                      v35 = v34;
                      if (!v33)
                      {
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                          vg::hrtf::HRTFModelImpl::predict();

                        v28 = 0;
                        goto LABEL_134;
                      }
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                        vg::hrtf::HRTFModelImpl::predict();

                      if (!v73 || !v65)
                        std::__throw_bad_optional_access[abi:ne180100]();
                      vg::hrtf::HRTFModelImpl::predictHRTFData(a1, (uint64_t)&v70, (uint64_t)&v62, (uint64_t *)(a1 + 72), &v50);
                      if (!v52)
                      {
                        VGLogHRTFModel();
                        v42 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                          vg::hrtf::HRTFModelImpl::predict();

                        v28 = 0;
                        goto LABEL_133;
                      }
                      if (*(_BYTE *)(a3 + 24))
                      {
                        if (!v73 || !v61 || !v57)
                          goto LABEL_149;
                        vg::hrtf::writeHRTFModelDebugData((uint64_t)&v70, (uint64_t)v58, (uint64_t)&v53, (uint64_t)&v50, (const void **)a3);
                      }
                      if (v73 && v57 && v52 && v61)
                      {
                        vg::hrtf::reportCoreAnalytics((uint64_t)&v70, (uint64_t)&v53, (uint64_t)&v50, (uint64_t)v58, a3);
                        if (!v61)
                          std::__throw_bad_optional_access[abi:ne180100]();
                        vg::hrtf::DelayData::DelayData((uint64_t)v44, (uint64_t)v58);
                        if (!v57)
                          std::__throw_bad_optional_access[abi:ne180100]();
                        vg::hrtf::HRTFData::HRTFData(v46, (const void **)&v53);
                        if (!v52)
                          std::__throw_bad_optional_access[abi:ne180100]();
                        vg::hrtf::HRTFData::HRTFData(&v48, (const void **)&v50.__r_.__value_.__l.__data_);
                        std::string::basic_string[abi:ne180100]<0>(v49, "");
                        vg::hrtf::createAudioProfile((uint64_t)v44, (char *)a3);
                        v36 = (void *)objc_claimAutoreleasedReturnValue();
                        v28 = v36;
                        if (v36)
                        {
                          v37 = v36;
                        }
                        else
                        {
                          VGLogHRTFModel();
                          v43 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                            vg::hrtf::HRTFModelImpl::predict();

                        }
                        vg::hrtf::AudioProfileInputs::~AudioProfileInputs(v44);
LABEL_133:
                        std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v50);
LABEL_134:
                        std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v53);
LABEL_135:
                        if (v61)
                        {
                          free(v60);
                          free(v58[0]);
                        }
                        goto LABEL_137;
                      }
LABEL_149:
                      std::__throw_bad_optional_access[abi:ne180100]();
                    }
                    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                      vg::hrtf::HRTFModelImpl::predict();

                  }
                  v28 = 0;
                  goto LABEL_135;
                }
LABEL_63:
                free(v53);
                goto LABEL_64;
              }
LABEL_41:
              free(v53);
              goto LABEL_42;
            }
            free(v66);
            v69 = 0;
          }
          if (!v14)
            goto LABEL_42;
          goto LABEL_41;
        }
LABEL_21:
        free(v53);
        goto LABEL_22;
      }
      free(v70);
      v73 = 0;
    }
    if (!v10)
      goto LABEL_22;
    goto LABEL_21;
  }
  VGLogHRTFModel();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    vg::hrtf::HRTFModelImpl::predict();

  return 0;
}

void sub_249CF2DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  uint64_t v57;

  vg::hrtf::AudioProfileInputs::~AudioProfileInputs(&a10);
  std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x228]);
  std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::~__optional_destruct_base[abi:ne180100](v57 - 216);
  if (*(_BYTE *)(v57 - 136))
    free(*(void **)(v57 - 160));
  if (*(_BYTE *)(v57 - 104))
    free(*(void **)(v57 - 128));
  if (*(_BYTE *)(v57 - 72))
    free(*(void **)(v57 - 96));
  _Unwind_Resume(a1);
}

void vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  NSObject *v8;
  vg::shared::VGE5RT *v9;
  uint64_t *v10;
  NSObject *v11;
  void *v12;
  int v13;
  NSObject *v14;
  vg::hrtf::EncoderModelEspresso *v15;
  NSObject *v16;
  NSObject *v17;
  vg::hrtf::EncoderModelEspresso *v18;
  void *__p;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  vg::hrtf::EncoderModelEspresso *v24;
  uint64_t *v25;

  VGLogHRTFModel();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()();

  v25 = 0;
  if (*(_BYTE *)(a1 + 24) && vg::shared::VGE5RT::isANESupported(v9))
  {
    LOBYTE(__p) = 0;
    v23 = 0;
    vg::hrtf::EncoderModel::create((uint64_t *)a1, (uint64_t)&__p, (uint64_t **)&v24);
    v10 = (uint64_t *)v24;
    v24 = 0;
    v25 = v10;
    if (v23 && v22 < 0)
      operator delete(__p);
    if (v10)
    {
      VGLogHRTFModel();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()();

      vg::hrtf::EncoderModel::predictEncodings(v10, a2, (uint64_t)&__p);
      if (v23)
      {
        v12 = __p;
        v3 = v20;
        v13 = 1;
        v4 = v21;
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      goto LABEL_31;
    }
  }
  VGLogHRTFModel();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()();

  LOBYTE(__p) = 0;
  v23 = 0;
  vg::hrtf::EncoderModelEspresso::create((uint64_t *)a1, (uint64_t)&__p, (uint64_t **)&v24);
  if (v23 && v22 < 0)
    operator delete(__p);
  v15 = v24;
  VGLogHRTFModel();
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()();

    vg::hrtf::EncoderModelEspresso::predictEncodings((uint64_t *)v24, (uint64_t)a2, (uint64_t)&__p);
    if (v23)
    {
      v12 = __p;
      v3 = v20;
      v13 = 1;
      v4 = v21;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()();

    v13 = 0;
    v12 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    vg::hrtf::EncoderModelEspresso::~EncoderModelEspresso(v18);
    MEMORY[0x24BD02D60]();
  }
  if (v15)
  {
    v10 = 0;
LABEL_31:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    if (v13)
    {
      *(_QWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v4;
      v13 = 1;
      *(_BYTE *)(a3 + 24) = 1;
      v12 = 0;
    }
    if (v10)
    {
      vg::hrtf::EncoderModel::~EncoderModel((vg::hrtf::EncoderModel *)v10);
      MEMORY[0x24BD02D60]();
    }
  }
  if (v13)
    free(v12);
}

void sub_249CF3190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,vg::hrtf::EncoderModel *a21)
{
  std::unique_ptr<vg::hrtf::EncoderModel>::reset[abi:ne180100](&a21, 0);
  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::DelayData::DelayData(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = cva::MatrixData<float,0ul,0ul,false>::MatrixData((void **)a1, (const void **)a2, *(unsigned int *)(a2 + 16));
  *((_DWORD *)v4 + 4) = *(_DWORD *)(a2 + 16);
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(v4 + 3, (const void **)(a2 + 24), *(unsigned int *)(a2 + 40));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

void sub_249CF3230(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

vg::hrtf::HRTFModel *vg::hrtf::HRTFModel::HRTFModel(vg::hrtf::HRTFModel *this, const vg::hrtf::HRTFModelImplInput *a2)
{
  std::string *v4;

  v4 = (std::string *)operator new();
  vg::hrtf::HRTFModelImpl::HRTFModelImpl(v4, a2);
  *(_QWORD *)this = v4;
  return this;
}

void sub_249CF3298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24BD02D60](v1, 0x1012C407C048CB5);
  _Unwind_Resume(a1);
}

void vg::hrtf::HRTFModel::~HRTFModel(void ***this)
{
  std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0);
}

void vg::hrtf::HRTFModel::create(uint64_t *a1@<X0>, vg::hrtf::HRTFModel **a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  detail *v9;
  vg::hrtf::HRTFModel *v10;
  __n128 __p;
  char v12;
  char v13;
  std::string __str;
  char v15;
  uint8_t buf[16];
  void *v17[2];
  __int128 v18;
  void *v19[2];
  void *v20[2];
  __int128 v21;
  void *v22[2];
  void *v23[2];
  __int128 v24;
  std::string v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  VGLogHRTFModel();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0)
        v7 = a1;
      else
        v7 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_INFO, "Using model root path %s", buf, 0xCu);
    }

    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
    v9 = (detail *)objc_claimAutoreleasedReturnValue();
    v24 = 0u;
    memset(&v25, 0, sizeof(v25));
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)buf = 0u;
    *(_OWORD *)v17 = 0u;
    __str.__r_.__value_.__s.__data_[0] = 0;
    v15 = 0;
    detail::getModelPath(v9, CFSTR("face_encoder_mlmodels"), CFSTR("face_encoder_model.espresso.net"), (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v13 && v12 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (!v15)
      goto LABEL_44;
    std::string::operator=((std::string *)buf, &__str);
    detail::getModelPath(v9, CFSTR("ear_encoder_mlmodels"), CFSTR("ear_encoder_model.espresso.net"), (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v13 && v12 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (!v15)
      goto LABEL_44;
    std::string::operator=((std::string *)&v17[1], &__str);
    detail::getModelPath(v9, CFSTR("left_dtf_mlmodel"), CFSTR("left_dtf_model.espresso.net"), (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v13 && v12 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (!v15)
      goto LABEL_44;
    std::string::operator=((std::string *)v19, &__str);
    detail::getModelPath(v9, CFSTR("right_dtf_mlmodel"), CFSTR("right_dtf_model.espresso.net"), (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v13 && v12 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (!v15)
      goto LABEL_44;
    std::string::operator=((std::string *)&v20[1], &__str);
    detail::getModelPath(v9, CFSTR("hrtf_decoder_mlmodels"), CFSTR("hrtf_decoder_model.espresso.net"), (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v13 && v12 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (!v15)
      goto LABEL_44;
    std::string::operator=((std::string *)v22, &__str);
    detail::getModelPath(v9, CFSTR("dtf_bias_mlmodel"), CFSTR("dtf_bias_model.espresso.net"), (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v13 && v12 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (!v15)
      goto LABEL_44;
    std::string::operator=((std::string *)&v23[1], &__str);
    detail::getModelPath(v9, CFSTR("delay_mlmodel"), CFSTR("delay_model.espresso.net"), (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v13 && v12 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (v15)
    {
      std::string::operator=(&v25, &__str);
      v10 = (vg::hrtf::HRTFModel *)operator new();
      vg::hrtf::HRTFModel::HRTFModel(v10, (const vg::hrtf::HRTFModelImplInput *)buf);
      *a2 = v10;
      if (v15 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
LABEL_44:
      *a2 = 0;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[1]);
    if (SHIBYTE(v23[0]) < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[1]);
    if (SHIBYTE(v20[0]) < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[1]);
    if (SHIBYTE(v17[0]) < 0)
      operator delete(*(void **)buf);

  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      vg::hrtf::HRTFModel::create();

    *a2 = 0;
  }
}

void sub_249CF375C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,void *a21)
{
  void *v21;
  uint64_t v22;

  MEMORY[0x24BD02D60](v22, 0x20C4093837F09);
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  vg::hrtf::HRTFModelImplInput::~HRTFModelImplInput(&a21);

  _Unwind_Resume(a1);
}

void detail::getModelPath(detail *this@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, uint64_t a4@<X8>)
{
  detail *v8;
  NSString *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  detail *v25;
  __int16 v26;
  NSString *v27;
  __int16 v28;
  NSString *v29;
  _QWORD v30[4];

  v30[3] = *MEMORY[0x24BDAC8D0];
  v8 = this;
  v9 = a2;
  v10 = a3;
  v11 = (void *)MEMORY[0x24BDD17C8];
  v30[0] = v8;
  v30[1] = v9;
  v30[2] = v10;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v30, 3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "pathWithComponents:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (!v13)
  {
    VGLogHRTFModel();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v24 = 138412802;
      v25 = v8;
      v26 = 2112;
      v27 = v9;
      v28 = 2112;
      v29 = v10;
      _os_log_error_impl(&dword_249CAD000, v17, OS_LOG_TYPE_ERROR, "Failed to create model path from modelRootPath %@ with directory %@ and model file %@", (uint8_t *)&v24, 0x20u);
    }
    goto LABEL_8;
  }
  if ((objc_msgSend(v14, "fileExistsAtPath:", v13) & 1) == 0)
  {
    VGLogHRTFModel();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      detail::getModelPath((uint64_t)v13, v17, v18, v19, v20, v21, v22, v23);
LABEL_8:

    v16 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, (char *)objc_msgSend(objc_retainAutorelease(v13), "UTF8String"));
  v16 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 24) = v16;

}

void sub_249CF39B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id vg::hrtf::HRTFModel::predict(uint64_t *a1, const vg::hrtf::HRTFModelInputs *a2, uint64_t a3)
{
  return vg::hrtf::HRTFModelImpl::predict(*a1, a2, a3);
}

void ___ZL14VGLogHRTFModelv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "HRTFModel");
  v1 = (void *)VGLogHRTFModel(void)::handle;
  VGLogHRTFModel(void)::handle = (uint64_t)v0;

}

void sub_249CF3A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<vg::hrtf::FaceFrameData>::__init_with_size[abi:ne180100]<std::__wrap_iter<vg::hrtf::FaceFrameData const*>,std::__wrap_iter<vg::hrtf::FaceFrameData const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<vg::hrtf::FaceFrameData>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249CF3ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<vg::hrtf::FaceFrameData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<vg::hrtf::FaceFrameData,vg::hrtf::FaceFrameData const&,vg::hrtf::FaceFrameData*>(a4 + v7, a2 + v7);
      v7 += 96;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_249CF3BA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 96;
    do
    {
      std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>((id *)(v4 + v2));
      v2 -= 96;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<vg::hrtf::FaceFrameData,vg::hrtf::FaceFrameData const&,vg::hrtf::FaceFrameData*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v5;
  cva::MatrixData<float,0ul,0ul,false>::MatrixData((void **)(a1 + 64), (const void **)(a2 + 64), (2 * *(_DWORD *)(a2 + 80)));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_249CF3C34(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<vg::hrtf::ProcessedROIData>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    while (a2 != a3)
    {
      result = (_QWORD *)std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>(v7, a2);
      a2 += 80;
      v7 += 80;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_249CF3CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<vg::hrtf::ProcessedROIData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(id *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

void std::__destroy_at[abi:ne180100]<vg::hrtf::ProcessedROIData,0>(id *a1)
{

}

void std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::__destroy_at[abi:ne180100]<vg::hrtf::ProcessedROIData,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__optional_storage_base<vg::hrtf::DTFOutputs,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<vg::hrtf::DTFOutputs,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v2 = *(_QWORD *)a1;
      v3 = *(_QWORD *)(a1 + 8);
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v3;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a2 + 24) = v5;
      *(_QWORD *)(a2 + 32) = v6;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    free(*(void **)(a1 + 24));
    free(*(void **)a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
}

uint64_t std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    free(*(void **)(a1 + 24));
    free(*(void **)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<vg::hrtf::HRTFData,false>::__optional_destruct_base[abi:ne180100]<vg::hrtf::HRTFData>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v4;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v5;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 104) = v6;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(result + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 128) = 0;
    v7 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(result + 128) = v7;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_DWORD *)(result + 136) = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a2 + 136) = 0;
    *(_BYTE *)(result + 144) = 1;
  }
  *(_BYTE *)(result + 152) = 1;
  return result;
}

vg::hrtf::EncoderModel *std::unique_ptr<vg::hrtf::EncoderModel>::reset[abi:ne180100](vg::hrtf::EncoderModel **a1, vg::hrtf::EncoderModel *a2)
{
  vg::hrtf::EncoderModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::EncoderModel::~EncoderModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::hrtf::EncoderModelEspresso *std::unique_ptr<vg::hrtf::EncoderModelEspresso>::reset[abi:ne180100](vg::hrtf::EncoderModelEspresso **a1, vg::hrtf::EncoderModelEspresso *a2)
{
  vg::hrtf::EncoderModelEspresso *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::EncoderModelEspresso::~EncoderModelEspresso(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

uint64_t std::__optional_destruct_base<vg::hrtf::HRTFPrepData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (void **)(a1 + 48);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)(a1 + 24);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)a1;
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::__optional_storage_base<vg::hrtf::DelayData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<vg::hrtf::DelayData,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v2 = *(_QWORD *)a1;
      v3 = *(_QWORD *)(a1 + 8);
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v3;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a2 + 24) = v5;
      *(_QWORD *)(a2 + 32) = v6;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void **vg::hrtf::HRTFData::HRTFData(void **this, const void **a2)
{
  void **v4;

  v4 = cva::MatrixData<float,0ul,0ul,false>::MatrixData(this, a2, *((unsigned int *)a2 + 4));
  *((_DWORD *)v4 + 4) = *((_DWORD *)a2 + 4);
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(v4 + 3, a2 + 3, *((unsigned int *)a2 + 10));
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(this + 6, a2 + 6, (*((_DWORD *)a2 + 17) * *((_DWORD *)a2 + 16)));
  this[8] = (void *)a2[8];
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(this + 9, a2 + 9, (*((_DWORD *)a2 + 23) * *((_DWORD *)a2 + 22)));
  this[11] = (void *)a2[11];
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(this + 12, a2 + 12, *((unsigned int *)a2 + 28));
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  std::__optional_copy_base<cva::Matrix<float,0u,1u,false>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(this + 15), (uint64_t)(a2 + 15));
  return this;
}

void sub_249CF4294(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  free(*v5);
  free(*v4);
  free(*v3);
  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<cva::Matrix<float,0u,1u,false>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    cva::MatrixData<float,0ul,0ul,false>::MatrixData((void **)a1, (const void **)a2, *(unsigned int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_249CF4338(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    free(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::AudioProfileInputs::~AudioProfileInputs(void **this)
{
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((_BYTE *)this + 344))
    free(this[40]);
  free(this[37]);
  free(this[34]);
  free(this[31]);
  free(this[28]);
  free(this[25]);
  if (*((_BYTE *)this + 192))
    free(this[21]);
  free(this[18]);
  free(this[15]);
  free(this[12]);
  free(this[9]);
  free(this[6]);
  free(this[3]);
  free(*this);
}

uint64_t std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152))
  {
    if (*(_BYTE *)(a1 + 144))
      free(*(void **)(a1 + 120));
    free(*(void **)(a1 + 96));
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 24));
    free(*(void **)a1);
  }
  return a1;
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void vg::hrtf::HRTFModelImplInput::~HRTFModelImplInput(void **this)
{
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  std::locale v10;
  char v11;
  char *v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[256];
  _BYTE *v17;
  __int128 v18;
  uint64_t (*v19)(int, std::string::size_type);
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = xmmword_249D3ADD0;
  v17 = v16;
  v19 = std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke;
  v20 = v16;
  v4 = *a4;
  v12[0] = a2;
  v12[1] = &a2[a3];
  v13 = 0;
  v14 = 0;
  v15 = v4;
  v8 = *(_OWORD *)a4;
  v9 = a4[2];
  v5 = 0;
  v6 = 0;
  v7 = (uint64_t *)&v17;
  LOBYTE(v10.__locale_) = 0;
  v11 = 0;
  std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v12, &v7);
  if (v11)
    std::locale::~locale(&v10);
  ((void (*)(_BYTE *, _QWORD, _BYTE *))v19)(v17, *((_QWORD *)&v18 + 1), v20);
}

void sub_249CF468C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char **a1, uint64_t **a2)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  int v7;
  char *v8;
  uint64_t *v10;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  if (*a1 != v4)
  {
    while (1)
    {
      v7 = *v3;
      if (v7 == 125)
        break;
      if (v7 != 123)
        goto LABEL_10;
      if (++v3 == v4)
        std::__throw_format_error[abi:ne180100]("The format string terminates at a '{'");
      if (*v3 == 123)
      {
LABEL_10:
        v8 = v3 + 1;
        v10 = v5;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v10, v3);
        v3 = v8;
        if (v8 == v4)
          return v5;
      }
      else
      {
        *a2 = v5;
        v3 = std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3, v4, a1, a2);
        v5 = *a2;
        if (v3 == v4)
          return v5;
      }
    }
    if (++v3 == v4 || *v3 != 125)
      std::__throw_format_error[abi:ne180100]("The format string contains an invalid escape sequence");
    goto LABEL_10;
  }
  return v5;
}

uint64_t std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke(char *a1, std::string::size_type __n_add, uint64_t a3)
{
  std::string *v4;
  std::string::size_type size;
  std::string::size_type v6;

  v4 = *(std::string **)(a3 + 296);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = v4->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    v6 = *(_QWORD *)(a3 + 296);
  }
  return std::string::__insert_with_size<char *,char *>(v4, v6 + size, a1, &a1[__n_add], __n_add);
}

uint64_t std::string::__insert_with_size<char *,char *>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v6 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = this;
      goto LABEL_6;
    }
    return (uint64_t)v6 + v7;
  }
  v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  size = this->__r_.__value_.__l.__size_;
LABEL_6:
  if (v9 > (std::string *)a3 || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= a3)
    return std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(this, __n_add, v7, a3, a4);
  std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(&__p, a3, a4);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__l.__size_;
  v12 = std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_249CF48E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  std::string::value_type *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_249CF4A6C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_249CF4A88(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__throw_format_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::format_error::format_error[abi:ne180100](exception, a1);
}

void sub_249CF4AD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, char **a3, _QWORD *a4)
{
  char *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  char *v17;
  _QWORD v19[3];
  BOOL v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, (uint64_t)a3);
  if (v7 == a2)
    goto LABEL_14;
  v9 = *v7;
  v20 = v9 == 58;
  if (v9 == 125)
    goto LABEL_5;
  if (v9 != 58)
LABEL_14:
    std::__throw_format_error[abi:ne180100]("The argument index should end with a ':' or a '}'");
  ++v7;
LABEL_5:
  *a3 = v7;
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = &v20;
  v10 = a4[1];
  if (v10 <= v8)
  {
    LOBYTE(v22) = 0;
  }
  else if (v10 > 0xC)
  {
    v15 = (__int128 *)(a4[2] + 32 * v8);
    v16 = v15[1];
    v21 = *v15;
    v22 = v16;
  }
  else
  {
    v11 = (uint64_t *)(a4[2] + 16 * v8);
    v13 = *v11;
    v12 = v11[1];
    v14 = (a4[3] >> (5 * v8)) & 0x1FLL;
    *(_QWORD *)&v21 = v13;
    *((_QWORD *)&v21 + 1) = v12;
    LOBYTE(v22) = v14;
  }
  std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)v19, (uint64_t)&v21);
  v17 = *a3;
  if (*a3 == a2 || *v17 != 125)
    std::__throw_format_error[abi:ne180100]("The replacement field misses a terminating '}'");
  return v17 + 1;
}

uint64_t **std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](uint64_t **a1, char *a2)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *a2;
  v5 = **a1;
  v6 = (*a1)[2];
  v3[2] = v6 + 1;
  *(_BYTE *)(v5 + v6) = v4;
  if (v3[2] == v3[1])
  {
    ((void (*)(uint64_t))v3[3])(*v3);
    v3[2] = 0;
  }
  return a1;
}

std::runtime_error *std::format_error::format_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_251B23380;
  return result;
}

void std::format_error::~format_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x24BD02D60);
}

char *std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  char *v3;
  int v4;
  int v5;

  v3 = a1;
  v4 = *a1;
  if (v4 == 125 || v4 == 58)
  {
    std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](a3);
    return v3;
  }
  if (v4 == 48)
  {
    v5 = *(_DWORD *)(a3 + 16);
    if (v5)
    {
      if (v5 == 2)
        std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
    }
    else
    {
      *(_DWORD *)(a3 + 16) = 1;
    }
    return a1 + 1;
  }
  if ((v4 - 58) <= 0xF5u)
    std::__throw_format_error[abi:ne180100]("The argument index starts with an invalid character");
  return std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((unint64_t)a1, a2, a3);
}

void std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_249CF4D98(uint64_t a1, unsigned __int8 *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>(a1, a2);
}

void sub_249CF4DA0(uint64_t a1, unsigned __int8 *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>(a1, a2);
}

void sub_249CF4DA8(uint64_t a1, int *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>(a1, a2);
}

void sub_249CF4DB0(uint64_t a1, uint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(a1, a2);
}

void sub_249CF4DB8(uint64_t a1, unint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},__int128 &>(a1, a2);
}

void sub_249CF4DC0(uint64_t a1, unsigned int *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>(a1, a2);
}

void sub_249CF4DC8(uint64_t a1, unint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(a1, a2);
}

void sub_249CF4DD0(uint64_t a1, unint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned __int128 &>(a1, a2);
}

uint64_t *sub_249CF4DD8(uint64_t a1, float *a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>(a1, a2);
}

uint64_t *sub_249CF4DE0(uint64_t a1, double *a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>(a1, a2);
}

uint64_t *sub_249CF4DE8(uint64_t a1, double *a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>(a1, a2);
}

uint64_t *sub_249CF4DF0(uint64_t a1, char **a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>(a1, a2);
}

_QWORD *sub_249CF4DF8(uint64_t a1, uint64_t a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>(a1, a2);
}

void sub_249CF4E00(uint64_t a1, uint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>(a1, a2);
}

uint64_t sub_249CF4E08(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a2 + 8))(*a1, a1[1], *(_QWORD *)a2);
}

void sub_249CF4E20()
{
  std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
}

char *std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(unint64_t a1, char *a2, uint64_t a3)
{
  char *result;
  int v5;

  result = std::__format::__parse_number[abi:ne180100]<char const*>(a1, a2);
  v5 = *(_DWORD *)(a3 + 16);
  if (v5)
  {
    if (v5 == 2)
      std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
  }
  else
  {
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1)
      std::__throw_format_error[abi:ne180100]("Using automatic argument numbering in manual argument numbering mode");
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 2;
  }
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2 + 1;
  return v2;
}

char *std::__format::__parse_number[abi:ne180100]<char const*>(unint64_t a1, char *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  if ((uint64_t)&a2[-a1] <= 9)
    v2 = (unsigned __int8 *)a2;
  else
    v2 = (unsigned __int8 *)(a1 + 9);
  v3 = (unsigned __int8 *)(a1 + 1);
  v4 = *(char *)a1 - 48;
  if ((unsigned __int8 *)(a1 + 1) == v2)
  {
LABEL_8:
    if (v2 == (unsigned __int8 *)a2)
    {
      return a2;
    }
    else
    {
      v6 = *v2;
      if ((v6 - 48) > 9)
      {
        return (char *)v2;
      }
      else if ((v6 + 10 * (unint64_t)v4 - 48) >> 31
             || (v3 = (unsigned __int8 *)(a1 + 2), (char *)(a1 + 2) != a2) && *v3 - 48 <= 9)
      {
        std::__throw_format_error[abi:ne180100]("The numeric value of the format specifier is too large");
      }
    }
  }
  else
  {
    a1 += (unint64_t)&v2[~a1];
    while (1)
    {
      v5 = *v3;
      if ((v5 - 58) < 0xFFFFFFF6)
        break;
      v4 = v5 + 10 * v4 - 48;
      if (++v3 == v2)
        goto LABEL_8;
    }
  }
  return (char *)v3;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>((uint64_t)&v8, "a BOOL");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3 != 0, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_char[abi:ne180100]<char>((uint64_t)&v8, "a character");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>(uint64_t a1, int *a2)
{
  int v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},__int128 &>(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  __int16 v12;
  char v13;

  v4 = *a2;
  v3 = a2[1];
  v9 = 0;
  v10 = -1;
  v11 = 32;
  v12 = 0;
  v13 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v5 = *(unsigned __int8 ***)a1;
    v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    *v5 = v6;
  }
  v7 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *v7 = v8;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned __int128 &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  __int16 v12;
  char v13;

  v4 = *a2;
  v3 = a2[1];
  v9 = 0;
  v10 = -1;
  v11 = 32;
  v12 = 0;
  v13 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v5 = *(unsigned __int8 ***)a1;
    v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    *v5 = v6;
  }
  v7 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *v7 = v8;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>(uint64_t a1, float *a2)
{
  float v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *a2;
  v11 = 0;
  v12 = -1;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0)
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      v12 = 6;
    }
    *v4 = v5;
  }
  v7 = *(uint64_t ***)(a1 + 8);
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  result = std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>(uint64_t a1, double *a2)
{
  double v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *a2;
  v11 = 0;
  v12 = -1;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0)
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      v12 = 6;
    }
    *v4 = v5;
  }
  v7 = *(uint64_t ***)(a1 + 8);
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  result = std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>(uint64_t a1, double *a2)
{
  double v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *a2;
  v11 = 0;
  v12 = -1;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0)
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      v12 = 6;
    }
    *v4 = v5;
  }
  v7 = *(uint64_t ***)(a1 + 8);
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  result = std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>(uint64_t a1, char **a2)
{
  char *v3;
  unsigned __int8 **v4;
  uint64_t **v5;
  uint64_t *result;
  int v7;
  unint64_t v8;
  char v9;
  __int16 v10;
  char v11;

  v3 = *a2;
  v7 = 1;
  v8 = 0xFFFFFFFF00000000;
  v9 = 32;
  v10 = 0;
  v11 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    *v4 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  v5 = *(uint64_t ***)(a1 + 8);
  result = std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  *v5 = result;
  return result;
}

_QWORD *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>(uint64_t a1, uint64_t a2)
{
  char *v3;
  size_t v4;
  unsigned __int8 **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  int v11;
  unint64_t v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v11 = 1;
  v12 = 0xFFFFFFFF00000000;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v5 = *(unsigned __int8 ***)a1;
    *v5 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1);
  }
  v6 = *(_QWORD **)(a1 + 8);
  v7 = (_QWORD *)*v6;
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v6);
  result = std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v3, v4, v7, v8, v9);
  *v6 = result;
  return result;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  __int16 v10;
  char v11;

  v3 = *a2;
  v7 = 0;
  v8 = -1;
  v9 = 32;
  v10 = 0;
  v11 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    *v4 = std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  v5 = *(_QWORD **)(a1 + 8);
  std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  *v5 = v6;
}

void std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (*(unsigned __int8 *)(a1 + 1) > 1u)
  {
    v7 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v7);
  }
  else
  {
    v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (_QWORD **)a3, v5, v6);
  }
}

unsigned __int8 *std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(_BYTE *a1, unsigned __int8 **a2, unsigned __int16 a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v8;
  unsigned __int8 *v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  _BOOL4 v16;
  char *v17;

  v3 = *a2;
  v4 = a2[1];
  v17 = (char *)v3;
  if (v3 == v4)
    return v3;
  v8 = std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(a1, (unsigned __int8 **)&v17, v4, (a3 >> 6) & 1);
  v9 = (unsigned __int8 *)v17;
  if (v8)
    v10 = v17 == (char *)v4;
  else
    v10 = 0;
  if (!v10)
  {
    if ((a3 & 1) == 0)
      goto LABEL_14;
    v11 = *v17;
    switch(v11)
    {
      case ' ':
        v12 = *a1 | 0x18;
        break;
      case '+':
        v12 = *a1 & 0xE7 | 0x10;
        break;
      case '-':
        v12 = *a1 & 0xE7 | 8;
        break;
      default:
LABEL_14:
        if ((a3 & 2) == 0 || *v9 != 35 || (*a1 |= 0x20u, ++v9, v17 = (char *)v9, v9 != v4))
        {
          if ((a3 & 4) == 0 || *v9 != 48)
            goto LABEL_22;
          if ((*a1 & 7) == 0)
            *a1 = *a1 & 0xF8 | 4;
          v17 = (char *)(v9 + 1);
          if (v9 + 1 != v4)
          {
LABEL_22:
            v13 = std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, (unint64_t *)&v17, (char *)v4, (uint64_t)a2);
            v14 = (unsigned __int8 *)v17;
            if (!v13 || v17 != (char *)v4)
            {
              if ((a3 & 8) == 0
                || (v16 = std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, &v17, (char *)v4, (uint64_t)a2), v14 = (unsigned __int8 *)v17, !v16)|| v17 != (char *)v4)
              {
                if ((a3 & 0x10) == 0 || *v14 != 76 || (*a1 |= 0x40u, ++v14, v17 = (char *)v14, v14 != v4))
                {
                  if ((a3 & 0x80) == 0 || *v14 != 110 || (*a1 |= 0x80u, v17 = (char *)(v14 + 1), v14 + 1 != v4))
                  {
                    if ((a3 & 0x20) != 0)
                      std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>((uint64_t)a1, &v17);
                    v3 = (unsigned __int8 *)v17;
                    if ((a3 & 0x100) == 0)
                      return v3;
                    if (v17 != (char *)v4)
                    {
                      v4 = (unsigned __int8 *)v17;
                      if (*v17 != 125)
                        std::__throw_format_error[abi:ne180100]("The format specifier should consume the input or end with a '}'");
                    }
                  }
                }
              }
            }
          }
        }
        return v4;
    }
    *a1 = v12;
    v17 = (char *)++v9;
    if (v9 == v4)
      return v4;
    goto LABEL_14;
  }
  return v4;
}

uint64_t std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2;
  _BYTE *v3;

  v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    if (v2 > 1)
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    v3 = (_BYTE *)result;
    result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v3 & 7) == 0)
      *v3 = *v3 & 0xF8 | 1;
  }
  return result;
}

uint64_t std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(_BYTE *a1, unsigned __int8 **a2, unsigned __int8 *a3, int a4)
{
  unsigned __int8 *v8;
  int v9;
  char v10;
  int v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v15;
  size_t v16;
  unsigned __int8 *v17[2];

  v17[0] = *a2;
  v17[1] = a3;
  if ((std::__unicode::__code_point_view<char>::__consume[abi:ne180100](v17) & 0x80000000) != 0)
    std::__throw_format_error[abi:ne180100]("The format specifier contains malformed Unicode characters");
  v8 = v17[0];
  if (v17[0] >= a3)
    goto LABEL_7;
  v9 = (char)*v17[0];
  switch(v9)
  {
    case '<':
      v10 = 1;
      goto LABEL_17;
    case '>':
      v10 = 3;
LABEL_17:
      *a1 = *a1 & 0xF8 | v10;
      v15 = *a2;
      v16 = v8 - *a2;
      if (v16 == 1)
      {
        std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100]((uint64_t)a1, (char)*v15, a4);
        v15 = *a2;
      }
      else if (v8 == v15)
      {
LABEL_21:
        v13 = &v8[v16];
        goto LABEL_22;
      }
      memmove(a1 + 12, v15, v16);
      v8 = *a2;
      goto LABEL_21;
    case '^':
      v10 = 2;
      goto LABEL_17;
  }
LABEL_7:
  v11 = (char)**a2;
  switch(v11)
  {
    case '<':
      v12 = 1;
      break;
    case '>':
      v12 = 3;
      break;
    case '^':
      v12 = 2;
      break;
    default:
      return 0;
  }
  *a1 = *a1 & 0xF8 | v12;
  v13 = *a2;
LABEL_22:
  *a2 = v13 + 1;
  return 1;
}

uint64_t std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4)
{
  unint64_t v6;
  int v7;
  char *v9;
  char *v10;
  int v11;

  v6 = *a2;
  v7 = *(unsigned __int8 *)*a2;
  if (v7 == 123)
  {
    v9 = (char *)(v6 + 1);
    *a2 = (unint64_t)v9;
    v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v9, a3, a4);
    *(_WORD *)(a1 + 2) |= 0x4000u;
  }
  else
  {
    if (v7 == 48)
      std::__throw_format_error[abi:ne180100]("The width option should not have a leading zero");
    if ((v7 - 58) < 0xFFFFFFF6)
      return 0;
    v10 = std::__format::__parse_number[abi:ne180100]<char const*>(v6, a3);
  }
  *(_DWORD *)(a1 + 4) = v11;
  *a2 = (unint64_t)v10;
  return 1;
}

BOOL std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, char **a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  unsigned __int8 *v8;
  int v9;
  char *v10;
  int v11;
  int v12;

  v4 = *a2;
  v5 = **a2;
  if (v5 == 46)
  {
    v8 = (unsigned __int8 *)(v4 + 1);
    *a2 = v4 + 1;
    if (v4 + 1 == a3)
      std::__throw_format_error[abi:ne180100]("End of input while parsing format specifier precision");
    v9 = *v8;
    if (v9 == 123)
    {
      *a2 = v4 + 2;
      v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v4 + 2, a3, a4);
      *(_WORD *)(a1 + 2) |= 0x8000u;
      *(_DWORD *)(a1 + 8) = v11;
    }
    else
    {
      if ((v9 - 58) <= 0xFFFFFFF5)
        std::__throw_format_error[abi:ne180100]("The precision option does not contain a value or an argument index");
      v10 = std::__format::__parse_number[abi:ne180100]<char const*>((unint64_t)v8, a3);
      *(_DWORD *)(a1 + 8) = v12;
      *(_WORD *)(a1 + 2) &= ~0x8000u;
    }
    *a2 = v10;
  }
  return v5 == 46;
}

uint64_t std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>(uint64_t result, char **a2)
{
  _BYTE *v2;
  int v3;
  char v4;
  int v5;

  v2 = *a2;
  v3 = **a2;
  if (v3 <= 96)
  {
    v5 = v3 - 65;
    v4 = 12;
    switch(v5)
    {
      case 0:
        goto LABEL_19;
      case 1:
        v4 = 3;
        goto LABEL_19;
      case 4:
        v4 = 14;
        goto LABEL_19;
      case 5:
        v4 = 16;
        goto LABEL_19;
      case 6:
        v4 = 18;
LABEL_19:
        *(_BYTE *)(result + 1) = v4;
        *a2 = v2 + 1;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(**a2)
    {
      case 'a':
        v4 = 11;
        goto LABEL_19;
      case 'b':
        v4 = 2;
        goto LABEL_19;
      case 'c':
        v4 = 10;
        goto LABEL_19;
      case 'd':
        v4 = 5;
        goto LABEL_19;
      case 'e':
        v4 = 13;
        goto LABEL_19;
      case 'f':
        v4 = 15;
        goto LABEL_19;
      case 'g':
        v4 = 17;
        goto LABEL_19;
      case 'o':
        v4 = 4;
        goto LABEL_19;
      case 'p':
        v4 = 8;
        goto LABEL_19;
      case 's':
        v4 = 1;
        goto LABEL_19;
      case 'x':
        v4 = 6;
        goto LABEL_19;
      default:
        return result;
    }
  }
  return result;
}

uint64_t std::__unicode::__code_point_view<char>::__consume[abi:ne180100](unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v1 = *a1;
  v2 = **a1;
  v3 = __clz(v2 ^ 0xFF) - 24;
  if (v2 == 255)
    v4 = 8;
  else
    v4 = v3;
  switch(v4)
  {
    case 0:
      *a1 = v1 + 1;
      v5 = *v1;
      break;
    case 2:
      if (a1[1] - v1 < 2 || (v1[1] & 0xC0) != 0x80)
        goto LABEL_35;
      *a1 = v1 + 1;
      v6 = *v1;
      *a1 = v1 + 2;
      v7 = v1[1] & 0x3F | ((v6 & 0x1F) << 6);
      if (v7 >= 0x80)
        v5 = v7;
      else
        v5 = 2147549181;
      break;
    case 3:
      if (a1[1] - v1 < 3)
        goto LABEL_35;
      v8 = 1;
      do
        v9 = v1[v8] & 0xC0;
      while (v9 == 128 && (_DWORD)v8++ != 2);
      if (v9 != 128)
        goto LABEL_35;
      v5 = 2147549181;
      *a1 = v1 + 1;
      v11 = *v1 & 0xF;
      *a1 = v1 + 2;
      v12 = (v11 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      v13 = v12 & 0xFFFFFFC0 | v1[2] & 0x3F;
      if (v13 >= 0x800)
      {
        if ((v12 & 0xF800) == 0xD800)
          v5 = 2147549181;
        else
          v5 = v13;
      }
      break;
    case 4:
      if (a1[1] - v1 < 4)
        goto LABEL_35;
      v14 = 1;
      do
        v15 = v1[v14] & 0xC0;
      while (v15 == 128 && (_DWORD)v14++ != 3);
      if (v15 != 128)
        goto LABEL_35;
      v5 = 2147549181;
      *a1 = v1 + 1;
      v17 = *v1 & 7;
      *a1 = v1 + 2;
      v18 = (v17 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      v19 = v18 & 0xFFFFFFC0 | v1[2] & 0x3F;
      *a1 = v1 + 4;
      v20 = v1[3] & 0x3F | (v19 << 6);
      if (v20 >= 0x10000)
      {
        if (v20 >= 0x110000)
          v5 = 2147549181;
        else
          v5 = v20;
      }
      break;
    default:
LABEL_35:
      v5 = 2147549181;
      *a1 = v1 + 1;
      break;
  }
  return v5;
}

void std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100](uint64_t a1, int a2, int a3)
{
  if (a3 && a2 == 58 || a2 == 125 || a2 == 123)
    std::__throw_format_error[abi:ne180100]("The fill option contains an invalid value");
}

char *std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  char *v4;

  if (a1 == a2)
    std::__throw_format_error[abi:ne180100]("End of input while parsing an argument index");
  v4 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, a3);
  if (v4 == a2 || *v4 != 125)
    std::__throw_format_error[abi:ne180100]("The argument index is invalid");
  return v4 + 1;
}

void std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](const char *a1)
{
  std::string::size_type v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  const char *v7;
  std::string v8;
  std::string v9;
  __int128 v10;
  int64_t v11;

  std::string::basic_string[abi:ne180100]<0>(&v8, "The type option contains an invalid value for ");
  v2 = strlen(a1);
  v3 = std::string::append(&v8, a1, v2);
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v9, " formatting argument", 0x14uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11 = v5->__r_.__value_.__r.__words[2];
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0)
    v7 = (const char *)&v10;
  else
    v7 = (const char *)v10;
  std::__throw_format_error[abi:ne180100](v7);
}

void sub_249CF62A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__format_spec::__parser<char>::__validate[abi:ne180100](uint64_t result, char a2, const char *a3, int a4)
{
  unsigned int v4;
  int v5;
  const char *v6;

  if ((a2 & 1) == 0 && (*(_BYTE *)result & 0x18) != 0)
  {
    v6 = "sign";
    goto LABEL_23;
  }
  if ((a2 & 2) == 0 && (*(_BYTE *)result & 0x20) != 0)
  {
    v6 = "alternate form";
    goto LABEL_23;
  }
  if ((a2 & 4) == 0 && (*(_BYTE *)result & 7) == 4)
  {
    v6 = "zero-padding";
    goto LABEL_23;
  }
  if ((a2 & 8) == 0 && *(_DWORD *)(result + 8) != -1)
  {
    v6 = "precision";
    goto LABEL_23;
  }
  if ((a2 & 0x10) == 0 && (*(_BYTE *)result & 0x40) != 0)
  {
    v6 = "locale-specific form";
LABEL_23:
    std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](a3, v6);
  }
  v4 = *(unsigned __int8 *)(result + 1);
  if (*(_BYTE *)(result + 1))
  {
    if (v4 >= 0x20)
      std::__throw_format_error[abi:ne180100]("The type does not fit in the mask");
    v5 = 1 << v4;
  }
  else
  {
    v5 = 1;
  }
  if ((v5 & a4) == 0)
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a3);
  return result;
}

void std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](const char *a1, const char *a2)
{
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const char *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  __int128 v19;
  int64_t v20;

  std::string::basic_string[abi:ne180100]<0>(&v15, "The format specifier for ");
  v4 = strlen(a1);
  v5 = std::string::append(&v15, a1, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v16, " does not allow the ", 0x14uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = strlen(a2);
  v10 = std::string::append(&v17, a2, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v18, " option", 7uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20 = v12->__r_.__value_.__r.__words[2];
  v19 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0)
    v14 = (const char *)&v19;
  else
    v14 = (const char *)v19;
  std::__throw_format_error[abi:ne180100](v14);
}

void sub_249CF64C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(int a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  char *v9;
  const std::locale::facet *v11;
  uint64_t v12;
  char *locale;
  size_t v14;
  _QWORD *v15;
  std::locale v16;
  size_t v17;
  unsigned __int8 v18;

  if ((a3 & 0x40) != 0)
  {
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v16);
    v11 = std::locale::use_facet(&v16, MEMORY[0x24BEDB588]);
    std::locale::~locale(&v16);
    v12 = 56;
    if (a1)
      v12 = 48;
    (*(void (**)(std::locale *__return_ptr, const std::locale::facet *))((char *)&v11->~facet + v12))(&v16, v11);
    if ((v18 & 0x80u) == 0)
      locale = (char *)&v16;
    else
      locale = (char *)v16.__locale_;
    if ((v18 & 0x80u) == 0)
      v14 = v18;
    else
      v14 = v17;
    v15 = std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(locale, v14, *a2, a3, a4);
    if ((char)v18 < 0)
      operator delete(v16.__locale_);
    return v15;
  }
  else
  {
    if (a1)
      v8 = 4;
    else
      v8 = 5;
    if (a1)
      v9 = "true";
    else
      v9 = "false";
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v8, *a2, a3, a4, v8);
  }
}

void sub_249CF665C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, _QWORD *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  v7 = v6;
  std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  return (v5 << 8) | (v7 << 32) | v4 & 0x7F;
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_249CF6728(unsigned int a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6;
  uint64_t v7;

  return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v6, (uint64_t)&v7, 0, 0xAu);
}

std::locale *std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]@<X0>(uint64_t a1@<X0>, std::locale *a2@<X8>)
{
  std::locale *v3;
  std::locale v5;

  v3 = (std::locale *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 40))
  {
    MEMORY[0x24BD02C4C](&v5);
    std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(v3, &v5);
    std::locale::~locale(&v5);
  }
  return std::locale::locale(a2, v3);
}

void sub_249CF6888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  if (a4 <= 0)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
    return a3;
  }
  else
  {
    v10 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, __len, HIDWORD(a4), 1);
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, __len, a3, a4, a5, v10);
  }
}

std::locale *std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(std::locale *this, const std::locale *a2)
{
  if (LOBYTE(this[1].__locale_))
  {
    std::locale::operator=(this, a2);
  }
  else
  {
    std::locale::locale(this, a2);
    LOBYTE(this[1].__locale_) = 1;
  }
  return this;
}

uint64_t std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>(unsigned __int8 *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;

  result = 0;
  if (a2 && a3)
  {
    if ((char)*a1 < 0)
    {
      v8 = a1;
    }
    else
    {
      v7 = 0;
      v8 = &a1[a3 - 1];
      while (1)
      {
        if (a2 - 1 == v7)
          return a2;
        if (a3 - 1 == v7)
          break;
        v9 = (char)a1[++v7];
        if (v9 < 0)
        {
          a3 = a3 - v7 + 1;
          v8 = &a1[v7 - 1];
          return v8
               - a1
               + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
        }
      }
      if (((char)a1[a3] & 0x80000000) == 0)
        return a3;
      a3 = 1;
    }
    return v8
         - a1
         + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
  }
  return result;
}

_QWORD *std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >> 32 > a6)
    __asm { BR              X10 }
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
  return a3;
}

void sub_249CF6AB8()
{
  JUMPOUT(0x249CF6AC0);
}

_QWORD *std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(_QWORD *result, char *__src, size_t __len)
{
  size_t v3;
  _QWORD *v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  v3 = __len;
  v5 = result;
  v7 = result[1];
  v6 = result[2];
  if (v6 + __len >= v7)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD))result[3])(*result);
    v6 = 0;
    v5[2] = 0;
    v7 = v5[1];
  }
  if (v3 >= v7)
  {
    do
    {
      if (v5[1] >= v3)
        v8 = v3;
      else
        v8 = v5[1];
      if (v8)
        memmove((void *)(*v5 + v6), __src, v8);
      v5[2] = v8;
      __src += v8;
      v3 -= v8;
      result = (_QWORD *)((uint64_t (*)(_QWORD, size_t, _QWORD))v5[3])(*v5, v8, v5[4]);
      v6 = 0;
      v5[2] = 0;
    }
    while (v3);
  }
  else
  {
    if (v3)
    {
      result = memmove((void *)(*v5 + v6), __src, v3);
      v6 = v5[2];
    }
    v5[2] = v6 + v3;
  }
  return result;
}

uint64_t std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  char v17;

  v14 = a1;
  v15 = a2;
  v16 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100](&v14) & 0x7FFFFFFF;
  v17 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v16);
  if (a1 == a2)
    return 0;
  v8 = 0;
  do
  {
    v9 = v16;
    v10 = v14;
    if (v14 == v15)
      v17 = 15;
    else
      v10 = std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100]((uint64_t)&v14);
    v11 = std::__width_estimation_table::__estimated_width[abi:ne180100](v9);
    v12 = v8 + v11;
    if (!a4 && v12 > a3)
      break;
    if (v10 == a2)
    {
      v8 += v11;
      return v8;
    }
    v8 += v11;
  }
  while (v12 <= a3);
  return v8;
}

uint64_t std::__width_estimation_table::__estimated_width[abi:ne180100](unsigned int a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  if (a1 - 262142 < 0xFFFC1102)
    return 1;
  v2 = 108;
  v3 = (unsigned int *)&std::__width_estimation_table::__entries;
  do
  {
    v4 = v2 >> 1;
    v5 = &v3[v2 >> 1];
    v7 = *v5;
    v6 = v5 + 1;
    v2 += ~(v2 >> 1);
    if (((a1 << 14) | 0x3FFF) < v7)
      v2 = v4;
    else
      v3 = v6;
  }
  while (v2);
  v1 = 1;
  if (v3 != (unsigned int *)&std::__width_estimation_table::__entries)
  {
    if ((*(v3 - 1) & 0x3FFF) + (*(v3 - 1) >> 14) < a1)
      return 1;
    else
      return 2;
  }
  return v1;
}

uint64_t std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](unsigned int a1)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v1 = 1496;
  v2 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
  do
  {
    v3 = v1 >> 1;
    v4 = &v2[v1 >> 1];
    v6 = *v4;
    v5 = v4 + 1;
    v1 += ~(v1 >> 1);
    if (((a1 << 11) | 0x7FF) < v6)
      v1 = v3;
    else
      v2 = v5;
  }
  while (v1);
  v7 = 16;
  if (v2 != (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
  {
    v8 = *(v2 - 1);
    v9 = ((v8 >> 4) & 0x7F) + (v8 >> 11);
    v10 = v8 & 0xF;
    if (v9 >= a1)
      return v10;
    else
      return 16;
  }
  return v7;
}

unsigned __int8 *std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100](uint64_t a1)
{
  int v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  v2 = 0;
  v8 = 1;
  while (1)
  {
    v3 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      break;
    v4 = *(unsigned __int8 *)(a1 + 20);
    v5 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100]((unsigned __int8 **)a1) & 0x7FFFFFFF;
    *(_DWORD *)(a1 + 16) = v5;
    v6 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v5);
    *(_BYTE *)(a1 + 20) = v6;
    v2 |= v4 == 3;
    if (std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](&v8, v2 & 1, v4, v6))
      return v3;
  }
  *(_BYTE *)(a1 + 20) = 15;
  return v3;
}

BOOL std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](_BYTE *a1, int a2, unsigned int a3, unsigned int a4)
{
  _BOOL8 v4;
  BOOL v6;

  if (!a3 && a4 == 5)
    return 0;
  if (a3 > 5 || (v4 = 1, ((1 << a3) & 0x23) == 0))
  {
    if (a4 > 5 || (v4 = 1, ((1 << a4) & 0x23) == 0))
    {
      if (a3 == 12 || a3 == 6)
      {
        if ((a4 - 11) >= 2u)
          goto LABEL_16;
      }
      else if (a3 != 4 || a4 - 4 >= 9 || ((0x10Du >> (a4 - 4)) & 1) == 0)
      {
LABEL_16:
        v6 = a3 == 11 || a3 == 7;
        if (v6 && a4 == 11 || a4 <= 0xD && ((1 << a4) & 0x2404) != 0 || a3 == 8 || a3 == 13 && a2 && a4 == 3)
          return 0;
        v4 = 1;
        if (a3 == 9 && a4 == 9)
        {
          v4 = *a1 == 0;
          *a1 ^= 1u;
        }
        return v4;
      }
      return 0;
    }
  }
  return v4;
}

_QWORD *std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(_QWORD *a1, size_t __len, int a3)
{
  size_t v3;
  unsigned int v5;
  size_t v6;
  int __src;

  v3 = __len;
  v5 = __clz(~(_BYTE)a3) - 24;
  __src = a3;
  if ((_BYTE)a3 == 0xFF)
    v6 = 8;
  else
    v6 = v5;
  if ((_DWORD)v6)
  {
    if (__len)
    {
      do
      {
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, (char *)&__src, v6);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    std::__format::__output_buffer<char>::__fill[abi:ne180100](a1, __len, (char)a3);
  }
  return a1;
}

_QWORD *std::__format::__output_buffer<char>::__fill[abi:ne180100](_QWORD *result, size_t __len, int __c)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;

  v5 = (uint64_t)result;
  v7 = result[1];
  v6 = result[2];
  if (v6 + __len >= v7)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD))result[3])(*result);
    v6 = 0;
    *(_QWORD *)(v5 + 16) = 0;
    v7 = *(_QWORD *)(v5 + 8);
  }
  if (v7 <= __len)
  {
    do
    {
      v8 = *(_QWORD *)v5;
      if (*(_QWORD *)(v5 + 8) >= __len)
        v9 = __len;
      else
        v9 = *(_QWORD *)(v5 + 8);
      if (v9)
      {
        memset((void *)(v8 + v6), __c, v9);
        v8 = *(_QWORD *)v5;
      }
      *(_QWORD *)(v5 + 16) = v9;
      __len -= v9;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, size_t, _QWORD))(v5 + 24))(v8, v9, *(_QWORD *)(v5 + 32));
      v6 = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    while (__len);
  }
  else
  {
    if (__len)
    {
      result = memset((void *)(*(_QWORD *)v5 + v6), __c, __len);
      v6 = *(_QWORD *)(v5 + 16);
    }
    *(_QWORD *)(v5 + 16) = v6 + __len;
  }
  return result;
}

void std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  _QWORD v12[2];
  char v13;
  _BYTE v14[31];

  *(_QWORD *)&v14[23] = *MEMORY[0x24BDAC8D0];
  v3 = *(_WORD *)(a1 + 2);
  v4 = *(_DWORD *)(a1 + 4);
  if ((v3 & 0x4000) != 0)
  {
    v5 = v4;
    v6 = a2[1];
    if (v6 <= v4)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      v9 = a2[2] + 32 * v4;
      v2 = *(_QWORD *)v9;
      v5 = *(_QWORD *)(v9 + 8);
      LOBYTE(v8) = *(_BYTE *)(v9 + 16);
      v11[0] = *(_QWORD *)(v9 + 17);
      *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)(v9 + 24);
    }
    else
    {
      v7 = a2[2];
      v8 = (a2[3] >> (5 * v4)) & 0x1FLL;
      v2 = *(_QWORD *)(v7 + 16 * v4);
      v5 = *(_QWORD *)(v7 + 16 * v4 + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    v13 = v8;
    *(_QWORD *)v14 = v11[0];
    *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v11 + 7);
    std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, (uint64_t)v12);
  }
}

void std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  _QWORD v12[2];
  char v13;
  _BYTE v14[31];

  *(_QWORD *)&v14[23] = *MEMORY[0x24BDAC8D0];
  v3 = *(__int16 *)(a1 + 2);
  v4 = *(_DWORD *)(a1 + 8);
  if (v3 < 0)
  {
    v5 = v4;
    v6 = a2[1];
    if (v6 <= v4)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      v9 = a2[2] + 32 * v4;
      v2 = *(_QWORD *)v9;
      v5 = *(_QWORD *)(v9 + 8);
      LOBYTE(v8) = *(_BYTE *)(v9 + 16);
      v11[0] = *(_QWORD *)(v9 + 17);
      *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)(v9 + 24);
    }
    else
    {
      v7 = a2[2];
      v8 = (a2[3] >> (5 * v4)) & 0x1FLL;
      v2 = *(_QWORD *)(v7 + 16 * v4);
      v5 = *(_QWORD *)(v7 + 16 * v4 + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    v13 = v8;
    *(_QWORD *)v14 = v11[0];
    *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v11 + 7);
    std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, (uint64_t)v12);
  }
}

void std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_249CF7274(uint64_t a1, unsigned int *a2)
{
  uint64_t result;

  result = *a2;
  if ((result & 0x80000000) != 0)
    std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
  return result;
}

void sub_249CF72B8()
{
  std::__throw_format_error[abi:ne180100]("Replacement argument isn't a standard signed or unsigned integer type");
}

void sub_249CF72C4()
{
  std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
}

unint64_t std::invoke[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;

  result = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
    std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
  if (result >> 31)
    std::__throw_format_error[abi:ne180100]("The value of the argument index exceeds its maximum value");
  return result;
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, _BYTE *a8, unsigned int a9)
{
  char *v9;
  char v13;
  char v14;
  int v15;
  _WORD *v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  const std::locale::facet *v21;
  char *locale;
  _QWORD *v23;
  std::string::value_type *v24;
  char *v25;
  std::string::value_type v26;
  uint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  BOOL v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  std::string __p;
  std::locale v45;
  uint64_t v46;
  unsigned __int8 v47;

  v9 = a6;
  v13 = a3;
  if ((a5 & 1) != 0)
  {
    v14 = 45;
LABEL_7:
    *a6 = v14;
    v16 = a6 + 1;
    goto LABEL_8;
  }
  v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    v14 = 43;
    goto LABEL_7;
  }
  v16 = a6;
  if (v15 == 3)
  {
    v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v17 = *a8;
      if (*a8)
      {
        v18 = a8 + 1;
        do
        {
          *(_BYTE *)v16 = v17;
          v16 = (_WORD *)((char *)v16 + 1);
          v19 = *v18++;
          v17 = v19;
        }
        while (v19);
      }
    }
  }
  v20 = std::__to_chars_integral[abi:ne180100]<unsigned int>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  v21 = std::locale::use_facet(&v45, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47)
      goto LABEL_44;
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9)
        v37 = (_DWORD)v16 - (_DWORD)v9;
      else
        v37 = HIDWORD(a3);
      v35 = (HIDWORD(a3) - v37);
      v38 = 48;
      v9 = (char *)v16;
    }
    else
    {
      v38 = BYTE4(a4);
      v36 = a3;
    }
    v39 = *a2;
    v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, (uint64_t)v39, v40, v41, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
  }
  v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0)
    v24 = (std::string::value_type *)&v45;
  else
    v24 = (std::string::value_type *)v45.__locale_;
  if ((v47 & 0x80u) == 0)
    v25 = (char *)&v45 + v47;
  else
    v25 = (char *)v45.__locale_ + v46;
  v26 = *v24;
  v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        v26 = *v28;
        v24 = v28;
      }
      else
      {
        v29 = v24 + 1;
        v30 = v24 + 1;
        do
        {
          v31 = *v30++;
          v26 = v31;
          if (v31)
            v32 = 1;
          else
            v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
        v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v45.__locale_);
  return v34;
}

void sub_249CF75EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(_QWORD *a1, char *__src, char *a3, int a4, uint64_t *a5, char a6, unint64_t a7, unint64_t a8)
{
  __int16 v8;
  char *v11;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;

  v8 = a7;
  v11 = a3;
  v13 = HIDWORD(a7);
  LODWORD(v14) = *((unsigned __int8 *)a5 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = a5[1];
  v15 = a4 - (_DWORD)__src - 1 + v14;
  v16 = a7 & 7;
  v29 = HIDWORD(a8);
  if ((_DWORD)v16 == 4)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, __src, a3 - __src);
    if ((int)v13 > v15)
      std::__format::__output_buffer<char>::__fill[abi:ne180100](a1, (int)v13 - v15, 48);
  }
  else
  {
    if (SHIDWORD(a7) > v15)
      __asm { BR              X10 }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, __src, a3 - __src);
  }
  v17 = *((unsigned __int8 *)a5 + 23);
  v18 = (char)v17;
  v19 = (char *)a5 + v17;
  if (v18 >= 0)
    v20 = v19;
  else
    v20 = (char *)(*a5 + a5[1]);
  if (v18 >= 0)
    v21 = a5;
  else
    v21 = (uint64_t *)*a5;
  v22 = (char *)v21 + 1;
  while (1)
  {
    v24 = v20 - 1;
    v23 = *(v20 - 1);
    if ((v8 & 0xFF00) == 0x700)
    {
      v25 = &v11[v23];
      std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)a1, v11, &v11[v23], (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
      v11 = v25;
    }
    else
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, v11, v23);
      v11 += *v24;
    }
    if (v20 == v22)
      break;
    v26 = *a1;
    v27 = a1[2];
    a1[2] = v27 + 1;
    *(_BYTE *)(v26 + v27) = a6;
    --v20;
    if (a1[2] == a1[1])
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      a1[2] = 0;
      v20 = v24;
    }
  }
  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, v29);
}

uint64_t std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  if (a4 >> 32 > a2 - a1)
    __asm { BR              X10 }
  std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>(a3, a1, a2, a6);
  return a3;
}

void sub_249CF78B8()
{
  JUMPOUT(0x249CF78C0);
}

uint64_t std::__formatter::__hex_to_upper[abi:ne180100](int a1)
{
  if ((a1 - 97) >= 6)
    return (char)a1;
  else
    return (char)(a1 - 32);
}

char *std::__to_chars_integral[abi:ne180100]<unsigned int>(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  char *v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  char *v12;
  unsigned int v13;
  BOOL v14;

  v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5)
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    if (v5 == 3)
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    if (v5 != 7)
    {
      v10 = a2 - (_QWORD)a1;
      v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned int>(a3, a4);
      if (v10 < v11)
        return (char *)a2;
      v4 = (char *)a1 + v11;
      v12 = v4 - 1;
      v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[v13 % a4];
        v14 = v13 >= a4;
        v13 /= a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 9)
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  v7 = (1233 * (32 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= (((__PAIR64__(v7, a3) - std::__itoa::__pow10_32[v7]) >> 32) + 1))
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned int>(unsigned int a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if (a1 < a2)
    return 1;
  v3 = a1;
  v4 = a2 * a2;
  v5 = v4 * v4;
  result = 4;
  while (1)
  {
    if (v3 < v4)
      return (result - 2);
    if (v3 < a2 * a2 * a2)
      break;
    if (v3 < v5)
      return result;
    v3 /= v5;
    result = (result + 4);
    if (v3 < a2)
      return (result - 3);
  }
  return (result - 1);
}

_WORD *std::__itoa::__base_10_u32[abi:ne180100](_WORD *a1, unsigned int a2)
{
  unsigned int v3;
  unint64_t v4;
  unsigned __int16 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 v10;

  if (a2 >= 0xF4240)
  {
    if (a2 >= 0x5F5E100)
    {
      if (a2 > 0x3B9AC9FF)
      {
        return std::__itoa::__append10[abi:ne180100]<unsigned int>(a1, a2);
      }
      else
      {
        *(_BYTE *)a1 = a2 / 0x5F5E100 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        v7 = a2 % 0x5F5E100 % 0xF4240;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v7 / 0x2710uLL];
        v7 %= 0x2710u;
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v7 / 0x64u];
        *(_WORD *)((char *)a1 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v7 % 0x64u];
        return (_WORD *)((char *)a1 + 9);
      }
    }
    else
    {
      v3 = a2 / 0xF4240;
      if (a2 > 0x98967F)
      {
        *a1 = std::__itoa::__digits_base_10[v3];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        v9 = a2 % 0xF4240 % 0x2710;
        a1[2] = std::__itoa::__digits_base_10[(unsigned __int16)v9 / 0x64u];
        a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v9 % 0x64u];
        return a1 + 4;
      }
      else
      {
        *(_BYTE *)a1 = v3 + 48;
        v4 = (429497 * (unint64_t)(a2 % 0xF4240)) >> 32;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[v4];
        v5 = a2 % 0xF4240 - 10000 * v4;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v5 / 0x64u];
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v5 % 0x64u];
        return (_WORD *)((char *)a1 + 7);
      }
    }
  }
  else if (a2 >> 4 > 0x270)
  {
    v6 = a2 / 0x2710;
    if (a2 >> 5 > 0xC34)
    {
      *a1 = std::__itoa::__digits_base_10[v6];
      v10 = a2 % 0x2710;
      a1[1] = std::__itoa::__digits_base_10[v10 / 0x64u];
      a1[2] = std::__itoa::__digits_base_10[v10 % 0x64u];
      return a1 + 3;
    }
    else
    {
      *(_BYTE *)a1 = v6 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(5243 * (a2 % 0x2710)) >> 19];
      *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)(a2 % 0x2710
                                                                                  - 100
                                                                                  * ((unsigned __int16)((5243 * (a2 % 0x2710)) >> 16) >> 3))];
      return (_WORD *)((char *)a1 + 5);
    }
  }
  else if (a2 > 0x63)
  {
    v8 = (unsigned __int16)a2 / 0x64u;
    if (a2 > 0x3E7)
    {
      *a1 = std::__itoa::__digits_base_10[v8];
      a1[1] = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return a1 + 2;
    }
    else
    {
      *(_BYTE *)a1 = v8 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return (_WORD *)((char *)a1 + 3);
    }
  }
  else if (a2 > 9)
  {
    *a1 = std::__itoa::__digits_base_10[a2];
    return a1 + 1;
  }
  else
  {
    *(_BYTE *)a1 = a2 + 48;
    return (_WORD *)((char *)a1 + 1);
  }
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned int>(_WORD *a1, unsigned int a2)
{
  unsigned int v2;

  *a1 = std::__itoa::__digits_base_10[a2 / 0x5F5E100uLL];
  a1[1] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240uLL];
  v2 = a2 % 0x5F5E100 % 0xF4240;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  _BYTE *v8;

  v3 = 32 - __clz(a3 | 1);
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x11)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  v8 = (_BYTE *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  BOOL v8;

  v3 = (86 * (34 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x41)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  BOOL v8;

  v3 = (35 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x101)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

uint64_t std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>(uint64_t result, char *a2, char *a3, uint64_t (*a4)(_QWORD))
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;

  v6 = a2;
  v7 = result;
  v8 = a3 - a2;
  v10 = *(_QWORD *)(result + 8);
  v9 = *(_QWORD *)(result + 16);
  if (v9 + v8 >= v10)
  {
    result = (*(uint64_t (**)(_QWORD))(result + 24))(*(_QWORD *)result);
    v9 = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v10 = *(_QWORD *)(v7 + 8);
  }
  if (v8 >= v10)
  {
    do
    {
      v13 = *(_QWORD *)v7;
      if (*(_QWORD *)(v7 + 8) >= v8)
        v14 = v8;
      else
        v14 = *(_QWORD *)(v7 + 8);
      if (v14)
      {
        v15 = (_BYTE *)(v13 + v9);
        v16 = v14;
        v17 = v6;
        do
        {
          v18 = *v17++;
          *v15++ = a4(v18);
          --v16;
        }
        while (v16);
        v13 = *(_QWORD *)v7;
      }
      v6 += v14;
      *(_QWORD *)(v7 + 16) = v14;
      v8 -= v14;
      result = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(v7 + 24))(v13, v14, *(_QWORD *)(v7 + 32));
      v9 = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    while (v8);
  }
  else
  {
    if (v6 != a3)
    {
      v11 = (_BYTE *)(*(_QWORD *)v7 + v9);
      do
      {
        v12 = *v6++;
        result = a4(v12);
        *v11++ = result;
      }
      while (v6 != a3);
      v9 = *(_QWORD *)(v7 + 16);
    }
    *(_QWORD *)(v7 + 16) = v9 + v8;
  }
  return result;
}

void std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unsigned __int8 a2, _QWORD *a3)
{
  int v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int8 __src;

  v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 == 10 || v5 == 0)
  {
    v7 = (_QWORD *)*a3;
    v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    __src = a2;
    std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((char *)&__src, 1uLL, v7, v8, v9, 1);
  }
  else
  {
    v10 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v10);
  }
}

uint64_t std::__format_spec::__process_parsed_char[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  _BYTE *v6;

  v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    v3 = v2 > 0x13;
    v4 = (1 << v2) & 0x80401;
    if (v3 || v4 == 0)
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    v6 = (_BYTE *)result;
    result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v6 & 7) == 0)
      *v6 = *v6 & 0xF8 | 1;
  }
  return result;
}

void std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
  {
    std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  }
  else
  {
    if (a2 >= 0)
      v7 = a2;
    else
      v7 = -a2;
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, (uint64_t)a3, v6);
  }
}

uint64_t std::__format_spec::__process_parsed_integer[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  int v2;
  _BYTE *v4;

  v2 = *(unsigned __int8 *)(result + 1);
  if ((v2 - 2) >= 6 && v2 != 0)
  {
    if (v2 != 10)
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    v4 = (_BYTE *)result;
    result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v4 & 7) == 0)
      *v4 = *v4 & 0xF8 | 1;
  }
  return result;
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(int a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 != (char)a1)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
  {
    std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  }
  else
  {
    if (a2 >= 0)
      v7 = a2;
    else
      v7 = -a2;
    std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, (uint64_t)a3, v6);
  }
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 != (char)a1)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_249CF8468(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6;
  _BYTE v7[6];

  return std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v6, (uint64_t)v7, 0, 10);
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, _BYTE *a8, signed int a9)
{
  char *v9;
  char v13;
  char v14;
  int v15;
  _WORD *v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  const std::locale::facet *v21;
  char *locale;
  _QWORD *v23;
  std::string::value_type *v24;
  char *v25;
  std::string::value_type v26;
  uint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  BOOL v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  std::string __p;
  std::locale v45;
  uint64_t v46;
  unsigned __int8 v47;

  v9 = a6;
  v13 = a3;
  if ((a5 & 1) != 0)
  {
    v14 = 45;
LABEL_7:
    *a6 = v14;
    v16 = a6 + 1;
    goto LABEL_8;
  }
  v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    v14 = 43;
    goto LABEL_7;
  }
  v16 = a6;
  if (v15 == 3)
  {
    v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v17 = *a8;
      if (*a8)
      {
        v18 = a8 + 1;
        do
        {
          *(_BYTE *)v16 = v17;
          v16 = (_WORD *)((char *)v16 + 1);
          v19 = *v18++;
          v17 = v19;
        }
        while (v19);
      }
    }
  }
  v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  v21 = std::locale::use_facet(&v45, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47)
      goto LABEL_44;
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9)
        v37 = (_DWORD)v16 - (_DWORD)v9;
      else
        v37 = HIDWORD(a3);
      v35 = (HIDWORD(a3) - v37);
      v38 = 48;
      v9 = (char *)v16;
    }
    else
    {
      v38 = BYTE4(a4);
      v36 = a3;
    }
    v39 = *a2;
    v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, (uint64_t)v39, v40, v41, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
  }
  v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0)
    v24 = (std::string::value_type *)&v45;
  else
    v24 = (std::string::value_type *)v45.__locale_;
  if ((v47 & 0x80u) == 0)
    v25 = (char *)&v45 + v47;
  else
    v25 = (char *)v45.__locale_ + v46;
  v26 = *v24;
  v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        v26 = *v28;
        v24 = v28;
      }
      else
      {
        v29 = v24 + 1;
        v30 = v24 + 1;
        do
        {
          v31 = *v30++;
          v26 = v31;
          if (v31)
            v32 = 1;
          else
            v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
        v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v45.__locale_);
  return v34;
}

void sub_249CF8854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

char *std::__to_chars_integral[abi:ne180100]<unsigned long long>(_WORD *a1, uint64_t a2, unint64_t a3, signed int a4)
{
  char *v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  char *v12;
  unint64_t v13;
  BOOL v14;

  v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5)
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    if (v5 == 3)
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    if (v5 != 7)
    {
      v10 = a2 - (_QWORD)a1;
      v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(a3, a4);
      if (v10 < v11)
        return (char *)a2;
      v4 = (char *)a1 + v11;
      v12 = v4 - 1;
      v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[(v13 % a4)];
        v14 = v13 >= a4;
        v13 /= (unint64_t)a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 19)
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  v7 = (1233 * (64 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= v7 - (std::__itoa::__pow10_64[v7] > a3) + 1)
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(unint64_t a1, unsigned int a2)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a2 > a1)
    return 1;
  v3 = a1;
  v4 = a2 * a2;
  v5 = (v4 * v4);
  result = 4;
  while (1)
  {
    if (v3 < v4)
      return (result - 2);
    if (v3 < v4 * a2)
      break;
    if (v3 < v5)
      return result;
    v3 /= v5;
    result = (result + 4);
    if (v3 < a2)
      return (result - 3);
  }
  return (result - 1);
}

_WORD *std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](_WORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2;
  if (!HIDWORD(a2))
    return std::__itoa::__base_10_u32[abi:ne180100](a1, a2);
  if (a2 > 0x2540BE3FFLL)
  {
    a1 = std::__itoa::__base_10_u32[abi:ne180100](a1, a2 / 0x2540BE400);
    v2 %= 0x2540BE400uLL;
  }
  return std::__itoa::__append10[abi:ne180100]<unsigned long long>(a1, v2);
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned long long>(_WORD *a1, unint64_t a2)
{
  unsigned int v2;

  *a1 = std::__itoa::__digits_base_10[(a2 / 0x5F5E100)];
  v2 = a2 % 0x5F5E100;
  a1[1] = std::__itoa::__digits_base_10[v2 / 0xF4240uLL];
  v2 %= 0xF4240u;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _BYTE *v8;

  v3 = 64 - __clz(a3 | 1);
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x11)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  v8 = (_BYTE *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  BOOL v8;

  v3 = (86 * (66 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x41)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  BOOL v8;

  v3 = 67 - __clz(a3 | 1);
  if (a2 - a1 < (uint64_t)(v3 >> 2))
    return a2;
  v4 = a1 + (v3 >> 2);
  if (a3 < 0x101)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + (v3 >> 2);
    do
    {
      v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

void std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int128 v9;

  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
  {
    std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, (_QWORD *)*a4, v8, v7);
  }
  else
  {
    v9 = __PAIR128__(a3 ^ (unint64_t)(a3 >> 63), a2 ^ (a3 >> 63)) - __PAIR128__(a3 >> 63, a3 >> 63);
    std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v9, *((uint64_t *)&v9 + 1), (uint64_t)a4, v8);
  }
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  char __src;

  if (__PAIR128__(-1, -257) >= __PAIR128__((unint64_t)(a1 >= 0x80) + a2 - 1, a1 - 128))
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_249CF8E70(unint64_t a1, unint64_t a2, _QWORD **a3, unint64_t a4, unint64_t a5, char a6)
{
  char v7;
  _BYTE v8[3];

  return std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, a6, &v7, (uint64_t)v8, 0, 10);
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, _QWORD **a3, unint64_t a4, unint64_t a5, char a6, char *a7, uint64_t a8, _BYTE *a9, signed int a10)
{
  char *v10;
  char v14;
  char v15;
  int v16;
  char *v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  char *v21;
  const std::locale::facet *v22;
  char *locale;
  _QWORD *v24;
  std::string::value_type *v25;
  char *v26;
  std::string::value_type v27;
  uint64_t v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  std::string::value_type *v31;
  int v32;
  BOOL v33;
  char v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 v37;
  int v38;
  unsigned __int8 v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  std::string __p;
  std::locale v46;
  uint64_t v47;
  unsigned __int8 v48;

  v10 = a7;
  v14 = a4;
  if ((a6 & 1) != 0)
  {
    v15 = 45;
LABEL_7:
    *a7 = v15;
    v17 = a7 + 1;
    goto LABEL_8;
  }
  v16 = (a4 >> 3) & 3;
  if (v16 == 2)
  {
    v15 = 43;
    goto LABEL_7;
  }
  v17 = a7;
  if (v16 == 3)
  {
    v15 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a4 & 0x20) != 0)
  {
    if (a9)
    {
      v18 = *a9;
      if (*a9)
      {
        v19 = a9 + 1;
        do
        {
          *v17++ = v18;
          v20 = *v19++;
          v18 = v20;
        }
        while (v20);
      }
    }
  }
  v21 = (char *)std::__to_chars_integral[abi:ne180100]<unsigned __int128>(v17, a8, a1, a2, a10);
  if ((v14 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a3, &v46);
  v22 = std::locale::use_facet(&v46, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v46);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v22->__vftable[1].__on_zero_shared)(&v46, v22);
  if ((char)v48 < 0)
  {
    locale = (char *)v46.__locale_;
    if (!v47)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v48)
      goto LABEL_44;
    locale = (char *)&v46;
  }
  if (v21 - v17 <= *locale)
  {
    if ((v48 & 0x80) != 0)
    {
      locale = (char *)v46.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v36 = HIDWORD(a4);
    if ((v14 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a3, v10, v17 - v10);
      v37 = a4 & 0xF8 | 3;
      if (SHIDWORD(a4) >= (int)v17 - (int)v10)
        v38 = (_DWORD)v17 - (_DWORD)v10;
      else
        v38 = HIDWORD(a4);
      v36 = (HIDWORD(a4) - v38);
      v39 = 48;
      v10 = v17;
    }
    else
    {
      v39 = BYTE4(a5);
      v37 = a4;
    }
    v40 = *a3;
    v41 = a4 & 0xFFFFFF00 | (v36 << 32) | v37;
    v42 = a5 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v39 << 32);
    if ((a4 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21, (uint64_t)v40, v41, v42, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21 - v10, v40, v41, v42, v21 - v10);
  }
  v24 = *a3;
  memset(&__p, 0, sizeof(__p));
  if ((v48 & 0x80u) == 0)
    v25 = (std::string::value_type *)&v46;
  else
    v25 = (std::string::value_type *)v46.__locale_;
  if ((v48 & 0x80u) == 0)
    v26 = (char *)&v46 + v48;
  else
    v26 = (char *)v46.__locale_ + v47;
  v27 = *v25;
  v28 = v21 - v17 - *v25;
  if (v28 >= 1)
  {
    v29 = v26 - 1;
    do
    {
      std::string::push_back(&__p, v27);
      if (v25 == v29)
      {
        v27 = *v29;
        v25 = v29;
      }
      else
      {
        v30 = v25 + 1;
        v31 = v25 + 1;
        do
        {
          v32 = *v31++;
          v27 = v32;
          if (v32)
            v33 = 1;
          else
            v33 = v30 == v29;
          v30 = v31;
        }
        while (!v33);
        v25 = v31 - 1;
      }
      v28 -= v27;
    }
    while (v28 > 0);
  }
  std::string::push_back(&__p, v27 + v28);
  v34 = ((uint64_t (*)(const std::locale::facet *))v22->__vftable[1].~facet_0)(v22);
  v35 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v24, v10, v17, (int)v21, (uint64_t *)&__p, v34, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v46.__locale_);
  return v35;
}

void sub_249CF9268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

_WORD *std::__to_chars_integral[abi:ne180100]<unsigned __int128>(_BYTE *a1, uint64_t a2, unint64_t a3, unint64_t a4, signed int a5)
{
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;

  v5 = a4;
  v6 = a3;
  v7 = (_BYTE *)a2;
  HIDWORD(v9) = a5;
  LODWORD(v9) = a5 - 2;
  v8 = v9 >> 1;
  if (v8 != 4)
  {
    if (!v8)
      return (_WORD *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    if (v8 == 3)
      return (_WORD *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    if (v8 != 7)
    {
      v18 = a2 - (_QWORD)a1;
      v19 = std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(a3, a4, a5);
      if (v18 >= v19)
      {
        v7 = &a1[v19];
        v20 = v7 - 1;
        do
        {
          v21 = __udivti3();
          v22 = __PAIR128__(v5, v6) >= a5;
          *v20-- = a0123456789abcd[(v6 - v21 * a5)];
          v6 = v21;
          v5 = v23;
        }
        while (v22);
      }
      return v7;
    }
    return (_WORD *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
  }
  v10 = a2 - (_QWORD)a1;
  if (a4)
  {
    if (v10 > 38)
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
    v11 = (1233 * (128 - __clz(a4))) >> 12;
    if (v10 >= v11 - (__PAIR128__(a4, a3) < std::__itoa::__pow10_128[v11]) + 1)
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
  }
  else
  {
    if (v10 > 19)
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
    v13 = (1233 * (64 - __clz(a3 | 1))) >> 12;
    if (v10 >= v13 - (std::__itoa::__pow10_64[v13] > a3) + 1)
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  }
  return v7;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;

  if (__PAIR128__(a2, a1) < a3)
    return 1;
  v5 = a3 * a3;
  v6 = a3 * a3 * a3;
  v3 = 4;
  while (1)
  {
    if (__PAIR128__(a2, a1) < v5)
      return (v3 - 2);
    if (__PAIR128__(a2, a1) < v6)
      break;
    if (__PAIR128__(a2, a1) < v5 * v5)
      return v3;
    a1 = __udivti3();
    v3 = (v3 + 4);
    if (__PAIR128__(a2, a1) < a3)
      return (v3 - 3);
  }
  return (v3 - 1);
}

_WORD *std::__itoa::__base_10_u128[abi:ne180100](_BYTE *a1, unint64_t a2, unint64_t a3)
{
  _WORD *v3;
  unint64_t v4;
  unint64_t v5;
  _WORD *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _WORD *v10;
  _WORD *v11;
  unint64_t v12;
  unsigned int v13;

  v3 = a1;
  if (__PAIR128__(a3, a2) >= __PAIR128__(0x4B3B4CA85A86C47ALL, 0x98A224000000000))
  {
    *a1 = __udivti3() | 0x30;
    v7 = __udivti3();
    *((_BYTE *)v3 + 1) = v7 / 0x5F5E100 + 48;
    v3[1] = std::__itoa::__digits_base_10[v7 % 0x5F5E100 / 0xF4240];
    v8 = v7 % 0x5F5E100 % 0xF4240;
    v3[2] = std::__itoa::__digits_base_10[v8 / 0x2710uLL];
    v8 %= 0x2710u;
    v3[3] = std::__itoa::__digits_base_10[(unsigned __int16)v8 / 0x64u];
    v3[4] = std::__itoa::__digits_base_10[(unsigned __int16)v8 % 0x64u];
    v9 = __udivti3();
    v10 = v3 + 5;
LABEL_8:
    v6 = std::__itoa::__append10[abi:ne180100]<unsigned long long>(v10, v9);
    goto LABEL_9;
  }
  v4 = __udivti3();
  v5 = v4;
  if (HIDWORD(v4))
  {
    if (v4 > 0x2540BE3FFLL)
    {
      v3 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4 / 0x2540BE400);
      v5 %= 0x2540BE400uLL;
    }
    v10 = v3;
    v9 = v5;
    goto LABEL_8;
  }
  v6 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4);
LABEL_9:
  v11 = v6;
  v12 = __umodti3();
  *(_BYTE *)v11 = v12 / 0x2540BE400 / 0x5F5E100 + 48;
  v13 = v12 / 0x2540BE400 % 0x5F5E100;
  *(_WORD *)((char *)v11 + 1) = std::__itoa::__digits_base_10[v13 / 0xF4240];
  v13 %= 0xF4240u;
  *(_WORD *)((char *)v11 + 3) = std::__itoa::__digits_base_10[v13 / 0x2710uLL];
  v13 %= 0x2710u;
  *(_WORD *)((char *)v11 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v13 / 0x64u];
  *(_WORD *)((char *)v11 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v13 % 0x64u];
  return std::__itoa::__append10[abi:ne180100]<unsigned long long>((_WORD *)((char *)v11 + 9), v12 % 0x2540BE400);
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  BOOL v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  __int128 v15;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = 128 - v4;
  if (a2 - a1 < v6)
    return a2;
  v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x11)
  {
    v9 = a3;
    v12 = a4;
    v8 = v7;
  }
  else
  {
    v8 = a1 + v6;
    do
    {
      *((_QWORD *)&v10 + 1) = a4;
      *(_QWORD *)&v10 = a3;
      v9 = v10 >> 4;
      v11 = a3 <= 0x10F;
      v12 = a4 >> 4;
      *(_DWORD *)(v8 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v8 -= 4;
      a3 = v9;
      a4 >>= 4;
    }
    while (!v11);
  }
  v13 = (_BYTE *)(v8 - 1);
  do
  {
    v14 = v9 & 1;
    v11 = v9 <= 1;
    *((_QWORD *)&v15 + 1) = v12;
    *(_QWORD *)&v15 = v9;
    v9 = v15 >> 1;
    v12 >>= 1;
    *v13-- = a01[v14];
  }
  while (!v11);
  return v7;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  _BYTE *v11;
  unint64_t v12;
  BOOL v13;
  __int128 v14;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = (-126 - v4) / 3u;
  if (a2 - a1 < v6)
    return a2;
  v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x41)
  {
    v9 = a3;
    v8 = v7;
  }
  else
  {
    v8 = a1 + v6;
    do
    {
      *((_QWORD *)&v10 + 1) = a4;
      *(_QWORD *)&v10 = a3;
      v9 = v10 >> 6;
      a4 >>= 6;
      *(_WORD *)(v8 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x40);
  }
  v11 = (_BYTE *)(v8 - 1);
  do
  {
    v12 = v9 & 7;
    v13 = v9 <= 7;
    *((_QWORD *)&v14 + 1) = a4;
    *(_QWORD *)&v14 = v9;
    v9 = v14 >> 3;
    a4 >>= 3;
    *v11-- = a01234567[v12];
  }
  while (!v13);
  return v7;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  _BYTE *v11;
  unint64_t v12;
  BOOL v13;
  __int128 v14;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = 131 - v4;
  if (a2 - a1 < (uint64_t)(v6 >> 2))
    return a2;
  v7 = a1 + (v6 >> 2);
  if (__PAIR128__(a4, a3) < 0x101)
  {
    v9 = a3;
    v8 = v7;
  }
  else
  {
    v8 = a1 + (v6 >> 2);
    do
    {
      *((_QWORD *)&v10 + 1) = a4;
      *(_QWORD *)&v10 = a3;
      v9 = v10 >> 8;
      a4 >>= 8;
      *(_WORD *)(v8 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x100);
  }
  v11 = (_BYTE *)(v8 - 1);
  do
  {
    v12 = v9 & 0xF;
    v13 = v9 <= 0xF;
    *((_QWORD *)&v14 + 1) = a4;
    *(_QWORD *)&v14 = v9;
    v9 = v14 >> 4;
    a4 >>= 4;
    *v11-- = a0123456789abcd_0[v12];
  }
  while (!v13);
  return v7;
}

void std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
    std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  else
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v6);
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned int a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 >= 0x80)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
    std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  else
    std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v6);
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 >= 0x80)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;

  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
    std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, (_QWORD *)*a4, v8, v7);
  else
    std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, a3, (uint64_t)a4, v8);
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  char __src;

  if (__PAIR128__(a2, a1) >= 0x80)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

_QWORD *std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, float a4)
{
  int v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  uint64_t *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v31;
  std::locale v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  unint64_t v39;
  void *__p;
  _QWORD v41[33];

  v41[32] = *MEMORY[0x24BDAC8D0];
  v7 = LODWORD(a4) >> 31;
  if ((LODWORD(a4) & 0x7FFFFFFFu) >= 0x7F800000)
    return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(*a1, a2, a3, a4 < 0.0, 0);
  v8 = (unint64_t)a2 >> 8;
  if ((_DWORD)a3 == -1)
    v9 = 149;
  else
    v9 = a3;
  v37 = v9;
  v38 = 0;
  if (v9 >= 150)
  {
    v37 = 149;
    v38 = v9 - 149;
    v39 = 194;
LABEL_9:
    v10 = v41;
    goto LABEL_10;
  }
  v39 = v9 + 45;
  if ((v9 + 45) < 0x101)
    goto LABEL_9;
  v10 = operator new(v9 + 45);
LABEL_10:
  __p = v10;
  std::__formatter::__format_buffer[abi:ne180100]<float,float>((uint64_t)&v37, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8);
  if ((a2 & 0x20) != 0)
  {
    v11 = v34;
    if (v34 == v36)
    {
      v36 = v34 + 1;
      *v34 = 46;
      v12 = v36 - 1;
      if (v35 != v36 - 1)
      {
        if (v35 + 1 == v12)
        {
          v14 = *v35;
          *v35 = *v12;
          *v12 = v14;
        }
        else
        {
          v13 = *(v36 - 1);
          memmove(v35 + 1, v35, v36 - 1 - v35);
          *v35 = v13;
        }
      }
      v11 = v35;
      v34 = v35++;
    }
    if ((BYTE1(a2) - 17) <= 1u)
    {
      if (a3 <= 1)
        v15 = 1;
      else
        v15 = a3;
      if ((a3 & 0x80000000) != 0)
        v15 = 6;
      if (v35 == v36)
        v16 = (_DWORD)v33 - (_DWORD)v11;
      else
        v16 = -1;
      v17 = v16 + v15;
      v18 = &v35[~(unint64_t)v11];
      if ((uint64_t)v18 < v17)
        v38 += v17 - (_DWORD)v18;
    }
  }
  if ((a2 & 0x40) != 0)
  {
    v25 = *a1;
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v32);
    v26 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(v25, (uint64_t)&v37, &v33, &v32, a2, a3);
    std::locale::~locale(&v32);
  }
  else
  {
    v19 = (char *)__p;
    v20 = v36 - (_BYTE *)__p;
    v21 = v38;
    if (v36 - (_BYTE *)__p + v38 >= a2 >> 32)
    {
      if (!v38 || v35 == v36)
      {
        v26 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v36 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v26, v21, 48);
      }
      else
      {
        v26 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v35 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v26, v21, 48);
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v26, v35, v36 - v35);
      }
    }
    else
    {
      v22 = *a1;
      if ((a2 & 7) == 4)
      {
        if (__p != v33)
        {
          v31 = v22;
          std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v31, (char *)__p);
          ++v19;
        }
        v23 = a2 & 0xF8 | 3;
        v24 = 48;
      }
      else
      {
        v24 = BYTE4(a3);
        v23 = a2;
      }
      v27 = a2 & 0xFFFFFFFFFFFFFF00 | v23;
      v28 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v24 << 32);
      if ((_DWORD)v21)
        std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)v19, (uint64_t)v36, (uint64_t)v22, v27);
      else
        v29 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v19, v36 - v19, v22, v27, v28, v20);
      v26 = v29;
    }
  }
  if (v39 >= 0x101)
    operator delete(__p);
  return v26;
}

void sub_249CFA034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x101)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  char v5;
  int v6;
  char *p_src;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 v11;
  char __src;
  _BYTE v14[3];

  if ((a4 & 1) != 0)
  {
    v5 = 45;
  }
  else
  {
    v6 = (a2 >> 3) & 3;
    if (v6 == 2)
    {
      v5 = 43;
    }
    else
    {
      if (v6 != 3)
      {
        p_src = &__src;
        goto LABEL_8;
      }
      v5 = 32;
    }
  }
  p_src = v14;
  __src = v5;
LABEL_8:
  if (BYTE1(a2) <= 0x10u && ((1 << SBYTE1(a2)) & 0x15000) != 0)
  {
    v8 = 6;
  }
  else
  {
    v8 = 6;
    if (BYTE1(a2) != 18)
      v8 = 0;
  }
  v9 = 3;
  if (!a5)
    v9 = 0;
  v10 = &aInfnaninfnan[v8 + v9];
  *(_WORD *)p_src = *(_WORD *)v10;
  p_src[2] = v10[2];
  if ((a2 & 7) == 4)
    v11 = a2 & 0xF8 | 3;
  else
    v11 = a2;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, p_src - &__src + 3, a1, a2 & 0xFFFFFFFFFFFFFF00 | v11, a3, p_src - &__src + 3);
}

void std::__formatter::__format_buffer[abi:ne180100]<float,float>(uint64_t a1, char a2, uint64_t a3, int a4, int a5)
{
  char v5;

  if ((a2 & 1) != 0)
  {
    v5 = 45;
  }
  else if (a4 == 2)
  {
    v5 = 43;
  }
  else
  {
    if (a4 != 3)
      goto LABEL_8;
    v5 = 32;
  }
  **(_BYTE **)(a1 + 16) = v5;
LABEL_8:
  __asm { BR              X11 }
}

uint64_t sub_249CFA1D4(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v4 = *a1;
  *v3 = a3;
  result = MEMORY[0x24BD02CF4](a3, *((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 1), 2, v4);
  v3[2] = result;
  v3[3] = result;
  if ((_DWORD)v4)
    v6 = v4 + 1;
  else
    v6 = 0;
  v3[1] = result - v6;
  return result;
}

uint64_t sub_249CFA280(int *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  int v5;

  if (v3)
    v5 = *a1;
  else
    v5 = -1;
  return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>((uint64_t)a1, v5, a3, v4);
}

uint64_t sub_249CFA29C(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>((uint64_t)a1, *a1, a3, v3);
}

_QWORD *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(_QWORD *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  const std::locale::facet *v11;
  char *v12;
  char *v13;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v16;
  char *v17;
  std::string::value_type v18;
  uint64_t v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  char *v26;
  std::string::size_type v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  std::string::size_type v33;
  char *v34;
  std::string *v35;
  char *v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  int64_t __len;
  std::string v49;
  std::string __p;

  v11 = std::locale::use_facet(this, MEMORY[0x24BEDB588]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  v12 = a3[2];
  v13 = *a3;
  if (v12 >= a3[1])
    v12 = a3[1];
  __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_29;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_29;
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    size = __p.__r_.__value_.__l.__size_;
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v49, 0, sizeof(v49));
  v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v18 = p_p->__r_.__value_.__s.__data_[0];
  v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    v20 = v17 - 1;
    do
    {
      std::string::push_back(&v49, v18);
      if (p_p == (std::string *)v20)
      {
        v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        v21 = &p_p->__r_.__value_.__s.__data_[1];
        v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          v23 = *v22++;
          v18 = v23;
          if (v23)
            v24 = 1;
          else
            v24 = v21 == v20;
          v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v49, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v49;
LABEL_29:
  v25 = HIDWORD(a6);
  v26 = *(char **)(a2 + 16);
  v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = __p.__r_.__value_.__l.__size_;
  v28 = a5 & 7;
  if (a5 >> 32 > (uint64_t)(a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0)))
  {
    if (v28 == 4)
      v29 = 3;
    else
      v29 = a5 & 7;
    __asm { BR              X11 }
  }
  if (v28 == 4 && v13 != v26)
  {
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v26);
  }
  v30 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, v25);
  v31 = v30;
  if (v28 != 4)
  {
    v32 = *(char **)(a2 + 16);
    if (v13 != v32)
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v32);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v34 = &__p.__r_.__value_.__s.__data_[1];
      v35 = &__p;
      goto LABEL_47;
    }
LABEL_51:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, __len);
    goto LABEL_52;
  }
  v33 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_51;
  v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v34 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_47:
  v36 = (char *)v35 + v33;
  v37 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    v38 = v36 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, *(v36 - 1));
    if (v36 == v34)
      break;
    v13 += *(v36 - 1);
    v39 = *v31;
    v40 = v31[2];
    v31[2] = v40 + 1;
    *(_BYTE *)(v39 + v40) = v37;
    --v36;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
      v36 = v38;
    }
  }
LABEL_52:
  v41 = a3[1];
  if (v41 != a3[3])
  {
    v42 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    v43 = *v31;
    v44 = v31[2];
    v31[2] = v44 + 1;
    *(_BYTE *)(v43 + v44) = v42;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v31, *(int *)(a2 + 4), 48);
    v41 = a3[3];
  }
  v45 = a3[2];
  if (v45 != v41)
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v45, v41 - v45);
  v46 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v31, 0, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v46;
}

void sub_249CFA6DC()
{
  JUMPOUT(0x249CFA4F0);
}

void sub_249CFA6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_249CFA7A4(int a1, int a2, _QWORD *a3, int a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;

  v23 = HIDWORD(a5);
  v24 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v19, SHIDWORD(a5));
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v24, v22, v18 - v22);
  std::__format::__output_buffer<char>::__fill[abi:ne180100](v24, v20, 48);
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v24, v18, v21 - (_QWORD)v18);
  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v24, 0, v23);
}

_BYTE *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _BYTE *result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  v6 = MEMORY[0x24BD02CF4](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 3, a2);
  a4[3] = v6;
  result = (_BYTE *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    v8 = v6 - (_QWORD)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      v9 = 6;
      if (v8 < 6)
        v9 = v6 - (_QWORD)result;
      v10 = -v9;
      while (*(_BYTE *)(v6 + v10) != 101)
      {
        if (++v10 == -3)
          goto LABEL_8;
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46)
          v11 = (_BYTE *)(a3 + 1);
        else
          v11 = (_BYTE *)v6;
        goto LABEL_12;
      }
    }
    result = memchr(result, 46, v8);
    if (result)
      v11 = result;
    else
      v11 = (_BYTE *)v6;
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

_BYTE *std::__formatter::__format_buffer_default[abi:ne180100]<float,float>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *result;
  _BYTE *v13;

  *a4 = this;
  v7 = std::to_chars(this, (char *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8)), a3, a5);
  v8 = (_BYTE *)v7;
  a4[3] = v7;
  v9 = v7 - (_QWORD)this;
  v10 = (_BYTE *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6)
      v9 = 6;
    v11 = -(uint64_t)v9;
    while (*(_BYTE *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        v10 = (_BYTE *)v7;
        goto LABEL_9;
      }
    }
    v10 = (_BYTE *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result)
    v13 = result;
  else
    v13 = v10;
  if (v13 == v10)
    v13 = v8;
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;

  *a4 = a3;
  if (a2 == -1)
    result = std::to_chars();
  else
    result = MEMORY[0x24BD02CF4](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 4);
  a4[3] = result;
  v8 = *(unsigned __int8 *)(a3 + 1);
  v7 = a3 + 1;
  if (v8 == 46)
  {
    v9 = result - 2;
    v10 = memchr((void *)(result - 5), 112, 3uLL);
    result = v7;
    if (v10)
      v7 = (uint64_t)v10;
    else
      v7 = v9;
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  int v8;

  result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>(a1, a2, a3, a4);
  v6 = (_BYTE *)*a4;
  v7 = (_BYTE *)a4[2];
  if ((_BYTE *)*a4 != v7)
  {
    do
    {
      v8 = (char)*v6;
      if ((v8 - 97) < 6)
        LOBYTE(v8) = v8 - 32;
      *v6++ = v8;
    }
    while (v6 != v7);
    v6 = (_BYTE *)a4[2];
  }
  *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a4 = a3;
  result = MEMORY[0x24BD02CF4](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 1, a2);
  a4[3] = result;
  v7 = a3 + 1;
  if (*(_BYTE *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    v8 = result - a3 - 2;
    v7 = result;
    if (v8 >= 4)
    {
      v9 = 6;
      if ((unint64_t)v8 < 6)
        v9 = result - a3 - 2;
      v10 = -v9;
      while (*(_BYTE *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          v7 = result;
          goto LABEL_11;
        }
      }
      v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

_QWORD *std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v32;
  std::locale v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  unint64_t v40;
  void *__p;
  _QWORD v42[129];

  v42[128] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)&a4 >> 63;
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(*a1, a2, a3, a4 < 0.0, 0);
  v8 = (unint64_t)a2 >> 8;
  if ((_DWORD)a3 == -1)
    v9 = 1074;
  else
    v9 = a3;
  v38 = v9;
  v39 = 0;
  if (v9 < 1075)
  {
    v10 = v9 + 316;
    v40 = v10;
    if ((v9 + 316) < 0x401)
    {
      v11 = v42;
      goto LABEL_10;
    }
  }
  else
  {
    v38 = 1074;
    v39 = v9 - 1074;
    v10 = 1390;
    v40 = 1390;
  }
  v11 = operator new(v10);
LABEL_10:
  __p = v11;
  std::__formatter::__format_buffer[abi:ne180100]<double,double>((uint64_t)&v38, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8);
  if ((a2 & 0x20) != 0)
  {
    v12 = v35;
    if (v35 == v37)
    {
      v37 = v35 + 1;
      *v35 = 46;
      v13 = v37 - 1;
      if (v36 != v37 - 1)
      {
        if (v36 + 1 == v13)
        {
          v15 = *v36;
          *v36 = *v13;
          *v13 = v15;
        }
        else
        {
          v14 = *(v37 - 1);
          memmove(v36 + 1, v36, v37 - 1 - v36);
          *v36 = v14;
        }
      }
      v12 = v36;
      v35 = v36++;
    }
    if ((BYTE1(a2) - 17) <= 1u)
    {
      if (a3 <= 1)
        v16 = 1;
      else
        v16 = a3;
      if ((a3 & 0x80000000) != 0)
        v16 = 6;
      if (v36 == v37)
        v17 = (_DWORD)v34 - (_DWORD)v12;
      else
        v17 = -1;
      v18 = v17 + v16;
      v19 = &v36[~(unint64_t)v12];
      if ((uint64_t)v19 < v18)
        v39 += v18 - (_DWORD)v19;
    }
  }
  if ((a2 & 0x40) != 0)
  {
    v26 = *a1;
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v33);
    v27 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v26, (uint64_t)&v38, &v34, &v33, a2, a3);
    std::locale::~locale(&v33);
  }
  else
  {
    v20 = (char *)__p;
    v21 = v37 - (_BYTE *)__p;
    v22 = v39;
    if (v37 - (_BYTE *)__p + v39 >= a2 >> 32)
    {
      if (!v39 || v36 == v37)
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v37 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
      }
      else
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v36 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v27, v36, v37 - v36);
      }
    }
    else
    {
      v23 = *a1;
      if ((a2 & 7) == 4)
      {
        if (__p != v34)
        {
          v32 = v23;
          std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v32, (char *)__p);
          ++v20;
        }
        v24 = a2 & 0xF8 | 3;
        v25 = 48;
      }
      else
      {
        v25 = BYTE4(a3);
        v24 = a2;
      }
      v28 = a2 & 0xFFFFFFFFFFFFFF00 | v24;
      v29 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v25 << 32);
      if ((_DWORD)v22)
        std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)v20, (uint64_t)v37, (uint64_t)v23, v28);
      else
        v30 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v20, v37 - v20, v23, v28, v29, v21);
      v27 = v30;
    }
  }
  if (v40 >= 0x401)
    operator delete(__p);
  return v27;
}

void sub_249CFAEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__formatter::__format_buffer[abi:ne180100]<double,double>(uint64_t a1, char a2, uint64_t a3, int a4, int a5)
{
  char v5;

  if ((a2 & 1) != 0)
  {
    v5 = 45;
  }
  else if (a4 == 2)
  {
    v5 = 43;
  }
  else
  {
    if (a4 != 3)
      goto LABEL_8;
    v5 = 32;
  }
  **(_BYTE **)(a1 + 16) = v5;
LABEL_8:
  __asm { BR              X11 }
}

uint64_t sub_249CFAF88(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v4 = *a1;
  *v3 = a3;
  result = MEMORY[0x24BD02CAC](a3, *((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 1), 2, v4);
  v3[2] = result;
  v3[3] = result;
  if ((_DWORD)v4)
    v6 = v4 + 1;
  else
    v6 = 0;
  v3[1] = result - v6;
  return result;
}

uint64_t sub_249CFB034(int *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  int v5;

  if (v3)
    v5 = *a1;
  else
    v5 = -1;
  return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>((uint64_t)a1, v5, a3, v4);
}

uint64_t sub_249CFB050(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>((uint64_t)a1, *a1, a3, v3);
}

_QWORD *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(_QWORD *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  const std::locale::facet *v11;
  char *v12;
  char *v13;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v16;
  char *v17;
  std::string::value_type v18;
  uint64_t v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  char *v26;
  std::string::size_type v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  std::string::size_type v33;
  char *v34;
  std::string *v35;
  char *v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  int64_t __len;
  std::string v49;
  std::string __p;

  v11 = std::locale::use_facet(this, MEMORY[0x24BEDB588]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  v12 = a3[2];
  v13 = *a3;
  if (v12 >= a3[1])
    v12 = a3[1];
  __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_29;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_29;
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    size = __p.__r_.__value_.__l.__size_;
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v49, 0, sizeof(v49));
  v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v18 = p_p->__r_.__value_.__s.__data_[0];
  v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    v20 = v17 - 1;
    do
    {
      std::string::push_back(&v49, v18);
      if (p_p == (std::string *)v20)
      {
        v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        v21 = &p_p->__r_.__value_.__s.__data_[1];
        v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          v23 = *v22++;
          v18 = v23;
          if (v23)
            v24 = 1;
          else
            v24 = v21 == v20;
          v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v49, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v49;
LABEL_29:
  v25 = HIDWORD(a6);
  v26 = *(char **)(a2 + 16);
  v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = __p.__r_.__value_.__l.__size_;
  v28 = a5 & 7;
  if (a5 >> 32 > (uint64_t)(a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0)))
  {
    if (v28 == 4)
      v29 = 3;
    else
      v29 = a5 & 7;
    __asm { BR              X11 }
  }
  if (v28 == 4 && v13 != v26)
  {
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v26);
  }
  v30 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, v25);
  v31 = v30;
  if (v28 != 4)
  {
    v32 = *(char **)(a2 + 16);
    if (v13 != v32)
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v32);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v34 = &__p.__r_.__value_.__s.__data_[1];
      v35 = &__p;
      goto LABEL_47;
    }
LABEL_51:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, __len);
    goto LABEL_52;
  }
  v33 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_51;
  v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v34 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_47:
  v36 = (char *)v35 + v33;
  v37 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    v38 = v36 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, *(v36 - 1));
    if (v36 == v34)
      break;
    v13 += *(v36 - 1);
    v39 = *v31;
    v40 = v31[2];
    v31[2] = v40 + 1;
    *(_BYTE *)(v39 + v40) = v37;
    --v36;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
      v36 = v38;
    }
  }
LABEL_52:
  v41 = a3[1];
  if (v41 != a3[3])
  {
    v42 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    v43 = *v31;
    v44 = v31[2];
    v31[2] = v44 + 1;
    *(_BYTE *)(v43 + v44) = v42;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v31, *(int *)(a2 + 4), 48);
    v41 = a3[3];
  }
  v45 = a3[2];
  if (v45 != v41)
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v45, v41 - v45);
  v46 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v31, 0, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v46;
}

void sub_249CFB490()
{
  JUMPOUT(0x249CFB2A4);
}

void sub_249CFB49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _BYTE *result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  v6 = MEMORY[0x24BD02CAC](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 3, a2);
  a4[3] = v6;
  result = (_BYTE *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    v8 = v6 - (_QWORD)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      v9 = 6;
      if (v8 < 6)
        v9 = v6 - (_QWORD)result;
      v10 = -v9;
      while (*(_BYTE *)(v6 + v10) != 101)
      {
        if (++v10 == -3)
          goto LABEL_8;
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46)
          v11 = (_BYTE *)(a3 + 1);
        else
          v11 = (_BYTE *)v6;
        goto LABEL_12;
      }
    }
    result = memchr(result, 46, v8);
    if (result)
      v11 = result;
    else
      v11 = (_BYTE *)v6;
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

_BYTE *std::__formatter::__format_buffer_default[abi:ne180100]<double,double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *result;
  _BYTE *v13;

  *a4 = this;
  v7 = std::to_chars(this, (char *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8)), a3, a5);
  v8 = (_BYTE *)v7;
  a4[3] = v7;
  v9 = v7 - (_QWORD)this;
  v10 = (_BYTE *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6)
      v9 = 6;
    v11 = -(uint64_t)v9;
    while (*(_BYTE *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        v10 = (_BYTE *)v7;
        goto LABEL_9;
      }
    }
    v10 = (_BYTE *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result)
    v13 = result;
  else
    v13 = v10;
  if (v13 == v10)
    v13 = v8;
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;

  *a4 = a3;
  if (a2 == -1)
    result = std::to_chars();
  else
    result = MEMORY[0x24BD02CAC](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 4);
  a4[3] = result;
  v8 = *(unsigned __int8 *)(a3 + 1);
  v7 = a3 + 1;
  if (v8 == 46)
  {
    v9 = result - 2;
    v10 = memchr((void *)(result - 6), 112, 4uLL);
    result = v7;
    if (v10)
      v7 = (uint64_t)v10;
    else
      v7 = v9;
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  int v8;

  result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>(a1, a2, a3, a4);
  v6 = (_BYTE *)*a4;
  v7 = (_BYTE *)a4[2];
  if ((_BYTE *)*a4 != v7)
  {
    do
    {
      v8 = (char)*v6;
      if ((v8 - 97) < 6)
        LOBYTE(v8) = v8 - 32;
      *v6++ = v8;
    }
    while (v6 != v7);
    v6 = (_BYTE *)a4[2];
  }
  *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a4 = a3;
  result = MEMORY[0x24BD02CAC](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 1, a2);
  a4[3] = result;
  v7 = a3 + 1;
  if (*(_BYTE *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    v8 = result - a3 - 2;
    v7 = result;
    if (v8 >= 4)
    {
      v9 = 6;
      if ((unint64_t)v8 < 6)
        v9 = result - a3 - 2;
      v10 = -v9;
      while (*(_BYTE *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          v7 = result;
          goto LABEL_11;
        }
      }
      v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

_QWORD *std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v32;
  std::locale v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  unint64_t v40;
  void *__p;
  _QWORD v42[129];

  v42[128] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)&a4 >> 63;
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(*a1, a2, a3, a4 < 0.0, 0);
  v8 = (unint64_t)a2 >> 8;
  if ((_DWORD)a3 == -1)
    v9 = 1074;
  else
    v9 = a3;
  v38 = v9;
  v39 = 0;
  if (v9 < 1075)
  {
    v10 = v9 + 316;
    v40 = v10;
    if ((v9 + 316) < 0x401)
    {
      v11 = v42;
      goto LABEL_10;
    }
  }
  else
  {
    v38 = 1074;
    v39 = v9 - 1074;
    v10 = 1390;
    v40 = 1390;
  }
  v11 = operator new(v10);
LABEL_10:
  __p = v11;
  std::__formatter::__format_buffer[abi:ne180100]<double,long double>((uint64_t)&v38, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8);
  if ((a2 & 0x20) != 0)
  {
    v12 = v35;
    if (v35 == v37)
    {
      v37 = v35 + 1;
      *v35 = 46;
      v13 = v37 - 1;
      if (v36 != v37 - 1)
      {
        if (v36 + 1 == v13)
        {
          v15 = *v36;
          *v36 = *v13;
          *v13 = v15;
        }
        else
        {
          v14 = *(v37 - 1);
          memmove(v36 + 1, v36, v37 - 1 - v36);
          *v36 = v14;
        }
      }
      v12 = v36;
      v35 = v36++;
    }
    if ((BYTE1(a2) - 17) <= 1u)
    {
      if (a3 <= 1)
        v16 = 1;
      else
        v16 = a3;
      if ((a3 & 0x80000000) != 0)
        v16 = 6;
      if (v36 == v37)
        v17 = (_DWORD)v34 - (_DWORD)v12;
      else
        v17 = -1;
      v18 = v17 + v16;
      v19 = &v36[~(unint64_t)v12];
      if ((uint64_t)v19 < v18)
        v39 += v18 - (_DWORD)v19;
    }
  }
  if ((a2 & 0x40) != 0)
  {
    v26 = *a1;
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v33);
    v27 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v26, (uint64_t)&v38, &v34, &v33, a2, a3);
    std::locale::~locale(&v33);
  }
  else
  {
    v20 = (char *)__p;
    v21 = v37 - (_BYTE *)__p;
    v22 = v39;
    if (v37 - (_BYTE *)__p + v39 >= a2 >> 32)
    {
      if (!v39 || v36 == v37)
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v37 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
      }
      else
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v36 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v27, v36, v37 - v36);
      }
    }
    else
    {
      v23 = *a1;
      if ((a2 & 7) == 4)
      {
        if (__p != v34)
        {
          v32 = v23;
          std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v32, (char *)__p);
          ++v20;
        }
        v24 = a2 & 0xF8 | 3;
        v25 = 48;
      }
      else
      {
        v25 = BYTE4(a3);
        v24 = a2;
      }
      v28 = a2 & 0xFFFFFFFFFFFFFF00 | v24;
      v29 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v25 << 32);
      if ((_DWORD)v22)
        std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)v20, (uint64_t)v37, (uint64_t)v23, v28);
      else
        v30 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v20, v37 - v20, v23, v28, v29, v21);
      v27 = v30;
    }
  }
  if (v40 >= 0x401)
    operator delete(__p);
  return v27;
}

void sub_249CFBBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__formatter::__format_buffer[abi:ne180100]<double,long double>(uint64_t a1, char a2, uint64_t a3, int a4, int a5)
{
  char v5;

  if ((a2 & 1) != 0)
  {
    v5 = 45;
  }
  else if (a4 == 2)
  {
    v5 = 43;
  }
  else
  {
    if (a4 != 3)
      goto LABEL_8;
    v5 = 32;
  }
  **(_BYTE **)(a1 + 16) = v5;
LABEL_8:
  __asm { BR              X11 }
}

uint64_t sub_249CFBC70(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v4 = *a1;
  *v3 = a3;
  result = MEMORY[0x24BD02CD0](a3, *((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 1), 2, v4);
  v3[2] = result;
  v3[3] = result;
  if ((_DWORD)v4)
    v6 = v4 + 1;
  else
    v6 = 0;
  v3[1] = result - v6;
  return result;
}

uint64_t sub_249CFBD1C(int *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  int v5;

  if (v3)
    v5 = *a1;
  else
    v5 = -1;
  return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>((uint64_t)a1, v5, a3, v4);
}

uint64_t sub_249CFBD38(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, *a1, a3, v3);
}

_BYTE *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _BYTE *result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  v6 = MEMORY[0x24BD02CD0](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 3, a2);
  a4[3] = v6;
  result = (_BYTE *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    v8 = v6 - (_QWORD)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      v9 = 6;
      if (v8 < 6)
        v9 = v6 - (_QWORD)result;
      v10 = -v9;
      while (*(_BYTE *)(v6 + v10) != 101)
      {
        if (++v10 == -3)
          goto LABEL_8;
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46)
          v11 = (_BYTE *)(a3 + 1);
        else
          v11 = (_BYTE *)v6;
        goto LABEL_12;
      }
    }
    result = memchr(result, 46, v8);
    if (result)
      v11 = result;
    else
      v11 = (_BYTE *)v6;
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

_BYTE *std::__formatter::__format_buffer_default[abi:ne180100]<double,long double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *result;
  _BYTE *v13;

  *a4 = this;
  v7 = std::to_chars(this, (char *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8)), a3, a5);
  v8 = (_BYTE *)v7;
  a4[3] = v7;
  v9 = v7 - (_QWORD)this;
  v10 = (_BYTE *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6)
      v9 = 6;
    v11 = -(uint64_t)v9;
    while (*(_BYTE *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        v10 = (_BYTE *)v7;
        goto LABEL_9;
      }
    }
    v10 = (_BYTE *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result)
    v13 = result;
  else
    v13 = v10;
  if (v13 == v10)
    v13 = v8;
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;

  *a4 = a3;
  if (a2 == -1)
    result = std::to_chars();
  else
    result = MEMORY[0x24BD02CD0](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 4);
  a4[3] = result;
  v8 = *(unsigned __int8 *)(a3 + 1);
  v7 = a3 + 1;
  if (v8 == 46)
  {
    v9 = result - 2;
    v10 = memchr((void *)(result - 6), 112, 4uLL);
    result = v7;
    if (v10)
      v7 = (uint64_t)v10;
    else
      v7 = v9;
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  int v8;

  result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>(a1, a2, a3, a4);
  v6 = (_BYTE *)*a4;
  v7 = (_BYTE *)a4[2];
  if ((_BYTE *)*a4 != v7)
  {
    do
    {
      v8 = (char)*v6;
      if ((v8 - 97) < 6)
        LOBYTE(v8) = v8 - 32;
      *v6++ = v8;
    }
    while (v6 != v7);
    v6 = (_BYTE *)a4[2];
  }
  *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a4 = a3;
  result = MEMORY[0x24BD02CD0](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 1, a2);
  a4[3] = result;
  v7 = a3 + 1;
  if (*(_BYTE *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    v8 = result - a3 - 2;
    v7 = result;
    if (v8 >= 4)
    {
      v9 = 6;
      if ((unint64_t)v8 < 6)
        v9 = result - a3 - 2;
      v10 = -v9;
      while (*(_BYTE *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          v7 = result;
          goto LABEL_11;
        }
      }
      v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

unsigned __int8 *std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *result;
  unsigned int v4;

  result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x128u);
  v4 = a1[1];
  if (v4 >= 2 && v4 != 19)
    std::__throw_format_error[abi:ne180100]("The type option contains an invalid value for a string formatting argument");
  return result;
}

uint64_t *std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t *v14;

  v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if (SHIDWORD(v5) > 0 || (int)v6 >= 0)
  {
    v8 = v5;
    v9 = v6;
    v10 = strlen(a2);
    return std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v10, *a3, v8, v9);
  }
  else
  {
    v11 = *a3;
    if (*a2)
    {
      do
      {
        v14 = v11;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v14, a2);
      }
      while (*++a2);
    }
  }
  return v11;
}

_QWORD *std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;

  if ((a5 & 0x80000000) != 0)
    return std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, a2, a3, a4, a5);
  v9 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, a2, a5, 0);
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, v10 - (_QWORD)__src, a3, a4, a5, v9);
}

unsigned __int8 *std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *result;
  int v4;

  result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x124u);
  v4 = a1[1];
  if ((v4 - 8) >= 2 && v4 != 0)
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a pointer");
  return result;
}

void std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, _QWORD *a3)
{
  __int16 v5;
  __int16 v6;

  v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  v6 = 1536;
  if ((v5 & 0xFF00) == 0x900)
    v6 = 1792;
  std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v5 | v6 | 0x20);
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_249CFC2A4(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6;
  _BYTE v7[6];

  return std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v6, (uint64_t)v7, 0, 10);
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, _BYTE *a8, signed int a9)
{
  char *v9;
  char v13;
  char v14;
  int v15;
  _WORD *v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  const std::locale::facet *v21;
  char *locale;
  _QWORD *v23;
  std::string::value_type *v24;
  char *v25;
  std::string::value_type v26;
  uint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  BOOL v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  std::string __p;
  std::locale v45;
  uint64_t v46;
  unsigned __int8 v47;

  v9 = a6;
  v13 = a3;
  if ((a5 & 1) != 0)
  {
    v14 = 45;
LABEL_7:
    *a6 = v14;
    v16 = a6 + 1;
    goto LABEL_8;
  }
  v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    v14 = 43;
    goto LABEL_7;
  }
  v16 = a6;
  if (v15 == 3)
  {
    v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v17 = *a8;
      if (*a8)
      {
        v18 = a8 + 1;
        do
        {
          *(_BYTE *)v16 = v17;
          v16 = (_WORD *)((char *)v16 + 1);
          v19 = *v18++;
          v17 = v19;
        }
        while (v19);
      }
    }
  }
  v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  v21 = std::locale::use_facet(&v45, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47)
      goto LABEL_44;
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9)
        v37 = (_DWORD)v16 - (_DWORD)v9;
      else
        v37 = HIDWORD(a3);
      v35 = (HIDWORD(a3) - v37);
      v38 = 48;
      v9 = (char *)v16;
    }
    else
    {
      v38 = BYTE4(a4);
      v36 = a3;
    }
    v39 = *a2;
    v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, (uint64_t)v39, v40, v41, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
  }
  v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0)
    v24 = (std::string::value_type *)&v45;
  else
    v24 = (std::string::value_type *)v45.__locale_;
  if ((v47 & 0x80u) == 0)
    v25 = (char *)&v45 + v47;
  else
    v25 = (char *)v45.__locale_ + v46;
  v26 = *v24;
  v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        v26 = *v28;
        v24 = v28;
      }
      else
      {
        v29 = v24 + 1;
        v30 = v24 + 1;
        do
        {
          v31 = *v30++;
          v26 = v31;
          if (v31)
            v32 = 1;
          else
            v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
        v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v45.__locale_);
  return v34;
}

void sub_249CFC690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

vg::hrtf::HRTFDecoderModel *std::unique_ptr<vg::hrtf::HRTFDecoderModel>::reset[abi:ne180100](vg::hrtf::HRTFDecoderModel **a1, vg::hrtf::HRTFDecoderModel *a2)
{
  vg::hrtf::HRTFDecoderModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFDecoderModel::~HRTFDecoderModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::hrtf::HRTFDecoderModelEspresso *std::unique_ptr<vg::hrtf::HRTFDecoderModelEspresso>::reset[abi:ne180100](vg::hrtf::HRTFDecoderModelEspresso **a1, vg::hrtf::HRTFDecoderModelEspresso *a2)
{
  vg::hrtf::HRTFDecoderModelEspresso *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFDecoderModelEspresso::~HRTFDecoderModelEspresso(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::hrtf::DTFModel *std::unique_ptr<vg::hrtf::DTFModel>::reset[abi:ne180100](vg::hrtf::DTFModel **a1, vg::hrtf::DTFModel *a2)
{
  vg::hrtf::DTFModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFModel::~DTFModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::hrtf::DTFModelEspresso *std::unique_ptr<vg::hrtf::DTFModelEspresso>::reset[abi:ne180100](vg::hrtf::DTFModelEspresso **a1, vg::hrtf::DTFModelEspresso *a2)
{
  vg::hrtf::DTFModelEspresso *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFModelEspresso::~DTFModelEspresso(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::hrtf::DTFBiasModel *std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100](vg::hrtf::DTFBiasModel **a1, vg::hrtf::DTFBiasModel *a2)
{
  vg::hrtf::DTFBiasModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFBiasModel::~DTFBiasModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::hrtf::DTFBiasModelEspresso *std::unique_ptr<vg::hrtf::DTFBiasModelEspresso>::reset[abi:ne180100](vg::hrtf::DTFBiasModelEspresso **a1, vg::hrtf::DTFBiasModelEspresso *a2)
{
  vg::hrtf::DTFBiasModelEspresso *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFBiasModelEspresso::~DTFBiasModelEspresso(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

vg::hrtf::DelayCoefficientsModel *std::unique_ptr<vg::hrtf::DelayCoefficientsModel>::reset[abi:ne180100](vg::hrtf::DelayCoefficientsModel **a1, vg::hrtf::DelayCoefficientsModel *a2)
{
  vg::hrtf::DelayCoefficientsModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DelayCoefficientsModel::~DelayCoefficientsModel(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void **std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFModelImplInput::~HRTFModelImplInput(result);
    JUMPOUT(0x24BD02D60);
  }
  return result;
}

void OUTLINED_FUNCTION_1_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void vg::hrtf::HRTFModelImpl::preprocessData()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Minimum 3 face frames required.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to preprocess face capture data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to preprocess left ear capture data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to preprocess right ear capture data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Preprocessing data for models...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void vg::hrtf::HRTFModelImpl::predictHRTFData()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict HRTF decoder model.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict dtf values.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to create DTFBiasModel.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict bias dtf values.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Running prediction for DTFBiasModel (EspressoV1)...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "DTFBiasModel falling back to EspressoV1.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Running prediction for DTFBiasModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Creating DTFBiasModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Running prediction for DTFModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to create DTFModel.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "DTFModel falling back to EspressoV1.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Creating DTFModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Running prediction for HRTFDecoderModel (EspressoV1)...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to create HRTFDecoderModel.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "HRTFDecoderModel falling back to EspressoV1.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Running prediction for HRTFDecoderModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Initializing HRTFDecoderModel for ANE.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Creating HRTFDecoderModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void vg::hrtf::HRTFModelImpl::predict()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict delay coefficients.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict left HRTF data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict right HRTF data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to create audio profile data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Predicting HRTFData for right ear...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Predicting HRTFData for left ear...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to create DelayCoefficientsModel.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Running prediction for DelayCoefficientsModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_0(&dword_249CAD000, v0, v1, "Creating DelayCoefficientsModel...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to preprocess HRTFModelInputs data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict face encodings.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict left ear encodings.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Failed to predict right ear encodings.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Invalid model inputs.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_8(&dword_249CAD000, v0, v1, "Failed to create %s.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_249CAD000, v0, v1, "Running prediction for %s (EspressoV1)...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_249CAD000, v0, v1, "%s falling back to EspressoV1.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_249CAD000, v0, v1, "Running prediction for %s...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_249CAD000, v0, v1, "Creating %s...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

void vg::hrtf::HRTFModel::create()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_249CAD000, v0, v1, "Unable to create model with empty modelsRootPath", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void detail::getModelPath(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_8(&dword_249CAD000, a2, a3, "No model found at path: %@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_6();
}

uint64_t vg::hrtf::EncoderModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::size_type v5;
  unint64_t i;
  _QWORD *InputPorts;
  unsigned __int8 *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  _QWORD *OutputPorts;
  unsigned __int8 *v14;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t result;
  std::string::size_type v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  E5RT::ExecutionStream *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type v24;
  void **v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  std::string v29;

  vg::shared::VGE5RT::compileModel(a2, 1, &v29);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1, (uint64_t *)&v29);
  v5 = v29.__r_.__value_.__r.__words[0];
  v29.__r_.__value_.__r.__words[0] = 0;
  if (v5)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v5 + 8))(v5);
  for (i = 1; i != 4; ++i)
  {
    std::to_string(&v29, i);
    InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
    std::operator+<char>();
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
    if (!v8)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100]((char **)(a1 + 32), (__int128 *)(v8 + 40));
    if (v28 < 0)
      operator delete(__p[0]);
    v9 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
    std::operator+<char>();
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v9, (unsigned __int8 *)__p);
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100]((char **)(a1 + 56), (__int128 *)(v10 + 40));
    if (v28 < 0)
      operator delete(__p[0]);
    v11 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
    std::operator+<char>();
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v11, (unsigned __int8 *)__p);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100]((char **)(a1 + 80), (__int128 *)(v12 + 40));
    if (v28 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&v29, "encodings");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&v29);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 104), (uint64_t *)v14 + 5);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 104));
  result = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  if (result)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)(a1 + 120), (uint64_t *)&v29);
    v17 = v29.__r_.__value_.__r.__words[0];
    v29.__r_.__value_.__r.__words[0] = 0;
    if (v17)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v17 + 8))(v17);
    v18 = *(std::__shared_weak_count **)(a1 + 128);
    v26 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v21 = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    E5RT::ExecutionStream::CreateExecutionStream(v21);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((_QWORD *)(a1 + 16), (uint64_t *)&v29);
    v24 = v29.__r_.__value_.__r.__words[0];
    v29.__r_.__value_.__r.__words[0] = 0;
    if (v24)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v24 + 8))(v24);
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v29);
    v25 = (void **)(a1 + 136);
    if (*(char *)(a1 + 159) < 0)
      operator delete(*v25);
    *(_OWORD *)v25 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
    return *(_QWORD *)(a1 + 16) && *(_QWORD *)a1 != 0;
  }
  return result;
}

void sub_249CFD59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<E5RT::IOPort>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void vg::hrtf::EncoderModelImpl::predict(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v8;
  uint64_t TensorStrides;
  id v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  E5RT::OperandDescriptor *v16;
  vg::shared::VGE5RT *v17;
  void *v18;
  E5RT::OperandDescriptor *v19;
  vg::shared::VGE5RT *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  vg::shared::VGE5RT *v27;
  E5RT::OperandDescriptor *v28;
  IOSurface *v29;
  const E5RT::TensorDescriptor *v30;
  std::string::size_type size;
  std::__shared_weak_count *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::string v36;

  v5 = 0;
  do
  {
    v6 = v5 + 1;
    std::to_string(&v36, v5 + 1);
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(*(_QWORD *)(a1 + 32) + 16 * v5));
    v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v8);
    v10 = *(id *)(*a2 + 80 * v5);
    v11 = *(_QWORD *)(*(_QWORD *)(TensorStrides + 8) - 16);
    if (v11 != objc_msgSend(*(id *)(*a2 + 80 * v5), "bytesPerRow"))
    {
      objc_msgSend(*(id *)(*a2 + 80 * v5), "vg_convertSurfaceStride:", *(_QWORD *)(*(_QWORD *)(TensorStrides + 8) - 16));
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    if (v34)
    {
      v13 = (std::__shared_weak_count *)operator new();
      v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B22DB0;
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13[1].__vftable = v34;
    }
    else
    {
      v13 = 0;
    }
    v35 = v13;
    E5RT::IOPort::BindMemoryObject();
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v16 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(*(_QWORD *)(a1 + 56) + 16 * v5));
    v17 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v16);
    vg::hrtf::EncoderModelImpl::predict(std::vector<vg::hrtf::ProcessedROIData> const&)::$_0::operator()(*(void **)(*a2 + 80 * v5 + 8), v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    E5RT::IOPort::BindMemoryObject();
    v19 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(*(_QWORD *)(a1 + 80) + 16 * v5));
    v20 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v19);
    vg::hrtf::EncoderModelImpl::predict(std::vector<vg::hrtf::ProcessedROIData> const&)::$_0::operator()(*(void **)(*a2 + 80 * v5 + 16), v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    E5RT::IOPort::BindMemoryObject();
    v34 = 0;

    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    ++v5;
  }
  while (v6 != 3);
  v22 = *(std::__shared_weak_count **)(a1 + 8);
  v33 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)(a1 + 16));
  E5RT::ExecutionStream::ResetStream(*(E5RT::ExecutionStream **)(a1 + 16));
  E5RT::BufferObject::GetHandle<__IOSurface *>();
  v27 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
  v28 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 104));
  v29 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v28);
  vg::shared::VGE5RT::convertSurfaceTo1DVector(v27, v29, v30, (uint64_t)&v36);
  size = v36.__r_.__value_.__l.__size_;
  *(_QWORD *)a3 = v36.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a3 + 8) = size;
  *(_DWORD *)(a3 + 16) = v36.__r_.__value_.__r.__words[2];
  *(_BYTE *)(a3 + 24) = 1;

}

void sub_249CFDB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_249CFDC7C()
{
  JUMPOUT(0x249CFDC64);
}

id vg::hrtf::EncoderModelImpl::predict(std::vector<vg::hrtf::ProcessedROIData> const&)::$_0::operator()(void *a1, vg::shared::VGE5RT *a2)
{
  id v3;
  const E5RT::TensorDescriptor *v4;
  void *v5;
  uint64_t TensorStrides;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  _QWORD *v11;
  uint64_t v12;

  v3 = a1;
  v5 = v3;
  if (vg::shared::VGE5RT::isTensorComponentFloat16(a2, v4))
  {
    objc_msgSend(v3, "vg_toFloat16Surface");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, *(const void **)TensorStrides, *(_QWORD *)(TensorStrides + 8), (uint64_t)(*(_QWORD *)(TensorStrides + 8) - *(_QWORD *)TensorStrides) >> 3);
  v7 = *(v11 - 2);
  if (v7 != objc_msgSend(v5, "bytesPerRow"))
  {
    objc_msgSend(v5, "vg_convertSurfaceStride:", *(v11 - 2));
    v8 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v8;
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }

  return v5;
}

void sub_249CFDD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModel::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = (_OWORD *)operator new();
  v7[8] = 0u;
  v7[9] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  *v6 = (uint64_t)v7;
  v9 = v6;
  if ((vg::hrtf::EncoderModelImpl::init((uint64_t)v7, a1, a2) & 1) != 0)
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::EncoderModel>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CFDE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::EncoderModel>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::EncoderModel *vg::hrtf::EncoderModel::EncoderModel(vg::hrtf::EncoderModel *this)
{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::EncoderModel::~EncoderModel(vg::hrtf::EncoderModel *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::EncoderModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::EncoderModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::EncoderModel::predictEncodings(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::EncoderModelImpl::predict(*a1, a2, a3);
}

uint64_t std::__split_buffer<std::shared_ptr<E5RT::IOPort>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::default_delete<vg::hrtf::EncoderModel>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
      std::default_delete<vg::hrtf::EncoderModelImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    JUMPOUT(0x24BD02D60);
  }
}

void std::default_delete<vg::hrtf::EncoderModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    if (*(char *)(a2 + 159) < 0)
      operator delete(*(void **)(a2 + 136));
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 120);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 104);
    v4 = (void **)(a2 + 80);
    std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 56);
    std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 32);
    std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 16);
    v3 = std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
    MEMORY[0x24BD02D60](v3, 0x1032C40EE9CFD0FLL);
  }
}

void std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

NSObject *vg::hrtf::createAudioProfile(uint64_t a1, char *a2)
{
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  const char *v24;
  CFStringRef v25;
  const __CFData *v26;
  int v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  void *v33;
  id v34;
  NSObject *v35;
  char *v36;
  void *v37;
  char v38;
  id v39;
  NSObject *v40;
  std::ios_base *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *__p[2];
  char v67;
  id v68;
  id v69;
  void *v70[2];
  char v71;
  IR::IRData *v72[2];
  _QWORD v73[2];
  IR::IRData *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  IR::IRData *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  IR::IRData *v82;
  std::__shared_weak_count *v83;
  IR::IRData *v84;
  IR::IRData *v85;
  IR::IRData *v86;
  std::__shared_weak_count *v87;
  IR::IRData *v88;
  std::__shared_weak_count *v89;
  _BYTE buf[12];
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  __VGLogSharedInstance();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v4, OS_LOG_TYPE_DEBUG, " Creating Audio Profile... ", buf, 2u);
  }

  vg::hrtf::hrtfToIRData(a1 + 96, a1 + 248, a1, a1 + 24, &v88);
  if (v88)
  {
    vg::hrtf::hrtfToIRData(a1 + 120, a1 + 272, a1, a1 + 24, &v86);
    if (!v86)
    {
      __VGLogSharedInstance();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v46, OS_LOG_TYPE_ERROR, " Failed to create bias dtf ir data. ", buf, 2u);
      }

      v44 = 0;
      goto LABEL_123;
    }
    v82 = v86;
    v83 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    vg::hrtf::modifyIRDataWithITD((uint64_t)&v82, &v84);
    v7 = v83;
    if (v83)
    {
      v8 = (unint64_t *)&v83->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v84)
    {
      vg::hrtf::createUserData(a1 + 144, a1 + 296);
      v10 = objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        v78 = v88;
        v79 = v89;
        if (v89)
        {
          v11 = (unint64_t *)&v89->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        vg::hrtf::createIRDataWithUserData(&v78, v10, &v80);
        v13 = v79;
        if (v79)
        {
          v14 = (unint64_t *)&v79->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (v80)
        {
          v74 = v86;
          v75 = v87;
          if (v87)
          {
            v16 = (unint64_t *)&v87->__shared_owners_;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          vg::hrtf::createIRDataWithUserData(&v74, v10, &v76);
          v18 = v75;
          if (v75)
          {
            v19 = (unint64_t *)&v75->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          if (v76)
          {
            v72[0] = v84;
            v72[1] = v85;
            if (v85)
            {
              v21 = (unint64_t *)((char *)v85 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            vg::hrtf::createIRDataWithUserData(v72, v10, v73);
            std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)v72);
            if (v73[0])
            {
              vg::hrtf::createEqualizerList(a1 + 168, a1 + 320);
              v23 = objc_claimAutoreleasedReturnValue();
              if (v23)
              {
                if (*(char *)(a1 + 375) >= 0)
                  v24 = (const char *)(a1 + 352);
                else
                  v24 = *(const char **)(a1 + 352);
                v25 = CFStringCreateWithCString(0, v24, 0x8000100u);
                MEMORY[0x24BD027CC](v73[0], v76, v23, v25);
                v26 = (const __CFData *)objc_claimAutoreleasedReturnValue();
                if (a2[24])
                {
                  std::operator+<char>();
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/dtf.ir", (const void **)v70, (void **)buf);
                  applesauce::CF::URLRef::URLRef((CFURLRef *)__p, buf, 0);
                  v27 = IR::IRDataLoader::writeIRFile();
                  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
                  if (v91 < 0)
                    operator delete(*(void **)buf);
                  if (v27)
                  {
                    __VGLogSharedInstance();
                    v28 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_249CAD000, v28, OS_LOG_TYPE_ERROR, " Failed to write DTF debug data ", buf, 2u);
                    }

                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/biasDtf.ir", (const void **)v70, (void **)buf);
                  applesauce::CF::URLRef::URLRef((CFURLRef *)__p, buf, 0);
                  v29 = IR::IRDataLoader::writeIRFile();
                  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
                  if (v91 < 0)
                    operator delete(*(void **)buf);
                  if (v29)
                  {
                    __VGLogSharedInstance();
                    v30 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_249CAD000, v30, OS_LOG_TYPE_ERROR, " Failed to write bias DTF debug data ", buf, 2u);
                    }

                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/itdmod.ir", (const void **)v70, (void **)buf);
                  applesauce::CF::URLRef::URLRef((CFURLRef *)__p, buf, 0);
                  v31 = IR::IRDataLoader::writeIRFile();
                  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
                  if (v91 < 0)
                    operator delete(*(void **)buf);
                  if (v31)
                  {
                    __VGLogSharedInstance();
                    v32 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_249CAD000, v32, OS_LOG_TYPE_ERROR, " Failed to write ITDMod debug data ", buf, 2u);
                    }

                  }
                  v69 = 0;
                  objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v23, 1, &v69);
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  v34 = v69;
                  if (v34)
                  {
                    __VGLogSharedInstance();
                    v35 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v34;
                      _os_log_impl(&dword_249CAD000, v35, OS_LOG_TYPE_ERROR, " Failed to write serialize EQ to json: %@ ", buf, 0xCu);
                    }

                  }
                  if (v33)
                  {
                    if (!a2[24])
                      std::__throw_bad_optional_access[abi:ne180100]();
                    if (a2[23] >= 0)
                      v36 = a2;
                    else
                      v36 = *(char **)a2;
                    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s/eq_data.json"), v36);
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    v68 = v34;
                    v38 = objc_msgSend(v33, "writeToFile:options:error:", v37, 0, &v68);
                    v39 = v68;

                    if ((v38 & 1) == 0)
                    {
                      __VGLogSharedInstance();
                      v40 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412290;
                        *(_QWORD *)&buf[4] = v39;
                        _os_log_impl(&dword_249CAD000, v40, OS_LOG_TYPE_ERROR, " Failed to write EQ debug data: %@ ", buf, 0xCu);
                      }

                    }
                    v34 = v39;
                  }
                  if (!a2[24])
                    std::__throw_bad_optional_access[abi:ne180100]();
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/audio_profile.data", (const void **)a2, __p);
                  std::ofstream::basic_ofstream(buf);
                  v41 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
                  v41->__exceptions_ = 5;
                  std::ios_base::clear(v41, v41->__rdstate_);
                  CFDataGetBytePtr(v26);
                  CFDataGetLength(v26);
                  std::ostream::write();
                  std::ofstream::close(buf);
                  std::ofstream::~ofstream(buf);
                  if (v67 < 0)
                    operator delete(__p[0]);

                  if (v71 < 0)
                    operator delete(v70[0]);
                }
                __VGLogSharedInstance();
                v42 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_249CAD000, v42, OS_LOG_TYPE_DEBUG, " Succesfully created Audio Profile ", buf, 2u);
                }

                v43 = v26;
                v44 = v43;
              }
              else
              {
                __VGLogSharedInstance();
                v43 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_249CAD000, v43, OS_LOG_TYPE_ERROR, " Failed to create eq dictionary. ", buf, 2u);
                }
                v44 = 0;
              }

            }
            else
            {
              __VGLogSharedInstance();
              v23 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_ERROR, " Failed to add user data to itdmod ir data. ", buf, 2u);
              }
              v44 = 0;
            }

            std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)v73);
          }
          else
          {
            __VGLogSharedInstance();
            v49 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_249CAD000, v49, OS_LOG_TYPE_ERROR, " Failed to add user data to bias_dtf ir data. ", buf, 2u);
            }

            v44 = 0;
          }
          v50 = v77;
          if (v77)
          {
            v51 = (unint64_t *)&v77->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
        else
        {
          __VGLogSharedInstance();
          v48 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_249CAD000, v48, OS_LOG_TYPE_ERROR, " Failed to add user data to dtf ir data. ", buf, 2u);
          }

          v44 = 0;
        }
        v53 = v81;
        if (v81)
        {
          v54 = (unint64_t *)&v81->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        goto LABEL_118;
      }
      __VGLogSharedInstance();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v47, OS_LOG_TYPE_ERROR, " Failed to create user data dictionary for IRData. ", buf, 2u);
      }

    }
    else
    {
      __VGLogSharedInstance();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " Failed to create ITDMod ir data. ", buf, 2u);
      }
    }
    v44 = 0;
LABEL_118:

    v56 = (std::__shared_weak_count *)v85;
    if (v85)
    {
      v57 = (unint64_t *)((char *)v85 + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
LABEL_123:
    v59 = v87;
    if (v87)
    {
      v60 = (unint64_t *)&v87->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    goto LABEL_128;
  }
  __VGLogSharedInstance();
  v45 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v45, OS_LOG_TYPE_ERROR, " Failed to create dtf ir data. ", buf, 2u);
  }

  v44 = 0;
LABEL_128:
  v62 = v89;
  if (v89)
  {
    v63 = (unint64_t *)&v89->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  return v44;
}

void sub_249CFEC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  if (a26 < 0)
    operator delete(__p);

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a37);

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

CFURLRef *applesauce::CF::URLRef::URLRef(CFURLRef *a1, const UInt8 *a2, CFURLRef baseURL)
{
  CFIndex v5;
  CFIndex v6;
  CFURLRef v7;
  std::runtime_error *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFURLCreateWithBytes(0, a2, v6, 0, baseURL);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return a1;
}

void sub_249CFEF5C(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x24BD02B80](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x24BD02B80](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_249CFF064(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x24BD02D00](v1 + 416);
  _Unwind_Resume(a1);
}

void std::ofstream::close(_QWORD *a1)
{
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x24BD02B8C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x24BD02D00](a1 + 52);
  return a1;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_249CFF668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

BOOL vg::hrtf::EncoderModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _BOOL8 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  VGMLHRTFEncoderModel *v19;
  void *v20;
  uint64_t v21;
  std::string v23;
  id v24;
  id v25;
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[2];
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v6 = objc_alloc(MEMORY[0x24BDD17C8]);
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  v8 = (void *)objc_msgSend(v6, "initWithCString:", v7);
  v25 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v8, 0, &v25);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v25;
  if (v10)
  {
    v11 = v10;
    v12 = 0;
  }
  else
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v9, 0, &v24);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v24;
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("properties"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    v12 = 0;
    if (!v11 && v14)
    {
      v29[0] = v8;
      v28[0] = CFSTR("model_path");
      v28[1] = CFSTR("config");
      v26[0] = CFSTR("version");
      objc_msgSend(v14, "objectForKeyedSubscript:");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = v16;
      v27[1] = CFSTR("CPU");
      v26[1] = CFSTR("engine");
      v26[2] = CFSTR("input_name");
      v26[3] = CFSTR("output_name");
      v27[2] = &unk_251B34A30;
      v27[3] = &unk_251B34A48;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v27, v26, 4);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v29[1] = v17;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = -[VGMLEspressoModel initWithModelInfo:]([VGMLHRTFEncoderModel alloc], "initWithModelInfo:", v18);
      v20 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v19;

      v21 = *(_QWORD *)(a1 + 24);
      v12 = v21 != 0;
      if (v21)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v23);
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        *(std::string *)a1 = v23;
      }

    }
  }

  return v12;
}

void sub_249CFFB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  size_t v7;
  void *v8;
  VGMLFloatIOData *v9;
  void *memptr;

  v6 = objc_msgSend(*(id *)(a1 + 24), "getOutputSize");
  v7 = (4 * v6 + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
  v8 = memptr;
  v9 = -[VGMLFloatIOData initWithSize:withData:]([VGMLFloatIOData alloc], "initWithSize:withData:", v6, memptr);
  objc_msgSend(*(id *)(a1 + 24), "inferCaptureData:toOutput:", a2, v9);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v7 >> 2;
  *(_DWORD *)(a3 + 16) = v6;
  *(_BYTE *)(a3 + 24) = 1;

}

void sub_249CFFC48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  free(v1);
  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModelEspresso::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = (_OWORD *)operator new();
  *v7 = 0u;
  v7[1] = 0u;
  *v6 = (uint64_t)v7;
  v9 = v6;
  if (vg::hrtf::EncoderModelEspressoImpl::init((uint64_t)v7, a1, a2))
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249CFFD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::EncoderModelEspresso *vg::hrtf::EncoderModelEspresso::EncoderModelEspresso(vg::hrtf::EncoderModelEspresso *this)
{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::EncoderModelEspresso::~EncoderModelEspresso(vg::hrtf::EncoderModelEspresso *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::EncoderModelEspresso::predictEncodings(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::EncoderModelEspressoImpl::predict(*a1, a2, a3);
}

id vg::hrtf::getAssetWithError(_QWORD **a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  void *v29;
  id v30;
  id v32;
  void *v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  VGLogHRTFMobileAssetUtils();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetAssetWithError", (const char *)&unk_249D51699, buf, 2u);
  }

  vg::shared::getAssetsForType((void *)vg::hrtf::detail::kAssetType, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    VGLogHRTFMobileAssetUtils();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_249CAD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "FilterAssets", (const char *)&unk_249D51699, buf, 2u);
    }

    v7 = objc_msgSend(v5, "count");
    VGLogHRTFMobileAssetUtils();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v7)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v9, OS_LOG_TYPE_INFO, "Filtering assets...", buf, 2u);
      }

      objc_msgSend(MEMORY[0x24BDD1758], "predicateWithBlock:", &__block_literal_global_184);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "filteredArrayUsingPredicate:", v10);
      v9 = objc_claimAutoreleasedReturnValue();

      if (-[NSObject count](v9, "count"))
      {
        -[NSObject sortedArrayUsingComparator:](v9, "sortedArrayUsingComparator:", &__block_literal_global_187);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "lastObject");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "attributes");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = v5;
        objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x24BE66AB0]);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "integerValue");

        objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x24BE66A90]);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "integerValue");

        objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x24BE66A88]);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "integerValue");

        v19 = v14;
        VGLogHRTFMobileAssetUtils();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v11, "assetType");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "assetId");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138413314;
          v35 = v21;
          v36 = 2112;
          v37 = v22;
          v38 = 2048;
          v39 = v19;
          v40 = 2048;
          v41 = v16;
          v42 = 2048;
          v43 = v18;
          _os_log_impl(&dword_249CAD000, v20, OS_LOG_TYPE_INFO, "Selected asset {%@, %@} (mastered version: %zu, content version: %zu, compatibility version: %zu)", buf, 0x34u);

        }
        v5 = v32;
        if ((objc_msgSend(v11, "refreshState") & 1) != 0)
        {
          v23 = v11;
        }
        else
        {
          VGLogHRTFMobileAssetUtils();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v11, "assetType");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "assetId");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            vg::hrtf::getAssetWithError(v28, v29, (uint64_t)buf, v27);
          }

          v23 = 0;
        }

      }
      else
      {
        VGLogHRTFMobileAssetUtils();
        v24 = objc_claimAutoreleasedReturnValue();
        v33 = v24;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          vg::hrtf::getAssetWithError(v24, v25, v26);
        v23 = 0;
      }

    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        vg::hrtf::getAssetWithError(v9);
      v23 = 0;
    }

    ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke();
    if (v23)
      v30 = v23;

  }
  else
  {
    v23 = 0;
  }

  ___ZN2vg4hrtf17getAssetWithErrorERNS_6shared15NSErrorCWrapperE_block_invoke();
  return v23;
}

void sub_249D00258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke();
  ___ZN2vg4hrtf17getAssetWithErrorERNS_6shared15NSErrorCWrapperE_block_invoke();
  _Unwind_Resume(a1);
}

id VGLogHRTFMobileAssetUtils(void)
{
  if (VGLogHRTFMobileAssetUtils(void)::onceToken != -1)
    dispatch_once(&VGLogHRTFMobileAssetUtils(void)::onceToken, &__block_literal_global_178);
  return (id)VGLogHRTFMobileAssetUtils(void)::handle;
}

void ___ZN2vg4hrtf17getAssetWithErrorERNS_6shared15NSErrorCWrapperE_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogHRTFMobileAssetUtils();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetAssetWithError", (const char *)&unk_249D51699, v1, 2u);
  }

}

void ___ZL25VGLogHRTFMobileAssetUtilsv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "HRTFMobileAssetUtils");
  v1 = (void *)VGLogHRTFMobileAssetUtils(void)::handle;
  VGLogHRTFMobileAssetUtils(void)::handle = (uint64_t)v0;

}

void sub_249D00440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogHRTFMobileAssetUtils();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "FilterAssets", (const char *)&unk_249D51699, v1, 2u);
  }

}

BOOL ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke_182(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "attributes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x24BE66A88]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "integerValue");

  return v4 == 1;
}

void sub_249D0052C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke_185(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a3;
  objc_msgSend(a2, "attributes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "attributes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *MEMORY[0x24BE66A90];
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x24BE66A90]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "integerValue");

  objc_msgSend(v6, "objectForKeyedSubscript:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "integerValue");

  if (v9 == v11)
  {
    v12 = *MEMORY[0x24BE66AB0];
    objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x24BE66AB0]);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "integerValue");

    objc_msgSend(v6, "objectForKeyedSubscript:", v12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "integerValue");

    v17 = 1;
    if (v14 <= v16)
      v17 = -1;
    if (v14 == v16)
      v18 = 0;
    else
      v18 = v17;
  }
  else if (v9 > v11)
  {
    v18 = 1;
  }
  else
  {
    v18 = -1;
  }

  return v18;
}

void sub_249D00668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249D006AC()
{
  JUMPOUT(0x249D0069CLL);
}

void sub_249D006B4()
{
  JUMPOUT(0x249D006A0);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void vg::hrtf::getAssetWithError(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, "No assets found for filtering!", v1, 2u);
}

void vg::hrtf::getAssetWithError(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = 138412546;
  v4 = vg::hrtf::detail::kAssetType;
  v5 = 2048;
  v6 = 1;
  OUTLINED_FUNCTION_0_0(&dword_249CAD000, a1, a3, "Unable to find any compatible assets for asset type %@ with compatibility version %zu", (uint8_t *)&v3);
}

void vg::hrtf::getAssetWithError(void *a1, void *a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 138412546;
  *(_QWORD *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  OUTLINED_FUNCTION_0_0(&dword_249CAD000, a4, a3, "Failed to refresh state for asset {%@, %@}", (uint8_t *)a3);

}

uint64_t vg::hrtf::getDelaySlopeAtFront(_DWORD *a1)
{
  NSObject *v1;
  uint8_t v3[16];

  if (a1[4] > 0x562u)
    return COERCE_UNSIGNED_INT((float)(*(float *)(*(_QWORD *)a1 + 5512) - *(float *)(*(_QWORD *)a1 + 5452)) / 45.0) | 0x100000000;
  __VGLogSharedInstance();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_249CAD000, v1, OS_LOG_TYPE_ERROR, " Invalid delay size. ", v3, 2u);
  }

  return 0;
}

uint64_t vg::hrtf::computeHRTFSD(uint64_t a1)
{
  float32x4_t *v1;
  float v2;
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  NSObject *v7;
  uint8_t v8[16];

  if (*(_DWORD *)(a1 + 16) == 284160)
  {
    v1 = *(float32x4_t **)a1;
    v2 = 0.0;
    v3 = 284160;
    do
    {
      v4 = *v1++;
      v5 = vabsq_f32(v4);
      v2 = (float)((float)((float)(v2 + v5.f32[0]) + v5.f32[1]) + v5.f32[2]) + v5.f32[3];
      v3 -= 4;
    }
    while (v3);
    return COERCE_UNSIGNED_INT((float)(v2 * 50.38) / 284160.0) | 0x100000000;
  }
  else
  {
    __VGLogSharedInstance();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_249CAD000, v7, OS_LOG_TYPE_ERROR, " Invalid hrtf size. ", v8, 2u);
    }

    return 0;
  }
}

id vg::hrtf::createAnalyticsData(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t DelaySlopeAtFront;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t *v21;
  void *v22;
  id v24;
  _QWORD v25[6];
  _QWORD v26[7];

  v26[6] = *MEMORY[0x24BDAC8D0];
  DelaySlopeAtFront = vg::hrtf::getDelaySlopeAtFront(a4);
  if ((DelaySlopeAtFront & 0xFF00000000) != 0)
    v9 = (uint64_t)(float)(*(float *)&DelaySlopeAtFront * 1000.0);
  else
    v9 = 0;
  v10 = vg::hrtf::computeHRTFSD(a2 + 24);
  if ((v10 & 0xFF00000000) != 0)
    v11 = (uint64_t)(float)(*(float *)&v10 * 1000.0);
  else
    v11 = 0;
  v25[0] = CFSTR("DTheta");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v12;
  v25[1] = CFSTR("SpatialDistance");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v26[1] = v13;
  v25[2] = CFSTR("AutoEncoderLatent1");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", (uint64_t)(float)(**(float **)a1 * 1000.0));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v26[2] = v14;
  v25[3] = CFSTR("AutoEncoderLatent2");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", (uint64_t)(float)(*(float *)(*(_QWORD *)a1 + 4) * 1000.0));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v26[3] = v15;
  v25[4] = CFSTR("AutoEncoderLatent3");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", (uint64_t)(float)(*(float *)(*(_QWORD *)a1 + 8) * 1000.0));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v26[4] = v16;
  v25[5] = CFSTR("AutoEncoderLatent4");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", (uint64_t)(float)(*(float *)(*(_QWORD *)a1 + 12) * 1000.0));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v26[5] = v17;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, v25, 6);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (*((_BYTE *)a5 + 24))
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v18, 1, &v24);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v24;
    if (!v20)
    {
      if (!*((_BYTE *)a5 + 24))
        std::__throw_bad_optional_access[abi:ne180100]();
      if (*((char *)a5 + 23) >= 0)
        v21 = a5;
      else
        v21 = (uint64_t *)*a5;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "writeToFile:atomically:", v22, 1);

    }
  }
  return v18;
}

void sub_249D00C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void vg::hrtf::reportCoreAnalytics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  _QWORD v6[9];

  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = ___ZN2vg4hrtf19reportCoreAnalyticsERKN3cva6MatrixIfLj0ELj1ELb0EEERKNS0_8HRTFDataES8_RKNS0_9DelayDataERKNSt3__18optionalINSC_12basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEE_block_invoke;
  v6[3] = &__block_descriptor_72_e19___NSDictionary_8__0l;
  v6[4] = a1;
  v6[5] = a2;
  v6[6] = a3;
  v6[7] = a4;
  v6[8] = a5;
  v5 = (void *)MEMORY[0x24BD03294](v6);
  AnalyticsSendEventLazy();

}

void sub_249D00D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZN2vg4hrtf19reportCoreAnalyticsERKN3cva6MatrixIfLj0ELj1ELb0EEERKNS0_8HRTFDataES8_RKNS0_9DelayDataERKNSt3__18optionalINSC_12basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vg::hrtf::createAnalyticsData(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a3, *(_DWORD **)(a1 + 56), *(uint64_t **)(a1 + 64));
}

BOOL vg::hrtf::DelayCoefficientsModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::size_type v5;
  _QWORD *InputPorts;
  unsigned __int8 *v7;
  _QWORD *OutputPorts;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t v13;
  E5RT::OperandDescriptor *v14;
  uint64_t v15;
  _BOOL8 result;
  std::string::size_type v17;
  std::string::size_type v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  E5RT::ExecutionStream *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type v30;
  void **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::string __p;

  vg::shared::VGE5RT::compileModel(a2, 0, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1, (uint64_t *)&__p);
  v5 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v5)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v5 + 8))(v5);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "face_encodings");
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), (uint64_t *)v7 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "left_delay");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), (uint64_t *)v9 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "right_delay");
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, (unsigned __int8 *)&__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::shared_ptr<E5RT::IOPort>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), (uint64_t *)v11 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  v13 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 64));
  v15 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v14);
  result = 0;
  if (v13 && v15)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)(a1 + 80), (uint64_t *)&__p);
    v17 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v17)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v17 + 8))(v17);
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)(a1 + 96), (uint64_t *)&__p);
    v18 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v18)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(std::__shared_weak_count **)(a1 + 88);
    v33 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    E5RT::IOPort::BindMemoryObject();
    if (v33)
    {
      v22 = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v24 = *(std::__shared_weak_count **)(a1 + 104);
    v32 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    E5RT::ExecutionStream::CreateExecutionStream(v27);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((_QWORD *)(a1 + 16), (uint64_t *)&__p);
    v30 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v30)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v30 + 8))(v30);
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    v31 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      operator delete(*v31);
    *(_OWORD *)v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    return *(_QWORD *)(a1 + 16) && *(_QWORD *)a1 != 0;
  }
  return result;
}

void sub_249D01088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DelayCoefficientsModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  E5RT::OperandDescriptor *PortDescriptorRef;
  vg::shared::VGE5RT *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  NSObject *v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  vg::shared::VGE5RT *v18;
  vg::shared::VGE5RT *v19;
  E5RT::OperandDescriptor *v20;
  IOSurface *v21;
  E5RT::OperandDescriptor *v22;
  IOSurface *v23;
  const E5RT::TensorDescriptor *v24;
  const E5RT::TensorDescriptor *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  if (*(_DWORD *)(a2 + 16) == 32)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    vg::shared::VGE5RT::convert1DVectorToSurface(a2, v7);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    v34 = v28[0];
    if (v28[0])
    {
      v8 = (std::__shared_weak_count *)operator new();
      v9 = (std::__shared_weak_count_vtbl *)v28[0];
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_251B22DB0;
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8[1].__vftable = v9;
    }
    else
    {
      v8 = 0;
    }
    v35 = v8;
    v28[0] = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v35)
    {
      p_shared_owners = &v35->__shared_owners_;
      do
        v12 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v28[0] = 0;
    v13 = (std::__shared_weak_count *)a1[1];
    v32 = *a1;
    v33 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v33)
    {
      v16 = &v33->__shared_owners_;
      do
        v17 = __ldaxr((unint64_t *)v16);
      while (__stlxr(v17 - 1, (unint64_t *)v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    v18 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    v19 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    v20 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
    v21 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v20);
    v22 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[8]);
    v23 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v22);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v19, v23, v24, (uint64_t)v28);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v18, v21, v25, (uint64_t)v30);
    v26 = v28[1];
    *(_QWORD *)a3 = v28[0];
    *(_QWORD *)(a3 + 8) = v26;
    *(_DWORD *)(a3 + 16) = v29;
    v27 = v30[1];
    *(_QWORD *)(a3 + 24) = v30[0];
    *(_QWORD *)(a3 + 32) = v27;
    *(_DWORD *)(a3 + 40) = v31;
    *(_BYTE *)(a3 + 48) = 1;

  }
  else
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v28[0]) = 0;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " Face encoding input dimension mismatch. ", (uint8_t *)v28, 2u);
    }

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
}

void sub_249D0135C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a9)
    (*(void (**)(void *))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DelayCoefficientsModel::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  v6 = (uint64_t *)operator new();
  v7 = operator new();
  *(_QWORD *)(v7 + 128) = 0;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *v6 = v7;
  v9 = v6;
  if (vg::hrtf::DelayCoefficientsModelImpl::init(v7, a1, a2))
  {
    *a3 = v9;
  }
  else
  {
    *a3 = 0;
    v8 = v9;
    v9 = 0;
    if (v8)
      std::default_delete<vg::hrtf::DTFModel>::operator()[abi:ne180100]((uint64_t)&v9, v8);
  }
}

void sub_249D0148C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<vg::hrtf::DTFModel>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

vg::hrtf::DelayCoefficientsModel *vg::hrtf::DelayCoefficientsModel::DelayCoefficientsModel(vg::hrtf::DelayCoefficientsModel *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void vg::hrtf::DelayCoefficientsModel::~DelayCoefficientsModel(vg::hrtf::DelayCoefficientsModel *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::DTFModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<vg::hrtf::DTFModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void vg::hrtf::DelayCoefficientsModel::predictDelayCoefficients(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vg::hrtf::DelayCoefficientsModelImpl::predict(*a1, a2, a3);
}

BOOL vg::hrtf::checkAspectRatio(vg::hrtf *this, const IOSurface *a2, float a3)
{
  vg::hrtf *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  vg::frame_selection::VGBlendshapeExpressionFilter *v9;
  vg::frame_selection::VGBlendshapeExpressionFilter *v10;

  v4 = this;
  v5 = -[vg::hrtf height](v4, "height");
  v6 = -[vg::hrtf width](v4, "width");
  if (v5 <= 0)
  {
    v9 = (vg::frame_selection::VGBlendshapeExpressionFilter *)_os_crash();
    vg::frame_selection::VGBlendshapeExpressionFilter::~VGBlendshapeExpressionFilter(v9);
  }
  if (v6 <= 0)
  {
    v10 = (vg::frame_selection::VGBlendshapeExpressionFilter *)_os_crash();
    vg::frame_selection::VGBlendshapeExpressionFilter::~VGBlendshapeExpressionFilter(v10);
  }
  v7 = vabds_f32((float)v6 / (float)v5, a3) <= 0.00000001;

  return v7;
}

void sub_249D01678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL vg::hrtf::isBoxValid(_OWORD *a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  float v4;
  _BOOL4 v7;

  v2 = *a1;
  if (COERCE_FLOAT(*a1) < 0.0)
    return 0;
  v3 = *a2;
  v4 = (float)*a2;
  if (*(float *)&v2 > v4 || *((float *)&v2 + 1) < 0.0 || *((float *)&v2 + 1) > (float)HIDWORD(v3))
    return 0;
  if (*((float *)&v2 + 2) < 0.0 || *((float *)&v2 + 2) > v4)
    return 0;
  v7 = *((float *)&v2 + 3) >= 0.0;
  if (*((float *)&v2 + 3) > (float)HIDWORD(v3))
    v7 = 0;
  if (*((float *)&v2 + 2) < *(float *)&v2)
    v7 = 0;
  return *((float *)&v2 + 3) >= *((float *)&v2 + 1) && v7;
}

double vg::hrtf::padBox(int8x16_t *a1, float a2)
{
  float32x4_t v2;
  double result;

  *(float32x2_t *)v2.f32 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), *(float32x2_t *)a1->i8), a2);
  v2.i64[1] = v2.i64[0];
  *(_QWORD *)&result = vsubq_f32(*(float32x4_t *)a1, v2).u64[0];
  return result;
}

double vg::hrtf::makeBoxWithAspectRatio(float *a1, uint32x2_t *a2, _QWORD *a3)
{
  int32x4_t v3;
  float32x4_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  int32x4_t v37;

  *(uint32x2_t *)v3.i8 = *a2;
  *(float32x2_t *)v4.f32 = vcvt_f32_u32(*a2);
  v5 = vcvtps_s32_f32(a1[2] * v4.f32[0]);
  v6 = vcvtms_s32_f32(*a1 * v4.f32[0]);
  v7 = vcvtps_s32_f32(vmuls_lane_f32(a1[3], *(float32x2_t *)v4.f32, 1));
  v8 = vcvtms_s32_f32(vmuls_lane_f32(a1[1], *(float32x2_t *)v4.f32, 1));
  v9 = v5 - v6;
  v10 = HIDWORD(*a3);
  v11 = *a3;
  v12 = v11 * v10;
  v13 = (float)v11 / (float)v10;
  v14 = (int)(v5 - v6) % (v11 * v10);
  if (v14)
    v15 = v12 - v14;
  else
    v15 = 0;
  v16 = v9 + v15;
  v17 = (int)(float)((float)v16 / v13);
  v18 = v7 - v8;
  v19 = (int)(v7 - v8) % v12;
  v20 = v7 - v8 + v12 - v19;
  if (!v19)
    v20 = v7 - v8;
  if (v18 > v17)
  {
    v16 = (int)(float)(v13 * (float)v20);
    v17 = v20;
  }
  v21 = v17 - v18;
  v22 = v16 - v9;
  v23 = v6 - (v22 >> 1);
  v24 = v22 - (v22 >> 1) + v5;
  v25 = v8 - (v21 >> 1);
  v26 = v21 - (v21 >> 1) + v7;
  v27 = v24 - (v23 & (v23 >> 31));
  v28 = v23 & ~(v23 >> 31);
  v29 = v23 + v3.i32[0] - v24;
  v30 = v24 < v3.i32[0];
  if (v24 >= v3.i32[0])
    v31 = *a2;
  else
    v31 = v27;
  if (v30)
    v29 = v28;
  v32 = v26 - (v25 & (v25 >> 31));
  v33 = v25 & ~(v25 >> 31);
  v34 = v25 + v3.i32[1] - v26;
  v35 = v26 < v3.i32[1];
  if (v26 >= v3.i32[1])
    v36 = HIDWORD(*(unint64_t *)a2);
  else
    v36 = v32;
  if (v35)
    v34 = v33;
  v4.i64[1] = v4.i64[0];
  v3.u64[1] = (unint64_t)*a2;
  v37.i64[0] = __PAIR64__(v34, v29);
  v37.i64[1] = __PAIR64__(v36, v31);
  v3.i64[0] = vdivq_f32(vcvtq_f32_s32(vminq_s32(vmaxq_s32(v37, (int32x4_t)0), v3)), v4).u64[0];
  return *(double *)v3.i64;
}

id vg::hrtf::createEqualizerList(uint64_t a1, uint64_t a2)
{
  void *v4;
  tm *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void **v9;
  void *v10;
  void *v11;
  __int128 *v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t i;
  void *v18;
  void *v19;
  uint64_t j;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28[2];
  char v29;
  _QWORD v30[4];
  _QWORD v31[4];
  uint8_t buf[8];
  _QWORD v33[10];
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *tm_zone;
  _QWORD v40[2];
  _QWORD v41[2];
  time_t v42[2];
  __int128 *v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v31[0] = &unk_251B34C58;
  v30[0] = CFSTR("QVersion");
  v30[1] = CFSTR("ExportDate");
  v4 = (void *)MEMORY[0x24BDD17C8];
  v42[0] = time(0);
  v5 = localtime(v42);
  v6 = *(_OWORD *)&v5->tm_sec;
  v7 = *(_OWORD *)&v5->tm_mon;
  v8 = *(_OWORD *)&v5->tm_isdst;
  tm_zone = v5->tm_zone;
  v37 = v7;
  v38 = v8;
  v36 = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  v43 = &v36;
  v44 = "%d-%m-%Y %H-%M-%S";
  std::operator<<[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)&v43);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, v28);
  *(_QWORD *)buf = *MEMORY[0x24BEDB800];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v33[0] = MEMORY[0x24BEDB848] + 16;
  if (v34 < 0)
    operator delete((void *)v33[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24BD02D00](&v35);
  if (v29 >= 0)
    v9 = v28;
  else
    v9 = (void **)v28[0];
  objc_msgSend(v4, "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v31[1] = v10;
  v30[2] = CFSTR("Global");
  *(_QWORD *)&v36 = CFSTR("Filter");
  *((_QWORD *)&v36 + 1) = CFSTR("PhaseCompensate");
  *(_QWORD *)buf = &unk_251B34C58;
  v33[0] = &unk_251B34C70;
  *(_QWORD *)&v37 = CFSTR("PhaseFlip");
  *((_QWORD *)&v37 + 1) = CFSTR("Mute");
  v33[1] = &unk_251B34C70;
  v33[2] = &unk_251B34C70;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", buf, &v36, 4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = (time_t)CFSTR("ch1");
  v12 = (__int128 *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithDictionary:copyItems:", v11, 1);
  v42[1] = (time_t)CFSTR("ch2");
  v43 = v12;
  v13 = (char *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithDictionary:copyItems:", v11, 1);
  v44 = v13;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v43, v42, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v40[0] = CFSTR("Channels");
  v40[1] = CFSTR("InputGain");
  v41[0] = v14;
  v41[1] = &unk_251B34C70;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v41, v40, 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v31[2] = v15;
  v30[3] = CFSTR("Filters");
  v16 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  if (*(_BYTE *)(a1 + 24))
  {
    for (i = 0; i != 6; ++i)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addObject:", v19);

    }
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_14;
LABEL_12:
    for (j = 0; j != 6; ++j)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addObject:", v22);

    }
    goto LABEL_14;
  }
  if (*(_BYTE *)(a2 + 24))
    goto LABEL_12;
  __VGLogSharedInstance();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v25, OS_LOG_TYPE_INFO, " No coefficients found - generating bypass EQ filter ", buf, 2u);
  }

  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v27);

LABEL_14:
  v31[3] = v16;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v31, v30, 4);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29 < 0)
    operator delete(v28[0]);
  return v23;
}

void sub_249D01CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_249D01E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x24BD02D00](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2)
{
  const std::ios_base *v4;
  const std::locale::facet *v5;
  std::ios_base::fmtflags v6;
  _BYTE v8[16];
  std::locale v9;

  MEMORY[0x24BD02BBC](v8, a1);
  if (v8[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    std::locale::use_facet(&v9, MEMORY[0x24BEDB598]);
    std::locale::~locale(&v9);
    v4 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    if (v4[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v4);
      v5 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
      v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
      std::locale::~locale(&v9);
      v4[1].__fmtflags_ = v6;
    }
    strlen(*(const char **)(a2 + 8));
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put())
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
  }
  MEMORY[0x24BD02BC8](v8);
  return a1;
}

void sub_249D01FAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x24BD02BC8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x249D01F8CLL);
}

void sub_249D01FFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24BD02D00](a1 + 112);
  return a1;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

id vg::hrtf::`anonymous namespace'::createSideChannels(int a1)
{
  id v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  v6[0] = CFSTR("Filter");
  v6[1] = CFSTR("PhaseCompensate");
  v7[0] = &unk_251B34C58;
  v7[1] = &unk_251B34C70;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (a1)
  {
    objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("ch2"));
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithDictionary:copyItems:", v3, 1);
    objc_msgSend(v4, "setValue:forKey:", &unk_251B34C70, CFSTR("Filter"));
    objc_msgSend(v2, "setValue:forKey:", v4, CFSTR("ch1"));
  }
  else
  {
    objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("ch1"));
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithDictionary:copyItems:", v3, 1);
    objc_msgSend(v4, "setValue:forKey:", &unk_251B34C70, CFSTR("Filter"));
    objc_msgSend(v2, "setValue:forKey:", v4, CFSTR("ch2"));
  }

  return v2;
}

void sub_249D022E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id vg::hrtf::`anonymous namespace'::createFilterDictionary(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  double v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  NSObject *v10;
  double v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  const char *v17;
  uint8_t v19[8];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[6];
  _QWORD v23[7];

  v23[6] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (!*(_BYTE *)(a1 + 24))
  {
    v20[0] = CFSTR("Gain");
    v20[1] = CFSTR("Type");
    v21[0] = &unk_251B34C70;
    v21[1] = CFSTR("Gain");
    v20[2] = CFSTR("Channels");
    v10 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithDictionary:copyItems:", v5, 1);
    v20[3] = CFSTR("Active");
    v21[2] = v10;
    v21[3] = &unk_251B34C70;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v21, v20, 4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  v7 = a2 + 6;
  v8 = *(unsigned int *)(a1 + 16);
  if (a2 + 6 >= v8)
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v19 = 0;
      v17 = " Gain value missing in EQ Coefficients data. ";
LABEL_10:
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, v17, v19, 2u);
    }
LABEL_11:
    v16 = 0;
    goto LABEL_12;
  }
  v9 = a2 + 12;
  if (a2 + 12 >= v8)
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v19 = 0;
      v17 = " Quality value missing in EQ Coefficients data. ";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  v22[0] = CFSTR("Frequency");
  LODWORD(v6) = *(_DWORD *)(*(_QWORD *)a1 + 4 * a2);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v6);
  v10 = objc_claimAutoreleasedReturnValue();
  v23[0] = v10;
  v22[1] = CFSTR("Gain");
  LODWORD(v11) = *(_DWORD *)(*(_QWORD *)a1 + 4 * v7);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = v12;
  v22[2] = CFSTR("Quality");
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a1 + 4 * v9);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v23[2] = v14;
  v23[3] = CFSTR("Bell");
  v22[3] = CFSTR("Type");
  v22[4] = CFSTR("Channels");
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithDictionary:copyItems:", v5, 1);
  v22[5] = CFSTR("Active");
  v23[4] = v15;
  v23[5] = &unk_251B34C58;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v23, v22, 6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_12:
  return v16;
}

void sub_249D025B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

IOSurface *vg::hrtf::createNormalizedDepth(vg::hrtf *this, const IOSurface *a2)
{
  vg::hrtf *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IOSurface *v11;
  uint64_t v12;
  float *v13;
  char *v14;
  char *v15;
  float *v16;
  char *v17;
  char *v18;
  float *v19;
  float *v20;
  uint64_t i;
  float v22;
  float v23;
  float v24;
  id v26[5];
  id v27[5];
  _QWORD v28[4];
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v2 = this;
  if (-[vg::hrtf pixelFormat](v2, "pixelFormat") == 1278226534
    || -[vg::hrtf pixelFormat](v2, "pixelFormat") == 1717855600)
  {
    v3 = -[vg::hrtf width](v2, "width");
    v4 = -[vg::hrtf height](v2, "height");
    v5 = objc_alloc(MEMORY[0x24BDD8DE8]);
    v28[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = v6;
    v28[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *MEMORY[0x24BDD8D60];
    v29[1] = v7;
    v29[2] = &unk_251B34C88;
    v9 = *MEMORY[0x24BDD8D38];
    v28[2] = v8;
    v28[3] = v9;
    v29[3] = &unk_251B34CA0;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (IOSurface *)objc_msgSend(v5, "initWithProperties:", v10);

    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v27, v11, 0);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v26, (IOSurface *)v2, 1);
    if (v4)
    {
      v12 = 0;
      v13 = (float *)v26[2];
      v14 = (char *)v26[3];
      v15 = (char *)v26[4];
      v16 = (float *)v27[2];
      v17 = (char *)v27[3];
      v18 = (char *)v27[4];
      do
      {
        v19 = v16;
        v20 = v13;
        for (i = v3; i; --i)
        {
          v22 = (float)(*v20 + -0.2) / 0.4;
          if (v22 <= 1.0)
            v23 = (float)(*v20 + -0.2) / 0.4;
          else
            v23 = 1.0;
          if (v22 >= 0.0)
            v24 = v23;
          else
            v24 = 0.0;
          *v19 = v24;
          v20 = (float *)&v15[(_QWORD)v20];
          v19 = (float *)&v18[(_QWORD)v19];
        }
        ++v12;
        v13 = (float *)&v14[(_QWORD)v13];
        v16 = (float *)&v17[(_QWORD)v16];
      }
      while (v12 != v4);
    }
    vg::IOSurfaceData::~IOSurfaceData(v26);
    vg::IOSurfaceData::~IOSurfaceData(v27);
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_249D02858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

void vg::hrtf::preprocessCaptureData(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  float64x2_t v10;
  unsigned int v11;
  float32x4_t v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  float64x2_t v16;
  IOSurface *v17;
  void *v18;
  void *v19;
  IOSurface *v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  vg::hrtf *v28;
  const IOSurface *v29;
  vg::hrtf *v30;
  IOSurface *v31;
  IOSurface *v32;
  void *v33;
  const IOSurface *v34;
  void *v35;
  int v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  float32x4_t v44;
  void *context;
  void *v46;
  uint64_t v47;
  IOSurface *v48;
  void *v50;
  float32x4_t v51;
  void *v52;
  uint8_t buf[8];
  id v54;
  id v55;
  id v56;
  id v57;
  int8x16_t v58;
  int8x16_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;

  context = (void *)MEMORY[0x24BD03120]();
  v64 = 0uLL;
  v65 = 0;
  std::vector<vg::hrtf::ProcessedROIData>::reserve((uint64_t *)&v64, (a1[1] - *a1) >> 5);
  v7 = *a1;
  v47 = a1[1];
  if (*a1 == v47)
  {
LABEL_32:
    *(_OWORD *)a4 = v64;
    *(_QWORD *)(a4 + 16) = v65;
    v65 = 0;
    v64 = 0uLL;
    *(_BYTE *)(a4 + 24) = 1;
  }
  else
  {
    v8.i64[0] = a3;
    v8.i64[1] = a2;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v10 = vcvtq_f64_u64((uint64x2_t)vaddq_s64(v8, v9));
    v44 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v10);
    while (1)
    {
      v63 = 0x400000003;
      v11 = objc_msgSend(*(id *)(v7 + 8), "width", *(_OWORD *)&v44, context);
      *(_QWORD *)buf = __PAIR64__(objc_msgSend(*(id *)(v7 + 8), "height"), v11);
      *(double *)v12.i64 = vg::hrtf::makeBoxWithAspectRatio((float *)(v7 + 16), (uint32x2_t *)buf, &v63);
      v51 = v12;
      v13 = objc_msgSend(*(id *)v7, "height");
      v14.i64[0] = objc_msgSend(*(id *)v7, "width");
      v14.i64[1] = v13;
      v15.i64[0] = -1;
      v15.i64[1] = -1;
      v16 = vcvtq_f64_s64(vaddq_s64(v14, v15));
      v62 = vcvtq_u32_f32(vmulq_f32(v51, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v16)));
      createCropAndScaledSurface(*(void **)v7, (int8x16_t *)&v62, a2, a3);
      v17 = (IOSurface *)objc_claimAutoreleasedReturnValue();
      if (!v17)
        break;
      vg::shared::getPersonSegmentationMapFromVision(*(void **)v7, 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v18;
      if (!v18)
      {
        __VGLogSharedInstance();
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_249CAD000, v43, OS_LOG_TYPE_ERROR, " Failed to get person segmentation mask. ", buf, 2u);
        }

        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 24) = 0;

        goto LABEL_39;
      }
      createCropAndScaledSurface(v18, (int8x16_t *)&v62, a2, a3);
      v20 = (IOSurface *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        createMaskedImageARGB32(v17, v20, 0.5, 255);
        v48 = (IOSurface *)objc_claimAutoreleasedReturnValue();
        create32BGRASurfaceFrom32ARGBSurface(v48);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(*(id *)(v7 + 8), "height");
        v22.i64[0] = objc_msgSend(*(id *)(v7 + 8), "width");
        v22.i64[1] = v21;
        v23.i64[0] = -1;
        v23.i64[1] = -1;
        v24 = vcvtq_f64_s64(vaddq_s64(v22, v23));
        v61 = vcvtq_u32_f32(vmulq_f32(v51, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24), v24)));
        v25 = a2;
        v26 = a2;
        v27 = a3;
        createCropAndScaledSurface(*(void **)(v7 + 8), (int8x16_t *)&v61, v26, a3);
        v28 = (vg::hrtf *)objc_claimAutoreleasedReturnValue();
        v30 = v28;
        if (v28)
        {
          vg::hrtf::createNormalizedDepth(v28, v29);
          v31 = (IOSurface *)objc_claimAutoreleasedReturnValue();
          v32 = v31;
          if (v31)
          {
            createMaskedImage1CF32(v31, v20, 0.5, 1.0);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = vcvtq_u32_f32(vmulq_f32(v51, v44));
            v52 = v33;
            createFloat32SurfaceWithROI(v33, (int8x16_t *)&v60);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            if (v46)
            {
              vg::hrtf::createNormalizedDepth(*(vg::hrtf **)(v7 + 8), v34);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              if (v35)
              {
                *(_QWORD *)buf = v50;
                v54 = v52;
                v55 = v46;
                v56 = *(id *)v7;
                v57 = v35;
                v58 = (int8x16_t)v62;
                v59 = (int8x16_t)v61;
                std::vector<vg::hrtf::ProcessedROIData>::emplace_back<vg::hrtf::ProcessedROIData&>((uint64_t *)&v64, (uint64_t)buf);

                v36 = 0;
              }
              else
              {
                __VGLogSharedInstance();
                v41 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_249CAD000, v41, OS_LOG_TYPE_ERROR, " Failed normalize depth image. ", buf, 2u);
                }

                *(_BYTE *)a4 = 0;
                *(_BYTE *)(a4 + 24) = 0;
                v36 = 1;
              }

            }
            else
            {
              __VGLogSharedInstance();
              v40 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_249CAD000, v40, OS_LOG_TYPE_ERROR, " Failed to crop and rescale global depth image. ", buf, 2u);
              }

              *(_BYTE *)a4 = 0;
              *(_BYTE *)(a4 + 24) = 0;
              v36 = 1;
            }

          }
          else
          {
            __VGLogSharedInstance();
            v39 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_249CAD000, v39, OS_LOG_TYPE_ERROR, " Failed normalize depth image. ", buf, 2u);
            }

            *(_BYTE *)a4 = 0;
            *(_BYTE *)(a4 + 24) = 0;
            v36 = 1;
          }

        }
        else
        {
          __VGLogSharedInstance();
          v38 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_249CAD000, v38, OS_LOG_TYPE_ERROR, " Failed to crop and rescale local depth image. ", buf, 2u);
          }

          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 24) = 0;
          v36 = 1;
        }

        a3 = v27;
        a2 = v25;
      }
      else
      {
        __VGLogSharedInstance();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_249CAD000, v37, OS_LOG_TYPE_ERROR, " Failed to crop and rescale mask. ", buf, 2u);
        }

        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 24) = 0;
        v36 = 1;
      }

      if (v36)
        goto LABEL_39;
      v7 += 32;
      if (v7 == v47)
        goto LABEL_32;
    }
    __VGLogSharedInstance();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v42, OS_LOG_TYPE_ERROR, " Failed to crop and rescale capture rgb image. ", buf, 2u);
    }

    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }
LABEL_39:
  *(_QWORD *)buf = &v64;
  std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  objc_autoreleasePoolPop(context);
}

void sub_249D02EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  a19 = (void **)(v21 - 128);
  std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::ProcessedROIData>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    std::vector<vg::hrtf::ProcessedROIData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_249D03034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::ProcessedROIData>::emplace_back<vg::hrtf::ProcessedROIData&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x333333333333333)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x199999999999999)
      v12 = 0x333333333333333;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[80 * v9];
    v18 = &v13[80 * v12];
    std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>((uint64_t)v16, a2);
    v17 = v16 + 80;
    std::vector<vg::hrtf::ProcessedROIData>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v8;
  return v8 - 80;
}

void sub_249D03158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void vg::hrtf::ProcessedROIData::~ProcessedROIData(id *this)
{

}

void vg::hrtf::preprocessFaceCaptureData(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  float32x4_t v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float *v29;
  uint64_t v30;
  float *v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  float v36;
  float v37;
  int32x4_t v38;
  int32x4_t v39;
  uint32x2_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t *v48;
  uint64_t i64;
  float32x4_t v50;
  int8x16_t v51;
  void **v52;
  id v53;
  int8x16_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;

  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<vg::hrtf::FrameROIData>::reserve(&v55, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5));
  v8 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v50 = _Q0;
    do
    {
      v15 = objc_msgSend(*(id *)v8, "width", *(_OWORD *)&v50);
      v16 = objc_msgSend(*(id *)v8, "height");
      v17 = *(_DWORD *)(v8 + 80);
      v18 = *(_QWORD *)(v8 + 64);
      if (v17)
        v19 = *(float **)(v8 + 64);
      else
        v19 = 0;
      v20 = (2 * v17);
      v21 = (float *)(v18 + 4 * v20);
      v22 = v19 + 2;
      v23 = *v19;
      if (v17 && v21 == v22)
      {
        v24.f32[0] = *v19;
      }
      else
      {
        v25 = v19 + 4;
        v24.f32[0] = v23;
        do
        {
          v26 = v25;
          if (*(v25 - 2) < v24.f32[0])
            v24.f32[0] = *(v25 - 2);
          v25 += 2;
        }
        while (!v17 || v26 != v21);
        do
        {
          v27 = *v22;
          v22 += 2;
          v28 = v27;
          if (v23 < v27)
            v23 = v28;
        }
        while (v22 != v21);
      }
      v29 = (float *)(v18 + 4);
      v30 = v18 + 4 + 4 * v20;
      v31 = (float *)(v18 + 12);
      v32 = *v29;
      if ((float *)v30 == v31)
      {
        v33 = *v29;
      }
      else
      {
        v34 = v29 + 4;
        v33 = v32;
        do
        {
          v35 = v34;
          if (*(v34 - 2) < v33)
            v33 = *(v34 - 2);
          v34 += 2;
        }
        while (v35 != (float *)v30);
        do
        {
          v36 = *v31;
          v31 += 2;
          v37 = v36;
          if (v32 < v36)
            v32 = v37;
        }
        while (v31 != (float *)v30);
      }
      v38.i64[0] = __PAIR64__(v16, v15);
      v24.f32[1] = v33;
      v24.i64[1] = __PAIR64__(LODWORD(v32), LODWORD(v23));
      v39 = vcvtq_s32_f32(v24);
      v40 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v16, v15), (int32x2_t)-1);
      *(uint32x2_t *)v41.i8 = v40;
      v41.u64[1] = (unint64_t)v40;
      v42 = (int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(v39), (int8x16_t)vminq_s32(v41, v39));
      v43 = (int32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
      *(float32x2_t *)v43.i8 = vcvt_f32_s32(vsub_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v42.i8));
      v44 = (int)vmuls_lane_f32(0.2, *(float32x2_t *)v43.i8, 1);
      *(int32x2_t *)v43.i8 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)v43.i8, (float32x2_t)0x3F19999A3ECCCCCDLL));
      v45.i64[0] = vsubq_s32(v42, v43).u64[0];
      v43.i64[1] = __PAIR64__(v44, v43.u32[0]);
      *(float32x2_t *)v46.f32 = vcvt_f32_u32(v40);
      v45.i64[1] = vaddq_s32(v42, v43).i64[1];
      v38.i64[1] = __PAIR64__(v16, v15);
      v46.i64[1] = v46.i64[0];
      v47 = vdivq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(v45), (int8x16_t)vminq_s32(v38, v45))), v46);
      v51 = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v47, v50), (int8x16_t)v50, (int8x16_t)v47), (int8x16_t)vcltzq_f32(v47));
      v52 = (void **)*(id *)v8;
      v53 = *(id *)(v8 + 8);
      v54 = v51;
      v48 = (int8x16_t *)v56;
      if (v56 >= v57)
      {
        i64 = std::vector<vg::hrtf::FrameROIData>::__emplace_back_slow_path<vg::hrtf::FrameROIData&>(&v55, (uint64_t)&v52);
      }
      else
      {
        v48->i64[0] = (uint64_t)v52;
        v48->i64[1] = (uint64_t)v53;
        v48[1] = v54;
        i64 = (uint64_t)v48[2].i64;
      }
      v56 = i64;

      v8 += 96;
    }
    while (v8 != v9);
  }
  vg::hrtf::preprocessCaptureData(&v55, a2, a3, a4);
  v52 = (void **)&v55;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&v52);
}

void sub_249D03474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a13 = (void **)&a18;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::FrameROIData>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<vg::hrtf::FrameROIData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_249D03528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void vg::hrtf::preprocessEarCaptureData(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  IOSurface *v15;
  IOSurface *v16;
  IOSurface *v17;
  id v18;
  id v19;
  __int128 v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t buf[8];
  id v32;
  id v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[8];
  IOSurface *v39;
  __int128 v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  std::vector<vg::hrtf::FrameROIData>::reserve(&v52, (a1[1] - *a1) >> 5);
  v10 = *a1;
  v11 = a1[1];
  while (v10 != v11)
  {
    *(_QWORD *)v38 = *(id *)v10;
    v39 = (IOSurface *)*(id *)(v10 + 8);
    v40 = *(_OWORD *)(v10 + 16);
    v12 = v53;
    if (v53 >= v54)
    {
      v13 = std::vector<vg::hrtf::FrameROIData>::__emplace_back_slow_path<vg::hrtf::FrameROIData&>(&v52, (uint64_t)v38);
    }
    else
    {
      *(_QWORD *)v12 = *(id *)v38;
      *(_QWORD *)(v12 + 8) = v39;
      *(_OWORD *)(v12 + 16) = v40;
      v13 = v12 + 32;
    }
    v53 = v13;

    v10 += 32;
  }
  vg::hrtf::preprocessCaptureData(&v52, a2, a3, (uint64_t)&v49);
  if (v51)
  {
    if ((a4 & 1) != 0)
    {
      v46 = 0;
      v47 = 0;
      v48 = 0;
      std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v46, v49, v50, 0xCCCCCCCCCCCCCCCDLL * ((v50 - v49) >> 4));
      v29 = a5;
      v44 = 0uLL;
      v45 = 0;
      std::vector<vg::hrtf::ProcessedROIData>::reserve((uint64_t *)&v44, (a1[1] - *a1) >> 5);
      v14 = v46;
      v30 = v47;
      if (v46 == v47)
      {
LABEL_27:
        *(_OWORD *)v29 = v44;
        *(_QWORD *)(v29 + 16) = v45;
        v45 = 0;
        v44 = 0uLL;
        *(_BYTE *)(v29 + 24) = 1;
      }
      else
      {
        while (1)
        {
          v15 = (IOSurface *)*(id *)v14;
          *(_QWORD *)v38 = v15;
          v16 = (IOSurface *)*(id *)(v14 + 8);
          v39 = v16;
          v17 = (IOSurface *)*(id *)(v14 + 16);
          *(_QWORD *)&v40 = v17;
          v18 = *(id *)(v14 + 24);
          *((_QWORD *)&v40 + 1) = v18;
          v19 = *(id *)(v14 + 32);
          v41 = v19;
          v20 = *(_OWORD *)(v14 + 64);
          v42 = *(_OWORD *)(v14 + 48);
          v43 = v20;
          createHorizontallyReflectedSurface(v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          if (v21)
          {
            createHorizontallyReflectedSurface(v16);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            if (v22)
            {
              createHorizontallyReflectedSurface(v17);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              if (v23)
              {
                *(_QWORD *)buf = v21;
                v32 = v22;
                v33 = v23;
                v34 = v18;
                v35 = v19;
                v36 = v42;
                v37 = v43;
                std::vector<vg::hrtf::ProcessedROIData>::emplace_back<vg::hrtf::ProcessedROIData&>((uint64_t *)&v44, (uint64_t)buf);

                v24 = 0;
              }
              else
              {
                __VGLogSharedInstance();
                v27 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_249CAD000, v27, OS_LOG_TYPE_ERROR, " Failed to refect depth global surface. ", buf, 2u);
                }

                *(_BYTE *)v29 = 0;
                *(_BYTE *)(v29 + 24) = 0;
                v24 = 1;
              }

            }
            else
            {
              __VGLogSharedInstance();
              v26 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_249CAD000, v26, OS_LOG_TYPE_ERROR, " Failed to refect depth local surface. ", buf, 2u);
              }

              *(_BYTE *)v29 = 0;
              *(_BYTE *)(v29 + 24) = 0;
              v24 = 1;
            }

          }
          else
          {
            __VGLogSharedInstance();
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_249CAD000, v25, OS_LOG_TYPE_ERROR, " Failed to refect color surface. ", buf, 2u);
            }

            *(_BYTE *)v29 = 0;
            *(_BYTE *)(v29 + 24) = 0;
            v24 = 1;
          }

          if (v24)
            break;
          v14 += 80;
          if (v14 == v30)
            goto LABEL_27;
        }
      }
      *(_QWORD *)v38 = &v44;
      std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
      *(_QWORD *)v38 = &v46;
      std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
    }
    else
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>((_QWORD *)a5, v49, v50, 0xCCCCCCCCCCCCCCCDLL * ((v50 - v49) >> 4));
      *(_BYTE *)(a5 + 24) = 1;
    }
  }
  else
  {
    __VGLogSharedInstance();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_249CAD000, v28, OS_LOG_TYPE_ERROR, " Failed to preprocess capture data. ", v38, 2u);
    }

    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 24) = 0;
  }
  if (v51)
  {
    *(_QWORD *)v38 = &v49;
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  }
  *(_QWORD *)v38 = &v52;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
}

void sub_249D039E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  uint64_t v23;

  if (*(_BYTE *)(v23 - 120))
  {
    a23 = (void **)(v23 - 144);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a23);
  }
  a23 = (void **)(v23 - 112);
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::ProcessedROIData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  v7 = a7;
  result = a6;
  if (a3 != a5)
  {
    v9 = (_OWORD *)(a7 - 32);
    do
    {
      v10 = *(_OWORD *)(a3 - 80);
      a3 -= 80;
      *(_OWORD *)a3 = 0uLL;
      *(v9 - 3) = v10;
      v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a3 + 16) = 0uLL;
      *(v9 - 2) = v11;
      v12 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = 0;
      *((_QWORD *)v9 - 2) = v12;
      v13 = *(_OWORD *)(a3 + 64);
      *v9 = *(_OWORD *)(a3 + 48);
      v9[1] = v13;
      v9 -= 5;
      v7 -= 80;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<vg::hrtf::ProcessedROIData,0>((id *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<vg::hrtf::FrameROIData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 32) = v8;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 16);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::vector<vg::hrtf::FrameROIData>::__emplace_back_slow_path<vg::hrtf::FrameROIData&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[32 * v9];
  *(_QWORD *)v11 = *(id *)a2;
  *((_QWORD *)v11 + 1) = *(id *)(a2 + 8);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  v14[2] = v11 + 32;
  std::vector<vg::hrtf::FrameROIData>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_249D03DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_249D03EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::hrtf::writeHRTFModelDebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  size_t v10;
  void **v11;
  const void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void **v17;
  size_t v18;
  uint8_t *v19;
  const void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  uint8_t *v25;
  void *v26;
  void *v27;
  size_t v28;
  uint8_t *v29;
  const void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  uint8_t *v34;
  uint8_t v35[8];
  id v36;
  uint8_t v37[8];
  char v38;
  id v39;
  uint8_t buf[8];
  char v41;
  id v42;
  void *__p[2];
  char v44;
  const __CFString *v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x24BDAC8D0];
  if (*((char *)a5 + 23) >= 0)
    v10 = *((unsigned __int8 *)a5 + 23);
  else
    v10 = (size_t)a5[1];
  v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 36);
  if (v44 < 0)
    v11 = (void **)__p[0];
  if (v10)
  {
    if (*((char *)a5 + 23) >= 0)
      v12 = a5;
    else
      v12 = *a5;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/hrtf_model_debug_data_left_ear.json");
  vg::hrtf::detail::createEarDebugData(a3, a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = 0;
  objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v13, 1, &v42);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v42;
  if (v15)
  {
    __VGLogSharedInstance();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_ERROR, " Failed to write left ear debug data. ", buf, 2u);
    }
  }
  else
  {
    if (v44 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v17);
    v16 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "writeToFile:atomically:", v16, 1);
  }

  if (*((char *)a5 + 23) >= 0)
    v18 = *((unsigned __int8 *)a5 + 23);
  else
    v18 = (size_t)a5[1];
  v19 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v18 + 37);
  if (v41 < 0)
    v19 = *(uint8_t **)buf;
  if (v18)
  {
    if (*((char *)a5 + 23) >= 0)
      v20 = a5;
    else
      v20 = *a5;
    memmove(v19, v20, v18);
  }
  strcpy((char *)&v19[v18], "/hrtf_model_debug_data_right_ear.json");
  vg::hrtf::detail::createEarDebugData(a4, a2 + 24);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = v15;
  objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v21, 1, &v39);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v39;

  if (v23)
  {
    __VGLogSharedInstance();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_249CAD000, v24, OS_LOG_TYPE_ERROR, " Failed to write right ear debug data. ", v37, 2u);
    }
  }
  else
  {
    if (v41 >= 0)
      v25 = buf;
    else
      v25 = *(uint8_t **)buf;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v25);
    v24 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "writeToFile:atomically:", v24, 1);
  }

  v45 = CFSTR("face_encodings");
  objc_msgSend(MEMORY[0x24BDBCE30], "vg_arrayWithNumbersFromVectorf:", a1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v46[0] = v26;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v46, &v45, 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (*((char *)a5 + 23) >= 0)
    v28 = *((unsigned __int8 *)a5 + 23);
  else
    v28 = (size_t)a5[1];
  v29 = v37;
  std::string::basic_string[abi:ne180100]((uint64_t)v37, v28 + 42);
  if (v38 < 0)
    v29 = *(uint8_t **)v37;
  if (v28)
  {
    if (*((char *)a5 + 23) >= 0)
      v30 = a5;
    else
      v30 = *a5;
    memmove(v29, v30, v28);
  }
  strcpy((char *)&v29[v28], "/hrtf_model_debug_data_face_encodings.json");
  v36 = v23;
  objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v27, 1, &v36);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v36;

  if (v32)
  {
    __VGLogSharedInstance();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_249CAD000, v33, OS_LOG_TYPE_ERROR, " Failed to write encoding debug data. ", v35, 2u);
    }
  }
  else
  {
    if (v38 >= 0)
      v34 = v37;
    else
      v34 = *(uint8_t **)v37;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v34);
    v33 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "writeToFile:atomically:", v33, 1);
  }

  if (v38 < 0)
    operator delete(*(void **)v37);

  if (v41 < 0)
    operator delete(*(void **)buf);

  if (v44 < 0)
    operator delete(__p[0]);

}

void sub_249D0438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  if (a16 < 0)
    operator delete(__p);

  if (a23 < 0)
    operator delete(a18);

  if (a30 < 0)
    operator delete(a25);

  _Unwind_Resume(a1);
}

id vg::hrtf::detail::createEarDebugData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  size_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  void *v38[2];
  int v39;
  void *v40[2];
  int v41;
  void *memptr;
  _QWORD v43[7];
  _QWORD v44[8];

  v44[7] = *MEMORY[0x24BDAC8D0];
  v43[0] = CFSTR("ear_encodings");
  objc_msgSend(MEMORY[0x24BDBCE30], "vg_arrayWithNumbersFromVectorf:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v44[0] = v4;
  v43[1] = CFSTR("hrtf_coefficients");
  objc_msgSend(MEMORY[0x24BDBCE30], "vg_arrayWithNumbersFromVectorf:", a1 + 24);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v44[1] = v5;
  v43[2] = CFSTR("dtf_coefficients");
  v6 = (void *)MEMORY[0x24BDBCE30];
  v7 = (*(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 68));
  v8 = (4 * v7 + 31) & 0x7FFFFFFE0;
  v40[1] = (void *)(v8 >> 2);
  v38[0] = 0;
  malloc_type_posix_memalign(v38, 0x20uLL, v8, 0x49090899uLL);
  v9 = v38[0];
  v40[0] = v38[0];
  v41 = v7;
  v10 = *(_DWORD *)(a1 + 64);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(unsigned int *)(a1 + 68);
    v14 = *(_QWORD *)(a1 + 48);
    do
    {
      v15 = v12;
      v16 = v11;
      v17 = v13;
      if ((_DWORD)v13)
      {
        do
        {
          v9[v16++] = *(_DWORD *)(v14 + 4 * v15);
          v15 += v10;
          --v17;
        }
        while (v17);
      }
      ++v12;
      v11 += v13;
    }
    while (v12 != v10);
  }
  objc_msgSend(v6, "vg_arrayWithNumbersFromVectorf:", v40);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v44[2] = v18;
  v43[3] = CFSTR("bias_dtf_coefficients");
  v19 = (void *)MEMORY[0x24BDBCE30];
  v20 = (*(_DWORD *)(a1 + 88) * *(_DWORD *)(a1 + 92));
  v21 = (4 * v20 + 31) & 0x7FFFFFFE0;
  v38[1] = (void *)(v21 >> 2);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v21, 0x49090899uLL);
  v22 = memptr;
  v38[0] = memptr;
  v39 = v20;
  v23 = *(_DWORD *)(a1 + 88);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    v26 = *(unsigned int *)(a1 + 92);
    v27 = *(_QWORD *)(a1 + 72);
    do
    {
      v28 = v25;
      v29 = v24;
      v30 = v26;
      if ((_DWORD)v26)
      {
        do
        {
          v22[v29++] = *(_DWORD *)(v27 + 4 * v28);
          v28 += v23;
          --v30;
        }
        while (v30);
      }
      ++v25;
      v24 += v26;
    }
    while (v25 != v23);
  }
  objc_msgSend(v19, "vg_arrayWithNumbersFromVectorf:", v38);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v44[3] = v31;
  v43[4] = CFSTR("ctf_coefficients");
  objc_msgSend(MEMORY[0x24BDBCE30], "vg_arrayWithNumbersFromVectorf:", a1 + 96);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v44[4] = v32;
  v43[5] = CFSTR("delay_coefficients");
  objc_msgSend(MEMORY[0x24BDBCE30], "vg_arrayWithNumbersFromVectorf:", a2);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v44[5] = v33;
  v43[6] = CFSTR("eq_coefficients");
  v34 = *(unsigned __int8 *)(a1 + 144);
  if (*(_BYTE *)(a1 + 144))
  {
    objc_msgSend(MEMORY[0x24BDBCE30], "vg_arrayWithNumbersFromVectorf:", a1 + 120, v38[0]);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v35 = (void *)MEMORY[0x24BDBD1A8];
  }
  v44[6] = v35;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v44, v43, 7, v38[0]);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (v34)

  free(v38[0]);
  free(v40[0]);

  return v36;
}

void sub_249D047A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  free(a9);
  free(a12);

  _Unwind_Resume(a1);
}

void vg::hrtf::writeDebugPreprocessedData(uint64_t *a1, uint64_t *a2)
{
  void *__p[2];
  char v4;
  uint64_t *v5;

  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "face");
  vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(&v5, a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "left_ear");
  vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(&v5, a1 + 3, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "right_ear");
  vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(&v5, a1 + 6, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_249D048E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *p_p;
  NSString *v22;
  char v23;
  NSObject *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  NSString *v37;
  char v38;
  NSObject *v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  NSString *v52;
  char v53;
  NSObject *v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  NSString *v67;
  char v68;
  NSObject *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  NSString *v82;
  char v83;
  NSObject *v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  std::string *v98;
  std::string::size_type size;
  _QWORD *v100;
  _QWORD *v101;
  std::string *v102;
  std::string::size_type v103;
  _QWORD *v104;
  _QWORD *v105;
  std::string *v106;
  std::string::size_type v107;
  _QWORD *v108;
  _QWORD *v109;
  std::string *v110;
  std::string::size_type v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  std::string *v125;
  std::string::size_type v126;
  _QWORD *v127;
  _QWORD *v128;
  std::string *v129;
  std::string::size_type v130;
  _QWORD *v131;
  _QWORD *v132;
  std::string *v133;
  std::string::size_type v134;
  _QWORD *v135;
  _QWORD *v136;
  std::string *v137;
  std::string::size_type v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  _QWORD *v144;
  uint64_t v145;
  IOSurface *v146;
  IOSurface *v147;
  IOSurface *v148;
  IOSurface *v149;
  IOSurface *v150;
  std::string v152;
  std::string v153;
  std::string v154;
  _QWORD v155[10];
  char v156;
  uint64_t v157;
  std::string v158;
  std::string v159;
  _QWORD v160[2];
  std::string::size_type v161;
  _QWORD v162[10];
  char v163;
  uint64_t v164;
  _QWORD v165[2];
  std::string::size_type v166;
  _QWORD v167[10];
  char v168;
  uint64_t v169;
  _QWORD v170[2];
  std::string::size_type v171;
  _QWORD v172[10];
  char v173;
  uint64_t v174;
  _QWORD v175[2];
  std::string::size_type v176;
  _QWORD v177[10];
  char v178;
  uint64_t v179;
  _QWORD v180[2];
  std::string::size_type v181;
  _QWORD v182[10];
  char v183;
  uint64_t v184;
  _QWORD v185[2];
  std::string::size_type v186;
  _QWORD v187[10];
  char v188;
  _QWORD v189[25];
  __int128 __val;
  __int128 v191;
  std::string v192;
  uint64_t v193;
  void *__p;
  uint64_t v195;
  char v196;
  _BYTE v197[384];
  _QWORD v198[22];

  v198[20] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v145 = a2[1];
  if (*a2 != v145)
  {
    v5 = 0;
    v143 = *(void **)(MEMORY[0x24BEDB7E8] + 24);
    v144 = (_QWORD *)*MEMORY[0x24BEDB7E8];
    v6 = *MEMORY[0x24BEDB7F0];
    v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v142 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v150 = (IOSurface *)*(id *)v3;
      v189[19] = v150;
      v149 = (IOSurface *)*(id *)(v3 + 8);
      v189[20] = v149;
      v148 = (IOSurface *)*(id *)(v3 + 16);
      v189[21] = v148;
      v147 = (IOSurface *)*(id *)(v3 + 24);
      v189[22] = v147;
      v146 = (IOSurface *)*(id *)(v3 + 32);
      v189[23] = v146;
      v9 = *(_OWORD *)(v3 + 64);
      __val = *(_OWORD *)(v3 + 48);
      v191 = v9;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v185);
      v10 = *((char *)*a1 + 23);
      if (v10 >= 0)
        v11 = (uint64_t)*a1;
      else
        v11 = **a1;
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)*a1 + 23);
      else
        v12 = (*a1)[1];
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/", 1);
      v15 = *(char *)(a3 + 23);
      if (v15 >= 0)
        v16 = a3;
      else
        v16 = *(_QWORD *)a3;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a3 + 23);
      else
        v17 = *(_QWORD *)(a3 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"_RGB_", 5);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".png", 4);
      v20 = (void *)MEMORY[0x24BDD17C8];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v187, &__p);
      if (v196 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      objc_msgSend(v20, "stringWithUTF8String:", p_p);
      v22 = (NSString *)objc_claimAutoreleasedReturnValue();
      v23 = VGDumpIOSurface(v150, v22, 1.0);

      if (v196 < 0)
      {
        operator delete(__p);
        if ((v23 & 1) != 0)
          goto LABEL_25;
      }
      else if ((v23 & 1) != 0)
      {
        goto LABEL_25;
      }
      __VGLogSharedInstance();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_249CAD000, v24, OS_LOG_TYPE_ERROR, " Unable to write image. ", (uint8_t *)&__p, 2u);
      }

LABEL_25:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v180);
      v25 = *((char *)*a1 + 23);
      if (v25 >= 0)
        v26 = *a1;
      else
        v26 = (_QWORD *)**a1;
      if (v25 >= 0)
        v27 = *((unsigned __int8 *)*a1 + 23);
      else
        v27 = (*a1)[1];
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v181, (uint64_t)v26, v27);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/", 1);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v31 = a3;
      else
        v31 = *(_QWORD *)a3;
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(a3 + 23);
      else
        v32 = *(_QWORD *)(a3 + 8);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"_local_depth_", 13);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)".tiff", 5);
      v35 = (void *)MEMORY[0x24BDD17C8];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v182, &__p);
      if (v196 >= 0)
        v36 = &__p;
      else
        v36 = __p;
      objc_msgSend(v35, "stringWithUTF8String:", v36);
      v37 = (NSString *)objc_claimAutoreleasedReturnValue();
      v38 = VGDumpIOSurface(v149, v37, 1.0);

      if (v196 < 0)
      {
        operator delete(__p);
        if ((v38 & 1) != 0)
          goto LABEL_47;
      }
      else if ((v38 & 1) != 0)
      {
        goto LABEL_47;
      }
      __VGLogSharedInstance();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_249CAD000, v39, OS_LOG_TYPE_ERROR, " Unable to write local depth. ", (uint8_t *)&__p, 2u);
      }

LABEL_47:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v175);
      v40 = *((char *)*a1 + 23);
      if (v40 >= 0)
        v41 = *a1;
      else
        v41 = (_QWORD *)**a1;
      if (v40 >= 0)
        v42 = *((unsigned __int8 *)*a1 + 23);
      else
        v42 = (*a1)[1];
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)v41, v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"/", 1);
      v45 = *(char *)(a3 + 23);
      if (v45 >= 0)
        v46 = a3;
      else
        v46 = *(_QWORD *)a3;
      if (v45 >= 0)
        v47 = *(unsigned __int8 *)(a3 + 23);
      else
        v47 = *(_QWORD *)(a3 + 8);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"_global_depth_", 14);
      v49 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)".tiff", 5);
      v50 = (void *)MEMORY[0x24BDD17C8];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v177, &__p);
      if (v196 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      objc_msgSend(v50, "stringWithUTF8String:", v51);
      v52 = (NSString *)objc_claimAutoreleasedReturnValue();
      v53 = VGDumpIOSurface(v148, v52, 1.0);

      if (v196 < 0)
      {
        operator delete(__p);
        if ((v53 & 1) != 0)
          goto LABEL_69;
      }
      else if ((v53 & 1) != 0)
      {
        goto LABEL_69;
      }
      __VGLogSharedInstance();
      v54 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_249CAD000, v54, OS_LOG_TYPE_ERROR, " Unable to write global depth. ", (uint8_t *)&__p, 2u);
      }

LABEL_69:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v170);
      v55 = *((char *)*a1 + 23);
      if (v55 >= 0)
        v56 = *a1;
      else
        v56 = (_QWORD *)**a1;
      if (v55 >= 0)
        v57 = *((unsigned __int8 *)*a1 + 23);
      else
        v57 = (*a1)[1];
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v171, (uint64_t)v56, v57);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"/", 1);
      v60 = *(char *)(a3 + 23);
      if (v60 >= 0)
        v61 = a3;
      else
        v61 = *(_QWORD *)a3;
      if (v60 >= 0)
        v62 = *(unsigned __int8 *)(a3 + 23);
      else
        v62 = *(_QWORD *)(a3 + 8);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"_base_RGB_", 10);
      v64 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)".png", 4);
      v65 = (void *)MEMORY[0x24BDD17C8];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v172, &__p);
      if (v196 >= 0)
        v66 = &__p;
      else
        v66 = __p;
      objc_msgSend(v65, "stringWithUTF8String:", v66);
      v67 = (NSString *)objc_claimAutoreleasedReturnValue();
      v68 = VGDumpIOSurface(v147, v67, 1.0);

      if (v196 < 0)
      {
        operator delete(__p);
        if ((v68 & 1) != 0)
          goto LABEL_91;
      }
      else if ((v68 & 1) != 0)
      {
        goto LABEL_91;
      }
      __VGLogSharedInstance();
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_249CAD000, v69, OS_LOG_TYPE_ERROR, " Unable to write base color depth. ", (uint8_t *)&__p, 2u);
      }

LABEL_91:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v165);
      v70 = *((char *)*a1 + 23);
      if (v70 >= 0)
        v71 = *a1;
      else
        v71 = (_QWORD *)**a1;
      if (v70 >= 0)
        v72 = *((unsigned __int8 *)*a1 + 23);
      else
        v72 = (*a1)[1];
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)v71, v72);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"/", 1);
      v75 = *(char *)(a3 + 23);
      if (v75 >= 0)
        v76 = a3;
      else
        v76 = *(_QWORD *)a3;
      if (v75 >= 0)
        v77 = *(unsigned __int8 *)(a3 + 23);
      else
        v77 = *(_QWORD *)(a3 + 8);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"_normalized_depth_", 18);
      v79 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)".tiff", 5);
      v80 = (void *)MEMORY[0x24BDD17C8];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v167, &__p);
      if (v196 >= 0)
        v81 = &__p;
      else
        v81 = __p;
      objc_msgSend(v80, "stringWithUTF8String:", v81);
      v82 = (NSString *)objc_claimAutoreleasedReturnValue();
      v83 = VGDumpIOSurface(v146, v82, 1.0);

      if (v196 < 0)
      {
        operator delete(__p);
        if ((v83 & 1) == 0)
        {
LABEL_110:
          __VGLogSharedInstance();
          v84 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_249CAD000, v84, OS_LOG_TYPE_ERROR, " Unable to write normalized depth. ", (uint8_t *)&__p, 2u);
          }

        }
      }
      else if ((v83 & 1) == 0)
      {
        goto LABEL_110;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v160);
      v85 = *((char *)*a1 + 23);
      if (v85 >= 0)
        v86 = *a1;
      else
        v86 = (_QWORD *)**a1;
      if (v85 >= 0)
        v87 = *((unsigned __int8 *)*a1 + 23);
      else
        v87 = (*a1)[1];
      v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v161, (uint64_t)v86, v87);
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"/", 1);
      v90 = *(char *)(a3 + 23);
      if (v90 >= 0)
        v91 = a3;
      else
        v91 = *(_QWORD *)a3;
      if (v90 >= 0)
        v92 = *(unsigned __int8 *)(a3 + 23);
      else
        v92 = *(_QWORD *)(a3 + 8);
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, v91, v92);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"_RGB_bbox_", 10);
      v94 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)".json", 5);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v162, &v192);
      std::ofstream::basic_ofstream(&__p);
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
      v95 = DWORD1(__val);
      v96 = DWORD2(__val);
      v97 = HIDWORD(__val);
      std::to_string(&v192, __val);
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = &v192;
      else
        v98 = (std::string *)v192.__r_.__value_.__r.__words[0];
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v192.__r_.__value_.__r.__words[2]);
      else
        size = v192.__r_.__value_.__l.__size_;
      v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v98, size);
      v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)",", 1);
      std::to_string(&v154, v95);
      if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v154;
      else
        v102 = (std::string *)v154.__r_.__value_.__r.__words[0];
      if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
      else
        v103 = v154.__r_.__value_.__l.__size_;
      v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v102, v103);
      v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)",", 1);
      std::to_string(&v159, v96);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = &v159;
      else
        v106 = (std::string *)v159.__r_.__value_.__r.__words[0];
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v107 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      else
        v107 = v159.__r_.__value_.__l.__size_;
      v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)v106, v107);
      v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)",", 1);
      std::to_string(&v158, v97);
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v110 = &v158;
      else
        v110 = (std::string *)v158.__r_.__value_.__r.__words[0];
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
      else
        v111 = v158.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v110, v111);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v158.__r_.__value_.__l.__data_);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)), *(_DWORD *)&v197[*((_QWORD *)__p - 3)] | 4);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      v112 = *((char *)*a1 + 23);
      if (v112 >= 0)
        v113 = *a1;
      else
        v113 = (_QWORD *)**a1;
      if (v112 >= 0)
        v114 = *((unsigned __int8 *)*a1 + 23);
      else
        v114 = (*a1)[1];
      v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v154.__r_.__value_.__r.__words[2], (uint64_t)v113, v114);
      v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"/", 1);
      v117 = *(char *)(a3 + 23);
      if (v117 >= 0)
        v118 = a3;
      else
        v118 = *(_QWORD *)a3;
      if (v117 >= 0)
        v119 = *(unsigned __int8 *)(a3 + 23);
      else
        v119 = *(_QWORD *)(a3 + 8);
      v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, v118, v119);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"_depth_bbox_", 12);
      v121 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)".json", 5);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v155, &v159);
      std::ofstream::basic_ofstream(&v192);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      v122 = DWORD1(v191);
      v123 = DWORD2(v191);
      v124 = HIDWORD(v191);
      std::to_string(&v159, v191);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v125 = &v159;
      else
        v125 = (std::string *)v159.__r_.__value_.__r.__words[0];
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      else
        v126 = v159.__r_.__value_.__l.__size_;
      v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v192, (uint64_t)v125, v126);
      v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)",", 1);
      std::to_string(&v158, v122);
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = &v158;
      else
        v129 = (std::string *)v158.__r_.__value_.__r.__words[0];
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v130 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
      else
        v130 = v158.__r_.__value_.__l.__size_;
      v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)v129, v130);
      v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)",", 1);
      std::to_string(&v153, v123);
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v133 = &v153;
      else
        v133 = (std::string *)v153.__r_.__value_.__r.__words[0];
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v134 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
      else
        v134 = v153.__r_.__value_.__l.__size_;
      v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)v133, v134);
      v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)",", 1);
      std::to_string(&v152, v124);
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = &v152;
      else
        v137 = (std::string *)v152.__r_.__value_.__r.__words[0];
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v138 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      else
        v138 = v152.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v137, v138);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v158.__r_.__value_.__l.__data_);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)&v192 + *(_QWORD *)(v192.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v192 + *(_QWORD *)(v192.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
      v192.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + *(v144 - 3)) = (std::string::size_type)v143;
      MEMORY[0x24BD02B8C](&v192.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x24BD02D00](&v193);
      v154.__r_.__value_.__r.__words[0] = v6;
      *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + *(_QWORD *)(v6 - 24)) = v8;
      v154.__r_.__value_.__r.__words[2] = v7;
      v155[0] = v142;
      if (v156 < 0)
        operator delete((void *)v155[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x24BD02D00](&v157);
      __p = v144;
      *(void **)((char *)&__p + *(v144 - 3)) = v143;
      MEMORY[0x24BD02B8C](&v195);
      std::ostream::~ostream();
      MEMORY[0x24BD02D00](v198);
      v160[0] = v6;
      *(_QWORD *)((char *)v160 + *(_QWORD *)(v6 - 24)) = v8;
      v139 = MEMORY[0x24BEDB848] + 16;
      v161 = v7;
      v162[0] = MEMORY[0x24BEDB848] + 16;
      if (v163 < 0)
        operator delete((void *)v162[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x24BD02D00](&v164);
      v165[0] = v6;
      *(_QWORD *)((char *)v165 + *(_QWORD *)(v6 - 24)) = v8;
      v166 = v7;
      v167[0] = v139;
      if (v168 < 0)
        operator delete((void *)v167[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x24BD02D00](&v169);
      v170[0] = v6;
      *(_QWORD *)((char *)v170 + *(_QWORD *)(v6 - 24)) = v8;
      v140 = MEMORY[0x24BEDB848] + 16;
      v171 = v7;
      v172[0] = MEMORY[0x24BEDB848] + 16;
      if (v173 < 0)
        operator delete((void *)v172[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x24BD02D00](&v174);
      v175[0] = v6;
      *(_QWORD *)((char *)v175 + *(_QWORD *)(v6 - 24)) = v8;
      v176 = v7;
      v177[0] = v140;
      if (v178 < 0)
        operator delete((void *)v177[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x24BD02D00](&v179);
      v180[0] = v6;
      *(_QWORD *)((char *)v180 + *(_QWORD *)(v6 - 24)) = v8;
      v141 = MEMORY[0x24BEDB848] + 16;
      v181 = v7;
      v182[0] = MEMORY[0x24BEDB848] + 16;
      if (v183 < 0)
        operator delete((void *)v182[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x24BD02D00](&v184);
      v185[0] = v6;
      *(_QWORD *)((char *)v185 + *(_QWORD *)(v6 - 24)) = v8;
      v186 = v7;
      v187[0] = v141;
      if (v188 < 0)
        operator delete((void *)v187[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x24BD02D00](v189);

      v3 += 80;
      ++v5;
    }
    while (v3 != v145);
  }
}

void sub_249D0583C(_Unwind_Exception *a1)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x3B8]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x4D0]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x5E8]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x700]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x818]);
  vg::hrtf::ProcessedROIData::~ProcessedROIData((id *)&STACK[0x930]);
  _Unwind_Resume(a1);
}

void sub_249D05AEC()
{
  JUMPOUT(0x249D05AB4);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_249D05BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x24BD02D00](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24BD02D00](a1 + 128);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x24BD02BBC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x24BD02BC8](v13);
  return a1;
}

void sub_249D05DB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x24BD02BC8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x249D05D90);
}

void sub_249D05DF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_249D05F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_249D061D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_249D06504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_249D06620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249D066B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D06758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_249D067EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0686C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D06900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D06B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_249D06D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D06EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249D070B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D07130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0720C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0735C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D074F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void (**v22)(_QWORD);
  void (**v23)(_QWORD);

  v23[2](v23);

  v22[2](v22);
  _Unwind_Resume(a1);
}

void sub_249D07754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D07960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D07CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_249D080E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_249D082D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D085D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void (**v28)(_QWORD);
  void (**v29)(_QWORD);

  v29[2](v29);

  v28[2](v28);
  _Unwind_Resume(a1);
}

void sub_249D0894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void (**v28)(_QWORD);
  void (**v29)(_QWORD);

  v29[2](v29);

  v28[2](v28);
  _Unwind_Resume(a1);
}

void sub_249D08D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_249D08FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  id v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, id);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

void sub_249D09178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  id v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, id);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

void sub_249D09558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void (**v30)(_QWORD);
  void *v31;
  void (**v32)(_QWORD);

  v32[2](v32);

  v30[2](v30);
  _Unwind_Resume(a1);
}

void sub_249D098A0(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void (**v3)(_QWORD);
  uint64_t v4;

  v3[2](v3);

  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_249D09CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void (**v32)(_QWORD);
  void *v33;
  void (**v34)(_QWORD);

  v34[2](v34);

  v32[2](v32);
  _Unwind_Resume(a1);
}

void sub_249D0A014(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void (**v3)(_QWORD);
  uint64_t v4;

  v3[2](v3);

  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_249D0A1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D0A870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_249D0ABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)(v10 - 72));

  _Unwind_Resume(a1);
}

uint64_t vg::shared::metrics::isSupported(vg::shared::metrics *this)
{
  return 1;
}

id vg::shared::metrics::createDictionary(vg::shared::metrics *this)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundle");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "infoDictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "valueForKey:", CFSTR("CFBundleVersion"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundle");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bundleIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "bundleIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v7);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "bundleVersion");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    v9 = v3;
  else
    v9 = &unk_251B34D48;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, v8);

  return v4;
}

void sub_249D0AD10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t vg::shared::metrics::sendEvent(vg::shared::metrics *this, char *a2, NSDictionary *a3)
{
  char *v4;
  void *v5;
  NSObject *v6;
  int v8;
  vg::shared::metrics *v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  AnalyticsSendEvent();

  __VGLogSharedInstance();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = this;
    v10 = 2112;
    v11 = v4;
    _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_INFO, " Sent analytics event:%s dictionary:%@ ", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

void sub_249D0AE58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0AF00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0AF70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0B044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D0B100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0B160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VGMLImageIOData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_249D0B240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D0B2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t vg::shared::computeMedian<unsigned long>(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  void *__p;
  char *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v1 = (unint64_t *)__p;
  v2 = (unint64_t)((v7 - (_BYTE *)__p) >> 3) >> 1;
  v3 = (unint64_t *)((char *)__p + 8 * v2);
  if (v3 != (unint64_t *)v7)
  {
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>((uint64_t)__p, v3, (unint64_t *)v7);
    v1 = (unint64_t *)__p;
  }
  v4 = v1[v2];
  v7 = (char *)v1;
  operator delete(v1);
  return v4;
}

void sub_249D0B3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float vg::shared::computeMedian<float>(uint64_t a1)
{
  float v1;
  float *v2;
  unint64_t v3;
  float *v4;
  float v5;
  void *__p;
  float *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v2 = (float *)__p;
  v3 = (unint64_t)(((char *)v8 - (_BYTE *)__p) >> 2) >> 1;
  v4 = (float *)((char *)__p + 4 * v3);
  if (v4 != v8)
  {
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p, v4, v8, v1);
    v2 = (float *)__p;
  }
  v5 = v2[v3];
  v8 = v2;
  operator delete(v2);
  return v5;
}

{
  return __ZN2vg6shared13computeMedianIfEET_RKNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(a1);
}

void sub_249D0B47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL vg::shared::isPointInTriangle(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _BOOL4 v11;
  _BOOL4 v12;

  LODWORD(v4) = HIDWORD(*(unint64_t *)a2);
  LODWORD(v5) = HIDWORD(*(unint64_t *)a3);
  LODWORD(v6) = HIDWORD(*(unint64_t *)a1);
  v7 = vmlas_n_f32(-(float)(vsub_f32(*a2, *a3).f32[0] * (float)(v6 - v5)), v4 - v5, vsub_f32(*a1, *a3).f32[0]);
  LODWORD(v8) = HIDWORD(*(unint64_t *)a4);
  v9 = vmlas_n_f32(-(float)(vsub_f32(*a3, *a4).f32[0] * (float)(v6 - v8)), v5 - v8, vsub_f32(*a1, *a4).f32[0]);
  v10 = vmlas_n_f32(-(float)(vsub_f32(*a4, *a2).f32[0] * (float)(v6 - v4)), v8 - v4, vsub_f32(*a1, *a2).f32[0]);
  v11 = v7 < 0.0;
  v12 = v7 > 0.0;
  if (v9 < 0.0)
    v11 = 1;
  if (v9 > 0.0)
    v12 = 1;
  if (v10 < 0.0)
    v11 = 1;
  if (v10 > 0.0)
    v12 = 1;
  return !v11 || !v12;
}

BOOL vg::shared::arePointsCollinear(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  v4 = vsubq_f32(*a2, *a1);
  v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v5.i32[0] = vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).u32[0];
  v8 = vsubq_f32(*a3, *a1);
  v9 = (int32x4_t)vmulq_f32(v8, v8);
  v10 = vmulq_n_f32(v4, *(float *)v5.i32);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  *(float32x2_t *)v9.i8 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  *(float32x2_t *)v9.i8 = vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)));
  v11 = vmulq_f32(v10, vmulq_n_f32(v8, vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8))).f32[0]));
  return fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]) > a4;
}

BOOL vg::shared::intersectPlane(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, _DWORD *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;

  v5 = vmulq_f32(*a1, *a4);
  v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)));
  if (v6.f32[0] <= 0.000001)
    return 0;
  v7 = vmulq_f32(*a1, vsubq_f32(*a2, *a3));
  v7.f32[0] = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))), v6).f32[0];
  *a5 = v7.i32[0];
  return v7.f32[0] >= 0.0;
}

double vg::shared::eulerRotationFromTheta(float *a1)
{
  float v1;
  float v2;
  __float2 v3;
  __float2 v4;
  __float2 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double result;

  v1 = *a1;
  v2 = a1[2];
  v3 = __sincosf_stret(a1[1]);
  v4 = __sincosf_stret(v2);
  v5 = __sincosf_stret(v1);
  *(float *)&v6 = v3.__cosval * v4.__cosval;
  *((float *)&v6 + 1) = (float)((float)(v4.__cosval * v5.__sinval) * v3.__sinval) - (float)(v5.__cosval * v4.__sinval);
  *(float *)&v7 = v3.__cosval * v4.__sinval;
  *((float *)&v7 + 1) = (float)(v4.__sinval * (float)(v5.__sinval * v3.__sinval)) + (float)(v5.__cosval * v4.__cosval);
  *(float *)&v8 = -v3.__sinval;
  *((float *)&v8 + 1) = v5.__sinval * v3.__cosval;
  *(_QWORD *)&result = vzip1q_s32(vzip1q_s32((int32x4_t)v6, (int32x4_t)v8), vzip1q_s32((int32x4_t)v7, (int32x4_t)0)).u64[0];
  return result;
}

void vg::shared::generateGaussianKernel(vg::shared *this@<X0>, double a2@<D0>, uint64_t *a3@<X8>)
{
  vg::shared *v6;
  double v7;
  double v8;
  double v9;
  vg::shared *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  vg::shared *v24;
  uint64_t v25;
  vg::shared *v26;
  uint64_t v27;
  void *__p;
  double *v29;
  double *v30;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::vector<double>>::reserve(a3, (unint64_t)this);
  if (this)
  {
    v6 = 0;
    v7 = a2 + a2;
    v8 = 1.0 / ((a2 + a2) * 3.14159265);
    v9 = 0.0;
    do
    {
      __p = 0;
      v29 = 0;
      v30 = 0;
      std::vector<double>::reserve(&__p, (unint64_t)this);
      v10 = 0;
      v11 = v29;
      do
      {
        v12 = v8
            * exp(-(((double)(unint64_t)v10 - (float)((float)((unint64_t)this - 1) * 0.5))* ((double)(unint64_t)v10 - (float)((float)((unint64_t)this - 1) * 0.5))+ ((double)(unint64_t)v6 - (float)((float)((unint64_t)this - 1) * 0.5))* ((double)(unint64_t)v6 - (float)((float)((unint64_t)this - 1) * 0.5)))/ v7);
        if (v11 >= v30)
        {
          v14 = (double *)__p;
          v15 = ((char *)v11 - (_BYTE *)__p) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v17 = (char *)v30 - (_BYTE *)__p;
          if (((char *)v30 - (_BYTE *)__p) >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v30, v18);
            v14 = (double *)__p;
            v11 = v29;
          }
          else
          {
            v19 = 0;
          }
          v20 = (double *)&v19[8 * v15];
          *v20 = v12;
          v13 = v20 + 1;
          while (v11 != v14)
          {
            v21 = *((_QWORD *)v11-- - 1);
            *((_QWORD *)v20-- - 1) = v21;
          }
          __p = v20;
          v29 = v13;
          v30 = (double *)&v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v11 = v12;
          v13 = v11 + 1;
        }
        v29 = v13;
        v9 = v9 + *(v13 - 1);
        v10 = (vg::shared *)((char *)v10 + 1);
        v11 = v13;
      }
      while (v10 != this);
      v22 = a3[1];
      if (v22 >= a3[2])
      {
        v23 = std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>((uint64_t)a3, (uint64_t)&__p);
        v23 = v22 + 24;
      }
      a3[1] = v23;
      if (__p)
      {
        v29 = (double *)__p;
        operator delete(__p);
      }
      v6 = (vg::shared *)((char *)v6 + 1);
    }
    while (v6 != this);
    v24 = 0;
    v25 = *a3;
    do
    {
      v26 = 0;
      v27 = *(_QWORD *)(v25 + 24 * (_QWORD)v24);
      do
      {
        *(double *)(v27 + 8 * (_QWORD)v26) = *(double *)(v27 + 8 * (_QWORD)v26) / v9;
        v26 = (vg::shared *)((char *)v26 + 1);
      }
      while (this != v26);
      v24 = (vg::shared *)((char *)v24 + 1);
    }
    while (v24 != this);
  }
}

void sub_249D0B988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_249D0BA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void vg::shared::generateBoxKernel(vg::shared *this@<X0>, uint64_t *a2@<X8>)
{
  vg::shared *v4;
  double v5;
  vg::shared *v6;
  double *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *__p;
  double *v20;
  double *v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<double>>::reserve(a2, (unint64_t)this);
  if (this)
  {
    v4 = 0;
    v5 = 1.0 / (double)(unint64_t)((_QWORD)this * (_QWORD)this);
    do
    {
      __p = 0;
      v20 = 0;
      v21 = 0;
      std::vector<double>::reserve(&__p, (unint64_t)this);
      v6 = 0;
      v7 = v20;
      do
      {
        if (v7 >= v21)
        {
          v9 = (double *)__p;
          v10 = ((char *)v7 - (_BYTE *)__p) >> 3;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v12 = (char *)v21 - (_BYTE *)__p;
          if (((char *)v21 - (_BYTE *)__p) >> 2 > v11)
            v11 = v12 >> 2;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v21, v13);
            v9 = (double *)__p;
            v7 = v20;
          }
          else
          {
            v14 = 0;
          }
          v15 = (double *)&v14[8 * v10];
          *v15 = v5;
          v8 = v15 + 1;
          while (v7 != v9)
          {
            v16 = *((_QWORD *)v7-- - 1);
            *((_QWORD *)v15-- - 1) = v16;
          }
          __p = v15;
          v20 = v8;
          v21 = (double *)&v14[8 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v7 = v5;
          v8 = v7 + 1;
        }
        v20 = v8;
        v6 = (vg::shared *)((char *)v6 + 1);
        v7 = v8;
      }
      while (v6 != this);
      v17 = a2[1];
      if (v17 >= a2[2])
      {
        v18 = std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(a2, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>((uint64_t)a2, (uint64_t)&__p);
        v18 = v17 + 24;
      }
      a2[1] = v18;
      if (__p)
      {
        v20 = (double *)__p;
        operator delete(__p);
      }
      v4 = (vg::shared *)((char *)v4 + 1);
    }
    while (v4 != this);
  }
}

void sub_249D0BCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

double vg::shared::computeBBox(uint64_t **a1, double *a2, float a3)
{
  double v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  int v20;
  float v21;
  float v22;

  v3 = *a2;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v15 = (int)v3 - 1;
    v16 = v15 & (v15 >> 31);
    v13 = v15;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0x7FFFFFFF;
    v9 = 0x7FFFFFFF;
    do
    {
      v10 = *v4++;
      v11 = (int)*(float *)&v10;
      v12 = (int)*((float *)&v10 + 1);
      if (v8 >= (int)*(float *)&v10)
        v8 = v11;
      if (v6 <= v11)
        v6 = v11;
      if (v9 >= v12)
        v9 = v12;
      if (v7 <= v12)
        v7 = v12;
    }
    while (v4 != v5);
    v13 = (int)v3 - 1;
    if (v13 >= v8)
      v14 = v8;
    else
      v14 = (int)v3 - 1;
    if (v8 >= 0)
      v15 = v14;
    else
      v15 = 0;
    if (v13 >= v6)
      v16 = v6;
    else
      v16 = (int)v3 - 1;
  }
  v17 = (float)(v16 - v15);
  v18 = v15 - (int)(float)(v17 * a3);
  if (v13 >= v18)
    v19 = v18;
  else
    v19 = v13;
  if (v18 >= 0)
    v20 = v19;
  else
    v20 = 0;
  v21 = (float)v20 / (float)v13;
  if (v21 <= 1.0)
    v22 = (float)v20 / (float)v13;
  else
    v22 = 1.0;
  if (v21 < 0.0)
    v22 = 0.0;
  __asm { FMOV            V3.2S, #1.0 }
  return v22;
}

int32x2_t vg::shared::expandBBoxToMatchAspectRatio(int32x2_t *a1, int a2, _QWORD *a3, float a4)
{
  uint64_t v5;
  int32x2_t v6;
  int v7;
  int32x2_t v8;
  __int32 v9;
  int v10;
  int v11;
  int32x2_t v12;
  BOOL v13;
  int v14;
  int v15;
  float v16;
  int v17;
  int32x2_t v18;

  if (a4 >= 0.0001)
  {
    v5 = a3[1];
    v6 = *a1;
    v7 = (int)*a1;
    if (v7 - a2 <= (int)*a3)
    {
      v10 = v7 - 1;
      v8 = a1[1];
      v9 = v8.i32[0];
    }
    else
    {
      v8 = a1[1];
      v9 = v8.i32[0];
      v10 = v5 + ~a1[1].i32[0];
      if (v8.i32[0] + a2 < (int)v5)
        v10 = a2;
    }
    v11 = (int)(float)((float)(v9 - v7 + 2 * v10) / a4);
    v12 = vsub_s32(v8, v6);
    v13 = __OFSUB__(v11, v12.i32[1]);
    v14 = v11 - v12.i32[1];
    if (v14 < 0 != v13)
      ++v14;
    if (v6.i32[1] - (v14 >> 1) <= (int)HIDWORD(*a3))
    {
      v15 = v6.i32[1] - 1;
    }
    else
    {
      v15 = v14 >> 1;
      if ((v14 >> 1) + v8.i32[1] >= SHIDWORD(v5))
        v15 = HIDWORD(v5) + ~v8.i32[1];
    }
    v16 = (float)(v12.i32[1] + 2 * v15) * a4;
    v17 = (int)v16 - v12.i32[0];
    if ((int)v16 < v12.i32[0])
      ++v17;
    v18.i32[0] = v17 >> 1;
    v18.i32[1] = v15;
    return vsub_s32(v6, v18);
  }
  else
  {
    return *a1;
  }
}

unsigned int vg::shared::clipFToUInt8(vg::shared *this, float a2, float a3, float a4)
{
  if (a2 < a4)
    return 0;
  if (a2 <= a3)
    return llroundf((float)((float)(a2 - a4) * 255.0) / (float)(a3 - a4));
  return 255;
}

__n64 vg::shared::scaleFromMatrix(float32x4_t *this, const simd_float4x4 *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  __n64 result;

  v2 = vmulq_f32(*this, *this);
  result.n64_f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0]);
  v3 = vmulq_f32(this[1], this[1]);
  result.n64_u32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  return result;
}

__n128 vg::shared::translationFromMatrix(__n128 *this, const simd_float4x4 *a2)
{
  return this[3];
}

double vg::shared::rotationFromMatrix(int32x4_t *this, const simd_float4x4 *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = this[1];
  v3 = vzip1q_s32(*this, v2);
  v4 = vzip2q_s32(*this, v2);
  v3.i32[2] = (__int32)this[2];
  v4.i32[2] = this[2].i64[1];
  v5 = vmulq_f32(*(float32x4_t *)this, *(float32x4_t *)this);
  v5.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).u64[0];
  v5.f32[0] = sqrtf(v5.f32[0]);
  *(_QWORD *)&result = vdivq_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v3, v4), vdupq_lane_s32(*(int32x2_t *)this->i8, 1)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0)).u64[0];
  return result;
}

__n128 vg::shared::matrixFromRotationAndTranslation(uint64_t a1)
{
  return *(__n128 *)a1;
}

double vg::shared::rotation4x4ForAngle(float32x4_t *a1, float a2)
{
  __float2 v2;
  unsigned int v11;
  float v12;
  double result;
  float32x4_t v22;

  v22 = *a1;
  v2 = __sincosf_stret(a2 * 0.5);
  _Q3 = vmulq_n_f32(v22, v2.__sinval);
  _S5 = _Q3.i32[1];
  _S6 = _Q3.i32[2];
  __asm { FMLS            S0, S6, V3.S[2] }
  *(float *)&v11 = _S0 + (float)(v2.__cosval * v2.__cosval);
  v12 = vmlas_n_f32(vmuls_lane_f32(v2.__cosval, _Q3, 2), _Q3.f32[1], _Q3.f32[0]);
  result = COERCE_DOUBLE(__PAIR64__(v12 + v12, v11));
  __asm
  {
    FMLA            S4, S5, V3.S[1]
    FMLS            S16, S3, V3.S[0]
    FMLA            S18, S6, V3.S[1]
    FMLA            S17, S3, V3.S[2]
    FMLA            S16, S6, V3.S[1]
    FMLA            S1, S6, V3.S[2]
    FMLS            S1, S3, V3.S[0]
    FMLS            S1, S5, V3.S[1]
  }
  return result;
}

double vg::shared::matrixFromEulerAngles(__int128 *a1)
{
  float v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[4];

  v25 = *a1;
  LODWORD(v1) = HIDWORD(*(_QWORD *)a1);
  v28 = xmmword_249D3CF90;
  *(double *)v2.i64 = vg::shared::rotation4x4ForAngle((float32x4_t *)&v28, v1);
  v23 = v3;
  v24 = v2;
  v21 = v5;
  v22 = v4;
  v27 = xmmword_249D3AC80;
  *(double *)v6.i64 = vg::shared::rotation4x4ForAngle((float32x4_t *)&v27, *(float *)&v25);
  v19 = v6;
  v20 = v7;
  v17 = v9;
  v18 = v8;
  v26 = xmmword_249D3CFA0;
  *(double *)&v10 = vg::shared::rotation4x4ForAngle((float32x4_t *)&v26, *((float *)&v25 + 2));
  v11 = 0;
  v29 = v10;
  v30 = v12;
  v31 = v13;
  v32 = v14;
  do
  {
    v33[v11 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(__int128 *)((char *)&v29 + v11))), v20, *(float32x2_t *)((char *)&v29 + v11), 1), v18, *(float32x4_t *)((char *)&v29 + v11), 2), v17, *(float32x4_t *)((char *)&v29 + v11), 3);
    v11 += 16;
  }
  while (v11 != 64);
  v15 = 0;
  v29 = v33[0];
  v30 = v33[1];
  v31 = v33[2];
  v32 = v33[3];
  do
  {
    v33[v15 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(__int128 *)((char *)&v29 + v15))), v23, *(float32x2_t *)((char *)&v29 + v15), 1), v22, *(float32x4_t *)((char *)&v29 + v15), 2), v21, *(float32x4_t *)((char *)&v29 + v15), 3);
    v15 += 16;
  }
  while (v15 != 64);
  return *(double *)v33;
}

double vg::shared::eulerAnglesFromMatrix(vg::shared *this, simd_float4x4 a2)
{
  double v2;
  float v4;
  simd_float4 v5;
  float v6;
  float v7;

  if (a2.columns[2].f32[1] >= 1.0)
  {
    atan2f(-a2.columns[0].f32[2], -a2.columns[1].f32[2]);
    LODWORD(v2) = -1077342245;
LABEL_6:
    HIDWORD(v2) = 0;
    return v2;
  }
  if (a2.columns[2].f32[1] <= -1.0)
  {
    atan2f(a2.columns[0].f32[2], a2.columns[1].f32[2]);
    LODWORD(v2) = 1070141403;
    goto LABEL_6;
  }
  v5 = a2.columns[2];
  v6 = a2.columns[1].f32[1];
  v4 = a2.columns[0].f32[1];
  v7 = asinf(-a2.columns[2].f32[1]);
  v5.i32[0] = atan2f(v5.f32[0], v5.f32[2]);
  atan2f(v4, v6);
  return COERCE_DOUBLE(__PAIR64__(v5.u32[0], LODWORD(v7)));
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  if (a3 != a2)
  {
    v3 = a3;
    v5 = (unint64_t *)result;
    do
    {
      v6 = v3 - v5;
      if (v6 < 2)
        break;
      if (v6 == 3)
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v5 + 1, v3 - 1);
      if (v6 == 2)
      {
        v33 = *(v3 - 1);
        v34 = *v5;
        if (v33 < *v5)
        {
          *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
        return (uint64_t)std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v3);
      v7 = &v5[v6 >> 1];
      v8 = v3 - 1;
      result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v7, v3 - 1);
      v9 = *v5;
      if (*v5 >= *v7)
      {
        v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *v5 = *v10;
            *v10 = v9;
            result = (result + 1);
            goto LABEL_13;
          }
        }
        v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8)
          return result;
        while (1)
        {
          v27 = *v5;
          do
          {
            v29 = *v22++;
            v28 = v29;
          }
          while (v27 >= v29);
          v30 = v22 - 1;
          do
          {
            v32 = *--v8;
            v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8)
            break;
          *v30 = v31;
          *v8 = v28;
        }
        v5 = v22 - 1;
        if (v30 > a2)
          return result;
      }
      else
      {
        v10 = v3 - 1;
LABEL_13:
        v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          v16 = v5 + 1;
        }
        else
        {
          v12 = v5 + 1;
          while (1)
          {
            v13 = *v7;
            do
            {
              v15 = *v12++;
              v14 = v15;
            }
            while (v15 < v13);
            v16 = v12 - 1;
            do
            {
              v18 = *--v10;
              v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10)
              break;
            *v16 = v17;
            *v10 = v14;
            result = (result + 1);
            if (v16 == v7)
              v7 = v10;
          }
        }
        if (v16 != v7)
        {
          v19 = *v16;
          if (*v7 < *v16)
          {
            *v16 = *v7;
            *v7 = v19;
            result = (result + 1);
          }
        }
        if (v16 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v16 <= a2)
          {
            v24 = v16 + 1;
            while (v24 != v3)
            {
              v26 = *(v24 - 1);
              v25 = *v24++;
              if (v25 < v26)
                goto LABEL_29;
            }
          }
          else
          {
            while (v11 != v16)
            {
              v21 = *(v11 - 1);
              v20 = *v11++;
              if (v20 < v21)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          v5 = v16 + 1;
        else
          v3 = v16;
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  while (result != a2 - 1)
  {
    v2 = result++;
    if (v2 != a2 && result != a2)
    {
      v3 = *v2;
      v4 = result;
      v5 = v2;
      v6 = result;
      do
      {
        v8 = *v6++;
        v7 = v8;
        if (v8 < v3)
        {
          v3 = v7;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        v9 = *v2;
        *v2 = *v5;
        *v5 = v9;
      }
    }
  }
  return result;
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  float *v4;
  unint64_t v7;
  float *v8;
  float *v9;
  int v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;

  if (a3 != a2)
  {
    v4 = a3;
    do
    {
      v7 = v4 - a1;
      if (v7 < 2)
        break;
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        result = *(v4 - 1);
        v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v4, result);
      v8 = &a1[v7 >> 1];
      v9 = v4 - 1;
      v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      result = *a1;
      if (*a1 >= *v8)
      {
        v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9)
          return result;
        while (1)
        {
          v25 = *a1;
          do
          {
            v26 = *v21++;
            result = v26;
          }
          while (v25 >= v26);
          v27 = v21 - 1;
          do
          {
            v28 = *--v9;
            v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9)
            break;
          *v27 = v29;
          *v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2)
          return result;
      }
      else
      {
        v11 = v4 - 1;
LABEL_13:
        v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          v16 = a1 + 1;
        }
        else
        {
          v13 = a1 + 1;
          while (1)
          {
            v14 = *v8;
            do
            {
              v15 = *v13++;
              result = v15;
            }
            while (v15 < v14);
            v16 = v13 - 1;
            do
            {
              v17 = *--v11;
              v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11)
              break;
            *v16 = v18;
            *v11 = result;
            ++v10;
            if (v16 == v8)
              v8 = v11;
          }
        }
        if (v16 != v8)
        {
          result = *v8;
          v19 = *v16;
          if (*v8 < *v16)
          {
            *v16 = result;
            *v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2)
          return result;
        if (!v10)
        {
          if (v16 <= a2)
          {
            v23 = v16 + 1;
            while (v23 != v4)
            {
              v24 = *(v23 - 1);
              result = *v23++;
              if (result < v24)
                goto LABEL_29;
            }
          }
          else
          {
            while (v12 != v16)
            {
              v20 = *(v12 - 1);
              result = *v12++;
              if (result < v20)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          a1 = v16 + 1;
        else
          v4 = v16;
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float v7;
  float v8;

  while (a1 != a2 - 1)
  {
    v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      result = *v3;
      v4 = a1;
      v5 = v3;
      v6 = a1;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v7 < result)
        {
          result = v8;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        result = *v3;
        *v3 = *v5;
        *v5 = result;
      }
    }
  }
  return result;
}

uint64_t std::vector<std::vector<double>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<double>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<double>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<double>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_249D0CD44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_249D0CE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

id vg::shared::VNGetFaceObservations(vg::shared *this, IOSurface *a2)
{
  vg::shared *v2;
  CVPixelBufferRef CVPixelBufferFromIOSurface;
  CVPixelBufferRef v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  __int128 v13;
  char v14;
  _QWORD v15[5];
  _BYTE buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  if (-[vg::shared pixelFormat](v2, "pixelFormat") != 32
    && -[vg::shared pixelFormat](v2, "pixelFormat") != 1111970369)
  {
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      vg::OSTypeToString((vg *)-[vg::shared pixelFormat](v2, "pixelFormat"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_249CAD000, (os_log_t)v5, OS_LOG_TYPE_ERROR, " Unsupported format for the input image: %@ ", buf, 0xCu);

    }
    goto LABEL_12;
  }
  CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface((IOSurface *)v2);
  v4 = CVPixelBufferFromIOSurface;
  if (!CVPixelBufferFromIOSurface)
  {
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, (os_log_t)v5, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
    }
LABEL_12:
    v9 = 0;
    goto LABEL_17;
  }
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = ___ZN2vg6shared21VNGetFaceObservationsEP9IOSurface_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = CVPixelBufferFromIOSurface;
  v5 = MEMORY[0x24BD03294](v15);
  v6 = objc_alloc(MEMORY[0x24BDF9C28]);
  v7 = (void *)objc_msgSend(v6, "initWithCVPixelBuffer:options:", v4, MEMORY[0x24BDBD1B8]);
  v8 = v7;
  if (v7)
  {
    LOBYTE(v13) = 0;
    v14 = 0;
    vg::shared::getVNFaceObservations(v7, &v13, (uint64_t)buf);
    if (buf[8])
      v9 = *(void **)buf;
    else
      v9 = 0;
  }
  else
  {
    __VGLogSharedInstance();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_ERROR, " Vision request handler failed to instantiate ", buf, 2u);
    }

    v9 = 0;
  }

  (*(void (**)(uint64_t))(v5 + 16))(v5);
LABEL_17:

  return v9;
}

void sub_249D0D090(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void *v3;

  v2[2](v2);
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared21VNGetFaceObservationsEP9IOSurface_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void vg::shared::getVNFaceObservations(void *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  __int128 v8;
  void (**v9)(_QWORD);
  void *v10;
  void *v11;
  void *v12;
  char v13;
  __CFString *v14;
  char v15;
  NSObject *v16;
  void *v17;
  char v18;
  __CFString *v19;
  __CFString *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  id v26;
  _QWORD v27[4];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  uint8_t buf[4];
  const __CFString *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  VGLogVGSharedVision();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v6))
  {
    if (*((_BYTE *)a2 + 32))
      v7 = CFSTR("true");
    else
      v7 = CFSTR("false");
    *(_DWORD *)buf = 138543362;
    v35 = v7;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetVNFaceObservations", "withFaceBounds: %{public}@", buf, 0xCu);
  }

  v27[0] = MEMORY[0x24BDAC760];
  v27[1] = 3221225472;
  v27[2] = ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke;
  v27[3] = &__block_descriptor_72_e5_v8__0l;
  v8 = a2[1];
  v28 = *a2;
  v29 = v8;
  v30 = *((_QWORD *)a2 + 4);
  v9 = (void (**)(_QWORD))MEMORY[0x24BD03294](v27);
  if (*((_BYTE *)a2 + 32))
  {
    objc_msgSend(MEMORY[0x24BDF9BB8], "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:", 3737841669, 0, 0, 0, *(double *)a2, *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 3));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v10;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v33, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)a3 = objc_msgSend(v11, "mutableCopy");
    *(_BYTE *)(a3 + 8) = 1;

    goto LABEL_30;
  }
  v12 = (void *)objc_opt_new();
  v31 = 0;
  v13 = objc_msgSend(v12, "setRevision:error:", 3737841669, &v31);
  v14 = (__CFString *)v31;
  if (v14)
    v15 = 0;
  else
    v15 = v13;
  if ((v15 & 1) != 0)
  {
    VGLogVGSharedVision();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_249CAD000, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceRectangles_PerformRequest", (const char *)&unk_249D51699, buf, 2u);
    }

    v32 = v12;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v32, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 0;
    v18 = objc_msgSend(v5, "performRequests:error:", v17, &v26);
    v19 = (__CFString *)v26;

    if ((v18 & 1) != 0)
    {
      ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke_43();
    }
    else
    {
      __VGLogSharedInstance();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v35 = v19;
        _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_ERROR, " Vision failed face detection request with error: %@ ", buf, 0xCu);
      }

      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;
      ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke_43();
      if ((v18 & 1) == 0)
        goto LABEL_29;
    }
    objc_msgSend(v12, "results");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v24, "count"))
    {
      *(_QWORD *)a3 = v24;
      *(_BYTE *)(a3 + 8) = 1;
    }
    else
    {
      __VGLogSharedInstance();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v25, OS_LOG_TYPE_ERROR, " Vision did not detect any faces ", buf, 2u);
      }

      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;

    }
LABEL_29:

    goto LABEL_30;
  }
  v20 = v14;
  __VGLogSharedInstance();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v35 = v20;
    _os_log_impl(&dword_249CAD000, v21, OS_LOG_TYPE_ERROR, " Vision VNDetectFaceRectanglesRequest failed to set revision with error: %@ ", buf, 0xCu);
  }

  __VGLogSharedInstance();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v22, OS_LOG_TYPE_ERROR, " Unable to create Vision face detection request ", buf, 2u);
  }

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
LABEL_30:
  v9[2](v9);

}

void sub_249D0D538(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void *v3;
  void *v4;
  void *v5;

  v2[2](v2);
  _Unwind_Resume(a1);
}

id vg::shared::VNGetLargestFaceObservation(vg::shared *this, IOSurface *a2)
{
  vg::shared *v2;
  IOSurface *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t i;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;
  CGRect v25;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  vg::shared::VNGetFaceObservations(v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4 && objc_msgSend(v4, "count"))
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v6 = v5;
    v7 = 0;
    v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v20;
      v10 = 0.0;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v20 != v9)
            objc_enumerationMutation(v6);
          v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
          objc_msgSend(v12, "boundingBox", (_QWORD)v19);
          if (!CGRectIsEmpty(v25))
          {
            objc_msgSend(v12, "boundingBox");
            v14 = v13;
            objc_msgSend(v12, "boundingBox");
            v16 = v14 * v15;
            if (v16 > v10)
            {
              v17 = v12;

              v10 = v16;
              v7 = v17;
            }
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v8);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_249D0D770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void vg::shared::VNDetectFaceMetadata(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  NSObject *v11;
  CVPixelBufferRef CVPixelBufferFromIOSurface;
  CVPixelBufferRef v13;
  id v14;
  void *v15;
  void *v16;
  __int128 v17;
  int v18;
  id v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  char v26;
  id v27;
  char v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  void *v42;
  char v43;
  void *v44;
  NSObject *v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  NSObject *v49;
  const __CFString *v50;
  const __CFString *v51;
  int v52;
  const __CFString *v53;
  void (**v54)(_QWORD);
  char v55;
  id v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  NSObject *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  void (**v70)(_QWORD);
  id v71;
  _QWORD v72[5];
  id v73;
  char v74;
  __int128 v75[2];
  uint64_t v76;
  id v77;
  unsigned __int8 v78;
  _QWORD v79[5];
  _QWORD v80[5];
  id v81;
  uint8_t v82[8];
  char v83;
  _BYTE buf[12];
  __int16 v85;
  const __CFString *v86;
  __int16 v87;
  const __CFString *v88;
  uint8_t v89[24];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v4))
  {
    v5 = CFSTR("true");
    if (*(_BYTE *)(a1 + 50))
      v6 = CFSTR("true");
    else
      v6 = CFSTR("false");
    v7 = *(unsigned __int8 *)(a1 + 48);
    if (*(_BYTE *)(a1 + 49))
      v8 = CFSTR("true");
    else
      v8 = CFSTR("false");
    *(_DWORD *)buf = 138543874;
    if (!v7)
      v5 = CFSTR("false");
    *(_QWORD *)&buf[4] = v6;
    v85 = 2114;
    v86 = v8;
    v87 = 2114;
    v88 = v5;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", buf, 0x20u);
  }

  v9 = MEMORY[0x24BDAC760];
  v80[0] = MEMORY[0x24BDAC760];
  v80[1] = 3221225472;
  v80[2] = ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke;
  v80[3] = &__block_descriptor_40_e5_v8__0l;
  v80[4] = a1;
  v10 = (void (**)(_QWORD))MEMORY[0x24BD03294](v80);
  if (*(unsigned __int8 *)(a1 + 49) | *(unsigned __int8 *)(a1 + 48))
  {
    if (objc_msgSend(*(id *)a1, "pixelFormat") != 32
      && objc_msgSend(*(id *)a1, "pixelFormat") != 1111970369)
    {
      __VGLogSharedInstance();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        vg::OSTypeToString((vg *)objc_msgSend(*(id *)a1, "pixelFormat"));
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v44;
        _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_ERROR, " Unsupported format for the input image: %@ ", buf, 0xCu);

      }
      goto LABEL_62;
    }
    CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(*(IOSurface **)a1);
    v13 = CVPixelBufferFromIOSurface;
    if (!CVPixelBufferFromIOSurface)
    {
      __VGLogSharedInstance();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
      }
      goto LABEL_62;
    }
    v79[0] = v9;
    v79[1] = 3221225472;
    v79[2] = ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_28;
    v79[3] = &__block_descriptor_40_e5_v8__0l;
    v79[4] = CVPixelBufferFromIOSurface;
    v70 = (void (**)(_QWORD))MEMORY[0x24BD03294](v79);
    v14 = objc_alloc(MEMORY[0x24BDF9C28]);
    v15 = (void *)objc_msgSend(v14, "initWithCVPixelBuffer:options:", v13, MEMORY[0x24BDBD1B8]);
    v16 = v15;
    if (!v15)
    {
      __VGLogSharedInstance();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v46, OS_LOG_TYPE_ERROR, " Vision request handler failed to instantiate ", buf, 2u);
      }

      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      goto LABEL_110;
    }
    v17 = *(_OWORD *)(a1 + 24);
    v75[0] = *(_OWORD *)(a1 + 8);
    v75[1] = v17;
    v76 = *(_QWORD *)(a1 + 40);
    vg::shared::getVNFaceObservations(v15, v75, (uint64_t)&v77);
    v18 = v78;
    if (!v78 || (v19 = v77, !objc_msgSend(v77, "count")))
    {
      __VGLogSharedInstance();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v45, OS_LOG_TYPE_ERROR, " Unable to get VNFaceObservations ", buf, 2u);
      }

      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      if (!v18)
        goto LABEL_110;
LABEL_109:

LABEL_110:
      v70[2](v70);

      goto LABEL_111;
    }
    objc_msgSend(v19, "firstObject");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = (void *)objc_opt_new();
    LOBYTE(v73) = 0;
    v74 = 0;
    if (*(_BYTE *)(a1 + 48))
    {
      v20 = v68;
      VGLogVGSharedVision();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v21))
      {
        *(_WORD *)v82 = 0;
        _os_signpost_emit_with_name_impl(&dword_249CAD000, v21, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateFaceLandmarksRequest", (const char *)&unk_249D51699, v82, 2u);
      }

      v22 = (void *)objc_opt_new();
      *(_QWORD *)v82 = v20;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v82, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setInputFaceObservations:", v23);

      *(_QWORD *)buf = v22;
      buf[8] = 1;
      ___ZN2vg6sharedL26createFaceLandmarksRequestEP17VNFaceObservation_block_invoke();

      std::__optional_storage_base<VNDetectFaceLandmarksRequest * {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<VNDetectFaceLandmarksRequest * {__strong},false>>((uint64_t)&v73, (uint64_t *)buf);
      if (buf[8])

      if (v74)
        objc_msgSend(v69, "addObject:", v73);
    }
    v82[0] = 0;
    v83 = 0;
    if (*(_BYTE *)(a1 + 49))
    {
      v67 = v68;
      VGLogVGSharedVision();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v24))
      {
        *(_WORD *)v89 = 0;
        _os_signpost_emit_with_name_impl(&dword_249CAD000, v24, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateFaceAttributesRequest", (const char *)&unk_249D51699, v89, 2u);
      }

      v25 = (void *)objc_opt_new();
      v81 = 0;
      v26 = objc_msgSend(v25, "setRevision:error:", 3737841666, &v81);
      v27 = v81;
      if (v27)
        v28 = 0;
      else
        v28 = v26;
      v66 = v27;
      if ((v28 & 1) != 0)
      {
        objc_msgSend(MEMORY[0x24BDF9C70], "defaultANEDevice");
        v29 = objc_claimAutoreleasedReturnValue();
        if (!v29)
        {
          objc_msgSend(MEMORY[0x24BDF9C70], "defaultDevice");
          v29 = objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(v67, "boundingBox");
        v31 = v30;
        v33 = v32;
        v35 = v34;
        v37 = v36;
        objc_msgSend(v25, "setProcessingDevice:", v29);
        v38 = 1.0;
        if (v31 <= 1.0)
          v39 = v31;
        else
          v39 = 1.0;
        if (v31 < 0.0)
          v39 = 0.0;
        if (v33 <= 1.0)
          v40 = v33;
        else
          v40 = 1.0;
        if (v33 < 0.0)
          v40 = 0.0;
        if (v35 <= 1.0)
          v41 = v35;
        else
          v41 = 1.0;
        if (v35 < 0.0)
          v41 = 0.0;
        if (v37 <= 1.0)
          v38 = v37;
        if (v37 < 0.0)
          v38 = 0.0;
        objc_msgSend(v25, "setRegionOfInterest:", v39, v40, v41, v38);
        *(_QWORD *)v89 = v67;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v89, 1);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "setInputFaceObservations:", v42);

        *(_QWORD *)buf = v25;
        v43 = 1;
        v25 = (void *)v29;
      }
      else
      {
        v47 = v27;
        __VGLogSharedInstance();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v89 = 138412290;
          *(_QWORD *)&v89[4] = v47;
          _os_log_impl(&dword_249CAD000, v48, OS_LOG_TYPE_ERROR, " Vision VNClassifyFaceAttributesRequest failed to set revision with error: %@ ", v89, 0xCu);
        }

        v43 = 0;
        buf[0] = 0;
      }
      buf[8] = v43;

      ___ZN2vg6sharedL27createFaceAttributesRequestEP17VNFaceObservation_block_invoke();
      std::__optional_storage_base<VNDetectFaceLandmarksRequest * {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<VNDetectFaceLandmarksRequest * {__strong},false>>((uint64_t)v82, (uint64_t *)buf);
      if (buf[8])

      if (v83)
        objc_msgSend(v69, "addObject:", *(_QWORD *)v82);
    }
    VGLogVGSharedVision();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v49))
    {
      v50 = CFSTR("true");
      if (*(_BYTE *)(a1 + 50))
        v51 = CFSTR("true");
      else
        v51 = CFSTR("false");
      v52 = *(unsigned __int8 *)(a1 + 48);
      if (*(_BYTE *)(a1 + 49))
        v53 = CFSTR("true");
      else
        v53 = CFSTR("false");
      *(_DWORD *)buf = 138543874;
      if (!v52)
        v50 = CFSTR("false");
      *(_QWORD *)&buf[4] = v51;
      v85 = 2114;
      v86 = v53;
      v87 = 2114;
      v88 = v50;
      _os_signpost_emit_with_name_impl(&dword_249CAD000, v49, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata_PerformRequests", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", buf, 0x20u);
    }

    v72[0] = v9;
    v72[1] = 3221225472;
    v72[2] = ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_30;
    v72[3] = &__block_descriptor_40_e5_v8__0l;
    v72[4] = a1;
    v54 = (void (**)(_QWORD))MEMORY[0x24BD03294](v72);
    v71 = 0;
    v55 = objc_msgSend(v16, "performRequests:error:", v69, &v71);
    v56 = v71;
    if ((v55 & 1) == 0)
    {
      __VGLogSharedInstance();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v56;
        _os_log_impl(&dword_249CAD000, v57, OS_LOG_TYPE_ERROR, " Vision failed to perform requests with error: %@ ", buf, 0xCu);
      }

    }
    v54[2](v54);

    if (v74)
    {
      objc_msgSend(v73, "results");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v58, "count"))
      {
        __VGLogSharedInstance();
        v64 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_249CAD000, v64, OS_LOG_TYPE_ERROR, " Vision did not detect any face landmarks ", buf, 2u);
        }

        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;

        goto LABEL_103;
      }
      objc_msgSend(v58, "firstObject");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "landmarks");
      v60 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v60 = 0;
    }
    if (v83)
    {
      objc_msgSend(*(id *)v82, "results");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v61, "count"))
      {
        __VGLogSharedInstance();
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_249CAD000, v65, OS_LOG_TYPE_ERROR, " Vision did not detect any face attributes ", buf, 2u);
        }

        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;

LABEL_104:
        if (v83)

        if (v74)
        if (!v78)
          goto LABEL_110;
        goto LABEL_109;
      }
      objc_msgSend(v61, "firstObject");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "faceAttributes");
      v63 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v63 = 0;
    }
    *(_QWORD *)a2 = v60;
    *(_QWORD *)(a2 + 8) = v63;
    *(_BYTE *)(a2 + 16) = 1;
LABEL_103:
    v60 = 0;
    goto LABEL_104;
  }
  __VGLogSharedInstance();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_ERROR, " Invalid input for Vision Face Metadata ", buf, 2u);
  }
LABEL_62:

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_111:
  v10[2](v10);

}

void sub_249D0E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void (**a14)(void), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,char a29)
{
  void (**v29)(_QWORD);
  void *v30;
  void *v31;
  uint64_t v32;

  ___ZN2vg6sharedL27createFaceAttributesRequestEP17VNFaceObservation_block_invoke();
  if (*(_BYTE *)(v32 - 216))

  if (a22)
  if (a29)

  a14[2]();
  v29[2](v29);

  _Unwind_Resume(a1);
}

id VGLogVGSharedVision(void)
{
  if (VGLogVGSharedVision(void)::onceToken != -1)
    dispatch_once(&VGLogVGSharedVision(void)::onceToken, &__block_literal_global_47);
  return (id)VGLogVGSharedVision(void)::handle;
}

void ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke(uint64_t a1)
{
  NSObject *v2;
  _BYTE *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  const __CFString *v10;
  __int16 v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    v3 = *(_BYTE **)(a1 + 32);
    if (v3[50])
      v4 = CFSTR("true");
    else
      v4 = CFSTR("false");
    if (v3[49])
      v5 = CFSTR("true");
    else
      v5 = CFSTR("false");
    if (v3[48])
      v6 = CFSTR("true");
    else
      v6 = CFSTR("false");
    v7 = 138543874;
    v8 = v4;
    v9 = 2114;
    v10 = v5;
    v11 = 2114;
    v12 = v6;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", (uint8_t *)&v7, 0x20u);
  }

}

void ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_28(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_30(uint64_t a1)
{
  NSObject *v2;
  _BYTE *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  const __CFString *v10;
  __int16 v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    v3 = *(_BYTE **)(a1 + 32);
    if (v3[50])
      v4 = CFSTR("true");
    else
      v4 = CFSTR("false");
    if (v3[49])
      v5 = CFSTR("true");
    else
      v5 = CFSTR("false");
    if (v3[48])
      v6 = CFSTR("true");
    else
      v6 = CFSTR("false");
    v7 = 138543874;
    v8 = v4;
    v9 = 2114;
    v10 = v5;
    v11 = 2114;
    v12 = v6;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata_PerformRequests", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", (uint8_t *)&v7, 0x20u);
  }

}

id vg::shared::VNDetectFaceLandmarks2D(void *a1, __int128 *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  __int128 v6;
  id v7;
  id v8;
  id v10[2];
  char v11;
  uint8_t buf[8];
  __int128 v13;
  __int128 v14;
  char v15;
  __int16 v16;
  char v17;

  v3 = a1;
  VGLogVGSharedVision();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceLandmarks2D", (const char *)&unk_249D51699, buf, 2u);
  }

  v5 = v3;
  *(_QWORD *)buf = v5;
  v6 = a2[1];
  v13 = *a2;
  v14 = v6;
  v15 = *((_BYTE *)a2 + 32);
  v16 = 1;
  v17 = 0;
  vg::shared::VNDetectFaceMetadata((uint64_t)buf, (uint64_t)v10);
  if (v11)
  {
    v7 = v10[1];
    v8 = v10[0];

  }
  else
  {
    v8 = 0;
  }

  ___ZN2vg6shared23VNDetectFaceLandmarks2DEP9IOSurfaceRKNSt3__18optionalI6CGRectEE_block_invoke();
  return v8;
}

void sub_249D0E744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  ___ZN2vg6shared23VNDetectFaceLandmarks2DEP9IOSurfaceRKNSt3__18optionalI6CGRectEE_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared23VNDetectFaceLandmarks2DEP9IOSurfaceRKNSt3__18optionalI6CGRectEE_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGSharedVision();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceLandmarks2D", (const char *)&unk_249D51699, v1, 2u);
  }

}

BOOL vg::shared::VNWarmupDetector(_BYTE *a1)
{
  NSObject *v2;
  const __CFString *v3;
  const __CFString *v4;
  void (**v5)(_QWORD);
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  vg *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  _BOOL8 v15;
  NSObject *v16;
  NSObject *v17;
  uint8_t v19[16];
  _QWORD v20[2];
  char v21;
  _QWORD v22[5];
  _BYTE buf[12];
  __int16 v24;
  const __CFString *v25;
  char v26;
  __int16 v27;
  char v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    v3 = CFSTR("true");
    if (a1[1])
      v4 = CFSTR("true");
    else
      v4 = CFSTR("false");
    if (!*a1)
      v3 = CFSTR("false");
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v4;
    v24 = 2114;
    v25 = v3;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNWarmupDetector", "warmupFaceAttributesRequest: %{public}@, warmupLandmarks2DRequest: %{public}@", buf, 0x16u);
  }

  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = ___ZN2vg6shared16VNWarmupDetectorERKNS0_13VNWarmupInputE_block_invoke;
  v22[3] = &__block_descriptor_40_e5_v8__0l;
  v22[4] = a1;
  v5 = (void (**)(_QWORD))MEMORY[0x24BD03294](v22);
  v6 = objc_alloc(MEMORY[0x24BDBCE50]);
  v7 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BDD1488], "vg_resourcePath");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v29[0] = v8;
  v29[1] = CFSTR("SharedData");
  v29[2] = CFSTR("vision_warmup_data.bin");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v29, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "pathWithComponents:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (vg *)objc_msgSend(v6, "initWithContentsOfFile:", v10);

  if (!v11)
  {
    __VGLogSharedInstance();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v13, OS_LOG_TYPE_DEBUG, " Unable to load warmup data for Vision filter ", buf, 2u);
    }
    goto LABEL_17;
  }
  vg::createColorIOSurfaceFromData(v11, (NSData *)0x42475241);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (!v12)
  {
    __VGLogSharedInstance();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v17, OS_LOG_TYPE_DEBUG, " Unable to construct BGRA IOSurface from warmup data for Vision filter ", buf, 2u);
    }

LABEL_17:
    v15 = 0;
    goto LABEL_21;
  }
  v14 = v12;
  *(_QWORD *)buf = v14;
  buf[8] = 0;
  v26 = 0;
  v27 = *(_WORD *)a1;
  v28 = 1;
  vg::shared::VNDetectFaceMetadata((uint64_t)buf, (uint64_t)v20);
  v15 = v21 != 0;
  if (v21)
  {

    v16 = v20[0];
  }
  else
  {
    __VGLogSharedInstance();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_DEBUG, " Failed to warmup Vision filter ", v19, 2u);
    }
  }

  v13 = v14;
LABEL_21:

  v5[2](v5);
  return v15;
}

void sub_249D0EB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  void (**v19)(_QWORD);
  void *v20;
  void *v21;

  std::__optional_destruct_base<vg::shared::VNFaceOutput,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);

  v19[2](v19);
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared16VNWarmupDetectorERKNS0_13VNWarmupInputE_block_invoke(uint64_t a1)
{
  NSObject *v2;
  _BYTE *v3;
  const __CFString *v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;
  __int16 v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    v3 = *(_BYTE **)(a1 + 32);
    if (v3[1])
      v4 = CFSTR("true");
    else
      v4 = CFSTR("false");
    if (*v3)
      v5 = CFSTR("true");
    else
      v5 = CFSTR("false");
    v6 = 138543618;
    v7 = v4;
    v8 = 2114;
    v9 = v5;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNWarmupDetector", "warmupFaceAttributesRequest: %{public}@, warmupLandmarks2DRequest: %{public}@", (uint8_t *)&v6, 0x16u);
  }

}

id vg::shared::VNGetFaceAttributes(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  void (**v4)(_QWORD);
  id v5;
  id v7[2];
  char v8;
  _QWORD v9[5];
  _BYTE buf[24];
  __int128 v11;
  char v12;
  __int16 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    if (*(_BYTE *)(a1 + 48))
      v3 = CFSTR("true");
    else
      v3 = CFSTR("false");
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v3;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNGetFaceAttributes", "isWarmupRun: %{public}@", buf, 0xCu);
  }

  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = ___ZN2vg6shared19VNGetFaceAttributesERKNS0_21VNFaceAttributesInputE_block_invoke;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x24BD03294](v9);
  *(_QWORD *)buf = *(id *)a1;
  *(_OWORD *)&buf[8] = *(_OWORD *)(a1 + 8);
  v11 = *(_OWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 40);
  v13 = 256;
  v14 = *(_BYTE *)(a1 + 48);
  vg::shared::VNDetectFaceMetadata((uint64_t)buf, (uint64_t)v7);
  if (v8)
  {
    v5 = v7[1];

  }
  else
  {
    v5 = 0;
  }

  v4[2](v4);
  return v5;
}

void sub_249D0EE00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2vg6shared19VNGetFaceAttributesERKNS0_21VNFaceAttributesInputE_block_invoke(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 48))
      v3 = CFSTR("true");
    else
      v3 = CFSTR("false");
    v4 = 138543362;
    v5 = v3;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNGetFaceAttributes", "isWarmupRun: %{public}@", (uint8_t *)&v4, 0xCu);
  }

}

uint64_t vg::shared::VNGetIsBlinking(void *a1, float a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  float v11;
  float v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v16[16];

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "eyesCategory");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "label");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDF9DD8]);

    objc_msgSend(v4, "eyesCategory");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "label");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "confidence");
    v12 = v11;

    if (v12 >= a2)
      v13 = v8;
    else
      v13 = 0;
  }
  else
  {
    __VGLogSharedInstance();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_249CAD000, v14, OS_LOG_TYPE_ERROR, " Vision face attributes are nil ", v16, 2u);
    }

    v13 = 0;
  }

  return v13;
}

void sub_249D0F02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vg::shared::VNGetLeftPupilPoint(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  double v8;
  int v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  __int16 v20;
  __int16 v21;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __VGLogSharedInstance();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v21 = 0;
      v17 = " Vision face landmarks are nil ";
      v18 = (uint8_t *)&v21;
LABEL_8:
      _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_ERROR, v17, v18, 2u);
    }
LABEL_9:

    v15 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v3, "leftPupil");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "pointCount");

  if (v6 != 1)
  {
    __VGLogSharedInstance();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v20 = 0;
      v17 = " Vision did not find the left pupil ";
      v18 = (uint8_t *)&v20;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  objc_msgSend(v4, "leftPupil");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = (double)(unsigned __int16)a2;
  v9 = HIWORD(a2);
  v10 = (double *)objc_msgSend(v7, "pointsInImageOfSize:", v8, (double)v9);
  v11 = *v10;
  v12 = v10[1];

  *(float *)&v13 = v11;
  v14 = v12;
  *((float *)&v13 + 1) = (float)v9 - v14;
  v15 = v13;
LABEL_10:

  return v15;
}

void sub_249D0F1B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vg::shared::VNGetRightPupilPoint(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  double v8;
  int v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  __int16 v20;
  __int16 v21;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __VGLogSharedInstance();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v21 = 0;
      v17 = " Vision face landmarks are nil ";
      v18 = (uint8_t *)&v21;
LABEL_8:
      _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_ERROR, v17, v18, 2u);
    }
LABEL_9:

    v15 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v3, "rightPupil");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "pointCount");

  if (v6 != 1)
  {
    __VGLogSharedInstance();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v20 = 0;
      v17 = " Vision did not find the right pupil ";
      v18 = (uint8_t *)&v20;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  objc_msgSend(v4, "rightPupil");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = (double)(unsigned __int16)a2;
  v9 = HIWORD(a2);
  v10 = (double *)objc_msgSend(v7, "pointsInImageOfSize:", v8, (double)v9);
  v11 = *v10;
  v12 = v10[1];

  *(float *)&v13 = v11;
  v14 = v12;
  *((float *)&v13 + 1) = (float)v9 - v14;
  v15 = v13;
LABEL_10:

  return v15;
}

void sub_249D0F31C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::shared::VNGetHumanBBoxes(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  CVPixelBufferRef CVPixelBufferFromIOSurface;
  CVPixelBufferRef v6;
  id v7;
  void *v8;
  char v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  VGHumanBBox *v33;
  float v34;
  VGHumanBBox *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  id v39;
  void (**v40)(_QWORD);
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  id v46;
  id v47;
  _QWORD v48[5];
  _BYTE v49[128];
  void *v50;
  uint8_t buf[4];
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNGetHumanBBox", (const char *)&unk_249D51699, buf, 2u);
  }

  CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(*(IOSurface **)a1);
  v6 = CVPixelBufferFromIOSurface;
  if (CVPixelBufferFromIOSurface)
  {
    v48[0] = MEMORY[0x24BDAC760];
    v48[1] = 3221225472;
    v48[2] = ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke_40;
    v48[3] = &__block_descriptor_40_e5_v8__0l;
    v48[4] = CVPixelBufferFromIOSurface;
    v40 = (void (**)(_QWORD))MEMORY[0x24BD03294](v48);
    v7 = objc_alloc(MEMORY[0x24BDF9C28]);
    v41 = (void *)objc_msgSend(v7, "initWithCVPixelBuffer:options:", v6, MEMORY[0x24BDBD1B8]);
    v8 = (void *)objc_opt_new();
    objc_msgSend(v8, "setUpperBodyOnly:", *(unsigned __int8 *)(a1 + 8));
    v47 = 0;
    v9 = objc_msgSend(v8, "setRevision:error:", 2, &v47);
    v10 = v47;
    if ((v9 & 1) != 0)
    {
      v50 = v8;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v50, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = v10;
      v12 = objc_msgSend(v41, "performRequests:error:", v11, &v46);
      v39 = v46;

      if ((v12 & 1) != 0)
      {
        objc_msgSend(v8, "results");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(v13, "count", v13));
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v15 = v13;
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
        if (v16)
        {
          v17 = *(_QWORD *)v43;
          do
          {
            for (i = 0; i != v16; ++i)
            {
              if (*(_QWORD *)v43 != v17)
                objc_enumerationMutation(v15);
              v19 = *(id *)(*((_QWORD *)&v42 + 1) + 8 * i);
              objc_msgSend(v19, "boundingBox");
              if (v20 <= 1.0)
                v24 = v20;
              else
                v24 = 1.0;
              if (v20 >= 0.0)
                v25 = v24;
              else
                v25 = 0.0;
              v26 = 1.0 - (v21 + v23);
              if (v26 <= 1.0)
                v27 = 1.0 - (v21 + v23);
              else
                v27 = 1.0;
              if (v26 >= 0.0)
                v28 = v27;
              else
                v28 = 0.0;
              v29 = 1.0 - v25;
              if (1.0 - v25 >= v22)
                v29 = v22;
              if (v22 >= 0.0)
                v30 = v29;
              else
                v30 = 0.0;
              v31 = 1.0 - v28;
              if (1.0 - v28 >= v23)
                v31 = v23;
              if (v23 >= 0.0)
                v32 = v31;
              else
                v32 = 0.0;
              v33 = [VGHumanBBox alloc];
              objc_msgSend(v19, "confidence");
              v35 = -[VGHumanBBox initWithBBox:confidence:](v33, "initWithBBox:confidence:", v25, v28, v30, v32, v34);
              objc_msgSend(v14, "addObject:", v35);

            }
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
          }
          while (v16);
        }

        *(_QWORD *)a2 = v14;
        *(_BYTE *)(a2 + 8) = 1;

      }
      else
      {
        __VGLogSharedInstance();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v52 = v39;
          _os_log_impl(&dword_249CAD000, v38, OS_LOG_TYPE_ERROR, " Failed to process human bbox request %@ ", buf, 0xCu);
        }

        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 8) = 0;
      }
      v10 = v39;
    }
    else
    {
      __VGLogSharedInstance();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v52 = v10;
        _os_log_impl(&dword_249CAD000, v37, OS_LOG_TYPE_ERROR, " Error setting revision for detect human rectangles model %@ ", buf, 0xCu);
      }

      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
    }

    v40[2](v40);
  }
  else
  {
    __VGLogSharedInstance();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v36, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
    }

    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke();
}

void sub_249D0F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void (**a11)(void), void *a12)
{
  void *v12;

  a11[2]();
  ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGSharedVision();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNGetHumanBBox", (const char *)&unk_249D51699, v1, 2u);
  }

}

void ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke_40(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  VGLogVGSharedVision();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    if (*(_BYTE *)(a1 + 64))
      v3 = CFSTR("true");
    else
      v3 = CFSTR("false");
    v4 = 138543362;
    v5 = v3;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetVNFaceObservations", "withFaceBounds: %{public}@", (uint8_t *)&v4, 0xCu);
  }

}

void ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke_43()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGSharedVision();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceRectangles_PerformRequest", (const char *)&unk_249D51699, v1, 2u);
  }

}

void ___ZL19VGLogVGSharedVisionv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGSharedVision");
  v1 = (void *)VGLogVGSharedVision(void)::handle;
  VGLogVGSharedVision(void)::handle = (uint64_t)v0;

}

void sub_249D0FADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN2vg6sharedL26createFaceLandmarksRequestEP17VNFaceObservation_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGSharedVision();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateFaceLandmarksRequest", (const char *)&unk_249D51699, v1, 2u);
  }

}

void std::__optional_storage_base<VNDetectFaceLandmarksRequest * {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<VNDetectFaceLandmarksRequest * {__strong},false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *(id *)a1;
      *(_QWORD *)a1 = v3;

    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {

    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

void ___ZN2vg6sharedL27createFaceAttributesRequestEP17VNFaceObservation_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGSharedVision();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateFaceAttributesRequest", (const char *)&unk_249D51699, v1, 2u);
  }

}

uint64_t std::__optional_destruct_base<vg::shared::VNFaceOutput,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
  {

  }
  return a1;
}

void sub_249D0FEC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id humanAttributesMap(void)
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  {
    v2 = *MEMORY[0x24BDF9F60];
    v4[0] = *MEMORY[0x24BDF9F68];
    v4[1] = v2;
    v5[0] = CFSTR("hair");
    v5[1] = CFSTR("facial_hair");
    v3 = *MEMORY[0x24BDF9F70];
    v4[2] = *MEMORY[0x24BDF9F78];
    v4[3] = v3;
    v5[2] = CFSTR("teeth");
    v5[3] = CFSTR("skin");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v5, v4, 4);
    humanAttributesMap(void)::kHumanAttributesMap = objc_claimAutoreleasedReturnValue();
  }
  return (id)humanAttributesMap(void)::kHumanAttributesMap;
}

void sub_249D10048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id personInstancesMapNames(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    personInstancesMapNames(void)::kPersonInstancesMapNames = objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", CFSTR("person_instances_1"), CFSTR("person_instances_2"), CFSTR("person_instances_3"), CFSTR("person_instances_4"), 0);
  }
  return (id)personInstancesMapNames(void)::kPersonInstancesMapNames;
}

void sub_249D100F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_249D10434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D104EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D10AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_249D10E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

id vg::VertexAttributeBuffer::makeIOSurfaceProperties(vg::VertexAttributeBuffer *this, MTLVertexFormat a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint8_t v12[8];
  _QWORD v13[4];
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = 0;
    v3 = 1278226534;
    v4 = 1;
    v5 = 4;
    switch((unint64_t)this)
    {
      case 3uLL:
      case 6uLL:
        v3 = 1278226488;
        v4 = 4;
        v5 = 1;
        goto LABEL_18;
      case 4uLL:
      case 5uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x20uLL:
      case 0x21uLL:
      case 0x22uLL:
      case 0x23uLL:
        return v2;
      case 0x10uLL:
      case 0x19uLL:
        v3 = 1278226742;
        v5 = 2;
        v4 = 2;
        goto LABEL_18;
      case 0x11uLL:
      case 0x1AuLL:
        v3 = 1278226742;
        v4 = 3;
        goto LABEL_13;
      case 0x12uLL:
      case 0x1BuLL:
        v3 = 1278226742;
        v4 = 4;
        goto LABEL_13;
      case 0x1CuLL:
      case 0x24uLL:
        goto LABEL_18;
      case 0x1DuLL:
      case 0x25uLL:
        v4 = 2;
        goto LABEL_16;
      case 0x1EuLL:
      case 0x26uLL:
        v4 = 3;
LABEL_16:
        v5 = 4;
        goto LABEL_18;
      case 0x1FuLL:
      case 0x27uLL:
        v5 = 4;
        v4 = 4;
        goto LABEL_18;
      default:
        if (this != (vg::VertexAttributeBuffer *)50 && this != (vg::VertexAttributeBuffer *)53)
          return v2;
        v3 = 1278226742;
        v4 = 1;
LABEL_13:
        v5 = 2;
LABEL_18:
        v13[0] = *MEMORY[0x24BDD8D90];
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v4 * a2);
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = *MEMORY[0x24BDD8D58];
        v14[0] = v6;
        v14[1] = &unk_251B34D60;
        v8 = *MEMORY[0x24BDD8D60];
        v13[1] = v7;
        v13[2] = v8;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v3);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v14[2] = v9;
        v13[3] = *MEMORY[0x24BDD8D38];
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v5);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v14[3] = v10;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, v13, 4);
        v2 = (void *)objc_claimAutoreleasedReturnValue();

        break;
    }
  }
  else
  {
    __VGLogSharedInstance();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_ERROR, " Num elements must be > 0 ", v12, 2u);
    }
    v2 = 0;
  }

  return v2;
}

void sub_249D110C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t vg::VertexAttributeBuffer::checkCreateInfo(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  if (v1)
  {
    v3 = *a1;
    v4 = 4;
    switch(*a1)
    {
      case 0:
        __VGLogSharedInstance();
        v5 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          goto LABEL_18;
        LOWORD(v14) = 0;
        v6 = " Vertex format must be valid ";
        goto LABEL_6;
      case 1:
      case 2:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 32:
      case 33:
      case 34:
      case 35:
        goto LABEL_20;
      case 3:
      case 6:
      case 16:
      case 25:
      case 28:
      case 36:
        goto LABEL_13;
      case 17:
      case 26:
        v4 = 6;
        goto LABEL_13;
      case 18:
      case 27:
      case 29:
      case 37:
        v4 = 8;
        goto LABEL_13;
      case 30:
      case 38:
        v4 = 12;
        goto LABEL_13;
      case 31:
      case 39:
        v4 = 16;
        goto LABEL_13;
      default:
        if (v3 == 50 || v3 == 53)
        {
          v4 = 2;
LABEL_13:
          v9 = (void *)a1[2];
          if (!v9)
            return 1;
          v10 = v4 * v1;
          if (objc_msgSend(v9, "allocationSize") >= (unint64_t)(v4 * v1))
            return 1;
          __VGLogSharedInstance();
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
            goto LABEL_18;
          v11 = objc_msgSend((id)a1[2], "allocationSize");
          v14 = 134218240;
          v15 = v10;
          v16 = 2048;
          v17 = v11;
          v6 = " IOSurface allocation size must be >= %zu bytes [%zu] ";
          v7 = v5;
          v8 = 22;
        }
        else
        {
LABEL_20:
          __VGLogSharedInstance();
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
            goto LABEL_18;
          v13 = *a1;
          v14 = 67109120;
          LODWORD(v15) = v13;
          v6 = " Unsupported vertex format %d ";
          v7 = v5;
          v8 = 8;
        }
        break;
    }
    goto LABEL_17;
  }
  __VGLogSharedInstance();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v14) = 0;
    v6 = " Num elements must be > 0 ";
LABEL_6:
    v7 = v5;
    v8 = 2;
LABEL_17:
    _os_log_impl(&dword_249CAD000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v14, v8);
  }
LABEL_18:

  return 0;
}

void sub_249D112FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::VertexAttributeBuffer::create(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IOSurface *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  IOSurface *v11;
  id v12[6];

  if ((vg::VertexAttributeBuffer::checkCreateInfo((uint64_t *)a1) & 1) == 0)
  {
LABEL_10:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  v4 = (IOSurface *)*(id *)(a1 + 16);
  if (!v4)
  {
    v5 = objc_alloc(MEMORY[0x24BDD8DE8]);
    vg::VertexAttributeBuffer::makeIOSurfaceProperties(*(vg::VertexAttributeBuffer **)a1, *(MTLVertexFormat *)(a1 + 8));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (IOSurface *)objc_msgSend(v5, "initWithProperties:", v6);

    if (!v4)
    {
      __VGLogSharedInstance();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " Failed to create IOSurface ", (uint8_t *)v12, 2u);
      }

      goto LABEL_10;
    }
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = 4;
    switch(*(_QWORD *)a1)
    {
      case 3:
      case 6:
      case 0x10:
      case 0x19:
      case 0x1CLL:
      case 0x24:
        break;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xALL:
      case 0xBLL:
      case 0xCLL:
      case 0xDLL:
      case 0xELL:
      case 0xFLL:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_17;
      case 0x11:
      case 0x1ALL:
        v9 = 6;
        break;
      case 0x12:
      case 0x1BLL:
      case 0x1DLL:
      case 0x25:
        v9 = 8;
        break;
      case 0x1ELL:
      case 0x26:
        v9 = 12;
        break;
      case 0x1FLL:
      case 0x27:
        v9 = 16;
        break;
      default:
        if (v7 == 50 || v7 == 53)
          v9 = 2;
        else
LABEL_17:
          v9 = 0;
        break;
    }
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v12, v4, 0);
    memcpy(v12[2], *(const void **)(a1 + 24), v9 * v8);
    vg::IOSurfaceData::~IOSurfaceData(v12);
  }
  v11 = v4;
  *(_QWORD *)a2 = v11;
  *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  *(_BYTE *)(a2 + 24) = 1;

}

void sub_249D114A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id vg::VertexAttributeBuffer::iosurfaceProperties(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v8[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*this, "width"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v2;
  v8[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*this, "height"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  v8[2] = *MEMORY[0x24BDD8D60];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", objc_msgSend(*this, "pixelFormat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = v4;
  v8[3] = *MEMORY[0x24BDD8D38];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*this, "bytesPerElement"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[3] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_249D11628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t vg::VertexAttributeBuffer::bytesPerElement(vg::VertexAttributeBuffer *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 2);
  result = 4;
  switch(v1)
  {
    case 3:
    case 6:
    case 16:
    case 25:
    case 28:
    case 36:
      return result;
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 32:
    case 33:
    case 34:
    case 35:
      goto LABEL_9;
    case 17:
    case 26:
      result = 6;
      break;
    case 18:
    case 27:
    case 29:
    case 37:
      result = 8;
      break;
    case 30:
    case 38:
      result = 12;
      break;
    case 31:
    case 39:
      result = 16;
      break;
    default:
      if (v1 == 50 || v1 == 53)
        result = 2;
      else
LABEL_9:
        result = 0;
      break;
  }
  return result;
}

uint64_t vg::VertexAttributeBuffer::numBytes(vg::VertexAttributeBuffer *this)
{
  uint64_t v1;

  v1 = 4;
  switch(*((_QWORD *)this + 2))
  {
    case 3:
    case 6:
    case 0x10:
    case 0x19:
    case 0x1CLL:
    case 0x24:
      return v1 * *((_QWORD *)this + 1);
    case 0x11:
    case 0x1ALL:
      v1 = 6;
      break;
    case 0x12:
    case 0x1BLL:
    case 0x1DLL:
    case 0x25:
      v1 = 8;
      break;
    case 0x1ELL:
    case 0x26:
      v1 = 12;
      break;
    case 0x1FLL:
    case 0x27:
      v1 = 16;
      break;
    default:
      v1 = 0;
      break;
  }
  return v1 * *((_QWORD *)this + 1);
}

id vg::VertexAttributeBuffer::makeDumpObject(vg::VertexAttributeBuffer *this)
{
  void *v2;

  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "setVertexFormat:", *((_QWORD *)this + 2));
  objc_msgSend(v2, "setElementCount:", *((_QWORD *)this + 1));
  objc_msgSend(v2, "setIosurface:", *(_QWORD *)this);
  return v2;
}

void sub_249D11794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D118D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D119D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D11AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_249D11C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createARGBFromYCbCr(vg *this, __CVBuffer *a2)
{
  return createColorFromYCbCr(this, 1);
}

CVPixelBufferRef createColorFromYCbCr(__CVBuffer *a1, int a2)
{
  uint64_t v4;
  void (**v5)(_QWORD);
  void *BaseAddressOfPlane;
  vImagePixelCount WidthOfPlane;
  void *v8;
  vImagePixelCount v9;
  void *v10;
  OSType PixelFormatType;
  int32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32_t v15;
  void *data;
  int *v17;
  CVPixelBufferRef IOSurfaceBackedPixelBufferCopy;
  uint64_t v20;
  const __CFDictionary *pixelBufferAttributes;
  OSType v22;
  void (**v23)(_QWORD);
  __CVBuffer *v24;
  _QWORD v25[5];
  vg *v26;
  int v27;
  int v28;
  vImage_YpCbCrPixelRange pixelRange;
  vImage_Buffer dest;
  vImage_Buffer srcCbCr;
  vImage_Buffer srcYp;
  _QWORD v33[5];
  _QWORD v34[3];
  _QWORD v35[3];
  vImage_YpCbCrToARGB outInfo;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  v4 = MEMORY[0x24BDAC760];
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 3221225472;
  v33[2] = ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke;
  v33[3] = &__block_descriptor_40_e5_v8__0l;
  v33[4] = a1;
  v5 = (void (**)(_QWORD))MEMORY[0x24BD03294](v33);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  srcYp.data = BaseAddressOfPlane;
  srcYp.height = CVPixelBufferGetHeightOfPlane(a1, 0);
  srcYp.width = WidthOfPlane;
  srcYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v8 = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  srcCbCr.data = v8;
  srcCbCr.height = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  srcCbCr.width = v9;
  srcCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v10 = malloc_type_malloc(4 * WidthOfPlane * srcYp.height, 0x84D09452uLL);
  dest.data = v10;
  dest.height = srcYp.height;
  dest.width = WidthOfPlane;
  dest.rowBytes = 4 * WidthOfPlane;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v12.i32[0] = 875704422;
  v13.i32[0] = PixelFormatType;
  v14 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v13, v12), 0), (int8x8_t)0x1000000FFLL, (int8x8_t)0x10000000EBLL);
  if (PixelFormatType == 875704422)
    v15 = 255;
  else
    v15 = 240;
  pixelRange.Yp_bias = 16 * (PixelFormatType != 875704422);
  pixelRange.CbCr_bias = 128;
  pixelRange.YpRangeMax = v14.i32[0];
  pixelRange.CbCrRangeMax = v15;
  *(int8x8_t *)&pixelRange.YpMax = v14;
  pixelRange.CbCrMax = v15;
  pixelRange.CbCrMin = pixelRange.Yp_bias;
  if (vImageConvert_YpCbCrToARGB_GenerateConversion((const vImage_YpCbCrToARGBMatrix *)*MEMORY[0x24BDB2EE0], &pixelRange, &outInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0))
  {
    data = v10;
LABEL_11:
    free(data);
    IOSurfaceBackedPixelBufferCopy = 0;
    goto LABEL_12;
  }
  v28 = 50462976;
  v27 = 66051;
  if (a2)
    v17 = &v28;
  else
    v17 = &v27;
  if (vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, &outInfo, (const uint8_t *)v17, 0xFFu, 0x100u))
  {
    data = dest.data;
    goto LABEL_11;
  }
  v26 = 0;
  v20 = *MEMORY[0x24BDC5690];
  v34[0] = *MEMORY[0x24BDC55E8];
  v34[1] = v20;
  v35[0] = MEMORY[0x24BDBD1C8];
  v35[1] = MEMORY[0x24BDBD1C8];
  v34[2] = *MEMORY[0x24BDC55E0];
  v35[2] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v35, v34, 3);
  pixelBufferAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v22 = 32;
  else
    v22 = 1111970369;
  if (CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], dest.width, dest.height, v22, dest.data, dest.rowBytes, (CVPixelBufferReleaseBytesCallback)PixelBufferReleaseBytesCallback, dest.data, pixelBufferAttributes, &v26))
  {
    IOSurfaceBackedPixelBufferCopy = 0;
  }
  else
  {
    v25[0] = v4;
    v25[1] = 3221225472;
    v25[2] = ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke_2;
    v25[3] = &__block_descriptor_40_e5_v8__0l;
    v25[4] = v26;
    v23 = (void (**)(_QWORD))MEMORY[0x24BD03294](v25);
    IOSurfaceBackedPixelBufferCopy = vg::createIOSurfaceBackedPixelBufferCopy(v26, v24);
    v23[2](v23);

  }
LABEL_12:
  v5[2](v5);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_249D1200C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);
  void *v2;
  void *v3;

  v1[2](v1);
  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createBGRAFromYCbCr(vg *this, __CVBuffer *a2)
{
  return createColorFromYCbCr(this, 0);
}

BOOL vg::fillBGRAFromYCbCr(vg *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t v5;
  void (**v6)(_QWORD);
  void *BaseAddressOfPlane;
  vImagePixelCount WidthOfPlane;
  void *v9;
  vImagePixelCount v10;
  _BOOL8 v11;
  void (**v12)(_QWORD);
  uint64_t v13;
  const __CFDictionary *pixelBufferAttributes;
  CVPixelBufferRef v16;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  _QWORD v19[5];
  vImage_YpCbCrPixelRange pixelRange;
  vImage_Buffer srcCbCr;
  vImage_Buffer srcYp;
  _QWORD v23[5];
  _QWORD v24[3];
  _QWORD v25[3];
  vImage_YpCbCrToARGB outInfo;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(this, 1uLL);
  v5 = MEMORY[0x24BDAC760];
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 3221225472;
  v23[2] = ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke;
  v23[3] = &__block_descriptor_40_e5_v8__0l;
  v23[4] = this;
  v6 = (void (**)(_QWORD))MEMORY[0x24BD03294](v23);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(this, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(this, 0);
  srcYp.data = BaseAddressOfPlane;
  srcYp.height = CVPixelBufferGetHeightOfPlane(this, 0);
  srcYp.width = WidthOfPlane;
  srcYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(this, 0);
  v9 = CVPixelBufferGetBaseAddressOfPlane(this, 1uLL);
  v10 = CVPixelBufferGetWidthOfPlane(this, 1uLL);
  srcCbCr.data = v9;
  srcCbCr.height = CVPixelBufferGetHeightOfPlane(this, 1uLL);
  srcCbCr.width = v10;
  srcCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(this, 1uLL);
  pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_249D3D084;
  if (vImageConvert_YpCbCrToARGB_GenerateConversion((const vImage_YpCbCrToARGBMatrix *)*MEMORY[0x24BDB2EE0], &pixelRange, &outInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0))
  {
    v11 = 0;
  }
  else
  {
    CVPixelBufferLockBaseAddress(a2, 0);
    v19[0] = v5;
    v19[1] = 3221225472;
    v19[2] = ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke_2;
    v19[3] = &__block_descriptor_40_e5_v8__0l;
    v19[4] = a2;
    v12 = (void (**)(_QWORD))MEMORY[0x24BD03294](v19);
    memset(&dest, 0, sizeof(dest));
    MakeVImageBuffer(a2, (uint64_t)&dest);
    *(_DWORD *)permuteMap = 66051;
    if (vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, &outInfo, permuteMap, 0xFFu, 0x100u))
    {
      v11 = 0;
    }
    else
    {
      v16 = 0;
      v13 = *MEMORY[0x24BDC5690];
      v24[0] = *MEMORY[0x24BDC55E8];
      v24[1] = v13;
      v25[0] = MEMORY[0x24BDBD1C8];
      v25[1] = MEMORY[0x24BDBD1C8];
      v24[2] = *MEMORY[0x24BDC55E0];
      v25[2] = MEMORY[0x24BDBD1C8];
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, v24, 3);
      pixelBufferAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      v11 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], dest.width, dest.height, 0x42475241u, dest.data, dest.rowBytes, (CVPixelBufferReleaseBytesCallback)PixelBufferReleaseBytesCallback, dest.data, pixelBufferAttributes, &v16) == 0;

    }
    v12[2](v12);

  }
  v6[2](v6);

  return v11;
}

void sub_249D12378(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);
  void (**v2)(_QWORD);
  void *v3;

  v2[2](v2);
  v1[2](v1);

  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

void MakeVImageBuffer(__CVBuffer *a1@<X0>, uint64_t a2@<X8>)
{
  void *BaseAddress;
  NSObject *v5;
  uint8_t v6[16];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  *(_QWORD *)a2 = BaseAddress;
  *(_QWORD *)(a2 + 8) = CVPixelBufferGetHeight(a1);
  *(_QWORD *)(a2 + 16) = CVPixelBufferGetWidth(a1);
  *(_QWORD *)(a2 + 24) = CVPixelBufferGetBytesPerRow(a1);
  if (!BaseAddress)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    __VGLogSharedInstance();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_249CAD000, v5, OS_LOG_TYPE_DEBUG, " vImageBuffer returned null data pointer - make sure you lock the CVPixelBuffer before use ", v6, 2u);
    }

  }
}

void PixelBufferReleaseBytesCallback(void *a1, void *a2)
{
  if (a2)
    free(a2);
}

CVPixelBufferRef vg::createYCbCrFromARGB(vg *this, __CVBuffer *a2)
{
  uint64_t v3;
  void (**v4)(_QWORD);
  vImagePixelCount height;
  vImagePixelCount width;
  size_t v7;
  char *v8;
  CVPixelBufferRef IOSurfaceBackedPixelBufferCopy;
  void (**v10)(_QWORD);
  __CVBuffer *v11;
  _QWORD v13[5];
  vg *v14;
  vImage_YpCbCrPixelRange pixelRange;
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer src;
  _QWORD v19[5];
  size_t planeBytesPerRow[2];
  size_t v21[2];
  size_t planeWidth[2];
  void *planeBaseAddress[2];
  vImage_ARGBToYpCbCr outInfo;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(this, 1uLL);
  v3 = MEMORY[0x24BDAC760];
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke;
  v19[3] = &__block_descriptor_40_e5_v8__0l;
  v19[4] = this;
  v4 = (void (**)(_QWORD))MEMORY[0x24BD03294](v19);
  memset(&src, 0, sizeof(src));
  MakeVImageBuffer(this, (uint64_t)&src);
  height = src.height;
  width = src.width;
  destYp.height = src.height;
  destYp.width = src.width;
  destYp.rowBytes = src.width;
  destCbCr.height = src.height >> 1;
  destCbCr.width = src.width >> 1;
  destCbCr.rowBytes = src.width;
  v7 = src.width * (src.height + (src.height >> 1));
  v8 = (char *)malloc_type_malloc(v7, 0xE06E199AuLL);
  destYp.data = v8;
  destCbCr.data = &v8[height * width];
  pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_249D3D0A4;
  vImageConvert_ARGBToYpCbCr_GenerateConversion((const vImage_ARGBToYpCbCrMatrix *)*MEMORY[0x24BDB2EC8], &pixelRange, &outInfo, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, &outInfo, 0, 0);
  planeBaseAddress[0] = destYp.data;
  planeBaseAddress[1] = destCbCr.data;
  planeWidth[0] = destYp.width;
  planeWidth[1] = destCbCr.width;
  v21[0] = destYp.height;
  v21[1] = destCbCr.height;
  planeBytesPerRow[0] = destYp.rowBytes;
  planeBytesPerRow[1] = destCbCr.rowBytes;
  v14 = 0;
  if (CVPixelBufferCreateWithPlanarBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], src.width, src.height, 0x34323066u, 0, v7, 2uLL, planeBaseAddress, planeWidth, v21, planeBytesPerRow, (CVPixelBufferReleasePlanarBytesCallback)PixelBufferReleasePlanarBytesCallback, v8, 0, &v14))
  {
    free(v8);
    IOSurfaceBackedPixelBufferCopy = 0;
  }
  else
  {
    v13[0] = v3;
    v13[1] = 3221225472;
    v13[2] = ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke_2;
    v13[3] = &__block_descriptor_40_e5_v8__0l;
    v13[4] = v14;
    v10 = (void (**)(_QWORD))MEMORY[0x24BD03294](v13);
    IOSurfaceBackedPixelBufferCopy = vg::createIOSurfaceBackedPixelBufferCopy(v14, v11);
    v10[2](v10);

  }
  v4[2](v4);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_249D12728(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);
  void *v2;

  v1[2](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke_2(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

CVPixelBufferRef vg::createIOSurfaceBackedPixelBufferCopy(vg *this, __CVBuffer *a2)
{
  const __CFDictionary *v3;
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  CVPixelBufferRef v7;
  size_t PlaneCount;
  size_t i;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  char *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  int64_t HeightOfPlane;
  CVPixelBufferRef pixelBuffer;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v19 = *MEMORY[0x24BDC5668];
  v20[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  pixelBuffer = 0;
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], Width, Height, PixelFormatType, v3, &pixelBuffer))
  {
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    if (CVPixelBufferGetPlaneCount(this))
    {
      PlaneCount = CVPixelBufferGetPlaneCount(this);
      if (!PlaneCount)
      {
LABEL_14:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        CVPixelBufferUnlockBaseAddress(this, 1uLL);
        CVBufferPropagateAttachments(this, pixelBuffer);
        v7 = pixelBuffer;
        goto LABEL_15;
      }
    }
    else
    {
      PlaneCount = 1;
    }
    for (i = 0; i != PlaneCount; ++i)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(this, i);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(this, i);
      v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
      v13 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
      v14 = v13;
      if (BytesPerRowOfPlane >= v13)
        v15 = v13;
      else
        v15 = BytesPerRowOfPlane;
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(this, i);
      if (HeightOfPlane >= 1)
      {
        do
        {
          memcpy(v12, BaseAddressOfPlane, v15);
          BaseAddressOfPlane += BytesPerRowOfPlane;
          v12 += v14;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
    }
    goto LABEL_14;
  }
  v7 = 0;
LABEL_15:

  return v7;
}

void sub_249D129A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createARGBFromBGRA(vg *this, __CVBuffer *a2)
{
  uint64_t v3;
  void (**v4)(_QWORD);
  CVPixelBufferRef IOSurfaceBackedPixelBufferCopy;
  uint64_t v7;
  const __CFDictionary *pixelBufferAttributes;
  void (**v9)(_QWORD);
  __CVBuffer *v10;
  _QWORD v11[5];
  vg *v12;
  uint8_t permuteMap[4];
  vImage_Buffer buf;
  vImage_Buffer src;
  _QWORD v16[5];
  _QWORD v17[3];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(this, 1uLL);
  v3 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 3221225472;
  v16[2] = ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke;
  v16[3] = &__block_descriptor_40_e5_v8__0l;
  v16[4] = this;
  v4 = (void (**)(_QWORD))MEMORY[0x24BD03294](v16);
  memset(&src, 0, sizeof(src));
  MakeVImageBuffer(this, (uint64_t)&src);
  if (vImageBuffer_Init(&buf, src.height, src.width, 0x20u, 0)
    || (*(_DWORD *)permuteMap = 66051, vImagePermuteChannels_ARGB8888(&src, &buf, permuteMap, 0)))
  {
    IOSurfaceBackedPixelBufferCopy = 0;
  }
  else
  {
    v12 = 0;
    v7 = *MEMORY[0x24BDC5690];
    v17[0] = *MEMORY[0x24BDC55E8];
    v17[1] = v7;
    v18[0] = MEMORY[0x24BDBD1C8];
    v18[1] = MEMORY[0x24BDBD1C8];
    v17[2] = *MEMORY[0x24BDC55E0];
    v18[2] = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
    pixelBufferAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    if (CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], buf.width, buf.height, 0x20u, buf.data, buf.rowBytes, (CVPixelBufferReleaseBytesCallback)PixelBufferReleaseBytesCallback, 0, pixelBufferAttributes, &v12))
    {
      IOSurfaceBackedPixelBufferCopy = 0;
    }
    else
    {
      v11[0] = v3;
      v11[1] = 3221225472;
      v11[2] = ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke_2;
      v11[3] = &__block_descriptor_40_e5_v8__0l;
      v11[4] = v12;
      v9 = (void (**)(_QWORD))MEMORY[0x24BD03294](v11);
      IOSurfaceBackedPixelBufferCopy = vg::createIOSurfaceBackedPixelBufferCopy(v12, v10);
      v9[2](v9);

    }
  }
  v4[2](v4);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_249D12BD0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);
  void *v2;
  void *v3;

  v1[2](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke_2(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

CVPixelBufferPoolRef vg::createPixelBufferPool(vg *this, uint64_t a2)
{
  NSObject *v4;
  const __CFDictionary *v5;
  CVReturn v6;
  CVPixelBufferPoolRef v7;
  CVPixelBufferPoolRef poolOut;
  uint8_t buf[16];

  VGLogImageUtilities();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferPool", (const char *)&unk_249D51699, buf, 2u);
  }

  vg::createAttributeDictionary(this, a2);
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  poolOut = 0;
  v6 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v5, &poolOut);
  v7 = poolOut;
  if (v6)
  {
    CVPixelBufferPoolRelease(poolOut);
    v7 = 0;
  }

  ___ZN2vg21createPixelBufferPoolEmmj_block_invoke();
  return v7;
}

void sub_249D12D38(_Unwind_Exception *a1)
{
  ___ZN2vg21createPixelBufferPoolEmmj_block_invoke();
  _Unwind_Resume(a1);
}

id VGLogImageUtilities(void)
{
  if (VGLogImageUtilities(void)::onceToken != -1)
    dispatch_once(&VGLogImageUtilities(void)::onceToken, &__block_literal_global_21);
  return (id)VGLogImageUtilities(void)::handle;
}

void ___ZN2vg21createPixelBufferPoolEmmj_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogImageUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferPool", (const char *)&unk_249D51699, v1, 2u);
  }

}

id vg::createAttributeDictionary(vg *this, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[6];
  _QWORD v14[7];

  v14[6] = *MEMORY[0x24BDAC8D0];
  v13[0] = *MEMORY[0x24BDC56B8];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *MEMORY[0x24BDC5668];
  v14[0] = v4;
  v14[1] = MEMORY[0x24BDBD1B8];
  v6 = *MEMORY[0x24BDC5708];
  v13[1] = v5;
  v13[2] = v6;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", this);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v14[2] = v7;
  v13[3] = *MEMORY[0x24BDC5650];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *MEMORY[0x24BDC56C8];
  v14[3] = v8;
  v14[4] = &unk_251B34D78;
  v10 = *MEMORY[0x24BDC55D0];
  v13[4] = v9;
  v13[5] = v10;
  v14[5] = &unk_251B34D90;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, v13, 6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_249D12F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createPixelBufferFromPool(vg *this, uint64_t a2, unint64_t a3, __CVPixelBufferPool **a4, __CVPixelBufferPool **a5)
{
  NSObject *v8;
  __CVPixelBufferPool *PixelBufferPool;
  CVReturn v10;
  CVPixelBufferRef v11;
  CVPixelBufferRef pixelBufferOut;
  uint8_t buf[16];

  VGLogImageUtilities();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferFromPool", (const char *)&unk_249D51699, buf, 2u);
  }

  PixelBufferPool = *a4;
  if (!*a4)
  {
    PixelBufferPool = vg::createPixelBufferPool(this, a2);
    *a4 = PixelBufferPool;
  }
  pixelBufferOut = 0;
  v10 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], PixelBufferPool, &pixelBufferOut);
  v11 = pixelBufferOut;
  if (v10)
  {
    CVPixelBufferRelease(pixelBufferOut);
    v11 = 0;
  }
  ___ZN2vg25createPixelBufferFromPoolEmmjPP19__CVPixelBufferPool_block_invoke();
  return v11;
}

void sub_249D1306C(_Unwind_Exception *a1)
{
  ___ZN2vg25createPixelBufferFromPoolEmmjPP19__CVPixelBufferPool_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg25createPixelBufferFromPoolEmmjPP19__CVPixelBufferPool_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogImageUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferFromPool", (const char *)&unk_249D51699, v1, 2u);
  }

}

id vg::IOSurfaceARGB8888FromPlanarF(vg *this, const vImage_Buffer *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void (**v12)(_QWORD);
  vImagePixelCount v13;
  __int128 v14;
  id v15;
  vImage_Buffer v17;
  vImage_Buffer dest;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v21[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)this + 2));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = v4;
  v21[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)this + 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x24BDD8D38];
  v22[1] = v5;
  v22[2] = &unk_251B34DA8;
  v7 = *MEMORY[0x24BDD8D60];
  v21[2] = v6;
  v21[3] = v7;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v22[3] = v8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v22, v21, 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v9);
  objc_msgSend(v10, "lockWithOptions:seed:", 0, 0);
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = ___ZN2vg28IOSurfaceARGB8888FromPlanarFEPK13vImage_Bufferj_block_invoke;
  v19[3] = &unk_251B22CB8;
  v11 = v10;
  v20 = v11;
  v12 = (void (**)(_QWORD))MEMORY[0x24BD03294](v19);
  memset(&dest, 0, sizeof(dest));
  if (v11)
  {
    objc_msgSend(v11, "vg_vImageBuffer");
    v13 = 4 * dest.width;
  }
  else
  {
    v13 = 0;
  }
  dest.width = v13;
  v14 = *((_OWORD *)this + 1);
  *(_OWORD *)&v17.data = *(_OWORD *)this;
  v17.rowBytes = *((_QWORD *)&v14 + 1);
  v17.width = 4 * v14;
  if (vImageConvert_PlanarFtoPlanar8(&v17, &dest, 255.0, 0.0, 0x100u))
    v15 = 0;
  else
    v15 = v11;
  v12[2](v12);

  return v15;
}

void sub_249D13310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void (**v23)(_QWORD);

  v23[2](v23);

  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg28IOSurfaceARGB8888FromPlanarFEPK13vImage_Bufferj_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

BOOL vg::rotatePixelBufferVImage(vg *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint8_t v3;
  NSObject *v6;
  vg *PixelFormatType;
  vImagePixelCount height;
  vImagePixelCount width;
  int v10;
  _BOOL8 v11;
  vImage_Error v12;
  int v13;
  uint64_t v14;
  NSObject *v16;
  void *v17;
  vImage_Buffer v18;
  vImage_Buffer buf;
  vImage_Buffer v20;
  uint8_t backColor[8];
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v23 = *MEMORY[0x24BDAC8D0];
  VGLogImageUtilities();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v6))
  {
    LOWORD(buf.data) = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "RotatePixelBufferVImage", (const char *)&unk_249D51699, (uint8_t *)&buf, 2u);
  }

  PixelFormatType = (vg *)CVPixelBufferGetPixelFormatType(this);
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  memset(&buf, 0, sizeof(buf));
  MakeVImageBuffer(this, (uint64_t)&buf);
  memset(&v18, 0, sizeof(v18));
  MakeVImageBuffer(a2, (uint64_t)&v18);
  if ((v3 & 0xFD) == 1)
  {
    if (buf.width != v18.height)
      goto LABEL_14;
    height = buf.height;
    width = v18.width;
  }
  else
  {
    if (buf.width != v18.width)
      goto LABEL_14;
    height = buf.height;
    width = v18.height;
  }
  if (height == width)
  {
    *(_QWORD *)backColor = 0;
    v22 = 0;
    if ((int)PixelFormatType <= 1380410944)
    {
      if ((int)PixelFormatType <= 1094862673)
      {
        if ((_DWORD)PixelFormatType == 32)
          goto LABEL_30;
        if ((_DWORD)PixelFormatType != 875704422 && (_DWORD)PixelFormatType != 875704438)
          goto LABEL_40;
        MakeVImageBuffer(this, 0, (uint64_t)&v20);
        buf = v20;
        MakeVImageBuffer(a2, 0, (uint64_t)&v20);
        v18 = v20;
        vImageRotate90_Planar8(&buf, &v18, v3, 0, 0);
        MakeVImageBuffer(this, 1uLL, (uint64_t)&v20);
        buf = v20;
        MakeVImageBuffer(a2, 1uLL, (uint64_t)&v20);
        v18 = v20;
      }
      else
      {
        if ((int)PixelFormatType <= 1278226535)
        {
          if ((_DWORD)PixelFormatType != 1094862674)
          {
            v10 = 1111970369;
            goto LABEL_29;
          }
LABEL_30:
          v12 = vImageRotate90_ARGB8888(&buf, &v18, v3, backColor, 0);
          goto LABEL_35;
        }
        if ((_DWORD)PixelFormatType != 1278226536)
        {
          v10 = 1380401729;
LABEL_29:
          if ((_DWORD)PixelFormatType == v10)
            goto LABEL_30;
LABEL_40:
          __VGLogSharedInstance();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            vg::OSTypeToString(PixelFormatType);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v20.data) = 138412290;
            *(void **)((char *)&v20.data + 4) = v17;
            _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_ERROR, " Format not supported: %@ ", (uint8_t *)&v20, 0xCu);

          }
          v14 = -21773;
          goto LABEL_36;
        }
      }
LABEL_34:
      v12 = vImageRotate90_Planar16U(&buf, &v18, v3, 0, 0);
      goto LABEL_35;
    }
    if ((int)PixelFormatType <= 1717855599)
    {
      if ((_DWORD)PixelFormatType == 1380410945)
      {
        v12 = vImageRotate90_ARGBFFFF(&buf, &v18, v3, (const float *)backColor, 0);
        goto LABEL_35;
      }
      if ((_DWORD)PixelFormatType == 1380411457)
      {
        v12 = vImageRotate90_ARGB16U(&buf, &v18, v3, (const uint16_t *)backColor, 0);
        goto LABEL_35;
      }
      v13 = 1647392359;
    }
    else
    {
      if ((int)PixelFormatType <= 1751410031)
      {
        if ((_DWORD)PixelFormatType == 1717855600 || (_DWORD)PixelFormatType == 1717856627)
        {
          v12 = vImageRotate90_PlanarF(&buf, &v18, v3, 0.0, 0);
LABEL_35:
          v14 = v12;
LABEL_36:
          CVPixelBufferUnlockBaseAddress(this, 1uLL);
          CVPixelBufferUnlockBaseAddress(a2, 0);
          v11 = v14 == 0;
          goto LABEL_37;
        }
        goto LABEL_40;
      }
      if ((_DWORD)PixelFormatType == 1751410032)
        goto LABEL_34;
      v13 = 1751411059;
    }
    if ((_DWORD)PixelFormatType != v13)
      goto LABEL_40;
    goto LABEL_34;
  }
LABEL_14:
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVPixelBufferUnlockBaseAddress(this, 1uLL);
  v11 = 0;
LABEL_37:
  ___ZN2vg23rotatePixelBufferVImageEP10__CVBufferS1_h_block_invoke();
  return v11;
}

void sub_249D137CC(_Unwind_Exception *a1)
{
  void *v1;

  ___ZN2vg23rotatePixelBufferVImageEP10__CVBufferS1_h_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg23rotatePixelBufferVImageEP10__CVBufferS1_h_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogImageUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "RotatePixelBufferVImage", (const char *)&unk_249D51699, v1, 2u);
  }

}

void MakeVImageBuffer(__CVBuffer *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void *BaseAddressOfPlane;
  NSObject *v7;
  uint8_t v8[16];

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  *(_QWORD *)a3 = BaseAddressOfPlane;
  *(_QWORD *)(a3 + 8) = CVPixelBufferGetHeightOfPlane(a1, a2);
  *(_QWORD *)(a3 + 16) = CVPixelBufferGetWidthOfPlane(a1, a2);
  *(_QWORD *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  if (!BaseAddressOfPlane)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    __VGLogSharedInstance();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_249CAD000, v7, OS_LOG_TYPE_DEBUG, " vImageBuffer returned null data pointer - make sure you lock the CVPixelBuffer before use ", v8, 2u);
    }

  }
}

id vg::OSTypeToString(vg *this)
{
  void *v2;
  id v3;
  void *v4;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%c%c%c%c"), ((int)this >> 24), ((int)((_DWORD)this << 8) >> 24), ((__int16)this >> 8), (char)this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length") == 4)
  {
    v3 = v2;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("0x%08x"), this);
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  return v4;
}

void sub_249D139E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id vg::createDataFromColorIOSurface(vg *this, IOSurface *a2)
{
  void *v2;
  CGColorSpace *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBF660], "imageWithIOSurface:", this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
  v8 = *MEMORY[0x24BDBF848];
  v9[0] = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBF648]), "initWithOptions:", v4);
  objc_msgSend(v5, "PNGRepresentationOfImage:format:colorSpace:options:", v2, *MEMORY[0x24BDBF8B0], v3, MEMORY[0x24BDBD1B8]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  CGColorSpaceRelease(v3);

  return v6;
}

void sub_249D13B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id vg::createColorIOSurfaceFromData(vg *this, NSData *a2)
{
  vg *v3;
  void *v4;
  void *v5;
  double v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  CGColorSpaceRef v16;
  void (**v17)(_QWORD);
  void *v18;
  void *v19;
  double v20;
  double v21;
  id v22;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  v3 = this;
  objc_msgSend(MEMORY[0x24BDBF660], "imageWithData:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = *MEMORY[0x24BDD8FD0];
  v5 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v4, "extent");
  objc_msgSend(v5, "numberWithDouble:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v7;
  v27[1] = *MEMORY[0x24BDD8EB0];
  v8 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v4, "extent");
  objc_msgSend(v8, "numberWithDouble:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *MEMORY[0x24BDD8E30];
  v28[1] = v10;
  v28[2] = &unk_251B34DA8;
  v12 = *MEMORY[0x24BDD8EF8];
  v27[2] = v11;
  v27[3] = v12;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v28[3] = v13;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v28, v27, 4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v14);
  v16 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = ___ZN2vg28createColorIOSurfaceFromDataEP6NSDataj_block_invoke;
  v24[3] = &__block_descriptor_40_e5_v8__0l;
  v24[4] = v16;
  v17 = (void (**)(_QWORD))MEMORY[0x24BD03294](v24);
  v25 = *MEMORY[0x24BDBF848];
  v26 = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBF648]), "initWithOptions:", v18);
  objc_msgSend(v15, "lockWithOptions:seed:", 0, 0);
  objc_msgSend(v4, "extent");
  v21 = v20;
  objc_msgSend(v4, "extent");
  objc_msgSend(v19, "render:toIOSurface:bounds:colorSpace:", v4, v15, v16, 0.0, 0.0, v21);
  objc_msgSend(v15, "unlockWithOptions:seed:", 0, 0);
  v22 = v15;

  v17[2](v17);
  return v22;
}

void sub_249D13DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void ___ZN2vg28createColorIOSurfaceFromDataEP6NSDataj_block_invoke(uint64_t a1)
{
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 32));
}

id vg::createSurfaceFromSurfaceWithTransform(vg *this, IOSurface *a2, const simd_float3x3 *a3)
{
  vg *v4;
  NSObject *v5;
  id v6;
  void *v7;
  size_t Width;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  vg::shared *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  void *v32;
  id v33;
  NSObject *log;
  void *v35;
  void *v36;
  void *v37;
  _QWORD v38[3];
  _QWORD v39[3];
  id v40;
  uint8_t buf[4];
  uint64_t v42;
  _QWORD v43[4];
  _QWORD v44[6];

  v44[4] = *MEMORY[0x24BDAC8D0];
  v4 = this;
  VGLogImageUtilities();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v5))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateSurfaceFromSurfaceWithTransform", (const char *)&unk_249D51699, buf, 2u);
  }

  v6 = MTLCreateSystemDefaultDevice();
  v7 = (void *)MEMORY[0x24BDDD740];
  Width = IOSurfaceGetWidth(v4);
  objc_msgSend(v7, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 70, Width, IOSurfaceGetHeight(v4), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setUsage:", 1);
  v36 = (void *)objc_msgSend(v6, "newTextureWithDescriptor:iosurface:plane:", v9, v4, 0);
  v10 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v43[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[vg width](v4, "width"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v44[0] = v11;
  v43[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[vg height](v4, "height"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *MEMORY[0x24BDD8D38];
  v44[1] = v12;
  v44[2] = &unk_251B34DA8;
  v14 = *MEMORY[0x24BDD8D60];
  v43[2] = v13;
  v43[3] = v14;
  v44[3] = &unk_251B34DC0;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v44, v43, 4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (void *)objc_msgSend(v10, "initWithProperties:", v15);

  objc_msgSend(v9, "setUsage:", 2);
  v16 = (vg::shared *)objc_msgSend(v6, "newTextureWithDescriptor:iosurface:plane:", v9, v37, 0);
  vg::shared::sharedShaderLibrary(v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (v17)
  {
    v19 = objc_msgSend(v17, "newFunctionWithName:", CFSTR("transformColor"));
    if (!v19)
    {
      __VGLogSharedInstance();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v27 = objc_msgSend(CFSTR("transformColor"), "cStringUsingEncoding:", 1);
        *(_DWORD *)buf = 136315138;
        v42 = v27;
        _os_log_impl(&dword_249CAD000, v20, OS_LOG_TYPE_ERROR, " Failed to create function '%s'\n ", buf, 0xCu);
      }
      v26 = 0;
      goto LABEL_28;
    }
    v20 = objc_opt_new();
    -[NSObject setComputeFunction:](v20, "setComputeFunction:", v19);
    v40 = 0;
    v35 = (void *)objc_msgSend(v6, "newComputePipelineStateWithDescriptor:options:reflection:error:", v20, 0, 0, &v40);
    v33 = v40;
    if (v33 || !v35)
    {
      __VGLogSharedInstance();
      log = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
      {
        v28 = objc_msgSend(CFSTR("transformColor"), "cStringUsingEncoding:", 1);
        *(_DWORD *)buf = 136315138;
        v42 = v28;
        _os_log_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, " Failed to create pipeline state for function '%s'\n ", buf, 0xCu);
      }
      v26 = 0;
      goto LABEL_27;
    }
    log = objc_msgSend(v6, "newCommandQueue");
    -[NSObject commandBuffer](log, "commandBuffer");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "computeCommandEncoder");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v21)
    {
      objc_msgSend(v21, "setComputePipelineState:", v35);
      objc_msgSend(v22, "setTexture:atIndex:", v36, 0);
      objc_msgSend(v22, "setTexture:atIndex:", v16, 1);
      objc_msgSend(v22, "setBytes:length:atIndex:", a2, 48, 0);
      v23 = objc_msgSend(v35, "threadExecutionWidth");
      v24 = objc_msgSend(v35, "maxTotalThreadsPerThreadgroup");
      v39[0] = -[vg::shared width](v16, "width");
      v39[1] = -[vg::shared height](v16, "height");
      v39[2] = 1;
      v38[0] = v23;
      v38[1] = v24 / v23;
      v38[2] = 1;
      objc_msgSend(v22, "dispatchThreads:threadsPerThreadgroup:", v39, v38);
      objc_msgSend(v22, "endEncoding");
      objc_msgSend(v32, "commit");
      objc_msgSend(v32, "waitUntilCompleted");
      if (v37 == (void *)-[vg::shared iosurface](v16, "iosurface"))
      {
        v26 = v37;
        goto LABEL_26;
      }
      __VGLogSharedInstance();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v25, OS_LOG_TYPE_ERROR, " Inverse texture has mismatched iosurface ", buf, 2u);
      }

    }
    else
    {
      __VGLogSharedInstance();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = objc_msgSend(CFSTR("transformColor"), "cStringUsingEncoding:", 1);
        *(_DWORD *)buf = 136315138;
        v42 = v30;
        _os_log_impl(&dword_249CAD000, v29, OS_LOG_TYPE_ERROR, " Failed to create compute command encoder for function '%s'\n ", buf, 0xCu);
      }

    }
    v26 = 0;
LABEL_26:

LABEL_27:
LABEL_28:

    goto LABEL_29;
  }
  __VGLogSharedInstance();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v42 = 0;
    _os_log_impl(&dword_249CAD000, v19, OS_LOG_TYPE_ERROR, " Failed to create metal library: %@ ", buf, 0xCu);
  }
  v26 = 0;
LABEL_29:

  ___ZN2vg37createSurfaceFromSurfaceWithTransformEP9IOSurfaceRK13simd_float3x3_block_invoke();
  return v26;
}

void sub_249D14484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  ___ZN2vg37createSurfaceFromSurfaceWithTransformEP9IOSurfaceRK13simd_float3x3_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg37createSurfaceFromSurfaceWithTransformEP9IOSurfaceRK13simd_float3x3_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogImageUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateSurfaceFromSurfaceWithTransform", (const char *)&unk_249D51699, v1, 2u);
  }

}

BOOL vg::validateAlphaChannelForSurface(vg *this, IOSurface *a2)
{
  vg *v2;
  uint64_t v3;
  vg *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  BOOL v10;
  int *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  int v16;
  uint8_t buf[4];
  void *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = -[vg pixelFormat](v2, "pixelFormat");
  v4 = (vg *)v3;
  if ((int)v3 > 1111970368)
  {
    v5 = 3;
    if ((_DWORD)v3 == 1111970369 || (_DWORD)v3 == 1380401729)
      goto LABEL_7;
LABEL_15:
    __VGLogSharedInstance();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      vg::OSTypeToString(v4);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v18 = v14;
      _os_log_impl(&dword_249CAD000, v13, OS_LOG_TYPE_ERROR, " Format not supported: %@ ", buf, 0xCu);

    }
    v10 = 0;
    goto LABEL_18;
  }
  if ((_DWORD)v3 != 32 && (_DWORD)v3 != 1094862674)
    goto LABEL_15;
  v5 = 0;
LABEL_7:
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, (IOSurface *)v2, 1);
  v6 = -[vg width](v2, "width");
  v7 = -[vg height](v2, "height");
  if (v7)
  {
    v8 = 0;
    v9 = v19;
    v10 = 1;
    while (1)
    {
      v11 = v9;
      v12 = v6;
      if (v6)
        break;
LABEL_12:
      ++v8;
      v9 = (int *)((char *)v9 + v20);
      v10 = v8 < v7;
      if (v8 == v7)
        goto LABEL_13;
    }
    while (1)
    {
      v16 = *v11;
      if (*(_BYTE *)((unint64_t)&v16 | v5))
        break;
      v11 = (int *)((char *)v11 + v21);
      if (!--v12)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_13:
    v10 = 0;
  }
  vg::IOSurfaceData::~IOSurfaceData((id *)buf);
LABEL_18:

  return v10;
}

void sub_249D147F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

IOSurface *vg::undistortMcamS8Image(vg *this, IOSurface *a2, IOSurface *a3)
{
  vg *v4;
  IOSurface *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  IOSurface *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t j;
  id v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  _QWORD v44[5];

  v44[4] = *MEMORY[0x24BDAC8D0];
  v4 = this;
  v5 = a2;
  v6 = -[IOSurface height](v5, "height");
  v7 = v6;
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  v9 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v43[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v5, "width"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v8 >> 1;
  v44[0] = v10;
  v43[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v8 >> 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v44[1] = v12;
  v43[2] = *MEMORY[0x24BDD8D60];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", -[vg pixelFormat](v4, "pixelFormat"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v43[3] = *MEMORY[0x24BDD8D38];
  v44[2] = v13;
  v44[3] = &unk_251B34DA8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v44, v43, 4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (IOSurface *)objc_msgSend(v9, "initWithProperties:", v14);

  if (-[IOSurface pixelFormat](v5, "pixelFormat") == 1278226536)
  {
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v39, (IOSurface *)v4, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v35, v5, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v31, v15, 0);
    if ((unint64_t)(v7 + 1) >= 3)
    {
      v16 = 0;
      if (v11 <= 1)
        v17 = 1;
      else
        v17 = v11;
      do
      {
        for (i = 0; i < -[IOSurface width](v5, "width"); ++i)
        {
          _H0 = *(_WORD *)(v36 + v37 * v16 + v38 * i);
          __asm { FCVT            S0, H0 }
          v25 = (int)(float)(_S0 + 0.5);
          LOWORD(_S0) = *(_WORD *)(v36 + v37 * (v16 + v11) + v38 * i);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)(v32 + v33 * v16 + v34 * i) = *(_DWORD *)(v40 + v41 * (int)(float)(_S0 + 0.5) + v42 * v25);
        }
        ++v16;
      }
      while (v16 != v17);
    }
LABEL_23:
    vg::IOSurfaceData::~IOSurfaceData(v31);
    vg::IOSurfaceData::~IOSurfaceData(v35);
    vg::IOSurfaceData::~IOSurfaceData(v39);
    goto LABEL_24;
  }
  if (-[IOSurface pixelFormat](v5, "pixelFormat") == 1278226534)
  {
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v39, (IOSurface *)v4, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v35, v5, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v31, v15, 0);
    if ((unint64_t)(v7 + 1) >= 3)
    {
      v27 = 0;
      if (v11 <= 1)
        v28 = 1;
      else
        v28 = v11;
      do
      {
        for (j = 0; j < -[IOSurface width](v5, "width"); ++j)
          *(_DWORD *)(v32 + v33 * v27 + v34 * j) = *(_DWORD *)(v40
                                                             + v41
                                                             * (int)(float)(*(float *)(v36 + v37 * (v27 + v11) + v38 * j)
                                                                          + 0.5)
                                                             + v42
                                                             * (int)(float)(*(float *)(v36 + v37 * v27 + v38 * j) + 0.5));
        ++v27;
      }
      while (v27 != v28);
    }
    goto LABEL_23;
  }
LABEL_24:

  return v15;
}

void sub_249D14BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  id v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v10 = va_arg(va1, id);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

uint64_t ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke_2(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ___ZL19VGLogImageUtilitiesv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "ImageUtilities");
  v1 = (void *)VGLogImageUtilities(void)::handle;
  VGLogImageUtilities(void)::handle = (uint64_t)v0;

}

void sub_249D14CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249D14E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D14FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D150D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D151A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D15394(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_249D155AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_249D1571C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249D15808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_249D15A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_249D15A70()
{
  JUMPOUT(0x249D15A40);
}

void sub_249D15A78()
{
  JUMPOUT(0x249D15A44);
}

void sub_249D15A80()
{
  JUMPOUT(0x249D15A48);
}

void sub_249D15A88()
{
  JUMPOUT(0x249D15A4CLL);
}

void sub_249D15A90()
{
  JUMPOUT(0x249D15A50);
}

void sub_249D15A98()
{
  JUMPOUT(0x249D15A58);
}

void sub_249D15AA0()
{
  JUMPOUT(0x249D15A60);
}

void sub_249D15DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_249D15E58()
{
  JUMPOUT(0x249D15DE0);
}

void sub_249D15E60()
{
  JUMPOUT(0x249D15DE4);
}

void sub_249D15E68()
{
  JUMPOUT(0x249D15DE8);
}

void sub_249D15E70()
{
  JUMPOUT(0x249D15DF0);
}

void sub_249D15E78()
{
  JUMPOUT(0x249D15DF8);
}

void sub_249D15E80()
{
  JUMPOUT(0x249D15E00);
}

void sub_249D15E88()
{
  JUMPOUT(0x249D15E08);
}

void sub_249D15E90()
{
  JUMPOUT(0x249D15E10);
}

void sub_249D15E98()
{
  JUMPOUT(0x249D15E18);
}

void sub_249D15EA0()
{
  JUMPOUT(0x249D15E20);
}

void sub_249D15EA8()
{
  JUMPOUT(0x249D15E28);
}

void sub_249D15EB0()
{
  JUMPOUT(0x249D15E30);
}

void sub_249D15EB8()
{
  JUMPOUT(0x249D15E38);
}

void sub_249D15EC0()
{
  JUMPOUT(0x249D15E40);
}

void sub_249D15EC8()
{
  JUMPOUT(0x249D15E48);
}

void sub_249D15FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D160B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_249D161A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_249D16440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  _Unwind_Resume(a1);
}

void sub_249D16514()
{
  JUMPOUT(0x249D164C4);
}

void sub_249D1651C()
{
  JUMPOUT(0x249D164CCLL);
}

void sub_249D16524()
{
  JUMPOUT(0x249D164DCLL);
}

void sub_249D1652C()
{
  JUMPOUT(0x249D164ECLL);
}

void sub_249D16534()
{
  JUMPOUT(0x249D164FCLL);
}

void sub_249D166D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v10 = v6;

  _Unwind_Resume(a1);
}

void sub_249D16724()
{
  JUMPOUT(0x249D1670CLL);
}

void sub_249D1672C()
{
  JUMPOUT(0x249D16710);
}

void sub_249D16734()
{
  JUMPOUT(0x249D16714);
}

void sub_249D1673C()
{
  JUMPOUT(0x249D16718);
}

void sub_249D167D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);

  _Unwind_Resume(a1);
}

void cva::ItemHandler::createMatrix<float,3u,0u>(uint64_t a1)
{
  size_t v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *memptr;

  v2 = (4 * (3 * *(_DWORD *)(a1 + 16)) + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v2, 0x49090899uLL);
  v3 = memptr;
  v9 = memptr;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (3 * v4);
    v6 = *(int **)a1;
    v7 = 4 * v5;
    do
    {
      v8 = *v6++;
      *v3++ = v8;
      v7 -= 4;
    }
    while (v7);
  }
  cva::ItemHandler::createMatrix<float>();
  free(v9);
}

void sub_249D168A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_249D169BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;

  free(a12);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a15);

  _Unwind_Resume(a1);
}

void cva::ItemHandler::createMatrix<int,3u,0u>(uint64_t a1)
{
  size_t v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *memptr;

  v2 = (4 * (3 * *(_DWORD *)(a1 + 16)) + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v2, 0x49090899uLL);
  v3 = memptr;
  v9 = memptr;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (3 * v4);
    v6 = *(int **)a1;
    v7 = 4 * v5;
    do
    {
      v8 = *v6++;
      *v3++ = v8;
      v7 -= 4;
    }
    while (v7);
  }
  cva::ItemHandler::createMatrix<int>();
  free(v9);
}

void sub_249D16AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_249D16B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);

  _Unwind_Resume(a1);
}

void cva::ItemHandler::createMatrix<float,4u,4u>(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  void *memptr;

  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v2 = 0;
  v3 = (char *)memptr;
  v4 = memptr;
  do
  {
    *(_DWORD *)&v3[v2] = *(_DWORD *)(a1 + v2);
    v2 += 4;
  }
  while (v2 != 64);
  cva::ItemHandler::createMatrix<float>();
  free(v4);
}

void sub_249D16BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_249D16CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);

  _Unwind_Resume(a1);
}

void sub_249D16DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL cva::ItemHandler::getMatrix<float,3u,0u>(uint64_t a1, uint64_t a2)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  void *v9;
  int *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int *v16;
  int v17;
  int v18;
  void *memptr;

  cva::ItemHandler::getMatrix<float>();
  if (v17 != 3)
    goto LABEL_13;
  v3 = v18;
  if (v18 == *(_DWORD *)(a2 + 16))
    goto LABEL_5;
  if (v16 != *(int **)a2)
  {
    *(_DWORD *)(a2 + 16) = v18;
    cva::MatrixData<float,0ul,0ul,false>::reserve(a2, (3 * v18));
    v3 = *(_DWORD *)(a2 + 16);
LABEL_5:
    if (v3)
    {
      v4 = *(_DWORD **)a2;
      v5 = (3 * v3);
      v6 = v16;
      v7 = 4 * v5;
      do
      {
        v8 = *v6++;
        *v4++ = v8;
        v7 -= 4;
      }
      while (v7);
    }
    goto LABEL_13;
  }
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * (3 * v18) + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v9 = memptr;
  if (v18)
  {
    v10 = v16;
    v11 = 4 * (3 * v18);
    v12 = memptr;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
      v11 -= 4;
    }
    while (v11);
  }
  v14 = *(_DWORD **)a2;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = ((4 * (3 * v18) + 31) & 0x7FFFFFFE0uLL) >> 2;
  *(_DWORD *)(a2 + 16) = v18;
  free(v14);
LABEL_13:
  free(v16);
  return v17 == 3;
}

void sub_249D16F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_249D170A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  void *v14;
  void *v15;

  free(a9);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a12);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a14);

  _Unwind_Resume(a1);
}

BOOL cva::ItemHandler::getMatrix<int,3u,0u>(uint64_t a1, uint64_t a2)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  void *v9;
  int *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int *v16;
  int v17;
  int v18;
  void *memptr;

  cva::ItemHandler::getMatrix<int>();
  if (v17 != 3)
    goto LABEL_13;
  v3 = v18;
  if (v18 == *(_DWORD *)(a2 + 16))
    goto LABEL_5;
  if (v16 != *(int **)a2)
  {
    *(_DWORD *)(a2 + 16) = v18;
    cva::MatrixData<float,0ul,0ul,false>::reserve(a2, (3 * v18));
    v3 = *(_DWORD *)(a2 + 16);
LABEL_5:
    if (v3)
    {
      v4 = *(_DWORD **)a2;
      v5 = (3 * v3);
      v6 = v16;
      v7 = 4 * v5;
      do
      {
        v8 = *v6++;
        *v4++ = v8;
        v7 -= 4;
      }
      while (v7);
    }
    goto LABEL_13;
  }
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * (3 * v18) + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v9 = memptr;
  if (v18)
  {
    v10 = v16;
    v11 = 4 * (3 * v18);
    v12 = memptr;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
      v11 -= 4;
    }
    while (v11);
  }
  v14 = *(_DWORD **)a2;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = ((4 * (3 * v18) + 31) & 0x7FFFFFFE0uLL) >> 2;
  *(_DWORD *)(a2 + 16) = v18;
  free(v14);
LABEL_13:
  free(v16);
  return v17 == 3;
}

void sub_249D17208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_249D172BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t cva::ItemHandler::getMatrix<float,4u,4u>(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t i;
  char *v7;
  int v8;
  int v9;

  cva::ItemHandler::getMatrix<float>();
  v3 = v8 == 4 && v9 == 4;
  v4 = v3;
  if (v3)
  {
    for (i = 0; i != 64; i += 4)
      *(_DWORD *)(a2 + i) = *(_DWORD *)&v7[i];
  }
  free(v7);
  return v4;
}

void sub_249D17404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a11);

  _Unwind_Resume(a1);
}

void cva::MatrixData<float,0ul,0ul,false>::reserve(uint64_t a1, unint64_t a2)
{
  size_t v4;
  void *memptr;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      v4 = (4 * a2 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v4 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x49090899uLL);
      *(_QWORD *)a1 = memptr;
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_249D1757C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249D175F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D17B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_249D17D34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_249D1821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_249D1835C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGMLEspressoModel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_249D18478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D184C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D1850C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D18558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D185A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D186B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D18858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249D189C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_249D18A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D18B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D18C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D18D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D18ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_249D18FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D1912C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D19424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D19844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void vg::common::transformPoints(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  size_t v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  float32x4_t *v19;
  const float *v20;
  float32x4_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  size_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  void *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  void *v36[2];
  unsigned int v37;
  void *memptr[3];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 16);
  v7 = (16 * v6 + 31) & 0x7FFFFFFE0;
  v36[1] = (void *)(v7 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x49090899uLL);
  v8 = memptr[0];
  v36[0] = memptr[0];
  v37 = v6;
  if (4 * v6)
    memset_pattern16(memptr[0], &unk_249D3D0D0, 16 * v6);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = v9 == 0;
  if (v9)
    v11 = v8;
  else
    v11 = 0;
  v12 = &v8[4 * v9];
  if (v10)
    v12 = 0;
  if (v11 != v12)
  {
    v13 = 0;
    v14 = *(int **)a2;
    do
    {
      v15 = *v14++;
      *v11 = v15;
      v11 += (v13 > 1) + 1;
      if (v13 <= 1)
        ++v13;
      else
        v13 = 0;
    }
    while (v11 != v12);
  }
  memptr[1] = a1;
  memptr[2] = v36;
  v39 = 1065353216;
  cva::assign<false,false,cva::Matrix<float,4u,0u,false>,cva::Matrix<float,4u,4u,false>,cva::Matrix<float,4u,0u,false>>((uint64_t)v36, (uint64_t)memptr);
  if (v37)
  {
    v16 = 0;
    v17 = (char *)v36[0];
    v18 = 4 * v37;
    do
    {
      v19 = (float32x4_t *)&v17[4 * (v16 & 0xFFFFFFFC)];
      v20 = &v19->f32[3];
      v21 = vld1q_dup_f32(v20);
      *v19 = vdivq_f32(*v19, v21);
      v16 += 4;
    }
    while (v18 != v16);
  }
  v22 = *(_DWORD *)(a2 + 16);
  v23 = v36[0];
  v24 = (3 * v22);
  v25 = (4 * v24 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v25 >> 2;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v25, 0x49090899uLL);
  v26 = memptr[0];
  *(void **)a3 = memptr[0];
  *(_DWORD *)(a3 + 16) = v22;
  if (v23 == v26)
  {
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v25, 0x49090899uLL);
    v30 = memptr[0];
    if (v22)
    {
      v31 = 0;
      v32 = 4 * v24;
      v33 = memptr[0];
      v34 = v23;
      do
      {
        *v33++ = *v34;
        v35 = &v34[v31 > 1];
        if (v31 <= 1)
          ++v31;
        else
          v31 = 0;
        v34 = v35 + 1;
        v32 -= 4;
      }
      while (v32);
    }
    *(_QWORD *)a3 = v30;
    *(_QWORD *)(a3 + 8) = v25 >> 2;
    *(_DWORD *)(a3 + 16) = v22;
    free(v23);
  }
  else if (v22)
  {
    v27 = 0;
    v28 = 4 * v24;
    do
    {
      *v26++ = *v23;
      v29 = &v23[v27 > 1];
      if (v27 <= 1)
        ++v27;
      else
        v27 = 0;
      v23 = v29 + 1;
      v28 -= 4;
    }
    while (v28);
  }
  free(v36[0]);
}

void sub_249D19B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  void *v9;

  free(v9);
  free(a9);
  _Unwind_Resume(a1);
}

void vg::common::transformPoints(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[4];

  v3 = 0;
  memset(v8, 0, sizeof(v8));
  v4 = v8;
  do
  {
    v5 = 0;
    v6 = *(_OWORD *)(a1 + 16 * v3);
    do
    {
      v7 = v6;
      *((_DWORD *)v4 + v5) = *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      ++v5;
    }
    while (v5 != 4);
    ++v3;
    ++v4;
  }
  while (v3 != 4);
  vg::common::transformPoints(v8, a2, a3);
}

void cva::assign<false,false,cva::Matrix<float,4u,0u,false>,cva::Matrix<float,4u,4u,false>,cva::Matrix<float,4u,0u,false>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  size_t v11;
  int v12;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  if (*(void **)(a2 + 8) == v4 || *(void **)v5 == v4)
  {
    v6 = (4 * (4 * *(_DWORD *)(v5 + 16)) + 31) & 0x7FFFFFFE0;
    v11 = v6 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
    v10 = memptr;
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 16);
    cva::assign<false,false,cva::Matrix<float,4u,0u,false>,cva::Matrix<float,4u,4u,false>,cva::Matrix<float,4u,0u,false>>(&v10, a2);
    v7 = *(void **)a1;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = v11;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v9;
    v10 = v7;
    v11 = v8;
    *(_DWORD *)(a1 + 16) = v12;
    v12 = 0;
    free(v7);
  }
  else if ((*(_DWORD *)(v5 + 16) & 0x3FFFFFFF) != 0)
  {
    cva::VecLib<float>::gemm();
  }
  else if (4 * *(_DWORD *)(a1 + 16))
  {
    bzero(v4, 4 * (4 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_249D19D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

id vg::shared::sharedShaderLibrary(vg::shared *this)
{
  if (vg::shared::sharedShaderLibrary(void)::onceToken != -1)
    dispatch_once(&vg::shared::sharedShaderLibrary(void)::onceToken, &__block_literal_global_6);
  return (id)vg::shared::sharedShaderLibrary(void)::sDefaultLibrary;
}

void ___ZN2vg6shared19sharedShaderLibraryEv_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  uint8_t buf[4];
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v0 = MTLCreateSystemDefaultDevice();
  v1 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD1488], "vg_resourcePath");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("VGSharedShaders.metallib"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "URLWithString:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = 0;
  v5 = objc_msgSend(v0, "newLibraryWithURL:error:", v4, &v9);
  v6 = v9;
  v7 = (void *)vg::shared::sharedShaderLibrary(void)::sDefaultLibrary;
  vg::shared::sharedShaderLibrary(void)::sDefaultLibrary = v5;

  if (!vg::shared::sharedShaderLibrary(void)::sDefaultLibrary)
  {
    __VGLogSharedInstance();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v11 = v6;
      _os_log_impl(&dword_249CAD000, v8, OS_LOG_TYPE_ERROR, " Failed to create mtl library for shared shaders %@ ", buf, 0xCu);
    }

  }
}

void sub_249D19EA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id vg::shared::createMetalTextureFromSurface(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = objc_msgSend(v8, "pixelFormat");
  if (v10 > 1278226535)
  {
    switch(v10)
    {
      case 1278226536:
        v11 = 25;
        goto LABEL_14;
      case 1380401729:
        v11 = 71;
        goto LABEL_14;
      case 1380410945:
        v11 = 125;
        goto LABEL_14;
    }
  }
  else
  {
    switch(v10)
    {
      case 1111970369:
        v11 = 81;
        goto LABEL_14;
      case 1278226488:
        v11 = 10;
        goto LABEL_14;
      case 1278226534:
        v11 = 55;
LABEL_14:
        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v11, objc_msgSend(v8, "width"), objc_msgSend(v8, "height"), 0);
        v12 = objc_claimAutoreleasedReturnValue();
        -[NSObject setUsage:](v12, "setUsage:", a3);
        v13 = (void *)objc_msgSend(v7, "newTextureWithDescriptor:iosurface:plane:", v12, v8, 0);
        v14 = v13;
        if (v13)
        {
          objc_msgSend(v13, "setLabel:", v9);
          v15 = v14;
        }
        else
        {
          __VGLogSharedInstance();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v18[0]) = 0;
            _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_ERROR, " Failed to create metal texture ", (uint8_t *)v18, 2u);
          }

        }
        goto LABEL_20;
    }
  }
  __VGLogSharedInstance();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v18[0] = 67109888;
    v18[1] = (int)objc_msgSend(v8, "pixelFormat") >> 24;
    v19 = 1024;
    v20 = (int)(objc_msgSend(v8, "pixelFormat") << 8) >> 24;
    v21 = 1024;
    v22 = (__int16)objc_msgSend(v8, "pixelFormat") >> 8;
    v23 = 1024;
    v24 = (char)objc_msgSend(v8, "pixelFormat");
    _os_log_impl(&dword_249CAD000, v12, OS_LOG_TYPE_ERROR, " Unsupported IOSurface pixel format %c%c%c%c ", (uint8_t *)v18, 0x1Au);
  }
  v14 = 0;
LABEL_20:

  return v14;
}

void sub_249D1A190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t vg::shared::VisualLoggerImpl::startLoggingToFile(vg::shared::VisualLoggerImpl *this, NSString *a2)
{
  return 0;
}

{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::stopAndDisableLogging(vg::shared::VisualLoggerImpl *this)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::startLoggingToHost(vg::shared::VisualLoggerImpl *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::isLoggerEnabled(vg::shared::VisualLoggerImpl *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::logDictionary(vg::shared::VisualLoggerImpl *this, NSDictionary *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::logFloat(vg::shared::VisualLoggerImpl *this, float a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::logPixelBuffer(vg::shared::VisualLoggerImpl *this, __CVBuffer *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

void *vg::shared::VisualLogger::internalSubloggerPrefixes(vg::shared::VisualLogger *this)
{
  return &unk_251B34A60;
}

uint64_t *vg::shared::VisualLogger::sharedLogger(vg::shared::VisualLogger *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    vg::shared::VisualLogger::sharedLogger(void)::sharedLogger = operator new();
  }
  return &vg::shared::VisualLogger::sharedLogger(void)::sharedLogger;
}

void sub_249D1A2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

vg::shared::VisualLogger *vg::shared::VisualLogger::VisualLogger(vg::shared::VisualLogger *this)
{
  *(_QWORD *)this = operator new();
  return this;
}

{
  *(_QWORD *)this = operator new();
  return this;
}

uint64_t vg::shared::VisualLogger::startLoggingToFile(vg::shared::VisualLogger *this, NSString *a2)
{
  return 0;
}

{
  return 0;
}

uint64_t vg::shared::VisualLogger::stopAndDisableLogging(vg::shared::VisualLogger *this)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::startLoggingToHost(vg::shared::VisualLogger *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::isLoggerEnabled(vg::shared::VisualLogger *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::logDictionary(vg::shared::VisualLogger *this, NSDictionary *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::logFloat(vg::shared::VisualLogger *this, float a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::logPixelBuffer(vg::shared::VisualLogger *this, __CVBuffer *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

void sub_249D1A558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D1AA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  void *v14;
  void *v15;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a12);
  free(a9);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a14);

  _Unwind_Resume(a1);
}

void sub_249D1AA98()
{
  JUMPOUT(0x249D1AA88);
}

void sub_249D1AAA0()
{
  JUMPOUT(0x249D1AA8CLL);
}

void cva::ItemHandler::createMatrix<float,2u,0u>(uint64_t a1)
{
  size_t v2;
  _DWORD *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  void *v8;
  void *memptr;

  v2 = (4 * (2 * *(_DWORD *)(a1 + 16)) + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v2, 0x49090899uLL);
  v3 = memptr;
  v8 = memptr;
  v4 = (2 * *(_DWORD *)(a1 + 16));
  if ((_DWORD)v4)
  {
    v5 = *(int **)a1;
    v6 = 4 * v4;
    do
    {
      v7 = *v5++;
      *v3++ = v7;
      v6 -= 4;
    }
    while (v6);
  }
  cva::ItemHandler::createMatrix<float>();
  free(v8);
}

void sub_249D1AB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_249D1B130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  free(a13);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a17);

  _Unwind_Resume(a1);
}

uint64_t std::optional<cva::Matrix<unsigned int,3u,0u,false>>::operator=[abi:ne180100]<cva::MatrixUnaryExpr<cva::Matrix<int,0u,0u,false>,cva::detail::CastOp<unsigned int>>,void>(uint64_t a1, int ***a2)
{
  int **v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  int v12;
  size_t v13;
  size_t v14;
  void *v15;
  int v16;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  void *memptr;

  if (!*(_BYTE *)(a1 + 24))
  {
    std::construct_at[abi:ne180100]<cva::Matrix<unsigned int,3u,0u,false>,cva::MatrixUnaryExpr<cva::Matrix<int,0u,0u,false>,cva::detail::CastOp<unsigned int>>,cva::Matrix<unsigned int,3u,0u,false>*>(a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
  v4 = *a2;
  v5 = *((_DWORD *)*a2 + 4);
  if (v5 == 3)
  {
    v6 = *((_DWORD *)v4 + 5);
    if (v6 == *(_DWORD *)(a1 + 16))
      goto LABEL_6;
  }
  v7 = *v4;
  v8 = *((_DWORD *)v4 + 5);
  if (v7 != *(int **)a1)
  {
    *(_DWORD *)(a1 + 16) = v8;
    cva::MatrixData<float,0ul,0ul,false>::reserve(a1, (v8 * v5));
    v6 = *(_DWORD *)(a1 + 16);
LABEL_6:
    if (v6)
    {
      v9 = *(_DWORD **)a1;
      v10 = **a2;
      v11 = 4 * (3 * v6);
      do
      {
        v12 = *v10++;
        *v9++ = v12;
        v11 -= 4;
      }
      while (v11);
    }
    return a1;
  }
  v13 = (4 * (v8 * v5) + 31) & 0x7FFFFFFE0;
  v14 = v13 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v13, 0x49090899uLL);
  v15 = memptr;
  v16 = *((_DWORD *)*a2 + 5);
  if (v16)
  {
    v17 = **a2;
    v18 = 4 * (3 * v16);
    v19 = memptr;
    do
    {
      v20 = *v17++;
      *v19++ = v20;
      v18 -= 4;
    }
    while (v18);
  }
  v21 = *(_DWORD **)a1;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 16) = v16;
  free(v21);
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<cva::Matrix<unsigned int,3u,0u,false>,cva::MatrixUnaryExpr<cva::Matrix<int,0u,0u,false>,cva::detail::CastOp<unsigned int>>,cva::Matrix<unsigned int,3u,0u,false>*>(uint64_t a1, int ***a2)
{
  size_t v4;
  _DWORD *v5;
  int **v6;
  int v7;
  int *v8;
  uint64_t v9;
  int v10;
  void *memptr;

  v4 = (4 * (*((_DWORD *)*a2 + 5) * *((_DWORD *)*a2 + 4)) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x49090899uLL);
  v5 = memptr;
  *(_QWORD *)a1 = memptr;
  v6 = *a2;
  v7 = *((_DWORD *)*a2 + 5);
  *(_DWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = *v6;
    v9 = 4 * (3 * v7);
    do
    {
      v10 = *v8++;
      *v5++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  return a1;
}

id vg::shared::getAssetsForType(void *a1, _QWORD **a2)
{
  id v3;
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  dispatch_semaphore_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  dispatch_semaphore_t v26;
  id v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  id v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t v48[4];
  id v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int128 buf;
  void (*v55)(uint64_t, uint64_t, void *);
  void *v56;
  id v57;
  dispatch_semaphore_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  VGLogSharedMobileAssetUtils();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v4))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetAssetsForType", (const char *)&unk_249D51699, (uint8_t *)&buf, 2u);
  }

  v5 = *a2;
  v37 = v3;
  VGLogSharedMobileAssetUtils();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v6))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DownloadAssetCatalog", (const char *)&unk_249D51699, (uint8_t *)&buf, 2u);
  }

  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setDiscretionary:", 0);
  objc_msgSend(v7, "setRequiresPowerPluggedIn:", 0);
  objc_msgSend(v7, "setAllowsCellularAccess:", 1);
  objc_msgSend(v7, "setCanUseLocalCacheServer:", 1);
  objc_msgSend(v7, "setTimeoutIntervalForResource:", 10);
  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 3;
  v38 = 0;
  v39 = &v38;
  v40 = 0x3032000000;
  v41 = __Block_byref_object_copy__0;
  v42 = __Block_byref_object_dispose__0;
  v43 = 0;
  VGLogSharedMobileAssetUtils();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v37;
    _os_log_impl(&dword_249CAD000, v8, OS_LOG_TYPE_INFO, "Downloading MobileAsset catalog for asset type: %@ ...", (uint8_t *)&buf, 0xCu);
  }

  v9 = dispatch_semaphore_create(0);
  v10 = (void *)MEMORY[0x24BE66B90];
  v11 = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 3221225472;
  v55 = ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke_183;
  v56 = &unk_251B23520;
  v12 = v37;
  v59 = &v44;
  v60 = &v38;
  v57 = v12;
  v58 = v9;
  v13 = v9;
  objc_msgSend(v10, "startCatalogDownload:options:completionWithError:", v12, v7, &buf);
  dispatch_semaphore_wait(v13, 0xFFFFFFFFFFFFFFFFLL);

  v14 = v45[3];
  if (v14)
  {
    if (v5)
    {
      v15 = (void *)v39[5];
      if (v15)
        *v5 = objc_retainAutorelease(v15);
    }
    VGLogSharedMobileAssetUtils();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = v39[5];
      v18 = v45[3];
      *(_DWORD *)v48 = 138412802;
      v49 = v12;
      v50 = 2112;
      v51 = v17;
      v52 = 2048;
      v53 = v18;
      _os_log_error_impl(&dword_249CAD000, v16, OS_LOG_TYPE_ERROR, "Failed to download MobileAsset catalog for asset type %@ with error: %@ (result: %zu)", v48, 0x20u);
    }
  }
  else
  {
    VGLogSharedMobileAssetUtils();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v48 = 138412290;
      v49 = v12;
      _os_log_impl(&dword_249CAD000, v16, OS_LOG_TYPE_INFO, "Successfully downloaded MobileAsset catalog for asset type: %@", v48, 0xCu);
    }
  }

  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v44, 8);

  ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke();
  if (v14)
  {
    VGLogSharedMobileAssetUtils();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_249CAD000, v19, OS_LOG_TYPE_INFO, "Failed to download the latest asset catalog, using local asset catalog (if present)...", (uint8_t *)&buf, 2u);
    }

  }
  v20 = *a2;
  v21 = v12;
  VGLogSharedMobileAssetUtils();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v22))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "QueryAssets", (const char *)&unk_249D51699, (uint8_t *)&buf, 2u);
  }

  VGLogSharedMobileAssetUtils();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_INFO, "Initializing query for asset type: %@", (uint8_t *)&buf, 0xCu);
  }

  v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE66BB0]), "initWithType:", v21);
  objc_msgSend(v24, "returnTypes:", 2);
  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 3;
  v38 = 0;
  v39 = &v38;
  v40 = 0x3032000000;
  v41 = __Block_byref_object_copy__0;
  v42 = __Block_byref_object_dispose__0;
  v43 = 0;
  VGLogSharedMobileAssetUtils();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_249CAD000, v25, OS_LOG_TYPE_INFO, "Querying asset catalog...", (uint8_t *)&buf, 2u);
  }

  v26 = dispatch_semaphore_create(0);
  *(_QWORD *)&buf = v11;
  *((_QWORD *)&buf + 1) = 3221225472;
  v55 = ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke_187;
  v56 = &unk_251B23520;
  v27 = v21;
  v59 = &v44;
  v60 = &v38;
  v57 = v27;
  v58 = v26;
  v28 = v26;
  objc_msgSend(v24, "queryMetaDataWithError:", &buf);
  dispatch_semaphore_wait(v28, 0xFFFFFFFFFFFFFFFFLL);

  if (v45[3])
  {
    if (v20)
    {
      v29 = (void *)v39[5];
      if (v29)
        *v20 = objc_retainAutorelease(v29);
    }
    VGLogSharedMobileAssetUtils();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v35 = v39[5];
      v36 = v45[3];
      *(_DWORD *)v48 = 138412802;
      v49 = v27;
      v50 = 2112;
      v51 = v35;
      v52 = 2048;
      v53 = v36;
      _os_log_error_impl(&dword_249CAD000, v30, OS_LOG_TYPE_ERROR, "Failed to query for asset type %@ with error: %@ (result: %zu)", v48, 0x20u);
    }
    v31 = 0;
  }
  else
  {
    objc_msgSend(v24, "results");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    VGLogSharedMobileAssetUtils();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      v32 = objc_msgSend(v31, "count");
      *(_DWORD *)v48 = 138412546;
      v49 = v27;
      v50 = 2048;
      v51 = v32;
      _os_log_impl(&dword_249CAD000, v30, OS_LOG_TYPE_INFO, "Query successful for asset type: %@. Number of assets found: %zu", v48, 0x16u);
    }
  }

  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v44, 8);

  ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke();
  if (v31)
    v33 = v31;

  ___ZN2vg6shared16getAssetsForTypeEP8NSStringRNS0_15NSErrorCWrapperE_block_invoke();
  return v31;
}

void sub_249D1BAE8(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, id);
  v6 = v4;

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke();
  ___ZN2vg6shared16getAssetsForTypeEP8NSStringRNS0_15NSErrorCWrapperE_block_invoke();

  _Unwind_Resume(a1);
}

id VGLogSharedMobileAssetUtils(void)
{
  if (VGLogSharedMobileAssetUtils(void)::onceToken != -1)
    dispatch_once(&VGLogSharedMobileAssetUtils(void)::onceToken, &__block_literal_global_179);
  return (id)VGLogSharedMobileAssetUtils(void)::handle;
}

void ___ZN2vg6shared16getAssetsForTypeEP8NSStringRNS0_15NSErrorCWrapperE_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogSharedMobileAssetUtils();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetAssetsForType", (const char *)&unk_249D51699, v1, 2u);
  }

}

void vg::shared::downloadAsset(void *a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  dispatch_semaphore_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __int128 *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  __int128 *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  NSObject *v38;
  uint64_t *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t v45[4];
  void *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  __int128 *v50;
  _BYTE buf[24];
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  VGLogSharedMobileAssetUtils();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DownloadAsset", (const char *)&unk_249D51699, buf, 2u);
  }

  if (v5)
  {
    v7 = (void *)objc_opt_new();
    objc_msgSend(v7, "setDiscretionary:", 0);
    objc_msgSend(v7, "setRequiresPowerPluggedIn:", 0);
    objc_msgSend(v7, "setAllowsCellularAccess:", 1);
    objc_msgSend(v7, "setCanUseLocalCacheServer:", 1);
    VGLogSharedMobileAssetUtils();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v5, "assetType");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "assetId");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v10;
      _os_log_impl(&dword_249CAD000, v8, OS_LOG_TYPE_INFO, "Downloading MobileAsset with type and id: {%@, %@}", buf, 0x16u);

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v52 = __Block_byref_object_copy__0;
    v53 = __Block_byref_object_dispose__0;
    v54 = 0;
    v41 = 0;
    v42 = &v41;
    v43 = 0x2020000000;
    v44 = 3;
    v11 = dispatch_semaphore_create(0);
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 3221225472;
    v36[2] = ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke_177;
    v36[3] = &unk_251B23520;
    v12 = v5;
    v37 = v12;
    v39 = &v41;
    v40 = buf;
    v13 = v11;
    v38 = v13;
    objc_msgSend(v12, "startDownload:completionWithError:", v7, v36);
    dispatch_semaphore_wait(v13, 0xFFFFFFFFFFFFFFFFLL);
    v14 = v42[3];
    if (v14)
    {
      if (v14 != 10)
      {
        VGLogSharedMobileAssetUtils();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(v12, "assetType");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "assetId");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = (__int128 *)v42[3];
          *(_DWORD *)v45 = 138412802;
          v46 = v31;
          v47 = 2112;
          v48 = (uint64_t)v32;
          v49 = 2048;
          v50 = v33;
          _os_log_error_impl(&dword_249CAD000, v26, OS_LOG_TYPE_ERROR, "Downloading of MobileAsset failed for asset {%@, %@} with result: %zu", v45, 0x20u);

        }
        v27 = *(void **)(*(_QWORD *)&buf[8] + 40);
        if (v27 && *a2)
          **a2 = objc_retainAutorelease(v27);
        goto LABEL_28;
      }
      VGLogSharedMobileAssetUtils();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v12, "assetType");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "assetId");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v45 = 138412546;
        v46 = v16;
        v47 = 2112;
        v48 = (uint64_t)v17;
        _os_log_impl(&dword_249CAD000, v15, OS_LOG_TYPE_INFO, "MobileAsset {%@, %@} already installed", v45, 0x16u);

      }
    }
    if ((objc_msgSend(v12, "refreshState") & 1) != 0)
    {
      objc_msgSend(v12, "getLocalFileUrl");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "path");
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v34, (char *)objc_msgSend(v19, "UTF8String"));

      VGLogSharedMobileAssetUtils();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v12, "assetType");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "assetId");
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = (void *)v22;
        v24 = &v34;
        if (v35 < 0)
          v24 = (__int128 *)v34;
        *(_DWORD *)v45 = 138412802;
        v46 = v21;
        v47 = 2112;
        v48 = v22;
        v49 = 2080;
        v50 = v24;
        _os_log_impl(&dword_249CAD000, v20, OS_LOG_TYPE_INFO, "Download of MobileAsset asset {%@, %@} was successful, at download path: %s", v45, 0x20u);

      }
      *(_OWORD *)a3 = v34;
      *(_QWORD *)(a3 + 16) = v35;
      *(_BYTE *)(a3 + 24) = 1;
      goto LABEL_29;
    }
    VGLogSharedMobileAssetUtils();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v12, "assetType");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "assetId");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      vg::shared::downloadAsset(v29, v30, v45, v28);
    }

LABEL_28:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
LABEL_29:

    _Block_object_dispose(&v41, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_30;
  }
  VGLogSharedMobileAssetUtils();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    vg::shared::downloadAsset(v25);

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_30:
  ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke();

}

void sub_249D1C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);

  ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogSharedMobileAssetUtils();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DownloadAsset", (const char *)&unk_249D51699, v1, 2u);
  }

}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke_177(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  VGLogSharedMobileAssetUtils();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(*(id *)(a1 + 32), "assetType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "assetId");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138412802;
    v13 = v7;
    v14 = 2112;
    v15 = v8;
    v16 = 2048;
    v17 = a2;
    _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_INFO, "Download completed for MobileAsset {%@, %@} with status: %zu", (uint8_t *)&v12, 0x20u);

  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v5;
  v11 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_249D1C4C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL27VGLogSharedMobileAssetUtilsv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "SharedMobileAssetUtils");
  v1 = (void *)VGLogSharedMobileAssetUtils(void)::handle;
  VGLogSharedMobileAssetUtils(void)::handle = (uint64_t)v0;

}

void sub_249D1C544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogSharedMobileAssetUtils();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DownloadAssetCatalog", (const char *)&unk_249D51699, v1, 2u);
  }

}

void ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke_183(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  VGLogSharedMobileAssetUtils();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v11 = 138412546;
    v12 = v7;
    v13 = 2048;
    v14 = a2;
    _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_INFO, "Download completed for MobileAsset catalog (%@) with status: %zu", (uint8_t *)&v11, 0x16u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v5;
  v10 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogSharedMobileAssetUtils();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "QueryAssets", (const char *)&unk_249D51699, v1, 2u);
  }

}

void ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke_187(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  VGLogSharedMobileAssetUtils();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v11 = 138412546;
    v12 = v7;
    v13 = 2048;
    v14 = a2;
    _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_INFO, "Query completed on MobileAsset catalog (%@) with status: %zu", (uint8_t *)&v11, 0x16u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v5;
  v10 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void vg::shared::downloadAsset(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, "No asset provided for downloading", v1, 2u);
}

void vg::shared::downloadAsset(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_error_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, "Failed to refresh state for asset {%@, %@}", buf, 0x16u);

}

id __VGLogSharedInstance()
{
  if (__VGLogSharedInstance_onceToken != -1)
    dispatch_once(&__VGLogSharedInstance_onceToken, &__block_literal_global_7);
  return (id)sharedInstance;
}

uint64_t logVerboseSignposts()
{
  if (logVerboseSignposts_onceToken != -1)
    dispatch_once(&logVerboseSignposts_onceToken, &__block_literal_global_2_1);
  return logVerboseSignposts_flag;
}

uint64_t __logVerboseSignposts_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t result;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", CFSTR("Apple Global Domain"));
  v1 = (void *)logVerboseSignposts_sDefaults;
  logVerboseSignposts_sDefaults = v0;

  result = objc_msgSend((id)logVerboseSignposts_sDefaults, "BOOLForKey:", CFSTR("vg.logVerboseSignposts"));
  logVerboseSignposts_flag = result;
  return result;
}

uint64_t VGGetChannelsFromPixelFormat(int a1)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];
  uint64_t v6;

  v2 = 0;
  v6 = *MEMORY[0x24BDAC8D0];
  do
  {
    if (LODWORD(FormatList[v2 + 1]) == a1)
      return FormatList[v2];
    v2 += 4;
  }
  while (v2 != 52);
  __VGLogSharedInstance();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl(&dword_249CAD000, v3, OS_LOG_TYPE_ERROR, " CVPixelFormatType %d not supported ", (uint8_t *)v5, 8u);
  }

  return 0;
}

uint64_t VGGetBytesPerElementFromPixelFormat(int a1)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];
  uint64_t v6;

  v2 = 0;
  v6 = *MEMORY[0x24BDAC8D0];
  do
  {
    if (LODWORD(FormatList[v2 + 1]) == a1)
      return FormatList[v2 + 2];
    v2 += 4;
  }
  while (v2 != 52);
  __VGLogSharedInstance();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl(&dword_249CAD000, v3, OS_LOG_TYPE_ERROR, " CVPixelFormatType %d not supported ", (uint8_t *)v5, 8u);
  }

  return 0;
}

uint64_t VGGetResizeFunctionFromPixelFormat(int a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v2 = 0;
  v3 = 0;
  v7 = *MEMORY[0x24BDAC8D0];
  do
  {
    if (LODWORD(FormatList[v2 + 1]) == a1)
      v3 = FormatList[v2 + 3];
    v2 += 4;
  }
  while (v2 != 52);
  if (!v3)
  {
    __VGLogSharedInstance();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a1;
      _os_log_impl(&dword_249CAD000, v4, OS_LOG_TYPE_ERROR, " Resize function for CVPixelFormatType %d not supported ", (uint8_t *)v6, 8u);
    }

  }
  return v3;
}

id VGReshapeLinearArray(_DWORD *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  void *v12;
  std::vector<int> v14;

  std::vector<int>::vector(&v14, (uint64_t)(a3[1] - *a3) >> 2);
  v6 = (a3[1] - *a3) >> 2;
  v7 = v6 - 1;
  if ((int)v6 - 1 >= 0)
  {
    v8 = (int *)(*a3 + 4 * v7);
    v9 = &v14.__begin_[v7];
    v10 = 1;
    do
    {
      *v9-- = v10;
      v11 = *v8--;
      v10 *= v11;
      LODWORD(v6) = v6 - 1;
    }
    while ((_DWORD)v6);
  }
  VGReshapeLinearSubArray(a1, a2, a3, &v14, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14.__begin_)
  {
    v14.__end_ = v14.__begin_;
    operator delete(v14.__begin_);
  }
  return v12;
}

void sub_249D1CD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id VGReshapeLinearSubArray(_DWORD *a1, unint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void *v10;
  double v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", *(int *)(*a3 + 4 * a5));
  if (((a3[1] - *a3) >> 2) - 1 == a5)
  {
    for (; a2; --a2)
    {
      LODWORD(v11) = *a1;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObject:", v12);

      ++a1;
    }
  }
  else if (a2)
  {
    v13 = 0;
    v14 = a5;
    v15 = (a5 + 1);
    LODWORD(v16) = *(_DWORD *)(*a4 + 4 * v14);
    do
    {
      VGReshapeLinearSubArray(&a1[v13], (int)v16, a3, a4, v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObject:", v17);

      v16 = *(int *)(*a4 + 4 * v14);
      v13 += v16;
    }
    while (v13 < a2);
  }
  return v10;
}

void sub_249D1CE80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VGReshapeLinearArray(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;

  v3 = objc_retainAutorelease(a1);
  VGReshapeLinearArray((_DWORD *)objc_msgSend(v3, "getData"), objc_msgSend(v3, "getSize"), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_249D1CF0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void VGSetAlphaIOSurface(IOSurface *a1, Pixel_8 a2)
{
  vImagePixelCount v3;
  vImagePixelCount v4;
  void *v5;
  vImage_Buffer dest;
  id v7[5];

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v7, a1, 1);
  v3 = objc_msgSend(v7[0], "width");
  v4 = objc_msgSend(v7[0], "height");
  v5 = (void *)objc_msgSend(v7[0], "baseAddress");
  objc_msgSend(v7[0], "bytesPerRow");
  objc_msgSend(v7[0], "bytesPerElement");
  dest.data = v5;
  dest.height = v4;
  dest.width = v3;
  dest.rowBytes = objc_msgSend(v7[0], "bytesPerRow");
  vImageOverwriteChannelsWithScalar_ARGB8888(a2, &dest, &dest, 1u, 0);
  vg::IOSurfaceData::~IOSurfaceData(v7);
}

void sub_249D1CFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  _Unwind_Resume(a1);
}

uint64_t VGDumpIOSurface(IOSurface *a1, NSString *a2, float a3)
{
  IOSurface *v5;
  NSString *v6;
  CVPixelBufferRef CVPixelBufferFromIOSurface;
  __CVBuffer *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];
  uint8_t buf[16];

  v5 = a1;
  v6 = a2;
  CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v5);
  v8 = CVPixelBufferFromIOSurface;
  if (CVPixelBufferFromIOSurface)
  {
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = ___Z15VGDumpIOSurfaceP9IOSurfaceP8NSStringf_block_invoke;
    v12[3] = &__block_descriptor_40_e5_v8__0l;
    v12[4] = CVPixelBufferFromIOSurface;
    v9 = MEMORY[0x24BD03294](v12);
    v10 = VGDumpCVPixelBuffer(v8, v6, a3);
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    __VGLogSharedInstance();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, (os_log_t)v9, OS_LOG_TYPE_ERROR, " Failed to create CVPixelBuffer ", buf, 2u);
    }
    v10 = 0;
  }

  return v10;
}

void sub_249D1D0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferFromIOSurface(IOSurface *a1)
{
  IOSurface *v1;
  __IOSurface *v2;
  NSObject *v3;
  CVReturn v4;
  CVPixelBufferRef v5;
  CVPixelBufferRef v6;
  CVPixelBufferRef pixelBufferOut;
  uint8_t buf[16];

  v1 = a1;
  v2 = (__IOSurface *)v1;
  if (-[IOSurface pixelFormat](v1, "pixelFormat") == 1380401729)
  {
    create32ARGBSurfaceFrom32RGBASurface(v1);
    v2 = (__IOSurface *)objc_claimAutoreleasedReturnValue();

  }
  VGLogVGMLUtilities();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBufferFromIOSurface", (const char *)&unk_249D51699, buf, 2u);
  }

  pixelBufferOut = 0;
  v4 = CVPixelBufferCreateWithIOSurface(0, v2, 0, &pixelBufferOut);
  v5 = pixelBufferOut;
  ___Z32createCVPixelBufferFromIOSurfaceP9IOSurface_block_invoke();
  if (v4)
    v6 = 0;
  else
    v6 = v5;

  return v6;
}

void sub_249D1D208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  ___Z32createCVPixelBufferFromIOSurfaceP9IOSurface_block_invoke();

  _Unwind_Resume(a1);
}

void ___Z15VGDumpIOSurfaceP9IOSurfaceP8NSStringf_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

uint64_t VGDumpCVPixelBuffer(__CVBuffer *a1, NSString *a2, float a3)
{
  NSString *v5;
  signed int PixelFormatType;
  __CVBuffer *v7;
  int v8;
  CVPixelBufferRef BGRAFromYCbCr;
  __CVBuffer *v10;
  CVPixelBufferRef v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  void (**v16)(_QWORD);
  CFStringRef *v17;
  CGColorSpace *v18;
  CIImage *v19;
  uint64_t v20;
  uint8_t v22[16];
  _QWORD v23[5];
  _QWORD v24[5];

  v5 = a2;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    switch(PixelFormatType)
    {
      case 32:
        v11 = CVPixelBufferRetain(a1);
        v12 = (unsigned int *)MEMORY[0x24BDBF860];
        goto LABEL_19;
      case 875704422:
        BGRAFromYCbCr = vg::createBGRAFromYCbCr(a1, v7);
        break;
      case 1111970369:
        BGRAFromYCbCr = CVPixelBufferRetain(a1);
        break;
      default:
LABEL_16:
        v11 = CVPixelBufferRetain(a1);
        v12 = (unsigned int *)MEMORY[0x24BDBF8B0];
        goto LABEL_19;
    }
    v11 = BGRAFromYCbCr;
    v12 = (unsigned int *)MEMORY[0x24BDBF868];
    goto LABEL_19;
  }
  if (PixelFormatType <= 1717855599)
  {
    if (PixelFormatType != 1278226534)
    {
      v8 = 1278226742;
      goto LABEL_11;
    }
LABEL_13:
    v10 = create16UPixelBufferFrom32FPixelBuffer(a1, 0.0, 65535.0 / a3);
    goto LABEL_14;
  }
  if (PixelFormatType == 1717855600)
    goto LABEL_13;
  v8 = 1751410032;
LABEL_11:
  if (PixelFormatType != v8)
    goto LABEL_16;
  v10 = CVPixelBufferRetain(a1);
LABEL_14:
  v11 = v10;
  v12 = (unsigned int *)MEMORY[0x24BDBF870];
LABEL_19:
  v13 = MEMORY[0x24BDAC760];
  v14 = *v12;
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke;
  v24[3] = &__block_descriptor_40_e5_v8__0l;
  v24[4] = v11;
  v15 = (void (**)(_QWORD))MEMORY[0x24BD03294](v24);
  v23[0] = v13;
  v23[1] = 3221225472;
  v23[2] = ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke_2;
  v23[3] = &__block_descriptor_40_e5_v8__0l;
  v23[4] = 0;
  v16 = (void (**)(_QWORD))MEMORY[0x24BD03294](v23);
  v17 = (CFStringRef *)MEMORY[0x24BDBF318];
  if ((_DWORD)v14 == *MEMORY[0x24BDBF868] || (_DWORD)v14 == *MEMORY[0x24BDBF8B0] || (_DWORD)v14 == *MEMORY[0x24BDBF860])
    goto LABEL_28;
  if ((_DWORD)v14 == *MEMORY[0x24BDBF8A8])
  {
    v17 = (CFStringRef *)MEMORY[0x24BDBF308];
LABEL_28:
    v18 = CGColorSpaceCreateWithName(*v17);
    v19 = (CIImage *)objc_msgSend(objc_alloc(MEMORY[0x24BDBF660]), "initWithCVPixelBuffer:", v11);
    v20 = writeCIImageToFile(v5, v19, v14, v18);
    goto LABEL_29;
  }
  v17 = (CFStringRef *)MEMORY[0x24BDBF290];
  if ((_DWORD)v14 == *MEMORY[0x24BDBF878] || (_DWORD)v14 == *MEMORY[0x24BDBF870])
    goto LABEL_28;
  if ((_DWORD)v14 == *MEMORY[0x24BDBF880])
  {
    v17 = (CFStringRef *)MEMORY[0x24BDBF2F8];
    goto LABEL_28;
  }
  __VGLogSharedInstance();
  v19 = (CIImage *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(&v19->super, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_249CAD000, &v19->super, OS_LOG_TYPE_ERROR, " Unsupported format type ", v22, 2u);
  }
  v20 = 0;
LABEL_29:

  v16[2](v16);
  v15[2](v15);

  return v20;
}

void sub_249D1D550(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void (**v3)(_QWORD);

  v3[2](v3);

  v2[2](v2);
  _Unwind_Resume(a1);
}

BOOL VGDumpJSON(objc_object *a1, NSString *a2)
{
  objc_object *v3;
  NSString *v4;
  NSData *v5;
  NSObject *v6;
  _BOOL8 v7;
  NSObject *v8;
  id v10;
  uint8_t buf[4];
  objc_object *v12;
  __int16 v13;
  NSObject *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(MEMORY[0x24BDD1608], "isValidJSONObject:", v3) & 1) != 0)
  {
    v10 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v3, 9, &v10);
    v5 = (NSData *)objc_claimAutoreleasedReturnValue();
    v6 = v10;
    if (v5)
    {
      v7 = VGDumpData(v5, v4, 1);
    }
    else
    {
      __VGLogSharedInstance();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v12 = (objc_object *)v4;
        v13 = 2112;
        v14 = v6;
        _os_log_impl(&dword_249CAD000, v8, OS_LOG_TYPE_ERROR, " Failed to serialize %@, %@ ", buf, 0x16u);
      }

      v7 = 0;
    }

  }
  else
  {
    __VGLogSharedInstance();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v12 = v3;
      _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_ERROR, " Not valid json object %@ ", buf, 0xCu);
    }
    v7 = 0;
  }

  return v7;
}

void sub_249D1D74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL VGDumpData(NSData *a1, NSString *a2, int a3)
{
  NSString *v5;
  _BOOL8 v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  int v12;
  NSString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = -[NSData writeToFile:atomically:](a1, "writeToFile:atomically:", v5, 0);
  if (!v6)
  {
    __VGLogSharedInstance();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v5;
      v8 = " Failed to dump %@ ";
      v9 = v7;
      v10 = OS_LOG_TYPE_ERROR;
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  if (a3)
  {
    __VGLogSharedInstance();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v12 = 138412290;
      v13 = v5;
      v8 = " Wrote %@ ";
      v9 = v7;
      v10 = OS_LOG_TYPE_INFO;
LABEL_7:
      _os_log_impl(&dword_249CAD000, v9, v10, v8, (uint8_t *)&v12, 0xCu);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:

  return v6;
}

void sub_249D1D8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VGReadJSON(NSString *a1)
{
  NSString *v1;
  void *v2;
  char v3;
  NSObject *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  id v10;
  uint8_t buf[4];
  NSString *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "fileExistsAtPath:", v1);

  if ((v3 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:", v1);
    v4 = objc_claimAutoreleasedReturnValue();
    v10 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v4, 1, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v10;
    if (v6)
    {
      __VGLogSharedInstance();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v12 = v1;
        v13 = 2112;
        v14 = v6;
        _os_log_impl(&dword_249CAD000, v7, OS_LOG_TYPE_ERROR, " Unable to load contents of json file at path: %@ with error: %@ ", buf, 0x16u);
      }

      v8 = 0;
    }
    else
    {
      v8 = v5;
    }

  }
  else
  {
    __VGLogSharedInstance();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v12 = v1;
      _os_log_impl(&dword_249CAD000, v4, OS_LOG_TYPE_ERROR, " Path does not exist: %@ ", buf, 0xCu);
    }
    v8 = 0;
  }

  return v8;
}

void sub_249D1DA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void resizeCVPixelBufferTovImageBuffer(CVPixelBufferRef pixelBuffer@<X0>, char *a2@<X3>, unint64_t a3@<X1>, unint64_t a4@<X2>, int a5@<W4>, _QWORD *a6@<X8>)
{
  void *v11;
  __int128 v12;
  size_t Width;
  size_t Height;
  void *v15;
  void *v16;
  id v17;
  const __CFDictionary *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  OSType PixelFormatType;
  void (**v24)(_QWORD);
  unint64_t v25;
  unint64_t v26;
  char *BaseAddress;
  char *v28;
  size_t BytesPerRow;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  OSType v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  void (*v40)(CGAffineTransform *, _QWORD *, _QWORD, _QWORD);
  double MinY;
  unint64_t v42;
  const __CFDictionary *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  char *v48;
  _QWORD v49[5];
  CVPixelBufferRef pixelBufferOut;
  CGAffineTransform v51;
  CGAffineTransform v52;
  CGAffineTransform v53;
  uint64_t v54;
  _QWORD v55[3];
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v55[1] = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    objc_msgSend(MEMORY[0x24BDBF660], "imageWithCVPixelBuffer:", pixelBuffer);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    memset(&v53, 0, sizeof(v53));
    v12 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
    *(_OWORD *)&v52.a = *MEMORY[0x24BDBD8B8];
    *(_OWORD *)&v52.c = v12;
    *(_OWORD *)&v52.tx = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    CGAffineTransformScale(&v53, &v52, (float)((float)a4 / (float)Width), (float)((float)a3 / (float)Height));
    objc_msgSend(v11, "imageBySamplingNearest");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v53;
    v44 = v15;
    objc_msgSend(v15, "imageByApplyingTransform:", &v51);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_alloc_init(MEMORY[0x24BDBF648]);
    pixelBufferOut = 0;
    v54 = *MEMORY[0x24BDC5668];
    v55[0] = MEMORY[0x24BDBD1B8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v55, &v54, 1);
    v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v46 = v16;
    v47 = v11;
    v45 = v17;
    objc_msgSend(v16, "extent");
    v20 = v19;
    objc_msgSend(v16, "extent");
    v22 = v21;
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    CVPixelBufferCreate(0, (unint64_t)v20, (unint64_t)v22, PixelFormatType, v18, &pixelBufferOut);
    v49[0] = MEMORY[0x24BDAC760];
    v49[1] = 3221225472;
    v49[2] = ___ZL64_resizeCVPixelBufferTovImageBufferUsingNearestNeighborResamplingP10__CVBuffermmPv_block_invoke;
    v49[3] = &__block_descriptor_40_e5_v8__0l;
    v49[4] = pixelBufferOut;
    v24 = (void (**)(_QWORD))MEMORY[0x24BD03294](v49);
    v43 = v18;
    objc_msgSend(v17, "render:toCVPixelBuffer:", v16, pixelBufferOut);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 1uLL);
    v25 = a4;
    v26 = a3;
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
    v28 = a2;
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    v30 = 4 * a4;
    if (v26)
    {
      v31 = BytesPerRow;
      v32 = v26;
      do
      {
        memcpy(a2, BaseAddress, 4 * v25);
        a2 += v30;
        BaseAddress += v31;
        --v32;
      }
      while (v32);
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 1uLL);
    *a6 = v28;
    a6[1] = v26;
    a6[2] = v25;
    a6[3] = v30;
    v24[2](v24);

  }
  else
  {
    v33 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v48 = a2;
    v34 = CVPixelBufferGetHeight(pixelBuffer);
    v35 = a3;
    v36 = a4;
    v37 = CVPixelBufferGetWidth(pixelBuffer);
    v38 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    v39 = VGGetBytesPerElementFromPixelFormat(v33);
    v40 = (void (*)(CGAffineTransform *, _QWORD *, _QWORD, _QWORD))VGGetResizeFunctionFromPixelFormat(v33);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    v56.origin.x = 0.0;
    v56.origin.y = 0.0;
    v56.size.width = (double)v37;
    v56.size.height = (double)v34;
    MinY = CGRectGetMinY(v56);
    v57.origin.x = 0.0;
    v57.origin.y = 0.0;
    v57.size.width = (double)v37;
    v57.size.height = (double)v34;
    v42 = (unint64_t)(CGRectGetMinX(v57) * (double)(unint64_t)v39 + MinY * (double)v38);
    *(_QWORD *)&v53.a = (char *)CVPixelBufferGetBaseAddress(pixelBuffer) + v42;
    v58.origin.x = 0.0;
    v58.origin.y = 0.0;
    v58.size.width = (double)v37;
    v58.size.height = (double)v34;
    *(_QWORD *)&v53.b = (unint64_t)CGRectGetHeight(v58);
    v59.origin.x = 0.0;
    v59.origin.y = 0.0;
    v59.size.width = (double)v37;
    v59.size.height = (double)v34;
    *(_QWORD *)&v53.c = (unint64_t)CGRectGetWidth(v59);
    *(_QWORD *)&v53.d = v38;
    *a6 = v48;
    a6[1] = v35;
    a6[2] = v36;
    a6[3] = v39 * v36;
    if (v40)
      v40(&v53, a6, 0, 0);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
}

void sub_249D1DEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

CVPixelBufferRef resizeCVPixelBuffer(__CVBuffer *a1, unint64_t a2, unint64_t a3)
{
  OSType PixelFormatType;
  size_t v7;
  char *v8;
  const __CFDictionary *pixelBufferAttributes;
  NSObject *v10;
  CVPixelBufferRef v11;
  uint8_t buf[8];
  CVPixelBufferRef v14[4];
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v7 = VGGetBytesPerElementFromPixelFormat(PixelFormatType) * a3;
  v8 = (char *)malloc_type_malloc(v7 * a2, 0xDAEE7E17uLL);
  resizeCVPixelBufferTovImageBuffer(a1, v8, a2, a3, 0, v14);
  v14[0] = 0;
  v15 = *MEMORY[0x24BDC5668];
  v16[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
  pixelBufferAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (CVPixelBufferCreateWithBytes(0, a3, a2, PixelFormatType, v8, v7, (CVPixelBufferReleaseBytesCallback)pixelBufferReleaseCallBack, 0, pixelBufferAttributes, v14))
  {
    __VGLogSharedInstance();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v10, OS_LOG_TYPE_ERROR, " Error: could not create new pixel buffer ", buf, 2u);
    }

    free(v8);
    v11 = 0;
  }
  else
  {
    v11 = v14[0];
  }

  return v11;
}

void sub_249D1E0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void pixelBufferReleaseCallBack(void *a1, void *a2)
{
  if (a2)
    free(a2);
}

uint64_t resizeSurface(IOSurface *a1, IOSurface *a2)
{
  IOSurface *v3;
  IOSurface *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v9[16];
  _OWORD v10[2];
  _OWORD v11[2];

  v3 = a1;
  v4 = a2;
  v5 = VGGetResizeFunctionFromPixelFormat(-[IOSurface pixelFormat](v4, "pixelFormat"));
  if (v5)
  {
    memset(v11, 0, sizeof(v11));
    if (v3)
      -[IOSurface vg_vImageBuffer](v3, "vg_vImageBuffer");
    memset(v10, 0, sizeof(v10));
    if (v4)
      -[IOSurface vg_vImageBuffer](v4, "vg_vImageBuffer");
    v6 = ((uint64_t (*)(_OWORD *, _OWORD *, _QWORD, uint64_t))v5)(v11, v10, 0, 16);
    v5 = v6 == 0;
    if (v6)
    {
      __VGLogSharedInstance();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_249CAD000, v7, OS_LOG_TYPE_ERROR, " resizeSurface function error ", v9, 2u);
      }

    }
  }

  return v5;
}

void sub_249D1E1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

IOSurface *resizeSurface(IOSurface *a1, uint64_t a2, uint64_t a3)
{
  IOSurface *v5;
  IOSurface *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  IOSurface *v12;

  v5 = a1;
  if (-[IOSurface width](v5, "width") == a2 && -[IOSurface height](v5, "height") == a3)
  {
    -[IOSurface vg_copy](v5, "vg_copy");
    v6 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[IOSurface vg_basicProperties](v5, "vg_basicProperties");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "mutableCopy");

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, *MEMORY[0x24BDD8D90]);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, *MEMORY[0x24BDD8D58]);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", -[IOSurface bytesPerElement](v5, "bytesPerElement") * a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, *MEMORY[0x24BDD8D40]);

    v12 = (IOSurface *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v8);
    if ((resizeSurface(v5, v12) & 1) != 0)
      v6 = v12;
    else
      v6 = 0;

  }
  return v6;
}

void sub_249D1E374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

CVPixelBufferRef createResizeToSquareWithPad(__CVBuffer *a1, int a2, int32x2_t *a3)
{
  size_t Height;
  size_t Width;
  size_t v8;
  CVPixelBufferRef result;
  __int32 v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  int v15;
  int32x2_t v16;
  int32x2_t v17;

  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  v8 = Height - Width;
  if (Height == Width)
  {
    result = CVPixelBufferRetain(a1);
    *a3 = 0;
    a3[1] = vdup_n_s32(Height);
  }
  else
  {
    v10 = Width;
    if (Height > Width)
    {
      v11 = v8 >> 1;
      v12 = (v8 & 1) + (v8 >> 1);
      result = createCVPixelBufferWithPadInWidth<unsigned char>(a1, v8 >> 1, v12, a2);
      v16 = (int32x2_t)-(int)v11;
      v17.i32[0] = v12 + v10;
      v17.i32[1] = Height;
    }
    else
    {
      v13 = (Width - Height) >> 1;
      v14 = (Width - Height) & 1;
      v15 = v14 + v13;
      result = createCVPixelBufferWithPadInHeight<unsigned char>(a1, v13, v14 + v13, a2);
      v16.i32[0] = 0;
      v16.i32[1] = -(int)v13;
      v17.i32[0] = v10;
      v17.i32[1] = v15 + Height;
    }
    *a3 = v16;
    a3[1] = v17;
  }
  return result;
}

CVPixelBufferRef createCVPixelBufferWithPadInWidth<unsigned char>(__CVBuffer *a1, uint64_t a2, uint64_t a3, int a4)
{
  __CVBuffer *v7;
  OSType PixelFormatType;
  size_t Height;
  size_t Width;
  size_t BytesPerRow;
  size_t v12;
  char *BaseAddress;
  char *v14;
  char *v15;
  size_t v16;
  size_t v17;
  char *v18;
  size_t v19;
  CVPixelBufferRef v20;
  __CVBuffer *v22;
  uint64_t v23;
  const __CFDictionary *v24;
  uint64_t v25;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v27;
  _QWORD v28[2];

  v7 = a1;
  v28[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Height = CVPixelBufferGetHeight(v7);
  Width = CVPixelBufferGetWidth(v7);
  BytesPerRow = CVPixelBufferGetBytesPerRow(v7);
  v25 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  pixelBufferOut = 0;
  v27 = *MEMORY[0x24BDC5668];
  v28[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1);
  v24 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, a3 + a2 + Width, Height, PixelFormatType, v24, &pixelBufferOut);
  v12 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  CVPixelBufferLockBaseAddress(v7, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  v23 = a3;
  v14 = (char *)CVPixelBufferGetBaseAddress(v7);
  if (Height)
  {
    v15 = v14;
    v22 = v7;
    v16 = v25 * a2;
    v17 = v25 * Width;
    v18 = &BaseAddress[v16];
    v19 = Height;
    do
    {
      memcpy(v18, v15, v17);
      v18 += v12;
      v15 += BytesPerRow;
      --v19;
    }
    while (v19);
    v7 = v22;
    do
    {
      memset(BaseAddress, a4, v16);
      memset(&BaseAddress[v16 + v17], a4, v25 * v23);
      BaseAddress += v12;
      --Height;
    }
    while (Height);
  }
  CVPixelBufferUnlockBaseAddress(v7, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v20 = pixelBufferOut;

  return v20;
}

void sub_249D1E6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferWithPadInHeight<unsigned char>(__CVBuffer *a1, size_t a2, uint64_t a3, int a4)
{
  OSType PixelFormatType;
  size_t Height;
  size_t Width;
  size_t BytesPerRow;
  size_t v12;
  char *BaseAddress;
  char *v14;
  uint64_t v15;
  size_t v16;
  CVPixelBufferRef v17;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  const __CFDictionary *v22;
  char *__b;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v19 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  pixelBufferOut = 0;
  v25 = *MEMORY[0x24BDC5668];
  v26[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v12 = Height + a2;
  v20 = Height + a2 + a3;
  v21 = a3;
  v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, v20, PixelFormatType, v22, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  __b = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height + a2 > a2)
  {
    v14 = BaseAddress;
    v15 = 0;
    v16 = v19 * Width;
    do
    {
      memcpy(&__b[BytesPerRow * a2 + v15], &v14[v15], v16);
      v15 += BytesPerRow;
      --Height;
    }
    while (Height);
  }
  if (a4)
  {
    if (a2)
      memset(__b, a4, BytesPerRow * a2);
    if (v12 < v20)
      memset(&__b[BytesPerRow * v12], a4, BytesPerRow * v21);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v17 = pixelBufferOut;

  return v17;
}

void sub_249D1E8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

IOSurface *createSurfaceWithBBox(IOSurface *a1, float a2, CGRect a3)
{
  double height;
  double width;
  double y;
  double x;
  IOSurface *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  void *v17;
  IOSurface *v18;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  BOOL v38;
  id v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44[5];

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v8 = a1;
  v9 = -[IOSurface pixelFormat](v8, "pixelFormat");
  v10 = -[IOSurface width](v8, "width");
  v11 = -[IOSurface height](v8, "height");
  v12 = -16777216;
  v13 = 16711680;
  v14 = 0xFFFF;
  if (v9 > 1111970368)
  {
    if (v9 != 1111970369)
    {
      v15 = 1380401729;
LABEL_6:
      if (v9 != v15)
        goto LABEL_8;
    }
  }
  else if (v9 != 32)
  {
    v15 = 1094862674;
    goto LABEL_6;
  }
  v12 = 0;
  v13 = (int)(float)(a2 * 255.0) << 16;
  v14 = ((int)(float)((float)(1.0 - a2) * 255.0) << 8) | 0xFF;
LABEL_8:
  -[IOSurface vg_basicProperties](v8, "vg_basicProperties");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v16, "mutableCopy");

  v18 = (IOSurface *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v17);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v44, v8, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v40, v18, 0);
  v19 = (double)(unint64_t)(v10 - 1);
  v20 = (int)(x * v19);
  if (v20 <= 2)
    v21 = 2;
  else
    v21 = (int)(x * v19);
  v22 = v20 + 2;
  if ((int)v10 - 1 >= v22)
    v23 = v22;
  else
    v23 = v10 - 1;
  v24 = (double)(unint64_t)(v11 - 1);
  v25 = (int)(y * v24);
  if (v25 <= 2)
    v26 = 2;
  else
    v26 = (int)(y * v24);
  v27 = v25 + 2;
  if ((int)v11 - 1 >= v27)
    v28 = v27;
  else
    v28 = v11 - 1;
  if ((int)v10 - 1 >= (int)((x + width) * v19 + 2.0))
    v29 = (int)((x + width) * v19 + 2.0);
  else
    v29 = v10 - 1;
  if ((int)v11 - 1 >= (int)((y + height) * v24 + 2.0))
    v30 = (int)((y + height) * v24 + 2.0);
  else
    v30 = v11 - 1;
  if (v11)
  {
    v31 = 0;
    v32 = (v21 - 2);
    v33 = (v26 - 2);
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v38 = i >= v23
             && i <= ((int)((x + width) * v19 + -2.0) & ~((int)((x + width) * v19 + -2.0) >> 31))
             && v31 >= v28
             && v31 <= ((int)((y + height) * v24 + -2.0) & ~((int)((y + height) * v24 + -2.0) >> 31));
          if (i < v32 || i > v29 || v31 < v33 || v31 > v30 || v38)
            *(_DWORD *)(v41 + v42 * v31 + v43 * i) = *(_DWORD *)((char *)v44[2]
                                                               + (unint64_t)v44[3] * v31
                                                               + (unint64_t)v44[4] * i);
          else
            *(_DWORD *)(v41 + v42 * v31 + v43 * i) = v14 | v13 | v12;
        }
      }
      ++v31;
    }
    while (v31 != v11);
  }
  vg::IOSurfaceData::~IOSurfaceData(v40);
  vg::IOSurfaceData::~IOSurfaceData(v44);

  return v18;
}

void sub_249D1EBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a6);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

id createSurfaceWithOffsetAndPad(void *a1, unsigned int a2, double a3, __n128 a4)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void (**v16)(_QWORD);
  id v17;
  void (**v18)(_QWORD);
  int v19;
  int v20;
  int32x2_t v21;
  int v22;
  id v23;
  __int32 v26;
  int v27;
  uint8_t backColor[4];
  vImage_AffineTransform transform;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  _QWORD v37[4];
  _QWORD v38[7];

  v38[4] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = objc_msgSend(v5, "pixelFormat");
  v7 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v37[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", LODWORD(a3));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v38[0] = v8;
  v37[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", HIDWORD(a3));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v38[1] = v9;
  v37[2] = *MEMORY[0x24BDD8D38];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v5, "bytesPerElement"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v38[2] = v10;
  v37[3] = *MEMORY[0x24BDD8D60];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v38[3] = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v38, v37, 4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v7, "initWithProperties:", v12);

  objc_msgSend(v13, "lockWithOptions:seed:", 0, 0);
  objc_msgSend(v5, "lockWithOptions:seed:", 0, 0);
  v14 = MEMORY[0x24BDAC760];
  v35[0] = MEMORY[0x24BDAC760];
  v35[1] = 3221225472;
  v35[2] = ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke;
  v35[3] = &unk_251B22CB8;
  v15 = v13;
  v36 = v15;
  v16 = (void (**)(_QWORD))MEMORY[0x24BD03294](v35);
  v33[0] = v14;
  v33[1] = 3221225472;
  v33[2] = ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke_2;
  v33[3] = &unk_251B22CB8;
  v17 = v5;
  v34 = v17;
  v18 = (void (**)(_QWORD))MEMORY[0x24BD03294](v33);
  memset(&src, 0, sizeof(src));
  if (v17)
    objc_msgSend(v17, "vg_vImageBuffer");
  memset(&dest, 0, sizeof(dest));
  if (v15)
    objc_msgSend(v15, "vg_vImageBuffer");
  v19 = objc_msgSend(v15, "height", *(_OWORD *)&a4);
  v20 = objc_msgSend(v17, "height");
  v21.i32[0] = v26;
  *(_OWORD *)&transform.a = xmmword_249D3D120;
  v21.i32[1] = v19 - v20 - v27;
  *(float32x2_t *)&transform.tx = vcvt_f32_s32(v21);
  if ((int)v6 > 1278226533)
  {
    if ((_DWORD)v6 == 1278226534 || (_DWORD)v6 == 1717855600)
    {
      vImageAffineWarp_PlanarF(&src, &dest, 0, &transform, (float)a2 / 255.0, 4u);
      goto LABEL_15;
    }
    v22 = 1380401729;
  }
  else
  {
    if ((_DWORD)v6 == 32 || (_DWORD)v6 == 1094862674)
      goto LABEL_13;
    v22 = 1111970369;
  }
  if ((_DWORD)v6 == v22)
  {
LABEL_13:
    *(_DWORD *)backColor = 16843009 * a2;
    vImageAffineWarp_ARGB8888(&src, &dest, 0, &transform, backColor, 4u);
  }
LABEL_15:
  v23 = v15;
  v18[2](v18);

  v16[2](v16);
  return v23;
}

void sub_249D1EFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void (**v3)(_QWORD);
  void (**v4)(_QWORD);
  uint64_t v5;

  v4[2](v4);

  v3[2](v3);
  _Unwind_Resume(a1);
}

uint64_t ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

IOSurface *create32FloatSurfaceResizedToSquareWithPad(void *a1, int32x2_t *a2, float a3)
{
  IOSurface *v5;
  unint64_t v6;
  unint64_t v7;
  IOSurface *v8;
  unint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float v26;
  int32x2_t v27;
  int32x2_t v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v43;
  uint64_t v44;
  float *v45;
  float *v46;
  unint64_t v47;
  float v48;
  id v50[2];
  float *v51;
  uint64_t v52;
  uint64_t v53;
  id v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  _QWORD v59[4];
  _QWORD v60[4];
  _QWORD v61[5];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = -[IOSurface height](v5, "height");
  v7 = -[IOSurface width](v5, "width");
  if (v6 == v7)
  {
    v8 = v5;
    *a2 = 0;
    a2[1] = vdup_n_s32(v6);
  }
  else
  {
    v9 = v6 - v7;
    if (v6 <= v7)
    {
      v29 = objc_alloc(MEMORY[0x24BDD8DE8]);
      v58[0] = *MEMORY[0x24BDD8D90];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v7);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v59[0] = v30;
      v58[1] = *MEMORY[0x24BDD8D58];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v7);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = *MEMORY[0x24BDD8D38];
      v59[1] = v31;
      v59[2] = &unk_251B34DD8;
      v33 = *MEMORY[0x24BDD8D60];
      v58[2] = v32;
      v58[3] = v33;
      v59[3] = &unk_251B34DF0;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v59, v58, 4);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (IOSurface *)objc_msgSend(v29, "initWithProperties:", v34);

      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v54, v5, 1);
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v50, v8, 0);
      v35 = (v7 - v6) >> 1;
      v36 = v35 + v6;
      if (v7)
      {
        v37 = 0;
        v38 = v51;
        v39 = v52;
        v40 = -(uint64_t)v35;
        v41 = v53;
        do
        {
          v43 = v37 >= v35 && v37 < v36;
          v44 = v57;
          v45 = (float *)(v55 + v56 * v40);
          v46 = v38;
          v47 = v7;
          do
          {
            v48 = a3;
            if (v43)
              v48 = *v45;
            *v46 = v48;
            v45 = (float *)((char *)v45 + v44);
            v46 = (float *)((char *)v46 + v41);
            --v47;
          }
          while (v47);
          ++v37;
          ++v40;
          v38 = (float *)((char *)v38 + v39);
        }
        while (v37 != v7);
      }
      v27.i32[0] = 0;
      v27.i32[1] = -(int)v35;
      v28.i32[0] = v7;
      v28.i32[1] = v36 + ((v7 - v6) & 1);
    }
    else
    {
      v10 = objc_alloc(MEMORY[0x24BDD8DE8]);
      v60[0] = *MEMORY[0x24BDD8D90];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v61[0] = v11;
      v60[1] = *MEMORY[0x24BDD8D58];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *MEMORY[0x24BDD8D38];
      v61[1] = v12;
      v61[2] = &unk_251B34DD8;
      v14 = *MEMORY[0x24BDD8D60];
      v60[2] = v13;
      v60[3] = v14;
      v61[3] = &unk_251B34DF0;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v61, v60, 4);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (IOSurface *)objc_msgSend(v10, "initWithProperties:", v15);

      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v54, v5, 1);
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v50, v8, 0);
      v16 = 0;
      v17 = v9 >> 1;
      v18 = (v9 >> 1) + v7;
      v19 = v51;
      v20 = v52;
      v21 = v53;
      do
      {
        v22 = 0;
        v23 = v57;
        v24 = (float *)(v55 + v56 * v16 - v17 * v57);
        v25 = v19;
        do
        {
          v26 = a3;
          if (v22 >= v17)
          {
            v26 = a3;
            if (v22 < v18)
              v26 = *v24;
          }
          *v25 = v26;
          ++v22;
          v24 = (float *)((char *)v24 + v23);
          v25 = (float *)((char *)v25 + v21);
        }
        while (v6 != v22);
        ++v16;
        v19 = (float *)((char *)v19 + v20);
      }
      while (v16 != v6);
      v27 = (int32x2_t)-(uint64_t)(v9 >> 1);
      v28.i32[0] = v18 + (v9 & 1);
      v28.i32[1] = v6;
    }
    *a2 = v27;
    a2[1] = v28;
    vg::IOSurfaceData::~IOSurfaceData(v50);
    vg::IOSurfaceData::~IOSurfaceData(v54);
  }

  return v8;
}

void sub_249D1F480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferWithPadToMatchAspectRatio<unsigned char>(__CVBuffer *a1, int a2, float a3)
{
  size_t Height;
  size_t Width;
  float v8;
  float v9;
  uint64_t v11;
  unint64_t v12;

  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  v8 = (float)Height;
  v9 = (float)Width / (float)Height;
  if (vabds_f32(v9, a3) >= 0.01)
  {
    if (v9 >= a3)
    {
      v12 = (unint64_t)(float)((float)((unint64_t)(float)(v8 / a3) - Height) * 0.5);
      return createCVPixelBufferWithPadInHeight<unsigned char>(a1, v12, v12, a2);
    }
    else
    {
      v11 = (unint64_t)(float)((float)((unint64_t)(float)(v8 * a3) - Width) * 0.5);
      return createCVPixelBufferWithPadInWidth<unsigned char>(a1, v11, v11, a2);
    }
  }
  else
  {
    CVPixelBufferRetain(a1);
    return a1;
  }
}

CVPixelBufferRef createCVPixelBufferWithPadToMatchAspectRatio<float>(__CVBuffer *a1, float a2, float a3)
{
  size_t Height;
  size_t Width;
  float v8;
  float v9;
  uint64_t v11;
  unint64_t v12;

  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  v8 = (float)Height;
  v9 = (float)Width / (float)Height;
  if (vabds_f32(v9, a2) >= 0.01)
  {
    if (v9 >= a2)
    {
      v12 = (unint64_t)(float)((float)((unint64_t)(float)(v8 / a2) - Height) * 0.5);
      return createCVPixelBufferWithPadInHeight<float>(a1, v12, v12, a3);
    }
    else
    {
      v11 = (unint64_t)(float)((float)((unint64_t)(float)(v8 * a2) - Width) * 0.5);
      return createCVPixelBufferWithPadInWidth<float>(a1, v11, v11, a3);
    }
  }
  else
  {
    CVPixelBufferRetain(a1);
    return a1;
  }
}

CVPixelBufferRef createCVPixelBufferWithPadInWidth<float>(__CVBuffer *a1, uint64_t a2, uint64_t a3, float a4)
{
  OSType PixelFormatType;
  size_t Height;
  size_t Width;
  size_t BytesPerRow;
  uint64_t v12;
  const __CFDictionary *v13;
  size_t v14;
  char *BaseAddress;
  char *v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  size_t v22;
  uint64_t i;
  unint64_t v24;
  float *v25;
  float *v26;
  unint64_t v27;
  CVPixelBufferRef v28;
  const __CFDictionary *v30;
  size_t v31;
  uint64_t v32;
  __CVBuffer *pixelBuffer;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v12 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  pixelBufferOut = 0;
  v35 = *MEMORY[0x24BDC5668];
  v36[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1);
  v13 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, a3 + a2 + Width, Height, PixelFormatType, v13, &pixelBufferOut);
  v31 = Width;
  v14 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  pixelBuffer = a1;
  v16 = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height)
  {
    v17 = v16;
    v18 = Height;
    v19 = v12 * a2;
    v20 = v12 * v31;
    v30 = v13;
    v32 = v19;
    v21 = &BaseAddress[v19];
    v22 = v18;
    do
    {
      memcpy(v21, v17, v20);
      v21 += v14;
      v17 += BytesPerRow;
      --v22;
    }
    while (v22);
    v13 = v30;
    for (i = 0; i != v18; ++i)
    {
      if (a2 >= 1)
      {
        v24 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v25 = (float *)&BaseAddress[i * v14];
        do
        {
          *v25++ = a4;
          --v24;
        }
        while (v24 > 1);
      }
      if (a3 >= 1)
      {
        v26 = (float *)&BaseAddress[i * v14 + v32 + v20];
        v27 = (a3 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v26++ = a4;
          --v27;
        }
        while (v27 > 1);
      }
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v28 = pixelBufferOut;

  return v28;
}

void sub_249D1F930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferWithPadInHeight<float>(__CVBuffer *a1, size_t a2, uint64_t a3, float a4)
{
  OSType PixelFormatType;
  size_t Height;
  uint64_t Width;
  size_t BytesPerRow;
  uint64_t v12;
  size_t v13;
  size_t v14;
  char *BaseAddress;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  float *v21;
  unint64_t v22;
  float *v23;
  unint64_t v24;
  CVPixelBufferRef v25;
  __CVBuffer *v27;
  const __CFDictionary *v28;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v12 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  pixelBufferOut = 0;
  v30 = *MEMORY[0x24BDC5668];
  v31[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v31, &v30, 1);
  v13 = Height + a2;
  v14 = Height + a2 + a3;
  v28 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, v14, PixelFormatType, v28, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  v27 = a1;
  v16 = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height + a2 > a2)
  {
    v17 = v16;
    v18 = 0;
    v19 = v12 * Width;
    do
    {
      memcpy(&BaseAddress[BytesPerRow * a2 + v18], &v17[v18], v19);
      v18 += BytesPerRow;
      --Height;
    }
    while (Height);
  }
  if (a2)
  {
    v20 = 0;
    do
    {
      if (Width >= 1)
      {
        v21 = (float *)&BaseAddress[v20 * BytesPerRow];
        v22 = (Width & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v21++ = a4;
          --v22;
        }
        while (v22 > 1);
      }
      ++v20;
    }
    while (v20 != a2);
  }
  if (v13 < v14)
  {
    do
    {
      if (Width >= 1)
      {
        v23 = (float *)&BaseAddress[v13 * BytesPerRow];
        v24 = (Width & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v23++ = a4;
          --v24;
        }
        while (v24 > 1);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  CVPixelBufferUnlockBaseAddress(v27, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v25 = pixelBufferOut;

  return v25;
}

void sub_249D1FB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBuffer32BGRAFrom32ARGB(__CVBuffer *a1)
{
  NSObject *v3;
  size_t Width;
  size_t Height;
  const __CFDictionary *v6;
  CVPixelBufferRef v7;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer buf;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  pixelBufferOut = 0;
  if (CVPixelBufferGetPixelFormatType(a1) == 1111970369)
    return CVPixelBufferRetain(a1);
  VGLogVGMLUtilities();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v3))
  {
    LOWORD(buf.data) = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBuffer32BGRAFrom32ARGB", (const char *)&unk_249D51699, (uint8_t *)&buf, 2u);
  }

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v12 = *MEMORY[0x24BDC5668];
  v13[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
  v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, 0x42475241u, v6, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  buf.data = CVPixelBufferGetBaseAddress(a1);
  buf.height = Height;
  buf.width = Width;
  buf.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
  dest.height = Height;
  dest.width = Width;
  dest.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  *(_DWORD *)permuteMap = 66051;
  vImagePermuteChannels_ARGB8888(&buf, &dest, permuteMap, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v7 = pixelBufferOut;

  ___Z35createCVPixelBuffer32BGRAFrom32ARGBP10__CVBuffer_block_invoke();
  return v7;
}

void sub_249D1FDA4(_Unwind_Exception *a1)
{
  ___Z35createCVPixelBuffer32BGRAFrom32ARGBP10__CVBuffer_block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGMLUtilities(void)
{
  if (VGLogVGMLUtilities(void)::onceToken != -1)
    dispatch_once(&VGLogVGMLUtilities(void)::onceToken, &__block_literal_global_31);
  return (id)VGLogVGMLUtilities(void)::handle;
}

void ___Z35createCVPixelBuffer32BGRAFrom32ARGBP10__CVBuffer_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGMLUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBuffer32BGRAFrom32ARGB", (const char *)&unk_249D51699, v1, 2u);
  }

}

CVPixelBufferRef createCVPixelBuffer32ARGBFrom32BGRA(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  const __CFDictionary *v5;
  CVPixelBufferRef v6;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  pixelBufferOut = 0;
  if (CVPixelBufferGetPixelFormatType(a1) == 32)
    return CVPixelBufferRetain(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v11 = *MEMORY[0x24BDC5668];
  v12[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, 0x20u, v5, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.height = Height;
  src.width = Width;
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
  dest.height = Height;
  dest.width = Width;
  dest.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  *(_DWORD *)permuteMap = 66051;
  vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v6 = pixelBufferOut;

  return v6;
}

void sub_249D2002C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id create32BGRASurfaceFrom32RGBASurface(IOSurface *a1)
{
  _permuteChannelsInARGB8888Surface(a1, 0x52474241u, 1111970369);
  return (id)objc_claimAutoreleasedReturnValue();
}

IOSurface *_permuteChannelsInARGB8888Surface(IOSurface *a1, unsigned int a2, uint64_t a3)
{
  IOSurface *v5;
  IOSurface *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void (**v16)(_QWORD);
  IOSurface *v17;
  void (**v18)(_QWORD);
  IOSurface *v19;
  id v20;
  uint64_t *v21;
  unint64_t v23;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  _QWORD v26[4];
  IOSurface *v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[5];
  vImage_Buffer src;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _QWORD v39[4];
  _QWORD v40[5];

  v40[4] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  if (-[IOSurface pixelFormat](v5, "pixelFormat") == (_DWORD)a3)
  {
    v6 = v5;
  }
  else
  {
    v7 = objc_alloc(MEMORY[0x24BDD8DE8]);
    v39[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v5, "width"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = v8;
    v39[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface height](v5, "height"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v40[1] = v9;
    v39[2] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface bytesPerElement](v5, "bytesPerElement"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v40[2] = v10;
    v39[3] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v40[3] = v11;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v40, v39, 4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v7, "initWithProperties:", v12);

    src.data = (void *)0x5247424100000020;
    *(vImagePixelCount *)((char *)&src.height + 4) = 0x4247524100000020;
    LODWORD(src.height) = 197121;
    HIDWORD(src.width) = 66051;
    src.rowBytes = 0x5247424142475241;
    v33 = 0x2042475241;
    v32 = 50331906;
    v34 = 66051;
    v35 = 0x2052474241;
    v37 = 0x4247524152474241;
    v36 = 33619971;
    v38 = 50331906;
    std::unordered_map<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>>>>::unordered_map((uint64_t)v30, &src, 6);
    objc_msgSend(v13, "lockWithOptions:seed:", 0, 0);
    -[IOSurface lockWithOptions:seed:](v5, "lockWithOptions:seed:", 0, 0);
    v14 = MEMORY[0x24BDAC760];
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke;
    v28[3] = &unk_251B22CB8;
    v15 = v13;
    v29 = v15;
    v16 = (void (**)(_QWORD))MEMORY[0x24BD03294](v28);
    v26[0] = v14;
    v26[1] = 3221225472;
    v26[2] = ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke_2;
    v26[3] = &unk_251B22CB8;
    v17 = v5;
    v27 = v17;
    v18 = (void (**)(_QWORD))MEMORY[0x24BD03294](v26);
    v19 = objc_retainAutorelease(v17);
    src.data = -[IOSurface baseAddress](v19, "baseAddress");
    src.height = -[IOSurface height](v19, "height");
    src.width = -[IOSurface width](v19, "width");
    src.rowBytes = -[IOSurface bytesPerRow](v19, "bytesPerRow");
    v20 = objc_retainAutorelease(v15);
    dest.data = (void *)objc_msgSend(v20, "baseAddress");
    dest.height = objc_msgSend(v20, "height");
    dest.width = objc_msgSend(v20, "width");
    dest.rowBytes = objc_msgSend(v20, "bytesPerRow");
    v23 = a2 | (unint64_t)(a3 << 32);
    v21 = std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::find<std::pair<unsigned int,unsigned int>>(v30, &v23);
    if (!v21)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    *(_DWORD *)permuteMap = *((_DWORD *)v21 + 6);
    vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
    v6 = (IOSurface *)v20;
    v18[2](v18);

    v16[2](v16);
    std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table((uint64_t)v30);

  }
  return v6;
}

void sub_249D20478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

id create32ARGBSurfaceFrom32BGRASurface(IOSurface *a1)
{
  _permuteChannelsInARGB8888Surface(a1, 0x42475241u, 32);
  return (id)objc_claimAutoreleasedReturnValue();
}

id create32RGBASurfaceFrom32ARGBSurface(IOSurface *a1)
{
  _permuteChannelsInARGB8888Surface(a1, 0x20u, 1380401729);
  return (id)objc_claimAutoreleasedReturnValue();
}

id create32BGRASurfaceFrom32ARGBSurface(IOSurface *a1)
{
  _permuteChannelsInARGB8888Surface(a1, 0x20u, 1111970369);
  return (id)objc_claimAutoreleasedReturnValue();
}

id create32ARGBSurfaceFrom32RGBASurface(IOSurface *a1)
{
  _permuteChannelsInARGB8888Surface(a1, 0x52474241u, 32);
  return (id)objc_claimAutoreleasedReturnValue();
}

IOSurface *createARGBSurfaceWithColorSpace(IOSurface *a1, NSString *a2, NSString *a3)
{
  IOSurface *v5;
  __CFString *v6;
  __CFString *v7;
  IOSurface *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  void (**v17)(_QWORD);
  vImageConverterRef v18;
  vImageConverter *v19;
  uint64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  void *v23;
  vImagePixelCount v24;
  vImagePixelCount v25;
  void *v26;
  vImage_Error v27;
  NSObject *v28;
  void (**v30)(_QWORD);
  IOSurface *v31;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  id v34[2];
  _QWORD v35[5];
  vImage_Error error;
  _QWORD v37[4];
  vImage_CGImageFormat v38;
  vImage_CGImageFormat destFormat;
  _QWORD v40[4];
  vImage_CGImageFormat v41;
  vImage_CGImageFormat srcFormat;
  uint8_t buf[4];
  vImage_Error v44;
  _BYTE v45[36];
  _QWORD v46[4];
  _QWORD v47[7];

  v47[4] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (-[__CFString isEqualToString:](v6, "isEqualToString:", v7))
  {
    v8 = v5;
  }
  else
  {
    v9 = objc_alloc(MEMORY[0x24BDD8DE8]);
    v46[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v5, "width"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v47[0] = v10;
    v46[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface height](v5, "height"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v47[1] = v11;
    v46[2] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface bytesPerElement](v5, "bytesPerElement"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v47[2] = v12;
    v46[3] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", -[IOSurface pixelFormat](v5, "pixelFormat"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v47[3] = v13;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v47, v46, 4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = (IOSurface *)objc_msgSend(v9, "initWithProperties:", v14);

    *(_QWORD *)&srcFormat.bitsPerComponent = 0x2000000008;
    srcFormat.colorSpace = CGColorSpaceCreateWithName(v6);
    srcFormat.bitmapInfo = 4;
    memset(&srcFormat.version, 0, 20);
    v15 = MEMORY[0x24BDAC760];
    v40[0] = MEMORY[0x24BDAC760];
    v40[1] = 3221225472;
    v40[2] = ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke;
    v40[3] = &__block_descriptor_72_e5_v8__0l;
    v41 = srcFormat;
    v16 = (void (**)(_QWORD))MEMORY[0x24BD03294](v40);
    *(_QWORD *)&destFormat.bitsPerComponent = 0x2000000008;
    destFormat.colorSpace = CGColorSpaceCreateWithName(v7);
    destFormat.bitmapInfo = 4;
    memset(&destFormat.version, 0, 20);
    v37[0] = v15;
    v37[1] = 3221225472;
    v37[2] = ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_2;
    v37[3] = &__block_descriptor_72_e5_v8__0l;
    v38 = destFormat;
    v17 = (void (**)(_QWORD))MEMORY[0x24BD03294](v37);
    error = 0;
    v18 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0x100u, &error);
    v19 = v18;
    if (v18)
    {
      v35[0] = v15;
      v35[1] = 3221225472;
      v35[2] = ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_10;
      v35[3] = &__block_descriptor_40_e5_v8__0l;
      v35[4] = v18;
      v20 = MEMORY[0x24BD03294](v35);
      v30 = v16;
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v45, v5, 1);
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v34, v31, 0);
      v21 = objc_msgSend(*(id *)v45, "width");
      v22 = objc_msgSend(*(id *)v45, "height");
      v23 = (void *)objc_msgSend(*(id *)v45, "baseAddress");
      objc_msgSend(*(id *)v45, "bytesPerRow");
      objc_msgSend(*(id *)v45, "bytesPerElement");
      srcs.data = v23;
      srcs.height = v22;
      srcs.width = v21;
      srcs.rowBytes = objc_msgSend(*(id *)v45, "bytesPerRow");
      v24 = objc_msgSend(v34[0], "width");
      v25 = objc_msgSend(v34[0], "height");
      v26 = (void *)objc_msgSend(v34[0], "baseAddress");
      objc_msgSend(v34[0], "bytesPerRow");
      objc_msgSend(v34[0], "bytesPerElement");
      dests.data = v26;
      dests.height = v25;
      dests.width = v24;
      dests.rowBytes = objc_msgSend(v34[0], "bytesPerRow");
      v16 = v30;
      v27 = vImageConvert_AnyToAny(v19, &srcs, &dests, 0, 0x100u);
      if (v27)
      {
        __VGLogSharedInstance();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v44 = v27;
          _os_log_impl(&dword_249CAD000, v28, OS_LOG_TYPE_ERROR, " Failed to convert image buffer (%zd) ", buf, 0xCu);
        }

        v8 = 0;
      }
      else
      {
        v8 = v31;
      }
      vg::IOSurfaceData::~IOSurfaceData(v34);
      vg::IOSurfaceData::~IOSurfaceData((id *)v45);
      (*(void (**)(uint64_t))(v20 + 16))(v20);
    }
    else
    {
      __VGLogSharedInstance();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v45 = 134217984;
        *(_QWORD *)&v45[4] = error;
        _os_log_impl(&dword_249CAD000, (os_log_t)v20, OS_LOG_TYPE_ERROR, " Failed to create image converter (error: %zd) ", v45, 0xCu);
      }
      v8 = 0;
    }

    v17[2](v17);
    v16[2](v16);

  }
  return v8;
}

void sub_249D20ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void (**v14)(_QWORD);
  void (**v15)(_QWORD);

  v14[2](v14);

  v15[2](v15);
  _Unwind_Resume(a1);
}

void ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke(uint64_t a1)
{
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
}

void ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_2(uint64_t a1)
{
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
}

void ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_10(uint64_t a1)
{
  vImageConverter_Release(*(vImageConverterRef *)(a1 + 32));
}

IOSurface *createMaskedImageARGB32(IOSurface *a1, IOSurface *a2, float a3, char a4)
{
  IOSurface *v7;
  IOSurface *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  IOSurface *v17;
  uint64_t i;
  uint64_t j;
  char v20;
  id v22[5];
  id v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  _QWORD v32[6];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = -[IOSurface pixelFormat](v7, "pixelFormat");
  v10 = -[IOSurface width](v7, "width");
  v11 = -[IOSurface height](v7, "height");
  v12 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v31[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v10);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = v13;
  v31[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v32[1] = v14;
  v31[2] = *MEMORY[0x24BDD8D60];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v31[3] = *MEMORY[0x24BDD8D38];
  v32[2] = v15;
  v32[3] = &unk_251B34DD8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v32, v31, 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (IOSurface *)objc_msgSend(v12, "initWithProperties:", v16);

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v27, v17, 0);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v23, v7, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v22, v8, 1);
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      if (v10)
      {
        for (j = 0; j != v10; ++j)
        {
          if (*(float *)((char *)v22[2] + (uint64_t)v22[3] * i + (uint64_t)v22[4] * j) >= a3)
          {
            *(_BYTE *)(v28 + v29 * i + v30 * j) = *(_BYTE *)(v24 + v25 * i + v26 * j);
            *(_BYTE *)(v28 + v29 * i + v30 * j + 1) = *(_BYTE *)(v24 + v25 * i + v26 * j + 1);
            *(_BYTE *)(v28 + v29 * i + v30 * j + 2) = *(_BYTE *)(v24 + v25 * i + v26 * j + 2);
            v20 = *(_BYTE *)(v24 + v25 * i + v26 * j + 3);
          }
          else
          {
            *(_BYTE *)(v28 + v29 * i + v30 * j) = 0;
            *(_BYTE *)(v28 + v29 * i + v30 * j + 1) = a4;
            *(_BYTE *)(v28 + v29 * i + v30 * j + 2) = a4;
            v20 = a4;
          }
          *(_BYTE *)(v28 + v29 * i + v30 * j + 3) = v20;
        }
      }
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v22);
  vg::IOSurfaceData::~IOSurfaceData(v23);
  vg::IOSurfaceData::~IOSurfaceData(v27);

  return v17;
}

void sub_249D20F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  id v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v11 = va_arg(va1, id);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

IOSurface *createMaskedImage1CF32(IOSurface *a1, IOSurface *a2, float a3, float a4)
{
  IOSurface *v7;
  IOSurface *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  IOSurface *v17;
  uint64_t v18;
  float *v19;
  char *v20;
  char *v21;
  float *v22;
  char *v23;
  char *v24;
  float *v25;
  char *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float v30;
  id v32[5];
  id v33[5];
  id v34[5];
  _QWORD v35[4];
  _QWORD v36[5];

  v36[4] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = -[IOSurface pixelFormat](v7, "pixelFormat");
  v10 = -[IOSurface width](v7, "width");
  v11 = -[IOSurface height](v7, "height");
  v12 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v35[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v10);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v36[0] = v13;
  v35[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v36[1] = v14;
  v35[2] = *MEMORY[0x24BDD8D60];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v35[3] = *MEMORY[0x24BDD8D38];
  v36[2] = v15;
  v36[3] = &unk_251B34DD8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v36, v35, 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (IOSurface *)objc_msgSend(v12, "initWithProperties:", v16);

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v34, v17, 0);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v33, v7, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v32, v8, 1);
  if (v11)
  {
    v18 = 0;
    v19 = (float *)v32[2];
    v20 = (char *)v32[3];
    v21 = (char *)v32[4];
    v22 = (float *)v34[2];
    v23 = (char *)v34[3];
    v24 = (char *)v34[4];
    do
    {
      if (v10)
      {
        v25 = (float *)((char *)v33[2] + (uint64_t)v33[3] * v18);
        v26 = (char *)v33[4];
        v27 = v22;
        v28 = v19;
        v29 = v10;
        do
        {
          v30 = a4;
          if (*v28 > a3)
            v30 = *v25;
          *v27 = v30;
          v28 = (float *)&v21[(_QWORD)v28];
          v25 = (float *)&v26[(_QWORD)v25];
          v27 = (float *)&v24[(_QWORD)v27];
          --v29;
        }
        while (v29);
      }
      ++v18;
      v19 = (float *)&v20[(_QWORD)v19];
      v22 = (float *)&v23[(_QWORD)v22];
    }
    while (v18 != v11);
  }
  vg::IOSurfaceData::~IOSurfaceData(v32);
  vg::IOSurfaceData::~IOSurfaceData(v33);
  vg::IOSurfaceData::~IOSurfaceData(v34);

  return v17;
}

void sub_249D21200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  id v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v10 = va_arg(va1, id);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

id createFloat32SurfaceWithROI(void *a1, int8x16_t *a2)
{
  id v3;
  unsigned int v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void (**v14)(_QWORD);
  id v15;
  void (**v16)(_QWORD);
  id v17;
  int8x16_t v19;
  unsigned int v20;
  unsigned int v21;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  _QWORD v29[4];
  int8x16_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = objc_msgSend(v3, "width");
  src.data = (void *)__PAIR64__(objc_msgSend(v3, "height"), v4);
  createROIRectWithEdge(a2, &src, &v30);
  if (v31)
  {
    v5 = objc_alloc(MEMORY[0x24BDD8DE8]);
    v28[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "width"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = v6;
    v28[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "height"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v29[1] = v7;
    v28[2] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", objc_msgSend(v3, "pixelFormat"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v29[2] = v8;
    v28[3] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "bytesPerElement"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v29[3] = v9;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v5, "initWithProperties:", v10);

    v19 = v30;
    objc_msgSend(v11, "lockWithOptions:seed:", 0, 0);
    objc_msgSend(v3, "lockWithOptions:seed:", 0, 0);
    v12 = MEMORY[0x24BDAC760];
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 3221225472;
    v26[2] = ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke;
    v26[3] = &unk_251B22CB8;
    v13 = v11;
    v27 = v13;
    v14 = (void (**)(_QWORD))MEMORY[0x24BD03294](v26);
    v24[0] = v12;
    v24[1] = 3221225472;
    v24[2] = ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke_2;
    v24[3] = &unk_251B22CB8;
    v15 = v3;
    v25 = v15;
    v16 = (void (**)(_QWORD))MEMORY[0x24BD03294](v24);
    memset(&src, 0, sizeof(src));
    if (v15)
      objc_msgSend(v15, "vg_vImageBuffer");
    memset(&dest, 0, sizeof(dest));
    if (v13)
    {
      HIWORD(v21) = v19.i16[2];
      LOWORD(v21) = v19.i16[0];
      HIWORD(v20) = v19.i16[6];
      LOWORD(v20) = v19.i16[4];
      objc_msgSend(v13, "vg_vImageBufferWithCropOrigin:cropSize:", v21, v20);
    }
    if (vImageScale_PlanarF(&src, &dest, 0, 0))
      v17 = 0;
    else
      v17 = v13;
    v16[2](v16);

    v14[2](v14);
  }
  else
  {
    v17 = 0;
  }

  return v17;
}

void sub_249D215D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void (**v32)(_QWORD);
  void (**v33)(_QWORD);

  v33[2](v33);

  v32[2](v32);
  _Unwind_Resume(a1);
}

int8x16_t *createROIRectWithEdge@<X0>(int8x16_t *result@<X0>, _QWORD *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v15;
  BOOL v16;
  char v18;

  v3 = *result;
  v4 = (float)result->u32[0];
  v5 = (float)((unint64_t)result->i64[0] >> 32);
  v6 = (float)result->i64[1];
  v7 = (float)(*(unsigned __int128 *)result >> 96);
  v8 = (float)*a2;
  v9 = (float)HIDWORD(*a2);
  if (v4 <= v8)
  {
    v11 = v5 == v9;
    v10 = v5 >= v9;
  }
  else
  {
    v10 = 1;
    v11 = 0;
  }
  if (!v11 && v10)
  {
    v12 = 1;
    v13 = 0;
  }
  else
  {
    v13 = v6 == v8;
    v12 = v6 >= v8;
  }
  if (!v13 && v12 || v6 < v4)
  {
    v15 = 1;
    v16 = 0;
  }
  else
  {
    v16 = v7 == v9;
    v15 = v7 >= v9;
  }
  if (!v16 && v15 || v7 < v5)
  {
    v18 = 0;
    a3->i8[0] = 0;
  }
  else
  {
    v3.u64[1] = (unint64_t)vadd_s32(vsub_s32((int32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL), *(int32x2_t *)v3.i8), (int32x2_t)0x100000001);
    *a3 = v3;
    v18 = 1;
  }
  a3[1].i8[0] = v18;
  return result;
}

uint64_t ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

id createHorizontallyReflectedSurface(IOSurface *a1)
{
  IOSurface *v1;
  NSObject *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  IOSurface *v22;
  void (**v23)(_QWORD);
  id v24;
  void (**v25)(_QWORD);
  int v26;
  int v27;
  vImage_Error v28;
  NSObject *v29;
  void *v30;
  id v31;
  vImage_Buffer dest;
  vImage_Buffer buf;
  _QWORD v35[4];
  id v36;
  _QWORD v37[4];
  IOSurface *v38;
  vImage_Buffer v39;
  _QWORD v40[5];
  _QWORD v41[5];
  _QWORD v42[3];
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[3];
  _QWORD v46[2];
  _QWORD v47[4];
  _QWORD v48[6];

  v48[4] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  VGLogVGMLUtilities();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    LOWORD(buf.data) = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedSurface", (const char *)&unk_249D51699, (uint8_t *)&buf, 2u);
  }

  if (!-[IOSurface planeCount](v1, "planeCount"))
  {
    v47[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v1, "width"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v48[0] = v14;
    v47[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface height](v1, "height"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v48[1] = v15;
    v47[2] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", -[IOSurface pixelFormat](v1, "pixelFormat"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v48[2] = v16;
    v47[3] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface bytesPerElement](v1, "bytesPerElement"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v48[3] = v17;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v48, v47, 4);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  if (-[IOSurface planeCount](v1, "planeCount") == 2)
  {
    v3 = (_QWORD *)MEMORY[0x24BDD8D88];
    v44[0] = *MEMORY[0x24BDD8D88];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface widthOfPlaneAtIndex:](v1, "widthOfPlaneAtIndex:", 0));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v45[0] = v4;
    v5 = (_QWORD *)MEMORY[0x24BDD8D78];
    v44[1] = *MEMORY[0x24BDD8D78];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface heightOfPlaneAtIndex:](v1, "heightOfPlaneAtIndex:", 0));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v45[1] = v6;
    v7 = (_QWORD *)MEMORY[0x24BDD8D68];
    v44[2] = *MEMORY[0x24BDD8D68];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface bytesPerElementOfPlaneAtIndex:](v1, "bytesPerElementOfPlaneAtIndex:", 0));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v45[2] = v8;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v45, v44, 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = v9;
    v42[0] = *v3;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface widthOfPlaneAtIndex:](v1, "widthOfPlaneAtIndex:", 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v43[0] = v10;
    v42[1] = *v5;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface heightOfPlaneAtIndex:](v1, "heightOfPlaneAtIndex:", 1));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v43[1] = v11;
    v42[2] = *v7;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface bytesPerElementOfPlaneAtIndex:](v1, "bytesPerElementOfPlaneAtIndex:", 1));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v43[2] = v12;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v43, v42, 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v46[1] = v13;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v46, 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v40[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface width](v1, "width"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = v15;
    v40[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface height](v1, "height"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v41[1] = v16;
    v40[2] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", -[IOSurface pixelFormat](v1, "pixelFormat"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v41[2] = v17;
    v40[3] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface bytesPerElement](v1, "bytesPerElement"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v40[4] = *MEMORY[0x24BDD8D80];
    v41[3] = v18;
    v41[4] = v14;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v41, v40, 5);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_7:
    goto LABEL_9;
  }
  v19 = (void *)MEMORY[0x24BDBD1B8];
LABEL_9:
  v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v19);
  -[IOSurface lockWithOptions:seed:](v1, "lockWithOptions:seed:", 0, 0);
  v21 = MEMORY[0x24BDAC760];
  v37[0] = MEMORY[0x24BDAC760];
  v37[1] = 3221225472;
  v37[2] = ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_13;
  v37[3] = &unk_251B22CB8;
  v22 = v1;
  v38 = v22;
  v23 = (void (**)(_QWORD))MEMORY[0x24BD03294](v37);
  objc_msgSend(v20, "lockWithOptions:seed:", 0, 0);
  v35[0] = v21;
  v35[1] = 3221225472;
  v35[2] = ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_2;
  v35[3] = &unk_251B22CB8;
  v24 = v20;
  v36 = v24;
  v25 = (void (**)(_QWORD))MEMORY[0x24BD03294](v35);
  v26 = -[IOSurface pixelFormat](v22, "pixelFormat");
  if (v26 <= 1111970368)
  {
    if (v26 > 875704437)
    {
      if (v26 == 875704438)
      {
LABEL_27:
        if (v22)
          -[IOSurface vg_vImageBufferOfPlaneAtIndex:](v22, "vg_vImageBufferOfPlaneAtIndex:", 0);
        else
          memset(&v39, 0, sizeof(v39));
        buf = v39;
        if (v24)
          objc_msgSend(v24, "vg_vImageBufferOfPlaneAtIndex:", 0);
        else
          memset(&v39, 0, sizeof(v39));
        dest = v39;
        vImageHorizontalReflect_Planar8(&buf, &dest, 0x100u);
        if (v22)
          -[IOSurface vg_vImageBufferOfPlaneAtIndex:](v22, "vg_vImageBufferOfPlaneAtIndex:", 1);
        else
          memset(&v39, 0, sizeof(v39));
        buf = v39;
        if (v24)
          objc_msgSend(v24, "vg_vImageBufferOfPlaneAtIndex:", 1);
        else
          memset(&v39, 0, sizeof(v39));
        dest = v39;
        v28 = vImageHorizontalReflect_Planar16U(&buf, &dest, 0x100u);
        goto LABEL_53;
      }
      if (v26 != 1094862674)
        goto LABEL_34;
    }
    else if (v26 != 32)
    {
      if (v26 != 875704422)
        goto LABEL_34;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v26 > 1380401728)
  {
    if (v26 != 1380401729)
    {
      v27 = 1717855600;
      goto LABEL_22;
    }
LABEL_25:
    if (v22)
      -[IOSurface vg_vImageBuffer](v22, "vg_vImageBuffer");
    else
      memset(&v39, 0, sizeof(v39));
    buf = v39;
    if (v24)
      objc_msgSend(v24, "vg_vImageBuffer");
    else
      memset(&v39, 0, sizeof(v39));
    dest = v39;
    v28 = vImageHorizontalReflect_ARGB8888(&buf, &dest, 0);
    goto LABEL_53;
  }
  if (v26 == 1111970369)
    goto LABEL_25;
  v27 = 1278226534;
LABEL_22:
  if (v26 != v27)
  {
LABEL_34:
    __VGLogSharedInstance();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      vg::OSTypeToString((vg *)-[IOSurface pixelFormat](v22, "pixelFormat"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v39.data) = 138412290;
      *(void **)((char *)&v39.data + 4) = v30;
      _os_log_impl(&dword_249CAD000, v29, OS_LOG_TYPE_ERROR, " Format not supported: %@ ", (uint8_t *)&v39, 0xCu);

    }
    goto LABEL_54;
  }
  if (v22)
    -[IOSurface vg_vImageBuffer](v22, "vg_vImageBuffer");
  else
    memset(&v39, 0, sizeof(v39));
  buf = v39;
  if (v24)
    objc_msgSend(v24, "vg_vImageBuffer");
  else
    memset(&v39, 0, sizeof(v39));
  dest = v39;
  v28 = vImageHorizontalReflect_PlanarF(&buf, &dest, 0);
LABEL_53:
  if (!v28)
  {
    v31 = v24;
    goto LABEL_56;
  }
LABEL_54:
  v31 = 0;
LABEL_56:
  v25[2](v25);

  v23[2](v23);
  ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke();

  return v31;
}

void sub_249D21FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD);
  void (**v32)(_QWORD);
  void *v33;

  v32[2](v32);
  v31[2](v31);

  ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGMLUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedSurface", (const char *)&unk_249D51699, v1, 2u);
  }

}

uint64_t ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_13(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

id createScaledSurfaceWithAspectRatio(IOSurface *a1, unint64_t a2, unint64_t a3)
{
  IOSurface *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void (**v28)(_QWORD);
  IOSurface *v29;
  void (**v30)(_QWORD);
  id v31;
  __int128 v32;
  int v33;
  id v34;
  vImage_Error v35;
  __int128 v37;
  __int16 v38;
  __int16 v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  vImage_Buffer src;
  vImage_Buffer dest;
  _QWORD v45[4];
  IOSurface *v46;
  _QWORD v47[4];
  id v48;
  _QWORD v49[4];
  _QWORD v50[5];

  v50[4] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v49[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v50[0] = v7;
  v49[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v50[1] = v8;
  v49[2] = *MEMORY[0x24BDD8D60];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", -[IOSurface pixelFormat](v5, "pixelFormat"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v50[2] = v9;
  v49[3] = *MEMORY[0x24BDD8D38];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[IOSurface bytesPerElement](v5, "bytesPerElement"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v50[3] = v10;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v50, v49, 4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v6, "initWithProperties:", v11);

  v13 = -[IOSurface width](v5, "width");
  v14 = -[IOSurface height](v5, "height");
  v15 = objc_msgSend(v12, "width");
  v16 = objc_msgSend(v12, "height");
  v17 = (float)v13 / (float)v14;
  v18 = (float)v15 / (float)v16;
  LODWORD(v19) = a3;
  if (vabds_f32(v17, v18) <= 0.01)
  {
    HIDWORD(v19) = a2;
    v40 = v19;
    objc_msgSend(v12, "lockWithOptions:seed:", 0, 0, 0, 0);
  }
  else
  {
    v20 = (float)a3;
    v21 = (float)a2;
    if (v17 >= v18)
    {
      v24 = v20 / v17;
      LODWORD(v25) = 0;
      HIDWORD(v25) = (int)(float)((float)(v21 - v24) * 0.5);
      v37 = v25;
      v23 = __PAIR64__((int)v24, a3);
    }
    else
    {
      v22 = v17 * v21;
      v37 = (int)(float)((float)(v20 - v22) * 0.5);
      LODWORD(v23) = (int)v22;
      HIDWORD(v23) = a2;
    }
    v40 = v23;
    objc_msgSend(v12, "lockWithOptions:seed:", 0, 0, v37);
  }
  -[IOSurface lockWithOptions:seed:](v5, "lockWithOptions:seed:", 0, 0);
  v26 = MEMORY[0x24BDAC760];
  v47[0] = MEMORY[0x24BDAC760];
  v47[1] = 3221225472;
  v47[2] = ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke;
  v47[3] = &unk_251B22CB8;
  v27 = v12;
  v48 = v27;
  v28 = (void (**)(_QWORD))MEMORY[0x24BD03294](v47);
  v45[0] = v26;
  v45[1] = 3221225472;
  v45[2] = ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke_2;
  v45[3] = &unk_251B22CB8;
  v29 = v5;
  v46 = v29;
  v30 = (void (**)(_QWORD))MEMORY[0x24BD03294](v45);
  v31 = objc_retainAutorelease(v27);
  bzero((void *)objc_msgSend(v31, "baseAddress"), objc_msgSend(v31, "allocationSize"));
  v32 = 0uLL;
  memset(&dest, 0, sizeof(dest));
  if (v31)
  {
    HIWORD(v42) = v39;
    LOWORD(v42) = v38;
    HIWORD(v41) = WORD2(v40);
    LOWORD(v41) = v40;
    objc_msgSend(v31, "vg_vImageBufferWithCropOrigin:cropSize:", v42, v41);
    v32 = 0uLL;
  }
  *(_OWORD *)&src.data = v32;
  *(_OWORD *)&src.width = v32;
  if (v29)
    -[IOSurface vg_vImageBuffer](v29, "vg_vImageBuffer");
  v33 = -[IOSurface pixelFormat](v29, "pixelFormat");
  v34 = 0;
  if (v33 > 1278226533)
  {
    if (v33 != 1278226534)
    {
      if (v33 == 1380401729)
      {
LABEL_20:
        v35 = vImageScale_ARGB8888(&src, &dest, 0, 0);
        goto LABEL_21;
      }
      if (v33 != 1717855600)
        goto LABEL_24;
    }
    v35 = vImageScale_PlanarF(&src, &dest, 0, 0);
    goto LABEL_21;
  }
  if (v33 == 32 || v33 == 1111970369)
    goto LABEL_20;
  if (v33 != 1278226488)
    goto LABEL_24;
  v35 = vImageScale_Planar8(&src, &dest, 0, 0);
LABEL_21:
  if (v35)
    v34 = 0;
  else
    v34 = v31;
LABEL_24:
  v30[2](v30);

  v28[2](v28);
  return v34;
}

void sub_249D22684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void *v33;
  void *v34;
  void (**v35)(_QWORD);
  void (**v36)(_QWORD);

  v36[2](v36);

  v35[2](v35);
  _Unwind_Resume(a1);
}

uint64_t ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

id createCropAndScaledSurface(void *a1, int8x16_t *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  unsigned int v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void (**v18)(_QWORD);
  id v19;
  void (**v20)(_QWORD);
  int v21;
  id v22;
  vImage_Error v23;
  int8x16_t v25;
  unsigned int v26;
  unsigned int v27;
  vImage_Buffer src;
  vImage_Buffer dest;
  _QWORD v30[4];
  id v31;
  _QWORD v32[4];
  id v33;
  _QWORD v34[4];
  _QWORD v35[4];
  int8x16_t v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = objc_msgSend(v7, "width");
  dest.data = (void *)__PAIR64__(objc_msgSend(v7, "height"), v8);
  createROIRectWithEdge(a2, &dest, &v36);
  if (v37)
  {
    v9 = objc_alloc(MEMORY[0x24BDD8DE8]);
    v34[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v35[0] = v10;
    v34[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v35[1] = v11;
    v34[2] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", objc_msgSend(v7, "pixelFormat"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v35[2] = v12;
    v34[3] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v7, "bytesPerElement"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v35[3] = v13;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v35, v34, 4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)objc_msgSend(v9, "initWithProperties:", v14);

    v25 = v36;
    objc_msgSend(v15, "lockWithOptions:seed:", 0, 0);
    objc_msgSend(v7, "lockWithOptions:seed:", 0, 0);
    v16 = MEMORY[0x24BDAC760];
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke;
    v32[3] = &unk_251B22CB8;
    v17 = v15;
    v33 = v17;
    v18 = (void (**)(_QWORD))MEMORY[0x24BD03294](v32);
    v30[0] = v16;
    v30[1] = 3221225472;
    v30[2] = ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke_2;
    v30[3] = &unk_251B22CB8;
    v19 = v7;
    v31 = v19;
    v20 = (void (**)(_QWORD))MEMORY[0x24BD03294](v30);
    memset(&dest, 0, sizeof(dest));
    if (v17)
      objc_msgSend(v17, "vg_vImageBuffer");
    memset(&src, 0, sizeof(src));
    if (v19)
    {
      HIWORD(v27) = v25.i16[2];
      LOWORD(v27) = v25.i16[0];
      HIWORD(v26) = v25.i16[6];
      LOWORD(v26) = v25.i16[4];
      objc_msgSend(v19, "vg_vImageBufferWithCropOrigin:cropSize:", v27, v26);
    }
    v21 = objc_msgSend(v19, "pixelFormat");
    v22 = 0;
    if (v21 <= 1278226487)
    {
      if (v21 != 32 && v21 != 1094862674)
        goto LABEL_19;
      v23 = vImageScale_ARGB8888(&src, &dest, 0, 0);
    }
    else if (v21 == 1278226488)
    {
      v23 = vImageScale_Planar8(&src, &dest, 0, 0);
    }
    else
    {
      if (v21 != 1278226534 && v21 != 1717855600)
        goto LABEL_19;
      v23 = vImageScale_PlanarF(&src, &dest, 0, 0);
    }
    if (v23)
      v22 = 0;
    else
      v22 = v17;
LABEL_19:
    v20[2](v20);

    v18[2](v18);
    goto LABEL_20;
  }
  v22 = 0;
LABEL_20:

  return v22;
}

void sub_249D22B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void (**v32)(_QWORD);
  void (**v33)(_QWORD);

  v33[2](v33);

  v32[2](v32);
  _Unwind_Resume(a1);
}

uint64_t ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

CVPixelBufferRef createMaskedImageARGB32(__CVBuffer *a1, __CVBuffer *a2, float a3)
{
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  const __CFDictionary *v9;
  char *BaseAddress;
  float *v11;
  char *v12;
  size_t BytesPerRow;
  size_t v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  float *v21;
  size_t i;
  float v23;
  char v24;
  CVPixelBufferRef v25;
  CVPixelBufferRef pixelBuffer;
  uint64_t v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBuffer = 0;
  v28 = *MEMORY[0x24BDC5668];
  v29[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, &v28, 1);
  v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v9, &pixelBuffer);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v11 = (float *)CVPixelBufferGetBaseAddress(a2);
  v12 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v14 = CVPixelBufferGetBytesPerRow(a2);
  v15 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (Height)
  {
    v16 = 0;
    v17 = v12 + 1;
    v18 = BaseAddress + 1;
    do
    {
      v19 = v18;
      v20 = v17;
      v21 = v11;
      for (i = Width; i; --i)
      {
        v23 = 0.0;
        if (*v21 >= 0.0)
        {
          v23 = 1.0;
          if (*v21 <= 1.0)
            v23 = *v21;
        }
        if (v23 <= a3)
        {
          *(_WORD *)(v20 - 1) = 32512;
          v24 = 127;
          v20[1] = 127;
        }
        else
        {
          *(v20 - 1) = *(v19 - 1);
          *v20 = *v19;
          v20[1] = v19[1];
          v24 = v19[2];
        }
        v20[2] = v24;
        ++v21;
        v20 += 4;
        v19 += 4;
      }
      ++v16;
      v11 = (float *)((char *)v11 + v14);
      v17 += v15;
      v18 += BytesPerRow;
    }
    while (v16 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v25 = pixelBuffer;

  return v25;
}

void sub_249D22E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef createMaskedImageARGB32WithoutThreshold(__CVBuffer *a1, __CVBuffer *a2)
{
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  const __CFDictionary *v7;
  char *BaseAddress;
  float *v9;
  char *v10;
  size_t BytesPerRow;
  size_t v12;
  size_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  float *v19;
  size_t i;
  float v21;
  float v22;
  float v23;
  float v24;
  char v25;
  CVPixelBufferRef v26;
  CVPixelBufferRef pixelBuffer;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBuffer = 0;
  v29 = *MEMORY[0x24BDC5668];
  v30[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1);
  v7 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v7, &pixelBuffer);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v9 = (float *)CVPixelBufferGetBaseAddress(a2);
  v10 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v12 = CVPixelBufferGetBytesPerRow(a2);
  v13 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (Height)
  {
    v14 = 0;
    v15 = v10 + 3;
    v16 = BaseAddress + 3;
    do
    {
      v17 = v16;
      v18 = v15;
      v19 = v9;
      for (i = Width; i; --i)
      {
        v21 = *v19++;
        v22 = v21;
        if (v21 <= 1.0)
          v23 = v22;
        else
          v23 = 1.0;
        if (v22 >= 0.0)
          v24 = v23;
        else
          v24 = 0.0;
        LOBYTE(v23) = *(v17 - 3);
        *(v18 - 3) = (int)(float)(v24 * (float)LODWORD(v23));
        *(v18 - 2) = *(v17 - 2);
        *(v18 - 1) = *(v17 - 1);
        v25 = *v17;
        v17 += 4;
        *v18 = v25;
        v18 += 4;
      }
      ++v14;
      v9 = (float *)((char *)v9 + v12);
      v15 += v13;
      v16 += BytesPerRow;
    }
    while (v14 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v26 = pixelBuffer;

  return v26;
}

void sub_249D230B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef createMaskedImageU32WithThreshold(__CVBuffer *a1, __CVBuffer *a2, float a3, char a4)
{
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  char *BaseAddress;
  float *v12;
  char *v13;
  size_t BytesPerRow;
  size_t v15;
  size_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  float *v22;
  size_t i;
  char v24;
  CVPixelBufferRef v25;
  const __CFDictionary *v27;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut = 0;
  v29 = *MEMORY[0x24BDC5668];
  v30[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1);
  v27 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v27, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v12 = (float *)CVPixelBufferGetBaseAddress(a2);
  v13 = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v15 = CVPixelBufferGetBytesPerRow(a2);
  v16 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  if (Height)
  {
    v17 = 0;
    v18 = v13 + 1;
    v19 = BaseAddress + 3;
    do
    {
      v20 = v19;
      v21 = v18;
      v22 = v12;
      for (i = Width; i; --i)
      {
        if (*v22 >= a3)
        {
          *(v21 - 1) = *(v20 - 3);
          *v21 = *(v20 - 2);
          v21[1] = *(v20 - 1);
          v24 = *v20;
        }
        else
        {
          *(v21 - 1) = a4;
          *v21 = a4;
          v24 = a4;
          v21[1] = a4;
        }
        v21[2] = v24;
        ++v22;
        v21 += 4;
        v20 += 4;
      }
      ++v17;
      v12 = (float *)((char *)v12 + v15);
      v18 += v16;
      v19 += BytesPerRow;
    }
    while (v17 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v25 = pixelBufferOut;

  return v25;
}

void sub_249D2330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

CVPixelBufferRef createMaskedImage1CF32(__CVBuffer *a1, __CVBuffer *a2, float a3)
{
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  char *BaseAddress;
  float *v10;
  char *v11;
  size_t BytesPerRow;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t i;
  float v17;
  int v18;
  float v19;
  CVPixelBufferRef v20;
  const __CFDictionary *v22;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut = 0;
  v24 = *MEMORY[0x24BDC5668];
  v25[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v22, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v10 = (float *)CVPixelBufferGetBaseAddress(a2);
  v11 = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v13 = CVPixelBufferGetBytesPerRow(a2);
  v14 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  v15 = 0;
  while (v15 < CVPixelBufferGetHeight(a2))
  {
    for (i = 0; i < CVPixelBufferGetWidth(a2); ++i)
    {
      v17 = v10[i];
      v18 = 0;
      v19 = 0.0;
      if (v17 >= 0.0)
      {
        v19 = 1.0;
        if (v17 <= 1.0)
          v19 = v10[i];
      }
      if (v19 > a3)
        v18 = *(_DWORD *)&BaseAddress[4 * i];
      *(_DWORD *)&v11[4 * i] = v18;
    }
    ++v15;
    v10 = (float *)((char *)v10 + v13);
    BaseAddress += BytesPerRow;
    v11 += v14;
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v20 = pixelBufferOut;

  return v20;
}

void sub_249D23550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

IOSurface *createThresholdedDepth1CF32(IOSurface *a1, float a2, float a3, float a4)
{
  IOSurface *v7;
  id v8;
  void *v9;
  IOSurface *v10;
  unint64_t i;
  unint64_t j;
  float v13;
  id v17[5];
  id v18[5];

  v7 = a1;
  v8 = objc_alloc(MEMORY[0x24BDD8DE8]);
  -[IOSurface vg_basicProperties](v7, "vg_basicProperties");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (IOSurface *)objc_msgSend(v8, "initWithProperties:", v9);

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v18, v10, 0);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v17, v7, 1);
  for (i = 0; i < -[IOSurface height](v7, "height"); ++i)
  {
    for (j = 0; j < -[IOSurface width](v7, "width"); ++j)
    {
      v13 = *(float *)((char *)v17[2] + (unint64_t)v17[3] * i + (unint64_t)v17[4] * j);
      if (v13 < a2 && v13 > 0.0 || v13 > a3)
        v13 = a4;
      *(float *)((char *)v18[2] + (unint64_t)v18[3] * i + (unint64_t)v18[4] * j) = v13;
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v17);
  vg::IOSurfaceData::~IOSurfaceData(v18);

  return v10;
}

void sub_249D236B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

uint64_t vg_pixelCountAboveThreshold(IOSurface *a1, float a2)
{
  IOSurface *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t i;
  id v12[5];

  v3 = a1;
  v4 = -[IOSurface width](v3, "width");
  v5 = -[IOSurface height](v3, "height");
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v12, v3, 1);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = (float *)v12[2];
    do
    {
      v9 = v8;
      for (i = v4; i; --i)
      {
        if (*v9 > a2)
          ++v7;
        v9 = (float *)((char *)v9 + (unint64_t)v12[4]);
      }
      ++v6;
      v8 = (float *)((char *)v8 + (unint64_t)v12[3]);
    }
    while (v6 != v5);
  }
  else
  {
    v7 = 0;
  }
  vg::IOSurfaceData::~IOSurfaceData(v12);

  return v7;
}

void sub_249D237C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CVBuffer *create16UPixelBufferFrom32FPixelBuffer(__CVBuffer *a1, float a2, float a3)
{
  __CVBuffer *v5;
  size_t Width;
  size_t Height;
  const __CFDictionary *v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  void (**v11)(_QWORD);
  vImage_Buffer v13;
  vImage_Buffer src;
  _QWORD v15[5];
  _QWORD v16[5];
  CVPixelBufferRef pixelBufferOut;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a1;
  v19[1] = *MEMORY[0x24BDAC8D0];
  if (CVPixelBufferGetPixelFormatType(a1) == 1278226742 || CVPixelBufferGetPixelFormatType(v5) == 1751410032)
  {
    CVPixelBufferRetain(v5);
  }
  else
  {
    pixelBufferOut = 0;
    Width = CVPixelBufferGetWidth(v5);
    Height = CVPixelBufferGetHeight(v5);
    v18 = *MEMORY[0x24BDC5668];
    v19[0] = MEMORY[0x24BDBD1B8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferCreate(0, Width, Height, 0x4C303136u, v8, &pixelBufferOut);
    CVPixelBufferLockBaseAddress(v5, 1uLL);
    v9 = MEMORY[0x24BDAC760];
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke;
    v16[3] = &__block_descriptor_40_e5_v8__0l;
    v16[4] = v5;
    v10 = (void (**)(_QWORD))MEMORY[0x24BD03294](v16);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    v15[0] = v9;
    v15[1] = 3221225472;
    v15[2] = ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke_2;
    v15[3] = &__block_descriptor_40_e5_v8__0l;
    v15[4] = pixelBufferOut;
    v11 = (void (**)(_QWORD))MEMORY[0x24BD03294](v15);
    memset(&src, 0, sizeof(src));
    createvImageBufferFromLockedCVPixelBuffer(v5, &src.data);
    memset(&v13, 0, sizeof(v13));
    createvImageBufferFromLockedCVPixelBuffer(pixelBufferOut, &v13.data);
    vImageConvert_FTo16U(&src, &v13, a2, 1.0 / a3, 0);
    v5 = pixelBufferOut;
    v11[2](v11);

    v10[2](v10);
  }
  return v5;
}

void sub_249D239F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke_2(uint64_t a1)
{
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 32));
}

uint64_t writeCIImageToFile(NSString *a1, CIImage *a2, uint64_t a3, CGColorSpace *a4)
{
  NSString *v7;
  CIImage *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v14 = *MEMORY[0x24BDBF848];
  v15[0] = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBF648]), "initWithOptions:", v9);
  objc_msgSend(v10, "PNGRepresentationOfImage:format:colorSpace:options:", v8, a3, a4, MEMORY[0x24BDBD1B8]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "writeToFile:atomically:", v7, 0);

  return v12;
}

void sub_249D23B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

CVPixelBufferRef convertRGBToGrayScale(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  const __CFDictionary *v4;
  CVPixelBufferRef v5;
  vImage_Buffer v7;
  vImage_Buffer src;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v10;
  uint64_t v11;
  int16_t pre_bias[4];
  int16_t matrix[4];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferGetPixelFormatType(a1);
  *(_QWORD *)pre_bias = 0;
  *(_QWORD *)matrix = 0x1D2096404C80000;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut = 0;
  v10 = *MEMORY[0x24BDC5668];
  v11 = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, 0x4C303038u, v4, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.height = Height;
  src.width = Width;
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  v7.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
  v7.height = Height;
  v7.width = Width;
  v7.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  vImageMatrixMultiply_ARGB8888ToPlanar8(&src, &v7, matrix, 4096, pre_bias, 0, 0x100u);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v5 = pixelBufferOut;

  return v5;
}

void sub_249D23D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef convertPlanar8ToPlanarF(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  const __CFDictionary *v4;
  CVPixelBufferRef v5;
  vImage_Buffer v7;
  vImage_Buffer src;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  CVPixelBufferGetPixelFormatType(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut = 0;
  v10 = *MEMORY[0x24BDC5668];
  v11[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, 0x4C303066u, v4, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.height = Height;
  src.width = Width;
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  v7.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
  v7.height = Height;
  v7.width = Width;
  v7.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  vImageConvert_Planar8toPlanarF(&src, &v7, 255.0, 0.0, 0x100u);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v5 = pixelBufferOut;

  return v5;
}

void sub_249D23EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef createCroppedCVPixelBuffer(__CVBuffer *a1, size_t a2, size_t a3, size_t a4, size_t a5)
{
  size_t v9;
  size_t v10;
  size_t Width;
  size_t Height;
  size_t v14;
  NSObject *v15;
  size_t BytesPerRow;
  OSType PixelFormatType;
  const __CFDictionary *v18;
  size_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD *, _QWORD, _QWORD);
  CVPixelBufferRef v22;
  NSObject *v23;
  _QWORD v25[4];
  CVPixelBufferRef pixelBufferOut;
  uint64_t v27;
  uint64_t v28;
  _BYTE buf[24];
  size_t v30;
  __int16 v31;
  size_t v32;
  __int16 v33;
  size_t v34;
  __int16 v35;
  size_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v9 = a4 - a2;
  if (a4 < a2 || (v10 = a5 - a3, a5 < a3))
  {
    __VGLogSharedInstance();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2048;
      v30 = a4;
      v31 = 2048;
      v32 = a5;
      _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_ERROR, " Invalid cropping window (x1 = %zu, y1 = %zu) > (x2 = %zu, y2 = %zu) ", buf, 0x2Au);
    }
    goto LABEL_17;
  }
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v14 = Height;
  if (Width < a2 || Width < a4 || Height < a3 || Height < a5)
  {
    __VGLogSharedInstance();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2048;
      v30 = v9;
      v31 = 2048;
      v32 = a5 - a3;
      v33 = 2048;
      v34 = Width;
      v35 = 2048;
      v36 = v14;
      _os_log_impl(&dword_249CAD000, v23, OS_LOG_TYPE_ERROR, " Cropping window (x1,y1) = (%zu, %zu) (width, height) = (%zu, %zu) is extending beyond input image size (width, height) = (%zu, %zu) ", buf, 0x3Eu);
    }
LABEL_17:

    return 0;
  }
  VGLogVGMLUtilities();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v15))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v15, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateCroppedCVPixelBuffer", (const char *)&unk_249D51699, buf, 2u);
  }

  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  pixelBufferOut = 0;
  v27 = *MEMORY[0x24BDC5668];
  v28 = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, v9, v10, PixelFormatType, v18, &pixelBufferOut);
  v19 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  v20 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  *(_QWORD *)buf = (char *)CVPixelBufferGetBaseAddress(a1) + BytesPerRow * a3 + v20 * a2;
  *(_QWORD *)&buf[8] = v10;
  *(_QWORD *)&buf[16] = v9;
  v30 = BytesPerRow;
  v25[0] = CVPixelBufferGetBaseAddress(pixelBufferOut);
  v25[1] = v10;
  v25[2] = v9;
  v25[3] = v19;
  v21 = (void (*)(_BYTE *, _QWORD *, _QWORD, _QWORD))VGGetResizeFunctionFromPixelFormat(PixelFormatType);
  if (v21)
    v21(buf, v25, 0, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v22 = pixelBufferOut;

  ___Z26createCroppedCVPixelBufferP10__CVBuffermmmm_block_invoke();
  return v22;
}

void sub_249D24210(_Unwind_Exception *a1)
{
  void *v1;

  ___Z26createCroppedCVPixelBufferP10__CVBuffermmmm_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z26createCroppedCVPixelBufferP10__CVBuffermmmm_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGMLUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateCroppedCVPixelBuffer", (const char *)&unk_249D51699, v1, 2u);
  }

}

CVPixelBufferRef createHorizontallyReflectedCVPixelBuffer(__CVBuffer *a1)
{
  NSObject *v2;
  void (**v3)(_QWORD);
  IOSurface *v4;
  __CVBuffer *v5;
  IOSurface *v6;
  CVPixelBufferRef CVPixelBufferFromIOSurface;
  _QWORD v9[5];
  uint8_t buf[16];

  VGLogVGMLUtilities();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedCVPixelBuffer", (const char *)&unk_249D51699, buf, 2u);
  }

  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke_17;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = 0;
  v3 = (void (**)(_QWORD))MEMORY[0x24BD03294](v9);
  CVPixelBufferGetIOSurface(a1);
  v4 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v5 = copyToIOSurfaceBackedCVPixelBuffer(a1);
    CVPixelBufferGetIOSurface(v5);
    v4 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  }
  createHorizontallyReflectedSurface(v4);
  v6 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v6);

  v3[2](v3);
  ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke();
  return CVPixelBufferFromIOSurface;
}

void sub_249D243E8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);

  v1[2](v1);

  ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGMLUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedCVPixelBuffer", (const char *)&unk_249D51699, v1, 2u);
  }

}

void ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke_17(uint64_t a1)
{
  __CVBuffer *v1;

  v1 = *(__CVBuffer **)(a1 + 32);
  if (v1)
    CVPixelBufferRelease(v1);
}

CVPixelBufferRef copyToIOSurfaceBackedCVPixelBuffer(__CVBuffer *a1)
{
  IOSurface *v1;
  CVPixelBufferRef CVPixelBufferFromIOSurface;

  IOSurfaceFromCVPixelBuffer(a1);
  v1 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v1);

  return CVPixelBufferFromIOSurface;
}

void sub_249D244E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CVBuffer *create32BGRAPixelBufferFromFloatPixelBuffer(__CVBuffer *a1, Pixel_F a2, Pixel_F a3)
{
  __CVBuffer *v5;
  size_t Width;
  size_t Height;
  const __CFDictionary *v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  void (**v11)(_QWORD);
  void (**v12)(_QWORD);
  void (**v13)(_QWORD);
  vImage_Buffer v15;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  CVPixelBufferRef v22;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v24;
  _QWORD v25[2];

  v5 = a1;
  v25[1] = *MEMORY[0x24BDAC8D0];
  if (CVPixelBufferGetPixelFormatType(a1) == 1111970369)
  {
    CVPixelBufferRetain(v5);
  }
  else
  {
    v22 = 0;
    pixelBufferOut = 0;
    Width = CVPixelBufferGetWidth(v5);
    Height = CVPixelBufferGetHeight(v5);
    v24 = *MEMORY[0x24BDC5668];
    v25[0] = MEMORY[0x24BDBD1B8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
    v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferCreate(0, Width, Height, 0x4C303038u, v8, &pixelBufferOut);
    v9 = MEMORY[0x24BDAC760];
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke;
    v21[3] = &__block_descriptor_40_e5_v8__0l;
    v21[4] = pixelBufferOut;
    v10 = (void (**)(_QWORD))MEMORY[0x24BD03294](v21);
    CVPixelBufferCreate(0, Width, Height, 0x42475241u, v8, &v22);
    CVPixelBufferLockBaseAddress(v5, 1uLL);
    v20[0] = v9;
    v20[1] = 3221225472;
    v20[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_2;
    v20[3] = &__block_descriptor_40_e5_v8__0l;
    v20[4] = v5;
    v11 = (void (**)(_QWORD))MEMORY[0x24BD03294](v20);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    v19[0] = v9;
    v19[1] = 3221225472;
    v19[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_3;
    v19[3] = &__block_descriptor_40_e5_v8__0l;
    v19[4] = pixelBufferOut;
    v12 = (void (**)(_QWORD))MEMORY[0x24BD03294](v19);
    CVPixelBufferLockBaseAddress(v22, 0);
    v18[0] = v9;
    v18[1] = 3221225472;
    v18[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_4;
    v18[3] = &__block_descriptor_40_e5_v8__0l;
    v18[4] = v22;
    v13 = (void (**)(_QWORD))MEMORY[0x24BD03294](v18);
    memset(&src, 0, sizeof(src));
    createvImageBufferFromLockedCVPixelBuffer(v5, &src.data);
    memset(&dest, 0, sizeof(dest));
    createvImageBufferFromLockedCVPixelBuffer(pixelBufferOut, &dest.data);
    memset(&v15, 0, sizeof(v15));
    createvImageBufferFromLockedCVPixelBuffer(v22, &v15.data);
    vImageConvert_PlanarFtoPlanar8(&src, &dest, a2, a3, 0);
    vImageConvert_Planar8ToBGRX8888(&dest, &dest, &dest, 0xFFu, &v15, 0);
    v5 = v22;
    v13[2](v13);

    v12[2](v12);
    v11[2](v11);

    v10[2](v10);
  }
  return v5;
}

void sub_249D247C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

uint64_t ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_3(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

uint64_t ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_4(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

size_t createvImageBufferFromLockedCVPixelBuffer@<X0>(__CVBuffer *a1@<X0>, void **a2@<X8>)
{
  size_t result;

  *a2 = CVPixelBufferGetBaseAddress(a1);
  a2[1] = (void *)CVPixelBufferGetHeight(a1);
  a2[2] = (void *)CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetBytesPerRow(a1);
  a2[3] = (void *)result;
  return result;
}

__CVBuffer *create32FPixelBufferFrom16UPixelBuffer(__CVBuffer *a1, float a2, float a3)
{
  __CVBuffer *v5;
  size_t Width;
  size_t Height;
  const __CFDictionary *v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  void (**v11)(_QWORD);
  vImage_Buffer v13;
  vImage_Buffer src;
  _QWORD v15[5];
  _QWORD v16[5];
  CVPixelBufferRef pixelBufferOut;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a1;
  v19[1] = *MEMORY[0x24BDAC8D0];
  if (CVPixelBufferGetPixelFormatType(a1) == 1717855600)
  {
    CVPixelBufferRetain(v5);
  }
  else
  {
    pixelBufferOut = 0;
    Width = CVPixelBufferGetWidth(v5);
    Height = CVPixelBufferGetHeight(v5);
    v18 = *MEMORY[0x24BDC5668];
    v19[0] = MEMORY[0x24BDBD1B8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferCreate(0, Width, Height, 0x66646570u, v8, &pixelBufferOut);
    CVPixelBufferLockBaseAddress(v5, 1uLL);
    v9 = MEMORY[0x24BDAC760];
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke;
    v16[3] = &__block_descriptor_40_e5_v8__0l;
    v16[4] = v5;
    v10 = (void (**)(_QWORD))MEMORY[0x24BD03294](v16);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    v15[0] = v9;
    v15[1] = 3221225472;
    v15[2] = ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke_2;
    v15[3] = &__block_descriptor_40_e5_v8__0l;
    v15[4] = pixelBufferOut;
    v11 = (void (**)(_QWORD))MEMORY[0x24BD03294](v15);
    memset(&src, 0, sizeof(src));
    createvImageBufferFromLockedCVPixelBuffer(v5, &src.data);
    memset(&v13, 0, sizeof(v13));
    createvImageBufferFromLockedCVPixelBuffer(pixelBufferOut, &v13.data);
    vImageConvert_16UToF(&src, &v13, a2, a3, 0);
    v5 = pixelBufferOut;
    v11[2](v11);

    v10[2](v10);
  }
  return v5;
}

void sub_249D24AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

uint64_t ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

CVPixelBufferRef createDilatedPixelBuffer32BGRA(__CVBuffer *a1, vImagePixelCount a2, vImagePixelCount a3, const unsigned __int8 *a4)
{
  __CVBuffer *CVPixelBuffer32ARGBFrom32BGRA;
  uint64_t v8;
  void (**v9)(_QWORD);
  __CVBuffer *DilatedPixelBuffer32ARGB;
  void (**v11)(_QWORD);
  CVPixelBufferRef CVPixelBuffer32BGRAFrom32ARGB;
  _QWORD v14[5];
  _QWORD v15[5];

  CVPixelBuffer32ARGBFrom32BGRA = createCVPixelBuffer32ARGBFrom32BGRA(a1);
  v8 = MEMORY[0x24BDAC760];
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = CVPixelBuffer32ARGBFrom32BGRA;
  v9 = (void (**)(_QWORD))MEMORY[0x24BD03294](v15);
  DilatedPixelBuffer32ARGB = createDilatedPixelBuffer32ARGB(CVPixelBuffer32ARGBFrom32BGRA, a2, a3, a4);
  v14[0] = v8;
  v14[1] = 3221225472;
  v14[2] = ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke_2;
  v14[3] = &__block_descriptor_40_e5_v8__0l;
  v14[4] = DilatedPixelBuffer32ARGB;
  v11 = (void (**)(_QWORD))MEMORY[0x24BD03294](v14);
  CVPixelBuffer32BGRAFrom32ARGB = createCVPixelBuffer32BGRAFrom32ARGB(DilatedPixelBuffer32ARGB);
  v11[2](v11);

  v9[2](v9);
  return CVPixelBuffer32BGRAFrom32ARGB;
}

void sub_249D24C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

__CVBuffer *createDilatedPixelBuffer32ARGB(__CVBuffer *a1, vImagePixelCount a2, vImagePixelCount a3, const unsigned __int8 *a4)
{
  void (**v8)(_QWORD);
  __CVBuffer *v9;
  __CVBuffer *IOSurfaceBackedPixelBufferCopy;
  vImage_Error v11;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v15[5];

  CVPixelBufferRetain(a1);
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = ___Z30createDilatedPixelBuffer32ARGBP10__CVBuffermmPKh_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = a1;
  v8 = (void (**)(_QWORD))MEMORY[0x24BD03294](v15);
  IOSurfaceBackedPixelBufferCopy = vg::createIOSurfaceBackedPixelBufferCopy(a1, v9);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(IOSurfaceBackedPixelBufferCopy, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.height = CVPixelBufferGetHeight(a1);
  src.width = CVPixelBufferGetWidth(a1);
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.data = CVPixelBufferGetBaseAddress(IOSurfaceBackedPixelBufferCopy);
  dest.height = CVPixelBufferGetHeight(IOSurfaceBackedPixelBufferCopy);
  dest.width = CVPixelBufferGetWidth(IOSurfaceBackedPixelBufferCopy);
  dest.rowBytes = CVPixelBufferGetBytesPerRow(IOSurfaceBackedPixelBufferCopy);
  v11 = vImageDilate_ARGB8888(&src, &dest, 0, 0, a4, a2, a3, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(IOSurfaceBackedPixelBufferCopy, 0);
  if (v11)
  {
    CVPixelBufferRelease(IOSurfaceBackedPixelBufferCopy);
    IOSurfaceBackedPixelBufferCopy = 0;
  }
  v8[2](v8);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_249D24E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke_2(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ___Z30createDilatedPixelBuffer32ARGBP10__CVBuffermmPKh_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

CVPixelBufferRef unpremultiplyAlphaIn32ARGB(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  const __CFDictionary *v4;
  size_t BytesPerRow;
  size_t v6;
  char *BaseAddress;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  size_t i;
  unsigned int v15;
  CVPixelBufferRef v16;
  CVPixelBufferRef pixelBuffer;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  pixelBuffer = 0;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v19 = *MEMORY[0x24BDC5668];
  v20[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, Height, 0x20u, v4, &pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v6 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v8 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  if (Height)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)(BaseAddress + 1);
    v11 = v8 + 3;
    do
    {
      v12 = v11;
      v13 = v10;
      for (i = Width; i; --i)
      {
        *(v12 - 3) = *(v13 - 1);
        v15 = *(v13 - 1);
        if (*(v13 - 1))
        {
          *(v12 - 2) = 255 * *v13 / v15;
          *(v12 - 1) = 255 * v13[1] / v15;
          *v12 = 255 * v13[2] / v15;
        }
        v13 += 4;
        v12 += 4;
      }
      ++v9;
      v10 += BytesPerRow;
      v11 += v6;
    }
    while (v9 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v16 = pixelBuffer;

  return v16;
}

void sub_249D25048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id IOSurfaceFromCVPixelBuffer(__CVBuffer *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  OSType PixelFormatType;
  void *v9;
  void *v10;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[4];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  if (CVPixelBufferIsPlanar(a1))
  {
    v14[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth(a1));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v2;
    v14[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight(a1));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v15[1] = v3;
    v14[2] = *MEMORY[0x24BDD8D40];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetBytesPerRow(a1));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v15[2] = v4;
    v14[3] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", CVPixelBufferGetPixelFormatType(a1));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v15[3] = v5;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, v14, 4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth(a1));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = v2;
    v12[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight(a1));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v13[1] = v3;
    v12[2] = *MEMORY[0x24BDD8D40];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetBytesPerRow(a1));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v13[2] = v4;
    v12[3] = *MEMORY[0x24BDD8D38];
    v7 = (void *)MEMORY[0x24BDD16E0];
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    objc_msgSend(v7, "numberWithUnsignedLong:", VGGetBytesPerElementFromPixelFormat(PixelFormatType));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v13[3] = v5;
    v12[4] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", CVPixelBufferGetPixelFormatType(a1));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[4] = v9;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v13, v12, 5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  IOSurfaceFromCVPixelBufferWithProperties(a1, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_249D25338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id IOSurfaceFromCVPixelBufferWithProperties(__CVBuffer *a1, void *a2)
{
  size_t PlaneCount;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void (**v18)(_QWORD);
  void (**v19)(_QWORD);
  size_t v20;
  size_t BytesPerRowOfPlane;
  size_t HeightOfPlane;
  void *BaseAddressOfPlane;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void (**v28)(_QWORD);
  void (**v29)(_QWORD);
  size_t BytesPerRow;
  size_t Height;
  void *BaseAddress;
  id v33;
  id v35;
  void *v36;
  void *v37;
  _QWORD v38[5];
  _QWORD v39[4];
  id v40;
  _QWORD v41[5];
  _QWORD v42[4];
  id v43;
  _QWORD v44[3];
  _QWORD v45[3];
  _QWORD v46[3];
  _QWORD v47[5];

  v47[3] = *MEMORY[0x24BDAC8D0];
  v35 = a2;
  if (CVPixelBufferIsPlanar(a1))
  {
    PlaneCount = CVPixelBufferGetPlaneCount(a1);
    v46[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth(a1));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v47[0] = v4;
    v46[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight(a1));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v47[1] = v5;
    v46[2] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", CVPixelBufferGetPixelFormatType(a1));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v47[2] = v6;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v47, v46, 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = (void *)objc_msgSend(v7, "mutableCopy");

    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", PlaneCount);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (PlaneCount)
    {
      v8 = 0;
      v9 = (_QWORD *)MEMORY[0x24BDD8D78];
      v10 = (_QWORD *)MEMORY[0x24BDD8D70];
      do
      {
        v44[0] = *MEMORY[0x24BDD8D88];
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidthOfPlane(a1, v8));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v45[0] = v11;
        v44[1] = *v9;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeightOfPlane(a1, v8));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v45[1] = v12;
        v44[2] = *v10;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetBytesPerRowOfPlane(a1, v8));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v45[2] = v13;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v45, v44, 3);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v37, "addObject:", v14);
        ++v8;
      }
      while (PlaneCount != v8);
    }
    objc_msgSend(v36, "setObject:forKeyedSubscript:", v37, *MEMORY[0x24BDD8D80]);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v36);
    objc_msgSend(v15, "lockWithOptions:seed:", 0, 0);
    v16 = MEMORY[0x24BDAC760];
    v42[0] = MEMORY[0x24BDAC760];
    v42[1] = 3221225472;
    v42[2] = ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke;
    v42[3] = &unk_251B22CB8;
    v17 = v15;
    v43 = v17;
    v18 = (void (**)(_QWORD))MEMORY[0x24BD03294](v42);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    v41[0] = v16;
    v41[1] = 3221225472;
    v41[2] = ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke_2;
    v41[3] = &__block_descriptor_40_e5_v8__0l;
    v41[4] = a1;
    v19 = (void (**)(_QWORD))MEMORY[0x24BD03294](v41);
    if (PlaneCount)
    {
      v20 = 0;
      do
      {
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v20);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v20);
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v20);
        memcpy((void *)objc_msgSend(objc_retainAutorelease(v17), "baseAddressOfPlaneAtIndex:", v20++), BaseAddressOfPlane, HeightOfPlane * BytesPerRowOfPlane);
      }
      while (PlaneCount != v20);
    }
    v24 = v17;
    v19[2](v19);

    v18[2](v18);
  }
  else
  {
    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v35);
    objc_msgSend(v25, "lockWithOptions:seed:", 0, 0);
    v26 = MEMORY[0x24BDAC760];
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke;
    v39[3] = &unk_251B22CB8;
    v27 = v25;
    v40 = v27;
    v28 = (void (**)(_QWORD))MEMORY[0x24BD03294](v39);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    v38[0] = v26;
    v38[1] = 3221225472;
    v38[2] = ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke_2;
    v38[3] = &__block_descriptor_40_e5_v8__0l;
    v38[4] = a1;
    v29 = (void (**)(_QWORD))MEMORY[0x24BD03294](v38);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    Height = CVPixelBufferGetHeight(a1);
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    v33 = objc_retainAutorelease(v27);
    memcpy((void *)objc_msgSend(v33, "baseAddress"), BaseAddress, Height * BytesPerRow);
    v24 = v33;
    v29[2](v29);

    v28[2](v28);
  }

  return v24;
}

void sub_249D258B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___Z32createCVPixelBufferFromIOSurfaceP9IOSurface_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGMLUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBufferFromIOSurface", (const char *)&unk_249D51699, v1, 2u);
  }

}

CVPixelBufferRef create1C32FDepthBufferFromFilePath(NSString *a1, float a2)
{
  NSString *v3;
  __CVBuffer *v4;
  uint64_t v5;
  void (**v6)(_QWORD);
  __CVBuffer *v7;
  void (**v8)(_QWORD);
  CVPixelBufferRef PixelBuffer1C32FFromDepth32;
  _QWORD v11[5];
  _QWORD v12[5];

  v3 = a1;
  v4 = create1C16BufferFromFilePath(v3);
  v5 = MEMORY[0x24BDAC760];
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke;
  v12[3] = &__block_descriptor_40_e5_v8__0l;
  v12[4] = v4;
  v6 = (void (**)(_QWORD))MEMORY[0x24BD03294](v12);
  v7 = create32FPixelBufferFrom16UPixelBuffer(v4, 0.0, a2);
  v11[0] = v5;
  v11[1] = 3221225472;
  v11[2] = ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke_2;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v7;
  v8 = (void (**)(_QWORD))MEMORY[0x24BD03294](v11);
  PixelBuffer1C32FFromDepth32 = createPixelBuffer1C32FFromDepth32(v7, 1.0);
  v8[2](v8);

  v6[2](v6);
  return PixelBuffer1C32FFromDepth32;
}

void sub_249D25BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CVPixelBufferRef create1C16BufferFromFilePath(NSString *a1)
{
  NSString *v1;
  id v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  const __CFDictionary *v9;
  void *v10;
  CVPixelBufferRef v11;
  CVPixelBufferRef pixelBuffer;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = objc_alloc(MEMORY[0x24BDBF660]);
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithContentsOfURL:", v3);

  pixelBuffer = 0;
  objc_msgSend(v4, "extent");
  v6 = v5;
  objc_msgSend(v4, "extent");
  v8 = v7;
  v14 = *MEMORY[0x24BDC5668];
  v15[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
  v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, (unint64_t)v6, (unint64_t)v8, 0x4C303136u, v9, &pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  objc_msgSend(MEMORY[0x24BDBF648], "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "render:toCVPixelBuffer:", v4, pixelBuffer);

  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v11 = pixelBuffer;

  return v11;
}

void sub_249D25D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke_2(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

CVPixelBufferRef createPixelBuffer1C32FFromDepth32(__CVBuffer *a1, float a2)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IOSurface *v13;
  char *BaseAddress;
  uint64_t v15;
  char *v16;
  id v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  CVPixelBufferRef CVPixelBufferFromIOSurface;
  id v24[5];
  _QWORD v25[4];
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v7 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v25[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", Width);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v8;
  v25[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", Height);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *MEMORY[0x24BDD8D38];
  v26[1] = v9;
  v26[2] = &unk_251B34E08;
  v11 = *MEMORY[0x24BDD8D60];
  v25[2] = v10;
  v25[3] = v11;
  v26[3] = &unk_251B34DF0;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, v25, 4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (IOSurface *)objc_msgSend(v7, "initWithProperties:", v12);

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v24, v13, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height)
  {
    v15 = 0;
    v16 = (char *)v24[2];
    v17 = v24[3];
    do
    {
      if (Width)
      {
        v18 = (float *)&BaseAddress[4 * v15 * (BytesPerRow >> 2)];
        v19 = (float *)&v16[(_QWORD)v17 * v15];
        v20 = 4 * Width;
        do
        {
          v21 = *v18++;
          *v19++ = v21 * a2;
          v20 -= 4;
        }
        while (v20);
      }
      ++v15;
    }
    while (v15 != Height);
  }
  CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v13);
  vg::IOSurfaceData::~IOSurfaceData(v24);

  return CVPixelBufferFromIOSurface;
}

void sub_249D25FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;

  vg::IOSurfaceData::~IOSurfaceData(&a9);

  _Unwind_Resume(a1);
}

CVPixelBufferRef createPixelBufferDepth32From1C32F(__CVBuffer *a1, float a2)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *BaseAddress;
  id v16;
  uint64_t v17;
  uint64_t i;
  float *v19;
  float *v20;
  uint64_t v21;
  float v22;
  const __CFDictionary *v23;
  CVPixelBufferRef v24;
  CVPixelBufferRef v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  _QWORD v30[6];

  v30[5] = *MEMORY[0x24BDAC8D0];
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v7 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v29[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", Width);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v8;
  v29[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", Height);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = v9;
  v29[2] = *MEMORY[0x24BDD8D40];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", BytesPerRow);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *MEMORY[0x24BDD8D38];
  v30[2] = v10;
  v30[3] = &unk_251B34E08;
  v12 = *MEMORY[0x24BDD8D60];
  v29[3] = v11;
  v29[4] = v12;
  v30[4] = &unk_251B34E20;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v30, v29, 5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v7, "initWithProperties:", v13);

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  objc_msgSend(v14, "lockWithOptions:seed:", 0, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v16 = objc_retainAutorelease(v14);
  v17 = objc_msgSend(v16, "baseAddress");
  if (Height)
  {
    for (i = 0; i != Height; ++i)
    {
      if (Width)
      {
        v19 = (float *)&BaseAddress[i * BytesPerRow];
        v20 = (float *)(v17 + i * BytesPerRow);
        v21 = 4 * Width;
        do
        {
          v22 = *v19++;
          *v20++ = v22 * a2;
          v21 -= 4;
        }
        while (v21);
      }
    }
  }
  objc_msgSend(v16, "unlockWithOptions:seed:", 0, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  v26 = 0;
  v27 = *MEMORY[0x24BDC5668];
  v28 = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (CVPixelBufferCreateWithIOSurface(0, (IOSurfaceRef)v16, v23, &v26))
    v24 = 0;
  else
    v24 = v26;

  return v24;
}

void sub_249D262A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double srgb2xyz(__n128 a1)
{
  uint64_t i;
  float v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  double result;
  __n128 v9;
  __n128 v10;
  __n128 v11;

  for (i = 0; i != 3; ++i)
  {
    v11 = a1;
    v3 = *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
    if (v3 <= 0.04045)
    {
      v4 = v3 / 12.92;
    }
    else
    {
      v9 = a1;
      v4 = powf((float)(v3 + 0.055) / 1.055, 2.4);
      a1 = v9;
    }
    v10 = a1;
    *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = v4;
    v5 = (float32x4_t)v10;
    v5.i32[3] = a1.n128_i32[3];
    a1 = (__n128)v5;
  }
  v5.i32[3] = 0;
  v6 = vmaxnmq_f32(v5, (float32x4_t)0);
  v6.i32[3] = 0;
  v7 = vminnmq_f32(v6, (float32x4_t)xmmword_249D3CEF0);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_249D3D130, v7.f32[0]), (float32x4_t)xmmword_249D3D140, *(float32x2_t *)v7.f32, 1), (float32x4_t)xmmword_249D3D150, v7, 2).u64[0];
  return result;
}

double srgb2linear(__n128 a1)
{
  uint64_t i;
  float v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;
  __n128 v8;
  __n128 v9;
  __n128 v10;

  for (i = 0; i != 3; ++i)
  {
    v10 = a1;
    v3 = *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
    if (v3 <= 0.04045)
    {
      v4 = v3 / 12.92;
    }
    else
    {
      v8 = a1;
      v4 = powf((float)(v3 + 0.055) / 1.055, 2.4);
      a1 = v8;
    }
    v9 = a1;
    *(float *)((unint64_t)&v9 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = v4;
    v5 = (float32x4_t)v9;
    v5.i32[3] = a1.n128_i32[3];
    a1 = (__n128)v5;
  }
  v5.i32[3] = 0;
  v6 = vmaxnmq_f32(v5, (float32x4_t)0);
  v6.i32[3] = 0;
  *(_QWORD *)&result = vminnmq_f32(v6, (float32x4_t)xmmword_249D3CEF0).u64[0];
  return result;
}

double xyz2srgb(float32x4_t a1)
{
  uint64_t v1;
  float32x4_t v2;
  float v3;
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  double result;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  v1 = 0;
  v2 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_249D3D160, a1.f32[0]), (float32x4_t)xmmword_249D3D170, *(float32x2_t *)a1.f32, 1), (float32x4_t)xmmword_249D3D180, a1, 2);
  v11 = v2;
  do
  {
    v15 = v2;
    v3 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    if (v3 <= 0.0031308)
    {
      v5 = v3 * 12.92;
    }
    else
    {
      v14 = v11;
      v12 = v2;
      v4 = powf(*(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))), 0.41667);
      v2 = v12;
      v5 = (float)(v4 * 1.055) + -0.055;
    }
    v13 = v2;
    *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))) = v5;
    v6 = v13;
    v6.i32[3] = v2.i32[3];
    ++v1;
    v2 = v6;
  }
  while (v1 != 3);
  v6.i32[3] = 0;
  v7 = vmaxnmq_f32(v6, (float32x4_t)0);
  v7.i32[3] = 0;
  v8 = vminnmq_f32(v7, (float32x4_t)xmmword_249D3CEF0);
  v8.i32[3] = 0;
  v9 = vmaxnmq_f32(v8, (float32x4_t)0);
  v9.i32[3] = 0;
  *(_QWORD *)&result = vminnmq_f32(v9, (float32x4_t)xmmword_249D3CEF0).u64[0];
  return result;
}

double linear2srgb(__n128 a1)
{
  uint64_t v1;
  __n128 v2;
  float v3;
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  double result;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;

  v1 = 0;
  v2 = a1;
  do
  {
    v13 = v2;
    v3 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    if (v3 <= 0.0031308)
    {
      v5 = v3 * 12.92;
    }
    else
    {
      v12 = a1;
      v10 = v2;
      v4 = powf(*(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))), 0.41667);
      v2 = v10;
      v5 = (float)(v4 * 1.055) + -0.055;
    }
    v11 = v2;
    *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))) = v5;
    v6 = (float32x4_t)v11;
    v6.i32[3] = v2.n128_i32[3];
    ++v1;
    v2 = (__n128)v6;
  }
  while (v1 != 3);
  v6.i32[3] = 0;
  v7 = vmaxnmq_f32(v6, (float32x4_t)0);
  v7.i32[3] = 0;
  *(_QWORD *)&result = vminnmq_f32(v7, (float32x4_t)xmmword_249D3CEF0).u64[0];
  return result;
}

CVPixelBufferRef createPixelBufferFromData(NSData *a1, size_t a2, size_t a3, OSType a4)
{
  NSData *v7;
  const __CFDictionary *v8;
  size_t BytesPerRow;
  uint64_t v10;
  char *BaseAddress;
  NSData *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  CVPixelBufferRef v16;
  CVPixelBufferRef pixelBuffer;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  pixelBuffer = 0;
  v19 = *MEMORY[0x24BDC5668];
  v20[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, a2, a3, a4, v8, &pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  v10 = VGGetBytesPerElementFromPixelFormat(a4);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  v12 = objc_retainAutorelease(v7);
  v13 = -[NSData bytes](v12, "bytes");
  if (a3)
  {
    v14 = (char *)v13;
    v15 = v10 * a2;
    do
    {
      memcpy(BaseAddress, v14, v15);
      v14 += v15;
      BaseAddress += BytesPerRow;
      --a3;
    }
    while (a3);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v16 = pixelBuffer;

  return v16;
}

void sub_249D26878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL checkEqualSurfaces(IOSurface *a1, IOSurface *a2)
{
  IOSurface *v3;
  IOSurface *v4;
  OSType v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  _BOOL8 v11;
  const void *__s2;
  void *__s1[3];

  v3 = a1;
  v4 = a2;
  if ((v3 == 0) != (v4 != 0)
    && (v5 = -[IOSurface pixelFormat](v3, "pixelFormat"), v5 == -[IOSurface pixelFormat](v4, "pixelFormat"))
    && (v6 = -[IOSurface width](v3, "width"), v6 == -[IOSurface width](v4, "width"))
    && (v7 = -[IOSurface height](v3, "height"), v7 == -[IOSurface height](v4, "height"))
    && (v8 = -[IOSurface bytesPerRow](v3, "bytesPerRow"), v8 == -[IOSurface bytesPerRow](v4, "bytesPerRow"))
    && (v9 = -[IOSurface planeCount](v3, "planeCount"), v9 == -[IOSurface planeCount](v4, "planeCount")))
  {
    -[IOSurface lockWithOptions:seed:](v3, "lockWithOptions:seed:", 1, 0);
    -[IOSurface lockWithOptions:seed:](v4, "lockWithOptions:seed:", 1, 0);
    if (-[IOSurface planeCount](v3, "planeCount"))
    {
      for (i = 0; i < -[IOSurface planeCount](v3, "planeCount", __s2); ++i)
      {
        memset(__s1, 0, sizeof(__s1));
        if (v3)
          -[IOSurface vg_vImageBufferOfPlaneAtIndex:](v3, "vg_vImageBufferOfPlaneAtIndex:", i);
        __s2 = 0;
        if (v4)
          -[IOSurface vg_vImageBufferOfPlaneAtIndex:](v4, "vg_vImageBufferOfPlaneAtIndex:", i, 0);
        if (*(_OWORD *)&__s1[1] != 0 || memcmp(0, __s2, 0))
        {
          v11 = 0;
          goto LABEL_22;
        }
      }
      v11 = 1;
    }
    else
    {
      v11 = memcmp(-[IOSurface baseAddress](objc_retainAutorelease(v3), "baseAddress"), -[IOSurface baseAddress](objc_retainAutorelease(v4), "baseAddress"), -[IOSurface height](v3, "height") * -[IOSurface bytesPerRow](v3, "bytesPerRow")) == 0;
    }
LABEL_22:
    -[IOSurface unlockWithOptions:seed:](v4, "unlockWithOptions:seed:", 1, 0, __s2);
    -[IOSurface unlockWithOptions:seed:](v3, "unlockWithOptions:seed:", 1, 0);
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_249D26AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL checkEqualPixelBuffers(__CVBuffer *a1, __CVBuffer *a2)
{
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t v8;
  size_t v9;
  void *BaseAddress;
  void *v11;

  if ((a1 == 0) == (a2 != 0))
    return 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2))
    return 0;
  Width = CVPixelBufferGetWidth(a1);
  if (Width != CVPixelBufferGetWidth(a2))
    return 0;
  Height = CVPixelBufferGetHeight(a1);
  if (Height != CVPixelBufferGetHeight(a2))
    return 0;
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  if (BytesPerRow != CVPixelBufferGetBytesPerRow(a2))
    return 0;
  v8 = CVPixelBufferGetBytesPerRow(a1);
  v9 = CVPixelBufferGetHeight(a1) * v8;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  v11 = CVPixelBufferGetBaseAddress(a2);
  LODWORD(v9) = memcmp(BaseAddress, v11, v9);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return (_DWORD)v9 == 0;
}

id createSurfaceFromFilePath(NSString *a1)
{
  NSString *v1;
  void *v2;
  char v3;
  id v4;
  void *v5;
  NSObject *v6;
  CGImage *v7;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t BitsPerComponent;
  int v12;
  uint64_t v13;
  size_t v14;
  NSObject *v20;
  void *v21;
  unsigned __int16 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  CGDataProvider *DataProvider;
  const __CFData *v29;
  const UInt8 *BytePtr;
  id v31;
  id v32;
  NSObject *v33;
  size_t v35;
  void *v36;
  void (**v37)(_QWORD);
  NSString *v38;
  _QWORD v39[5];
  _QWORD v40[5];
  _QWORD v41[5];
  uint8_t buf[4];
  _QWORD v43[3];

  *(_QWORD *)((char *)&v43[1] + 4) = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v38 = v1;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "fileExistsAtPath:", v1);

  if ((v3 & 1) != 0)
  {
    v4 = objc_alloc(MEMORY[0x24BDBF660]);
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "initWithContentsOfURL:", v5);

    objc_msgSend(MEMORY[0x24BDBF648], "context");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject extent](v6, "extent");
    v7 = (CGImage *)objc_msgSend(v36, "createCGImage:fromRect:", v6);
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = ___Z25createSurfaceFromFilePathP8NSString_block_invoke;
    v39[3] = &__block_descriptor_40_e5_v8__0l;
    v39[4] = v7;
    v37 = (void (**)(_QWORD))MEMORY[0x24BD03294](v39);
    Width = CGImageGetWidth(v7);
    Height = CGImageGetHeight(v7);
    BytesPerRow = CGImageGetBytesPerRow(v7);
    BitsPerComponent = CGImageGetBitsPerComponent(v7);
    v12 = BitsPerComponent;
    v13 = 1278226488;
    v14 = BytesPerRow / Width;
    if (BytesPerRow / Width == 1 && BitsPerComponent == 8)
      goto LABEL_32;
    if (v14 == 2 && BitsPerComponent == 16)
    {
      v13 = 1278226536;
    }
    else
    {
      if (v14 == 4 && BitsPerComponent == 8)
      {
        v22 = 16961;
      }
      else
      {
        if (v14 == 4 && BitsPerComponent == 16)
        {
          v13 = 843264104;
          goto LABEL_32;
        }
        if (v14 != 8 || BitsPerComponent != 16)
        {
          __VGLogSharedInstance();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109376;
            LODWORD(v43[0]) = v14;
            WORD2(v43[0]) = 1024;
            *(_DWORD *)((char *)v43 + 6) = v12;
            _os_log_impl(&dword_249CAD000, v20, OS_LOG_TYPE_ERROR, " Unsupported pixel format for UIImage (bytes per pixel: %d, bits per component: %d) ", buf, 0xEu);
          }
          v21 = 0;
LABEL_38:

          v37[2](v37);
          goto LABEL_39;
        }
        v22 = 26689;
      }
      v13 = v22 | 0x52470000u;
    }
LABEL_32:
    v40[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", Width);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = v23;
    v40[1] = *MEMORY[0x24BDD8D58];
    v35 = Height;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", Height);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v41[1] = v24;
    v40[2] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v13);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v41[2] = v25;
    v40[3] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", BytesPerRow / Width);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v41[3] = v26;
    v40[4] = *MEMORY[0x24BDD8D40];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", BytesPerRow);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v41[4] = v27;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v41, v40, 5);
    v20 = objc_claimAutoreleasedReturnValue();

    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v20);
    if (v21)
    {
      DataProvider = CGImageGetDataProvider(v7);
      v29 = CGDataProviderCopyData(DataProvider);
      BytePtr = CFDataGetBytePtr(v29);
      objc_msgSend(v21, "lockWithOptions:seed:", 0, 0);
      v31 = objc_retainAutorelease(v21);
      memcpy((void *)objc_msgSend(v31, "baseAddress"), BytePtr, v35 * Width * v14);
      objc_msgSend(v31, "unlockWithOptions:seed:", 0, 0);
      CFRelease(v29);
      v32 = v31;
    }
    else
    {
      __VGLogSharedInstance();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v33, OS_LOG_TYPE_ERROR, " Failed to create IOSurface ", buf, 2u);
      }

    }
    goto LABEL_38;
  }
  __VGLogSharedInstance();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v43[0] = v1;
    _os_log_impl(&dword_249CAD000, v6, OS_LOG_TYPE_ERROR, " Path does not exist: %@ ", buf, 0xCu);
  }
  v21 = 0;
LABEL_39:

  return v21;
}

void sub_249D270EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void (**a12)(void), void *a13)
{
  void *v13;

  a12[2]();

  _Unwind_Resume(a1);
}

void ___Z25createSurfaceFromFilePathP8NSString_block_invoke(uint64_t a1)
{
  CGImageRelease(*(CGImageRef *)(a1 + 32));
}

id vg_yuvSurfaceFromFilePath(NSString *a1, unsigned int a2)
{
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSString *v30;
  IOSurface *v31;
  unsigned int v32;
  _QWORD v33[5];
  _QWORD v34[5];
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[4];

  v39[2] = *MEMORY[0x24BDAC8D0];
  v30 = a1;
  createSurfaceFromFilePath(v30);
  v31 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  create32ARGBSurfaceFrom32RGBASurface(v31);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (_QWORD *)MEMORY[0x24BDD8D88];
  v37[0] = *MEMORY[0x24BDD8D88];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "width"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = a2;
  v38[0] = v5;
  v6 = (_QWORD *)MEMORY[0x24BDD8D78];
  v37[1] = *MEMORY[0x24BDD8D78];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "height"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (_QWORD *)MEMORY[0x24BDD8D68];
  v37[2] = *MEMORY[0x24BDD8D68];
  v38[1] = v7;
  v38[2] = &unk_251B34E38;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v38, v37, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v39[0] = v9;
  v35[0] = *v4;
  v10 = (void *)MEMORY[0x24BDD16E0];
  v11 = objc_msgSend(v3, "width");
  if (v11 >= 0)
    v12 = v11;
  else
    v12 = v11 + 1;
  objc_msgSend(v10, "numberWithInteger:", v12 >> 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v36[0] = v13;
  v35[1] = *v6;
  v14 = (void *)MEMORY[0x24BDD16E0];
  v15 = objc_msgSend(v3, "height");
  if (v15 >= 0)
    v16 = v15;
  else
    v16 = v15 + 1;
  objc_msgSend(v14, "numberWithInteger:", v16 >> 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v35[2] = *v8;
  v36[1] = v17;
  v36[2] = &unk_251B34E50;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v36, v35, 3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v39[1] = v18;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v39, 2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = objc_msgSend(v3, "width");
  v21 = MEMORY[0x24BD02730](*MEMORY[0x24BDD8E38], v20);
  v22 = objc_alloc(MEMORY[0x24BDD8DE8]);
  v33[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "width"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = v23;
  v33[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "height"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = v24;
  v33[2] = *MEMORY[0x24BDD8D60];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v32);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v34[2] = v25;
  v33[3] = *MEMORY[0x24BDD8D40];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v21);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v33[4] = *MEMORY[0x24BDD8D80];
  v34[3] = v26;
  v34[4] = v19;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v34, v33, 5);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = (void *)objc_msgSend(v22, "initWithProperties:", v27);

  objc_msgSend(v3, "vg_convertARGB8888To420Yp8_CbCr8:", v28);
  return v28;
}

void sub_249D2754C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

CVPixelBufferRef create32BGRABufferFrom32RGBAFilePath(NSString *a1)
{
  IOSurface *v1;
  IOSurface *v2;
  __IOSurface *v3;
  CVPixelBufferRef v4;
  CVPixelBufferRef pixelBufferOut;

  createSurfaceFromFilePath(a1);
  v1 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    create32BGRASurfaceFrom32RGBASurface(v1);
    v3 = (__IOSurface *)objc_claimAutoreleasedReturnValue();
    pixelBufferOut = 0;
    CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, 0, &pixelBufferOut);
    v4 = pixelBufferOut;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_249D276A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CVPixelBufferRef create32ARGBBufferFrom32RGBAFilePath(NSString *a1)
{
  IOSurface *v1;
  IOSurface *v2;
  __IOSurface *v3;
  CVPixelBufferRef v4;
  CVPixelBufferRef pixelBufferOut;

  createSurfaceFromFilePath(a1);
  v1 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    create32ARGBSurfaceFrom32RGBASurface(v1);
    v3 = (__IOSurface *)objc_claimAutoreleasedReturnValue();
    pixelBufferOut = 0;
    CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, 0, &pixelBufferOut);
    v4 = pixelBufferOut;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_249D27740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CVPixelBufferRef createYCbCrBufferFrom32RGBAFilePath(NSString *a1)
{
  NSString *v1;
  vg *v2;
  void (**v3)(_QWORD);
  __CVBuffer *v4;
  CVPixelBufferRef YCbCrFromARGB;
  _QWORD v7[5];

  v1 = a1;
  v2 = create32ARGBBufferFrom32RGBAFilePath(v1);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = ___Z35createYCbCrBufferFrom32RGBAFilePathP8NSString_block_invoke;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v2;
  v3 = (void (**)(_QWORD))MEMORY[0x24BD03294](v7);
  YCbCrFromARGB = vg::createYCbCrFromARGB(v2, v4);
  v3[2](v3);

  return YCbCrFromARGB;
}

void sub_249D277F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___Z35createYCbCrBufferFrom32RGBAFilePathP8NSString_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

__n128 getImageBBoxAboveThreshold(__CVBuffer *a1, float a2)
{
  NSObject *v4;
  int Width;
  int Height;
  int v7;
  size_t BytesPerRow;
  void (**v9)(_QWORD);
  float *BaseAddress;
  uint64_t v11;
  __int128 v12;
  int8x8_t v13;
  uint64_t i;
  int8x8_t v15;
  __int128 v17;
  _QWORD v18[5];
  uint8_t buf[16];

  VGLogVGMLUtilities();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetImageBBoxAboveThreshold", (const char *)&unk_249D51699, buf, 2u);
  }

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (Width < 1)
  {
    v17 = 0u;
  }
  else
  {
    v7 = Height;
    v17 = 0u;
    if (Height > 0)
    {
      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 3221225472;
      v18[2] = ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke_28;
      v18[3] = &__block_descriptor_40_e5_v8__0l;
      v18[4] = a1;
      v9 = (void (**)(_QWORD))MEMORY[0x24BD03294](v18);
      BaseAddress = (float *)CVPixelBufferGetBaseAddress(a1);
      v11 = 0;
      *(_QWORD *)&v12 = __PAIR64__(v7, Width);
      v13 = 0;
      do
      {
        for (i = 0; i != Width; ++i)
        {
          if (BaseAddress[i] > a2)
          {
            v15 = vbsl_s8((int8x8_t)vcgtd_s64((int)v12, i), (int8x8_t)__PAIR64__(DWORD1(v12), i), *(int8x8_t *)&v12);
            v13 = vbsl_s8((int8x8_t)vcgtd_s64(i, v13.i32[0]), (int8x8_t)__PAIR64__(v13.u32[1], i), v13);
            *(int8x8_t *)&v12 = vbsl_s8((int8x8_t)vcgtd_s64(v15.i32[1], v11), (int8x8_t)__PAIR64__(v11, v15.u32[0]), v15);
            if (v11 > v13.i32[1])
              v13.i32[1] = v11;
          }
        }
        ++v11;
        BaseAddress = (float *)((char *)BaseAddress + BytesPerRow);
      }
      while (v11 != v7);
      v17 = v12;
      v9[2](v9);

    }
  }
  ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke();
  return (__n128)v17;
}

void sub_249D27A34(_Unwind_Exception *a1)
{
  void *v1;

  ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGMLUtilities();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetImageBBoxAboveThreshold", (const char *)&unk_249D51699, v1, 2u);
  }

}

uint64_t ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke_28(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

CVPixelBufferRef createZeroPixelBuffer(size_t a1, size_t a2)
{
  const __CFDictionary *v4;
  CVPixelBufferRef v5;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v9;
  CVPixelBufferRef pixelBuffer;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  pixelBuffer = 0;
  v12 = *MEMORY[0x24BDC5668];
  v13[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (CVPixelBufferCreate(0, a2, a1, 0x20u, v4, &pixelBuffer))
  {
    v5 = 0;
  }
  else
  {
    Height = CVPixelBufferGetHeight(pixelBuffer);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    if (Height)
    {
      v9 = BaseAddress;
      do
      {
        if (BytesPerRow)
          bzero(v9, BytesPerRow);
        v9 += BytesPerRow;
        --Height;
      }
      while (Height);
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    v5 = pixelBuffer;
  }

  return v5;
}

void sub_249D27C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_249D27C98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL64_resizeCVPixelBufferTovImageBufferUsingNearestNeighborResamplingP10__CVBuffermmPv_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ___ZL18VGLogVGMLUtilitiesv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGMLUtilities");
  v1 = (void *)VGLogVGMLUtilities(void)::handle;
  VGLogVGMLUtilities(void)::handle = (uint64_t)v0;

}

void sub_249D27D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t std::unordered_map<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>>>>::unordered_map(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 12 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>> const&>(a1, a2, (uint64_t)a2);
      a2 = (_QWORD *)((char *)a2 + 12);
      v5 -= 12;
    }
    while (v5);
  }
  return a1;
}

void sub_249D27DB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>> const&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = *a2;
  v7 = __ROR8__(*a2, 32);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v6 && *((_DWORD *)v11 + 5) == HIDWORD(v6))
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = *(_QWORD *)a3;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a3 + 8);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v11 = *v21;
LABEL_42:
    *v21 = v11;
    goto LABEL_43;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_249D27FDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::find<std::pair<unsigned int,unsigned int>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = __ROR8__(*a2, 32);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  for (result = *v7; result; result = (uint64_t *)*result)
  {
    v9 = result[1];
    if (v4 == v9)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3 && *((_DWORD *)result + 5) == HIDWORD(v3))
        return result;
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v2)
          v9 %= *(_QWORD *)&v2;
      }
      else
      {
        v9 &= *(_QWORD *)&v2 - 1;
      }
      if (v9 != v6)
        return 0;
    }
  }
  return result;
}

uint64_t ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

uint64_t ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

BOOL vg::shared::MemoryFootprint::isValid(vg::shared::MemoryFootprint *this)
{
  return *(_QWORD *)this && *((_QWORD *)this + 1) != 0;
}

float vg::shared::MemoryFootprint::toMiB(vg::shared::MemoryFootprint *this)
{
  return (float)(unint64_t)this * 0.00000095367;
}

uint64_t vg::shared::GetMemoryFootprint(vg::shared *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  uint64_t v4;

  task_info_outCnt = 93;
  if (task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt))
    return 0;
  else
    return v4;
}

uint64_t vg::shared::MemoryUsage(vg::shared *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v4;
  __int128 v5;

  v4 = 0u;
  v5 = 0u;
  *(_OWORD *)task_info_out = 0u;
  task_info_outCnt = 12;
  task_info(*MEMORY[0x24BDAEC58], 0x14u, task_info_out, &task_info_outCnt);
  return *(_QWORD *)&task_info_out[2];
}

__uint64_t vg::shared::Time(vg::shared *this)
{
  return clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
}

IOSurface *vg::shared::remapImage(uint64_t a1)
{
  id v2;
  int v3;
  id v4;
  uint64_t v5;
  int32x2_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IOSurface *v19;
  OSType v20;
  IOSurface *v21;
  IOSurface *v22;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[6];
  int64x2_t v34;
  uint64_t v35;
  _QWORD v36[4];
  char v37;
  int32x2_t v38;
  uint64_t v39;
  _QWORD v40[4];
  _QWORD v41[4];
  uint8_t buf[4];
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = MTLCreateSystemDefaultDevice();
  v3 = objc_msgSend(*(id *)a1, "pixelFormat");
  if (v3 == 32)
  {
    create32BGRASurfaceFrom32ARGBSurface(*(IOSurface **)a1);
    v5 = 81;
    v4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_5:
    v31 = v4;
    vg::shared::createMetalTextureFromSurface(v2, v4, 1, CFSTR("remappedImage"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    vg::shared::createMetalTextureFromSurface(v2, *(void **)(a1 + 8), 1, CFSTR("remapLut"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = *(_QWORD *)(a1 + 16);
    v38 = vmovn_s64(*(int64x2_t *)(a1 + 32));
    v37 = *(_BYTE *)(a1 + 48);
    v30 = (void *)objc_msgSend(v2, "newCommandQueue");
    vg::shared::sharedShaderLibrary((vg::shared *)objc_msgSend(v30, "setLabel:", CFSTR("com.apple.visage.imageUndistortion.queue")));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "commandBuffer");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = vsub_s32(*(int32x2_t *)(a1 + 24), *(int32x2_t *)(a1 + 16));
    objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v5, v6.i32[0], v6.i32[1], 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setUsage:", 3);
    v7 = (void *)objc_msgSend(v2, "newTextureWithDescriptor:", v25);
    v36[3] = 0;
    v24 = (void *)objc_msgSend(v29, "newFunctionWithName:", CFSTR("remapImage"));
    v8 = (void *)objc_msgSend(v2, "newComputePipelineStateWithFunction:error:");
    v26 = 0;
    if (!v8)
    {
      __VGLogSharedInstance();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v43 = v26;
        _os_log_impl(&dword_249CAD000, v9, OS_LOG_TYPE_ERROR, " Failed to create image undistortion pipeline, error %@ ", buf, 0xCu);
      }
      v22 = 0;
      goto LABEL_17;
    }
    objc_msgSend(v32, "computeCommandEncoder");
    v9 = objc_claimAutoreleasedReturnValue();
    -[NSObject setTexture:atIndex:](v9, "setTexture:atIndex:", v28, 0);
    -[NSObject setTexture:atIndex:](v9, "setTexture:atIndex:", v27, 1);
    -[NSObject setBytes:length:atIndex:](v9, "setBytes:length:atIndex:", &v39, 8, 0);
    -[NSObject setBytes:length:atIndex:](v9, "setBytes:length:atIndex:", &v38, 8, 1);
    -[NSObject setBytes:length:atIndex:](v9, "setBytes:length:atIndex:", &v37, 1, 2);
    -[NSObject setTexture:atIndex:](v9, "setTexture:atIndex:", v7, 2);
    -[NSObject setComputePipelineState:](v9, "setComputePipelineState:", v8);
    v36[0] = objc_msgSend(v7, "width");
    v36[1] = objc_msgSend(v7, "height");
    v36[2] = 1;
    v34 = vdupq_n_s64(0x10uLL);
    v35 = 1;
    -[NSObject dispatchThreads:threadsPerThreadgroup:](v9, "dispatchThreads:threadsPerThreadgroup:", v36, &v34);
    -[NSObject endEncoding](v9, "endEncoding");
    objc_msgSend(v32, "commit");
    objc_msgSend(v32, "waitUntilCompleted");
    v10 = objc_alloc(MEMORY[0x24BDD8DE8]);
    v40[0] = *MEMORY[0x24BDD8D90];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v7, "width"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = v11;
    v40[1] = *MEMORY[0x24BDD8D58];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v7, "height"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v41[1] = v12;
    v40[2] = *MEMORY[0x24BDD8D60];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", objc_msgSend(v31, "pixelFormat"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v41[2] = v13;
    v40[3] = *MEMORY[0x24BDD8D38];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v31, "bytesPerElement"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v41[3] = v14;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v41, v40, 4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v10, "initWithProperties:", v15);

    objc_msgSend(v16, "lockWithOptions:seed:", 0, 0);
    v17 = objc_msgSend(v7, "width");
    v18 = objc_msgSend(v7, "height");
    v19 = objc_retainAutorelease(v16);
    memset(v33, 0, 24);
    v33[3] = v17;
    v33[4] = v18;
    v33[5] = 1;
    objc_msgSend(v7, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", -[IOSurface baseAddress](v19, "baseAddress"), -[IOSurface bytesPerRow](v19, "bytesPerRow"), v33, 0);
    -[IOSurface unlockWithOptions:seed:](v19, "unlockWithOptions:seed:", 0, 0);
    v20 = -[IOSurface pixelFormat](v19, "pixelFormat");
    if (v20 == 1111970369)
    {
      create32ARGBSurfaceFrom32BGRASurface(v19);
      v21 = (IOSurface *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v20 != 1278226534)
      {
        v22 = 0;
        goto LABEL_16;
      }
      v21 = v19;
    }
    v22 = v21;
LABEL_16:

LABEL_17:
    goto LABEL_18;
  }
  if (v3 == 1278226534)
  {
    v4 = *(id *)a1;
    v5 = 55;
    goto LABEL_5;
  }
  v22 = 0;
LABEL_18:

  return v22;
}

void sub_249D28988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

IOSurface *vg::shared::inverseRemapLut(vg::shared *this, IOSurface *a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  _DWORD *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  int v48;
  id v49;
  unsigned int v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  NSObject *v66;
  NSObject *v67;
  NSObject *v68;
  id v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  IOSurface *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  id v100;
  char *v101;
  _DWORD *v102;
  uint64_t v103;
  char *v104;
  _DWORD *v105;
  NSObject *v106;
  NSObject *p_super;
  NSObject *v108;
  NSObject *v109;
  void *v111;
  void *v112;
  void *v113;
  id v114;
  void *v115;
  NSObject *v116;
  void *v117;
  NSObject *v118;
  void *v119;
  unint64_t v120;
  vg::shared *v121;
  int v122;
  void *v123;
  int v124;
  vg::shared *v125;
  int v126;
  NSObject *v127;
  int v128;
  IOSurface *v129;
  id v130[5];
  unint64_t v131;
  id v132;
  void *v133[2];
  void *__p[2];
  __int128 v135;
  uint8_t buf[4];
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD v141[4];
  _QWORD v142[4];
  _QWORD v143[4];
  _QWORD v144[6];

  v4 = a2;
  v144[4] = *MEMORY[0x24BDAC8D0];
  v121 = this;
  v128 = -[vg::shared width](v121, "width");
  v5 = -[vg::shared height](v121, "height");
  v120 = __PAIR64__(a3, v4);
  if (v5 >= 0)
    v6 = v5;
  else
    v6 = v5 + 1;
  *(_OWORD *)__p = 0u;
  v135 = 0u;
  v7 = v6 >> 1;
  *(_OWORD *)v133 = 0u;
  if (!(_DWORD)v7)
  {
    v122 = -1;
LABEL_29:
    v124 = 0;
    do
    {
      if (v128 != 1)
      {
        v21 = 0;
        v22 = v124 * v128;
        v23 = (_DWORD *)v135;
        do
        {
          v24 = v21 + v22;
          v25 = v21 + v22 + v128;
          v26 = v25 + 1;
          if ((unint64_t)v23 >= *((_QWORD *)&v135 + 1))
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)__p[1]) >> 2);
            v29 = v28 + 1;
            if (v28 + 1 > 0x1555555555555555)
              std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v135 + 1) - (unint64_t)__p[1]) >> 2) > v29)
              v29 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v135 + 1) - (unint64_t)__p[1]) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v135 + 1) - (unint64_t)__p[1]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v30 = 0x1555555555555555;
            else
              v30 = v29;
            if (v30)
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v135 + 8, v30);
            else
              v31 = 0;
            v32 = &v31[12 * v28];
            *(_DWORD *)v32 = v24;
            *((_DWORD *)v32 + 1) = v25;
            *((_DWORD *)v32 + 2) = v26;
            v34 = __p[1];
            v33 = (_DWORD *)v135;
            v35 = v32;
            if ((void *)v135 != __p[1])
            {
              do
              {
                v36 = *(_QWORD *)(v33 - 3);
                v33 -= 3;
                v37 = v33[2];
                *(_QWORD *)(v35 - 12) = v36;
                v35 -= 12;
                *((_DWORD *)v35 + 2) = v37;
              }
              while (v33 != v34);
              v33 = __p[1];
            }
            v27 = v32 + 12;
            __p[1] = v35;
            *(_QWORD *)&v135 = v32 + 12;
            *((_QWORD *)&v135 + 1) = &v31[12 * v30];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *v23 = v24;
            v23[1] = v25;
            v27 = v23 + 3;
            v23[2] = v26;
          }
          *(_QWORD *)&v135 = v27;
          v38 = v24 + 1;
          if ((unint64_t)v27 >= *((_QWORD *)&v135 + 1))
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)__p[1]) >> 2);
            v40 = v39 + 1;
            if (v39 + 1 > 0x1555555555555555)
              std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v135 + 1) - (unint64_t)__p[1]) >> 2) > v40)
              v40 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v135 + 1) - (unint64_t)__p[1]) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v135 + 1) - (unint64_t)__p[1]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v41 = 0x1555555555555555;
            else
              v41 = v40;
            if (v41)
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v135 + 8, v41);
            else
              v42 = 0;
            v43 = &v42[12 * v39];
            *(_DWORD *)v43 = v24;
            *((_DWORD *)v43 + 1) = v26;
            *((_DWORD *)v43 + 2) = v38;
            v45 = __p[1];
            v44 = (_DWORD *)v135;
            v46 = v43;
            if ((void *)v135 != __p[1])
            {
              do
              {
                v47 = *(_QWORD *)(v44 - 3);
                v44 -= 3;
                v48 = v44[2];
                *(_QWORD *)(v46 - 12) = v47;
                v46 -= 12;
                *((_DWORD *)v46 + 2) = v48;
              }
              while (v44 != v45);
              v44 = __p[1];
            }
            v23 = v43 + 12;
            __p[1] = v46;
            *(_QWORD *)&v135 = v43 + 12;
            *((_QWORD *)&v135 + 1) = &v42[12 * v41];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *v27 = v24;
            v27[1] = v26;
            v23 = v27 + 3;
            v27[2] = v38;
          }
          *(_QWORD *)&v135 = v23;
          ++v21;
        }
        while (v21 != v128 - 1);
      }
      ++v124;
    }
    while (v124 != v122);
    goto LABEL_66;
  }
  v8 = 0;
  v9 = 0;
  v126 = v7;
  v10 = v7;
  do
  {
    if (v128)
    {
      v11 = 0;
      v12 = v9 << 32;
      do
      {
        if (v8 >= __p[0])
        {
          v13 = (v8 - (char *)v133[0]) >> 3;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v14 = ((char *)__p[0] - (char *)v133[0]) >> 2;
          if (v14 <= v13 + 1)
            v14 = v13 + 1;
          if ((void *)((char *)__p[0] - (char *)v133[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)__p, v15);
          else
            v16 = 0;
          v17 = &v16[8 * v13];
          *(_QWORD *)v17 = v11 | v12;
          v8 = v17 + 8;
          v19 = (char *)v133[0];
          v18 = (char *)v133[1];
          if (v133[1] != v133[0])
          {
            do
            {
              v20 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *((_QWORD *)v17 - 1) = v20;
              v17 -= 8;
            }
            while (v18 != v19);
            v18 = (char *)v133[0];
          }
          v133[0] = v17;
          v133[1] = v8;
          __p[0] = &v16[8 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v8 = v11 | v12;
          v8 += 8;
        }
        v133[1] = v8;
        ++v11;
      }
      while (v11 != v128);
    }
    ++v9;
  }
  while (v9 != v10);
  v122 = v126 - 1;
  if (v126 != 1)
    goto LABEL_29;
LABEL_66:
  v49 = MTLCreateSystemDefaultDevice();
  v50 = HIDWORD(v120);
  v51 = (void *)objc_opt_new();
  v52 = (void *)objc_msgSend(v49, "newBufferWithBytes:length:options:", v133[0], (char *)v133[1] - (char *)v133[0], 0);
  v53 = v52;
  if (v52)
  {
    objc_msgSend(v52, "setLabel:", CFSTR("position"));
    objc_msgSend(v51, "layouts");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "objectAtIndexedSubscript:", 0);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "setStride:", 8);

    objc_msgSend(v51, "layouts");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "objectAtIndexedSubscript:", 0);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "setStepRate:", 1);

    objc_msgSend(v51, "layouts");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "objectAtIndexedSubscript:", 0);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "setStepFunction:", 1);

    objc_msgSend(v51, "attributes");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "objectAtIndexedSubscript:", 0);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "setFormat:", 37);

    objc_msgSend(v51, "attributes");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "objectAtIndexedSubscript:", 0);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "setOffset:", 0);

    objc_msgSend(v51, "attributes");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "objectAtIndexedSubscript:", 0);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "setBufferIndex:", 0);

    v66 = objc_msgSend(v49, "newBufferWithBytes:length:options:", __p[1], (_QWORD)v135 - (unint64_t)__p[1], 0);
    v67 = v66;
    if (v66)
    {
      -[NSObject setLabel:](v66, "setLabel:", CFSTR("index"));
      vg::shared::createMetalTextureFromSurface(v49, v121, 1, CFSTR("lut"));
      v68 = objc_claimAutoreleasedReturnValue();
      if (v68)
      {
        v69 = objc_alloc(MEMORY[0x24BDD8DE8]);
        v143[0] = *MEMORY[0x24BDD8D90];
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v120);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v144[0] = v70;
        v143[1] = *MEMORY[0x24BDD8D58];
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", HIDWORD(v120));
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        v72 = *MEMORY[0x24BDD8D60];
        v144[1] = v71;
        v144[2] = &unk_251B34E68;
        v73 = *MEMORY[0x24BDD8D38];
        v143[2] = v72;
        v143[3] = v73;
        v144[3] = &unk_251B34E80;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v144, v143, 4);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v129 = (IOSurface *)objc_msgSend(v69, "initWithProperties:", v74);

        vg::shared::createMetalTextureFromSurface(v49, v129, 4, CFSTR("inverseRemapLut"));
        v125 = (vg::shared *)objc_claimAutoreleasedReturnValue();
        vg::shared::sharedShaderLibrary(v125);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v76 = v75;
        v119 = v75;
        if (v75)
        {
          v127 = objc_msgSend(v75, "newFunctionWithName:", CFSTR("inverseRemapLutVertexShader"));
          v123 = (void *)objc_msgSend(v76, "newFunctionWithName:", CFSTR("inverseRemapLutFragmentShader"));
          if (v127 && v123)
          {
            v116 = objc_opt_new();
            -[NSObject setVertexFunction:](v116, "setVertexFunction:", v127);
            -[NSObject setFragmentFunction:](v116, "setFragmentFunction:", v123);
            -[NSObject setVertexDescriptor:](v116, "setVertexDescriptor:", v51);
            v77 = -[vg::shared pixelFormat](v125, "pixelFormat");
            -[NSObject colorAttachments](v116, "colorAttachments");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v78, "objectAtIndexedSubscript:", 0);
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v79, "setPixelFormat:", v77);

            v132 = 0;
            v80 = objc_msgSend(v49, "newRenderPipelineStateWithDescriptor:error:", v116, &v132);
            v114 = v132;
            v115 = (void *)v80;
            if (v80)
            {
              objc_msgSend(MEMORY[0x24BDDD690], "renderPassDescriptor");
              v118 = objc_claimAutoreleasedReturnValue();
              -[NSObject colorAttachments](v118, "colorAttachments");
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v81, "objectAtIndexedSubscript:", 0);
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v82, "setTexture:", v125);

              -[NSObject colorAttachments](v118, "colorAttachments");
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "objectAtIndexedSubscript:", 0);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v84, "setLoadAction:", 2);

              -[NSObject colorAttachments](v118, "colorAttachments");
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v85, "objectAtIndexedSubscript:", 0);
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v86, "setStoreAction:", 1);

              -[NSObject colorAttachments](v118, "colorAttachments");
              v87 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v87, "objectAtIndexedSubscript:", 0);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v88, "setClearColor:", 0.0, 0.0, 0.0, 1.0);

              v112 = (void *)objc_msgSend(v49, "newCommandQueue");
              objc_msgSend(v112, "commandBuffer");
              v113 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v113, "renderCommandEncoderWithDescriptor:", v118);
              v117 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v117, "setRenderPipelineState:", v115);
              v131 = v120;
              objc_msgSend(v117, "setVertexBytes:length:atIndex:", &v131, 8, 1);
              objc_msgSend(v117, "setVertexBuffer:offset:atIndex:", v53, 0, 0);
              objc_msgSend(v117, "setVertexTexture:atIndex:", v68, 0);
              objc_msgSend(v117, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:", 3, (uint64_t)(v135 - (unint64_t)__p[1]) >> 2, 1, v67, 0, 1);
              objc_msgSend(v117, "endEncoding");
              objc_msgSend(v113, "commit");
              objc_msgSend(v113, "waitUntilCompleted");
              v89 = objc_alloc(MEMORY[0x24BDD8DE8]);
              v141[0] = *MEMORY[0x24BDD8D90];
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v120);
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              v142[0] = v111;
              v141[1] = *MEMORY[0x24BDD8D58];
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (2 * HIDWORD(v120)));
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              v91 = *MEMORY[0x24BDD8D60];
              v142[1] = v90;
              v142[2] = &unk_251B34E98;
              v92 = *MEMORY[0x24BDD8D38];
              v141[2] = v91;
              v141[3] = v92;
              v142[3] = &unk_251B34EB0;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v142, v141, 4);
              v93 = (void *)objc_claimAutoreleasedReturnValue();
              v94 = (IOSurface *)objc_msgSend(v89, "initWithProperties:", v93);

              vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, v129, 1);
              vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v130, v94, 0);
              if (HIDWORD(v120))
              {
                v95 = 0;
                v96 = 0;
                v97 = v139;
                v98 = v140;
                v99 = (char *)v130[2];
                v100 = v130[3];
                v101 = (char *)v130[4];
                v102 = (_DWORD *)(v138 + 4);
                do
                {
                  if ((_DWORD)v120)
                  {
                    v103 = v120;
                    v104 = v99;
                    v105 = v102;
                    do
                    {
                      *(_DWORD *)&v104[v95] = *(v105 - 1);
                      *(_DWORD *)&v104[(_QWORD)v100 * v50] = *v105;
                      v105 = (_DWORD *)((char *)v105 + v98);
                      v104 = &v101[(_QWORD)v104];
                      --v103;
                    }
                    while (v103);
                  }
                  ++v96;
                  v102 = (_DWORD *)((char *)v102 + v97);
                  ++v50;
                  v95 += (uint64_t)v100;
                }
                while (v96 != HIDWORD(v120));
              }
              vg::IOSurfaceData::~IOSurfaceData(v130);
              vg::IOSurfaceData::~IOSurfaceData((id *)buf);

              v106 = v118;
            }
            else
            {
              __VGLogSharedInstance();
              v106 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v137 = v114;
                _os_log_impl(&dword_249CAD000, v106, OS_LOG_TYPE_ERROR, " Failed to create render pipeline state: %@ ", buf, 0xCu);
              }
              v94 = 0;
            }

            v109 = v116;
          }
          else
          {
            __VGLogSharedInstance();
            v109 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_249CAD000, v109, OS_LOG_TYPE_ERROR, " Failed to create inverse remap lut shader ", buf, 2u);
            }
            v94 = 0;
          }

        }
        else
        {
          __VGLogSharedInstance();
          v108 = objc_claimAutoreleasedReturnValue();
          v127 = v108;
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_249CAD000, v108, OS_LOG_TYPE_ERROR, " failed to load metal library. ", buf, 2u);
          }
          v94 = 0;
        }

        p_super = &v129->super;
      }
      else
      {
        __VGLogSharedInstance();
        p_super = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_249CAD000, p_super, OS_LOG_TYPE_ERROR, " failed to create input remap lut texture. ", buf, 2u);
        }
        v94 = 0;
      }

    }
    else
    {
      __VGLogSharedInstance();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v68, OS_LOG_TYPE_ERROR, " failed to create index buffer. ", buf, 2u);
      }
      v94 = 0;
    }

  }
  else
  {
    __VGLogSharedInstance();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_249CAD000, v67, OS_LOG_TYPE_ERROR, " failed to create vertex buffer. ", buf, 2u);
    }
    v94 = 0;
  }

  if (__p[1])
  {
    *(void **)&v135 = __p[1];
    operator delete(__p[1]);
  }
  if (v133[0])
  {
    v133[1] = v133[0];
    operator delete(v133[0]);
  }

  return v94;
}

void sub_249D297EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  vg::shared::detail::GridMesh::~GridMesh((vg::shared::detail::GridMesh *)&a31);
  _Unwind_Resume(a1);
}

void vg::shared::detail::GridMesh::~GridMesh(vg::shared::detail::GridMesh *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t vg::common::dumpDebugObject(vg::common *this, objc_object *a2, NSString *a3, NSString *a4)
{
  int v4;
  vg::common *v7;
  objc_object *v8;
  NSString *v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  id v17;
  uint8_t buf[4];
  NSObject *v19;
  uint64_t v20;

  v4 = (int)a4;
  v20 = *MEMORY[0x24BDAC8D0];
  v7 = this;
  v8 = a2;
  v9 = a3;
  v17 = 0;
  objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v7, 1, &v17);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v17;
  if (v10)
  {
    -[objc_object stringByAppendingString:](v8, "stringByAppendingString:", CFSTR(".plist"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSString stringByAppendingPathComponent:](v9, "stringByAppendingPathComponent:", v12);
    v13 = objc_claimAutoreleasedReturnValue();

    v14 = objc_msgSend(v10, "writeToFile:atomically:", v13, 0);
    if ((v14 & 1) == 0)
    {
      VGLogSharedDebugDataUtilities();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        vg::common::dumpDebugObject();
      goto LABEL_11;
    }
    if (v4)
    {
      VGLogSharedDebugDataUtilities();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v13;
        _os_log_impl(&dword_249CAD000, v15, OS_LOG_TYPE_INFO, "Wrote %@", buf, 0xCu);
      }
LABEL_11:

    }
  }
  else
  {
    VGLogSharedDebugDataUtilities();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      vg::common::dumpDebugObject();
    v14 = 0;
  }

  return v14;
}

void sub_249D29CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id VGLogSharedDebugDataUtilities(void)
{
  if (VGLogSharedDebugDataUtilities(void)::onceToken != -1)
    dispatch_once(&VGLogSharedDebugDataUtilities(void)::onceToken, &__block_literal_global_8);
  return (id)VGLogSharedDebugDataUtilities(void)::handle;
}

uint64_t vg::common::dumpDebugObject(vg::common *this, objc_object *a2, NSString *a3)
{
  vg::common *v5;
  objc_object *v6;
  objc_class *v7;
  objc_object *v8;
  uint64_t v9;

  v5 = this;
  v6 = a2;
  v7 = (objc_class *)objc_opt_class();
  NSStringFromClass(v7);
  v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v9 = vg::common::dumpDebugObject(v5, v8, (NSString *)&v6->isa, a3);

  return v9;
}

void sub_249D29DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id vg::common::deserializedObjectFromObject(vg::common *this, objc_object *a2)
{
  vg::common *v2;
  void *v3;
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  id v10;
  id v11;

  v2 = this;
  v11 = 0;
  objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, &v11);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v11;
  if (v3)
  {
    v10 = 0;
    objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v3, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v10;
    if (v5)
    {
      v7 = v5;
    }
    else
    {
      VGLogSharedDebugDataUtilities();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        vg::common::deserializedObjectFromObject();

    }
  }
  else
  {
    VGLogSharedDebugDataUtilities();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      vg::common::deserializedObjectFromObject();
    v5 = 0;
  }

  return v5;
}

void sub_249D29F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL29VGLogSharedDebugDataUtilitiesv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "SharedDebugDataUtilities");
  v1 = (void *)VGLogSharedDebugDataUtilities(void)::handle;
  VGLogSharedDebugDataUtilities(void)::handle = (uint64_t)v0;

}

void sub_249D29F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void vg::common::dumpDebugObject()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_2_0();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl(&dword_249CAD000, v1, OS_LOG_TYPE_ERROR, "Failed to serialize object %@: %@", v2, 0x16u);
  OUTLINED_FUNCTION_6();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_8(&dword_249CAD000, v0, v1, "Failed to dump object file %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

void vg::common::deserializedObjectFromObject()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_8(&dword_249CAD000, v0, v1, "Failed to archive object: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_8(&dword_249CAD000, v0, v1, "Failed to unarchive object: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_6();
}

id vg::shared::getPersonSegmentationMapFromVision(void *a1, uint64_t a2)
{
  IOSurface *v3;
  CVPixelBufferRef CVPixelBufferFromIOSurface;
  CVPixelBufferRef v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  __CVBuffer *v14;
  IOSurface *v15;
  void *v16;
  NSObject *v17;
  _QWORD v19[5];
  uint8_t buf[16];
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v3);
  v5 = CVPixelBufferFromIOSurface;
  if (CVPixelBufferFromIOSurface)
  {
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = ___ZN2vg6shared34getPersonSegmentationMapFromVisionEP9IOSurfacePU15__autoreleasingP7NSError_block_invoke;
    v19[3] = &__block_descriptor_40_e5_v8__0l;
    v19[4] = CVPixelBufferFromIOSurface;
    v6 = MEMORY[0x24BD03294](v19);
    v7 = objc_alloc(MEMORY[0x24BDF9C28]);
    v8 = (void *)objc_msgSend(v7, "initWithCVPixelBuffer:options:", v5, MEMORY[0x24BDBD1B8]);
    if (v8)
    {
      v9 = objc_opt_new();
      -[NSObject setOutputPixelFormat:](v9, "setOutputPixelFormat:", 1278226534);
      -[NSObject setQualityLevel:](v9, "setQualityLevel:", 1);
      v21[0] = v9;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v21, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v8, "performRequests:error:", v10, a2);

      if ((v11 & 1) != 0)
      {
        -[NSObject results](v9, "results");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "objectAtIndexedSubscript:", 0);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (__CVBuffer *)objc_msgSend(v13, "pixelBuffer");

        if (v14)
        {
          CVPixelBufferGetIOSurface(v14);
          v15 = (IOSurface *)objc_claimAutoreleasedReturnValue();
          if (v15)
          {
            resizeSurface(v15, -[IOSurface width](v3, "width"), -[IOSurface height](v3, "height"));
            v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_19:

            goto LABEL_20;
          }
          __VGLogSharedInstance();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_249CAD000, v17, OS_LOG_TYPE_ERROR, " Person segmentation output buffer not iosurface backed ", buf, 2u);
          }

        }
        else
        {
          __VGLogSharedInstance();
          v15 = (IOSurface *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_249CAD000, &v15->super, OS_LOG_TYPE_ERROR, " Failed to get output pixel buffer from person segmentation results ", buf, 2u);
          }
        }
        v16 = 0;
        goto LABEL_19;
      }
    }
    else
    {
      __VGLogSharedInstance();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_249CAD000, v9, OS_LOG_TYPE_ERROR, " Vision request handler failed to instantiate ", buf, 2u);
      }
    }
    v16 = 0;
LABEL_20:

    (*(void (**)(uint64_t))(v6 + 16))(v6);
    goto LABEL_21;
  }
  __VGLogSharedInstance();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_249CAD000, (os_log_t)v6, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
  }
  v16 = 0;
LABEL_21:

  return v16;
}

void sub_249D2A448(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void *v3;
  void *v4;
  void *v5;

  v2[2](v2);
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared34getPersonSegmentationMapFromVisionEP9IOSurfacePU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void sub_249D2AA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D2AAA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2AB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D2ABA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2AC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D2ACB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id subkey(NSString *a1, objc_selector *a2)
{
  NSString *v3;
  void *v4;
  void *v5;

  v3 = a1;
  NSStringFromSelector((SEL)a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSString stringByAppendingPathExtension:](v3, "stringByAppendingPathExtension:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_249D2AF68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2B054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2B47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_249D2B680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_249D2B7C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2B960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_249D2BB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2BBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_249D2BCB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D2BFE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_249D2C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_249D2C3AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2C470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_249D2C830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_249D2C95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void vg::ObjIO::read(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  void **v10;
  const char *v11;
  size_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  int v31;
  std::string::size_type v32;
  std::string::size_type v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  int v43;
  std::string::size_type v44;
  std::string::size_type v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  int v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  std::string::size_type v64;
  int v65;
  int v66;
  std::string::size_type v67;
  std::string::size_type v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  int v75;
  std::string::size_type v76;
  std::string::size_type v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  unint64_t v86;
  int v87;
  std::string::size_type v88;
  std::string::size_type v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int64_t v103;
  int v104;
  char *v105;
  int v106;
  uint64_t v107;
  std::string::size_type v108;
  float v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  std::string::size_type v113;
  float v114;
  _QWORD *v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  _DWORD *v119;
  void *v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string::size_type v123;
  int v124;
  uint64_t v125;
  std::string::size_type v126;
  float v127;
  _QWORD *v128;
  uint64_t v129;
  std::string::size_type v130;
  std::string::size_type v131;
  _DWORD *v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  float *v139;
  uint64_t v140;
  std::locale *v141;
  double v142;
  float v143;
  _QWORD *v144;
  uint64_t v145;
  void *v146;
  char *v147;
  int v148;
  std::string::size_type v149;
  std::string::size_type v150;
  _DWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  int v158;
  _DWORD *v159;
  std::string::size_type v160;
  std::string::size_type v161;
  _DWORD *v162;
  void *v163;
  uint64_t v164;
  unint64_t v165;
  int64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  int v170;
  std::string::size_type v171;
  _DWORD *v172;
  _DWORD *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int v180;
  std::string::size_type v181;
  std::string::size_type v182;
  _DWORD *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  int v190;
  _DWORD *v191;
  uint64_t v192;
  _DWORD *v193;
  void *v194;
  std::string::size_type v195;
  std::string::size_type v196;
  std::string::size_type v197;
  int v198;
  std::string::size_type v199;
  std::string::size_type v200;
  _DWORD *v201;
  void *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  int v209;
  std::string::size_type v210;
  std::string::size_type v211;
  _DWORD *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int v219;
  _DWORD *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  int v231;
  std::string::size_type v232;
  char *v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  int v241;
  std::string::size_type v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  int v251;
  _DWORD *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  int v259;
  char *v260;
  std::string::size_type v261;
  char *v262;
  char *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  int v270;
  std::string::size_type v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  int v280;
  _DWORD *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  int v292;
  std::string::size_type v293;
  char *v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  int v302;
  std::string::size_type v303;
  char *v304;
  char *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char *v310;
  char *v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  char **v328;
  char *v329;
  uint64_t v330;
  unsigned int v331;
  char **v332;
  char *v333;
  uint64_t v334;
  uint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  void *v338;
  std::string *v339;
  std::string::size_type size;
  std::string *v341;
  __int128 v342;
  __n128 v343;
  void *v344;
  __n128 v345;
  void *v346;
  __n128 v347;
  void *exception;
  __n128 v349;
  void *v350;
  __n128 v351;
  void *v352;
  std::string *v353;
  std::string::size_type v354;
  std::string *v355;
  __int128 v356;
  __n128 v357;
  void *v358;
  __n128 v359;
  uint64_t v360;
  int v361;
  void *v362;
  char *v363;
  char *v364;
  void *v365;
  char *v366;
  char *v367;
  void *v368;
  char *v369;
  char *v370;
  std::string v371;
  std::string v372;
  int *p_val;
  int v374;
  std::string v375;
  std::string v376;
  std::string v377;
  std::string v378;
  std::string __p;
  void *v380[2];
  uint64_t v381;
  int __val;
  std::vector<unsigned int> v383;
  __int128 v384;
  unint64_t v385;
  __int128 v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;
  __int128 v392;
  unint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  unint64_t v396;
  __int128 v397;
  unint64_t v398;
  std::locale v399;
  int v400[2];
  uint64_t v401;
  char v402[232];
  char __s[8];
  int v404[2];
  uint64_t v405;

  v405 = *MEMORY[0x24BDAC8D0];
  v397 = 0uLL;
  v398 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v397, 0x3E8uLL);
  v395 = 0;
  v394 = 0;
  v396 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v394, 0x3E8uLL);
  v392 = 0uLL;
  v393 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v397, 0x3E8uLL);
  v390 = 0uLL;
  v391 = 0;
  std::vector<std::vector<unsigned int>>::reserve((uint64_t *)&v390, 0x3E8uLL);
  v388 = 0uLL;
  v389 = 0;
  std::vector<std::vector<unsigned int>>::reserve((uint64_t *)&v388, 0x3E8uLL);
  v386 = 0uLL;
  v387 = 0;
  std::vector<std::vector<unsigned int>>::reserve((uint64_t *)&v386, 0x3E8uLL);
  v360 = a3;
  v384 = 0uLL;
  v385 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v384, 0x3E8uLL);
  memset(&v383, 0, sizeof(v383));
  __val = 1;
  v380[0] = 0;
  v380[1] = 0;
  v381 = 0;
  v361 = -1;
  v6 = -1;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v7 = std::locale::use_facet(&v399, MEMORY[0x24BEDB350]);
    v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v399);
    v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)v380, v8);
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      break;
    if (v381 >= 0)
      v10 = v380;
    else
      v10 = (void **)v380[0];
    if (sscanf((const char *)v10, "%3s", __s) != 1)
      goto LABEL_232;
    v11 = (char *)v10 + strlen(__s);
    v12 = strlen(__s);
    if (v12 == 1 && __s[0] == 118)
    {
      v13 = sscanf(v11, "%lf %lf %lf %lf %lf %lf\n", &v399, v400, &v401, v402, &v402[8], &v402[16]);
      v14 = v13;
      if (v6 == -1)
      {
        if (v13 != 3 && v13 != 6)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v378, v14);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Vertex positions should have either 3 or 6(with rgb f32 color) components. Invalid obj data. [ComponentCount = ", &v378, &__p);
          v349 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("].", &__p, &v372);
          MEMORY[0x24BD02AE4](exception, &v372, v349);
          __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        v6 = v13;
      }
      else if (v13 != v6)
      {
        v338 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v376, __val);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Vertex on line ", &v376, &v377);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" should have ", &v377, &v378);
        std::to_string(&v375, v6);
        if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v339 = &v375;
        else
          v339 = (std::string *)v375.__r_.__value_.__r.__words[0];
        if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v375.__r_.__value_.__r.__words[2]);
        else
          size = v375.__r_.__value_.__l.__size_;
        v341 = std::string::append(&v378, (const std::string::value_type *)v339, size);
        v342 = *(_OWORD *)&v341->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v341->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v342;
        v341->__r_.__value_.__l.__size_ = 0;
        v341->__r_.__value_.__r.__words[2] = 0;
        v341->__r_.__value_.__r.__words[0] = 0;
        v343 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coordinates", &__p, &v372);
        MEMORY[0x24BD02AE4](v338, &v372, v343);
        __cxa_throw(v338, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      std::vector<float>::vector(&v372, 3uLL, &__p);
      v107 = 0;
      v108 = v372.__r_.__value_.__r.__words[0];
      do
      {
        v109 = *((double *)&v399.__locale_ + v107);
        *(float *)(v108 + 4 * v107++) = v109;
      }
      while (v107 != 3);
      v110 = (_QWORD *)*((_QWORD *)&v397 + 1);
      if (*((_QWORD *)&v397 + 1) >= v398)
      {
        v111 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v397, (uint64_t)&v372);
      }
      else
      {
        **((_QWORD **)&v397 + 1) = 0;
        v110[1] = 0;
        v110[2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v110, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_, (uint64_t)(v372.__r_.__value_.__l.__size_ - v372.__r_.__value_.__r.__words[0]) >> 2);
        v111 = (uint64_t)(v110 + 3);
      }
      *((_QWORD *)&v397 + 1) = v111;
      if (v6 == 6)
      {
        LODWORD(v378.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::vector(&__p, 3uLL, &v378);
        v112 = 0;
        v113 = __p.__r_.__value_.__r.__words[0];
        do
        {
          v114 = *(double *)&v402[8 * v112];
          *(float *)(v113 + 4 * v112++) = v114;
        }
        while (v112 != 3);
        v115 = (_QWORD *)*((_QWORD *)&v384 + 1);
        if (*((_QWORD *)&v384 + 1) >= v385)
        {
          v116 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v384, (uint64_t)&__p);
        }
        else
        {
          **((_QWORD **)&v384 + 1) = 0;
          v115[1] = 0;
          v115[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v115, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
          v116 = (uint64_t)(v115 + 3);
        }
        *((_QWORD *)&v384 + 1) = v116;
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
LABEL_229:
      v146 = (void *)v372.__r_.__value_.__r.__words[0];
      if (v372.__r_.__value_.__r.__words[0])
      {
        v372.__r_.__value_.__l.__size_ = v372.__r_.__value_.__r.__words[0];
        goto LABEL_231;
      }
      goto LABEL_232;
    }
    if (v12 == 2)
    {
      if (*(unsigned __int16 *)__s == 28278)
      {
        if (sscanf(v11, "%lf %lf %lf\n", &v399, v400, &v401) != 3)
        {
          v350 = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v378, __val);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Normal on line ", &v378, &__p);
          v351 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" should have 3 coordinates", &__p, &v372);
          MEMORY[0x24BD02AE4](v350, &v372, v351);
          __cxa_throw(v350, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        std::vector<float>::vector(&v372, 3uLL);
        v125 = 0;
        v126 = v372.__r_.__value_.__r.__words[0];
        do
        {
          v127 = *((double *)&v399.__locale_ + v125);
          *(float *)(v126 + 4 * v125++) = v127;
        }
        while (v125 != 3);
        v128 = (_QWORD *)*((_QWORD *)&v392 + 1);
        if (*((_QWORD *)&v392 + 1) >= v393)
        {
          v129 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v392, (uint64_t)&v372);
        }
        else
        {
          **((_QWORD **)&v392 + 1) = 0;
          v128[1] = 0;
          v128[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v128, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_, (uint64_t)(v372.__r_.__value_.__l.__size_ - v372.__r_.__value_.__r.__words[0]) >> 2);
          v129 = (uint64_t)(v128 + 3);
        }
        *((_QWORD *)&v392 + 1) = v129;
      }
      else
      {
        if (*(unsigned __int16 *)__s != 29814)
          goto LABEL_232;
        v15 = sscanf(v11, "%lf %lf %lf\n", &v399, v400, &v401);
        v16 = v15;
        if (v361 == -1)
        {
          if ((v15 - 4) <= 0xFFFFFFFD)
          {
            v358 = __cxa_allocate_exception(0x10uLL);
            std::to_string(&v378, v16);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Texture coordinates should have either 2 or 3 components. Invalid obj data. [ComponentCount = ", &v378, &__p);
            v359 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("].", &__p, &v372);
            MEMORY[0x24BD02AE4](v358, &v372, v359);
            __cxa_throw(v358, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
          }
          v361 = v15;
        }
        else if (v15 != v361)
        {
          v352 = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v376, __val);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Texture Coordinate on line ", &v376, &v377);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" should have ", &v377, &v378);
          std::to_string(&v375, v361);
          if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v353 = &v375;
          else
            v353 = (std::string *)v375.__r_.__value_.__r.__words[0];
          if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v354 = HIBYTE(v375.__r_.__value_.__r.__words[2]);
          else
            v354 = v375.__r_.__value_.__l.__size_;
          v355 = std::string::append(&v378, (const std::string::value_type *)v353, v354);
          v356 = *(_OWORD *)&v355->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v355->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v356;
          v355->__r_.__value_.__l.__size_ = 0;
          v355->__r_.__value_.__r.__words[2] = 0;
          v355->__r_.__value_.__r.__words[0] = 0;
          v357 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coordinates", &__p, &v372);
          MEMORY[0x24BD02AE4](v352, &v372, v357);
          __cxa_throw(v352, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        std::vector<float>::vector(&v372, v15);
        if (v16 >= 1)
        {
          v139 = (float *)v372.__r_.__value_.__r.__words[0];
          v140 = v16;
          v141 = &v399;
          do
          {
            v142 = *(double *)&v141->__locale_;
            ++v141;
            v143 = v142;
            *v139++ = v143;
            --v140;
          }
          while (v140);
        }
        v144 = v395;
        if ((unint64_t)v395 >= v396)
        {
          v145 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v394, (uint64_t)&v372);
        }
        else
        {
          *v395 = 0;
          v144[1] = 0;
          v144[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v144, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_, (uint64_t)(v372.__r_.__value_.__l.__size_ - v372.__r_.__value_.__r.__words[0]) >> 2);
          v145 = (uint64_t)(v144 + 3);
        }
        v395 = (_QWORD *)v145;
      }
      goto LABEL_229;
    }
    if (v12 != 1 || __s[0] != 102)
      goto LABEL_232;
    memset(&__p, 0, sizeof(__p));
    memset(&v378, 0, sizeof(v378));
    memset(&v377, 0, sizeof(v377));
    v374 = 0;
    while (sscanf(v11, "%s%n", &v399, &v374) == 1)
    {
      v17 = v374;
      v371.__r_.__value_.__r.__words[0] = 0;
      v368 = 0;
      v365 = 0;
      if (sscanf((const char *)&v399, "%ld/%ld/%ld", &v371, &v368, &v365) == 3)
      {
        if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
          v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v397 + 1) - v397) >> 3);
        else
          LODWORD(v18) = -1;
        v21 = v18 + LODWORD(v371.__r_.__value_.__l.__data_);
        v22 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v24 = (void *)__p.__r_.__value_.__r.__words[0];
          v25 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v27 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v28);
            v22 = __p.__r_.__value_.__l.__size_;
            v24 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v29 = 0;
          }
          v40 = &v29[4 * v25];
          *(_DWORD *)v40 = v21;
          v23 = (std::string::size_type)(v40 + 4);
          while ((void *)v22 != v24)
          {
            v41 = *(_DWORD *)(v22 - 4);
            v22 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
          __p.__r_.__value_.__l.__size_ = v23;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29[4 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v21;
          v23 = v22 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v23;
        if (((unint64_t)v368 & 0x8000000000000000) != 0)
          v42 = 0xAAAAAAAAAAAAAAABLL * (v395 - v394);
        else
          LODWORD(v42) = -1;
        v43 = v42 + (_DWORD)v368;
        v44 = v378.__r_.__value_.__l.__size_;
        if (v378.__r_.__value_.__l.__size_ >= v378.__r_.__value_.__r.__words[2])
        {
          v46 = (void *)v378.__r_.__value_.__r.__words[0];
          v47 = (uint64_t)(v378.__r_.__value_.__l.__size_ - v378.__r_.__value_.__r.__words[0]) >> 2;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v49 = v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0]) >> 1 > v48)
            v48 = v49 >> 1;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
            v50 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v378.__r_.__value_.__r.__words[2], v50);
            v44 = v378.__r_.__value_.__l.__size_;
            v46 = (void *)v378.__r_.__value_.__r.__words[0];
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[4 * v47];
          *(_DWORD *)v52 = v43;
          v45 = (std::string::size_type)(v52 + 4);
          while ((void *)v44 != v46)
          {
            v53 = *(_DWORD *)(v44 - 4);
            v44 -= 4;
            *((_DWORD *)v52 - 1) = v53;
            v52 -= 4;
          }
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
          v378.__r_.__value_.__l.__size_ = v45;
          v378.__r_.__value_.__r.__words[2] = (std::string::size_type)&v51[4 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_DWORD *)v378.__r_.__value_.__l.__size_ = v43;
          v45 = v44 + 4;
        }
        v378.__r_.__value_.__l.__size_ = v45;
        if (((unint64_t)v365 & 0x8000000000000000) != 0)
          v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v392 + 1) - v392) >> 3);
        else
          LODWORD(v54) = -1;
        v55 = v54 + (_DWORD)v365;
        v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
        if (v377.__r_.__value_.__l.__size_ < v377.__r_.__value_.__r.__words[2])
          goto LABEL_155;
        v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
        v58 = (uint64_t)(v377.__r_.__value_.__l.__size_ - v377.__r_.__value_.__r.__words[0]) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v60 = v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0]) >> 1 > v59)
          v59 = v60 >> 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
          v61 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v377.__r_.__value_.__r.__words[2], v61);
          v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
          v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[4 * v58];
        *(_DWORD *)v63 = v55;
        v64 = (std::string::size_type)(v63 + 4);
        while (v56 != v57)
        {
          v65 = *--v56;
          *((_DWORD *)v63 - 1) = v65;
          v63 -= 4;
        }
        goto LABEL_168;
      }
      if (sscanf((const char *)&v399, "%ld/%ld", &v371, &v368) == 2)
      {
        if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v397 + 1) - v397) >> 3);
        else
          LODWORD(v19) = -1;
        v31 = v19 + LODWORD(v371.__r_.__value_.__l.__data_);
        v32 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v34 = (void *)__p.__r_.__value_.__r.__words[0];
          v35 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v37 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v38);
            v32 = __p.__r_.__value_.__l.__size_;
            v34 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v39 = 0;
          }
          v84 = &v39[4 * v35];
          *(_DWORD *)v84 = v31;
          v33 = (std::string::size_type)(v84 + 4);
          while ((void *)v32 != v34)
          {
            v85 = *(_DWORD *)(v32 - 4);
            v32 -= 4;
            *((_DWORD *)v84 - 1) = v85;
            v84 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
          __p.__r_.__value_.__l.__size_ = v33;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v31;
          v33 = v32 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v33;
        if (((unint64_t)v368 & 0x8000000000000000) != 0)
          v86 = 0xAAAAAAAAAAAAAAABLL * (v395 - v394);
        else
          LODWORD(v86) = -1;
        v87 = v86 + (_DWORD)v368;
        v88 = v378.__r_.__value_.__l.__size_;
        if (v378.__r_.__value_.__l.__size_ >= v378.__r_.__value_.__r.__words[2])
        {
          v90 = (void *)v378.__r_.__value_.__r.__words[0];
          v91 = (uint64_t)(v378.__r_.__value_.__l.__size_ - v378.__r_.__value_.__r.__words[0]) >> 2;
          v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 62)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v93 = v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0]) >> 1 > v92)
            v92 = v93 >> 1;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
            v94 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v94 = v92;
          if (v94)
          {
            v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v378.__r_.__value_.__r.__words[2], v94);
            v88 = v378.__r_.__value_.__l.__size_;
            v90 = (void *)v378.__r_.__value_.__r.__words[0];
          }
          else
          {
            v95 = 0;
          }
          v96 = &v95[4 * v91];
          *(_DWORD *)v96 = v87;
          v89 = (std::string::size_type)(v96 + 4);
          while ((void *)v88 != v90)
          {
            v97 = *(_DWORD *)(v88 - 4);
            v88 -= 4;
            *((_DWORD *)v96 - 1) = v97;
            v96 -= 4;
          }
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
          v378.__r_.__value_.__l.__size_ = v89;
          v378.__r_.__value_.__r.__words[2] = (std::string::size_type)&v95[4 * v94];
          if (v90)
            operator delete(v90);
        }
        else
        {
          *(_DWORD *)v378.__r_.__value_.__l.__size_ = v87;
          v89 = v88 + 4;
        }
        v378.__r_.__value_.__l.__size_ = v89;
      }
      else
      {
        if (sscanf((const char *)&v399, "%ld//%ld", &v371, &v365) == 2)
        {
          if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
            v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v397 + 1) - v397) >> 3);
          else
            LODWORD(v20) = -1;
          v66 = v20 + LODWORD(v371.__r_.__value_.__l.__data_);
          v67 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v69 = (void *)__p.__r_.__value_.__r.__words[0];
            v70 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 62)
              std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
            v72 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v71)
              v71 = v72 >> 1;
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
              v73 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            if (v73)
            {
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v73);
              v67 = __p.__r_.__value_.__l.__size_;
              v69 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v74 = 0;
            }
            v98 = &v74[4 * v70];
            *(_DWORD *)v98 = v66;
            v68 = (std::string::size_type)(v98 + 4);
            while ((void *)v67 != v69)
            {
              v99 = *(_DWORD *)(v67 - 4);
              v67 -= 4;
              *((_DWORD *)v98 - 1) = v99;
              v98 -= 4;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
            __p.__r_.__value_.__l.__size_ = v68;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v74[4 * v73];
            if (v69)
              operator delete(v69);
          }
          else
          {
            *(_DWORD *)__p.__r_.__value_.__l.__size_ = v66;
            v68 = v67 + 4;
          }
          __p.__r_.__value_.__l.__size_ = v68;
          if (((unint64_t)v365 & 0x8000000000000000) != 0)
            v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v392 + 1) - v392) >> 3);
          else
            LODWORD(v100) = -1;
          v55 = v100 + (_DWORD)v365;
          v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
          if (v377.__r_.__value_.__l.__size_ < v377.__r_.__value_.__r.__words[2])
          {
LABEL_155:
            *v56 = v55;
            v64 = (std::string::size_type)(v56 + 1);
LABEL_170:
            v377.__r_.__value_.__l.__size_ = v64;
            goto LABEL_171;
          }
          v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
          v101 = (uint64_t)(v377.__r_.__value_.__l.__size_ - v377.__r_.__value_.__r.__words[0]) >> 2;
          v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 62)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v103 = v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0]) >> 1 > v102)
            v102 = v103 >> 1;
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v102;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v377.__r_.__value_.__r.__words[2], v61);
            v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
            v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
          }
          else
          {
            v62 = 0;
          }
          v63 = &v62[4 * v101];
          *(_DWORD *)v63 = v55;
          v64 = (std::string::size_type)(v63 + 4);
          while (v56 != v57)
          {
            v104 = *--v56;
            *((_DWORD *)v63 - 1) = v104;
            v63 -= 4;
          }
LABEL_168:
          v377.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v377.__r_.__value_.__l.__size_ = v64;
          v377.__r_.__value_.__r.__words[2] = (std::string::size_type)&v62[4 * v61];
          if (v57)
            operator delete(v57);
          goto LABEL_170;
        }
        if (sscanf((const char *)&v399, "%ld", &v371) != 1)
        {
          v344 = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v375, __val);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Face on line ", &v375, &v376);
          v345 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" has an invalid element format.", &v376, &v372);
          MEMORY[0x24BD02AE4](v344, &v372, v345);
          __cxa_throw(v344, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v397 + 1) - v397) >> 3);
        else
          LODWORD(v30) = -1;
        v75 = v30 + LODWORD(v371.__r_.__value_.__l.__data_);
        v76 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v78 = (void *)__p.__r_.__value_.__r.__words[0];
          v79 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 62)
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          v81 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v80)
            v80 = v81 >> 1;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
            v82 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v82 = v80;
          if (v82)
          {
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v82);
            v76 = __p.__r_.__value_.__l.__size_;
            v78 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v83 = 0;
          }
          v105 = &v83[4 * v79];
          *(_DWORD *)v105 = v75;
          v77 = (std::string::size_type)(v105 + 4);
          while ((void *)v76 != v78)
          {
            v106 = *(_DWORD *)(v76 - 4);
            v76 -= 4;
            *((_DWORD *)v105 - 1) = v106;
            v105 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
          __p.__r_.__value_.__l.__size_ = v77;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83[4 * v82];
          if (v78)
            operator delete(v78);
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v75;
          v77 = v76 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v77;
      }
LABEL_171:
      v11 += v17;
    }
    v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
    v372.__r_.__value_.__l.__size_ = (std::string::size_type)&v388;
    v372.__r_.__value_.__r.__words[2] = (std::string::size_type)&v386;
    p_val = &__val;
    v117 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] >= 0x11)
    {
      v346 = __cxa_allocate_exception(0x10uLL);
      std::to_string(&v371, __val);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Face on line ", &v371, &v375);
      v347 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not a triangle or quad.", &v375, &v376);
      MEMORY[0x24BD02AE4](v346, &v376, v347);
      __cxa_throw(v346, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == 16)
    {
      memset(&v376, 0, sizeof(v376));
      memset(&v375, 0, sizeof(v375));
      v119 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v376.__r_.__value_.__r.__words[2], 1uLL);
      v121 = v376.__r_.__value_.__l.__size_;
      v120 = (void *)v376.__r_.__value_.__r.__words[0];
      *v119 = *v117;
      v122 = (std::string::size_type)(v119 + 1);
      v123 = (std::string::size_type)v119;
      while ((void *)v121 != v120)
      {
        v124 = *(_DWORD *)(v121 - 4);
        v121 -= 4;
        *(_DWORD *)(v123 - 4) = v124;
        v123 -= 4;
      }
      v130 = (std::string::size_type)&v119[v118];
      v376.__r_.__value_.__r.__words[0] = v123;
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)(v119 + 1);
      v376.__r_.__value_.__r.__words[2] = v130;
      if (v120)
      {
        operator delete(v120);
        v130 = v376.__r_.__value_.__r.__words[2];
      }
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)(v119 + 1);
      v131 = __p.__r_.__value_.__r.__words[0];
      if (v122 < v130)
      {
        v119[1] = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4);
        v132 = v119 + 2;
        goto LABEL_239;
      }
      v133 = (void *)v376.__r_.__value_.__r.__words[0];
      v134 = (uint64_t)(v122 - v376.__r_.__value_.__r.__words[0]) >> 2;
      v135 = v134 + 1;
      if ((unint64_t)(v134 + 1) >> 62)
        goto LABEL_542;
      v136 = v130 - v376.__r_.__value_.__r.__words[0];
      if (v136 >> 1 > v135)
        v135 = v136 >> 1;
      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
        v137 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v137 = v135;
      if (v137)
      {
        v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v376.__r_.__value_.__r.__words[2], v137);
        v122 = v376.__r_.__value_.__l.__size_;
        v133 = (void *)v376.__r_.__value_.__r.__words[0];
      }
      else
      {
        v138 = 0;
      }
      v147 = &v138[4 * v134];
      *(_DWORD *)v147 = *(_DWORD *)(v131 + 4);
      v132 = v147 + 4;
      while ((void *)v122 != v133)
      {
        v148 = *(_DWORD *)(v122 - 4);
        v122 -= 4;
        *((_DWORD *)v147 - 1) = v148;
        v147 -= 4;
      }
      v130 = (std::string::size_type)&v138[4 * v137];
      v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
      v376.__r_.__value_.__r.__words[2] = v130;
      if (v133)
      {
        operator delete(v133);
        v130 = v376.__r_.__value_.__r.__words[2];
      }
LABEL_239:
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
      v149 = __p.__r_.__value_.__r.__words[0];
      if ((unint64_t)v132 < v130)
      {
        *v132 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
        v150 = (std::string::size_type)(v132 + 1);
        goto LABEL_255;
      }
      v151 = (_DWORD *)v376.__r_.__value_.__r.__words[0];
      v152 = (uint64_t)((uint64_t)v132 - v376.__r_.__value_.__r.__words[0]) >> 2;
      v153 = v152 + 1;
      if ((unint64_t)(v152 + 1) >> 62)
        goto LABEL_542;
      v154 = v130 - v376.__r_.__value_.__r.__words[0];
      if (v154 >> 1 > v153)
        v153 = v154 >> 1;
      if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
        v155 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v155 = v153;
      if (v155)
      {
        v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v376.__r_.__value_.__r.__words[2], v155);
        v132 = (_DWORD *)v376.__r_.__value_.__l.__size_;
        v151 = (_DWORD *)v376.__r_.__value_.__r.__words[0];
      }
      else
      {
        v156 = 0;
      }
      v157 = &v156[4 * v152];
      *(_DWORD *)v157 = *(_DWORD *)(v149 + 8);
      v150 = (std::string::size_type)(v157 + 4);
      while (v132 != v151)
      {
        v158 = *--v132;
        *((_DWORD *)v157 - 1) = v158;
        v157 -= 4;
      }
      v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
      v376.__r_.__value_.__l.__size_ = v150;
      v376.__r_.__value_.__r.__words[2] = (std::string::size_type)&v156[4 * v155];
      if (v151)
        operator delete(v151);
LABEL_255:
      v376.__r_.__value_.__l.__size_ = v150;
      v159 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
      v160 = v375.__r_.__value_.__r.__words[2];
      v161 = v375.__r_.__value_.__l.__size_;
      if (v375.__r_.__value_.__l.__size_ < v375.__r_.__value_.__r.__words[2])
      {
        *(_DWORD *)v375.__r_.__value_.__l.__size_ = *(_DWORD *)__p.__r_.__value_.__l.__data_;
        v162 = (_DWORD *)(v161 + 4);
        goto LABEL_271;
      }
      v163 = (void *)v375.__r_.__value_.__r.__words[0];
      v164 = (uint64_t)(v375.__r_.__value_.__l.__size_ - v375.__r_.__value_.__r.__words[0]) >> 2;
      v165 = v164 + 1;
      if ((unint64_t)(v164 + 1) >> 62)
        goto LABEL_542;
      v166 = v375.__r_.__value_.__r.__words[2] - v375.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v375.__r_.__value_.__r.__words[2] - v375.__r_.__value_.__r.__words[0]) >> 1 > v165)
        v165 = v166 >> 1;
      if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
        v167 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v167 = v165;
      if (v167)
      {
        v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v375.__r_.__value_.__r.__words[2], v167);
        v161 = v375.__r_.__value_.__l.__size_;
        v163 = (void *)v375.__r_.__value_.__r.__words[0];
      }
      else
      {
        v168 = 0;
      }
      v169 = &v168[4 * v164];
      *(_DWORD *)v169 = *v159;
      v162 = v169 + 4;
      while ((void *)v161 != v163)
      {
        v170 = *(_DWORD *)(v161 - 4);
        v161 -= 4;
        *((_DWORD *)v169 - 1) = v170;
        v169 -= 4;
      }
      v160 = (std::string::size_type)&v168[4 * v167];
      v375.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
      v375.__r_.__value_.__r.__words[2] = v160;
      if (v163)
      {
        operator delete(v163);
        v160 = v375.__r_.__value_.__r.__words[2];
      }
LABEL_271:
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
      v171 = __p.__r_.__value_.__r.__words[0];
      if ((unint64_t)v162 < v160)
      {
        *v162 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
        v172 = v162 + 1;
        goto LABEL_287;
      }
      v173 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      v174 = (uint64_t)((uint64_t)v162 - v375.__r_.__value_.__r.__words[0]) >> 2;
      v175 = v174 + 1;
      if ((unint64_t)(v174 + 1) >> 62)
        goto LABEL_542;
      v176 = v160 - v375.__r_.__value_.__r.__words[0];
      if (v176 >> 1 > v175)
        v175 = v176 >> 1;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
        v177 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v177 = v175;
      if (v177)
      {
        v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v375.__r_.__value_.__r.__words[2], v177);
        v162 = (_DWORD *)v375.__r_.__value_.__l.__size_;
        v173 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      }
      else
      {
        v178 = 0;
      }
      v179 = &v178[4 * v174];
      *(_DWORD *)v179 = *(_DWORD *)(v171 + 8);
      v172 = v179 + 4;
      while (v162 != v173)
      {
        v180 = *--v162;
        *((_DWORD *)v179 - 1) = v180;
        v179 -= 4;
      }
      v160 = (std::string::size_type)&v178[4 * v177];
      v375.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
      v375.__r_.__value_.__r.__words[2] = v160;
      if (v173)
      {
        operator delete(v173);
        v160 = v375.__r_.__value_.__r.__words[2];
      }
LABEL_287:
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
      v181 = __p.__r_.__value_.__r.__words[0];
      if ((unint64_t)v172 < v160)
      {
        *v172 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 12);
        v182 = (std::string::size_type)(v172 + 1);
        goto LABEL_303;
      }
      v183 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      v184 = (uint64_t)((uint64_t)v172 - v375.__r_.__value_.__r.__words[0]) >> 2;
      v185 = v184 + 1;
      if ((unint64_t)(v184 + 1) >> 62)
LABEL_542:
        std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
      v186 = v160 - v375.__r_.__value_.__r.__words[0];
      if (v186 >> 1 > v185)
        v185 = v186 >> 1;
      if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
        v187 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v187 = v185;
      if (v187)
      {
        v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v375.__r_.__value_.__r.__words[2], v187);
        v172 = (_DWORD *)v375.__r_.__value_.__l.__size_;
        v183 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      }
      else
      {
        v188 = 0;
      }
      v189 = &v188[4 * v184];
      *(_DWORD *)v189 = *(_DWORD *)(v181 + 12);
      v182 = (std::string::size_type)(v189 + 4);
      while (v172 != v183)
      {
        v190 = *--v172;
        *((_DWORD *)v189 - 1) = v190;
        v189 -= 4;
      }
      v375.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
      v375.__r_.__value_.__l.__size_ = v182;
      v375.__r_.__value_.__r.__words[2] = (std::string::size_type)&v188[4 * v187];
      if (v183)
        operator delete(v183);
LABEL_303:
      v375.__r_.__value_.__l.__size_ = v182;
      memset(&v371, 0, sizeof(v371));
      v368 = 0;
      v369 = 0;
      v370 = 0;
      v191 = (_DWORD *)v378.__r_.__value_.__r.__words[0];
      if (v378.__r_.__value_.__l.__size_ - v378.__r_.__value_.__r.__words[0] == 16)
      {
        v193 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v371.__r_.__value_.__r.__words[2], 1uLL);
        v195 = v371.__r_.__value_.__l.__size_;
        v194 = (void *)v371.__r_.__value_.__r.__words[0];
        *v193 = *v191;
        v196 = (std::string::size_type)(v193 + 1);
        v197 = (std::string::size_type)v193;
        while ((void *)v195 != v194)
        {
          v198 = *(_DWORD *)(v195 - 4);
          v195 -= 4;
          *(_DWORD *)(v197 - 4) = v198;
          v197 -= 4;
        }
        v199 = (std::string::size_type)&v193[v192];
        v371.__r_.__value_.__r.__words[0] = v197;
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)(v193 + 1);
        v371.__r_.__value_.__r.__words[2] = v199;
        if (v194)
        {
          operator delete(v194);
          v199 = v371.__r_.__value_.__r.__words[2];
        }
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)(v193 + 1);
        v200 = v378.__r_.__value_.__r.__words[0];
        if (v196 < v199)
        {
          v193[1] = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 4);
          v201 = v193 + 2;
          goto LABEL_325;
        }
        v202 = (void *)v371.__r_.__value_.__r.__words[0];
        v203 = (uint64_t)(v196 - v371.__r_.__value_.__r.__words[0]) >> 2;
        v204 = v203 + 1;
        if ((unint64_t)(v203 + 1) >> 62)
          goto LABEL_553;
        v205 = v199 - v371.__r_.__value_.__r.__words[0];
        if (v205 >> 1 > v204)
          v204 = v205 >> 1;
        if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL)
          v206 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v206 = v204;
        if (v206)
        {
          v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v371.__r_.__value_.__r.__words[2], v206);
          v196 = v371.__r_.__value_.__l.__size_;
          v202 = (void *)v371.__r_.__value_.__r.__words[0];
        }
        else
        {
          v207 = 0;
        }
        v208 = &v207[4 * v203];
        *(_DWORD *)v208 = *(_DWORD *)(v200 + 4);
        v201 = v208 + 4;
        while ((void *)v196 != v202)
        {
          v209 = *(_DWORD *)(v196 - 4);
          v196 -= 4;
          *((_DWORD *)v208 - 1) = v209;
          v208 -= 4;
        }
        v199 = (std::string::size_type)&v207[4 * v206];
        v371.__r_.__value_.__r.__words[0] = (std::string::size_type)v208;
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)v201;
        v371.__r_.__value_.__r.__words[2] = v199;
        if (v202)
        {
          operator delete(v202);
          v199 = v371.__r_.__value_.__r.__words[2];
        }
LABEL_325:
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)v201;
        v210 = v378.__r_.__value_.__r.__words[0];
        if ((unint64_t)v201 < v199)
        {
          *v201 = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 8);
          v211 = (std::string::size_type)(v201 + 1);
          goto LABEL_341;
        }
        v212 = (_DWORD *)v371.__r_.__value_.__r.__words[0];
        v213 = (uint64_t)((uint64_t)v201 - v371.__r_.__value_.__r.__words[0]) >> 2;
        v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 62)
          goto LABEL_553;
        v215 = v199 - v371.__r_.__value_.__r.__words[0];
        if (v215 >> 1 > v214)
          v214 = v215 >> 1;
        if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
          v216 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v216 = v214;
        if (v216)
        {
          v217 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v371.__r_.__value_.__r.__words[2], v216);
          v201 = (_DWORD *)v371.__r_.__value_.__l.__size_;
          v212 = (_DWORD *)v371.__r_.__value_.__r.__words[0];
        }
        else
        {
          v217 = 0;
        }
        v218 = &v217[4 * v213];
        *(_DWORD *)v218 = *(_DWORD *)(v210 + 8);
        v211 = (std::string::size_type)(v218 + 4);
        while (v201 != v212)
        {
          v219 = *--v201;
          *((_DWORD *)v218 - 1) = v219;
          v218 -= 4;
        }
        v371.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
        v371.__r_.__value_.__l.__size_ = v211;
        v371.__r_.__value_.__r.__words[2] = (std::string::size_type)&v217[4 * v216];
        if (v212)
          operator delete(v212);
LABEL_341:
        v371.__r_.__value_.__l.__size_ = v211;
        v220 = (_DWORD *)v378.__r_.__value_.__r.__words[0];
        v222 = v369;
        v221 = v370;
        if (v369 < v370)
        {
          *(_DWORD *)v369 = *(_DWORD *)v378.__r_.__value_.__l.__data_;
          v223 = v222 + 4;
          goto LABEL_357;
        }
        v224 = (char *)v368;
        v225 = (v369 - (_BYTE *)v368) >> 2;
        v226 = v225 + 1;
        if ((unint64_t)(v225 + 1) >> 62)
          goto LABEL_553;
        v227 = v370 - (_BYTE *)v368;
        if ((v370 - (_BYTE *)v368) >> 1 > v226)
          v226 = v227 >> 1;
        if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL)
          v228 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v228 = v226;
        if (v228)
        {
          v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v370, v228);
          v224 = (char *)v368;
          v222 = v369;
        }
        else
        {
          v229 = 0;
        }
        v230 = &v229[4 * v225];
        *(_DWORD *)v230 = *v220;
        v223 = v230 + 4;
        while (v222 != v224)
        {
          v231 = *((_DWORD *)v222 - 1);
          v222 -= 4;
          *((_DWORD *)v230 - 1) = v231;
          v230 -= 4;
        }
        v221 = &v229[4 * v228];
        v368 = v230;
        v369 = v223;
        v370 = v221;
        if (v224)
        {
          operator delete(v224);
          v221 = v370;
        }
LABEL_357:
        v369 = v223;
        v232 = v378.__r_.__value_.__r.__words[0];
        if (v223 < v221)
        {
          *(_DWORD *)v223 = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 8);
          v233 = v223 + 4;
          goto LABEL_373;
        }
        v234 = (char *)v368;
        v235 = (v223 - (_BYTE *)v368) >> 2;
        v236 = v235 + 1;
        if ((unint64_t)(v235 + 1) >> 62)
          goto LABEL_553;
        v237 = v221 - (_BYTE *)v368;
        if (v237 >> 1 > v236)
          v236 = v237 >> 1;
        if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFFCLL)
          v238 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v238 = v236;
        if (v238)
        {
          v239 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v370, v238);
          v234 = (char *)v368;
          v223 = v369;
        }
        else
        {
          v239 = 0;
        }
        v240 = &v239[4 * v235];
        *(_DWORD *)v240 = *(_DWORD *)(v232 + 8);
        v233 = v240 + 4;
        while (v223 != v234)
        {
          v241 = *((_DWORD *)v223 - 1);
          v223 -= 4;
          *((_DWORD *)v240 - 1) = v241;
          v240 -= 4;
        }
        v221 = &v239[4 * v238];
        v368 = v240;
        v369 = v233;
        v370 = v221;
        if (v234)
        {
          operator delete(v234);
          v221 = v370;
        }
LABEL_373:
        v369 = v233;
        v242 = v378.__r_.__value_.__r.__words[0];
        if (v233 < v221)
        {
          *(_DWORD *)v233 = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 12);
          v243 = v233 + 4;
          goto LABEL_389;
        }
        v244 = (char *)v368;
        v245 = (v233 - (_BYTE *)v368) >> 2;
        v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 62)
LABEL_553:
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v247 = v221 - (_BYTE *)v368;
        if (v247 >> 1 > v246)
          v246 = v247 >> 1;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL)
          v248 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v248 = v246;
        if (v248)
        {
          v249 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v370, v248);
          v244 = (char *)v368;
          v233 = v369;
        }
        else
        {
          v249 = 0;
        }
        v250 = &v249[4 * v245];
        *(_DWORD *)v250 = *(_DWORD *)(v242 + 12);
        v243 = v250 + 4;
        while (v233 != v244)
        {
          v251 = *((_DWORD *)v233 - 1);
          v233 -= 4;
          *((_DWORD *)v250 - 1) = v251;
          v250 -= 4;
        }
        v368 = v250;
        v369 = v243;
        v370 = &v249[4 * v248];
        if (v244)
          operator delete(v244);
LABEL_389:
        v369 = v243;
      }
      v365 = 0;
      v366 = 0;
      v367 = 0;
      v362 = 0;
      v363 = 0;
      v364 = 0;
      v252 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
      if (v377.__r_.__value_.__l.__size_ - v377.__r_.__value_.__r.__words[0] == 16)
      {
        v254 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v367, 1uLL);
        v255 = (char *)v365;
        v256 = v366;
        *(_DWORD *)v254 = *v252;
        v257 = v254 + 4;
        v258 = v254;
        while (v256 != v255)
        {
          v259 = *((_DWORD *)v256 - 1);
          v256 -= 4;
          *((_DWORD *)v258 - 1) = v259;
          v258 -= 4;
        }
        v260 = &v254[4 * v253];
        v365 = v258;
        v366 = v254 + 4;
        v367 = v260;
        if (v255)
        {
          operator delete(v255);
          v260 = v367;
        }
        v366 = v254 + 4;
        v261 = v377.__r_.__value_.__r.__words[0];
        if (v257 < v260)
        {
          *((_DWORD *)v254 + 1) = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 4);
          v262 = v254 + 8;
          goto LABEL_412;
        }
        v263 = (char *)v365;
        v264 = (v257 - (_BYTE *)v365) >> 2;
        v265 = v264 + 1;
        if ((unint64_t)(v264 + 1) >> 62)
          goto LABEL_552;
        v266 = v260 - (_BYTE *)v365;
        if (v266 >> 1 > v265)
          v265 = v266 >> 1;
        if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL)
          v267 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v267 = v265;
        if (v267)
        {
          v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v367, v267);
          v263 = (char *)v365;
          v257 = v366;
        }
        else
        {
          v268 = 0;
        }
        v269 = &v268[4 * v264];
        *(_DWORD *)v269 = *(_DWORD *)(v261 + 4);
        v262 = v269 + 4;
        while (v257 != v263)
        {
          v270 = *((_DWORD *)v257 - 1);
          v257 -= 4;
          *((_DWORD *)v269 - 1) = v270;
          v269 -= 4;
        }
        v260 = &v268[4 * v267];
        v365 = v269;
        v366 = v262;
        v367 = v260;
        if (v263)
        {
          operator delete(v263);
          v260 = v367;
        }
LABEL_412:
        v366 = v262;
        v271 = v377.__r_.__value_.__r.__words[0];
        if (v262 < v260)
        {
          *(_DWORD *)v262 = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 8);
          v272 = v262 + 4;
          goto LABEL_428;
        }
        v273 = (char *)v365;
        v274 = (v262 - (_BYTE *)v365) >> 2;
        v275 = v274 + 1;
        if ((unint64_t)(v274 + 1) >> 62)
          goto LABEL_552;
        v276 = v260 - (_BYTE *)v365;
        if (v276 >> 1 > v275)
          v275 = v276 >> 1;
        if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFFCLL)
          v277 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v277 = v275;
        if (v277)
        {
          v278 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v367, v277);
          v273 = (char *)v365;
          v262 = v366;
        }
        else
        {
          v278 = 0;
        }
        v279 = &v278[4 * v274];
        *(_DWORD *)v279 = *(_DWORD *)(v271 + 8);
        v272 = v279 + 4;
        while (v262 != v273)
        {
          v280 = *((_DWORD *)v262 - 1);
          v262 -= 4;
          *((_DWORD *)v279 - 1) = v280;
          v279 -= 4;
        }
        v365 = v279;
        v366 = v272;
        v367 = &v278[4 * v277];
        if (v273)
          operator delete(v273);
LABEL_428:
        v366 = v272;
        v281 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
        v283 = v363;
        v282 = v364;
        if (v363 < v364)
        {
          *(_DWORD *)v363 = *(_DWORD *)v377.__r_.__value_.__l.__data_;
          v284 = v283 + 4;
          goto LABEL_444;
        }
        v285 = (char *)v362;
        v286 = (v363 - (_BYTE *)v362) >> 2;
        v287 = v286 + 1;
        if ((unint64_t)(v286 + 1) >> 62)
          goto LABEL_552;
        v288 = v364 - (_BYTE *)v362;
        if ((v364 - (_BYTE *)v362) >> 1 > v287)
          v287 = v288 >> 1;
        if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFFCLL)
          v289 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v289 = v287;
        if (v289)
        {
          v290 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v364, v289);
          v285 = (char *)v362;
          v283 = v363;
        }
        else
        {
          v290 = 0;
        }
        v291 = &v290[4 * v286];
        *(_DWORD *)v291 = *v281;
        v284 = v291 + 4;
        while (v283 != v285)
        {
          v292 = *((_DWORD *)v283 - 1);
          v283 -= 4;
          *((_DWORD *)v291 - 1) = v292;
          v291 -= 4;
        }
        v282 = &v290[4 * v289];
        v362 = v291;
        v363 = v284;
        v364 = v282;
        if (v285)
        {
          operator delete(v285);
          v282 = v364;
        }
LABEL_444:
        v363 = v284;
        v293 = v377.__r_.__value_.__r.__words[0];
        if (v284 < v282)
        {
          *(_DWORD *)v284 = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 8);
          v294 = v284 + 4;
          goto LABEL_460;
        }
        v295 = (char *)v362;
        v296 = (v284 - (_BYTE *)v362) >> 2;
        v297 = v296 + 1;
        if ((unint64_t)(v296 + 1) >> 62)
          goto LABEL_552;
        v298 = v282 - (_BYTE *)v362;
        if (v298 >> 1 > v297)
          v297 = v298 >> 1;
        if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL)
          v299 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v299 = v297;
        if (v299)
        {
          v300 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v364, v299);
          v295 = (char *)v362;
          v284 = v363;
        }
        else
        {
          v300 = 0;
        }
        v301 = &v300[4 * v296];
        *(_DWORD *)v301 = *(_DWORD *)(v293 + 8);
        v294 = v301 + 4;
        while (v284 != v295)
        {
          v302 = *((_DWORD *)v284 - 1);
          v284 -= 4;
          *((_DWORD *)v301 - 1) = v302;
          v301 -= 4;
        }
        v282 = &v300[4 * v299];
        v362 = v301;
        v363 = v294;
        v364 = v282;
        if (v295)
        {
          operator delete(v295);
          v282 = v364;
        }
LABEL_460:
        v363 = v294;
        v303 = v377.__r_.__value_.__r.__words[0];
        if (v294 < v282)
        {
          *(_DWORD *)v294 = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 12);
          v304 = v294 + 4;
          goto LABEL_476;
        }
        v305 = (char *)v362;
        v306 = (v294 - (_BYTE *)v362) >> 2;
        v307 = v306 + 1;
        if ((unint64_t)(v306 + 1) >> 62)
LABEL_552:
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        v308 = v282 - (_BYTE *)v362;
        if (v308 >> 1 > v307)
          v307 = v308 >> 1;
        if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFFCLL)
          v309 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v309 = v307;
        if (v309)
        {
          v310 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v364, v309);
          v305 = (char *)v362;
          v294 = v363;
        }
        else
        {
          v310 = 0;
        }
        v311 = &v310[4 * v306];
        *(_DWORD *)v311 = *(_DWORD *)(v303 + 12);
        v304 = v311 + 4;
        while (v294 != v305)
        {
          v312 = *((_DWORD *)v294 - 1);
          v294 -= 4;
          *((_DWORD *)v311 - 1) = v312;
          v311 -= 4;
        }
        v362 = v311;
        v363 = v304;
        v364 = &v310[4 * v309];
        if (v305)
          operator delete(v305);
LABEL_476:
        v363 = v304;
      }
      vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()((uint64_t **)&v372, &v376, &v371, &v365);
      vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()((uint64_t **)&v372, &v375, &v368, &v362);
      if (v362)
      {
        v363 = (char *)v362;
        operator delete(v362);
      }
      if (v365)
      {
        v366 = (char *)v365;
        operator delete(v365);
      }
      if (v368)
      {
        v369 = (char *)v368;
        operator delete(v368);
      }
      if (v371.__r_.__value_.__r.__words[0])
      {
        v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
        operator delete(v371.__r_.__value_.__l.__data_);
      }
      if (v375.__r_.__value_.__r.__words[0])
      {
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        operator delete(v375.__r_.__value_.__l.__data_);
      }
      if (v376.__r_.__value_.__r.__words[0])
      {
        v376.__r_.__value_.__l.__size_ = v376.__r_.__value_.__r.__words[0];
        operator delete(v376.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()((uint64_t **)&v372, &__p, &v378, &v377);
    }
    if (v377.__r_.__value_.__r.__words[0])
    {
      v377.__r_.__value_.__l.__size_ = v377.__r_.__value_.__r.__words[0];
      operator delete(v377.__r_.__value_.__l.__data_);
    }
    if (v378.__r_.__value_.__r.__words[0])
    {
      v378.__r_.__value_.__l.__size_ = v378.__r_.__value_.__r.__words[0];
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    v146 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
LABEL_231:
      operator delete(v146);
    }
LABEL_232:
    ++__val;
  }
  v313 = (uint64_t)v394;
  v314 = (uint64_t)v395;
  if ((a2 & 1) == 0)
  {
    if (v395 == v394)
    {
      v314 = (uint64_t)v394;
    }
    else
    {
      v315 = 0xAAAAAAAAAAAAAAABLL * (v395 - v394);
      if (v315 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v397 + 1) - v397) >> 3))
      {
        v316 = (uint64_t)(*(_QWORD *)(v397 + 8) - *(_QWORD *)v397) >> 2;
        LODWORD(v372.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::vector(&v399, v316, &v372);
        std::vector<std::vector<float>>::vector(__s, v315, (uint64_t)&v399);
        if (v399.__locale_)
        {
          *(std::locale *)v400 = v399;
          operator delete(v399.__locale_);
        }
        *(_QWORD *)v400 = 0;
        v399.__locale_ = 0;
        v401 = 0;
        if (*((_QWORD *)&v384 + 1) != (_QWORD)v384)
        {
          v317 = v395;
          v318 = (uint64_t)v394;
          v319 = (uint64_t)(*(_QWORD *)(v384 + 8) - *(_QWORD *)v384) >> 2;
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::vector(&v372, v319, &__p);
          std::vector<std::vector<float>>::resize((uint64_t *)&v399, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v317 - v318) >> 3), (uint64_t)&v372);
          if (v372.__r_.__value_.__r.__words[0])
          {
            v372.__r_.__value_.__l.__size_ = v372.__r_.__value_.__r.__words[0];
            operator delete(v372.__r_.__value_.__l.__data_);
          }
        }
        std::vector<unsigned int>::resize(&v383, 0xAAAAAAAAAAAAAAABLL * (v395 - v394));
        v320 = *((_QWORD *)&v390 + 1);
        v321 = v390;
        if (*((_QWORD *)&v390 + 1) != (_QWORD)v390)
        {
          v322 = 0;
          do
          {
            v323 = *(_QWORD *)(v321 + 24 * v322);
            if (*(_QWORD *)(v321 + 24 * v322 + 8) != v323)
            {
              v324 = 0;
              v325 = v388;
              v326 = *(_QWORD *)(v388 + 24 * v322);
              do
              {
                v327 = *(_DWORD *)(v323 + 4 * v324);
                v328 = (char **)(v397 + 24 * v327);
                v329 = (char *)(*(_QWORD *)__s + 24 * *(unsigned int *)(v326 + 4 * v324));
                if (v329 != (char *)v328)
                {
                  v330 = *(_QWORD *)(v397 + 24 * v327 + 8);
                  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v329, *v328, v330, (v330 - (uint64_t)*v328) >> 2);
                  v321 = v390;
                  v325 = v388;
                }
                if (*(std::locale::__imp **)v400 != v399.__locale_)
                {
                  v331 = *(_DWORD *)(*(_QWORD *)(v321 + 24 * v322) + 4 * v324);
                  v332 = (char **)(v384 + 24 * v331);
                  v333 = (char *)v399.__locale_ + 24 * *(unsigned int *)(*(_QWORD *)(v325 + 24 * v322) + 4 * v324);
                  if (v333 != (char *)v332)
                  {
                    v334 = *(_QWORD *)(v384 + 24 * v331 + 8);
                    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v333, *v332, v334, (v334 - (uint64_t)*v332) >> 2);
                    v321 = v390;
                    v325 = v388;
                  }
                }
                v335 = (uint64_t *)(v321 + 24 * v322);
                v323 = *v335;
                v326 = *(_QWORD *)(v325 + 24 * v322);
                v383.__begin_[*(unsigned int *)(v326 + 4 * v324)] = *(_DWORD *)(*v335 + 4 * v324);
                ++v324;
              }
              while (v324 < (v335[1] - v323) >> 2);
              v320 = *((_QWORD *)&v390 + 1);
            }
            ++v322;
          }
          while (v322 < 0xAAAAAAAAAAAAAAABLL * ((v320 - v321) >> 3));
        }
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v397, *(uint64_t *)__s, *(uint64_t *)v404, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v404 - *(_QWORD *)__s) >> 3));
        if (*(std::locale::__imp **)v400 != v399.__locale_)
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v384, (uint64_t)v399.__locale_, *(uint64_t *)v400, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v400 - (unint64_t)v399.__locale_) >> 3));
        std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v390, v388, *((uint64_t *)&v388 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v388 + 1) - v388) >> 3));
        v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v399;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v372);
        v399.__locale_ = (std::locale::__imp *)__s;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v399);
        v313 = (uint64_t)v394;
        v314 = (uint64_t)v395;
      }
    }
  }
  *(_OWORD *)v360 = v397;
  v336 = v398;
  v398 = 0;
  v397 = 0uLL;
  *(_QWORD *)(v360 + 16) = v336;
  *(_QWORD *)(v360 + 24) = v313;
  v337 = v396;
  *(_QWORD *)(v360 + 32) = v314;
  *(_QWORD *)(v360 + 40) = v337;
  v396 = 0;
  v395 = 0;
  v394 = 0;
  *(_OWORD *)(v360 + 48) = v392;
  *(_QWORD *)(v360 + 64) = v393;
  v393 = 0;
  v392 = 0uLL;
  *(_OWORD *)(v360 + 72) = v390;
  *(_QWORD *)(v360 + 88) = v391;
  v390 = 0uLL;
  v391 = 0;
  *(_OWORD *)(v360 + 96) = v388;
  *(_QWORD *)(v360 + 112) = v389;
  v388 = 0uLL;
  v389 = 0;
  *(_OWORD *)(v360 + 120) = v386;
  *(_QWORD *)(v360 + 136) = v387;
  v386 = 0uLL;
  v387 = 0;
  *(_OWORD *)(v360 + 144) = v384;
  *(_QWORD *)(v360 + 160) = v385;
  v384 = 0uLL;
  v385 = 0;
  *(std::vector<unsigned int> *)(v360 + 168) = v383;
  memset(&v383, 0, sizeof(v383));
  if (SHIBYTE(v381) < 0)
  {
    operator delete(v380[0]);
    if (v383.__begin_)
    {
      v383.__end_ = v383.__begin_;
      operator delete(v383.__begin_);
    }
  }
  *(_QWORD *)__s = &v384;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(_QWORD *)__s = &v386;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(_QWORD *)__s = &v388;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(_QWORD *)__s = &v390;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(_QWORD *)__s = &v392;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(_QWORD *)__s = &v394;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(_QWORD *)__s = &v397;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
}

void sub_249D2EC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *v78;
  int v79;

  if (a47 < 0)
    operator delete(__p);
  if (a74 < 0)
    operator delete(a73);
  if (a55 < 0)
    operator delete(a50);
  if (a72 < 0)
    operator delete(a68);
  if (a67 < 0)
    operator delete(a62);
  if (a61 < 0)
  {
    operator delete(a56);
    if ((v79 & 1) == 0)
    {
LABEL_16:
      if (a76 < 0)
        operator delete(a75);
      if (a77)
        operator delete(a77);
      STACK[0x3B8] = (unint64_t)&a78;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x210];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x230];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x250];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x270];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x288];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x2A0];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v79)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v78);
  goto LABEL_16;
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_249D2F204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_249D2F2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()(uint64_t **a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  void *exception;
  __n128 v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v5 = a2[1] - *a2;
  if (!v5
    || ((v8 = a4[1], v8 != *a4) || a3[1] != *a3)
    && ((v9 = v5 >> 2, v10 = (v8 - *a4) >> 2, v10 != v9) || a3[1] != *a3)
    && (v8 != *a4 || v9 != (uint64_t)(a3[1] - *a3) >> 2)
    && (v10 != v9 || v9 != (uint64_t)(a3[1] - *a3) >> 2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v22, *(_DWORD *)a1[3]);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Face on line ", &v22, &v23);
    v21 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" has an invalid format.", &v23, &v24);
    MEMORY[0x24BD02AE4](exception, &v24, v21);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v11 = *a1;
  v13 = (*a1)[1];
  v12 = (*a1)[2];
  v14 = *a1;
  if (v13 >= v12)
  {
    result = std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(v14, (uint64_t)a2);
  }
  else
  {
    std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)v14, (uint64_t)a2);
    result = v13 + 24;
  }
  v11[1] = result;
  if (a3[1] != *a3)
  {
    v16 = a1[1];
    v17 = v16[1];
    if (v17 >= v16[2])
    {
      result = std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(v16, (uint64_t)a3);
    }
    else
    {
      std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)v16, (uint64_t)a3);
      result = v17 + 24;
    }
    v16[1] = result;
  }
  if (a4[1] != *a4)
  {
    v18 = a1[2];
    v19 = v18[1];
    if (v19 >= v18[2])
    {
      result = std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(v18, (uint64_t)a4);
    }
    else
    {
      std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)v18, (uint64_t)a4);
      result = v19 + 24;
    }
    v18[1] = result;
  }
  return result;
}

void sub_249D2F538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<float>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t vg::ObjIO::read@<X0>(vg::ObjIO *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  void *exception;
  __n128 v8;
  std::string v9;
  std::string v10;
  _QWORD v11[2];
  _QWORD v12[51];
  _QWORD v13[20];

  v3 = (char)a2;
  v13[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v11);
  if (!v12[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, (char *)this);
    v8 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v9, &v10);
    MEMORY[0x24BD02AE4](exception, &v10, v8);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  vg::ObjIO::read(v11, v3, a3);
  v11[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x24BD02B8C](v12);
  std::istream::~istream();
  return MEMORY[0x24BD02D00](v13);
}

void sub_249D2F798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x24BD02B80](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_249D2F8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x24BD02D00](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x24BD02B8C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x24BD02D00](a1 + 53);
  return a1;
}

_QWORD *vg::ObjIO::write(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;

  if (result[1] != *result)
  {
    v3 = result;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"# v: ", 5);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" vt: ", 5);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" vn: ", 5);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" f: ", 4);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ft: ", 5);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" fn: ", 5);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" vc: ", 5);
    result = (_QWORD *)std::ostream::operator<<();
    v10 = *a2;
    *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) = *(_DWORD *)((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)a2 + *(_QWORD *)(v10 - 24) + 16) = 6;
    if (v3[1] != *v3)
    {
      v11 = 0;
      v12 = 0;
      v14 = v3[18];
      v13 = v3[19];
      do
      {
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"v ", 2);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
        result = (_QWORD *)std::ostream::operator<<();
        if (v13 != v14)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
          v18 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
          v19 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
          result = (_QWORD *)std::ostream::operator<<();
        }
        ++v12;
        v11 += 24;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3));
    }
    if (v3[4] != v3[3])
    {
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"vt ", 3);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
        result = (_QWORD *)std::ostream::operator<<();
        ++v21;
        v20 += 24;
      }
      while (v21 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[4] - v3[3]) >> 3));
    }
    if (v3[7] != v3[6])
    {
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"vn ", 3);
        v27 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
        result = (_QWORD *)std::ostream::operator<<();
        ++v25;
        v24 += 24;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[7] - v3[6]) >> 3));
    }
    v30 = v3[15];
    v29 = v3[16];
    v32 = v3[9];
    v31 = v3[10];
    if (v3[13] == v3[12])
    {
      if (v29 == v30)
      {
        if (v31 != v32)
        {
          v60 = 0;
          v61 = 0;
          do
          {
            v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"f ", 2);
            v63 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ", 1);
            v64 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" ", 1);
            result = (_QWORD *)std::ostream::operator<<();
            ++v61;
            v60 += 24;
          }
          while (v61 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
        }
      }
      else if (v31 != v32)
      {
        v44 = 0;
        v45 = 0;
        do
        {
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"f ", 2);
          v47 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"//", 2);
          v48 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" ", 1);
          v49 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"//", 2);
          v50 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" ", 1);
          v51 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"//", 2);
          result = (_QWORD *)std::ostream::operator<<();
          ++v45;
          v44 += 24;
        }
        while (v45 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
      }
    }
    else if (v29 == v30)
    {
      if (v31 != v32)
      {
        v52 = 0;
        v53 = 0;
        do
        {
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"f ", 2);
          v55 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"/", 1);
          v56 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" ", 1);
          v57 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"/", 1);
          v58 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" ", 1);
          v59 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"/", 1);
          result = (_QWORD *)std::ostream::operator<<();
          ++v53;
          v52 += 24;
        }
        while (v53 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
      }
    }
    else if (v31 != v32)
    {
      v33 = 0;
      v34 = 0;
      do
      {
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"f ", 2);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"/", 1);
        v37 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"/", 1);
        v38 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" ", 1);
        v39 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"/", 1);
        v40 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/", 1);
        v41 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" ", 1);
        v42 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"/", 1);
        v43 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"/", 1);
        result = (_QWORD *)std::ostream::operator<<();
        ++v34;
        v33 += 24;
      }
      while (v34 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
    }
  }
  return result;
}

uint64_t vg::ObjIO::write(vg::ObjIO *this, const vg::ObjContents *a2, const char *a3)
{
  void *exception;
  __n128 v7;
  std::string v8;
  std::string v9;
  uint64_t v10;
  _QWORD v11[51];
  _QWORD v12[20];

  v12[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v10);
  if (!v11[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)a2);
    v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v8, &v9);
    MEMORY[0x24BD02AE4](exception, &v9, v7);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  vg::ObjIO::write(this, &v10);
  v10 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x24BD02B8C](v11);
  std::ostream::~ostream();
  return MEMORY[0x24BD02D00](v12);
}

void sub_249D302B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  void *v21;
  int v22;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::ofstream::~ofstream(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_249D30400(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x24BD02D00](v1 + 416);
  _Unwind_Resume(a1);
}

void vg::ObjContentsToObjMeshData(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;

  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  vg::Vector2DToMatRX<float,3ul>((uint64_t *)a1, (uint64_t)&v38);
  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v39;
  *(_QWORD *)a2 = v38;
  *(_QWORD *)(a2 + 8) = v6;
  v38 = v4;
  v39 = v5;
  *(_DWORD *)(a2 + 16) = v40;
  v40 = 0;
  free(v4);
  vg::Vector2DToMatRX<unsigned int,3ul>((uint64_t *)(a1 + 72), (uint64_t)&v38);
  v7 = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = v39;
  *(_QWORD *)(a2 + 24) = v38;
  *(_QWORD *)(a2 + 32) = v9;
  v38 = v7;
  v39 = v8;
  *(_DWORD *)(a2 + 40) = v40;
  v40 = 0;
  free(v7);
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
  {
    vg::Vector2DToMatRX<float,2ul>((uint64_t **)(a1 + 24), (uint64_t)&v38);
    v10 = v38;
    if (*(_BYTE *)(a2 + 72))
    {
      v11 = *(void **)(a2 + 48);
      v12 = *(_QWORD *)(a2 + 56);
      v13 = v39;
      *(_QWORD *)(a2 + 48) = v38;
      *(_QWORD *)(a2 + 56) = v13;
      v38 = v11;
      v39 = v12;
      *(_DWORD *)(a2 + 64) = v40;
      v40 = 0;
    }
    else
    {
      v11 = 0;
      v14 = v39;
      v38 = 0;
      v39 = 0;
      *(_QWORD *)(a2 + 48) = v10;
      *(_QWORD *)(a2 + 56) = v14;
      *(_DWORD *)(a2 + 64) = v40;
      v40 = 0;
      *(_BYTE *)(a2 + 72) = 1;
    }
    free(v11);
  }
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    vg::Vector2DToMatRX<float,3ul>((uint64_t *)(a1 + 48), (uint64_t)&v38);
    v15 = v38;
    if (*(_BYTE *)(a2 + 104))
    {
      v16 = *(void **)(a2 + 80);
      v17 = *(_QWORD *)(a2 + 88);
      v18 = v39;
      *(_QWORD *)(a2 + 80) = v38;
      *(_QWORD *)(a2 + 88) = v18;
      v38 = v16;
      v39 = v17;
      *(_DWORD *)(a2 + 96) = v40;
      v40 = 0;
    }
    else
    {
      v16 = 0;
      v19 = v39;
      v38 = 0;
      v39 = 0;
      *(_QWORD *)(a2 + 80) = v15;
      *(_QWORD *)(a2 + 88) = v19;
      *(_DWORD *)(a2 + 96) = v40;
      v40 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    free(v16);
  }
  if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 144))
  {
    vg::Vector2DToMatRX<float,3ul>((uint64_t *)(a1 + 144), (uint64_t)&v38);
    v20 = v38;
    if (*(_BYTE *)(a2 + 136))
    {
      v21 = *(void **)(a2 + 112);
      v22 = *(_QWORD *)(a2 + 120);
      v23 = v39;
      *(_QWORD *)(a2 + 112) = v38;
      *(_QWORD *)(a2 + 120) = v23;
      v38 = v21;
      v39 = v22;
      *(_DWORD *)(a2 + 128) = v40;
      v40 = 0;
    }
    else
    {
      v21 = 0;
      v24 = v39;
      v38 = 0;
      v39 = 0;
      *(_QWORD *)(a2 + 112) = v20;
      *(_QWORD *)(a2 + 120) = v24;
      *(_DWORD *)(a2 + 128) = v40;
      v40 = 0;
      *(_BYTE *)(a2 + 136) = 1;
    }
    free(v21);
  }
  if (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a1 + 96))
  {
    vg::Vector2DToMatRX<unsigned int,3ul>((uint64_t *)(a1 + 96), (uint64_t)&v38);
    v25 = v38;
    if (*(_BYTE *)(a2 + 168))
    {
      v26 = *(void **)(a2 + 144);
      v27 = *(_QWORD *)(a2 + 152);
      v28 = v39;
      *(_QWORD *)(a2 + 144) = v38;
      *(_QWORD *)(a2 + 152) = v28;
      v38 = v26;
      v39 = v27;
      *(_DWORD *)(a2 + 160) = v40;
      v40 = 0;
    }
    else
    {
      v26 = 0;
      v29 = v39;
      v38 = 0;
      v39 = 0;
      *(_QWORD *)(a2 + 144) = v25;
      *(_QWORD *)(a2 + 152) = v29;
      *(_DWORD *)(a2 + 160) = v40;
      v40 = 0;
      *(_BYTE *)(a2 + 168) = 1;
    }
    free(v26);
  }
  v30 = *(_QWORD *)(a1 + 120);
  v31 = *(_QWORD *)(a1 + 128);
  v32 = (uint64_t *)(a1 + 120);
  if (v31 != v30)
  {
    vg::Vector2DToMatRX<unsigned int,3ul>(v32, (uint64_t)&v38);
    v33 = v38;
    if (*(_BYTE *)(a2 + 200))
    {
      v34 = *(void **)(a2 + 176);
      v35 = *(_QWORD *)(a2 + 184);
      v36 = v39;
      *(_QWORD *)(a2 + 176) = v38;
      *(_QWORD *)(a2 + 184) = v36;
      v38 = v34;
      v39 = v35;
      *(_DWORD *)(a2 + 192) = v40;
      v40 = 0;
    }
    else
    {
      v34 = 0;
      v37 = v39;
      v38 = 0;
      v39 = 0;
      *(_QWORD *)(a2 + 176) = v33;
      *(_QWORD *)(a2 + 184) = v37;
      *(_DWORD *)(a2 + 192) = v40;
      v40 = 0;
      *(_BYTE *)(a2 + 200) = 1;
    }
    free(v34);
  }
}

void sub_249D30708(_Unwind_Exception *a1)
{
  void **v1;

  vg::ObjMeshData::~ObjMeshData(v1);
  _Unwind_Resume(a1);
}

uint64_t vg::Vector2DToMatRX<float,3ul>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int v5;
  size_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *memptr;

  v4 = a1[1] - *a1;
  v5 = -1431655765 * (v4 >> 3);
  v6 = (((v4 >> 1) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v6 >> 2;
  memptr = 0;
  result = malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
  v8 = memptr;
  *(_QWORD *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v5;
  v9 = *a1;
  v10 = a1[1];
  v11 = v10 - *a1;
  if (v10 != *a1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    do
    {
      v15 = 0;
      v16 = *(_QWORD *)(v9 + 24 * v13);
      do
      {
        v8[(v12 + v15)] = *(_DWORD *)(v16 + 4 * v15);
        ++v15;
      }
      while (v15 != 3);
      v13 = (v13 + 1);
      v12 += 3;
    }
    while (v14 > v13);
  }
  return result;
}

uint64_t vg::Vector2DToMatRX<unsigned int,3ul>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int v5;
  size_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *memptr;

  v4 = a1[1] - *a1;
  v5 = -1431655765 * (v4 >> 3);
  v6 = (((v4 >> 1) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v6 >> 2;
  memptr = 0;
  result = malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
  v8 = memptr;
  *(_QWORD *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v5;
  v9 = *a1;
  v10 = a1[1];
  v11 = v10 - *a1;
  if (v10 != *a1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    do
    {
      v15 = 0;
      v16 = *(_QWORD *)(v9 + 24 * v13);
      do
      {
        v8[(v12 + v15)] = *(_DWORD *)(v16 + 4 * v15);
        ++v15;
      }
      while (v15 != 3);
      v13 = (v13 + 1);
      v12 += 3;
    }
    while (v14 > v13);
  }
  return result;
}

float vg::Vector2DToMatRX<float,2ul>@<S0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  size_t v5;
  float result;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *memptr;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v5 = (8 * (v4 & 0x7FFFFFFF) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x49090899uLL);
  v7 = memptr;
  *(_QWORD *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v4;
  v8 = *a1;
  v9 = a1[1];
  v10 = (char *)v9 - (char *)*a1;
  if (v9 != *a1)
  {
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    v13 = 1;
    do
    {
      v14 = *v8;
      v8 += 3;
      v7[v11] = *(_DWORD *)v14;
      result = *(float *)(v14 + 4);
      *(float *)((char *)v7 + ((4 * v11) | 4)) = result;
      v11 += 2;
    }
    while (v12 > v13++);
  }
  return result;
}

void vg::ObjMeshData::~ObjMeshData(void **this)
{
  if (*((_BYTE *)this + 200))
    free(this[22]);
  if (*((_BYTE *)this + 168))
    free(this[18]);
  if (*((_BYTE *)this + 136))
    free(this[14]);
  if (*((_BYTE *)this + 104))
    free(this[10]);
  if (*((_BYTE *)this + 72))
    free(this[6]);
  free(this[3]);
  free(*this);
}

void vg::ObjMeshDataToObjContents(vg *this@<X0>, uint64_t a2@<X8>)
{
  size_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  size_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  size_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  size_t v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  size_t v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  size_t v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  size_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  void *v54;
  size_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *memptr;

  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v5 = (4 * (3 * *((_DWORD *)this + 4)) + 31) & 0x7FFFFFFE0;
  v55 = v5 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x49090899uLL);
  v6 = memptr;
  v54 = memptr;
  v7 = *((_DWORD *)this + 4);
  v56 = 3;
  v57 = v7;
  if (v7)
  {
    v8 = (3 * v7);
    v9 = *(int **)this;
    v10 = 4 * v8;
    do
    {
      v11 = *v9++;
      *v6++ = v11;
      v10 -= 4;
    }
    while (v10);
  }
  vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
  if (&v58 != (uint64_t *)a2)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
  memptr = &v58;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
  free(v54);
  v12 = (4 * (3 * *((_DWORD *)this + 10)) + 31) & 0x7FFFFFFE0;
  v54 = 0;
  v55 = v12 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
  v13 = memptr;
  v54 = memptr;
  v14 = *((_DWORD *)this + 10);
  v56 = 3;
  v57 = v14;
  if (v14)
  {
    v15 = (3 * v14);
    v16 = (int *)*((_QWORD *)this + 3);
    v17 = 4 * v15;
    do
    {
      v18 = *v16++;
      *v13++ = v18;
      v17 -= 4;
    }
    while (v17);
  }
  vg::MatRXToVector2D<unsigned int>((uint64_t *)&v54, &v58);
  if ((uint64_t *)(a2 + 72) != &v58)
    std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 72, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
  memptr = &v58;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
  free(v54);
  if (*((_BYTE *)this + 72))
  {
    v19 = (4 * (2 * *((_DWORD *)this + 16)) + 31) & 0x7FFFFFFE0;
    v54 = 0;
    v55 = v19 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v19, 0x49090899uLL);
    v20 = memptr;
    v54 = memptr;
    v21 = *((_DWORD *)this + 16);
    v56 = 2;
    v57 = v21;
    v22 = (2 * v21);
    if ((_DWORD)v22)
    {
      v23 = (int *)*((_QWORD *)this + 6);
      v24 = 4 * v22;
      do
      {
        v25 = *v23++;
        *v20++ = v25;
        v24 -= 4;
      }
      while (v24);
    }
    vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 24) != &v58)
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2 + 24, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((_BYTE *)this + 104))
  {
    v26 = (4 * (3 * *((_DWORD *)this + 24)) + 31) & 0x7FFFFFFE0;
    v54 = 0;
    v55 = v26 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v26, 0x49090899uLL);
    v27 = memptr;
    v54 = memptr;
    v28 = *((_DWORD *)this + 24);
    v56 = 3;
    v57 = v28;
    if (v28)
    {
      v29 = (3 * v28);
      v30 = (int *)*((_QWORD *)this + 10);
      v31 = 4 * v29;
      do
      {
        v32 = *v30++;
        *v27++ = v32;
        v31 -= 4;
      }
      while (v31);
    }
    vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 48) != &v58)
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2 + 48, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((_BYTE *)this + 136))
  {
    v33 = (4 * (3 * *((_DWORD *)this + 32)) + 31) & 0x7FFFFFFE0;
    v54 = 0;
    v55 = v33 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v33, 0x49090899uLL);
    v34 = memptr;
    v54 = memptr;
    v35 = *((_DWORD *)this + 32);
    v56 = 3;
    v57 = v35;
    if (v35)
    {
      v36 = (3 * v35);
      v37 = (int *)*((_QWORD *)this + 14);
      v38 = 4 * v36;
      do
      {
        v39 = *v37++;
        *v34++ = v39;
        v38 -= 4;
      }
      while (v38);
    }
    vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 144) != &v58)
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2 + 144, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((_BYTE *)this + 168))
  {
    v40 = (4 * (3 * *((_DWORD *)this + 40)) + 31) & 0x7FFFFFFE0;
    v55 = v40 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v40, 0x49090899uLL);
    v41 = memptr;
    v54 = memptr;
    v42 = *((_DWORD *)this + 40);
    v56 = 3;
    v57 = v42;
    if (v42)
    {
      v43 = (3 * v42);
      v44 = (int *)*((_QWORD *)this + 18);
      v45 = 4 * v43;
      do
      {
        v46 = *v44++;
        *v41++ = v46;
        v45 -= 4;
      }
      while (v45);
    }
    vg::MatRXToVector2D<unsigned int>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 96) != &v58)
      std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 96, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((_BYTE *)this + 200))
  {
    v47 = (4 * (3 * *((_DWORD *)this + 48)) + 31) & 0x7FFFFFFE0;
    v55 = v47 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v47, 0x49090899uLL);
    v48 = memptr;
    v54 = memptr;
    v49 = *((_DWORD *)this + 48);
    v56 = 3;
    v57 = v49;
    if (v49)
    {
      v50 = (3 * v49);
      v51 = (int *)*((_QWORD *)this + 22);
      v52 = 4 * v50;
      do
      {
        v53 = *v51++;
        *v48++ = v53;
        v52 -= 4;
      }
      while (v52);
    }
    vg::MatRXToVector2D<unsigned int>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 120) != &v58)
      std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 120, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
}

void sub_249D30FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13)
{
  vg::ObjContents *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = &a13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  free(a10);
  vg::ObjContents::~ObjContents(v13);
  _Unwind_Resume(a1);
}

void vg::MatRXToVector2D<float>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  void *__p[3];

  v4 = *((unsigned int *)a1 + 5);
  std::vector<float>::vector(__p, *((unsigned int *)a1 + 4));
  std::vector<std::vector<float>>::vector(a2, v4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v5 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = *((unsigned int *)a1 + 4);
    v9 = *a1;
    v10 = *a2;
    do
    {
      if ((_DWORD)v8)
      {
        v11 = *(_DWORD **)(v10 + 24 * v7);
        v12 = v8;
        v13 = v6;
        do
        {
          *v11++ = *(_DWORD *)(v9 + 4 * v13++);
          --v12;
        }
        while (v12);
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v5);
  }
}

void sub_249D31104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vg::MatRXToVector2D<unsigned int>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::vector<unsigned int> v12;

  v4 = *((unsigned int *)a1 + 5);
  std::vector<unsigned int>::vector(&v12, *((unsigned int *)a1 + 4));
  std::vector<std::vector<unsigned int>>::vector(a2, v4, (uint64_t)&v12);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
  v5 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *a1;
    v8 = *a2;
    LODWORD(v9) = *((_DWORD *)a1 + 4);
    do
    {
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *(_QWORD *)(v8 + 24 * v6);
        do
        {
          *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v7 + 4 * (v10 + v6 * v9));
          ++v10;
          v9 = *((unsigned int *)a1 + 4);
        }
        while (v10 < v9);
        v5 = *((unsigned int *)a1 + 5);
      }
      ++v6;
    }
    while (v6 < v5);
  }
}

void sub_249D311D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vg::UniqueVertexFromObjContents@<X0>(vg *this@<X0>, uint64_t a2@<X8>)
{
  size_t prime;
  uint64_t *v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unint64_t i;
  uint64_t j;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  size_t v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  char *v33;
  unint64_t v34;
  uint32x4_t v35;
  uint32x2_t v36;
  uint32x4_t v37;
  void **v38;
  unint64_t v39;
  uint32x4_t v40;
  uint32x2_t v41;
  uint32x4_t v42;
  float v43;
  _BOOL4 v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD **v50;
  size_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *k;
  size_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  char *begin;
  void *v62;
  char *v63;
  uint64_t *v64;
  uint64_t *m;
  __int128 v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  std::vector<unsigned int> v77;
  void *__p[2];
  __int128 v79;
  float v80;
  uint64_t __src;
  __int32 v82;
  _BYTE v83[20];

  *(_QWORD *)&v83[4] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a2 + 48) = 0u;
  v5 = (uint64_t *)(a2 + 48);
  *(_OWORD *)(a2 + 96) = 0u;
  v6 = a2 + 96;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v72 = (_QWORD *)(a2 + 72);
  *(_OWORD *)a2 = 0u;
  std::vector<std::vector<unsigned int>>::resize((uint64_t *)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3));
  v70 = v6;
  v71 = v5;
  *(_OWORD *)__p = 0u;
  v79 = 0u;
  v80 = 1.0;
  std::vector<unsigned int>::vector(&v77, 3uLL);
  if (*((_QWORD *)this + 10) != *((_QWORD *)this + 9))
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3); ++i)
    {
      for (j = 0; j != 3; ++j)
      {
        v11 = (uint64_t *)(*(_QWORD *)this + 24
                                          * *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 9) + 24 * i) + 4 * j));
        v12 = *v11;
        v13 = v11[1] - *v11;
        if (v13)
          v14 = v13 >= 9;
        else
          v14 = 0;
        if (!v14)
LABEL_144:
          std::vector<float>::__throw_out_of_range[abi:ne180100]();
        v7.i64[0] = *(_QWORD *)v12;
        v15 = *(_DWORD *)(v12 + 8);
        v16 = *((_QWORD *)this + 12);
        if (*((_QWORD *)this + 13) == v16)
        {
          v20 = 0;
        }
        else
        {
          v17 = *((_QWORD *)this + 3) + 24 * *(unsigned int *)(*(_QWORD *)(v16 + 24 * i) + 4 * j);
          v18 = *(_QWORD *)(v17 + 8) - *(_QWORD *)v17;
          if (v18)
            v19 = v18 >= 5;
          else
            v19 = 0;
          if (!v19)
            goto LABEL_144;
          v20 = **(float32x2_t **)v17;
        }
        v21 = *((_QWORD *)this + 15);
        if (*((_QWORD *)this + 16) == v21)
        {
          v8 = 0uLL;
        }
        else
        {
          v22 = (uint64_t *)(*((_QWORD *)this + 6) + 24 * *(unsigned int *)(*(_QWORD *)(v21 + 24 * i) + 4 * j));
          v23 = *v22;
          v24 = v22[1] - *v22;
          if (v24)
            v25 = v24 > 8;
          else
            v25 = 0;
          if (!v25)
            goto LABEL_144;
          v8.i64[0] = *(_QWORD *)v23;
          v8.i32[2] = *(_DWORD *)(v23 + 8);
        }
        v74 = v8;
        v8 = v7;
        v8.i32[2] = v15;
        v75 = v8;
        v26 = v7.i32[0] ^ (v7.i32[1] << 15) ^ (v15 << 31);
        v27 = (unint64_t)__p[1];
        if (__p[1])
        {
          v28 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v28.i16[0] = vaddlv_u8(v28);
          v29 = v28.u32[0];
          if (v28.u32[0] > 1uLL)
          {
            v30 = v26;
            if (__p[1] <= (void *)v26)
              v30 = v26 % (size_t)__p[1];
          }
          else
          {
            v30 = (LODWORD(__p[1]) - 1) & v26;
          }
          v32 = (void **)*((_QWORD *)__p[0] + v30);
          if (v32)
          {
            v33 = (char *)*v32;
            if (*v32)
            {
              do
              {
                v34 = *((_QWORD *)v33 + 1);
                if (v34 == v26)
                {
                  v35 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 1), v8);
                  v35.i32[3] = v35.i32[2];
                  if ((vminvq_u32(v35) & 0x80000000) != 0)
                  {
                    v36 = (uint32x2_t)vceq_f32(*(float32x2_t *)(v33 + 32), v20);
                    if ((vpmin_u32(v36, v36).u32[0] & 0x80000000) != 0)
                    {
                      v7.i64[1] = v74.i64[1];
                      v37 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 3), v74);
                      v37.i32[3] = v37.i32[2];
                      if ((vminvq_u32(v37) & 0x80000000) != 0)
                        goto LABEL_117;
                    }
                  }
                }
                else
                {
                  if (v29 > 1)
                  {
                    if ((void *)v34 >= __p[1])
                      v34 %= (unint64_t)__p[1];
                  }
                  else
                  {
                    v34 &= (unint64_t)__p[1] - 1;
                  }
                  if (v34 != v30)
                    break;
                }
                v33 = *(char **)v33;
              }
              while (v33);
            }
          }
          if (v29 > 1)
          {
            prime = v26;
            if (__p[1] <= (void *)v26)
              prime = v26 % (size_t)__p[1];
          }
          else
          {
            prime = (LODWORD(__p[1]) - 1) & v26;
          }
          v31 = *((_QWORD *)&v79 + 1);
          v38 = (void **)*((_QWORD *)__p[0] + prime);
          if (v38)
          {
            v33 = (char *)*v38;
            if (*v38)
            {
              do
              {
                v39 = *((_QWORD *)v33 + 1);
                if (v39 == v26)
                {
                  v40 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 1), v8);
                  v40.i32[3] = v40.i32[2];
                  if ((vminvq_u32(v40) & 0x80000000) != 0)
                  {
                    v41 = (uint32x2_t)vceq_f32(*(float32x2_t *)(v33 + 32), v20);
                    if ((vpmin_u32(v41, v41).u32[0] & 0x80000000) != 0)
                    {
                      v7.i64[1] = v74.i64[1];
                      v42 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 3), v74);
                      v42.i32[3] = v42.i32[2];
                      if ((vminvq_u32(v42) & 0x80000000) != 0)
                        goto LABEL_117;
                    }
                  }
                }
                else
                {
                  if (v29 > 1)
                  {
                    if ((void *)v39 >= __p[1])
                      v39 %= (unint64_t)__p[1];
                  }
                  else
                  {
                    v39 &= (unint64_t)__p[1] - 1;
                  }
                  if (v39 != prime)
                    break;
                }
                v33 = *(char **)v33;
              }
              while (v33);
            }
          }
        }
        else
        {
          v31 = *((_QWORD *)&v79 + 1);
        }
        v33 = (char *)operator new(0x50uLL);
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = v26;
        *((float32x4_t *)v33 + 1) = v75;
        *((float32x2_t *)v33 + 4) = v20;
        *((float32x4_t *)v33 + 3) = v74;
        *((_DWORD *)v33 + 16) = v31;
        *(_QWORD *)(v33 + 68) = __src;
        *((_DWORD *)v33 + 19) = v82;
        v43 = (float)(unint64_t)(v31 + 1);
        if (v27 && (float)(v80 * (float)v27) >= v43)
        {
          v26 = prime;
          goto LABEL_107;
        }
        v44 = (v27 & (v27 - 1)) == 0;
        if (v27 < 3)
          v44 = 0;
        v45 = (2 * v27) | !v44;
        v46 = vcvtps_u32_f32(v43 / v80);
        if (v45 <= v46)
          prime = v46;
        else
          prime = v45;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v27 = (unint64_t)__p[1];
        }
        if (prime <= v27)
        {
          if (prime >= v27)
            goto LABEL_103;
          v53 = vcvtps_u32_f32((float)*((unint64_t *)&v79 + 1) / v80);
          if (v27 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
          {
            v53 = std::__next_prime(v53);
          }
          else
          {
            v55 = 1 << -(char)__clz(v53 - 1);
            if (v53 >= 2)
              v53 = v55;
          }
          if (prime <= v53)
            prime = v53;
          if (prime >= v27)
          {
            v27 = (unint64_t)__p[1];
            goto LABEL_103;
          }
          if (!prime)
          {
            v62 = __p[0];
            __p[0] = 0;
            if (v62)
              operator delete(v62);
            v27 = 0;
            __p[1] = 0;
            goto LABEL_103;
          }
        }
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v47 = operator new(8 * prime);
        v48 = __p[0];
        __p[0] = v47;
        if (v48)
          operator delete(v48);
        v49 = 0;
        __p[1] = (void *)prime;
        do
          *((_QWORD *)__p[0] + v49++) = 0;
        while (prime != v49);
        v50 = (_QWORD **)v79;
        if ((_QWORD)v79)
        {
          v51 = *(_QWORD *)(v79 + 8);
          v52 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            if (v51 >= prime)
              v51 %= prime;
          }
          else
          {
            v51 &= prime - 1;
          }
          *((_QWORD *)__p[0] + v51) = &v79;
          for (k = *v50; k; v51 = v57)
          {
            v57 = k[1];
            if (v52.u32[0] > 1uLL)
            {
              if (v57 >= prime)
                v57 %= prime;
            }
            else
            {
              v57 &= prime - 1;
            }
            if (v57 != v51)
            {
              if (!*((_QWORD *)__p[0] + v57))
              {
                *((_QWORD *)__p[0] + v57) = v50;
                goto LABEL_99;
              }
              *v50 = (_QWORD *)*k;
              *k = **((_QWORD **)__p[0] + v57);
              **((_QWORD **)__p[0] + v57) = k;
              k = v50;
            }
            v57 = v51;
LABEL_99:
            v50 = (_QWORD **)k;
            k = (_QWORD *)*k;
          }
        }
        v27 = prime;
LABEL_103:
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v27 <= v26)
            v26 %= v27;
        }
        else
        {
          v26 = ((_DWORD)v27 - 1) & v26;
        }
LABEL_107:
        v58 = __p[0];
        v59 = (_QWORD *)*((_QWORD *)__p[0] + v26);
        if (v59)
        {
          *(_QWORD *)v33 = *v59;
LABEL_115:
          *v59 = v33;
          goto LABEL_116;
        }
        *(_QWORD *)v33 = v79;
        *(_QWORD *)&v79 = v33;
        v58[v26] = &v79;
        if (*(_QWORD *)v33)
        {
          v60 = *(_QWORD *)(*(_QWORD *)v33 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v60 >= v27)
              v60 %= v27;
          }
          else
          {
            v60 &= v27 - 1;
          }
          v59 = (char *)__p[0] + 8 * v60;
          goto LABEL_115;
        }
LABEL_116:
        ++*((_QWORD *)&v79 + 1);
LABEL_117:
        begin = (char *)v77.__begin_;
        v77.__begin_[j] = *((_DWORD *)v33 + 16);
      }
      v63 = (char *)(*v72 + 24 * i);
      if (v63 != (char *)&v77)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v63, begin, (uint64_t)v77.__end_, ((char *)v77.__end_ - begin) >> 2);
    }
  }
  std::vector<std::vector<float>>::resize((uint64_t *)a2, *((unint64_t *)&v79 + 1));
  v64 = (uint64_t *)(a2 + 24);
  if (*((_QWORD *)this + 12) != *((_QWORD *)this + 13))
  {
    std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(v70, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
    std::vector<std::vector<float>>::resize(v64, *((unint64_t *)&v79 + 1));
  }
  if (*((_QWORD *)this + 15) != *((_QWORD *)this + 16))
  {
    std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 120, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
    std::vector<std::vector<float>>::resize(v71, *((unint64_t *)&v79 + 1));
  }
  for (m = (uint64_t *)v79; m; m = (uint64_t *)*m)
  {
    v66 = *((_OWORD *)m + 1);
    v67 = m[4];
    v76 = *((float32x4_t *)m + 3);
    v68 = *((_DWORD *)m + 16);
    __src = m[2];
    v82 = DWORD2(v66);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(*(_QWORD *)a2 + 24 * v68), (char *)&__src, (uint64_t)v83, 3uLL);
    if (*((_QWORD *)this + 12) != *((_QWORD *)this + 13))
    {
      __src = v67;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(*v64 + 24 * v68), (char *)&__src, (uint64_t)&v82, 2uLL);
    }
    if (*((_QWORD *)this + 15) != *((_QWORD *)this + 16))
    {
      __src = v76.i64[0];
      v82 = v76.i32[2];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(*v71 + 24 * v68), (char *)&__src, (uint64_t)v83, 3uLL);
    }
  }
  if (v77.__begin_)
  {
    v77.__end_ = v77.__begin_;
    operator delete(v77.__begin_);
  }
  return std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table((uint64_t)__p);
}

void sub_249D31A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, vg::ObjContents *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table((uint64_t)&a21);
  vg::ObjContents::~ObjContents(a12);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void vg::ObjRead(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v4[192];

  vg::ObjIO::read(a1, a2, (uint64_t)v4);
  vg::ObjContentsToObjMeshData((uint64_t)v4, a3);
  vg::ObjContents::~ObjContents((vg::ObjContents *)v4);
}

void sub_249D31C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vg::ObjContents::~ObjContents((vg::ObjContents *)&a9);
  _Unwind_Resume(a1);
}

uint64_t vg::ObjRead@<X0>(vg *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  void *exception;
  __n128 v8;
  std::string v9;
  std::string v10;
  _QWORD v11[2];
  _QWORD v12[51];
  _QWORD v13[20];

  v3 = (char)a2;
  v13[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v11);
  if (!v12[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, (char *)this);
    v8 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v9, &v10);
    MEMORY[0x24BD02AE4](exception, &v10, v8);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  vg::ObjRead(v11, v3, a3);
  v11[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x24BD02B8C](v12);
  std::istream::~istream();
  return MEMORY[0x24BD02D00](v13);
}

void sub_249D31D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void vg::ObjWrite(vg *a1, uint64_t *a2)
{
  _QWORD v3[24];

  vg::ObjMeshDataToObjContents(a1, (uint64_t)v3);
  vg::ObjIO::write(v3, a2);
  vg::ObjContents::~ObjContents((vg::ObjContents *)v3);
}

void sub_249D31E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vg::ObjContents::~ObjContents((vg::ObjContents *)&a9);
  _Unwind_Resume(a1);
}

uint64_t vg::ObjWrite(vg *this, const vg::ObjMeshData *a2, const char *a3)
{
  void *exception;
  __n128 v7;
  std::string v8;
  std::string v9;
  uint64_t v10;
  _QWORD v11[51];
  _QWORD v12[20];

  v12[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v10);
  if (!v11[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)a2);
    v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v8, &v9);
    MEMORY[0x24BD02AE4](exception, &v9, v7);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  vg::ObjWrite(this, &v10);
  v10 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x24BD02B8C](v11);
  std::ostream::~ostream();
  return MEMORY[0x24BD02D00](v12);
}

void sub_249D31F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  void *v21;
  int v22;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::ofstream::~ofstream(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](a1);
  return a1;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_249D3229C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_249D323B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_249D32414(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_249D3251C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<float>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_249D32680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<float>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_249D32718(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_249D329A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_249D329A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_249D32A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_249D32CFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_249D32D04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_249D32DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_249D32F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<float>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_249D330B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x24BD02B98](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_249D331F8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x249D331C4);
  }
  __cxa_rethrow();
}

void sub_249D3323C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned int>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_249D332E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t vg::shared::VGE5RT::modelVersion@<X0>(_QWORD *a1@<X8>)
{
  uint64_t FunctionMetadata;
  void *v3;
  void *v4;
  char *v5;
  uint64_t result;
  void *__p;
  char v8;
  uint64_t v9;

  E5RT::ProgramLibrary::OpenLibrary();
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "unknown");
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "main");
  FunctionMetadata = E5RT::ProgramLibrary::GetFunctionMetadata();
  v3 = (void *)FunctionMetadata;
  if (v8 < 0)
  {
    operator delete(__p);
    if (v3)
      goto LABEL_4;
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(a1, "unknown");
    goto LABEL_11;
  }
  if (!FunctionMetadata)
    goto LABEL_8;
LABEL_4:
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UserVersion"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    v5 = (char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String");
  else
    v5 = "unknown";
  std::string::basic_string[abi:ne180100]<0>(a1, v5);

LABEL_11:
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_249D33404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t vg::shared::VGE5RT::isANESupported(vg::shared::VGE5RT *this)
{
  void *v1;
  uint64_t v2;
  NSObject *v3;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BE086D8], "aneSubType");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("h11")) & 1) != 0)
    v2 = 0;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("h12")) ^ 1;
  __VGLogSharedInstance();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = objc_msgSend(objc_retainAutorelease(v1), "UTF8String");
    v7 = 1024;
    v8 = v2;
    _os_log_impl(&dword_249CAD000, v3, OS_LOG_TYPE_INFO, " Support for ANE %s: %d ", (uint8_t *)&v5, 0x12u);
  }

  return v2;
}

void sub_249D33564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t vg::shared::VGE5RT::isOutputSurfaceSupported(vg::shared::VGE5RT *this)
{
  return 1;
}

BOOL vg::shared::VGE5RT::isTensorComponentFloat16(vg::shared::VGE5RT *this, const E5RT::TensorDescriptor *a2)
{
  _BOOL8 v2;
  _BYTE v4[16];

  E5RT::TensorDescriptor::GetTensorDataType(this);
  v2 = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v4) == 4
    && E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v4) == 2;
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v4);
  return v2;
}

void sub_249D335F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  _Unwind_Resume(a1);
}

BOOL vg::shared::VGE5RT::isPortFloat16(E5RT::IOPort **a1)
{
  E5RT::OperandDescriptor *PortDescriptorRef;
  vg::shared::VGE5RT *v2;
  const E5RT::TensorDescriptor *v3;

  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*a1);
  v2 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  return vg::shared::VGE5RT::isTensorComponentFloat16(v2, v3);
}

id vg::shared::VGE5RT::tensorSurfaceProperties(vg::shared::VGE5RT *this, const E5RT::TensorDescriptor *a2)
{
  uint64_t TensorShape;
  uint64_t TensorStrides;
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const E5RT::TensorDescriptor *v12;
  _BOOL4 isTensorComponentFloat16;
  void *v14;
  void *v15;
  _BYTE v17[16];
  _QWORD v18[5];
  _QWORD v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  E5RT::TensorDescriptor::GetTensorDataType(this);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(this);
  NumElements = E5RT::TensorDescriptor::GetNumElements(this);
  v6 = *(_QWORD *)(*(_QWORD *)(TensorShape + 8) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(TensorStrides + 8) - 16);
  v18[0] = *MEMORY[0x24BDD8D90];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v8;
  v18[1] = *MEMORY[0x24BDD8D58];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", NumElements / v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v19[1] = v9;
  v18[2] = *MEMORY[0x24BDD8D38];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedChar:", E5RT::TensorDataType::GetElementSize((E5RT::TensorDataType *)v17));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v19[2] = v10;
  v18[3] = *MEMORY[0x24BDD8D40];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[3] = v11;
  v18[4] = *MEMORY[0x24BDD8D60];
  isTensorComponentFloat16 = vg::shared::VGE5RT::isTensorComponentFloat16(this, v12);
  v14 = &unk_251B34EE0;
  if (isTensorComponentFloat16)
    v14 = &unk_251B34EC8;
  v19[4] = v14;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, v18, 5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v17);
  return v15;
}

void sub_249D337DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

id vg::shared::VGE5RT::convert1DVectorToSurface(uint64_t a1, vg::shared::VGE5RT *this)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  void *v9;
  const E5RT::TensorDescriptor *v10;
  NSObject *v11;
  uint8_t v13[16];

  vg::shared::VGE5RT::tensorSurfaceProperties(this, this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D90]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D58]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_DWORD *)(a1 + 16);
  v8 = objc_msgSend(v5, "unsignedIntValue");
  if (v7 == objc_msgSend(v6, "unsignedIntValue") * v8)
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v4);
    if (vg::shared::VGE5RT::isTensorComponentFloat16(this, v10))
      _ZN2vg6shared6VGE5RT6detail24write1DVectorToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj1ELb0EEE(v9, (_QWORD *)a1);
    else
      vg::shared::VGE5RT::detail::write1DVectorToIOSurface<float>(v9, (_QWORD *)a1);
  }
  else
  {
    __VGLogSharedInstance();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_ERROR, " vector size mismatch. ", v13, 2u);
    }

    v9 = 0;
  }

  return v9;
}

void sub_249D33978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void _ZN2vg6shared6VGE5RT6detail24write1DVectorToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj1ELb0EEE(void *a1, _QWORD *a2)
{
  IOSurface *v3;
  unint64_t i;
  unint64_t j;
  id v11[5];

  v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v11, v3, 0);
  for (i = 0; i < -[IOSurface height](v3, "height"); ++i)
  {
    for (j = 0; j < -[IOSurface width](v3, "width"); ++j)
    {
      _S0 = *(_DWORD *)(*a2 + 4 * (j + (_DWORD)i * -[IOSurface width](v3, "width")));
      __asm { FCVT            H0, S0 }
      *(_WORD *)((char *)v11[2] + (unint64_t)v11[3] * i + (unint64_t)v11[4] * j) = _S0;
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v11);

}

void sub_249D33A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::detail::write1DVectorToIOSurface<float>(void *a1, _QWORD *a2)
{
  IOSurface *v3;
  unint64_t i;
  unint64_t j;
  int v6;
  id v7[5];

  v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v7, v3, 0);
  for (i = 0; i < -[IOSurface height](v3, "height"); ++i)
  {
    for (j = 0; j < -[IOSurface width](v3, "width"); ++j)
    {
      v6 = -[IOSurface width](v3, "width");
      *(_DWORD *)((char *)v7[2] + (unint64_t)v7[3] * i + (unint64_t)v7[4] * j) = *(_DWORD *)(*a2 + 4 * (j + i * v6));
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v7);

}

void sub_249D33B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::convertSurfaceTo1DVector(vg::shared::VGE5RT *this@<X0>, IOSurface *a2@<X1>, const E5RT::TensorDescriptor *a3@<X2>, uint64_t a4@<X8>)
{
  const E5RT::TensorDescriptor *v6;
  void *v7;
  int v8;
  unsigned int v9;
  size_t v10;
  _DWORD *v11;
  vg::shared::VGE5RT *v12;
  const E5RT::TensorDescriptor *v13;
  _BOOL4 isTensorComponentFloat16;
  unsigned int i;
  int v16;
  int v17;
  unint64_t j;
  int v19;
  uint64_t v20;
  void *v27;
  void (**v28)(_QWORD);
  vg::shared::VGE5RT *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  vg::shared::VGE5RT *v33;
  void *memptr;

  v29 = this;
  vg::shared::VGE5RT::tensorSurfaceProperties((vg::shared::VGE5RT *)a2, v6);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D90]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D58]);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D40]);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "unsignedIntValue");
  v9 = objc_msgSend(v30, "unsignedIntValue") * v8;
  v10 = (4 * v9 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v10 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
  v11 = memptr;
  *(_QWORD *)a4 = memptr;
  *(_DWORD *)(a4 + 16) = v9;
  -[vg::shared::VGE5RT lockWithOptions:seed:](v29, "lockWithOptions:seed:", 0, 0);
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 3221225472;
  v32[2] = ___ZN2vg6shared6VGE5RT24convertSurfaceTo1DVectorEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke;
  v32[3] = &unk_251B22CB8;
  v12 = v29;
  v33 = v12;
  v28 = (void (**)(_QWORD))MEMORY[0x24BD03294](v32);
  isTensorComponentFloat16 = vg::shared::VGE5RT::isTensorComponentFloat16((vg::shared::VGE5RT *)a2, v13);
  for (i = 0; i < objc_msgSend(v30, "unsignedIntValue"); ++i)
  {
    v16 = 0;
    v17 = 0;
    for (j = 0; j < objc_msgSend(v7, "unsignedIntValue"); ++j)
    {
      v19 = j + i * objc_msgSend(v7, "unsignedIntValue");
      v20 = -[vg::shared::VGE5RT baseAddress](objc_retainAutorelease(v12), "baseAddress");
      if (isTensorComponentFloat16)
      {
        _H0 = *(_WORD *)(v20 + objc_msgSend(v31, "unsignedIntValue") * i + (v17 & 0xFFFFFFFE));
        __asm { FCVT            S0, H0 }
      }
      else
      {
        _S0 = *(_DWORD *)(v20 + objc_msgSend(v31, "unsignedIntValue") * i + (v16 & 0xFFFFFFFC));
      }
      v11[v19] = _S0;
      v17 += 2;
      v16 += 4;
    }
  }
  v28[2](v28);

}

void sub_249D33DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  free(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg6shared6VGE5RT24convertSurfaceTo1DVectorEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

id vg::shared::VGE5RT::convert2DMatrixToSurface(uint64_t a1, vg::shared::VGE5RT *this)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  void *v9;
  const E5RT::TensorDescriptor *v10;
  NSObject *v11;
  uint8_t v13[16];

  vg::shared::VGE5RT::tensorSurfaceProperties(this, this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D90]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D58]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_DWORD *)(a1 + 20);
  if (v7 == objc_msgSend(v5, "unsignedIntValue")
    && (v8 = *(_DWORD *)(a1 + 16), v8 == objc_msgSend(v6, "unsignedIntValue")))
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD8DE8]), "initWithProperties:", v4);
    if (vg::shared::VGE5RT::isTensorComponentFloat16(this, v10))
      _ZN2vg6shared6VGE5RT6detail24write2DMatrixToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj0ELb0EEE(v9, a1);
    else
      vg::shared::VGE5RT::detail::write2DMatrixToIOSurface<float>(v9, a1);
  }
  else
  {
    __VGLogSharedInstance();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_249CAD000, v11, OS_LOG_TYPE_ERROR, " matrix size mismatch. ", v13, 2u);
    }

    v9 = 0;
  }

  return v9;
}

void sub_249D33FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void _ZN2vg6shared6VGE5RT6detail24write2DMatrixToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj0ELb0EEE(void *a1, uint64_t a2)
{
  IOSurface *v3;
  unint64_t i;
  unint64_t j;
  id v11[5];

  v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v11, v3, 0);
  for (i = 0; i < -[IOSurface height](v3, "height"); ++i)
  {
    for (j = 0; j < -[IOSurface width](v3, "width"); ++j)
    {
      _S0 = *(_DWORD *)(*(_QWORD *)a2 + 4 * (i + *(_DWORD *)(a2 + 16) * j));
      __asm { FCVT            H0, S0 }
      *(_WORD *)((char *)v11[2] + (unint64_t)v11[3] * i + (unint64_t)v11[4] * j) = _S0;
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v11);

}

void sub_249D34094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::detail::write2DMatrixToIOSurface<float>(void *a1, uint64_t a2)
{
  IOSurface *v3;
  unint64_t i;
  unint64_t j;
  id v6[5];

  v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v6, v3, 0);
  for (i = 0; i < -[IOSurface height](v3, "height"); ++i)
  {
    for (j = 0; j < -[IOSurface width](v3, "width"); ++j)
      *(_DWORD *)((char *)v6[2] + (unint64_t)v6[3] * i + (unint64_t)v6[4] * j) = *(_DWORD *)(*(_QWORD *)a2 + 4 * (i + *(_DWORD *)(a2 + 16) * j));
  }
  vg::IOSurfaceData::~IOSurfaceData(v6);

}

void sub_249D34164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::convertSurfaceTo2DMatrix(vg::shared::VGE5RT *this@<X0>, IOSurface *a2@<X1>, const E5RT::TensorDescriptor *a3@<X2>, uint64_t a4@<X8>)
{
  vg::shared::VGE5RT *v6;
  const E5RT::TensorDescriptor *v7;
  int v8;
  int v9;
  size_t v10;
  _DWORD *v11;
  vg::shared::VGE5RT *v12;
  const E5RT::TensorDescriptor *v13;
  _BOOL4 isTensorComponentFloat16;
  unsigned int i;
  int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void *v27;
  void (**v28)(_QWORD);
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  vg::shared::VGE5RT *v33;
  void *memptr;

  v6 = this;
  vg::shared::VGE5RT::tensorSurfaceProperties((vg::shared::VGE5RT *)a2, v7);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D90]);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D58]);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDD8D40]);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v29, "unsignedIntValue");
  v9 = objc_msgSend(v31, "unsignedIntValue");
  v10 = (4 * (v9 * v8) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v10 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
  v11 = memptr;
  *(_QWORD *)a4 = memptr;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 20) = v9;
  -[vg::shared::VGE5RT lockWithOptions:seed:](v6, "lockWithOptions:seed:", 0, 0);
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 3221225472;
  v32[2] = ___ZN2vg6shared6VGE5RT24convertSurfaceTo2DMatrixEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke;
  v32[3] = &unk_251B22CB8;
  v12 = v6;
  v33 = v12;
  v28 = (void (**)(_QWORD))MEMORY[0x24BD03294](v32);
  isTensorComponentFloat16 = vg::shared::VGE5RT::isTensorComponentFloat16((vg::shared::VGE5RT *)a2, v13);
  for (i = 0; i < objc_msgSend(v29, "unsignedIntValue"); ++i)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = i;
    while (v18 < objc_msgSend(v31, "unsignedIntValue"))
    {
      v20 = -[vg::shared::VGE5RT baseAddress](objc_retainAutorelease(v12), "baseAddress");
      if (isTensorComponentFloat16)
      {
        _H0 = *(_WORD *)(v20 + objc_msgSend(v30, "unsignedIntValue") * i + (v17 & 0xFFFFFFFE));
        __asm { FCVT            S0, H0 }
      }
      else
      {
        _S0 = *(_DWORD *)(v20 + objc_msgSend(v30, "unsignedIntValue") * i + (v16 & 0xFFFFFFFC));
      }
      v11[v19] = _S0;
      ++v18;
      v19 += v8;
      v17 += 2;
      v16 += 4;
    }
  }
  v28[2](v28);

}

void sub_249D343E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  free(v20);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg6shared6VGE5RT24convertSurfaceTo2DMatrixEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithOptions:seed:", 0, 0);
}

void vg::shared::VGE5RT::compileModel(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  E5RT::E5CompilerOptions *v7;
  _QWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  E5RT::E5Compiler *v11;
  _QWORD *ExportedFunctions;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t *v22;
  void *v23;
  NSObject *v24;
  uint64_t *v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  E5RT::ProgramLibrary *v32;
  uint8_t buf[8];
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE __p[12];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  VGLogVGE5RT();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CompileE5RTModel", (const char *)&unk_249D51699, buf, 2u);
  }

  E5RT::E5CompilerOptions::Create(v7);
  v8 = operator new(8uLL);
  *v8 = 1;
  v34 = v8 + 1;
  v35 = v8 + 1;
  *(_QWORD *)buf = v8;
  if (a2)
  {
    v9 = operator new(0x10uLL);
    *v9 = xmmword_249D3D1C0;
    v10 = v9 + 1;
    *(_QWORD *)buf = v9;
    v34 = v9 + 1;
    v35 = v9 + 1;
    operator delete(v8);
    v34 = v10;
  }
  v11 = (E5RT::E5Compiler *)E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  E5RT::E5Compiler::GetCompiler(v11);
  E5RT::E5Compiler::Compile();
  if (!v32)
  {
    VGLogVGE5RT();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a1 + 23) >= 0)
        v25 = a1;
      else
        v25 = (uint64_t *)*a1;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      vg::shared::VGE5RT::compileModel(v26, __p, v24);
    }

    goto LABEL_36;
  }
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(v32);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(ExportedFunctions, __p);
  v14 = v13;
  if (v38 < 0)
  {
    operator delete(*(void **)__p);
    if (v14)
      goto LABEL_8;
    goto LABEL_33;
  }
  if (!v13)
  {
LABEL_33:
    VGLogVGE5RT();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      vg::shared::VGE5RT::compileModel(v27);

LABEL_36:
    *a3 = 0;
    goto LABEL_37;
  }
LABEL_8:
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(ExportedFunctions, __p);
  if (!v15)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v29 = *((_QWORD *)v15 + 5);
  v30 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v38 < 0)
    operator delete(*(void **)__p);
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  VGLogVGE5RT();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0)
      v22 = a1;
    else
      v22 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v22, v29);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__p = 138412290;
    *(_QWORD *)&__p[4] = v23;
    _os_log_impl(&dword_249CAD000, v21, OS_LOG_TYPE_INFO, "successfully compiled model in: %@", __p, 0xCu);

  }
  if (v31)
    (*(void (**)())(*(_QWORD *)v31 + 8))();
LABEL_37:
  if (v32)
    (*(void (**)())(*(_QWORD *)v32 + 8))();
  if (*(_QWORD *)buf)
  {
    v34 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  v28 = v36;
  v36 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  ___ZN2vg6shared6VGE5RT12compileModelERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb_block_invoke();
}

void sub_249D347FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (__p)
    operator delete(__p);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  ___ZN2vg6shared6VGE5RT12compileModelERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb_block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGE5RT(void)
{
  if (VGLogVGE5RT(void)::onceToken != -1)
    dispatch_once(&VGLogVGE5RT(void)::onceToken, &__block_literal_global_15);
  return (id)VGLogVGE5RT(void)::handle;
}

void ___ZN2vg6shared6VGE5RT12compileModelERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  VGLogVGE5RT();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_249CAD000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CompileE5RTModel", (const char *)&unk_249D51699, v1, 2u);
  }

}

void ___ZL11VGLogVGE5RTv_block_invoke()
{
  os_log_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x24BDD1488], "vg_bundleIdentifier");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v0 = os_log_create((const char *)objc_msgSend(v2, "UTF8String"), "VGE5RT");
  v1 = (void *)VGLogVGE5RT(void)::handle;
  VGLogVGE5RT(void)::handle = (uint64_t)v0;

}

void sub_249D34A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::compileModel(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, "failed to compile model: %@", buf, 0xCu);

}

void vg::shared::VGE5RT::compileModel(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_249CAD000, log, OS_LOG_TYPE_ERROR, "cannot find main function in compiled library.", v1, 2u);
}

void sub_249D34BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D34D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_249D34E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x24BE1A1B0]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x24BDBB930](arg);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x24BDBC850](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD900](retstr, t, sx, sy);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDBB8](name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x24BDBDC10](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x24BDBDC60](space);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x24BDBE168](provider);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x24BDBE630](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x24BDBE638](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x24BDBE648](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBE658](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE668](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x24BDBE770](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x24BDD9148](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9170](data, options);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFC8]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEFD0]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFE0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF010]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF018]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF020]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x24BDBF050]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x24BDBF068](dict, rect);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x24BDC0450](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x24BDC0468](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x24BDC0490](time);
  return result;
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x24BDC04C0](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

uint64_t CVAFaceTrackingCopySemantics()
{
  return MEMORY[0x24BE05958]();
}

uint64_t CVAFaceTrackingCreate()
{
  return MEMORY[0x24BE05960]();
}

uint64_t CVAFaceTrackingProcess()
{
  return MEMORY[0x24BE05968]();
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  MEMORY[0x24BDC5160](sourceBuffer, destinationBuffer);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5250](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5258](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *dataPtr, size_t dataSize, size_t numberOfPlanes, void **planeBaseAddress, size_t *planeWidth, size_t *planeHeight, size_t *planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5260](allocator, width, height, *(_QWORD *)&pixelFormatType, dataPtr, dataSize, numberOfPlanes, planeBaseAddress);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D8](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52F8](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x24BDC5318](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5320](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
  MEMORY[0x24BDC5358](pixelBufferPool);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x24BDC5398](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

size_t IOSurfaceAlignProperty(CFStringRef property, size_t value)
{
  return MEMORY[0x24BDD8B28](property, value);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C48](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8CD0](buffer);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t IR::IRDataLoader::writeIRFile()
{
  return MEMORY[0x24BED2E58]();
}

uint64_t IR::IRCoordinates::set()
{
  return MEMORY[0x24BED2E98]();
}

uint64_t IR::IRCoordinates::IRCoordinates(IR::IRCoordinates *this)
{
  return MEMORY[0x24BED2EA0](this);
}

uint64_t IR::IRData::getCoordinateTree(IR::IRData *this)
{
  return MEMORY[0x24BED2EB0](this);
}

uint64_t IR::IRData::createSoundProfilePack(IR::IRData *this, const IR::IRData *a2, const IR::IRData *a3, const void *a4, const __CFString *a5)
{
  return MEMORY[0x24BED2EB8](this, a2, a3, a4, a5);
}

uint64_t IR::IRData::IRData()
{
  return MEMORY[0x24BED2EC0]();
}

void IR::IRData::~IRData(IR::IRData *this)
{
  MEMORY[0x24BED2EC8](this);
}

uint64_t cva::ItemHandler::createData(cva::ItemHandler *this, const __CFData *a2)
{
  return MEMORY[0x24BE1A200](this, a2);
}

uint64_t cva::ItemHandler::createValue<BOOL>()
{
  return off_251B21F68();
}

uint64_t cva::ItemHandler::createMatrix<float>()
{
  return off_251B21F70();
}

uint64_t cva::ItemHandler::createMatrix<int>()
{
  return off_251B21F78();
}

void cva::ItemHandler::~ItemHandler(cva::ItemHandler *this)
{
  MEMORY[0x24BE1A208](this);
}

uint64_t cva::DictionaryHandler::setItem(cva::DictionaryHandler *this, const __CFString *a2, const cva::ItemHandler *a3)
{
  return MEMORY[0x24BE1A210](this, a2, a3);
}

uint64_t cva::DictionaryHandler::setItem(cva::DictionaryHandler *this, const char *a2, const cva::ItemHandler *a3)
{
  return MEMORY[0x24BE1A218](this, a2, a3);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this, __CFDictionary *a2)
{
  return MEMORY[0x24BE1A220](this, a2);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this, const __CFDictionary *a2)
{
  return MEMORY[0x24BE1A228](this, a2);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this)
{
  return MEMORY[0x24BE1A230](this);
}

void cva::DictionaryHandler::~DictionaryHandler(cva::DictionaryHandler *this)
{
  MEMORY[0x24BE1A238](this);
}

uint64_t cva::VecLib<float>::gemm()
{
  return off_251B21FB8();
}

uint64_t E5RT::E5Compiler::GetCompiler(E5RT::E5Compiler *this)
{
  return MEMORY[0x24BE2F3F8](this);
}

uint64_t E5RT::E5Compiler::Compile()
{
  return MEMORY[0x24BE2F410]();
}

uint64_t E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>()
{
  return MEMORY[0x24BE2F428]();
}

uint64_t E5RT::BufferObject::GetHandle<__IOSurface *>()
{
  return MEMORY[0x24BE2F430]();
}

uint64_t E5RT::ProgramLibrary::OpenLibrary()
{
  return MEMORY[0x24BE2F468]();
}

uint64_t E5RT::ProgramLibrary::GetExportedFunctions(E5RT::ProgramLibrary *this)
{
  return MEMORY[0x24BE2F470](this);
}

void E5RT::TensorDataType::~TensorDataType(E5RT::TensorDataType *this)
{
  MEMORY[0x24BE2F488](this);
}

uint64_t E5RT::ExecutionStream::ResetStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x24BE2F490](this);
}

uint64_t E5RT::ExecutionStream::EncodeOperation()
{
  return MEMORY[0x24BE2F498]();
}

uint64_t E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStream *this)
{
  return MEMORY[0x24BE2F4A8](this);
}

uint64_t E5RT::ExecutionStream::CreateExecutionStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x24BE2F4B0](this);
}

uint64_t E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed()
{
  return MEMORY[0x24BE2F4F0]();
}

uint64_t E5RT::E5CompilerOptions::Create(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x24BE2F510](this);
}

uint64_t E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp()
{
  return MEMORY[0x24BE2F550]();
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::Create()
{
  return MEMORY[0x24BE2F5A0]();
}

uint64_t E5RT::IOPort::BindMemoryObject()
{
  return MEMORY[0x24BE2F5B8]();
}

uint64_t IR::IRData::getUserData(IR::IRData *this)
{
  return MEMORY[0x24BED2EF0](this);
}

uint64_t IR::IRData::getSampleRate(IR::IRData *this)
{
  return MEMORY[0x24BED2EF8](this);
}

uint64_t IR::IRData::getFilterLength(IR::IRData *this)
{
  return MEMORY[0x24BED2F00](this);
}

uint64_t IR::IRData::getInterpolationMethod(IR::IRData *this)
{
  return MEMORY[0x24BED2F18](this);
}

uint64_t IR::IRData::getNumFiltersPerSpatialPoint(IR::IRData *this)
{
  return MEMORY[0x24BED2F20](this);
}

uint64_t IR::IRData::getPeriodForCyclicalDimensions(IR::IRData *this)
{
  return MEMORY[0x24BED2F28](this);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs()
{
  return MEMORY[0x24BED2F30]();
}

uint64_t cva::ItemHandler::isDataType(cva::ItemHandler *this)
{
  return MEMORY[0x24BE1A298](this);
}

uint64_t cva::ItemHandler::isMatrixType(cva::ItemHandler *this)
{
  return MEMORY[0x24BE1A2A0](this);
}

uint64_t cva::ItemHandler::getData(cva::ItemHandler *this)
{
  return MEMORY[0x24BE1A2A8](this);
}

uint64_t cva::ItemHandler::getMatrix<float>()
{
  return off_251B22090();
}

uint64_t cva::ItemHandler::getMatrix<int>()
{
  return off_251B22098();
}

uint64_t cva::DictionaryHandler::getDictionary(cva::DictionaryHandler *this)
{
  return MEMORY[0x24BE1A2B0](this);
}

uint64_t cva::DictionaryHandler::item(cva::DictionaryHandler *this, const char *a2)
{
  return MEMORY[0x24BE1A2B8](this, a2);
}

uint64_t cva::DictionaryHandler::hasKey(cva::DictionaryHandler *this, const char *a2)
{
  return MEMORY[0x24BE1A2C0](this, a2);
}

uint64_t E5RT::ProgramLibrary::GetFunctionMetadata()
{
  return MEMORY[0x24BE2F600]();
}

uint64_t E5RT::TensorDataType::GetElementSize(E5RT::TensorDataType *this)
{
  return MEMORY[0x24BE2F608](this);
}

uint64_t E5RT::TensorDataType::GetComponentSize(E5RT::TensorDataType *this)
{
  return MEMORY[0x24BE2F610](this);
}

uint64_t E5RT::TensorDataType::GetComponentDataType(E5RT::TensorDataType *this)
{
  return MEMORY[0x24BE2F620](this);
}

uint64_t E5RT::TensorDescriptor::AllocateMemory()
{
  return MEMORY[0x24BE2F628]();
}

uint64_t E5RT::TensorDescriptor::GetNumElements(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F630](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorShape(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F638](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorStrides(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F640](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataType(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F648](this);
}

uint64_t E5RT::OperandDescriptor::TensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x24BE2F668](this);
}

uint64_t E5RT::OperandDescriptor::TryAsTensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x24BE2F678](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x24BE2F6A8](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x24BE2F6B0](this);
}

uint64_t E5RT::IOPort::GetPortDescriptorRef(E5RT::IOPort *this)
{
  return MEMORY[0x24BE2F6D0](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return MEMORY[0x24BEDAA80]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x24BEDB450](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, double a4)
{
  return MEMORY[0x24BEDB5A0](this, a2, a3, a4);
}

{
  return MEMORY[0x24BEDB5B8](this, a2, a3, a4);
}

uint64_t std::to_chars()
{
  return MEMORY[0x24BEDB5A8]();
}

{
  return MEMORY[0x24BEDB5B0]();
}

{
  return MEMORY[0x24BEDB5C0]();
}

{
  return MEMORY[0x24BEDB5C8]();
}

{
  return MEMORY[0x24BEDB5D8]();
}

{
  return MEMORY[0x24BEDB5E0]();
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, float a4)
{
  return MEMORY[0x24BEDB5D0](this, a2, a3, a4);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_251B223F0(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_251B223F8(__p, a2);
}

uint64_t operator delete()
{
  return off_251B22400();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_251B22408(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_251B22410(__sz, a2);
}

uint64_t operator new()
{
  return off_251B22418();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x24BDAC7E0](a1);
  return result;
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x24BDAC820]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x24BDAC828]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __udivti3()
{
  return MEMORY[0x24BDAC940]();
}

uint64_t __umodti3()
{
  return MEMORY[0x24BDAC958]();
}

uint64_t _os_crash()
{
  return MEMORY[0x24BDACB50]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x24BDAD230](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x24BDAD9C0](*(_QWORD *)&__clock_id);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDB8](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x24BDADF18](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x24BDADFE0](object);
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x24BE2FAE8]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x24BE2FB00]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x24BE2FB18]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x24BE2FB38]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x24BE2FB88]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x24BE2FBA0]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x24BE2FC10]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x24BE2FC18]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x24BE2FC38]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x24BE2FC70]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x24BE2FC80]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x24BE2FC90]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x24BE2FCA0]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x24BE2FCB0]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t geom_oriented_bounding_box_matrix_3f()
{
  return MEMORY[0x24BE3D310]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x24BDB0150](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x24BDB0180](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

void vDSP_DFT_DestroySetup(vDSP_DFT_Setup __Setup)
{
  MEMORY[0x24BDB3110](__Setup);
}

void vDSP_DFT_Execute(const vDSP_DFT_SetupStruct *__Setup, const float *__Ir, const float *__Ii, float *__Or, float *__Oi)
{
  MEMORY[0x24BDB3118](__Setup, __Ir, __Ii, __Or, __Oi);
}

vDSP_DFT_Setup vDSP_DFT_zop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x24BDB3120](__Previous, __Length, *(_QWORD *)&__Direction);
}

void vDSP_biquad(const vDSP_biquad_SetupStruct *__Setup, float *__Delay, const float *__X, vDSP_Stride __IX, float *__Y, vDSP_Stride __IY, vDSP_Length __N)
{
  MEMORY[0x24BDB3130](__Setup, __Delay, __X, __IX, __Y, __IY, __N);
}

vDSP_biquad_Setup vDSP_biquad_CreateSetup(const double *__Coefficients, vDSP_Length __M)
{
  return (vDSP_biquad_Setup)MEMORY[0x24BDB3140](__Coefficients, __M);
}

void vDSP_biquad_DestroySetup(vDSP_biquad_Setup __setup)
{
  MEMORY[0x24BDB3150](__setup);
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3248](__A, __IA, __C, __N);
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3288](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3368](__A, __C, __IC, __N);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3430](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3498](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34F0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3530](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_zvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N, int __Conjugate)
{
  MEMORY[0x24BDB35D0](__A, __IA, __B, __IB, __C, __IC, __N, *(_QWORD *)&__Conjugate);
}

void vDSP_zvphas(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB35E0](__A, __IA, __C, __IC, __N);
}

vImage_Error vImageAffineWarp_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, const vImage_AffineTransform *transform, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB35F8](src, dest, tempBuffer, transform, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageAffineWarp_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, const vImage_AffineTransform *transform, Pixel_F backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB3608](src, dest, tempBuffer, transform, *(_QWORD *)&flags, backColor);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x24BDB3630](buf, height, width, *(_QWORD *)&pixelBits, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16UToF(const vImage_Buffer *src, const vImage_Buffer *dest, float offset, float scale, vImage_Flags flags)
{
  return MEMORY[0x24BDB3668](src, dest, *(_QWORD *)&flags, offset, scale);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x24BDB3678](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To420Yp8_CbCr8(const vImage_Buffer *src, const vImage_Buffer *destYp, const vImage_Buffer *destCbCr, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x24BDB3698](src, destYp, destCbCr, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x24BDB36E8](matrix, pixelRange, outInfo, *(_QWORD *)&inARGBType, *(_QWORD *)&outYpCbCrType, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_AnyToAny(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB36F8](converter, srcs, dests, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_FTo16U(const vImage_Buffer *src, const vImage_Buffer *dest, float offset, float scale, vImage_Flags flags)
{
  return MEMORY[0x24BDB3720](src, dest, *(_QWORD *)&flags, offset, scale);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3730](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8ToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3750](blue, green, red, alpha, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB37A0](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB37F8](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB3800](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x24BDB3848](matrix, pixelRange, outInfo, *(_QWORD *)&inYpCbCrType, *(_QWORD *)&outARGBType, *(_QWORD *)&flags);
}

vImageConverterRef vImageConverter_CreateWithCGImageFormat(const vImage_CGImageFormat *srcFormat, const vImage_CGImageFormat *destFormat, const CGFloat *backgroundColor, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x24BDB3860](srcFormat, destFormat, backgroundColor, *(_QWORD *)&flags, error);
}

void vImageConverter_Release(vImageConverterRef converter)
{
  MEMORY[0x24BDB3880](converter);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x24BDB38A8](src, dest, pixelSize, *(_QWORD *)&flags);
}

vImage_Error vImageDilate_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const unsigned __int8 *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x24BDB38C0](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(_QWORD *)&flags);
}

vImage_Error vImageHorizontalReflect_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB38E8](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageHorizontalReflect_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB38F0](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageHorizontalReflect_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB38F8](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageHorizontalReflect_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3900](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGB8888ToPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[4], int32_t divisor, const int16_t pre_bias[4], int32_t post_bias, vImage_Flags flags)
{
  return MEMORY[0x24BDB3918](src, dest, matrix, *(_QWORD *)&divisor, pre_bias, *(_QWORD *)&post_bias, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannelsWithScalar_ARGB8888(Pixel_8 scalar, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x24BDB3938](scalar, src, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x24BDB3948](src, dest, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_ARGB_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB3978](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB3988](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_FFFF backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB3998](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39B8](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39C8](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_F backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39E0](src, dest, rotationConstant, *(_QWORD *)&flags, backColor);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A10](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A48](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A60](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A70](src, dest, tempBuffer, *(_QWORD *)&flags);
}

