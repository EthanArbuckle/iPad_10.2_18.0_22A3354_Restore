void sub_237FF8688(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_237FF8698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = sub_238003DB8(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_237FF86C8()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_2380BF880[result];
  return result;
}

uint64_t sub_237FF86E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = sub_238003DB8(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

void sub_237FF871C(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
    v2 = qword_2380BF880[v2];
  *a1 = v2;
}

uint64_t sub_237FF8740()
{
  sub_2380BE234();
  sub_2380BDCB8();
  return sub_2380BE264();
}

uint64_t sub_237FF87A8()
{
  sub_238001E80();
  return sub_2380BD634();
}

uint64_t sub_237FF87E0()
{
  sub_2380BE234();
  sub_2380BDCB8();
  return sub_2380BE264();
}

BOOL sub_237FF8844(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v2 = qword_2380BF880[v2];
  v3 = *a2;
  if (*((_BYTE *)a2 + 8))
    v3 = qword_2380BF880[v3];
  return v2 == v3;
}

void sub_237FF887C()
{
  qword_2568C9A80 = (uint64_t)&unk_2509D8E78;
}

uint64_t sub_237FF8890@<X0>(_QWORD *a1@<X8>)
{
  if (qword_2568C4E10 != -1)
    swift_once();
  *a1 = qword_2568C9A80;
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FF88E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9A88);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9A88);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "RELEASE";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "KEYBUNDLE_TGT";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "KEYBUNDLE_OTT";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "KEYBUNDLE_OHTTP";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 100;
  *(_QWORD *)v19 = "TEST_MARKER";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_237FF8B14@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4E18, (uint64_t)qword_2568C9A88, a1);
}

uint64_t sub_237FF8B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9AA0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9AA0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "application";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "type";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "expiryMs";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "data";
  *((_QWORD *)v17 + 1) = 4;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "unhashedMetadata";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_237FF8D64()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_2380BD658();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_238001D18();
          goto LABEL_5;
        case 2:
          sub_238001D5C();
          goto LABEL_5;
        case 3:
          sub_238001E80();
LABEL_5:
          v4 = v3;
          sub_2380BD688();
          goto LABEL_6;
        case 4:
          v4 = v3;
          sub_2380BD6B8();
          goto LABEL_6;
        case 5:
        case 6:
          v4 = v3;
          sub_2380BD6A0();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_237FF8EC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (sub_238001D18(), result = sub_2380BD76C(), !v1))
  {
    if (!v0[2] || (sub_238001D5C(), result = sub_2380BD76C(), !v1))
    {
      if (!v0[4] || (sub_238001E80(), result = sub_2380BD76C(), !v1))
      {
        if (!v0[6] || (result = sub_2380BD79C(), !v1))
          __asm { BR              X10 }
      }
    }
  }
  return result;
}

uint64_t sub_237FF90F4@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_2380BEAB0;
  *(_QWORD *)(a1 + 80) = 0xC000000000000000;
  return sub_2380BD5BC();
}

unint64_t sub_237FF9144()
{
  return 0xD000000000000012;
}

uint64_t sub_237FF9164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_237FF91A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_237FF91E4())()
{
  return nullsub_1;
}

uint64_t sub_237FF91FC()
{
  return sub_237FF8D64();
}

uint64_t sub_237FF9210()
{
  return sub_237FF8EC0();
}

uint64_t sub_237FF9228()
{
  sub_238001820(&qword_2568C56A0, type metadata accessor for ATLogInsertRequest, (uint64_t)&unk_2380BF298);
  return sub_2380BD628();
}

uint64_t sub_237FF927C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4E20, (uint64_t)qword_2568C9AA0, a1);
}

uint64_t sub_237FF9298@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_2380BD7E4();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_237FF9304()
{
  sub_238001820(&qword_2568C5610, type metadata accessor for ATLogInsertRequest, (uint64_t)&unk_2380BF2D0);
  return sub_2380BD718();
}

uint64_t sub_237FF9348()
{
  sub_238001820(&qword_2568C5610, type metadata accessor for ATLogInsertRequest, (uint64_t)&unk_2380BF2D0);
  return sub_2380BD724();
}

uint64_t sub_237FF93A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9AB8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9AB8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2380BEAC0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "status";
  *(_QWORD *)(v5 + 8) = 6;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = sub_2380BD7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_2380BD7CC();
}

uint64_t sub_237FF94A4()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        sub_238001DA0();
        sub_2380BD688();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_237FF9550()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (sub_238001DA0(), result = sub_2380BD76C(), !v1))
  {
    type metadata accessor for ATLogInsertResponse(0);
    return sub_2380BD5B0();
  }
  return result;
}

uint64_t sub_237FF9608@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return sub_2380BD5BC();
}

unint64_t sub_237FF9630()
{
  return 0xD000000000000013;
}

uint64_t (*sub_237FF9654())()
{
  return nullsub_1;
}

uint64_t sub_237FF9668()
{
  return sub_237FF94A4();
}

uint64_t sub_237FF967C()
{
  return sub_237FF9550();
}

uint64_t sub_237FF9690()
{
  sub_238001820(&qword_2568C56B8, type metadata accessor for ATLogInsertResponse, (uint64_t)&unk_2380BF130);
  return sub_2380BD628();
}

uint64_t sub_237FF96E0@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4E28, (uint64_t)qword_2568C9AB8, a1);
}

uint64_t sub_237FF96FC()
{
  sub_238001820(&qword_2568C55F0, type metadata accessor for ATLogInsertResponse, (uint64_t)&unk_2380BF168);
  return sub_2380BD718();
}

uint64_t sub_237FF973C()
{
  sub_238001820(&qword_2568C55F0, type metadata accessor for ATLogInsertResponse, (uint64_t)&unk_2380BF168);
  return sub_2380BD724();
}

uint64_t sub_237FF9790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9AD0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9AD0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "application";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "identifier";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_237FF9924()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      switch(result)
      {
        case 3:
          sub_2380BD6A0();
          goto LABEL_12;
        case 2:
          sub_238001D5C();
          break;
        case 1:
          sub_238001D18();
          break;
        default:
          goto LABEL_12;
      }
      sub_2380BD688();
LABEL_12:
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_237FF9A34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (sub_238001D18(), result = sub_2380BD76C(), !v1))
  {
    if (!v0[2] || (sub_238001D5C(), result = sub_2380BD76C(), !v1))
      __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_237FF9BA0@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_2380BEAE0;
  return sub_2380BD5BC();
}

unint64_t sub_237FF9BDC()
{
  return 0xD000000000000011;
}

uint64_t sub_237FF9BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_237FF9C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_237FF9C78())()
{
  return nullsub_1;
}

uint64_t sub_237FF9C8C()
{
  return sub_237FF9924();
}

uint64_t sub_237FF9CA0()
{
  return sub_237FF9A34();
}

uint64_t sub_237FF9CB4()
{
  sub_238001820(&qword_2568C5658, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BF040);
  return sub_2380BD628();
}

uint64_t sub_237FF9D04@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4E30, (uint64_t)qword_2568C9AD0, a1);
}

uint64_t sub_237FF9D20()
{
  sub_238001820(&qword_2568C5EC0, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BF4D8);
  return sub_2380BD718();
}

uint64_t sub_237FF9D60()
{
  sub_238001820(&qword_2568C5EC0, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BF4D8);
  return sub_2380BD724();
}

uint64_t sub_237FF9DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9AE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9AE8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 3;
  *(_QWORD *)v11 = "proofs";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_237FF9F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_2380BD658();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 3)
      {
        sub_237FFA750(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for ATLogProofResponse, type metadata accessor for ATLogProofs, (unint64_t *)&qword_2568C55B8, (uint64_t)&unk_2380BF3A8);
      }
      else if (result == 1)
      {
        sub_238001DA0();
        sub_2380BD688();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_237FFA020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (sub_238001DA0(), result = sub_2380BD76C(), !v4))
  {
    result = sub_237FFA0F8((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for ATLogProofResponse(0);
      return sub_2380BD5B0();
    }
  }
  return result;
}

uint64_t sub_237FFA0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ATLogProofs(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ATLogProofResponse(0);
  sub_2380051FC(a1 + *(int *)(v11 + 24), (uint64_t)v6, qword_2568C5450);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_238005240((uint64_t)v6, qword_2568C5450);
  sub_238001DE4((uint64_t)v6, (uint64_t)v10, type metadata accessor for ATLogProofs);
  sub_238001820((unint64_t *)&qword_2568C55B8, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF3A8);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v10, type metadata accessor for ATLogProofs);
}

uint64_t sub_237FFA26C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  sub_2380BD5BC();
  v4 = a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for ATLogProofs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t sub_237FFA2CC()
{
  return 0xD000000000000012;
}

uint64_t sub_237FFA2E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_237FFA328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_237FFA368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_237FF9F0C(a1, a2, a3);
}

uint64_t sub_237FFA37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_237FFA020(a1, a2, a3);
}

uint64_t sub_237FFA390()
{
  sub_238001820(&qword_2568C5670, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BEF50);
  return sub_2380BD628();
}

uint64_t sub_237FFA3E0@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4E38, (uint64_t)qword_2568C9AE8, a1);
}

uint64_t sub_237FFA3FC()
{
  sub_238001820(&qword_2568C5ED0, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BF460);
  return sub_2380BD718();
}

uint64_t sub_237FFA43C()
{
  sub_238001820(&qword_2568C5ED0, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BF460);
  return sub_2380BD724();
}

uint64_t sub_237FFA490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9B00);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9B00);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "inclusionProof";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "milestoneConsistency";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_237FFA5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_2380BD658();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        sub_237FFA750(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for ATLogProofs, type metadata accessor for LogConsistency, &qword_2568C55A0, (uint64_t)&unk_2380BED70);
      }
      else if (result == 1)
      {
        sub_237FFA6BC();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_237FFA6BC()
{
  type metadata accessor for ATLogProofs(0);
  type metadata accessor for LogEntry(0);
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  return sub_2380BD6D0();
}

uint64_t sub_237FFA750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  sub_238001820(a7, a6, a8);
  return sub_2380BD6D0();
}

uint64_t sub_237FFA7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_237FFA860(v3, a1, a2, a3);
  if (!v4)
  {
    sub_237FFA9D4(v3, a1, a2, a3);
    return sub_2380BD5B0();
  }
  return result;
}

uint64_t sub_237FFA860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LogEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ATLogProofs(0);
  sub_2380051FC(a1 + *(int *)(v11 + 20), (uint64_t)v6, &qword_2568C5440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_238005240((uint64_t)v6, &qword_2568C5440);
  sub_238001DE4((uint64_t)v6, (uint64_t)v10, type metadata accessor for LogEntry);
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v10, type metadata accessor for LogEntry);
}

uint64_t sub_237FFA9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LogConsistency(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ATLogProofs(0);
  sub_2380051FC(a1 + *(int *)(v11 + 24), (uint64_t)v6, &qword_2568C5448);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_238005240((uint64_t)v6, &qword_2568C5448);
  sub_238001DE4((uint64_t)v6, (uint64_t)v10, type metadata accessor for LogConsistency);
  sub_238001820(&qword_2568C55A0, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BED70);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v10, type metadata accessor for LogConsistency);
}

uint64_t sub_237FFAB4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_2380BD5BC();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 24);
  v7 = type metadata accessor for LogConsistency(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_237FFABCC()
{
  return 0x6F7250676F4C5441;
}

uint64_t (*sub_237FFABF4())()
{
  return nullsub_1;
}

uint64_t sub_237FFAC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_237FFA5E0(a1, a2, a3);
}

uint64_t sub_237FFAC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_237FFA7F4(a1, a2, a3);
}

uint64_t sub_237FFAC2C()
{
  sub_238001820(&qword_2568C5680, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BEE60);
  return sub_2380BD628();
}

uint64_t sub_237FFAC7C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4E40, (uint64_t)qword_2568C9B00, a1);
}

uint64_t sub_237FFAC98()
{
  sub_238001820((unint64_t *)&qword_2568C55B8, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF3A8);
  return sub_2380BD718();
}

uint64_t sub_237FFACD8()
{
  sub_238001820((unint64_t *)&qword_2568C55B8, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF3A8);
  return sub_2380BD724();
}

uint64_t sub_237FFAD28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9B18);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9B18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEB00;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 3;
  *(_QWORD *)v7 = "startSLH";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 4;
  *(_QWORD *)v11 = "endSLH";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 5;
  *(_QWORD *)v13 = "proofHashes";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 8;
  *(_QWORD *)v15 = "patInclusionProof";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 9;
  *(_QWORD *)v16 = "tltInclusionProof";
  *(_QWORD *)(v16 + 8) = 17;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_237FFAF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for LogConsistency._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  v2 = type metadata accessor for SignedObject(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, 1, 1, v2);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes) = MEMORY[0x24BEE4AF8];
  v4 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  v5 = type metadata accessor for LogEntry(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof, 1, 1, v5);
  qword_2568C4E58 = v0;
  return result;
}

uint64_t sub_237FFB020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1
     + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  v8 = type metadata accessor for SignedObject(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v10 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  v9(v1 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, 1, 1, v8);
  v11 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes) = MEMORY[0x24BEE4AF8];
  v12 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  v13 = type metadata accessor for LogEntry(0);
  v14 = *(void (**)(void))(*(_QWORD *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  v24 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  v14();
  v15 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  swift_beginAccess();
  sub_2380051FC(v15, (uint64_t)v6, &qword_2568C5438);
  swift_beginAccess();
  sub_238005174((uint64_t)v6, v7, &qword_2568C5438);
  swift_endAccess();
  v16 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  swift_beginAccess();
  sub_2380051FC(v16, (uint64_t)v6, &qword_2568C5438);
  swift_beginAccess();
  sub_238005174((uint64_t)v6, v10, &qword_2568C5438);
  swift_endAccess();
  v17 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  swift_beginAccess();
  v18 = *v17;
  swift_beginAccess();
  *v11 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  swift_beginAccess();
  sub_2380051FC(v19, (uint64_t)v4, &qword_2568C5440);
  swift_beginAccess();
  sub_238005174((uint64_t)v4, v12, &qword_2568C5440);
  swift_endAccess();
  v20 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  swift_beginAccess();
  sub_2380051FC(v20, (uint64_t)v4, &qword_2568C5440);
  swift_release();
  v21 = v24;
  swift_beginAccess();
  sub_238005174((uint64_t)v4, v21, &qword_2568C5440);
  swift_endAccess();
  return v1;
}

uint64_t sub_237FFB37C()
{
  uint64_t v0;

  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh, &qword_2568C5438);
  sub_238005240(v0 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, &qword_2568C5438);
  swift_bridgeObjectRelease();
  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof, &qword_2568C5440);
  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof, &qword_2568C5440);
  return swift_deallocClassInstance();
}

uint64_t sub_237FFB414()
{
  return type metadata accessor for LogConsistency._StorageClass(0);
}

uint64_t type metadata accessor for LogConsistency._StorageClass(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C51B8);
}

void sub_237FFB430()
{
  unint64_t v0;
  unint64_t v1;

  sub_237FFB4E8(319, &qword_2568C51C8, (void (*)(uint64_t))type metadata accessor for SignedObject);
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, qword_2568C51D0, (void (*)(uint64_t))type metadata accessor for LogEntry);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_237FFB4E8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2380BDF7C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_2380052E0(a1, &qword_2568C52F0);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_2380052E0(a1, &qword_2568C52F8);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_2380052E0(a1, qword_2568C5300);
}

uint64_t *sub_237FFB570(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_2380BD5C8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_237FFB5F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_237FFB63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_237FFB69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_237FFB708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_237FFB764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_237FFB7C8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFB7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2380BD5C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_237FFB850()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFB85C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2380BD5C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for LogConsistency(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C5360);
}

uint64_t sub_237FFB8E8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_237FFB95C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a2[4];
    v8 = a2[5];
    sub_237FFBA20(v7, v8);
    v4[4] = v7;
    v4[5] = v8;
    v9 = *(int *)(a3 + 28);
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_2380BD5C8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_237FFBA20(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_237FFBA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237FFBAB0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_237FFBAB0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_237FFBAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  sub_237FFBA20(v6, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_237FFBB8C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_237FFBA20(v8, v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  sub_237FFBAB0(v10, v11);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_237FFBC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_237FFBCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_237FFBAB0(v6, v7);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_237FFBD38()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFBD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 40) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_237FFBDCC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFBDD8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ATLogProofRequest(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C53F0);
}

uint64_t sub_237FFBE68()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_237FFBEE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_2380BD5C8();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for ATLogProofs(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v11((uint64_t)v13, (uint64_t)v14, v10);
      v19 = *(int *)(v15 + 20);
      v66 = v13;
      v20 = &v13[v19];
      v21 = &v14[v19];
      v22 = type metadata accessor for LogEntry(0);
      v23 = *(_QWORD *)(v22 - 8);
      v65 = (void (*)(char *, char *, uint64_t))v11;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = v66;
      }
      else
      {
        v63 = v23;
        v64 = v16;
        *(_QWORD *)v20 = *(_QWORD *)v21;
        v20[8] = v21[8];
        v26 = *((_QWORD *)v21 + 3);
        *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
        v27 = *((_QWORD *)v21 + 4);
        swift_bridgeObjectRetain();
        sub_237FFBA20(v26, v27);
        *((_QWORD *)v20 + 3) = v26;
        *((_QWORD *)v20 + 4) = v27;
        v28 = *((_QWORD *)v21 + 6);
        *((_QWORD *)v20 + 5) = *((_QWORD *)v21 + 5);
        *((_QWORD *)v20 + 6) = v28;
        v20[56] = v21[56];
        v65(&v20[*(int *)(v22 + 36)], &v21[*(int *)(v22 + 36)], v10);
        v29 = *(int *)(v22 + 40);
        v30 = &v20[v29];
        v31 = &v21[v29];
        v32 = type metadata accessor for SignedObject(0);
        v33 = *(_QWORD *)(v32 - 8);
        v62 = v22;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          v35 = v63;
          v16 = v64;
          v25 = v66;
        }
        else
        {
          v59 = v33;
          v36 = v30;
          v61 = v32;
          v37 = *(_QWORD *)v31;
          v38 = *((_QWORD *)v31 + 1);
          sub_237FFBA20(*(_QWORD *)v31, v38);
          *(_QWORD *)v36 = v37;
          *((_QWORD *)v36 + 1) = v38;
          v39 = v61;
          v65(&v36[*(int *)(v61 + 20)], &v31[*(int *)(v61 + 20)], v10);
          v40 = *(int *)(v61 + 24);
          v60 = v36;
          v41 = &v36[v40];
          v42 = (uint64_t *)&v31[v40];
          v43 = type metadata accessor for Signature(0);
          v58 = *(_QWORD *)(v43 - 8);
          v25 = v66;
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(v42, 1, v43))
          {
            v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          }
          else
          {
            v57 = v43;
            v45 = *v42;
            v46 = v42[1];
            sub_237FFBA20(*v42, v46);
            *(_QWORD *)v41 = v45;
            *((_QWORD *)v41 + 1) = v46;
            v47 = v42[2];
            v48 = v42[3];
            sub_237FFBA20(v47, v48);
            *((_QWORD *)v41 + 2) = v47;
            *((_QWORD *)v41 + 3) = v48;
            v39 = v61;
            *((_QWORD *)v41 + 4) = v42[4];
            v41[40] = *((_BYTE *)v42 + 40);
            v65(&v41[*(int *)(v57 + 28)], (char *)v42 + *(int *)(v57 + 28), v10);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v41, 0, 1, v57);
          }
          v35 = v63;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v39);
          v16 = v64;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v20, 0, 1, v62);
      }
      v49 = *(int *)(v15 + 24);
      v50 = &v25[v49];
      v51 = &v14[v49];
      v52 = type metadata accessor for LogConsistency(0);
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v65(v50, v51, v10);
        *(_QWORD *)&v50[*(int *)(v52 + 20)] = *(_QWORD *)&v51[*(int *)(v52 + 20)];
        v55 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
        swift_retain();
        v55(v50, 0, 1, v52);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t type metadata accessor for ATLogProofs(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C5550);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B82B758]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_237FFC380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2380BD5C8();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for ATLogProofs(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    v10 = v7 + *(int *)(v8 + 20);
    v11 = type metadata accessor for LogEntry(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      sub_237FFBAB0(*(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
      v6(v10 + *(int *)(v11 + 36), v5);
      v12 = v10 + *(int *)(v11 + 40);
      v13 = type metadata accessor for SignedObject(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
      {
        sub_237FFBAB0(*(_QWORD *)v12, *(_QWORD *)(v12 + 8));
        v6(v12 + *(int *)(v13 + 20), v5);
        v14 = v12 + *(int *)(v13 + 24);
        v15 = type metadata accessor for Signature(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
        {
          sub_237FFBAB0(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
          sub_237FFBAB0(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
          v6(v14 + *(int *)(v15 + 28), v5);
        }
      }
    }
    v16 = v7 + *(int *)(v8 + 24);
    v17 = type metadata accessor for LogConsistency(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
    if (!(_DWORD)result)
    {
      v6(v16, v5);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_237FFC554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2380BD5C8();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for ATLogProofs(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    v17 = *(int *)(v14 + 20);
    v64 = v12;
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = type metadata accessor for LogEntry(0);
    v21 = *(_QWORD *)(v20 - 8);
    v63 = (void (*)(char *, char *, uint64_t))v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v23 = v64;
    }
    else
    {
      v60 = v21;
      v62 = v15;
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      v24 = *((_QWORD *)v19 + 3);
      *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
      v25 = *((_QWORD *)v19 + 4);
      swift_bridgeObjectRetain();
      sub_237FFBA20(v24, v25);
      *((_QWORD *)v18 + 3) = v24;
      *((_QWORD *)v18 + 4) = v25;
      v26 = *((_QWORD *)v19 + 6);
      *((_QWORD *)v18 + 5) = *((_QWORD *)v19 + 5);
      *((_QWORD *)v18 + 6) = v26;
      v18[56] = v19[56];
      v63(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v9);
      v27 = *(int *)(v20 + 40);
      v28 = &v18[v27];
      v29 = &v19[v27];
      v30 = type metadata accessor for SignedObject(0);
      v31 = *(_QWORD *)(v30 - 8);
      v61 = v20;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        v15 = v62;
        v33 = v60;
        v23 = v64;
      }
      else
      {
        v57 = v31;
        v34 = v28;
        v59 = v30;
        v35 = *(_QWORD *)v29;
        v36 = *((_QWORD *)v29 + 1);
        sub_237FFBA20(*(_QWORD *)v29, v36);
        *(_QWORD *)v34 = v35;
        *((_QWORD *)v34 + 1) = v36;
        v37 = v59;
        v63(&v34[*(int *)(v59 + 20)], &v29[*(int *)(v59 + 20)], v9);
        v38 = *(int *)(v59 + 24);
        v58 = v34;
        v39 = &v34[v38];
        v40 = (uint64_t *)&v29[v38];
        v41 = type metadata accessor for Signature(0);
        v56 = *(_QWORD *)(v41 - 8);
        v23 = v64;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48))(v40, 1, v41))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          v55 = v41;
          v43 = *v40;
          v44 = v40[1];
          sub_237FFBA20(*v40, v44);
          *(_QWORD *)v39 = v43;
          *((_QWORD *)v39 + 1) = v44;
          v45 = v40[2];
          v46 = v40[3];
          sub_237FFBA20(v45, v46);
          *((_QWORD *)v39 + 2) = v45;
          *((_QWORD *)v39 + 3) = v46;
          v37 = v59;
          *((_QWORD *)v39 + 4) = v40[4];
          v39[40] = *((_BYTE *)v40 + 40);
          v63(&v39[*(int *)(v55 + 28)], (char *)v40 + *(int *)(v55 + 28), v9);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v39, 0, 1, v55);
        }
        v33 = v60;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v37);
        v15 = v62;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v18, 0, 1, v61);
    }
    v47 = *(int *)(v14 + 24);
    v48 = &v23[v47];
    v49 = &v13[v47];
    v50 = type metadata accessor for LogConsistency(0);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v63(v48, v49, v9);
      *(_QWORD *)&v48[*(int *)(v50 + 20)] = *(_QWORD *)&v49[*(int *)(v50 + 20)];
      v53 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56);
      swift_retain();
      v53(v48, 0, 1, v50);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v23, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_237FFC974(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int (**v44)(_QWORD *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t *, uint64_t, uint64_t);
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t, uint64_t);
  int v122;
  int v123;
  void (*v124)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  int v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  void (*v163)(uint64_t, char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *__dst;
  char *__dsta;
  void (*__dstb)(char *, char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, char *, uint64_t);
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, char *, uint64_t);
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = sub_2380BD5C8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for ATLogProofs(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18((uint64_t)v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (v19)
    {
      sub_237FFD540(v14, type metadata accessor for ATLogProofs);
      goto LABEL_7;
    }
    v173 = (void (*)(uint64_t, char *, uint64_t))v12;
    v175 = v10;
    v12(v14, (uint64_t)v15, v10);
    v29 = *(int *)(v16 + 20);
    v30 = v14 + v29;
    v31 = &v15[v29];
    v32 = type metadata accessor for LogEntry(0);
    v170 = *(_QWORD *)(v32 - 8);
    v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 48);
    v34 = v33(v30, 1, v32);
    v178 = v32;
    v35 = v33((uint64_t)v31, 1, v32);
    if (v34)
    {
      if (!v35)
      {
        v36 = *(_QWORD *)v31;
        *(_BYTE *)(v30 + 8) = v31[8];
        *(_QWORD *)v30 = v36;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
        v37 = *((_QWORD *)v31 + 3);
        v38 = *((_QWORD *)v31 + 4);
        swift_bridgeObjectRetain();
        sub_237FFBA20(v37, v38);
        *(_QWORD *)(v30 + 24) = v37;
        *(_QWORD *)(v30 + 32) = v38;
        *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
        v39 = *((_QWORD *)v31 + 6);
        *(_BYTE *)(v30 + 56) = v31[56];
        *(_QWORD *)(v30 + 48) = v39;
        v40 = v175;
        v163 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 16);
        v163(v30 + *(int *)(v32 + 36), &v31[*(int *)(v32 + 36)], v175);
        v41 = *(int *)(v32 + 40);
        __dst = (_QWORD *)(v30 + v41);
        v42 = &v31[v41];
        v43 = type metadata accessor for SignedObject(0);
        v44 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v43 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v44)[6](v42, 1, v43))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(__dst, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
          v46 = v170;
        }
        else
        {
          v158 = v44;
          v160 = v43;
          v84 = *(_QWORD *)v42;
          v83 = *((_QWORD *)v42 + 1);
          sub_237FFBA20(*(_QWORD *)v42, v83);
          *__dst = v84;
          __dst[1] = v83;
          v40 = v175;
          v85 = v160;
          v163((uint64_t)__dst + *(int *)(v160 + 20), &v42[*(int *)(v160 + 20)], v175);
          v86 = *(int *)(v160 + 24);
          v156 = (_QWORD *)((char *)__dst + v86);
          v87 = (uint64_t *)&v42[v86];
          v88 = type metadata accessor for Signature(0);
          v152 = *(_QWORD *)(v88 - 8);
          v154 = v88;
          v46 = v170;
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(v152 + 48))(v87, 1))
          {
            v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v156, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
          }
          else
          {
            v113 = *v87;
            v150 = v87[1];
            sub_237FFBA20(*v87, v150);
            *v156 = v113;
            v156[1] = v150;
            v114 = v87[2];
            v151 = v87[3];
            sub_237FFBA20(v114, v151);
            v156[2] = v114;
            v156[3] = v151;
            v115 = v87[4];
            *((_BYTE *)v156 + 40) = *((_BYTE *)v87 + 40);
            v156[4] = v115;
            v85 = v160;
            v163((uint64_t)v156 + *(int *)(v154 + 28), (char *)v87 + *(int *)(v154 + 28), v175);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v156, 0, 1, v154);
            v40 = v175;
          }
          (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v158 + 7))(__dst, 0, 1, v85);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v30, 0, 1, v178);
        goto LABEL_43;
      }
    }
    else
    {
      if (!v35)
      {
        v71 = *(_QWORD *)v31;
        *(_BYTE *)(v30 + 8) = v31[8];
        *(_QWORD *)v30 = v71;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v72 = *((_QWORD *)v31 + 3);
        v73 = *((_QWORD *)v31 + 4);
        sub_237FFBA20(v72, v73);
        v74 = *(_QWORD *)(v30 + 24);
        v75 = *(_QWORD *)(v30 + 32);
        *(_QWORD *)(v30 + 24) = v72;
        *(_QWORD *)(v30 + 32) = v73;
        sub_237FFBAB0(v74, v75);
        *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
        v76 = *((_QWORD *)v31 + 6);
        *(_BYTE *)(v30 + 56) = v31[56];
        *(_QWORD *)(v30 + 48) = v76;
        v173(v30 + *(int *)(v32 + 36), &v31[*(int *)(v32 + 36)], v175);
        v77 = *(int *)(v32 + 40);
        v78 = (uint64_t *)(v30 + v77);
        v31 += v77;
        v79 = type metadata accessor for SignedObject(0);
        v80 = *(_QWORD *)(v79 - 8);
        v81 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v80 + 48);
        v179 = v78;
        LODWORD(v78) = v81(v78, 1, v79);
        v82 = v81((uint64_t *)v31, 1, v79);
        if ((_DWORD)v78)
        {
          if (!v82)
          {
            v172 = v80;
            v105 = *(_QWORD *)v31;
            v106 = *((_QWORD *)v31 + 1);
            sub_237FFBA20(*(_QWORD *)v31, v106);
            *v179 = v105;
            v179[1] = v106;
            __dstb = *(void (**)(char *, char *, uint64_t))(v11 + 16);
            __dstb((char *)v179 + *(int *)(v79 + 20), &v31[*(int *)(v79 + 20)], v175);
            v107 = *(int *)(v79 + 24);
            v108 = (uint64_t *)((char *)v179 + v107);
            v109 = &v31[v107];
            v110 = type metadata accessor for Signature(0);
            v111 = *(_QWORD *)(v110 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
            {
              v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
            }
            else
            {
              v161 = *((_QWORD *)v109 + 1);
              v165 = *(_QWORD *)v109;
              sub_237FFBA20(*(_QWORD *)v109, v161);
              *v108 = v165;
              v108[1] = v161;
              v162 = *((_QWORD *)v109 + 3);
              v166 = *((_QWORD *)v109 + 2);
              sub_237FFBA20(v166, v162);
              v108[2] = v166;
              v108[3] = v162;
              v140 = *((_QWORD *)v109 + 4);
              *((_BYTE *)v108 + 40) = v109[40];
              v108[4] = v140;
              __dstb((char *)v108 + *(int *)(v110 + 28), &v109[*(int *)(v110 + 28)], v175);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
            }
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v172 + 56))(v179, 0, 1, v79);
            goto LABEL_20;
          }
          v58 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
          v59 = v179;
        }
        else
        {
          if (!v82)
          {
            v125 = *(_QWORD *)v31;
            v126 = *((_QWORD *)v31 + 1);
            sub_237FFBA20(*(_QWORD *)v31, v126);
            v127 = *v179;
            v128 = v179[1];
            *v179 = v125;
            v179[1] = v126;
            sub_237FFBAB0(v127, v128);
            v173((uint64_t)v179 + *(int *)(v79 + 20), &v31[*(int *)(v79 + 20)], v175);
            v129 = *(int *)(v79 + 24);
            v130 = (uint64_t)v179 + v129;
            v131 = &v31[v129];
            v132 = type metadata accessor for Signature(0);
            v180 = *(_QWORD *)(v132 - 8);
            v133 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v180 + 48);
            LODWORD(v125) = v133(v130, 1, v132);
            v134 = v133((uint64_t)v131, 1, v132);
            if ((_DWORD)v125)
            {
              if (!v134)
              {
                v136 = *(_QWORD *)v131;
                v135 = *((_QWORD *)v131 + 1);
                sub_237FFBA20(*(_QWORD *)v131, v135);
                *(_QWORD *)v130 = v136;
                *(_QWORD *)(v130 + 8) = v135;
                v138 = *((_QWORD *)v131 + 2);
                v137 = *((_QWORD *)v131 + 3);
                sub_237FFBA20(v138, v137);
                *(_QWORD *)(v130 + 16) = v138;
                *(_QWORD *)(v130 + 24) = v137;
                v139 = *((_QWORD *)v131 + 4);
                *(_BYTE *)(v130 + 40) = v131[40];
                *(_QWORD *)(v130 + 32) = v139;
                v40 = v175;
                (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v130 + *(int *)(v132 + 28), &v131[*(int *)(v132 + 28)], v175);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v180 + 56))(v130, 0, 1, v132);
                goto LABEL_43;
              }
            }
            else
            {
              if (!v134)
              {
                v142 = *(_QWORD *)v131;
                v141 = *((_QWORD *)v131 + 1);
                sub_237FFBA20(*(_QWORD *)v131, v141);
                v143 = *(_QWORD *)v130;
                v144 = *(_QWORD *)(v130 + 8);
                *(_QWORD *)v130 = v142;
                *(_QWORD *)(v130 + 8) = v141;
                sub_237FFBAB0(v143, v144);
                v146 = *((_QWORD *)v131 + 2);
                v145 = *((_QWORD *)v131 + 3);
                sub_237FFBA20(v146, v145);
                v147 = *(_QWORD *)(v130 + 16);
                v148 = *(_QWORD *)(v130 + 24);
                *(_QWORD *)(v130 + 16) = v146;
                *(_QWORD *)(v130 + 24) = v145;
                sub_237FFBAB0(v147, v148);
                v149 = *((_QWORD *)v131 + 4);
                *(_BYTE *)(v130 + 40) = v131[40];
                *(_QWORD *)(v130 + 32) = v149;
                v40 = v175;
                v173(v130 + *(int *)(v132 + 28), &v131[*(int *)(v132 + 28)], v175);
                goto LABEL_43;
              }
              sub_237FFD540(v130, type metadata accessor for Signature);
            }
            v58 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
            v59 = (void *)v130;
            v60 = v131;
            goto LABEL_19;
          }
          sub_237FFD540((uint64_t)v179, type metadata accessor for SignedObject);
          v58 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
          v59 = v179;
        }
LABEL_18:
        v60 = v31;
LABEL_19:
        memcpy(v59, v60, v58);
LABEL_20:
        v40 = v175;
LABEL_43:
        v116 = *(int *)(v16 + 24);
        v117 = v14 + v116;
        v118 = &v15[v116];
        v119 = type metadata accessor for LogConsistency(0);
        v120 = *(_QWORD *)(v119 - 8);
        v121 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
        v122 = v121(v117, 1, v119);
        v123 = v121((uint64_t)v118, 1, v119);
        if (v122)
        {
          if (!v123)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v117, v118, v40);
            *(_QWORD *)(v117 + *(int *)(v119 + 20)) = *(_QWORD *)&v118[*(int *)(v119 + 20)];
            v124 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v120 + 56);
            swift_retain();
            v124(v117, 0, 1, v119);
            return a1;
          }
        }
        else
        {
          if (!v123)
          {
            v173(v117, v118, v40);
            *(_QWORD *)(v117 + *(int *)(v119 + 20)) = *(_QWORD *)&v118[*(int *)(v119 + 20)];
            swift_retain();
            swift_release();
            return a1;
          }
          sub_237FFD540(v117, type metadata accessor for LogConsistency);
        }
        v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
        v27 = (void *)v117;
        v28 = v118;
        goto LABEL_8;
      }
      sub_237FFD540(v30, type metadata accessor for LogEntry);
    }
    v58 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440) - 8) + 64);
    v59 = (void *)v30;
    goto LABEL_18;
  }
  if (v19)
  {
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
    v27 = (void *)v14;
    v28 = v15;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  v177 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 16);
  v177(v14, v15, v10);
  v20 = *(int *)(v16 + 20);
  v21 = (_QWORD *)(v14 + v20);
  v22 = &v15[v20];
  v23 = type metadata accessor for LogEntry(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    __dsta = v15;
    v171 = v24;
    v47 = *(_QWORD *)v22;
    *((_BYTE *)v21 + 8) = v22[8];
    *v21 = v47;
    v21[2] = *((_QWORD *)v22 + 2);
    v48 = v10;
    v49 = *((_QWORD *)v22 + 3);
    v50 = *((_QWORD *)v22 + 4);
    swift_bridgeObjectRetain();
    sub_237FFBA20(v49, v50);
    v21[3] = v49;
    v21[4] = v50;
    v51 = v48;
    v21[5] = *((_QWORD *)v22 + 5);
    v52 = *((_QWORD *)v22 + 6);
    *((_BYTE *)v21 + 56) = v22[56];
    v21[6] = v52;
    v177((uint64_t)v21 + *(int *)(v23 + 36), &v22[*(int *)(v23 + 36)], v48);
    v53 = *(int *)(v23 + 40);
    v174 = (_QWORD *)((char *)v21 + v53);
    v54 = (uint64_t *)&v22[v53];
    v55 = type metadata accessor for SignedObject(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v174, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      v10 = v51;
    }
    else
    {
      v159 = v56;
      v164 = v55;
      v61 = v51;
      v62 = *v54;
      v63 = v54[1];
      sub_237FFBA20(*v54, v63);
      *v174 = v62;
      v64 = v61;
      v65 = v174;
      v174[1] = v63;
      v66 = v164;
      v177((uint64_t)v174 + *(int *)(v164 + 20), (char *)v54 + *(int *)(v164 + 20), v64);
      v67 = *(int *)(v164 + 24);
      v157 = (_QWORD *)((char *)v174 + v67);
      v68 = (uint64_t *)((char *)v54 + v67);
      v69 = type metadata accessor for Signature(0);
      v153 = *(_QWORD *)(v69 - 8);
      v155 = (int *)v69;
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v153 + 48))(v68, 1))
      {
        v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v157, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        v10 = v64;
      }
      else
      {
        v176 = v64;
        v90 = *v68;
        v91 = v68[1];
        sub_237FFBA20(*v68, v91);
        *v157 = v90;
        v157[1] = v91;
        v92 = v68[2];
        v93 = v68[3];
        sub_237FFBA20(v92, v93);
        v157[2] = v92;
        v157[3] = v93;
        v66 = v164;
        v94 = v68[4];
        *((_BYTE *)v157 + 40) = *((_BYTE *)v68 + 40);
        v157[4] = v94;
        v95 = v155[7];
        v96 = (char *)v68 + v95;
        v10 = v176;
        v177((uint64_t)v157 + v95, v96, v176);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v153 + 56))(v157, 0, 1, v155);
        v65 = v174;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v65, 0, 1, v66);
    }
    v15 = __dsta;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v21, 0, 1, v23);
  }
  v97 = *(int *)(v16 + 24);
  v98 = (char *)(v14 + v97);
  v99 = &v15[v97];
  v100 = type metadata accessor for LogConsistency(0);
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
  {
    v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
  }
  else
  {
    v177((uint64_t)v98, v99, v10);
    *(_QWORD *)&v98[*(int *)(v100 + 20)] = *(_QWORD *)&v99[*(int *)(v100 + 20)];
    v103 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56);
    swift_retain();
    v103(v98, 0, 1, v100);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_237FFD540(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_237FFD57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (**__src)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  char *__dst;
  uint64_t v51;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2380BD5C8();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for ATLogProofs(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v51 = v15;
    v10((uint64_t)v12, (uint64_t)v13, v9);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = type metadata accessor for LogEntry(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v49 = v21;
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
      v23 = *((_QWORD *)v19 + 6);
      *((_QWORD *)v18 + 5) = *((_QWORD *)v19 + 5);
      *((_QWORD *)v18 + 6) = v23;
      v18[56] = v19[56];
      v10((uint64_t)&v18[*(int *)(v20 + 36)], (uint64_t)&v19[*(int *)(v20 + 36)], v9);
      v47 = v20;
      v24 = *(int *)(v20 + 40);
      __dst = &v18[v24];
      v25 = &v19[v24];
      v26 = type metadata accessor for SignedObject(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
        memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        v29 = v49;
        v30 = v47;
      }
      else
      {
        v45 = v27;
        v31 = __dst;
        *(_OWORD *)__dst = *(_OWORD *)v25;
        v10((uint64_t)&__dst[*(int *)(v26 + 20)], (uint64_t)&v25[*(int *)(v26 + 20)], v9);
        v46 = v26;
        v32 = *(int *)(v26 + 24);
        v44 = &__dst[v32];
        v33 = &v25[v32];
        v34 = type metadata accessor for Signature(0);
        __src = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v34 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v33, 1, v34))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
          memcpy(v44, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          v36 = *((_OWORD *)v33 + 1);
          *(_OWORD *)v44 = *(_OWORD *)v33;
          *((_OWORD *)v44 + 1) = v36;
          *((_QWORD *)v44 + 4) = *((_QWORD *)v33 + 4);
          v44[40] = v33[40];
          v10((uint64_t)&v44[*(int *)(v34 + 28)], (uint64_t)&v33[*(int *)(v34 + 28)], v9);
          v31 = __dst;
          __src[7](v44, 0, 1, v34);
        }
        v30 = v47;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v31, 0, 1, v46);
        v29 = v49;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v18, 0, 1, v30);
    }
    v37 = *(int *)(v14 + 24);
    v38 = &v12[v37];
    v39 = &v13[v37];
    v40 = type metadata accessor for LogConsistency(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v10((uint64_t)v38, (uint64_t)v39, v9);
      *(_QWORD *)&v38[*(int *)(v40 + 20)] = *(_QWORD *)&v39[*(int *)(v40 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_237FFD940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  int v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, uint64_t);
  int v112;
  int v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void (*v129)(char *, char *, uint64_t);
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  _QWORD *__dst;
  void *__dsta;
  char *__dstb;
  _QWORD *__dstc;
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  int *__src;
  void (*__srca)(uint64_t, char *, uint64_t);
  _QWORD *__srcb;
  _OWORD *__srcc;
  char *v145;
  uint64_t v146;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2380BD5C8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for ATLogProofs(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (v18)
    {
      sub_237FFD540(v13, type metadata accessor for ATLogProofs);
      goto LABEL_7;
    }
    v30 = v9;
    v31 = v10;
    v146 = v30;
    v139 = (void (*)(char *, char *, uint64_t))v11;
    ((void (*)(uint64_t, char *))v11)(v13, v14);
    v32 = *(int *)(v15 + 20);
    v33 = (char *)(v13 + v32);
    v34 = &v14[v32];
    v35 = type metadata accessor for LogEntry(0);
    __dst = *(_QWORD **)(v35 - 8);
    v36 = (uint64_t (*)(char *, uint64_t, uint64_t))__dst[6];
    v37 = v33;
    LODWORD(v33) = v36(v33, 1, v35);
    __src = (int *)v35;
    v38 = v36(v34, 1, v35);
    v39 = v31;
    if ((_DWORD)v33)
    {
      if (!v38)
      {
        *(_QWORD *)v37 = *(_QWORD *)v34;
        v37[8] = v34[8];
        *((_QWORD *)v37 + 2) = *((_QWORD *)v34 + 2);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v34 + 24);
        v40 = *((_QWORD *)v34 + 6);
        *((_QWORD *)v37 + 5) = *((_QWORD *)v34 + 5);
        *((_QWORD *)v37 + 6) = v40;
        v37[56] = v34[56];
        v132 = v31;
        v129 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        v129(&v37[__src[9]], &v34[__src[9]], v146);
        v41 = __src[10];
        v42 = &v37[v41];
        v43 = &v34[v41];
        v44 = type metadata accessor for SignedObject(0);
        v45 = *(_QWORD *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
          v47 = v146;
          v39 = v132;
          v48 = __dst;
          v49 = __src;
        }
        else
        {
          v125 = v45;
          *(_OWORD *)v42 = *(_OWORD *)v43;
          v129(&v42[*(int *)(v44 + 20)], &v43[*(int *)(v44 + 20)], v146);
          v80 = *(int *)(v44 + 24);
          v128 = v42;
          v81 = &v42[v80];
          v82 = &v43[v80];
          v83 = type metadata accessor for Signature(0);
          v121 = *(_QWORD *)(v83 - 8);
          v123 = v83;
          if ((*(unsigned int (**)(char *, uint64_t))(v121 + 48))(v82, 1))
          {
            v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          }
          else
          {
            v96 = *((_OWORD *)v82 + 1);
            *(_OWORD *)v81 = *(_OWORD *)v82;
            *((_OWORD *)v81 + 1) = v96;
            *((_QWORD *)v81 + 4) = *((_QWORD *)v82 + 4);
            v81[40] = v82[40];
            v129(&v81[*(int *)(v123 + 28)], &v82[*(int *)(v123 + 28)], v146);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v81, 0, 1, v123);
          }
          v47 = v146;
          v49 = __src;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v128, 0, 1, v44);
          v39 = v132;
          v48 = __dst;
        }
        ((void (*)(char *, _QWORD, uint64_t, int *))v48[7])(v37, 0, 1, v49);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v38)
      {
        v134 = v31;
        *(_QWORD *)v37 = *(_QWORD *)v34;
        v37[8] = v34[8];
        *((_QWORD *)v37 + 2) = *((_QWORD *)v34 + 2);
        swift_bridgeObjectRelease();
        v63 = *((_QWORD *)v37 + 3);
        v64 = *((_QWORD *)v37 + 4);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v34 + 24);
        sub_237FFBAB0(v63, v64);
        v65 = *((_QWORD *)v34 + 6);
        *((_QWORD *)v37 + 5) = *((_QWORD *)v34 + 5);
        *((_QWORD *)v37 + 6) = v65;
        v37[56] = v34[56];
        v47 = v146;
        v139(&v37[__src[9]], &v34[__src[9]], v146);
        v66 = __src[10];
        v67 = &v37[v66];
        v68 = &v34[v66];
        v69 = type metadata accessor for SignedObject(0);
        __srcb = *(_QWORD **)(v69 - 8);
        v70 = (uint64_t (*)(char *, uint64_t, uint64_t))__srcb[6];
        v71 = v67;
        LODWORD(v67) = v70(v67, 1, v69);
        v72 = v70(v68, 1, v69);
        if ((_DWORD)v67)
        {
          if (!v72)
          {
            v73 = v71;
            *(_OWORD *)v71 = *(_OWORD *)v68;
            v74 = *(int *)(v69 + 20);
            v75 = &v71[v74];
            v39 = v134;
            v131 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
            v131(v75, &v68[v74], v146);
            v76 = *(int *)(v69 + 24);
            __dstb = &v73[v76];
            v77 = &v68[v76];
            v78 = type metadata accessor for Signature(0);
            v127 = *(_QWORD *)(v78 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v77, 1, v78))
            {
              v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(__dstb, v77, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
            }
            else
            {
              v115 = *((_OWORD *)v77 + 1);
              *(_OWORD *)__dstb = *(_OWORD *)v77;
              *((_OWORD *)__dstb + 1) = v115;
              *((_QWORD *)__dstb + 4) = *((_QWORD *)v77 + 4);
              __dstb[40] = v77[40];
              v131(&__dstb[*(int *)(v78 + 28)], &v77[*(int *)(v78 + 28)], v146);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(__dstb, 0, 1, v78);
            }
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcb[7])(v73, 0, 1, v69);
            goto LABEL_40;
          }
        }
        else
        {
          if (!v72)
          {
            v105 = *(_QWORD *)v71;
            v106 = *((_QWORD *)v71 + 1);
            *(_OWORD *)v71 = *(_OWORD *)v68;
            sub_237FFBAB0(v105, v106);
            v139(&v71[*(int *)(v69 + 20)], &v68[*(int *)(v69 + 20)], v146);
            v107 = *(int *)(v69 + 24);
            v108 = &v71[v107];
            v109 = &v68[v107];
            v110 = type metadata accessor for Signature(0);
            __dstc = *(_QWORD **)(v110 - 8);
            v111 = (uint64_t (*)(char *, uint64_t, uint64_t))__dstc[6];
            v112 = v111(v108, 1, v110);
            __srcc = v109;
            v113 = v111(v109, 1, v110);
            if (v112)
            {
              v39 = v134;
              if (!v113)
              {
                v114 = __srcc[1];
                *(_OWORD *)v108 = *__srcc;
                *((_OWORD *)v108 + 1) = v114;
                *((_QWORD *)v108 + 4) = *((_QWORD *)__srcc + 4);
                v108[40] = *((_BYTE *)__srcc + 40);
                (*(void (**)(char *, char *, uint64_t))(v134 + 32))(&v108[*(int *)(v110 + 28)], (char *)__srcc + *(int *)(v110 + 28), v146);
                ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstc[7])(v108, 0, 1, v110);
                goto LABEL_40;
              }
            }
            else
            {
              v39 = v134;
              if (!v113)
              {
                v117 = *(_QWORD *)v108;
                v118 = *((_QWORD *)v108 + 1);
                *(_OWORD *)v108 = *__srcc;
                sub_237FFBAB0(v117, v118);
                v119 = *((_QWORD *)v108 + 2);
                v120 = *((_QWORD *)v108 + 3);
                *((_OWORD *)v108 + 1) = __srcc[1];
                sub_237FFBAB0(v119, v120);
                *((_QWORD *)v108 + 4) = *((_QWORD *)__srcc + 4);
                v108[40] = *((_BYTE *)__srcc + 40);
                v139(&v108[*(int *)(v110 + 28)], (char *)__srcc + *(int *)(v110 + 28), v146);
                goto LABEL_40;
              }
              sub_237FFD540((uint64_t)v108, type metadata accessor for Signature);
            }
            v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v108, __srcc, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
            goto LABEL_40;
          }
          sub_237FFD540((uint64_t)v71, type metadata accessor for SignedObject);
        }
        v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
        memcpy(v71, v68, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        v39 = v134;
LABEL_40:
        v97 = *(int *)(v15 + 24);
        v98 = v13 + v97;
        v99 = &v14[v97];
        v100 = type metadata accessor for LogConsistency(0);
        v101 = *(_QWORD *)(v100 - 8);
        v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
        v103 = v102(v98, 1, v100);
        v104 = v102((uint64_t)v99, 1, v100);
        if (v103)
        {
          if (!v104)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v98, v99, v47);
            *(_QWORD *)(v98 + *(int *)(v100 + 20)) = *(_QWORD *)&v99[*(int *)(v100 + 20)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
            return a1;
          }
        }
        else
        {
          if (!v104)
          {
            v139((char *)v98, v99, v47);
            *(_QWORD *)(v98 + *(int *)(v100 + 20)) = *(_QWORD *)&v99[*(int *)(v100 + 20)];
            swift_release();
            return a1;
          }
          sub_237FFD540(v98, type metadata accessor for LogConsistency);
        }
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
        v28 = (void *)v98;
        v29 = v99;
        goto LABEL_8;
      }
      sub_237FFD540((uint64_t)v37, type metadata accessor for LogEntry);
    }
    v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v37, v34, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    v47 = v146;
    goto LABEL_40;
  }
  if (v18)
  {
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
    v28 = (void *)v13;
    v29 = v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v19(v13, v14, v9);
  v20 = *(int *)(v15 + 20);
  v21 = (_QWORD *)(v13 + v20);
  v145 = v14;
  v22 = &v14[v20];
  v23 = type metadata accessor for LogEntry(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    v26 = v145;
  }
  else
  {
    __dsta = (void *)v13;
    v140 = v24;
    *v21 = *(_QWORD *)v22;
    *((_BYTE *)v21 + 8) = v22[8];
    v21[2] = *((_QWORD *)v22 + 2);
    *(_OWORD *)(v21 + 3) = *(_OWORD *)(v22 + 24);
    v50 = *((_QWORD *)v22 + 6);
    v21[5] = *((_QWORD *)v22 + 5);
    v21[6] = v50;
    *((_BYTE *)v21 + 56) = v22[56];
    v19((uint64_t)v21 + *(int *)(v23 + 36), &v22[*(int *)(v23 + 36)], v9);
    v51 = *(int *)(v23 + 40);
    v52 = (_OWORD *)((char *)v21 + v51);
    __srca = v19;
    v53 = &v22[v51];
    v54 = type metadata accessor for SignedObject(0);
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      v19 = __srca;
      v26 = v145;
      v13 = (uint64_t)__dsta;
    }
    else
    {
      v130 = v55;
      *v52 = *(_OWORD *)v53;
      __srca((uint64_t)v52 + *(int *)(v54 + 20), &v53[*(int *)(v54 + 20)], v9);
      v58 = *(int *)(v54 + 24);
      v133 = v52;
      v59 = (_OWORD *)((char *)v52 + v58);
      v60 = &v53[v58];
      v61 = type metadata accessor for Signature(0);
      v122 = *(_QWORD *)(v61 - 8);
      v124 = v61;
      v26 = v145;
      v126 = v54;
      if ((*(unsigned int (**)(char *, uint64_t))(v122 + 48))(v60, 1))
      {
        v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        v19 = __srca;
      }
      else
      {
        v85 = *((_OWORD *)v60 + 1);
        *v59 = *(_OWORD *)v60;
        v59[1] = v85;
        *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
        *((_BYTE *)v59 + 40) = v60[40];
        v86 = *(int *)(v124 + 28);
        v87 = &v60[v86];
        v19 = __srca;
        __srca((uint64_t)v59 + v86, v87, v9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v59, 0, 1, v124);
      }
      v13 = (uint64_t)__dsta;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v133, 0, 1, v126);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v21, 0, 1, v23);
  }
  v88 = *(int *)(v15 + 24);
  v89 = (char *)(v13 + v88);
  v90 = &v26[v88];
  v91 = type metadata accessor for LogConsistency(0);
  v92 = *(_QWORD *)(v91 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
  {
    v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    v19((uint64_t)v89, v90, v9);
    *(_QWORD *)&v89[*(int *)(v91 + 20)] = *(_QWORD *)&v90[*(int *)(v91 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_237FFE3CC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFE3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_2380BD5C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t sub_237FFE44C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFE458(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = sub_2380BD5C8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for ATLogProofResponse(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C54B0);
}

void sub_237FFE4E8()
{
  unint64_t v0;
  unint64_t v1;

  sub_2380BD5C8();
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, qword_2568C54C0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_237FFE588(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2380BD5C8();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for LogEntry(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v52 = v13;
      *v10 = *v11;
      *((_BYTE *)v10 + 8) = *((_BYTE *)v11 + 8);
      v16 = v11[3];
      v10[2] = v11[2];
      v17 = v11[4];
      swift_bridgeObjectRetain();
      sub_237FFBA20(v16, v17);
      v10[3] = v16;
      v10[4] = v17;
      v18 = v11[6];
      v10[5] = v11[5];
      v10[6] = v18;
      *((_BYTE *)v10 + 56) = *((_BYTE *)v11 + 56);
      v8((_QWORD *)((char *)v10 + *(int *)(v12 + 36)), (_QWORD *)((char *)v11 + *(int *)(v12 + 36)), v7);
      v19 = *(int *)(v12 + 40);
      v20 = (_QWORD *)((char *)v10 + v19);
      v53 = v8;
      v21 = (_QWORD *)((char *)v11 + v19);
      v22 = type metadata accessor for SignedObject(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = v52;
        v8 = v53;
      }
      else
      {
        v48 = v23;
        v51 = v7;
        v27 = *v21;
        v26 = v21[1];
        sub_237FFBA20(*v21, v26);
        *v20 = v27;
        v20[1] = v26;
        v53((_QWORD *)((char *)v20 + *(int *)(v22 + 20)), (uint64_t *)((char *)v21 + *(int *)(v22 + 20)), v51);
        v49 = v22;
        v50 = v20;
        v28 = *(int *)(v22 + 24);
        v29 = (_QWORD *)((char *)v20 + v28);
        v30 = (uint64_t *)((char *)v21 + v28);
        v31 = type metadata accessor for Signature(0);
        v32 = *(_QWORD *)(v31 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
          v25 = v52;
          v8 = v53;
        }
        else
        {
          v34 = *v30;
          v46 = v30[1];
          sub_237FFBA20(*v30, v46);
          *v29 = v34;
          v29[1] = v46;
          v35 = v30[2];
          v47 = v30[3];
          sub_237FFBA20(v35, v47);
          v29[2] = v35;
          v29[3] = v47;
          v29[4] = v30[4];
          *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
          v36 = *(int *)(v31 + 28);
          v37 = (char *)v30 + v36;
          v8 = v53;
          v53((_QWORD *)((char *)v29 + v36), (uint64_t *)v37, v51);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
          v25 = v52;
        }
        v7 = v51;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v50, 0, 1, v49);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v12);
    }
    v38 = *(int *)(a3 + 24);
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = type metadata accessor for LogConsistency(0);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v39, (uint64_t *)v40, v7);
      *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
      v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56);
      swift_retain();
      v44(v39, 0, 1, v41);
    }
  }
  return a1;
}

uint64_t sub_237FFE914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = sub_2380BD5C8();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for LogEntry(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    sub_237FFBAB0(*(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32));
    v5(v6 + *(int *)(v7 + 36), v4);
    v8 = v6 + *(int *)(v7 + 40);
    v9 = type metadata accessor for SignedObject(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      sub_237FFBAB0(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
      v5(v8 + *(int *)(v9 + 20), v4);
      v10 = v8 + *(int *)(v9 + 24);
      v11 = type metadata accessor for Signature(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
      {
        sub_237FFBAB0(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
        sub_237FFBAB0(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
        v5(v10 + *(int *)(v11 + 28), v4);
      }
    }
  }
  v12 = a1 + *(int *)(a2 + 24);
  v13 = type metadata accessor for LogConsistency(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
  if (!(_DWORD)result)
  {
    v5(v12, v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_237FFEAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = sub_2380BD5C8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for LogEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v54 = a3;
    v55 = v12;
    *v9 = *v10;
    *((_BYTE *)v9 + 8) = *((_BYTE *)v10 + 8);
    v14 = v10[3];
    v9[2] = v10[2];
    v15 = v10[4];
    swift_bridgeObjectRetain();
    sub_237FFBA20(v14, v15);
    v9[3] = v14;
    v9[4] = v15;
    v16 = v10[6];
    v9[5] = v10[5];
    v9[6] = v16;
    *((_BYTE *)v9 + 56) = *((_BYTE *)v10 + 56);
    v7((uint64_t)v9 + *(int *)(v11 + 36), (uint64_t)v10 + *(int *)(v11 + 36), v6);
    v17 = *(int *)(v11 + 40);
    v18 = (char *)v9 + v17;
    v19 = v7;
    v20 = (_QWORD *)((char *)v10 + v17);
    v21 = type metadata accessor for SignedObject(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v18, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v7 = v19;
      a3 = v54;
      v24 = v55;
    }
    else
    {
      v51 = v22;
      v25 = v19;
      v53 = v18;
      v27 = *v20;
      v26 = v20[1];
      sub_237FFBA20(*v20, v26);
      *v53 = v27;
      v53[1] = v26;
      v28 = v53;
      v52 = v25;
      v25((uint64_t)v53 + *(int *)(v21 + 20), (uint64_t)v20 + *(int *)(v21 + 20), v6);
      v29 = *(int *)(v21 + 24);
      v30 = (_QWORD *)((char *)v53 + v29);
      v31 = (uint64_t *)((char *)v20 + v29);
      v32 = type metadata accessor for Signature(0);
      v49 = *(_QWORD *)(v32 - 8);
      v33 = v32;
      v50 = v21;
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v49 + 48))(v31, 1))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v7 = v52;
      }
      else
      {
        v36 = *v31;
        v35 = v31[1];
        sub_237FFBA20(*v31, v35);
        *v30 = v36;
        v30[1] = v35;
        v38 = v31[2];
        v37 = v31[3];
        sub_237FFBA20(v38, v37);
        v30[2] = v38;
        v30[3] = v37;
        v30[4] = v31[4];
        *((_BYTE *)v30 + 40) = *((_BYTE *)v31 + 40);
        v39 = *(int *)(v33 + 28);
        v40 = (char *)v31 + v39;
        v7 = v52;
        v28 = v53;
        v52((uint64_t)v30 + v39, (uint64_t)v40, v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v30, 0, 1, v33);
      }
      a3 = v54;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v28, 0, 1, v50);
      v24 = v55;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v9, 0, 1, v11);
  }
  v41 = *(int *)(a3 + 24);
  v42 = (char *)(a1 + v41);
  v43 = (char *)(a2 + v41);
  v44 = type metadata accessor for LogConsistency(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v42, (uint64_t)v43, v6);
    *(_QWORD *)&v42[*(int *)(v44 + 20)] = *(_QWORD *)&v43[*(int *)(v44 + 20)];
    v47 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56);
    swift_retain();
    v47(v42, 0, 1, v44);
  }
  return a1;
}

uint64_t sub_237FFEE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  size_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  void (*v70)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, char *);
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  void (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;

  v6 = sub_2380BD5C8();
  v116 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 24);
  v7(a1, a2, v6);
  v117 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for LogEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v31 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
      *(_QWORD *)v9 = v31;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v10 + 24);
      v33 = *(_QWORD *)(v10 + 32);
      sub_237FFBA20(v32, v33);
      v34 = *(_QWORD *)(v9 + 24);
      v35 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 24) = v32;
      *(_QWORD *)(v9 + 32) = v33;
      sub_237FFBAB0(v34, v35);
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
      v36 = *(_QWORD *)(v10 + 48);
      *(_BYTE *)(v9 + 56) = *(_BYTE *)(v10 + 56);
      *(_QWORD *)(v9 + 48) = v36;
      v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
      v37 = *(int *)(v11 + 40);
      v9 += v37;
      v10 += v37;
      v38 = type metadata accessor for SignedObject(0);
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      LODWORD(v32) = v40(v9, 1, v38);
      v41 = v40(v10, 1, v38);
      if ((_DWORD)v32)
      {
        if (!v41)
        {
          v42 = *(_QWORD *)v10;
          v43 = *(_QWORD *)(v10 + 8);
          sub_237FFBA20(*(_QWORD *)v10, v43);
          *(_QWORD *)v9 = v42;
          *(_QWORD *)(v9 + 8) = v43;
          v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16);
          v44(v9 + *(int *)(v38 + 20), v10 + *(int *)(v38 + 20), v6);
          v45 = *(int *)(v38 + 24);
          v46 = (_QWORD *)(v9 + v45);
          v47 = (uint64_t *)(v10 + v45);
          v110 = v6;
          v48 = type metadata accessor for Signature(0);
          v113 = *(_QWORD *)(v48 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v113 + 48))(v47, 1, v48))
          {
            v49 = v110;
            v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          }
          else
          {
            v109 = (void (*)(char *, char *))v44;
            v115 = v7;
            v89 = *v47;
            v90 = v47[1];
            sub_237FFBA20(*v47, v90);
            *v46 = v89;
            v46[1] = v90;
            v91 = v47[2];
            v92 = v47[3];
            sub_237FFBA20(v91, v92);
            v46[2] = v91;
            v46[3] = v92;
            v7 = v115;
            v93 = v47[4];
            *((_BYTE *)v46 + 40) = *((_BYTE *)v47 + 40);
            v46[4] = v93;
            v49 = v110;
            v109((char *)v46 + *(int *)(v48 + 28), (char *)v47 + *(int *)(v48 + 28));
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v46, 0, 1, v48);
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v9, 0, 1, v38);
          v6 = v49;
          goto LABEL_10;
        }
      }
      else
      {
        if (!v41)
        {
          v73 = *(_QWORD *)v10;
          v74 = *(_QWORD *)(v10 + 8);
          sub_237FFBA20(*(_QWORD *)v10, v74);
          v75 = *(_QWORD *)v9;
          v76 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)v9 = v73;
          *(_QWORD *)(v9 + 8) = v74;
          sub_237FFBAB0(v75, v76);
          v7(v9 + *(int *)(v38 + 20), v10 + *(int *)(v38 + 20), v6);
          v77 = *(int *)(v38 + 24);
          v78 = v9 + v77;
          v79 = v10 + v77;
          v80 = type metadata accessor for Signature(0);
          v81 = *(_QWORD *)(v80 - 8);
          v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
          LODWORD(v73) = v82(v78, 1, v80);
          v83 = v82(v79, 1, v80);
          if ((_DWORD)v73)
          {
            if (!v83)
            {
              v84 = *(_QWORD *)v79;
              v85 = *(_QWORD *)(v79 + 8);
              sub_237FFBA20(*(_QWORD *)v79, v85);
              *(_QWORD *)v78 = v84;
              *(_QWORD *)(v78 + 8) = v85;
              v86 = *(_QWORD *)(v79 + 16);
              v87 = *(_QWORD *)(v79 + 24);
              sub_237FFBA20(v86, v87);
              *(_QWORD *)(v78 + 16) = v86;
              *(_QWORD *)(v78 + 24) = v87;
              v88 = *(_QWORD *)(v79 + 32);
              *(_BYTE *)(v78 + 40) = *(_BYTE *)(v79 + 40);
              *(_QWORD *)(v78 + 32) = v88;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16))(v78 + *(int *)(v80 + 28), v79 + *(int *)(v80 + 28), v6);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v83)
            {
              v94 = *(_QWORD *)v79;
              v95 = *(_QWORD *)(v79 + 8);
              sub_237FFBA20(*(_QWORD *)v79, v95);
              v96 = *(_QWORD *)v78;
              v97 = *(_QWORD *)(v78 + 8);
              *(_QWORD *)v78 = v94;
              *(_QWORD *)(v78 + 8) = v95;
              sub_237FFBAB0(v96, v97);
              v98 = *(_QWORD *)(v79 + 16);
              v99 = *(_QWORD *)(v79 + 24);
              sub_237FFBA20(v98, v99);
              v100 = *(_QWORD *)(v78 + 16);
              v101 = *(_QWORD *)(v78 + 24);
              *(_QWORD *)(v78 + 16) = v98;
              *(_QWORD *)(v78 + 24) = v99;
              sub_237FFBAB0(v100, v101);
              v102 = *(_QWORD *)(v79 + 32);
              *(_BYTE *)(v78 + 40) = *(_BYTE *)(v79 + 40);
              *(_QWORD *)(v78 + 32) = v102;
              v7(v78 + *(int *)(v80 + 28), v79 + *(int *)(v80 + 28), v6);
              goto LABEL_10;
            }
            sub_237FFD540(v78, type metadata accessor for Signature);
          }
          v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
          v28 = (void *)v78;
          v29 = (const void *)v79;
LABEL_9:
          memcpy(v28, v29, v27);
LABEL_10:
          v30 = v117;
          goto LABEL_23;
        }
        sub_237FFD540(v9, type metadata accessor for SignedObject);
      }
      v26 = &qword_2568C5438;
LABEL_8:
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v26) - 8) + 64);
      v28 = (void *)v9;
      v29 = (const void *)v10;
      goto LABEL_9;
    }
    sub_237FFD540(v9, type metadata accessor for LogEntry);
LABEL_7:
    v26 = &qword_2568C5440;
    goto LABEL_8;
  }
  if (v15)
    goto LABEL_7;
  v114 = v7;
  v16 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v16;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *(_QWORD *)(v10 + 32);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v17, v18);
  *(_QWORD *)(v9 + 24) = v17;
  *(_QWORD *)(v9 + 32) = v18;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  v19 = *(_QWORD *)(v10 + 48);
  *(_BYTE *)(v9 + 56) = *(_BYTE *)(v10 + 56);
  *(_QWORD *)(v9 + 48) = v19;
  v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16);
  v112(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v20 = *(int *)(v11 + 40);
  v21 = (_QWORD *)(v9 + v20);
  v22 = (uint64_t *)(v10 + v20);
  v23 = type metadata accessor for SignedObject(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v107 = v24;
    v108 = a2;
    v51 = v6;
    v52 = *v22;
    v53 = v22[1];
    sub_237FFBA20(*v22, v53);
    *v21 = v52;
    v21[1] = v53;
    v111 = v51;
    v112((uint64_t)v21 + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v51);
    v54 = *(int *)(v23 + 24);
    v55 = (_QWORD *)((char *)v21 + v54);
    v56 = (uint64_t *)((char *)v22 + v54);
    v57 = type metadata accessor for Signature(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v104 = v56[1];
      v106 = v21;
      v60 = *v56;
      sub_237FFBA20(*v56, v104);
      *v55 = v60;
      v21 = v106;
      v55[1] = v104;
      v103 = v56[3];
      v105 = v56[2];
      sub_237FFBA20(v105, v103);
      v55[2] = v105;
      v55[3] = v103;
      v61 = v56[4];
      *((_BYTE *)v55 + 40) = *((_BYTE *)v56 + 40);
      v55[4] = v61;
      v112((uint64_t)v55 + *(int *)(v57 + 28), (uint64_t)v56 + *(int *)(v57 + 28), v111);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    a2 = v108;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v21, 0, 1, v23);
    v6 = v111;
  }
  v7 = v114;
  v30 = v117;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_23:
  v62 = *(int *)(v30 + 24);
  v63 = (char *)(a1 + v62);
  v64 = (char *)(a2 + v62);
  v65 = type metadata accessor for LogConsistency(0);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      v7((uint64_t)v63, (uint64_t)v64, v6);
      *(_QWORD *)&v63[*(int *)(v65 + 20)] = *(_QWORD *)&v64[*(int *)(v65 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_237FFD540((uint64_t)v63, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v69)
  {
LABEL_28:
    v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v63, v64, v6);
  *(_QWORD *)&v63[*(int *)(v65 + 20)] = *(_QWORD *)&v64[*(int *)(v65 + 20)];
  v70 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56);
  swift_retain();
  v70(v63, 0, 1, v65);
  return a1;
}

uint64_t sub_237FFF590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);

  v6 = sub_2380BD5C8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for LogEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v40 = a3;
    *v9 = *v10;
    *((_BYTE *)v9 + 8) = *((_BYTE *)v10 + 8);
    v9[2] = v10[2];
    *(_OWORD *)(v9 + 3) = *(_OWORD *)(v10 + 3);
    v14 = v10[6];
    v9[5] = v10[5];
    v9[6] = v14;
    *((_BYTE *)v9 + 56) = *((_BYTE *)v10 + 56);
    v7((uint64_t)v9 + *(int *)(v11 + 36), (uint64_t)v10 + *(int *)(v11 + 36), v6);
    v15 = *(int *)(v11 + 40);
    v41 = v7;
    v16 = (_OWORD *)((char *)v9 + v15);
    v17 = (_OWORD *)((char *)v10 + v15);
    v18 = type metadata accessor for SignedObject(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      a3 = v40;
      v7 = v41;
    }
    else
    {
      v38 = v19;
      *v16 = *v17;
      v41((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v6);
      v21 = *(int *)(v18 + 24);
      v39 = v16;
      v22 = (_OWORD *)((char *)v16 + v21);
      v23 = (_OWORD *)((char *)v17 + v21);
      v24 = type metadata accessor for Signature(0);
      v37 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v37 + 48))(v23, 1, v24))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v7 = v41;
      }
      else
      {
        v26 = v23[1];
        *v22 = *v23;
        v22[1] = v26;
        *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
        *((_BYTE *)v22 + 40) = *((_BYTE *)v23 + 40);
        v27 = *(int *)(v24 + 28);
        v28 = (char *)v23 + v27;
        v29 = v24;
        v7 = v41;
        v41((uint64_t)v22 + v27, (uint64_t)v28, v6);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v22, 0, 1, v29);
      }
      a3 = v40;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v18);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v30 = *(int *)(a3 + 24);
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = type metadata accessor for LogConsistency(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(_QWORD *)&v31[*(int *)(v33 + 20)] = *(_QWORD *)&v32[*(int *)(v33 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_237FFF89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  size_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *__dst;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t, uint64_t);
  void (*v79)(uint64_t, uint64_t, uint64_t);
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;

  v6 = sub_2380BD5C8();
  v81 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 40);
  v7(a1, a2, v6);
  v82 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for LogEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v9 + 24);
      v29 = *(_QWORD *)(v9 + 32);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      sub_237FFBAB0(v28, v29);
      v30 = *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v9 + 48) = v30;
      *(_BYTE *)(v9 + 56) = *(_BYTE *)(v10 + 56);
      v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
      v31 = *(int *)(v11 + 40);
      v9 += v31;
      v10 += v31;
      v32 = type metadata accessor for SignedObject(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v9, 1, v32);
      v36 = v34(v10, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_OWORD *)v9 = *(_OWORD *)v10;
          v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
          v80 = v7;
          v78(v9 + *(int *)(v32 + 20), v10 + *(int *)(v32 + 20), v6);
          v37 = *(int *)(v32 + 24);
          v38 = (_OWORD *)(v9 + v37);
          v39 = (_OWORD *)(v10 + v37);
          v40 = type metadata accessor for Signature(0);
          v41 = *(_QWORD *)(v40 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
          {
            v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          }
          else
          {
            v69 = v39[1];
            *v38 = *v39;
            v38[1] = v69;
            *((_QWORD *)v38 + 4) = *((_QWORD *)v39 + 4);
            *((_BYTE *)v38 + 40) = *((_BYTE *)v39 + 40);
            v78((uint64_t)v38 + *(int *)(v40 + 28), (uint64_t)v39 + *(int *)(v40 + 28), v6);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
          }
          v7 = v80;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v9, 0, 1, v32);
          goto LABEL_10;
        }
      }
      else
      {
        if (!v36)
        {
          v58 = *(_QWORD *)v9;
          v59 = *(_QWORD *)(v9 + 8);
          *(_OWORD *)v9 = *(_OWORD *)v10;
          sub_237FFBAB0(v58, v59);
          v7(v9 + *(int *)(v32 + 20), v10 + *(int *)(v32 + 20), v6);
          v60 = *(int *)(v32 + 24);
          v61 = v9 + v60;
          v62 = (_OWORD *)(v10 + v60);
          v63 = type metadata accessor for Signature(0);
          v64 = *(_QWORD *)(v63 - 8);
          v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
          v66 = v65(v61, 1, v63);
          v67 = v65((uint64_t)v62, 1, v63);
          if (v66)
          {
            if (!v67)
            {
              v68 = v62[1];
              *(_OWORD *)v61 = *v62;
              *(_OWORD *)(v61 + 16) = v68;
              *(_QWORD *)(v61 + 32) = *((_QWORD *)v62 + 4);
              *(_BYTE *)(v61 + 40) = *((_BYTE *)v62 + 40);
              (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v61 + *(int *)(v63 + 28), (char *)v62 + *(int *)(v63 + 28), v6);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v67)
            {
              v70 = *(_QWORD *)v61;
              v71 = *(_QWORD *)(v61 + 8);
              *(_OWORD *)v61 = *v62;
              sub_237FFBAB0(v70, v71);
              v72 = *(_QWORD *)(v61 + 16);
              v73 = *(_QWORD *)(v61 + 24);
              *(_OWORD *)(v61 + 16) = v62[1];
              sub_237FFBAB0(v72, v73);
              *(_QWORD *)(v61 + 32) = *((_QWORD *)v62 + 4);
              *(_BYTE *)(v61 + 40) = *((_BYTE *)v62 + 40);
              v7(v61 + *(int *)(v63 + 28), (uint64_t)v62 + *(int *)(v63 + 28), v6);
              goto LABEL_10;
            }
            sub_237FFD540(v61, type metadata accessor for Signature);
          }
          v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
          v25 = (void *)v61;
          v26 = v62;
LABEL_9:
          memcpy(v25, v26, v24);
LABEL_10:
          v27 = v82;
          goto LABEL_23;
        }
        sub_237FFD540(v9, type metadata accessor for SignedObject);
      }
      v23 = &qword_2568C5438;
LABEL_8:
      v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v23) - 8) + 64);
      v25 = (void *)v9;
      v26 = (const void *)v10;
      goto LABEL_9;
    }
    sub_237FFD540(v9, type metadata accessor for LogEntry);
LABEL_7:
    v23 = &qword_2568C5440;
    goto LABEL_8;
  }
  if (v15)
    goto LABEL_7;
  v79 = v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
  v16 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 48) = v16;
  *(_BYTE *)(v9 + 56) = *(_BYTE *)(v10 + 56);
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
  v77(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v17 = *(int *)(v11 + 40);
  v18 = (_OWORD *)(v9 + v17);
  v19 = (_OWORD *)(v10 + v17);
  v20 = type metadata accessor for SignedObject(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v77((uint64_t)v18 + *(int *)(v20 + 20), (uint64_t)v19 + *(int *)(v20 + 20), v6);
    v43 = *(int *)(v20 + 24);
    v75 = v18;
    __dst = (_OWORD *)((char *)v18 + v43);
    v44 = (_OWORD *)((char *)v19 + v43);
    v45 = type metadata accessor for Signature(0);
    v74 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v74 + 48))(v44, 1, v45))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v47 = v44[1];
      *__dst = *v44;
      __dst[1] = v47;
      *((_QWORD *)__dst + 4) = *((_QWORD *)v44 + 4);
      *((_BYTE *)__dst + 40) = *((_BYTE *)v44 + 40);
      v77((uint64_t)__dst + *(int *)(v45 + 28), (uint64_t)v44 + *(int *)(v45 + 28), v6);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v74 + 56))(__dst, 0, 1, v45);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v75, 0, 1, v20);
  }
  v7 = v79;
  v27 = v82;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_23:
  v48 = *(int *)(v27 + 24);
  v49 = (char *)(a1 + v48);
  v50 = (char *)(a2 + v48);
  v51 = type metadata accessor for LogConsistency(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      v7((uint64_t)v49, (uint64_t)v50, v6);
      *(_QWORD *)&v49[*(int *)(v51 + 20)] = *(_QWORD *)&v50[*(int *)(v51 + 20)];
      swift_release();
      return a1;
    }
    sub_237FFD540((uint64_t)v49, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v55)
  {
LABEL_28:
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v49, v50, v6);
  *(_QWORD *)&v49[*(int *)(v51 + 20)] = *(_QWORD *)&v50[*(int *)(v51 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  return a1;
}

uint64_t sub_237FFFF24()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFFF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_2380BD5C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_237FFFFD0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FFFFDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_2380BD5C8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_238000084()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_2380BD5C8();
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, qword_2568C51D0, (void (*)(uint64_t))type metadata accessor for LogEntry);
    if (v1 <= 0x3F)
    {
      sub_237FFB4E8(319, qword_2568C5560, (void (*)(uint64_t))type metadata accessor for LogConsistency);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_238000144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for LogConsistency(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for LogConsistency._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = sub_237FFB020(v8);
    swift_release();
  }
  v9 = swift_retain();
  sub_23800020C(v9, a1, a2, a3);
  return swift_release();
}

uint64_t sub_23800020C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  result = sub_2380BD658();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          v16 = a2;
          v17 = a1;
          v18 = a3;
          v19 = a4;
          v20 = &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
          goto LABEL_10;
        case 4:
          v16 = a2;
          v17 = a1;
          v18 = a3;
          v19 = a4;
          v20 = &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
LABEL_10:
          sub_238000400(v16, v17, v18, v19, (uint64_t)v20, type metadata accessor for SignedObject, &qword_2568C56D0, (uint64_t)&unk_2380C2974);
          break;
        case 5:
          sub_23800037C();
          break;
        case 8:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
          goto LABEL_5;
        case 9:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
LABEL_5:
          sub_238000400(v11, v12, v13, v14, (uint64_t)v15, type metadata accessor for LogEntry, &qword_2568C5688, (uint64_t)&unk_2380C26A4);
          break;
        default:
          break;
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_23800037C()
{
  swift_beginAccess();
  sub_2380BD694();
  return swift_endAccess();
}

uint64_t sub_238000400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  swift_beginAccess();
  a6(0);
  sub_238001820(a7, a6, a8);
  sub_2380BD6D0();
  return swift_endAccess();
}

uint64_t sub_2380004C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for LogConsistency(0);
  v7 = swift_retain();
  sub_238000554(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return sub_2380BD5B0();
  return result;
}

uint64_t sub_238000554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = sub_23800068C(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh, 3);
  if (!v4)
  {
    sub_23800068C(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, 4);
    v10 = a1
        + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v10 + 16))
    {
      swift_bridgeObjectRetain();
      sub_2380BD778();
      swift_bridgeObjectRelease();
    }
    sub_238000818(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof, 8);
    return sub_238000818(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof, 9);
  }
  return result;
}

uint64_t sub_23800068C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[8];

  v16[1] = a6;
  v16[2] = a3;
  v16[7] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SignedObject(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + *a5;
  swift_beginAccess();
  sub_2380051FC(v14, (uint64_t)v9, &qword_2568C5438);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_238005240((uint64_t)v9, &qword_2568C5438);
  sub_238001DE4((uint64_t)v9, (uint64_t)v13, type metadata accessor for SignedObject);
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v13, type metadata accessor for SignedObject);
}

uint64_t sub_238000818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[8];

  v16[1] = a6;
  v16[2] = a3;
  v16[7] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LogEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + *a5;
  swift_beginAccess();
  sub_2380051FC(v14, (uint64_t)v9, &qword_2568C5440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_238005240((uint64_t)v9, &qword_2568C5440);
  sub_238001DE4((uint64_t)v9, (uint64_t)v13, type metadata accessor for LogEntry);
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v13, type metadata accessor for LogEntry);
}

BOOL sub_2380009A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;

  v93 = type metadata accessor for LogEntry(0);
  v89 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v87 = (uint64_t)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56D8);
  v5 = MEMORY[0x24BDAC7A8](v92);
  v88 = (uint64_t)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v90 = (uint64_t)&v85 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v86 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v91 = (uint64_t)&v85 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v99 = (char *)&v85 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v94 = (uint64_t)&v85 - v15;
  v16 = type metadata accessor for SignedObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v96 = (uint64_t)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v98 = (uint64_t)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v85 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v95 = (uint64_t)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v101 = (uint64_t)&v85 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v100 = (uint64_t)&v85 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v85 - v31;
  v33 = a1;
  v34 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  swift_beginAccess();
  sub_2380051FC(v34, (uint64_t)v32, &qword_2568C5438);
  v35 = a2
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  swift_beginAccess();
  v97 = v19;
  v36 = (uint64_t)&v23[*(int *)(v19 + 48)];
  sub_2380051FC((uint64_t)v32, (uint64_t)v23, &qword_2568C5438);
  sub_2380051FC(v35, v36, &qword_2568C5438);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v37((uint64_t)v23, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_238005240((uint64_t)v32, &qword_2568C5438);
    v38 = v37(v36, 1, v16);
    v39 = v33;
    if (v38 == 1)
    {
      sub_238005240((uint64_t)v23, &qword_2568C5438);
      v40 = a2;
      goto LABEL_8;
    }
LABEL_6:
    sub_238005240((uint64_t)v23, &qword_2568C56E0);
    swift_release();
LABEL_21:
    swift_release();
    return 0;
  }
  v40 = a2;
  v41 = v100;
  sub_2380051FC((uint64_t)v23, v100, &qword_2568C5438);
  if (v37(v36, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_238005240((uint64_t)v32, &qword_2568C5438);
    sub_237FFD540(v41, type metadata accessor for SignedObject);
    goto LABEL_6;
  }
  v42 = v36;
  v43 = v96;
  sub_238001DE4(v42, v96, type metadata accessor for SignedObject);
  swift_retain();
  swift_retain();
  v44 = sub_238053F5C(v41, v43);
  sub_237FFD540(v43, type metadata accessor for SignedObject);
  sub_238005240((uint64_t)v32, &qword_2568C5438);
  sub_237FFD540(v41, type metadata accessor for SignedObject);
  v39 = v33;
  sub_238005240((uint64_t)v23, &qword_2568C5438);
  if ((v44 & 1) == 0)
    goto LABEL_20;
LABEL_8:
  v45 = v39
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  swift_beginAccess();
  v46 = v101;
  sub_2380051FC(v45, v101, &qword_2568C5438);
  v47 = v40
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  swift_beginAccess();
  v48 = v98;
  v49 = v98 + *(int *)(v97 + 48);
  sub_2380051FC(v46, v98, &qword_2568C5438);
  sub_2380051FC(v47, v49, &qword_2568C5438);
  v50 = v40;
  if (v37(v48, 1, v16) == 1)
  {
    sub_238005240(v46, &qword_2568C5438);
    v51 = v37(v49, 1, v16);
    v52 = (uint64_t)v99;
    if (v51 == 1)
    {
      sub_238005240(v48, &qword_2568C5438);
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  v53 = v95;
  sub_2380051FC(v48, v95, &qword_2568C5438);
  v54 = v37(v49, 1, v16);
  v52 = (uint64_t)v99;
  if (v54 == 1)
  {
    sub_238005240(v101, &qword_2568C5438);
    sub_237FFD540(v53, type metadata accessor for SignedObject);
LABEL_13:
    sub_238005240(v48, &qword_2568C56E0);
LABEL_20:
    swift_release();
    goto LABEL_21;
  }
  v55 = v96;
  sub_238001DE4(v49, v96, type metadata accessor for SignedObject);
  v56 = sub_238053F5C(v53, v55);
  sub_237FFD540(v55, type metadata accessor for SignedObject);
  sub_238005240(v101, &qword_2568C5438);
  sub_237FFD540(v53, type metadata accessor for SignedObject);
  sub_238005240(v48, &qword_2568C5438);
  if ((v56 & 1) == 0)
    goto LABEL_20;
LABEL_16:
  v57 = (uint64_t *)(v39
                  + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  swift_beginAccess();
  v58 = *v57;
  v59 = (uint64_t *)(v50
                  + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  swift_beginAccess();
  v60 = *v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61 = sub_238002940(v58, v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) == 0)
    goto LABEL_20;
  v62 = v39;
  v63 = v39
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  swift_beginAccess();
  v64 = v94;
  sub_2380051FC(v63, v94, &qword_2568C5440);
  v65 = v50;
  v66 = v50
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  swift_beginAccess();
  v67 = v90;
  v68 = v90 + *(int *)(v92 + 48);
  sub_2380051FC(v64, v90, &qword_2568C5440);
  sub_2380051FC(v66, v68, &qword_2568C5440);
  v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  v70 = v93;
  if (v69(v67, 1, v93) == 1)
  {
    sub_238005240(v64, &qword_2568C5440);
    v71 = v69(v68, 1, v70);
    v72 = v91;
    if (v71 == 1)
    {
      sub_238005240(v67, &qword_2568C5440);
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  sub_2380051FC(v67, v52, &qword_2568C5440);
  v74 = v69(v68, 1, v70);
  v72 = v91;
  if (v74 == 1)
  {
    sub_238005240(v94, &qword_2568C5440);
    sub_237FFD540(v52, type metadata accessor for LogEntry);
LABEL_25:
    sub_238005240(v67, &qword_2568C56D8);
    goto LABEL_20;
  }
  v75 = v87;
  sub_238001DE4(v68, v87, type metadata accessor for LogEntry);
  v76 = sub_238055054(v52, v75);
  sub_237FFD540(v75, type metadata accessor for LogEntry);
  sub_238005240(v94, &qword_2568C5440);
  sub_237FFD540(v52, type metadata accessor for LogEntry);
  sub_238005240(v67, &qword_2568C5440);
  if ((v76 & 1) == 0)
    goto LABEL_20;
LABEL_28:
  v77 = v62
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  swift_beginAccess();
  sub_2380051FC(v77, v72, &qword_2568C5440);
  v78 = v65
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  swift_beginAccess();
  v79 = v88;
  v80 = v88 + *(int *)(v92 + 48);
  sub_2380051FC(v72, v88, &qword_2568C5440);
  sub_2380051FC(v78, v80, &qword_2568C5440);
  v81 = v93;
  if (v69(v79, 1, v93) != 1)
  {
    v82 = v86;
    sub_2380051FC(v79, v86, &qword_2568C5440);
    if (v69(v80, 1, v81) == 1)
    {
      swift_release();
      swift_release();
      sub_238005240(v91, &qword_2568C5440);
      sub_237FFD540(v82, type metadata accessor for LogEntry);
      goto LABEL_33;
    }
    v83 = v87;
    sub_238001DE4(v80, v87, type metadata accessor for LogEntry);
    v84 = sub_238055054(v82, v83);
    swift_release();
    swift_release();
    sub_237FFD540(v83, type metadata accessor for LogEntry);
    sub_238005240(v91, &qword_2568C5440);
    sub_237FFD540(v82, type metadata accessor for LogEntry);
    sub_238005240(v79, &qword_2568C5440);
    return (v84 & 1) != 0;
  }
  swift_release();
  swift_release();
  sub_238005240(v72, &qword_2568C5440);
  if (v69(v80, 1, v81) != 1)
  {
LABEL_33:
    sub_238005240(v79, &qword_2568C56D8);
    return 0;
  }
  sub_238005240(v79, &qword_2568C5440);
  return 1;
}

uint64_t sub_23800150C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_2380BD5BC();
  v4 = *(int *)(a1 + 20);
  if (qword_2568C4E50 != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = qword_2568C4E58;
  return swift_retain();
}

uint64_t sub_238001568()
{
  return 0x69736E6F43676F4CLL;
}

uint64_t sub_23800158C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_2380015C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_2380015FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238000144(a1, a2, a3);
}

uint64_t sub_238001610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2380004C4(a1, a2, a3);
}

uint64_t sub_238001624()
{
  sub_238001820(&qword_2568C56C8, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BED38);
  return sub_2380BD628();
}

uint64_t sub_238001674@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4E48, (uint64_t)qword_2568C9B18, a1);
}

uint64_t sub_238001690()
{
  sub_238001820(&qword_2568C55A0, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BED70);
  return sub_2380BD718();
}

uint64_t sub_2380016D0()
{
  sub_2380BE234();
  sub_2380BDCB8();
  return sub_2380BE264();
}

uint64_t sub_238001724()
{
  sub_238001820(&qword_2568C55A0, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BED70);
  return sub_2380BD724();
}

uint64_t sub_238001774()
{
  sub_2380BE234();
  sub_2380BDCB8();
  return sub_2380BE264();
}

uint64_t sub_2380017C8()
{
  return sub_238001820(&qword_2568C5598, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BEC80);
}

uint64_t sub_2380017F4()
{
  return sub_238001820(&qword_2568C55A0, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BED70);
}

uint64_t sub_238001820(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B82B770](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_238001860()
{
  return sub_238001820(&qword_2568C55A8, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BECA8);
}

uint64_t sub_23800188C()
{
  return sub_238001820(&qword_2568C55B0, type metadata accessor for LogConsistency, (uint64_t)&unk_2380BECE8);
}

uint64_t sub_2380018B8()
{
  return sub_238001820((unint64_t *)&qword_2568C55B8, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF3A8);
}

uint64_t sub_2380018E4()
{
  return sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
}

uint64_t sub_238001910()
{
  return sub_238001820(&qword_2568C55C8, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BEE98);
}

uint64_t sub_23800193C()
{
  return sub_238001820(&qword_2568C5ED0, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BF460);
}

uint64_t sub_238001968()
{
  return sub_238001820(&qword_2568C55D0, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BEEC0);
}

uint64_t sub_238001994()
{
  return sub_238001820(&qword_2568C55D8, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BEF88);
}

uint64_t sub_2380019C0()
{
  return sub_238001820(&qword_2568C5EC0, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BF4D8);
}

uint64_t sub_2380019EC()
{
  return sub_238001820(&qword_2568C55E0, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BEFB0);
}

uint64_t sub_238001A18()
{
  return sub_238001820(&qword_2568C55E8, type metadata accessor for ATLogInsertResponse, (uint64_t)&unk_2380BF078);
}

uint64_t type metadata accessor for ATLogInsertResponse(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C5828);
}

uint64_t sub_238001A58()
{
  return sub_238001820(&qword_2568C55F0, type metadata accessor for ATLogInsertResponse, (uint64_t)&unk_2380BF168);
}

uint64_t sub_238001A84()
{
  return sub_238001820(&qword_2568C55F8, type metadata accessor for ATLogInsertResponse, (uint64_t)&unk_2380BF0A0);
}

uint64_t sub_238001AB0()
{
  return sub_238001820(&qword_2568C5600, type metadata accessor for ATLogInsertResponse, (uint64_t)&unk_2380BF0E0);
}

uint64_t sub_238001ADC()
{
  return sub_238001820(&qword_2568C5608, type metadata accessor for ATLogInsertRequest, (uint64_t)&unk_2380BF1E0);
}

uint64_t type metadata accessor for ATLogInsertRequest(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C5780);
}

uint64_t sub_238001B1C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_238001B50()
{
  return sub_238001820(&qword_2568C5610, type metadata accessor for ATLogInsertRequest, (uint64_t)&unk_2380BF2D0);
}

uint64_t sub_238001B7C()
{
  return sub_238001820(&qword_2568C5618, type metadata accessor for ATLogInsertRequest, (uint64_t)&unk_2380BF208);
}

uint64_t sub_238001BA8()
{
  return sub_238001820(&qword_2568C5620, type metadata accessor for ATLogInsertRequest, (uint64_t)&unk_2380BF248);
}

unint64_t sub_238001BD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C5628;
  if (!qword_2568C5628)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C5630);
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2568C5628);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B82B764](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_238001C68()
{
  return sub_238001820(&qword_2568C5638, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BEE10);
}

uint64_t sub_238001C94()
{
  return sub_238001820(&qword_2568C5640, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BEDE8);
}

uint64_t sub_238001CC0()
{
  return sub_238001820(&qword_2568C5648, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BEF00);
}

uint64_t sub_238001CEC()
{
  return sub_238001820(&qword_2568C5650, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BEFF0);
}

unint64_t sub_238001D18()
{
  unint64_t result;

  result = qword_2568C5660;
  if (!qword_2568C5660)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3960, &type metadata for ProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_2568C5660);
  }
  return result;
}

unint64_t sub_238001D5C()
{
  unint64_t result;

  result = qword_2568C5668;
  if (!qword_2568C5668)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3918, &type metadata for Application);
    atomic_store(result, (unint64_t *)&qword_2568C5668);
  }
  return result;
}

unint64_t sub_238001DA0()
{
  unint64_t result;

  result = qword_2568C5678;
  if (!qword_2568C5678)
  {
    result = MEMORY[0x23B82B770](&unk_2380C38D0, &type metadata for Status);
    atomic_store(result, (unint64_t *)&qword_2568C5678);
  }
  return result;
}

uint64_t sub_238001DE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_238001E80()
{
  unint64_t result;

  result = qword_2568C56A8;
  if (!qword_2568C56A8)
  {
    result = MEMORY[0x23B82B770](&unk_2380BF7A8, &type metadata for ATLogDataType);
    atomic_store(result, (unint64_t *)&qword_2568C56A8);
  }
  return result;
}

uint64_t sub_238001EC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_2380BE1B0(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_2380BE1B0() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_238001F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_238002940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_238003254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD v22[10];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56F0);
  MEMORY[0x24BDAC7A8](v23);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Proto_SealedHash.Entry(0);
  v12 = MEMORY[0x24BDAC7A8](v25);
  v14 = (_DWORD *)((char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v17 = (_DWORD *)((char *)v22 - v16);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 != *(_QWORD *)(a2 + 16))
  {
LABEL_8:
    v20 = 0;
    return v20 & 1;
  }
  if (v18 && a1 != a2)
  {
    v22[8] = v11;
    v22[9] = v4;
    v22[2] = v6;
    v22[3] = v9;
    v22[6] = a2;
    v22[7] = 0;
    v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v22[4] = *(_QWORD *)(v15 + 72);
    v22[5] = a1;
    sub_2380051B8(a1 + v19, (uint64_t)v22 - v16);
    sub_2380051B8(a2 + v19, (uint64_t)v14);
    if (*v17 == *v14)
      __asm { BR              X10 }
    sub_237FFD540((uint64_t)v14, type metadata accessor for Proto_SealedHash.Entry);
    sub_237FFD540((uint64_t)v17, type metadata accessor for Proto_SealedHash.Entry);
    goto LABEL_8;
  }
  v20 = 1;
  return v20 & 1;
}

uint64_t sub_238003928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (_BYTE *)(a1 + 40);
  for (i = (_BYTE *)(a2 + 40); ; i += 16)
  {
    v5 = *((_QWORD *)v3 - 1);
    if (*v3 == 1)
      v5 = qword_2380BF7F8[v5];
    v6 = *((_QWORD *)i - 1);
    if (*i)
      break;
    if (v5 != v6)
      return 0;
    v3 += 16;
    if (!--v2)
      return 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_2380039A8 + 4 * byte_2380BEB29[v6]))();
}

uint64_t sub_238003A28(uint64_t a1)
{
  MEMORY[0x23B82B770](&unk_2380BF738, a1);
  return sub_2380BD4C0();
}

uint64_t sub_238003A64()
{
  MEMORY[0x23B82B770](&unk_2380BF738);
  return sub_2380BD4B4();
}

uint64_t sub_238003AAC(uint64_t a1, uint64_t a2)
{
  sub_2380BE234();
  MEMORY[0x23B82B770](&unk_2380BF738, a2);
  sub_2380BD4B4();
  return sub_2380BE264();
}

uint64_t sub_238003B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B82B770](&unk_2380BF738, a3);
  return sub_2380BD4A8();
}

void sub_238003B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_238003BB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x238003D94);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_238003DB8(uint64_t result)
{
  switch(result)
  {
    case 0:
    case 2:
      return result;
    case 1:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 4;
      break;
    default:
      if (result == 100)
        result = 5;
      break;
  }
  return result;
}

uint64_t sub_238003E34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t inserted;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v11 = qword_2380BF848[v11];
  v12 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v11 == v12)
  {
    inserted = type metadata accessor for ATLogInsertResponse(0);
    v15 = (uint64_t)a1 + *(int *)(inserted + 20);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (uint64_t)a2 + *(int *)(inserted + 20), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v13 = sub_2380BDCE8();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_238003FEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char v34;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v4 = sub_2380BD5C8();
  v53 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v46 - v7;
  v8 = type metadata accessor for ATLogProofs(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56C0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v46 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v46 - v21;
  v23 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v23 = qword_2380BF848[v23];
  v24 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v23 != v24)
    goto LABEL_12;
  v49 = v4;
  v25 = type metadata accessor for ATLogProofResponse(0);
  v26 = (char *)a1;
  v27 = a2;
  v28 = v25;
  v29 = *(int *)(v25 + 24);
  v47 = v26;
  sub_2380051FC((uint64_t)&v26[v29], (uint64_t)v22, qword_2568C5450);
  v48 = v28;
  v30 = *(int *)(v28 + 24);
  v31 = v27;
  sub_2380051FC((uint64_t)v27 + v30, (uint64_t)v20, qword_2568C5450);
  v32 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_2380051FC((uint64_t)v22, (uint64_t)v13, qword_2568C5450);
  sub_2380051FC((uint64_t)v20, v32, qword_2568C5450);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v33((uint64_t)v13, 1, v8) == 1)
  {
    sub_238005240((uint64_t)v20, qword_2568C5450);
    sub_238005240((uint64_t)v22, qword_2568C5450);
    if (v33(v32, 1, v8) == 1)
    {
      sub_238005240((uint64_t)v13, qword_2568C5450);
LABEL_15:
      v38 = v48;
      v39 = v53;
      v40 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
      v41 = v51;
      v42 = v49;
      v40(v51, &v47[*(int *)(v48 + 20)], v49);
      v43 = (char *)v31 + *(int *)(v38 + 20);
      v44 = v52;
      v40(v52, v43, v42);
      sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v34 = sub_2380BDCE8();
      v45 = *(void (**)(char *, uint64_t))(v39 + 8);
      v45(v44, v42);
      v45(v41, v42);
      return v34 & 1;
    }
    goto LABEL_11;
  }
  sub_2380051FC((uint64_t)v13, (uint64_t)v17, qword_2568C5450);
  if (v33(v32, 1, v8) == 1)
  {
    sub_238005240((uint64_t)v20, qword_2568C5450);
    sub_238005240((uint64_t)v22, qword_2568C5450);
    sub_237FFD540((uint64_t)v17, type metadata accessor for ATLogProofs);
LABEL_11:
    sub_238005240((uint64_t)v13, &qword_2568C56C0);
    goto LABEL_12;
  }
  v36 = v50;
  sub_238001DE4(v32, v50, type metadata accessor for ATLogProofs);
  v37 = _s16CloudAttestation21TransparencyLogProofsV2eeoiySbAC_ACtFZ_0((uint64_t)v17, v36);
  sub_237FFD540(v36, type metadata accessor for ATLogProofs);
  sub_238005240((uint64_t)v20, qword_2568C5450);
  sub_238005240((uint64_t)v22, qword_2568C5450);
  sub_237FFD540((uint64_t)v17, type metadata accessor for ATLogProofs);
  sub_238005240((uint64_t)v13, qword_2568C5450);
  if ((v37 & 1) != 0)
    goto LABEL_15;
LABEL_12:
  v34 = 0;
  return v34 & 1;
}

uint64_t sub_238004470(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t inserted;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v24 - v9;
  v11 = *a1;
  v12 = *a2;
  if (*((_BYTE *)a1 + 8) == 1)
    v11 = qword_2380BF8B0[v11];
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v11 != v12)
    goto LABEL_18;
  v13 = a2[2];
  if (*((_BYTE *)a2 + 24) == 1)
    __asm { BR              X11 }
  if (a1[2] != v13)
    goto LABEL_18;
  v14 = a1[4];
  if (*((_BYTE *)a1 + 40) == 1)
    v14 = qword_2380BF880[v14];
  v15 = a2[4];
  if (*((_BYTE *)a2 + 40))
    __asm { BR              X11 }
  if (v14 == v15
    && a1[6] == a2[6]
    && (sub_238008ED0(a1[7], a1[8]), (v16 & 1) != 0)
    && (sub_238008ED0(a1[9], a1[10]), (v17 & 1) != 0))
  {
    inserted = type metadata accessor for ATLogInsertRequest(0);
    v19 = (uint64_t)a1 + *(int *)(inserted + 40);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v10, v19, v4);
    v20(v8, (uint64_t)a2 + *(int *)(inserted + 40), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v21 = sub_2380BDCE8();
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v8, v4);
    v22(v10, v4);
  }
  else
  {
LABEL_18:
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_238004758(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  v11 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v11 = qword_2380BF8B0[v11];
  v12 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v11 != v12)
    goto LABEL_11;
  v13 = a2[2];
  if (*((_BYTE *)a2 + 24) == 1)
    __asm { BR              X11 }
  if (a1[2] == v13 && (sub_238008ED0(a1[4], a1[5]), (v14 & 1) != 0))
  {
    v15 = type metadata accessor for ATLogProofRequest(0);
    v16 = (uint64_t)a1 + *(int *)(v15 + 28);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, (uint64_t)a2 + *(int *)(v15 + 28), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = sub_2380BDCE8();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }
  else
  {
LABEL_11:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_238004994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for LogConsistency(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), v14 = sub_2380009A4(v12, v13), swift_release(), swift_release(), v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = sub_2380BDCE8();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t _s16CloudAttestation21TransparencyLogProofsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a1;
  v68 = a2;
  v2 = sub_2380BD5C8();
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v57 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v56 = (char *)&v55 - v5;
  v65 = type metadata accessor for LogConsistency(0);
  v62 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v55 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56F8);
  MEMORY[0x24BDAC7A8](v61);
  v66 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v60 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v63 = (uint64_t)&v55 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v64 = (uint64_t)&v55 - v13;
  v14 = type metadata accessor for LogEntry(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56D8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v55 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v55 - v28;
  v30 = type metadata accessor for ATLogProofs(0);
  sub_2380051FC(v67 + *(int *)(v30 + 20), (uint64_t)v29, &qword_2568C5440);
  sub_2380051FC(v68 + *(int *)(v30 + 20), (uint64_t)v27, &qword_2568C5440);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_2380051FC((uint64_t)v29, (uint64_t)v20, &qword_2568C5440);
  sub_2380051FC((uint64_t)v27, v31, &qword_2568C5440);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) != 1)
  {
    sub_2380051FC((uint64_t)v20, (uint64_t)v24, &qword_2568C5440);
    if (v32(v31, 1, v14) != 1)
    {
      sub_238001DE4(v31, (uint64_t)v17, type metadata accessor for LogEntry);
      v35 = sub_23806091C(v24, v17);
      sub_237FFD540((uint64_t)v17, type metadata accessor for LogEntry);
      sub_238005240((uint64_t)v27, &qword_2568C5440);
      sub_238005240((uint64_t)v29, &qword_2568C5440);
      sub_237FFD540((uint64_t)v24, type metadata accessor for LogEntry);
      sub_238005240((uint64_t)v20, &qword_2568C5440);
      if ((v35 & 1) == 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    sub_238005240((uint64_t)v27, &qword_2568C5440);
    sub_238005240((uint64_t)v29, &qword_2568C5440);
    sub_237FFD540((uint64_t)v24, type metadata accessor for LogEntry);
LABEL_6:
    v33 = &qword_2568C56D8;
    v34 = (uint64_t)v20;
LABEL_14:
    sub_238005240(v34, v33);
    goto LABEL_15;
  }
  sub_238005240((uint64_t)v27, &qword_2568C5440);
  sub_238005240((uint64_t)v29, &qword_2568C5440);
  if (v32(v31, 1, v14) != 1)
    goto LABEL_6;
  sub_238005240((uint64_t)v20, &qword_2568C5440);
LABEL_8:
  v36 = v67;
  v37 = v64;
  sub_2380051FC(v67 + *(int *)(v30 + 24), v64, &qword_2568C5448);
  v38 = v68;
  v39 = v63;
  sub_2380051FC(v68 + *(int *)(v30 + 24), v63, &qword_2568C5448);
  v40 = v66;
  v41 = v66 + *(int *)(v61 + 48);
  sub_2380051FC(v37, v66, &qword_2568C5448);
  sub_2380051FC(v39, v41, &qword_2568C5448);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v43 = v65;
  if (v42(v40, 1, v65) == 1)
  {
    sub_238005240(v39, &qword_2568C5448);
    sub_238005240(v37, &qword_2568C5448);
    if (v42(v41, 1, v43) == 1)
    {
      sub_238005240(v40, &qword_2568C5448);
LABEL_18:
      v50 = v58;
      v49 = v59;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
      v52 = v56;
      v51(v56, v36, v59);
      v53 = v57;
      v51(v57, v38, v49);
      sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v45 = sub_2380BDCE8();
      v54 = *(void (**)(char *, uint64_t))(v50 + 8);
      v54(v53, v49);
      v54(v52, v49);
      return v45 & 1;
    }
    goto LABEL_13;
  }
  v44 = v60;
  sub_2380051FC(v40, v60, &qword_2568C5448);
  if (v42(v41, 1, v43) == 1)
  {
    sub_238005240(v39, &qword_2568C5448);
    sub_238005240(v37, &qword_2568C5448);
    sub_237FFD540(v44, type metadata accessor for LogConsistency);
LABEL_13:
    v33 = &qword_2568C56F8;
    v34 = v40;
    goto LABEL_14;
  }
  v47 = v55;
  sub_238001DE4(v41, v55, type metadata accessor for LogConsistency);
  v48 = sub_238004994(v44, v47);
  sub_237FFD540(v47, type metadata accessor for LogConsistency);
  sub_238005240(v39, &qword_2568C5448);
  sub_238005240(v37, &qword_2568C5448);
  sub_237FFD540(v44, type metadata accessor for LogConsistency);
  sub_238005240(v40, &qword_2568C5448);
  if ((v48 & 1) != 0)
    goto LABEL_18;
LABEL_15:
  v45 = 0;
  return v45 & 1;
}

uint64_t sub_238005174(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_2380051B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_SealedHash.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2380051FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_238005240(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
  sub_2380052E0(a1, &qword_2568C5700);
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
  sub_2380052E0(a1, &qword_2568C5708);
}

void type metadata accessor for CFNumber(uint64_t a1)
{
  sub_2380052E0(a1, &qword_2568C5710);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_2380052E0(a1, &qword_2568C5718);
}

void type metadata accessor for SecPolicy(uint64_t a1)
{
  sub_2380052E0(a1, qword_2568C5720);
}

void sub_2380052E0(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Application(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Application(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_23800538C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2380053A8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ATLogDataType()
{
  return &type metadata for ATLogDataType;
}

_QWORD *sub_2380053D8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v7 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    v8 = a2[8];
    sub_237FFBA20(v7, v8);
    v4[7] = v7;
    v4[8] = v8;
    v9 = a2[9];
    v10 = a2[10];
    sub_237FFBA20(v9, v10);
    v4[9] = v9;
    v4[10] = v10;
    v11 = *(int *)(a3 + 40);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = sub_2380BD5C8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_2380054C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237FFBAB0(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  sub_237FFBAB0(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23800551C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  sub_237FFBA20(v6, v7);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  sub_237FFBA20(v8, v9);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_2380055E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = a2[6];
  v9 = a2[7];
  v10 = a2[8];
  sub_237FFBA20(v9, v10);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  sub_237FFBAB0(v11, v12);
  v13 = a2[9];
  v14 = a2[10];
  sub_237FFBA20(v13, v14);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  sub_237FFBAB0(v15, v16);
  v17 = *(int *)(a3 + 40);
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t sub_2380056B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_238005750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v6;
  sub_237FFBAB0(v7, v8);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_237FFBAB0(v9, v10);
  v11 = *(int *)(a3 + 40);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_238005808()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238005814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 64) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_23800589C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380058A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t sub_238005924()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2380059B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 20);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = sub_2380BD5C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_238005A44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_238005A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_238005AE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_238005B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_238005BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_238005C0C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238005C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_238005C58()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238005C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_238005CA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_238005D20()
{
  unint64_t result;

  result = qword_2568C5860;
  if (!qword_2568C5860)
  {
    result = MEMORY[0x23B82B770](&unk_2380BF65C, &type metadata for ATLogDataType);
    atomic_store(result, (unint64_t *)&qword_2568C5860);
  }
  return result;
}

uint64_t sub_238005D64()
{
  return sub_238001820(&qword_2568C5868, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_2380BF764);
}

uint64_t sub_238005D90()
{
  return sub_238001820(&qword_2568C5870, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_2380BF70C);
}

unint64_t sub_238005DC0()
{
  unint64_t result;

  result = qword_2568C5878;
  if (!qword_2568C5878)
  {
    result = MEMORY[0x23B82B770](&unk_2380BF684, &type metadata for ATLogDataType);
    atomic_store(result, (unint64_t *)&qword_2568C5878);
  }
  return result;
}

unint64_t sub_238005E08()
{
  unint64_t result;

  result = qword_2568C5880;
  if (!qword_2568C5880)
  {
    result = MEMORY[0x23B82B770](&unk_2380BF6C4, &type metadata for ATLogDataType);
    atomic_store(result, (unint64_t *)&qword_2568C5880);
  }
  return result;
}

SecTrustRef sub_238005E4C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const __CFData *v7;
  SecCertificateRef v8;
  uint64_t v9;
  void *v10;
  void *v11;
  OSStatus v12;
  SecTrustRef v13;
  uint64_t v14;
  SecTrustRef v16[2];

  v16[1] = *(SecTrustRef *)MEMORY[0x24BDAC8D0];
  v1 = MEMORY[0x24BEE4AF8];
  v16[0] = (SecTrustRef)MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    v4 = v2;
    do
    {
      v5 = *(v3 - 1);
      v6 = *v3;
      sub_237FFBA20(v5, *v3);
      v7 = (const __CFData *)sub_2380BD358();
      v8 = SecCertificateCreateWithData(0, v7);

      v9 = sub_237FFBAB0(v5, v6);
      if (v8)
      {
        MEMORY[0x23B82AD20](v9);
        if (*(_QWORD *)(((unint64_t)v16[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v16[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2380BDEBC();
        sub_2380BDEE0();
        sub_2380BDEB0();
      }
      v3 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v1 = (unint64_t)v16[0];
  }
  if (!(v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10) == v2)
      goto LABEL_11;
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v14 = sub_2380BE0E4();
  swift_bridgeObjectRelease();
  if (v14 != v2)
    goto LABEL_14;
LABEL_11:
  v16[0] = 0;
  type metadata accessor for SecCertificate(0);
  v10 = (void *)sub_2380BDE98();
  type metadata accessor for SecPolicy(0);
  v11 = (void *)sub_2380BDE98();
  v12 = SecTrustCreateWithCertificates(v10, v11, v16);

  v13 = v16[0];
  swift_bridgeObjectRelease();
  if (v12)
  {

    return 0;
  }
  return v13;
}

void SEP.SealedHash.flags.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SEP.SealedHash.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SEP.SealedHash(0) + 20);
  return sub_2380060A0(v3, a1);
}

uint64_t type metadata accessor for SEP.SealedHash(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C5920);
}

uint64_t sub_2380060A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SEP.SealedHash.Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SEP.SealedHash.Value(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C59C8);
}

uint64_t SEP.SealedHash.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v16[2];
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;

  v1 = sub_2380BD85C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2380BD9AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SEP.SealedHash.Value(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SEP.SealedHash(0);
  sub_2380060A0(v0 + *(int *)(v12 + 20), (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload())
    return *(_QWORD *)v11;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  sub_2380BD994();
  v18 = v1;
  v19 = sub_238001820(&qword_2568C5888, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6320], MEMORY[0x24BDC6310]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, char *, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v4, v1);
  __swift_project_boxed_opaque_existential_1(v17, v18);
  sub_2380BD268();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v13 = v16[1];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v13;
}

uint64_t sub_2380062E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v16[2];
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = sub_2380BD85C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2380BD9AC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SEP.SealedHash.Value(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380060A0(v1, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload())
    return *(_QWORD *)v12;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
  sub_2380BD994();
  v18 = v2;
  v19 = sub_238001820(&qword_2568C5888, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6320], MEMORY[0x24BDC6310]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(boxed_opaque_existential_1, v5, v2);
  __swift_project_boxed_opaque_existential_1(v17, v18);
  sub_2380BD268();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13 = v16[1];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t SEP.SealedHash.init<A, B>(ratchet:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _BYTE *v39;
  char v40;

  v38 = a5;
  v36 = a4;
  v34 = a1;
  v31 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2380BDF7C();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v20 = (char *)&v30 - v19;
  *a6 = 2;
  type metadata accessor for SEP.SealedHash(0);
  v39 = a6;
  sub_2380BD9A0();
  type metadata accessor for SEP.SealedHash.Value(0);
  v21 = a2;
  swift_storeEnumTagMultiPayload();
  v33 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v34, a2);
  sub_2380BDE08();
  swift_getAssociatedConformanceWitness();
  sub_2380BDF88();
  v22 = v31;
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v23(v14, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v20, AssociatedTypeWitness);
    sub_238008B9C();
    swift_allocError();
    *(_DWORD *)v24 = 2;
    *(_BYTE *)(v24 + 4) = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v21);
  }
  else
  {
    v35 = v20;
    v36 = AssociatedTypeWitness;
    v30 = v21;
    v25 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    while (1)
    {
      v25(v37, v14, a3);
      v26 = sub_2380BD3B8();
      v28 = v27;
      v40 = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v26, v27);
      if (v6)
        break;
      sub_237FFBAB0(v26, v28);
      sub_2380BDF88();
      if (v23(v14, 1, a3) == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v36);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v30);
      }
    }
    sub_237FFBAB0(v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v30);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v36);
  }
  return sub_237FFD540((uint64_t)v39, type metadata accessor for SEP.SealedHash);
}

uint64_t sub_238006870@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void sub_2380068C4(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_238006928
     + dword_238006B5C[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_238006938()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_237FFBA20(v1, v0);
  sub_238008B08(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_237FFBAB0(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t sub_238006B6C(uint64_t a1, unint64_t a2)
{
  __int128 v3[2];
  uint64_t v4;
  __int128 v5;
  _QWORD v6[4];
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  *(_QWORD *)&v5 = a1;
  *((_QWORD *)&v5 + 1) = a2;
  sub_237FFBA20(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A18);
  if (!swift_dynamicCast())
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    sub_23800A45C((uint64_t)v3);
    __asm { BR              X10 }
  }
  sub_23800A4E4(v3, (uint64_t)v6);
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  sub_2380BD268();
  sub_237FFBAB0(v7, v8);
  v3[0] = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return *(_QWORD *)&v3[0];
}

void SEP.SealedHash.ratchet(digest:flags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for SEP.SealedHash.Value(0);
  MEMORY[0x24BDAC7A8](v7);
  v5 = sub_2380BD9AC();
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v4 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2;
  __asm { BR              X9 }
}

uint64_t sub_238007228()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v6 = BYTE6(*(_QWORD *)(v5 - 112));
  if (sub_2380BD850() >= v6)
  {
    v8 = *v0;
    if ((*v0 & 6) == 2)
    {
      v9 = type metadata accessor for SEP.SealedHash(0);
      sub_2380060A0((uint64_t)&v0[*(int *)(v9 + 20)], v4);
      if (!swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(v1 + 32))(*(_QWORD *)(v5 - 128), v4, *(_QWORD *)(v5 - 136));
        if ((v2 & 4) != 0)
          *v0 = v8 | 4;
        __asm { BR              X10 }
      }
      sub_237FFD540(v4, type metadata accessor for SEP.SealedHash.Value);
    }
    sub_238008B9C();
    swift_allocError();
    *(_DWORD *)v7 = 0;
  }
  else
  {
    sub_238008B9C();
    swift_allocError();
    *(_DWORD *)v7 = 1;
  }
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow();
}

uint64_t SEP.SealedHash.init(entry:)(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  sub_237FFBA20(*a1, v2);
  SEP.SealedHash.init(digest:flags:)(v1, v2);
  sub_237FFBAB0(v1, v2);
  return sub_238008CF0(v3, v4);
}

void SEP.SealedHash.init(digest:flags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_2380BD9AC();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X9 }
}

uint64_t sub_238007714()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;

  *(_QWORD *)(v6 - 112) = v0;
  if (sub_2380BD850() >= BYTE6(v1))
  {
    *v5 = v4;
    if ((v4 & 2) != 0)
    {
      sub_2380BD9A0();
      __asm { BR              X10 }
    }
    v9 = (uint64_t *)&v5[*(int *)(type metadata accessor for SEP.SealedHash(0) + 20)];
    *v9 = v2;
    v9[1] = v1;
    type metadata accessor for SEP.SealedHash.Value(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    sub_238008B9C();
    swift_allocError();
    *(_DWORD *)v7 = 1;
    *(_BYTE *)(v7 + 4) = 1;
    swift_willThrow();
    return sub_237FFBAB0(v2, v1);
  }
}

uint64_t SEP.SealedHash.init<A>(entries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;

  v9 = type metadata accessor for SEP.SealedHash(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a3;
  v13 = sub_238007CDC((void (*)(char *, char *))sub_238007CAC, 0, a2, MEMORY[0x24BDCDDE8], MEMORY[0x24BEE4078], a3, MEMORY[0x24BEE40A8], v12);
  *v11 = 2;
  sub_2380BD9A0();
  type metadata accessor for SEP.SealedHash.Value(0);
  swift_storeEnumTagMultiPayload();
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v27 = (_BYTE *)a4;
    v28 = a1;
    swift_bridgeObjectRetain();
    for (i = (unint64_t *)(v13 + 40); ; i += 2)
    {
      v17 = *(i - 1);
      v16 = *i;
      sub_237FFBA20(v17, *i);
      sub_2380068C4(v17, v16);
      v19 = v18;
      v21 = v20;
      v32 = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v18, v20);
      if (v4)
        break;
      sub_237FFBAB0(v19, v21);
      if (!--v14)
      {
        swift_bridgeObjectRelease_n();
        v22 = v27;
        sub_238008D04((uint64_t)v11, (uint64_t)v27);
        v30 = 0;
        v23 = v28;
        sub_2380BDE44();
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v23, a2);
        *v22 = v31;
        return result;
      }
    }
    sub_237FFBAB0(v19, v21);
    swift_bridgeObjectRelease_n();
    sub_237FFD540((uint64_t)v11, type metadata accessor for SEP.SealedHash);
    a1 = v28;
  }
  else
  {
    sub_238008B9C();
    swift_allocError();
    *(_DWORD *)v25 = 2;
    *(_BYTE *)(v25 + 4) = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_237FFD540((uint64_t)v11, type metadata accessor for SEP.SealedHash);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_238007CAC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return sub_237FFBA20(v3, v2);
}

uint64_t sub_238007CDC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_2380BDF7C();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_2380BDE14();
  v57 = sub_2380BE09C();
  v53 = sub_2380BE0A8();
  sub_2380BE084();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_2380BDE08();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_2380BDF88();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_2380BE090();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_2380BDF88();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_2380BE090();
      sub_2380BDF88();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

_BYTE *sub_2380081E8@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = *(_BYTE *)(a2 + 32) | *result;
  return result;
}

uint64_t SEP.SealedHash.init(from:flags:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE *a4@<X8>)
{
  char v7;
  _QWORD *v8;
  uint64_t result;

  v7 = *a3;
  v8 = &a4[*(int *)(type metadata accessor for SEP.SealedHash(0) + 20)];
  *v8 = a1;
  v8[1] = a2;
  type metadata accessor for SEP.SealedHash.Value(0);
  result = swift_storeEnumTagMultiPayload();
  *a4 = v7;
  return result;
}

void static SEP.SealedHash.Flags.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t SEP.SealedHash.Flags.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SEP.SealedHash.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

{
  *a2 = result;
  return result;
}

void static SEP.SealedHash.Flags.ratchet.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static SEP.SealedHash.Flags.ratchetLocked.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static SEP.SealedHash.Flags.cryptexMeasurement.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

_BYTE *sub_2380082A8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_2380082B4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_2380082BC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_2380082D0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_2380082E4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_2380082F8(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_238008328@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_238008354@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_238008378(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_23800838C(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_2380083A0(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_2380083B4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_2380083C8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_2380083DC(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_2380083F0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_238008404()
{
  _BYTE *v0;

  return *v0 == 0;
}

uint64_t sub_238008414()
{
  return sub_2380BE000();
}

_BYTE *sub_23800842C(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_238008440@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_238008450(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL sub_23800845C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SEP.SealedHash.Value.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_2380062E0();
  v2 = v1;
  sub_2380655C8(v0, v1);
  v4 = v3;
  sub_237FFBAB0(v0, v2);
  return v4;
}

uint64_t static SEP.SealedHash.Value.== infix(_:_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = sub_2380062E0();
  v2 = v1;
  v3 = sub_2380062E0();
  v5 = v4;
  sub_238008ED0(v0, v2);
  v7 = v6;
  sub_237FFBAB0(v3, v5);
  sub_237FFBAB0(v0, v2);
  return v7 & 1;
}

uint64_t sub_238008540()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = sub_2380062E0();
  v2 = v1;
  v3 = sub_2380062E0();
  v5 = v4;
  sub_238008ED0(v0, v2);
  v7 = v6;
  sub_237FFBAB0(v3, v5);
  sub_237FFBAB0(v0, v2);
  return v7 & 1;
}

uint64_t sub_2380085C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_2380062E0();
  v2 = v1;
  sub_2380655C8(v0, v1);
  v4 = v3;
  sub_237FFBAB0(v0, v2);
  return v4;
}

uint64_t static SEP.SealedHash.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;

  if (*a1 != *a2)
    return 0;
  type metadata accessor for SEP.SealedHash(0);
  v2 = sub_2380062E0();
  v4 = v3;
  v5 = sub_2380062E0();
  v7 = v6;
  sub_238008ED0(v2, v4);
  v9 = v8;
  sub_237FFBAB0(v5, v7);
  sub_237FFBAB0(v2, v4);
  return v9 & 1;
}

uint64_t sub_2380086B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;

  if (*a1 != *a2)
    return 0;
  v2 = sub_2380062E0();
  v4 = v3;
  v5 = sub_2380062E0();
  v7 = v6;
  sub_238008ED0(v2, v4);
  v9 = v8;
  sub_237FFBAB0(v5, v7);
  sub_237FFBAB0(v2, v4);
  return v9 & 1;
}

uint64_t SEP.SealedHash.Entry.digest.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_237FFBA20(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t SEP.SealedHash.Entry.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_238009148(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

void SEP.SealedHash.Entry.flags.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

uint64_t SEP.SealedHash.Entry.algorithm.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t SEP.SealedHash.Entry.init<A>(data:flags:algorithm:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  LOBYTE(a3) = *a3;
  sub_23800915C();
  sub_2380BD82C();
  swift_getAssociatedConformanceWitness();
  result = sub_2380BD3B8();
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = v14;
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  *(_BYTE *)(a6 + 32) = (_BYTE)a3;
  *(_QWORD *)(a6 + 40) = a4;
  *(_QWORD *)(a6 + 48) = a5;
  return result;
}

double SEP.SealedHash.Entry.init<A>(digest:flags:algorithm:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;

  v18 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - v11, a1, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  v13 = sub_2380BD3B8();
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, AssociatedTypeWitness);
  *(_QWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v15;
  result = 0.0;
  *(_OWORD *)(a5 + 16) = xmmword_2380BF8E0;
  *(_BYTE *)(a5 + 32) = v12;
  *(_QWORD *)(a5 + 40) = v18;
  *(_QWORD *)(a5 + 48) = a4;
  return result;
}

double SEP.SealedHash.Entry.init<A>(digest:flags:algorithm:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char v6;
  double result;

  v6 = *a3;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a6 + 16) = xmmword_2380BF8E0;
  *(_BYTE *)(a6 + 32) = v6;
  *(_QWORD *)(a6 + 40) = a4;
  *(_QWORD *)(a6 + 48) = a5;
  return result;
}

BOOL static SEP.SealedHash.Error.== infix(_:_:)(int *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  char v4;
  int v6;
  char v7;

  v2 = *a1;
  v3 = *(_DWORD *)a2;
  if (*((_BYTE *)a1 + 4) == 1)
  {
    if (v2)
    {
      if (v2 == 1)
      {
        if (v3 == 1)
          v4 = *(_BYTE *)(a2 + 4);
        else
          v4 = 0;
        if ((v4 & 1) != 0)
          return 1;
      }
      else
      {
        if (v3 > 1)
          v7 = *(_BYTE *)(a2 + 4);
        else
          v7 = 0;
        if ((v7 & 1) != 0)
          return 1;
      }
    }
    else
    {
      if (v3)
        LOBYTE(v6) = 0;
      else
        v6 = *(unsigned __int8 *)(a2 + 4);
      if ((v6 & 1) != 0)
        return 1;
    }
  }
  else if ((*(_BYTE *)(a2 + 4) & 1) == 0)
  {
    return v2 == v3;
  }
  return 0;
}

BOOL sub_238008AA4(int *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  char v6;
  char v7;

  v2 = *a1;
  v3 = *(_DWORD *)a2;
  if (*((_BYTE *)a1 + 4) != 1)
  {
    if ((*(_BYTE *)(a2 + 4) & 1) == 0)
      return v2 == v3;
    return 0;
  }
  if (v2)
  {
    if (v2 != 1)
    {
      if (v3 > 1)
        v7 = *(_BYTE *)(a2 + 4);
      else
        v7 = 0;
      return (v7 & 1) != 0;
    }
    v4 = v3 == 1;
  }
  else
  {
    v4 = v3 == 0;
  }
  if (v4)
    v6 = *(_BYTE *)(a2 + 4);
  else
    v6 = 0;
  return (v6 & 1) != 0;
}

_BYTE *sub_238008B08@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_238036530(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_23800A124((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_23800A19C((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_238008B9C()
{
  unint64_t result;

  result = qword_2568C5890;
  if (!qword_2568C5890)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.SealedHash.Error, &type metadata for SEP.SealedHash.Error);
    atomic_store(result, (unint64_t *)&qword_2568C5890);
  }
  return result;
}

uint64_t sub_238008BE0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    return a1(a3, a4 - a3);
  else
    return a1(0, 0);
}

uint64_t sub_238008C2C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_2380BD208();
  if (!result || (result = sub_2380BD22C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_2380BD220();
      sub_2380BD9AC();
      sub_238001820(&qword_2568C5898, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
      return sub_2380BD814();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_238008CF0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_237FFBAB0(a1, a2);
  return a1;
}

uint64_t sub_238008D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SEP.SealedHash(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_238008D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_238003B50((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_238008E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_2380BD208();
  v11 = result;
  if (result)
  {
    result = sub_2380BD22C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_2380BD220();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_238003B50(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_238008ED0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_238008F1C()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_238008F50 + *((int *)qword_238009128 + (v0 >> 62))))();
}

uint64_t sub_238008F60@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_238009148(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_237FFBA20(a1, a2);
  return a1;
}

unint64_t sub_23800915C()
{
  unint64_t result;

  result = qword_2568C58A0;
  if (!qword_2568C58A0)
  {
    result = MEMORY[0x23B82B770](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2568C58A0);
  }
  return result;
}

unint64_t sub_2380091A4()
{
  unint64_t result;

  result = qword_2568C58A8;
  if (!qword_2568C58A8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.SealedHash.Flags, &type metadata for SEP.SealedHash.Flags);
    atomic_store(result, (unint64_t *)&qword_2568C58A8);
  }
  return result;
}

unint64_t sub_2380091EC()
{
  unint64_t result;

  result = qword_2568C58B0;
  if (!qword_2568C58B0)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.SealedHash.Flags, &type metadata for SEP.SealedHash.Flags);
    atomic_store(result, (unint64_t *)&qword_2568C58B0);
  }
  return result;
}

unint64_t sub_238009234()
{
  unint64_t result;

  result = qword_2568C58B8;
  if (!qword_2568C58B8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.SealedHash.Flags, &type metadata for SEP.SealedHash.Flags);
    atomic_store(result, (unint64_t *)&qword_2568C58B8);
  }
  return result;
}

unint64_t sub_23800927C()
{
  unint64_t result;

  result = qword_2568C58C0;
  if (!qword_2568C58C0)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.SealedHash.Flags, &type metadata for SEP.SealedHash.Flags);
    atomic_store(result, (unint64_t *)&qword_2568C58C0);
  }
  return result;
}

uint64_t *_s10SealedHashVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int EnumCaseMultiPayload;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    type metadata accessor for SEP.SealedHash.Value(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v10 = *v7;
      v9 = v7[1];
      sub_237FFBA20(v10, v9);
      *v6 = v10;
      v6[1] = v9;
    }
    else
    {
      v12 = sub_2380BD9AC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v6, v7, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t _s10SealedHashVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1 + *(int *)(a2 + 20);
  type metadata accessor for SEP.SealedHash.Value(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
    return sub_237FFBAB0(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  if (!(_DWORD)result)
  {
    v4 = sub_2380BD9AC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  }
  return result;
}

_BYTE *_s10SealedHashVwcp(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int EnumCaseMultiPayload;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (uint64_t *)&a1[v4];
  v6 = (uint64_t *)&a2[v4];
  type metadata accessor for SEP.SealedHash.Value(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    v9 = *v6;
    v8 = v6[1];
    sub_237FFBA20(v9, v8);
    *v5 = v9;
    v5[1] = v8;
  }
  else
  {
    v10 = sub_2380BD9AC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, v6, v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_BYTE *_s10SealedHashVwca(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int EnumCaseMultiPayload;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = (uint64_t *)&a1[v4];
    v6 = (uint64_t *)&a2[v4];
    sub_237FFD540((uint64_t)&a1[v4], type metadata accessor for SEP.SealedHash.Value);
    type metadata accessor for SEP.SealedHash.Value(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v9 = *v6;
      v8 = v6[1];
      sub_237FFBA20(v9, v8);
      *v5 = v9;
      v5[1] = v8;
    }
    else
    {
      v10 = sub_2380BD9AC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, v6, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_BYTE *_s10SealedHashVwtk(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for SEP.SealedHash.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = sub_2380BD9AC();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_BYTE *_s10SealedHashVwta(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = &a1[v4];
    v6 = &a2[v4];
    sub_237FFD540((uint64_t)&a1[v4], type metadata accessor for SEP.SealedHash.Value);
    v7 = type metadata accessor for SEP.SealedHash.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v8 = sub_2380BD9AC();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t _s10SealedHashVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238009738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for SEP.SealedHash.Value(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t _s10SealedHashVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238009784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for SEP.SealedHash.Value(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_2380097C8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SEP.SealedHash.Value(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.SealedHash.Flags()
{
  return &type metadata for SEP.SealedHash.Flags;
}

uint64_t *_s10SealedHashV5ValueOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      v7 = a2[1];
      sub_237FFBA20(v8, v7);
      *a1 = v8;
      a1[1] = v7;
    }
    else
    {
      v10 = sub_2380BD9AC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s10SealedHashV5ValueOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
    return sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (!(_DWORD)result)
  {
    v3 = sub_2380BD9AC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t *_s10SealedHashV5ValueOwcp(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    v6 = *a2;
    v5 = a2[1];
    sub_237FFBA20(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  else
  {
    v7 = sub_2380BD9AC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *_s10SealedHashV5ValueOwca(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_237FFD540((uint64_t)a1, type metadata accessor for SEP.SealedHash.Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v6 = *a2;
      v5 = a2[1];
      sub_237FFBA20(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    else
    {
      v7 = sub_2380BD9AC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s10SealedHashV5ValueOwtk(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_2380BD9AC();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s10SealedHashV5ValueOwta(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_237FFD540((uint64_t)a1, type metadata accessor for SEP.SealedHash.Value);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_2380BD9AC();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t _s10SealedHashV5ValueOwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t _s10SealedHashV5ValueOwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_238009C8C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_238009C9C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD9AC();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t _s10SealedHashV5EntryVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s10SealedHashV5EntryVwxx(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  result = sub_237FFBAB0(*a1, a1[1]);
  v3 = a1[3];
  if (v3 >> 60 != 15)
    return sub_237FFBAB0(a1[2], v3);
  return result;
}

uint64_t _s10SealedHashV5EntryVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = (uint64_t *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_237FFBA20(*v6, *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t _s10SealedHashV5EntryVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_237FFBAB0(v6, v7);
  v8 = (uint64_t *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_237FFBA20(*v8, *(_QWORD *)(a2 + 24));
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v9;
      sub_237FFBAB0(v12, v13);
      goto LABEL_8;
    }
    sub_238009EE8(a1 + 16);
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v10 = *v8;
  sub_237FFBA20(*v8, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v9;
LABEL_8:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_238009EE8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s10SealedHashV5EntryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v4, v5);
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v6;
      *(_QWORD *)(a1 + 24) = v8;
      sub_237FFBAB0(v9, v7);
      goto LABEL_6;
    }
    sub_238009EE8(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t _s10SealedHashV5EntryVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s10SealedHashV5EntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.SealedHash.Entry()
{
  return &type metadata for SEP.SealedHash.Entry;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t _s10SealedHashV5ErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s10SealedHashV5ErrorOwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_23800A0D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23800A0F4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.SealedHash.Error()
{
  return &type metadata for SEP.SealedHash.Error;
}

uint64_t sub_23800A124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2380BD238();
  swift_allocObject();
  result = sub_2380BD1FC();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2380BD310();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_23800A19C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2380BD238();
  swift_allocObject();
  result = sub_2380BD1FC();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23800A21C(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_2380BD238();
      swift_allocObject();
      sub_2380BD214();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_2380BD310();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *sub_23800A2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A28);
  v19[3] = v8;
  v19[4] = sub_23800A568(qword_2568C5A30, &qword_2568C5A28, MEMORY[0x24BDD0690]);
  v9 = (_QWORD *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  result = __swift_project_boxed_opaque_existential_1(v19, v8);
  v11 = result[2];
  v12 = result[3] >> 1;
  v13 = __OFSUB__(v12, v11);
  v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = (_BYTE *)(result[1] + v11);
    v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_238008B08(v15, v16, &v18);
    v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (_QWORD *)v17;
  }
  return result;
}

uint64_t sub_23800A3AC(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A00);
  v10 = sub_23800A568(&qword_2568C5A08, &qword_2568C5A00, MEMORY[0x24BDCFBE0]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_238008B08(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t sub_23800A45C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23800A49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];
  __int128 v5;

  v5 = *(_OWORD *)*(_QWORD *)(v2 + 16);
  v4[2] = &v5;
  return sub_238008BE0((uint64_t (*)(uint64_t, uint64_t))sub_23800A4FC, (uint64_t)v4, a1, a2);
}

uint64_t sub_23800A4E4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_23800A4FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = *(uint64_t **)(v3 + 16);
  v8 = *v7;
  v9 = v7[1];
  sub_237FFBA20(*v7, v9);
  sub_2380810F4(a3, a1, a2, v8, v9);
  *(_QWORD *)(a3 + 24) = v10;
}

uint64_t sub_23800A568(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B82B770](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23800A5A8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23800A5D0()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *sub_23800A5D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DarwinInit()
{
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23800A60C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *sub_23800A664(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_23800A6A0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23800A6E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for TemporalCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalCache);
}

uint64_t sub_23800A730()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = sub_2380BD418();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23800A7B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = sub_2380BD418();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = v8;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_23800A898(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = sub_2380BD418();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))((v4 + a1 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80), v5);
}

uint64_t sub_23800A8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_2380BD418();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_23800A95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_2380BD418();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_23800A9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_2380BD418();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_23800AA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_2380BD418();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_23800AAAC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = sub_2380BD418();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_23800AC44(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(sub_2380BD418() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for TemporalCache.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalCache.Element);
}

uint64_t sub_23800AE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for TemporalCache.Element(255, a2, a3, a4);
  swift_getTupleTypeMetadata2();
  sub_2380BDEC8();
  v5 = sub_2380BDC64();
  sub_2380BDC88();
  sub_2380BDC58();
  return v5;
}

uint64_t sub_23800AF14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v24 = a6;
  v10 = type metadata accessor for TemporalCache.Element(255, a3, a4, a5);
  v11 = sub_2380BDF7C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v23 - v17;
  MEMORY[0x23B82AB28](a1, v23, a3, v10, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, v10);
    if ((sub_23800B0AC() & 1) == 0)
    {
      v19 = *(_QWORD *)(a4 - 8);
      v21 = v24;
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v24, v18, a4);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v10);
      v20 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a4);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v10);
  }
  v19 = *(_QWORD *)(a4 - 8);
  v20 = 1;
  v21 = v24;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a4);
}

uint64_t sub_23800B0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  v0 = sub_2380BD418();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BD40C();
  v4 = sub_2380BD3DC();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

BOOL sub_23800B144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v38 = a1;
  v39 = *(_QWORD *)(a4[3] - 8);
  v40 = a2;
  MEMORY[0x24BDAC7A8](a1);
  v41 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 32);
  v37 = v10;
  v44 = v9;
  v43 = type metadata accessor for TemporalCache.Element(255, v8, v10, v9);
  v11 = sub_2380BDF7C();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v31 - v13;
  v15 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_2380BD418();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BD40C();
  v22 = a3;
  LOBYTE(a3) = sub_2380BD3DC();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if ((a3 & 1) != 0)
    return 0;
  v32 = v19;
  v33 = v18;
  v34 = v17;
  v35 = v14;
  v24 = v37;
  v36 = v22;
  v25 = v42;
  v26 = sub_2380BDC7C();
  v27 = *(_QWORD *)(v25 + 8);
  v23 = v26 == v27;
  if (v26 == v27 && !sub_23800B3BC(a4))
    sub_23800B55C(a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v34, v38, v8);
  v28 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v41, v40, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v21, v36, v33);
  v29 = (uint64_t)v35;
  sub_23800B834(v28, (uint64_t)v21, v8, v24, v44, (uint64_t)v35);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v29, 0, 1, v43);
  sub_2380BDC88();
  sub_2380BDCA0();
  return v23;
}

uint64_t sub_23800B3BC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;

  v2 = v1;
  type metadata accessor for TemporalCache.Element(0, a1[2], a1[3], a1[4]);
  v3 = sub_2380BDC7C();
  v4 = sub_2380BDC88();
  swift_bridgeObjectRetain();
  MEMORY[0x23B82B770](MEMORY[0x24BEE04D8], v4);
  sub_2380BDE38();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  sub_2380BE0B4();
  swift_bridgeObjectRelease();
  v5 = sub_2380BDEEC();
  MEMORY[0x23B82B770](MEMORY[0x24BEE12C8], v5);
  v6 = sub_2380BDC70();
  swift_bridgeObjectRelease();
  *v2 = v6;
  v7 = sub_2380BDC7C();
  v8 = __OFSUB__(v3, v7);
  result = v3 - v7;
  if (v8)
    __break(1u);
  return result;
}

uint64_t sub_23800B55C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = type metadata accessor for TemporalCache.Element(255, v2, v3, v4);
  v6 = sub_2380BDF7C();
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v26 = (char *)&v24 - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = sub_2380BDF7C();
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - v10;
  v12 = sub_2380BDF7C();
  v32 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - v14;
  v16 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v25 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v1;
  v37 = *v1;
  v34 = v2;
  v35 = v3;
  v36 = v4;
  v18 = sub_2380BDC88();
  swift_bridgeObjectRetain();
  MEMORY[0x23B82B770](MEMORY[0x24BEE04D8], v18);
  sub_2380BDE2C();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v11, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v15, 1, 1, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v33);
  }
  v19 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v20(v15, v11, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v2);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v19, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v2) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v33);
  v22 = v25;
  v20(v25, v15, v2);
  v23 = v26;
  sub_2380BDC4C();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v22, v2);
}

uint64_t sub_23800B834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v11 = a6 + *(int *)(type metadata accessor for TemporalCache.Element(0, a3, a4, a5) + 44);
  v12 = sub_2380BD418();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
}

BOOL sub_23800B8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = type metadata accessor for TemporalCache.Element(255, a2, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v17 - v9;
  v11 = *(int *)(v8 + 48);
  v12 = &v10[v11];
  v13 = a1 + v11;
  v14 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, a1, a2);
  v15 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v13, v6);
  LOBYTE(a1) = sub_23800B0AC();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v6);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, a2);
  return (a1 & 1) == 0;
}

uint64_t sub_23800B9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v40 = a2;
  v38 = sub_2380BD418();
  v43 = *(_QWORD *)(v38 - 8);
  v9 = MEMORY[0x24BDAC7A8](v38);
  v39 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (char *)&v34 - v11;
  v12 = type metadata accessor for TemporalCache.Element(255, a3, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v41 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = *(int *)(TupleTypeMetadata2 + 48);
  v18 = (char *)&v34 + v17 - v16;
  v19 = a1 + v17;
  v36 = *(_QWORD *)(a3 - 8);
  v37 = (char *)&v34 - v16;
  v34 = *(void (**)(void))(v36 + 16);
  v35 = a3;
  v34();
  v20 = *(_QWORD *)(v12 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v18, v19, v12);
  v22 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v23 = v38;
  v22(v42, &v18[*(int *)(v12 + 44)], v38);
  v24 = *(void (**)(char *, uint64_t))(v20 + 8);
  v24(v18, v12);
  v25 = *(int *)(TupleTypeMetadata2 + 48);
  v26 = &v41[v25];
  v27 = v40 + v25;
  v34();
  v21(v26, v27, v12);
  v28 = v39;
  v22(v39, &v26[*(int *)(v12 + 44)], v23);
  v24(v26, v12);
  v29 = v42;
  LOBYTE(v26) = sub_2380BD3E8();
  v30 = *(void (**)(char *, uint64_t))(v43 + 8);
  v30(v28, v23);
  v30(v29, v23);
  v31 = v35;
  v32 = *(void (**)(char *, uint64_t))(v36 + 8);
  v32(v41, v35);
  v32(v37, v31);
  return v26 & 1;
}

uint64_t sub_23800BC28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23800B9D0(a1, a2, v2[2], v2[3], v2[4]) & 1;
}

BOOL sub_23800BC48(uint64_t a1)
{
  uint64_t *v1;

  return sub_23800B8C0(a1, v1[2], v1[3], v1[4]);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B82B6EC](a1, v6, a5);
}

unint64_t sub_23800BC98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C00);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C08);
  v6 = sub_2380BE108();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v23 = a1;
  v24 = v9;
  v10 = v6 + 64;
  v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v12 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2380051FC(v11, (uint64_t)v5, &qword_2568C5C00);
    result = sub_23800DDDC((uint64_t)v5);
    if ((v14 & 1) != 0)
      break;
    v15 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = v7[6];
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C10);
    sub_23800ED20((uint64_t)v5, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v15, &qword_2568C5C10);
    v18 = v7[7];
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C18);
    result = sub_23800ED20(v24, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v15, &qword_2568C5C18);
    v20 = v7[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v7[2] = v22;
    v11 += v12;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23800BE54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B90);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B98);
  v6 = sub_2380BE108();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2380051FC(v12, (uint64_t)v5, &qword_2568C5B90);
    result = sub_23800DF54((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_2380BD448();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v7[7];
    v20 = type metadata accessor for SEP.SealedHash(0);
    result = sub_238001DE4(v9, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v16, type metadata accessor for SEP.SealedHash);
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23800C00C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B88);
  v6 = sub_2380BE108();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2380051FC(v12, (uint64_t)v5, &qword_2568C5B80);
    v14 = *v5;
    v15 = v5[1];
    result = sub_23800DCFC(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for Proto_SealedHash(0);
    result = sub_238001DE4(v9, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, type metadata accessor for Proto_SealedHash);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23800C1AC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5BC8);
  v2 = sub_2380BE108();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2380051FC(v6, (uint64_t)&v13, &qword_2568C5BD0);
    v7 = v13;
    result = sub_23800E0A0(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_23800ED10(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23800C2D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5BB0);
  v2 = sub_2380BE108();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2380051FC(v6, (uint64_t)&v13, &qword_2568C5BB8);
    v7 = v13;
    result = sub_23800E018(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_23800ED10(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23800C404(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5BD8);
  v2 = (_QWORD *)sub_2380BE108();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23800DCFC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23800C51C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5BA0);
  v2 = sub_2380BE108();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2380051FC(v6, (uint64_t)&v15, &qword_2568C5BA8);
    v7 = v15;
    v8 = v16;
    result = sub_23800DCFC(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23800ED10(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23800C650(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B78);
  v2 = (_QWORD *)sub_2380BE108();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23800DCFC(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_23800C770()
{
  uint64_t v0;

  v0 = sub_2380BDAB4();
  __swift_allocate_value_buffer(v0, qword_2568C5B38);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C5B38);
  return sub_2380BDAA8();
}

uint64_t static ProvisioningCertificate.DeviceIdentity.objectIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2568C4E60 != -1)
    swift_once();
  v2 = sub_2380BDAB4();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2568C5B38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t ProvisioningCertificate.DeviceIdentity.identity.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ProvisioningCertificate.DeviceIdentity.init(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v59 = a2;
  v65 = sub_2380BDB20();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v64 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_2380BDD48();
  MEMORY[0x24BDAC7A8](v4);
  v60 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2380BDA60();
  v68 = *(_QWORD *)(v6 - 8);
  v69 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_2380BDACC();
  v8 = *(_QWORD *)(v62 - 8);
  v9 = MEMORY[0x24BDAC7A8](v62);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v57 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B50);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v57 - v18;
  v66 = a1;
  sub_2380BDA54();
  sub_23800CE78();
  v20 = (uint64_t)v67;
  sub_2380BDB68();
  v21 = (_QWORD *)v20;
  if (v20)
  {
    v23 = v65;
    v22 = v66;
    v24 = v69;
  }
  else
  {
    v58 = v17;
    v67 = v11;
    v25 = v62;
    v26 = v70;
    if (v70[2] && (v27 = sub_23800DD60(2), (v28 & 1) != 0))
    {
      v29 = v8;
      v30 = (uint64_t)v19;
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v19, v26[7] + *(_QWORD *)(v8 + 72) * v27, v25);
      v31 = 0;
      v32 = v13;
    }
    else
    {
      v31 = 1;
      v29 = v8;
      v32 = v13;
      v30 = (uint64_t)v19;
    }
    v33 = v61;
    v34 = (uint64_t)v67;
    v35 = (uint64_t)v58;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v30, v31, 1, v25);
    swift_bridgeObjectRelease();
    sub_2380051FC(v30, v35, &qword_2568C5B50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v35, 1, v25) == 1)
    {
      sub_238005240(v30, &qword_2568C5B50);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v32, v35, v25);
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v34, v32, v25);
      v36 = v69;
      sub_2380BDB74();
      v41 = sub_2380BDA54();
      v62 = (uint64_t)v32;
      v42 = v29;
      v43 = v41;
      v45 = v44;
      v67 = (char *)v30;
      v46 = v25;
      v48 = v47;
      v49 = v36;
      v51 = v50;
      v52 = *(void (**)(char *, uint64_t))(v68 + 8);
      v52(v33, v49);
      v70 = (_QWORD *)v43;
      v71 = v45;
      v72 = v48;
      v73 = v51;
      sub_2380BDD3C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A28);
      sub_23800DD90();
      v53 = sub_2380BDD24();
      v55 = v54;
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v62, v46);
      sub_238005240((uint64_t)v67, &qword_2568C5B50);
      if (v55)
      {
        result = ((uint64_t (*)(uint64_t, uint64_t))v52)(v66, v69);
        v56 = v59;
        *v59 = v53;
        v56[1] = v55;
        return result;
      }
    }
    sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
    v23 = v65;
    v21 = (_QWORD *)swift_allocError();
    sub_2380BDB08();
    swift_willThrow();
    v22 = v66;
    v24 = v69;
  }
  v37 = v64;
  v70 = v21;
  v38 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B60);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v37, v23);
    v70 = v21;
    sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
    swift_allocError();
    v39 = v21;
    swift_dynamicCast();
  }
  else
  {
    swift_getErrorValue();
    sub_2380BE1EC();
    sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
    swift_allocError();
    sub_2380BDB08();
    swift_bridgeObjectRelease();
  }
  swift_willThrow();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v22, v24);
}

unint64_t sub_23800CE78()
{
  unint64_t result;

  result = qword_2568C5B58;
  if (!qword_2568C5B58)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for ProvisioningCertificate.DeviceIdentity.Definition, &type metadata for ProvisioningCertificate.DeviceIdentity.Definition);
    atomic_store(result, (unint64_t *)&qword_2568C5B58);
  }
  return result;
}

uint64_t ProvisioningCertificate.DeviceIdentity.init<A>(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];

  v29 = a3;
  v32 = sub_2380BDB20();
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2380BDA30();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2380BDA60();
  v28 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v27 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - v14;
  v34 = v8;
  v35 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  v36 = a2;
  sub_2380BDFD0();
  sub_2380BDB80();
  v16 = v33;
  sub_2380BDB98();
  if (v16)
  {
    v37[0] = (uint64_t)v16;
    v20 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B60);
    v21 = v31;
    v22 = v32;
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v22);
      v37[0] = (uint64_t)v16;
      sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
      swift_allocError();
      v23 = v16;
      swift_dynamicCast();
    }
    else
    {
      swift_getErrorValue();
      sub_2380BE1EC();
      sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
      swift_allocError();
      sub_2380BDB08();
      swift_bridgeObjectRelease();
    }
    swift_willThrow();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
  }
  else
  {
    v18 = v28;
    v17 = v29;
    v19 = (uint64_t)v27;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v27, v15, v11);
    ProvisioningCertificate.DeviceIdentity.init(extensionValue:)(v19, v37);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v15, v11);
    v25 = v37[1];
    *v17 = v37[0];
    v17[1] = v25;
  }
  return result;
}

uint64_t ProvisioningCertificate.DeviceIdentity.Definition.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProvisioningCertificate.DeviceIdentity.Definition.properties.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ProvisioningCertificate.DeviceIdentity.Definition.properties.modify())()
{
  return nullsub_1;
}

unint64_t ProvisioningCertificate.DeviceIdentity.Definition.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_23800E928(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

uint64_t ProvisioningCertificate.DeviceIdentity.Definition.init(derEncoded:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;

  v30 = a2;
  v31 = sub_2380BDA30();
  v3 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2380BDAFC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v32 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  v12 = sub_2380BDA60();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_23800E928(MEMORY[0x24BEE4AF8]);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v16 = v33;
  sub_2380BDBA4();
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v28 = v12;
    v29 = v13;
    v33 = v6;
    v27 = v3;
    sub_2380BDA54();
    v17 = v32;
    sub_2380BDC28();
    swift_unknownObjectRelease();
    v18 = v5;
    v19 = _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0();
    MEMORY[0x24BDAC7A8](v19);
    *(&v26 - 2) = (uint64_t)&v34;
    sub_2380BDC34();
    v20 = a1;
    v21 = v33;
    v23 = v28;
    v22 = v29;
    v25 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v25(v20, v33);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v31);
    v25((uint64_t)v17, v21);
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    *v30 = v34;
  }
  return result;
}

uint64_t sub_23800D5AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  char *v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  _QWORD *v44;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;

  v85 = a2;
  v3 = sub_2380BDACC();
  v87 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v86 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v65 - v6;
  v8 = sub_2380BDA84();
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v77 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2380BDAE4();
  v82 = *(_QWORD *)(v10 - 8);
  v83 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v81 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2380BDA90();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v88 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2380BDA30();
  v79 = *(_QWORD *)(v15 - 8);
  v80 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v78 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C28);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v74 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v65 - v20;
  v22 = sub_2380BDAFC();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a1;
  sub_2380BDA78();
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v84 = v21;
  v27 = v21;
  v28 = v26;
  if (v26((uint64_t)v27, 1, v22) == 1)
  {
    v29 = (uint64_t)v84;
    return sub_238005240(v29, &qword_2568C5C28);
  }
  v70 = v23;
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  v71 = *MEMORY[0x24BEB3000];
  v29 = (uint64_t)v84;
  v68 = v25;
  v67 = v12;
  v66 = v13;
  v69 = v7;
  v65 = v28;
  while (1)
  {
    v31 = v3;
    v72(v25, v29, v22);
    v32 = v78;
    sub_2380BDAD8();
    v33 = sub_2380BDA24();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v32, v80);
    v34 = v81;
    sub_2380BDAF0();
    v36 = v82;
    v35 = v83;
    v37 = (*(uint64_t (**)(char *, uint64_t))(v82 + 88))(v34, v83);
    if (v37 != v71)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
      sub_2380BDB20();
      sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
      v62 = swift_allocError();
      sub_2380BDB08();
      v89 = v62;
      swift_willThrow();
LABEL_23:
      v63 = v70;
      return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v25, v22);
    }
    (*(void (**)(char *, uint64_t))(v36 + 96))(v34, v35);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v88, v34, v12);
    v38 = v77;
    sub_2380BDA6C();
    v39 = v69;
    v40 = v89;
    sub_2380BDB5C();
    v89 = v40;
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v38, v76);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v88, v12);
      goto LABEL_23;
    }
    v41 = v38;
    v42 = v22;
    v43 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
    v43(v86, v39, v31);
    v44 = v85;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v90 = (_QWORD *)*v44;
    v46 = v90;
    *v44 = 0x8000000000000000;
    v48 = sub_23800DD60(v33);
    v49 = v46[2];
    v50 = (v47 & 1) == 0;
    v51 = v49 + v50;
    if (__OFADD__(v49, v50))
      break;
    v52 = v47;
    if (v46[3] >= v51)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v55 = v90;
        if ((v47 & 1) != 0)
          goto LABEL_14;
      }
      else
      {
        sub_238088DF4();
        v55 = v90;
        if ((v52 & 1) != 0)
          goto LABEL_14;
      }
    }
    else
    {
      sub_23802CD2C(v51, isUniquelyReferenced_nonNull_native);
      v53 = sub_23800DD60(v33);
      if ((v52 & 1) != (v54 & 1))
        goto LABEL_28;
      v48 = v53;
      v55 = v90;
      if ((v52 & 1) != 0)
      {
LABEL_14:
        v3 = v31;
        (*(void (**)(unint64_t, char *, uint64_t))(v87 + 40))(v55[7] + *(_QWORD *)(v87 + 72) * v48, v86, v31);
        goto LABEL_18;
      }
    }
    v55[(v48 >> 6) + 8] |= 1 << v48;
    *(_QWORD *)(v55[6] + 8 * v48) = v33;
    v3 = v31;
    v43((char *)(v55[7] + *(_QWORD *)(v87 + 72) * v48), v86, v31);
    v56 = v55[2];
    v57 = __OFADD__(v56, 1);
    v58 = v56 + 1;
    if (v57)
      goto LABEL_27;
    v55[2] = v58;
LABEL_18:
    *v85 = v90;
    swift_bridgeObjectRelease();
    v59 = (uint64_t)v74;
    sub_2380BDA78();
    v22 = v42;
    v60 = v65;
    v61 = v65(v59, 1, v42);
    sub_238005240(v59, &qword_2568C5C28);
    v29 = (uint64_t)v84;
    if (v61 != 1)
    {
      sub_2380BDB20();
      sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
      v64 = swift_allocError();
      sub_2380BDB08();
      v89 = v64;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v76);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v88, v67);
      v63 = v70;
      v25 = v68;
      return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v25, v22);
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v76);
    v13 = v66;
    v12 = v67;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v88, v67);
    v25 = v68;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v22);
    sub_2380BDA78();
    if (v60(v29, 1, v22) == 1)
      return sub_238005240(v29, &qword_2568C5C28);
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = sub_2380BE1E0();
  __break(1u);
  return result;
}

uint64_t sub_23800DCE8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return ProvisioningCertificate.DeviceIdentity.Definition.init(derEncoded:)(a1, a2);
}

unint64_t sub_23800DCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2380BE234();
  sub_2380BDD78();
  v4 = sub_2380BE264();
  return sub_23800E15C(a1, a2, v4);
}

unint64_t sub_23800DD60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2380BE228();
  return sub_23800E23C(a1, v2);
}

unint64_t sub_23800DD90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C5B70;
  if (!qword_2568C5B70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C5A28);
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE2180], v1);
    atomic_store(result, (unint64_t *)&qword_2568C5B70);
  }
  return result;
}

unint64_t sub_23800DDDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5[4];

  sub_2380BE234();
  sub_2380BDA60();
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  sub_2380BDCB8();
  v2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_23802F68C(v5, v2);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C10);
  type metadata accessor for ATLogProofs(0);
  sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
  sub_2380BDCB8();
  v3 = sub_2380BE264();
  return sub_23800E2D8(a1, v3);
}

unint64_t sub_23800DEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_2380BE234();
  sub_2380BE240();
  v8 = sub_2380BE264();
  return sub_23800E430(a1, a2, a3, a4, v8);
}

unint64_t sub_23800DF54(uint64_t a1)
{
  uint64_t v2;

  sub_2380BD448();
  sub_238001820(&qword_2568C5BE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = sub_2380BDCAC();
  return sub_23800E500(a1, v2);
}

unint64_t sub_23800DFC0(unsigned __int8 a1)
{
  uint64_t v2;

  sub_2380BE234();
  sub_2380BE240();
  v2 = sub_2380BE264();
  return sub_23800E640(a1, v2);
}

unint64_t sub_23800E018(uint64_t a1)
{
  uint64_t v2;

  sub_2380BE234();
  type metadata accessor for CFString(0);
  sub_238001820(&qword_2568C5BC0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_2380BF738);
  sub_2380BD4B4();
  v2 = sub_2380BE264();
  return sub_23800E6E0(a1, v2);
}

unint64_t sub_23800E0A0(void *a1)
{
  id v2;
  uint64_t v3;

  sub_2380BE234();
  sub_2380BE24C();
  if (a1)
  {
    type metadata accessor for CFString(0);
    sub_238001820(&qword_2568C5BC0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_2380BF738);
    v2 = a1;
    sub_2380BD4B4();

  }
  v3 = sub_2380BE264();
  return sub_23800E820((uint64_t)a1, v3);
}

unint64_t sub_23800E15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2380BE1B0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2380BE1B0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_23800E23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23800E2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C10);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_2380051FC(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, &qword_2568C5C10);
      if ((sub_2380BDA48() & 1) != 0)
      {
        v13 = type metadata accessor for Release();
        if ((sub_23802B050(*(_QWORD *)&v8[*(int *)(v13 + 20)], *(_QWORD *)(a1 + *(int *)(v13 + 20))) & 1) != 0
          && (_s16CloudAttestation21TransparencyLogProofsV2eeoiySbAC_ACtFZ_0((uint64_t)&v8[*(int *)(v5 + 36)], a1 + *(int *)(v5 + 36)) & 1) != 0)
        {
          break;
        }
      }
      sub_238005240((uint64_t)v8, &qword_2568C5C10);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    sub_238005240((uint64_t)v8, &qword_2568C5C10);
  }
  return v10;
}

unint64_t sub_23800E430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v12 = ~v7;
    v13 = *(_QWORD *)(v5 + 48);
    do
    {
      v14 = (_QWORD *)(v13 + 32 * v8);
      if (*v14 == a1)
      {
        v15 = v14[2] == a3 && v14[3] == a4;
        if (v15 || (sub_2380BE1B0() & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v12;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_23800E500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_2380BD448();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_238001820(&qword_2568C5BE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = sub_2380BDCE8();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_23800E640(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23800E6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_238001820(&qword_2568C5BC0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_2380BF738);
    v7 = v6;
    v8 = sub_2380BD4A8();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = sub_2380BD4A8();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_23800E820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v8 = ~v4;
    do
    {
      v9 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          type metadata accessor for CFString(0);
          sub_238001820(&qword_2568C5BC0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_2380BF738);
          v10 = v9;
          v11 = sub_2380BD4A8();

          if ((v11 & 1) != 0)
            return v5;
        }
      }
      else if (!a1)
      {
        return v5;
      }
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_23800E928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C30);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C38);
    v7 = (_QWORD *)sub_2380BE108();
    v8 = (char *)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_2380051FC(v9, (uint64_t)v5, &qword_2568C5C30);
      v11 = *v5;
      result = sub_23800DD60(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = sub_2380BDACC();
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v8, v16);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

uint64_t sub_23800EA90(uint64_t a1)
{
  uint64_t v1;

  return sub_23800D5AC(a1, *(_QWORD **)(v1 + 16));
}

_QWORD *_s14DeviceIdentityVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14DeviceIdentityVwxx()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s14DeviceIdentityVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s14DeviceIdentityVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14DeviceIdentityVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s14DeviceIdentityVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvisioningCertificate.DeviceIdentity()
{
  return &type metadata for ProvisioningCertificate.DeviceIdentity;
}

ValueMetadata *type metadata accessor for ProvisioningCertificate.DeviceIdentity.Definition()
{
  return &type metadata for ProvisioningCertificate.DeviceIdentity.Definition;
}

unint64_t sub_23800EBF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5BF0);
    v3 = (_QWORD *)sub_2380BE108();
    for (i = a1 + 32; ; i += 64)
    {
      sub_2380051FC(i, (uint64_t)&v15, &qword_2568C5BF8);
      v5 = v15;
      v6 = v16;
      v7 = v17;
      v8 = v18;
      result = sub_23800DEDC(v15, v16, v17, v18);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v11 = (uint64_t *)(v3[6] + 32 * result);
      *v11 = v5;
      v11[1] = v6;
      v11[2] = v7;
      v11[3] = v8;
      result = (unint64_t)sub_23800ED10(&v19, (_OWORD *)(v3[7] + 32 * result));
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

_OWORD *sub_23800ED10(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_23800ED20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t SEP.Identity.chipID.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t SEP.Identity.ecid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void SEP.Identity.archBits.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;
  char v3;

  v2 = v1[17];
  v3 = v1[18];
  *a1 = v1[16];
  a1[1] = v2;
  a1[2] = v3;
}

uint64_t SEP.Identity.swSeed.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t SEP.Identity.ArchBits.productionStatus.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SEP.Identity.ArchBits.securityMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

void SEP.Identity.ArchBits.securityDomain.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

uint64_t SEP.Identity.ArchBits.rawValue.getter()
{
  _BYTE *v0;
  int v1;
  int v2;

  if (v0[1])
    v1 = v0[2] & 3 | 4;
  else
    v1 = v0[2] & 3;
  if (*v0)
    v2 = 8;
  else
    v2 = 0;
  return v1 | v2;
}

uint64_t SEP.Identity.ArchBits.SecurityDomain.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SEP.Identity.ArchBits.SecurityDomain.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *a2 = v2;
  return result;
}

uint64_t sub_23800EE0C()
{
  sub_2380BE234();
  sub_2380BE24C();
  return sub_2380BE264();
}

uint64_t sub_23800EE50()
{
  return sub_2380BE24C();
}

uint64_t sub_23800EE78()
{
  sub_2380BE234();
  sub_2380BE24C();
  return sub_2380BE264();
}

uint64_t sub_23800EEB8@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  return SEP.Identity.ArchBits.SecurityDomain.init(rawValue:)(*a1, a2);
}

uint64_t SEP.Identity.ArchBits.init(rawValue:)@<X0>(int a1@<W0>, BOOL *a2@<X8>)
{
  char v2;
  uint64_t result;

  v2 = a1;
  result = sub_23807EFC0(0, 2uLL, a1);
  if (result > 3u)
  {
    __break(1u);
  }
  else
  {
    *a2 = (v2 & 8) != 0;
    a2[1] = (v2 & 4) != 0;
    a2[2] = result;
  }
  return result;
}

BOOL sub_23800EF14(_BYTE *a1, _BYTE *a2)
{
  char v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = a2[2];
  v3 = a1[2] & 3;
  if ((a1[1] & 1) != 0)
    v3 |= 4u;
  if (a2[1])
    v4 = v2 & 3 | 4;
  else
    v4 = v2 & 3;
  if ((*a1 & 1) != 0)
    v5 = 8;
  else
    v5 = 0;
  v6 = v5 | v3;
  if (*a2)
    v7 = 8;
  else
    v7 = 0;
  return v6 == (v4 | v7);
}

uint64_t sub_23800EF7C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int16 v4;
  __int16 v5;
  BOOL v6[3];

  result = SEP.Identity.ArchBits.init(rawValue:)(*a1, v6);
  v4 = v6[0];
  if (v6[1])
    v5 = 256;
  else
    v5 = 0;
  *(_BYTE *)(a2 + 2) = v6[2];
  *(_WORD *)a2 = v5 | v4;
  return result;
}

void sub_23800EFD0(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;
  char v3;

  if (v1[1])
    v2 = v1[2] & 3 | 4;
  else
    v2 = v1[2] & 3;
  if (*v1)
    v3 = 8;
  else
    v3 = 0;
  *a1 = v2 | v3;
}

uint64_t SEP.Identity.init(chipID:ecid:archBits:swSeed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v5;
  char v6;
  char v7;

  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  *(_DWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = v5;
  *(_BYTE *)(a5 + 17) = v6;
  *(_BYTE *)(a5 + 18) = v7;
  *(_DWORD *)(a5 + 20) = a4;
  return result;
}

uint64_t SEP.Identity.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v6 = sub_2380BDD48();
  MEMORY[0x24BDAC7A8](v6);
  sub_2380BDD3C();
  v7 = sub_2380BDD18();
  if (!v8)
  {
    result = sub_237FFBAB0(a1, a2);
    goto LABEL_5;
  }
  SEP.Identity.init(string:)(v7, v8, &v11);
  result = sub_237FFBAB0(a1, a2);
  v10 = v12;
  if (v12 == 2)
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    v10 = 2;
    goto LABEL_6;
  }
  *(_OWORD *)a3 = v11;
LABEL_6:
  a3[2] = v10;
  return result;
}

uint64_t SEP.Identity.init(string:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  unsigned __int8 *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  _QWORD v36[2];

  v36[0] = 45;
  v36[1] = 0xE100000000000000;
  v35[2] = v36;
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)sub_23800F574(4, 1, sub_2380114A4, (uint64_t)v35, a1, a2);
  swift_bridgeObjectRelease();
  if (v6[2] != 4)
    goto LABEL_17;
  v7 = v6[4];
  v8 = v6[5];
  if (!((v8 ^ (unint64_t)v7) >> 14))
    goto LABEL_17;
  v10 = v6[6];
  v9 = v6[7];
  v11 = sub_2380113D4(v6[4], v6[5], v10, v9, 16);
  if ((v11 & 0x10000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v12 = sub_2380104E0(v7, v8, v10, v9, 16);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100000000) != 0)
      goto LABEL_17;
  }
  else
  {
    LODWORD(v12) = v11;
    if ((v11 & 0x100000000) != 0)
      goto LABEL_17;
  }
  if (v6[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_29;
  }
  v13 = v6[8];
  v14 = v6[9];
  if (!((v14 ^ (unint64_t)v13) >> 14))
  {
LABEL_17:
    result = swift_bridgeObjectRelease();
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 2;
    return result;
  }
  v16 = v6[10];
  v15 = v6[11];
  v17 = sub_238011304(v6[8], v6[9], v16, v15, 16);
  if ((v18 & 0x100) == 0)
  {
    if ((v18 & 1) == 0)
    {
      v19 = (unsigned __int8 *)v17;
      goto LABEL_13;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  v19 = sub_2380103F0(v13, v14, v16, v15, 16);
  v21 = v20;
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_17;
LABEL_13:
  if (v6[2] < 3uLL)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v22 = v6[12];
  v23 = v6[13];
  if (!((v23 ^ (unint64_t)v22) >> 14))
    goto LABEL_17;
  v25 = v6[14];
  v24 = v6[15];
  v26 = sub_238011230(v6[12], v6[13], v25, v24, 16);
  if ((v26 & 0x10000) != 0)
  {
    swift_bridgeObjectRetain();
    v27 = sub_238010304(v22, v23, v25, v24, 16);
    swift_bridgeObjectRelease();
    if ((v27 & 0x100) != 0)
      goto LABEL_17;
  }
  else
  {
    v27 = v26;
    if ((v26 & 0x100) != 0)
      goto LABEL_17;
  }
  if (v6[2] < 4uLL)
  {
LABEL_30:
    __break(1u);
    goto LABEL_17;
  }
  v29 = v6[16];
  v30 = v6[17];
  v32 = v6[18];
  v31 = v6[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!((v30 ^ v29) >> 14))
    goto LABEL_17;
  v33 = sub_2380113D4(v29, v30, v32, v31, 16);
  if ((v33 & 0x10000000000) != 0)
    v33 = sub_2380104E0(v29, v30, v32, v31, 16);
  v34 = v33;
  result = swift_bridgeObjectRelease();
  if ((v34 & 0x100000000) != 0)
    goto LABEL_18;
  result = sub_23807EFC0(0, 2uLL, v27);
  if (result > 3u)
  {
    __break(1u);
  }
  else
  {
    *a3 = v12;
    a3[1] = v19;
    a3[2] = (v27 >> 3) & 1 | ((unint64_t)((v27 >> 2) & 1) << 8) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)result << 16) | (v34 << 32);
  }
  return result;
}

uint64_t SEP.Identity.string.getter()
{
  int *v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((unsigned __int8 *)v0 + 16);
  v4 = *((unsigned __int8 *)v0 + 17);
  v5 = *((_BYTE *)v0 + 18);
  v6 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2380BFC90;
  v8 = MEMORY[0x24BEE44F0];
  v9 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v7 + 64) = v9;
  *(_DWORD *)(v7 + 32) = v1;
  v10 = MEMORY[0x24BEE45B8];
  *(_QWORD *)(v7 + 96) = MEMORY[0x24BEE4568];
  *(_QWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 72) = v2;
  v11 = v5 & 3;
  if (v4)
    v11 = v5 & 3 | 4;
  if (v3)
    v12 = 8;
  else
    v12 = 0;
  v13 = v11 | v12;
  v14 = MEMORY[0x24BEE42B0];
  *(_QWORD *)(v7 + 136) = MEMORY[0x24BEE4260];
  *(_QWORD *)(v7 + 144) = v14;
  *(_BYTE *)(v7 + 112) = v13;
  *(_QWORD *)(v7 + 176) = v8;
  *(_QWORD *)(v7 + 184) = v9;
  *(_DWORD *)(v7 + 152) = v6;
  return sub_2380BDD30();
}

uint64_t SEP.Identity.udid.getter()
{
  int *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2380BEAF0;
  v4 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v3 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v3 + 64) = v4;
  *(_DWORD *)(v3 + 32) = v1;
  v5 = MEMORY[0x24BEE45B8];
  *(_QWORD *)(v3 + 96) = MEMORY[0x24BEE4568];
  *(_QWORD *)(v3 + 104) = v5;
  *(_QWORD *)(v3 + 72) = v2;
  return sub_2380BDD30();
}

uint64_t sub_23800F574(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_238010070(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_2380BDDE4();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_2380BDD84();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_2380BDD84();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_2380BDDFC();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_2380268F4(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_2380268F4((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_2380BDD84();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_2380BDDFC();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_2380268F4(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_2380268F4((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_2380BE0CC();
  __break(1u);
LABEL_42:
  result = sub_2380BE0CC();
  __break(1u);
  return result;
}

void sub_23800FA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(swift_allocObject() + 16) = MEMORY[0x24BEE4AF8];
    __asm { BR              X9 }
  }
  sub_2380BE0CC();
  __break(1u);
  JUMPOUT(0x23800FFF8);
}

uint64_t sub_238010070(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_2380BDDFC();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_2380268F4(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_2380268F4((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_2380BE0CC();
  __break(1u);
  return result;
}

uint64_t sub_2380101C8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = (v5 == a1) & a3;
  if (v6 == 1)
    return v6 ^ 1u;
  if (v5 <= a1)
  {
    v8 = sub_2380BD340();
    v10 = v9;
    v11 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = sub_238026C5C(0, v11[2] + 1, 1, v11);
      *(_QWORD *)(a4 + 16) = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
      v11 = sub_238026C5C((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    v11[2] = v14 + 1;
    v15 = &v11[2 * v14];
    v15[4] = v8;
    v15[5] = v10;
    *(_QWORD *)(a4 + 16) = v11;
    return v6 ^ 1u;
  }
  result = sub_2380BE0CC();
  __break(1u);
  return result;
}

uint64_t sub_238010304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_238011970();
  swift_bridgeObjectRetain();
  v7 = sub_2380BDDF0();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_238010D74();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_2380BE078();
  }
LABEL_7:
  v13 = (unsigned __int16)sub_2380105D0(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 & 0x1FF;
}

unsigned __int8 *sub_2380103F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_238011970();
  swift_bridgeObjectRetain();
  v7 = sub_2380BDDF0();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_238010D74();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_2380BE078();
  }
LABEL_7:
  v13 = sub_238010878(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_2380104E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_238011970();
  swift_bridgeObjectRetain();
  v7 = sub_2380BDDF0();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_238010D74();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_2380BE078();
  }
LABEL_7:
  v13 = sub_238010AF4(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

unsigned __int8 *sub_2380105D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_238010878(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_238010AF4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_238010D74()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_2380BDDFC();
  v4 = sub_238010DF0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_238010DF0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_238010F34(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_238013DF8(v9, 0);
      v12 = sub_238011020((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x23B82AC00](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x23B82AC00);
LABEL_9:
      sub_2380BE078();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x23B82AC00]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_238010F34(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_2380805D4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_2380805D4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_2380BDDC0();
  }
  __break(1u);
  return result;
}

unint64_t sub_238011020(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_2380805D4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_2380BDDCC();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_2380BE078();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_2380805D4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_2380BDDA8();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_238011230(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  int v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    v13 = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_2380BE078();
  }
  result = sub_2380121F4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = BYTE1(result) & 1;
    v13 = result | ((BYTE1(result) & 1) << 8);
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
    return v13 | (LOBYTE(v14[0]) << 16);
  }
  return result;
}

uint64_t sub_238011304(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_2380BE078();
  }
  result = sub_238011DD8((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_2380113D4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_2380BE078();
  }
  result = sub_2380119B4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_2380114A4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_2380BE1B0() & 1;
}

BOOL _s16CloudAttestation3SEPO8IdentityV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v4 = *(_BYTE *)(a2 + 18);
  v5 = *(_BYTE *)(a1 + 18) & 3;
  if ((*(_BYTE *)(a1 + 17) & 1) != 0)
    v5 |= 4u;
  if (*(_BYTE *)(a2 + 17))
    v6 = v4 & 3 | 4;
  else
    v6 = v4 & 3;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v7 = 8;
  else
    v7 = 0;
  v8 = v7 | v5;
  if (*(_BYTE *)(a2 + 16))
    v9 = 8;
  else
    v9 = 0;
  return v8 == (v6 | v9) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

unint64_t sub_238011594()
{
  unint64_t result;

  result = qword_2568C5C48;
  if (!qword_2568C5C48)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.Identity.ArchBits.SecurityDomain, &type metadata for SEP.Identity.ArchBits.SecurityDomain);
    atomic_store(result, (unint64_t *)&qword_2568C5C48);
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s8IdentityVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s8IdentityVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.Identity()
{
  return &type metadata for SEP.Identity;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t _s8IdentityV8ArchBitsVwet(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t _s8IdentityV8ArchBitsVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.Identity.ArchBits()
{
  return &type metadata for SEP.Identity.ArchBits;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s8IdentityV8ArchBitsV14SecurityDomainOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8IdentityV8ArchBitsV14SecurityDomainOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2380118AC + 4 * byte_2380BFCA5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2380118E0 + 4 * byte_2380BFCA0[v4]))();
}

uint64_t sub_2380118E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2380118E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2380118F0);
  return result;
}

uint64_t sub_2380118FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238011904);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_238011908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238011910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23801191C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_238011924(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SEP.Identity.ArchBits.SecurityDomain()
{
  return &type metadata for SEP.Identity.ArchBits.SecurityDomain;
}

uint64_t sub_23801193C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_238011960()
{
  return swift_deallocObject();
}

unint64_t sub_238011970()
{
  unint64_t result;

  result = qword_2568C5C50;
  if (!qword_2568C5C50)
  {
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_2568C5C50);
  }
  return result;
}

uint64_t sub_2380119B4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_2380805D4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = sub_2380BDDC0();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_2380805D4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_2380805D4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = sub_2380BDDC0();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (v31 < v32)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_238011DD8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  BOOL v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_2380805D4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_96;
  result = sub_2380BDDC0();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_2380805D4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_2380805D4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_92;
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  result = sub_2380BDDC0();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 48;
        v34 = a6 + 55;
        v35 = a6 + 87;
        if (a6 > 10)
        {
          v33 = 58;
        }
        else
        {
          v35 = 97;
          v34 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                if (v38 < 0x61 || v38 >= v35)
                  return v29;
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            if (!is_mul_ok(v24, a6))
              return 0;
            v40 = v24 * a6;
            v41 = v38 + v39;
            v32 = __CFADD__(v40, v41);
            v24 = v40 + v41;
            if (v32)
              return 0;
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 48;
      v43 = a6 + 55;
      v44 = a6 + 87;
      if (a6 > 10)
      {
        v42 = 58;
      }
      else
      {
        v44 = 97;
        v43 = 65;
      }
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              if (v45 < 0x61 || v45 >= v44)
                return v29;
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v47 = v24 * a6;
          v48 = v45 + v46;
          v32 = __CFADD__(v47, v48);
          v24 = v47 + v48;
          if (v32)
            return 0;
          ++v19;
          if (!--result)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v30 = v24 * a6;
          v31 = v27 + v28;
          v32 = v30 >= v31;
          v24 = v30 - v31;
          if (!v32)
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_2380121F4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned int v41;
  unsigned int v42;
  char v43;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_2380805D4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = sub_2380BDDC0();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_2380805D4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_2380805D4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = sub_2380BDDC0();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 87;
        if (a6 > 10)
        {
          v32 = a6 + 55;
        }
        else
        {
          v31 = 97;
          v32 = 65;
        }
        if (a6 <= 10)
          v33 = a6 + 48;
        else
          v33 = 58;
        if (v19)
        {
          LOBYTE(v24) = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v33)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                v30 = 1;
                if (v36 < 0x61 || v36 >= v31)
                  return v29 | (v30 << 8);
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0)
              goto LABEL_96;
            v24 = (v24 * a6) + (v36 + v37);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_96;
            ++v34;
            --v35;
          }
          while (v35);
LABEL_72:
          v30 = 0;
          v29 = v24;
          return v29 | (v30 << 8);
        }
        goto LABEL_95;
      }
LABEL_96:
      v29 = 0;
      v30 = 1;
      return v29 | (v30 << 8);
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v38 = a6 + 87;
      if (a6 > 10)
      {
        v39 = a6 + 55;
      }
      else
      {
        v38 = 97;
        v39 = 65;
      }
      if (a6 <= 10)
        v40 = a6 + 48;
      else
        v40 = 58;
      if (v19)
      {
        LOBYTE(v41) = 0;
        do
        {
          v42 = *v19;
          if (v42 < 0x30 || v42 >= v40)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              v29 = 0;
              v30 = 1;
              if (v42 < 0x61 || v42 >= v38)
                return v29 | (v30 << 8);
              v43 = -87;
            }
            else
            {
              v43 = -55;
            }
          }
          else
          {
            v43 = -48;
          }
          if (((v41 * (unsigned __int16)a6) & 0xFF00) != 0)
            goto LABEL_96;
          v41 = (v41 * a6) + (v42 + v43);
          if (((v41 >> 8) & 1) != 0)
            goto LABEL_96;
          ++v19;
          --result;
        }
        while (result);
        v30 = 0;
        v29 = v41;
        return v29 | (v30 << 8);
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        LOBYTE(v24) = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | (v30 << 8);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0)
            goto LABEL_96;
          v24 = (v24 * a6) - (v27 + v28);
          if ((v24 & 0xFFFFFF00) != 0)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_72;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | (v30 << 8);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t CachingTransparencyVerifier.init(verifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  sub_2380BD7FC();
  v9 = type metadata accessor for CachingTransparencyVerifier(0, a2, a3, v8);
  v10 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a4 + *(int *)(v9 + 36), a1, a2);
  v12 = type metadata accessor for CachingTransparencyVerifier.Key(255, a2, a3, v11);
  v13 = sub_2380BD418();
  v14 = MEMORY[0x23B82B770](&unk_2380BFED8, v12);
  type metadata accessor for AsyncTemporalCache(0, v12, v13, v14);
  v15 = sub_238065DC8(4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
  *(_QWORD *)(a4 + *(int *)(v9 + 40)) = v15;
  return result;
}

uint64_t type metadata accessor for CachingTransparencyVerifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CachingTransparencyVerifier);
}

uint64_t type metadata accessor for CachingTransparencyVerifier.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CachingTransparencyVerifier.Key);
}

uint64_t CachingTransparencyVerifier.verifyInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = sub_2380BD418();
  v3[2] = v7;
  v3[3] = *(_QWORD *)(v7 - 8);
  v8 = swift_task_alloc();
  v3[4] = v8;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_23801281C;
  return CachingTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(v8, a1, a2, a3);
}

uint64_t sub_23801281C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[3] + 8))(v2[4], v2[2]);
  return swift_task_switch();
}

uint64_t sub_238012890()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2380128C4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CachingTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v7 = sub_2380BD808();
  v5[10] = v7;
  v5[11] = *(_QWORD *)(v7 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  v5[14] = swift_task_alloc();
  v8 = sub_2380BD418();
  v5[15] = v8;
  v5[16] = *(_QWORD *)(v8 - 8);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  type metadata accessor for TransparencyLogProofs();
  v5[24] = swift_task_alloc();
  type metadata accessor for Release();
  v5[25] = swift_task_alloc();
  v9 = *(_QWORD *)(a4 + 16);
  v5[26] = v9;
  v10 = *(_QWORD *)(a4 + 24);
  v5[27] = v10;
  v12 = type metadata accessor for CachingTransparencyVerifier.Key(0, v9, v10, v11);
  v5[28] = v12;
  v5[29] = *(_QWORD *)(v12 - 8);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_238012A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 56);
  sub_238013570(*(_QWORD *)(v0 + 48), v5, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  sub_238013570(v9, v6, (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
  sub_2380135B4(v5, v6, v4, v3, v1);
  v10 = *(int *)(v8 + 40);
  *(_DWORD *)(v0 + 304) = v10;
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v7 + v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v13, v1, v12);
  return swift_task_switch();
}

uint64_t sub_238012B60()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v2 = v0[29];
  v1 = v0[30];
  v3 = v0[28];
  sub_238065E4C(v1, v0[14]);
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[33] = (uint64_t)v4;
  v4(v1, v3);
  return swift_task_switch();
}

uint64_t sub_238012BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 216);
    sub_238013928(v3);
    v31 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v4 + 16) + *(_QWORD *)(v4 + 16));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v5;
    *v5 = v0;
    v5[1] = sub_238012F60;
    return v31(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 72);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v32(v7, v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v8, v7, v1);
    v13 = sub_2380BD7F0();
    v14 = sub_2380BDF70();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v17 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 104);
    v29 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 80);
    if (v15)
    {
      v28 = *(_QWORD *)(v0 + 248);
      v23 = (uint8_t *)swift_slowAlloc();
      v27 = v16;
      v24 = swift_slowAlloc();
      v33 = v24;
      *(_DWORD *)v23 = 136315138;
      sub_238001820(&qword_2568C5C70, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
      v25 = sub_2380BE1A4();
      *(_QWORD *)(v0 + 32) = sub_238013968(v25, v26, &v33);
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      _os_log_impl(&dword_237FF6000, v13, v14, "Returning cached result (inclusionExpiration=%s)", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v24, -1, -1);
      MEMORY[0x23B82B830](v23, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v22, v30);
      v27(v28, v18);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v22, v30);
      v16(v17, v18);
    }
    v32(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 120));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_238012F60()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_238012FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  NSObject *log;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v34 = *(_QWORD *)(v0 + 144);
  v36 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v32 = *(_QWORD *)(v0 + 80);
  sub_2380BE294();
  sub_2380BE294();
  sub_2380BD3F4();
  sub_238001820(&qword_2568C5C68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v9 = sub_2380BDCDC();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  if ((v9 & 1) != 0)
    v11 = v2;
  else
    v11 = v3;
  v10(v1, v11, v5);
  v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 288) = v12;
  v12(v3, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v8, v32);
  v10(v34, v2, v5);
  v10(v36, v1, v5);
  v13 = sub_2380BD7F0();
  v14 = sub_2380BDF70();
  if (os_log_type_enabled(v13, v14))
  {
    type = v14;
    log = v13;
    v15 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 120);
    v33 = *(_QWORD *)(v0 + 88);
    v35 = *(_QWORD *)(v0 + 80);
    v37 = *(_QWORD *)(v0 + 96);
    v18 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v38 = v29;
    *(_DWORD *)v18 = 136315394;
    sub_238001820(&qword_2568C5C70, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    v19 = sub_2380BE1A4();
    *(_QWORD *)(v0 + 16) = sub_238013968(v19, v20, &v38);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    v12(v16, v17);
    *(_WORD *)(v18 + 12) = 2080;
    v21 = sub_2380BE1A4();
    *(_QWORD *)(v0 + 24) = sub_238013968(v21, v22, &v38);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    v12(v15, v17);
    _os_log_impl(&dword_237FF6000, log, type, "Caching result (inclusionExpiration=%s, cachhExpiration=%s)", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v29, -1, -1);
    MEMORY[0x23B82B830](v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v37, v35);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 88);
    v25 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 80);
    v12(*(_QWORD *)(v0 + 144), v24);
    v12(v23, v24);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }
  *(_QWORD *)(v0 + 296) = *(_QWORD *)(*(_QWORD *)(v0 + 72) + *(int *)(v0 + 304));
  return swift_task_switch();
}

uint64_t sub_23801330C()
{
  uint64_t *v0;

  sub_238065EE0(v0[31], v0[21], v0[20]);
  return swift_task_switch();
}

uint64_t sub_238013350()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 120));
  v1(v2, v3);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238013474()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238013570(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2380135B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  sub_238001DE4(a1, a5, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  v10 = type metadata accessor for CachingTransparencyVerifier.Key(0, a3, a4, v9);
  return sub_238001DE4(a2, a5 + *(int *)(v10 + 36), (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
}

uint64_t sub_23801361C(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_2380BDA60();
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  sub_2380BDCB8();
  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_23802F68C(a1, v3);
  swift_bridgeObjectRelease();
  type metadata accessor for ATLogProofs(0);
  sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
  return sub_2380BDCB8();
}

uint64_t sub_2380136E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((sub_2380BDA48() & 1) == 0)
    return 0;
  v8 = type metadata accessor for Release();
  if ((sub_23802B050(*(_QWORD *)(a1 + *(int *)(v8 + 20)), *(_QWORD *)(a2 + *(int *)(v8 + 20))) & 1) == 0)
    return 0;
  v10 = *(int *)(type metadata accessor for CachingTransparencyVerifier.Key(0, a3, a4, v9) + 36);
  return j___s16CloudAttestation21TransparencyLogProofsV2eeoiySbAC_ACtFZ_0(a1 + v10, a2 + v10);
}

uint64_t sub_23801376C()
{
  __int128 v1[4];

  sub_2380BE234();
  sub_23801361C(v1);
  return sub_2380BE264();
}

uint64_t sub_2380137B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_238013814;
  return CachingTransparencyVerifier.verifyInclusion(of:proofs:)(a1, a2, a3);
}

uint64_t sub_238013814()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23801385C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_2380165B0;
  return CachingTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(a1, a2, a3, a4);
}

uint64_t sub_2380138DC()
{
  __int128 v1[4];

  sub_2380BE234();
  sub_23801361C(v1);
  return sub_2380BE264();
}

uint64_t sub_23801391C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2380136E8(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_238013928(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_238013968(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_238013A38(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_238016570((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_238016570((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_238013A38(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2380BDFA0();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_238013BF0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2380BE078();
  if (!v8)
  {
    sub_2380BE0CC();
    __break(1u);
LABEL_17:
    result = sub_2380BE114();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_238013BF0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_238013C84(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_238013E5C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_238013E5C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_238013C84(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_238013DF8(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2380BE054();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2380BE0CC();
      __break(1u);
LABEL_10:
      v2 = sub_2380BDD9C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2380BE114();
    __break(1u);
LABEL_14:
    result = sub_2380BE0CC();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_238013DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5D88);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_238013E5C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5D88);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238013FA8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_2380BD808();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23801403C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_2380BD808();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v18 = ((unint64_t)a2 + v11) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, v18, v8);
    *(_QWORD *)((v12 + (((unint64_t)a1 + v11) & v17)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v18) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_238014150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_2380BD808();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((*(_QWORD *)(v5 + 64)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

uint64_t sub_2380141D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_2380BD808();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_238014278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_2380BD808();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23801432C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_2380BD808();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2380143D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_2380BD808();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23801447C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;

  v6 = sub_2380BD808();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v13 = v6;
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = *(_QWORD *)(v7 + 64) + v14;
  v16 = *(_QWORD *)(v10 + 64) + 7;
  if (v12 < a2)
  {
    if (((((v16 + (v15 & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v12 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X4 }
  }
  if (v8 == v12)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v22 = a1;
    v11 = *(unsigned int *)(v7 + 84);
    v9 = v13;
    return v21(v22, v11, v9);
  }
  v22 = (v15 + a1) & ~v14;
  if ((_DWORD)v11 == v12)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v21(v22, v11, v9);
  }
  v23 = *(_QWORD *)((v16 + v22) & 0xFFFFFFFFFFFFF8);
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  return (v23 + 1);
}

void sub_238014604(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = *(_QWORD *)(sub_2380BD808() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 >= a3)
  {
    v14 = 0;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64) + 7 + ((*(_DWORD *)(v8 + 64) + (_DWORD)v11) & ~(_DWORD)v11)) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v12 = a3 - v10 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((*(_DWORD *)(v9 + 64) + 7 + ((*(_DWORD *)(v8 + 64) + (_DWORD)v11) & ~(_DWORD)v11)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v15 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64) + 7 + ((*(_QWORD *)(v8 + 64) + v11) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_238014734()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2380147C8);
}

void sub_23801473C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x238014744);
  JUMPOUT(0x2380147C8);
}

void sub_238014790()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2380147C8);
}

void sub_238014798()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2380147C8);
}

uint64_t sub_2380147A0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v13 + v15) = 0;
  if (!(_DWORD)v14)
    JUMPOUT(0x2380147C8);
  if ((_DWORD)v7 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v4 = v13;
    v5 = v14;
    a1 = v7;
    a2 = a3;
  }
  else
  {
    v4 = (v11 + v13) & v12;
    if ((_DWORD)a1 != v10)
      JUMPOUT(0x2380147ACLL);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v5 = v14;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t sub_2380147E0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2380147E8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Release();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ATLogProofs(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23801486C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *__dst;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2380BDA60();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for Release();
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 20));
    v9 = *(int *)(a3 + 36);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2380BD5C8();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = type metadata accessor for ATLogProofs(0);
    v15 = *(int *)(v14 + 20);
    v16 = &v10[v15];
    v17 = &v11[v15];
    v18 = type metadata accessor for LogEntry(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v60 = v19;
      v61 = v14;
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v22 = v13;
      v23 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      v24 = *((_QWORD *)v17 + 4);
      swift_bridgeObjectRetain();
      sub_237FFBA20(v23, v24);
      *((_QWORD *)v16 + 3) = v23;
      *((_QWORD *)v16 + 4) = v24;
      v13 = v22;
      v25 = *((_QWORD *)v17 + 6);
      *((_QWORD *)v16 + 5) = *((_QWORD *)v17 + 5);
      *((_QWORD *)v16 + 6) = v25;
      v16[56] = v17[56];
      v22(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v12);
      v26 = *(int *)(v18 + 40);
      v27 = &v16[v26];
      v28 = &v17[v26];
      v29 = type metadata accessor for SignedObject(0);
      v62 = v12;
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        v32 = v60;
        v14 = v61;
        v12 = v62;
      }
      else
      {
        v57 = v30;
        v33 = v13;
        v59 = v29;
        v34 = *(_QWORD *)v28;
        v35 = *((_QWORD *)v28 + 1);
        sub_237FFBA20(*(_QWORD *)v28, v35);
        *(_QWORD *)v27 = v34;
        *((_QWORD *)v27 + 1) = v35;
        v36 = v33;
        v12 = v62;
        v36(&v27[*(int *)(v59 + 20)], &v28[*(int *)(v59 + 20)], v62);
        v37 = *(int *)(v59 + 24);
        __dst = &v27[v37];
        v38 = (uint64_t *)&v28[v37];
        v39 = type metadata accessor for Signature(0);
        v40 = *(_QWORD *)(v39 - 8);
        v55 = v39;
        v58 = v27;
        if ((*(unsigned int (**)(uint64_t *, uint64_t))(v40 + 48))(v38, 1))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
          memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
          v13 = v36;
        }
        else
        {
          v52 = *v38;
          v54 = v36;
          v42 = v38[1];
          sub_237FFBA20(*v38, v42);
          *(_QWORD *)__dst = v52;
          *((_QWORD *)__dst + 1) = v42;
          v43 = v38[3];
          v53 = v38[2];
          sub_237FFBA20(v53, v43);
          *((_QWORD *)__dst + 2) = v53;
          *((_QWORD *)__dst + 3) = v43;
          *((_QWORD *)__dst + 4) = v38[4];
          __dst[40] = *((_BYTE *)v38 + 40);
          v54(&__dst[*(int *)(v55 + 28)], (char *)v38 + *(int *)(v55 + 28), v62);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v55);
          v13 = v54;
        }
        v32 = v60;
        v14 = v61;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v59);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v16, 0, 1, v18);
    }
    v44 = *(int *)(v14 + 24);
    v45 = &v10[v44];
    v46 = &v11[v44];
    v47 = type metadata accessor for LogConsistency(0);
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v13(v45, v46, v12);
      *(_QWORD *)&v45[*(int *)(v47 + 20)] = *(_QWORD *)&v46[*(int *)(v47 + 20)];
      v50 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56);
      swift_retain();
      v50(v45, 0, 1, v47);
    }
  }
  return a1;
}

uint64_t sub_238014C64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 36);
  v6 = sub_2380BD5C8();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = type metadata accessor for ATLogProofs(0);
  v9 = v5 + *(int *)(v8 + 20);
  v10 = type metadata accessor for LogEntry(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    sub_237FFBAB0(*(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32));
    v7(v9 + *(int *)(v10 + 36), v6);
    v11 = v9 + *(int *)(v10 + 40);
    v12 = type metadata accessor for SignedObject(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
    {
      sub_237FFBAB0(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
      v7(v11 + *(int *)(v12 + 20), v6);
      v13 = v11 + *(int *)(v12 + 24);
      v14 = type metadata accessor for Signature(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
      {
        sub_237FFBAB0(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        sub_237FFBAB0(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24));
        v7(v13 + *(int *)(v14 + 28), v6);
      }
    }
  }
  v15 = v5 + *(int *)(v8 + 24);
  v16 = type metadata accessor for LogConsistency(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16);
  if (!(_DWORD)result)
  {
    v7(v15, v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_238014E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *__dst;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = type metadata accessor for ATLogProofs(0);
  v14 = *(int *)(v13 + 20);
  v15 = (_QWORD *)(v9 + v14);
  v16 = (_QWORD *)(v10 + v14);
  v17 = type metadata accessor for LogEntry(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v56 = v13;
    v57 = v18;
    *v15 = *v16;
    *((_BYTE *)v15 + 8) = *((_BYTE *)v16 + 8);
    v58 = v12;
    v20 = v16[3];
    v15[2] = v16[2];
    v21 = v16[4];
    swift_bridgeObjectRetain();
    sub_237FFBA20(v20, v21);
    v15[3] = v20;
    v15[4] = v21;
    v12 = v58;
    v22 = v16[6];
    v15[5] = v16[5];
    v15[6] = v22;
    *((_BYTE *)v15 + 56) = *((_BYTE *)v16 + 56);
    v58((uint64_t)v15 + *(int *)(v17 + 36), (uint64_t)v16 + *(int *)(v17 + 36), v11);
    v23 = *(int *)(v17 + 40);
    v24 = (_QWORD *)((char *)v15 + v23);
    v25 = (_QWORD *)((char *)v16 + v23);
    v26 = type metadata accessor for SignedObject(0);
    v55 = v11;
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = v57;
      v11 = v55;
    }
    else
    {
      v53 = v27;
      v54 = v26;
      v30 = *v25;
      v31 = v25[1];
      sub_237FFBA20(*v25, v31);
      *v24 = v30;
      v24[1] = v31;
      v12 = v58;
      v32 = v54;
      v11 = v55;
      v58((uint64_t)v24 + *(int *)(v54 + 20), (uint64_t)v25 + *(int *)(v54 + 20), v55);
      v33 = *(int *)(v54 + 24);
      __dst = (_QWORD *)((char *)v24 + v33);
      v34 = (uint64_t *)((char *)v25 + v33);
      v35 = type metadata accessor for Signature(0);
      v50 = *(_QWORD *)(v35 - 8);
      v51 = v35;
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v50 + 48))(v34, 1))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v49 = v24;
        v38 = *v34;
        v37 = v34[1];
        sub_237FFBA20(*v34, v37);
        *__dst = v38;
        __dst[1] = v37;
        v40 = v34[2];
        v39 = v34[3];
        sub_237FFBA20(v40, v39);
        __dst[2] = v40;
        __dst[3] = v39;
        v12 = v58;
        v24 = v49;
        __dst[4] = v34[4];
        *((_BYTE *)__dst + 40) = *((_BYTE *)v34 + 40);
        v58((uint64_t)__dst + *(int *)(v51 + 28), (uint64_t)v34 + *(int *)(v51 + 28), v55);
        v32 = v54;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v51);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v24, 0, 1, v32);
      v29 = v57;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v15, 0, 1, v17);
    v13 = v56;
  }
  v41 = *(int *)(v13 + 24);
  v42 = (char *)(v9 + v41);
  v43 = (char *)(v10 + v41);
  v44 = type metadata accessor for LogConsistency(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v42, (uint64_t)v43, v11);
    *(_QWORD *)&v42[*(int *)(v44 + 20)] = *(_QWORD *)&v43[*(int *)(v44 + 20)];
    v47 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56);
    swift_retain();
    v47(v42, 0, 1, v44);
  }
  return a1;
}

uint64_t sub_2380151F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  size_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  int v71;
  int v72;
  void (*v73)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  v119 = *(_QWORD *)(v11 - 8);
  v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 24);
  v118(v9, v10, v11);
  v120 = type metadata accessor for ATLogProofs(0);
  v12 = *(int *)(v120 + 20);
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for LogEntry(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v35 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v35;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36 = *(_QWORD *)(v14 + 24);
      v37 = *(_QWORD *)(v14 + 32);
      sub_237FFBA20(v36, v37);
      v38 = *(_QWORD *)(v13 + 24);
      v39 = *(_QWORD *)(v13 + 32);
      *(_QWORD *)(v13 + 24) = v36;
      *(_QWORD *)(v13 + 32) = v37;
      sub_237FFBAB0(v38, v39);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      v40 = *(_QWORD *)(v14 + 48);
      *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
      *(_QWORD *)(v13 + 48) = v40;
      v118(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v11);
      v41 = *(int *)(v15 + 40);
      v13 += v41;
      v14 += v41;
      v42 = type metadata accessor for SignedObject(0);
      v43 = *(_QWORD *)(v42 - 8);
      v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      LODWORD(v36) = v44(v13, 1, v42);
      v45 = v44(v14, 1, v42);
      if ((_DWORD)v36)
      {
        if (!v45)
        {
          v46 = *(_QWORD *)v14;
          v47 = *(_QWORD *)(v14 + 8);
          sub_237FFBA20(*(_QWORD *)v14, v47);
          *(_QWORD *)v13 = v46;
          *(_QWORD *)(v13 + 8) = v47;
          v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16);
          v117(v13 + *(int *)(v42 + 20), v14 + *(int *)(v42 + 20), v11);
          v48 = *(int *)(v42 + 24);
          v49 = (_QWORD *)(v13 + v48);
          v50 = (uint64_t *)(v14 + v48);
          v51 = type metadata accessor for Signature(0);
          v115 = *(_QWORD *)(v51 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v115 + 48))(v50, 1, v51))
          {
            v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
          }
          else
          {
            v113 = v11;
            v92 = *v50;
            v110 = v50[1];
            sub_237FFBA20(*v50, v110);
            *v49 = v92;
            v49[1] = v110;
            v93 = v50[2];
            v111 = v50[3];
            sub_237FFBA20(v93, v111);
            v49[2] = v93;
            v11 = v113;
            v49[3] = v111;
            v94 = v50[4];
            *((_BYTE *)v49 + 40) = *((_BYTE *)v50 + 40);
            v49[4] = v94;
            v117((uint64_t)v49 + *(int *)(v51 + 28), (uint64_t)v50 + *(int *)(v51 + 28), v113);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v49, 0, 1, v51);
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v13, 0, 1, v42);
          goto LABEL_10;
        }
      }
      else
      {
        if (!v45)
        {
          v76 = *(_QWORD *)v14;
          v77 = *(_QWORD *)(v14 + 8);
          sub_237FFBA20(*(_QWORD *)v14, v77);
          v78 = *(_QWORD *)v13;
          v79 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)v13 = v76;
          *(_QWORD *)(v13 + 8) = v77;
          sub_237FFBAB0(v78, v79);
          v118(v13 + *(int *)(v42 + 20), v14 + *(int *)(v42 + 20), v11);
          v80 = *(int *)(v42 + 24);
          v81 = v13 + v80;
          v82 = v14 + v80;
          v83 = type metadata accessor for Signature(0);
          v84 = *(_QWORD *)(v83 - 8);
          v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
          LODWORD(v76) = v85(v81, 1, v83);
          v86 = v85(v82, 1, v83);
          if ((_DWORD)v76)
          {
            if (!v86)
            {
              v87 = *(_QWORD *)v82;
              v88 = *(_QWORD *)(v82 + 8);
              sub_237FFBA20(*(_QWORD *)v82, v88);
              *(_QWORD *)v81 = v87;
              *(_QWORD *)(v81 + 8) = v88;
              v89 = *(_QWORD *)(v82 + 16);
              v90 = *(_QWORD *)(v82 + 24);
              sub_237FFBA20(v89, v90);
              *(_QWORD *)(v81 + 16) = v89;
              *(_QWORD *)(v81 + 24) = v90;
              v91 = *(_QWORD *)(v82 + 32);
              *(_BYTE *)(v81 + 40) = *(_BYTE *)(v82 + 40);
              *(_QWORD *)(v81 + 32) = v91;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v81 + *(int *)(v83 + 28), v82 + *(int *)(v83 + 28), v11);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v86)
            {
              v95 = *(_QWORD *)v82;
              v96 = *(_QWORD *)(v82 + 8);
              sub_237FFBA20(*(_QWORD *)v82, v96);
              v97 = *(_QWORD *)v81;
              v98 = *(_QWORD *)(v81 + 8);
              *(_QWORD *)v81 = v95;
              *(_QWORD *)(v81 + 8) = v96;
              sub_237FFBAB0(v97, v98);
              v99 = *(_QWORD *)(v82 + 16);
              v100 = *(_QWORD *)(v82 + 24);
              sub_237FFBA20(v99, v100);
              v101 = *(_QWORD *)(v81 + 16);
              v102 = *(_QWORD *)(v81 + 24);
              *(_QWORD *)(v81 + 16) = v99;
              *(_QWORD *)(v81 + 24) = v100;
              sub_237FFBAB0(v101, v102);
              v103 = *(_QWORD *)(v82 + 32);
              *(_BYTE *)(v81 + 40) = *(_BYTE *)(v82 + 40);
              *(_QWORD *)(v81 + 32) = v103;
              v118(v81 + *(int *)(v83 + 28), v82 + *(int *)(v83 + 28), v11);
              goto LABEL_10;
            }
            sub_237FFD540(v81, type metadata accessor for Signature);
          }
          v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
          v33 = (void *)v81;
          v34 = (const void *)v82;
LABEL_9:
          memcpy(v33, v34, v32);
LABEL_10:
          v30 = v120;
          goto LABEL_23;
        }
        sub_237FFD540(v13, type metadata accessor for SignedObject);
      }
      v31 = &qword_2568C5438;
LABEL_8:
      v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v31) - 8) + 64);
      v33 = (void *)v13;
      v34 = (const void *)v14;
      goto LABEL_9;
    }
    sub_237FFD540(v13, type metadata accessor for LogEntry);
LABEL_7:
    v31 = &qword_2568C5440;
    goto LABEL_8;
  }
  if (v19)
    goto LABEL_7;
  v116 = v9;
  v20 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v20;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  v21 = *(_QWORD *)(v14 + 24);
  v22 = *(_QWORD *)(v14 + 32);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v21, v22);
  *(_QWORD *)(v13 + 24) = v21;
  *(_QWORD *)(v13 + 32) = v22;
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  v23 = *(_QWORD *)(v14 + 48);
  *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
  *(_QWORD *)(v13 + 48) = v23;
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16);
  v114(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v11);
  v24 = *(int *)(v15 + 40);
  v25 = (_QWORD *)(v13 + v24);
  v26 = (uint64_t *)(v14 + v24);
  v27 = type metadata accessor for SignedObject(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    v30 = v120;
    v9 = v116;
  }
  else
  {
    v108 = v28;
    v112 = v10;
    v53 = v11;
    v55 = *v26;
    v54 = v26[1];
    sub_237FFBA20(*v26, v54);
    *v25 = v55;
    v25[1] = v54;
    v114((uint64_t)v25 + *(int *)(v27 + 20), (uint64_t)v26 + *(int *)(v27 + 20), v53);
    v56 = *(int *)(v27 + 24);
    v109 = v25;
    v57 = (_QWORD *)((char *)v25 + v56);
    v58 = (uint64_t *)((char *)v26 + v56);
    v59 = type metadata accessor for Signature(0);
    v107 = *(_QWORD *)(v59 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v107 + 48))(v58, 1, v59))
    {
      v60 = v53;
      v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v106 = v59;
      v62 = *v58;
      v104 = v58[1];
      sub_237FFBA20(*v58, v104);
      *v57 = v62;
      v57[1] = v104;
      v63 = v58[2];
      v105 = v58[3];
      sub_237FFBA20(v63, v105);
      v57[2] = v63;
      v57[3] = v105;
      v64 = v58[4];
      *((_BYTE *)v57 + 40) = *((_BYTE *)v58 + 40);
      v57[4] = v64;
      v60 = v53;
      v114((uint64_t)v57 + *(int *)(v106 + 28), (uint64_t)v58 + *(int *)(v106 + 28), v53);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v57, 0, 1, v106);
    }
    v10 = v112;
    v9 = v116;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v27);
    v11 = v60;
    v30 = v120;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_23:
  v65 = *(int *)(v30 + 24);
  v66 = (char *)(v9 + v65);
  v67 = (char *)(v10 + v65);
  v68 = type metadata accessor for LogConsistency(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  v71 = v70(v66, 1, v68);
  v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      v118((uint64_t)v66, (uint64_t)v67, v11);
      *(_QWORD *)&v66[*(int *)(v68 + 20)] = *(_QWORD *)&v67[*(int *)(v68 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_237FFD540((uint64_t)v66, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v72)
  {
LABEL_28:
    v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v66, v67, v11);
  *(_QWORD *)&v66[*(int *)(v68 + 20)] = *(_QWORD *)&v67[*(int *)(v68 + 20)];
  v73 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56);
  swift_retain();
  v73(v66, 0, 1, v68);
  return a1;
}

uint64_t sub_2380159FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = type metadata accessor for ATLogProofs(0);
  v14 = *(int *)(v13 + 20);
  v15 = (_QWORD *)(v9 + v14);
  v16 = (_QWORD *)(v10 + v14);
  v17 = type metadata accessor for LogEntry(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v48 = v13;
    v49 = v18;
    *v15 = *v16;
    *((_BYTE *)v15 + 8) = *((_BYTE *)v16 + 8);
    v15[2] = v16[2];
    *(_OWORD *)(v15 + 3) = *(_OWORD *)(v16 + 3);
    v20 = v16[6];
    v15[5] = v16[5];
    v15[6] = v20;
    *((_BYTE *)v15 + 56) = *((_BYTE *)v16 + 56);
    v12((uint64_t)v15 + *(int *)(v17 + 36), (uint64_t)v16 + *(int *)(v17 + 36), v11);
    v21 = *(int *)(v17 + 40);
    v22 = (_OWORD *)((char *)v15 + v21);
    v50 = v12;
    v23 = (_OWORD *)((char *)v16 + v21);
    v24 = type metadata accessor for SignedObject(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      v27 = v49;
      v12 = v50;
      v13 = v48;
    }
    else
    {
      v46 = v25;
      *v22 = *v23;
      v50((uint64_t)v22 + *(int *)(v24 + 20), (uint64_t)v23 + *(int *)(v24 + 20), v11);
      v28 = *(int *)(v24 + 24);
      v47 = v22;
      v29 = (_OWORD *)((char *)v22 + v28);
      v30 = (_OWORD *)((char *)v23 + v28);
      v31 = type metadata accessor for Signature(0);
      v44 = *(_QWORD *)(v31 - 8);
      v32 = v31;
      v45 = v24;
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v44 + 48))(v30, 1))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        v12 = v50;
      }
      else
      {
        v34 = v30[1];
        *v29 = *v30;
        v29[1] = v34;
        *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
        *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
        v35 = *(int *)(v32 + 28);
        v36 = (char *)v30 + v35;
        v12 = v50;
        v50((uint64_t)v29 + v35, (uint64_t)v36, v11);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v29, 0, 1, v32);
      }
      v13 = v48;
      v27 = v49;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v45);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v15, 0, 1, v17);
  }
  v37 = *(int *)(v13 + 24);
  v38 = (char *)(v9 + v37);
  v39 = (char *)(v10 + v37);
  v40 = type metadata accessor for LogConsistency(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v38, (uint64_t)v39, v11);
    *(_QWORD *)&v38[*(int *)(v40 + 20)] = *(_QWORD *)&v39[*(int *)(v40 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

uint64_t sub_238015D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  size_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  v88 = *(_QWORD *)(v11 - 8);
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 40);
  v87(v9, v10, v11);
  v89 = type metadata accessor for ATLogProofs(0);
  v12 = *(int *)(v89 + 20);
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for LogEntry(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(v13 + 24);
      v34 = *(_QWORD *)(v13 + 32);
      *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
      sub_237FFBAB0(v33, v34);
      v35 = *(_QWORD *)(v14 + 48);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 48) = v35;
      *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
      v87(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v11);
      v36 = *(int *)(v15 + 40);
      v13 += v36;
      v14 += v36;
      v37 = type metadata accessor for SignedObject(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v13, 1, v37);
      v41 = v39(v14, 1, v37);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v13 = *(_OWORD *)v14;
          v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32);
          v86(v13 + *(int *)(v37 + 20), v14 + *(int *)(v37 + 20), v11);
          v42 = *(int *)(v37 + 24);
          v43 = (_OWORD *)(v13 + v42);
          v44 = (_OWORD *)(v14 + v42);
          v45 = type metadata accessor for Signature(0);
          v84 = *(_QWORD *)(v45 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v84 + 48))(v44, 1, v45))
          {
            v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
          }
          else
          {
            v74 = v44[1];
            *v43 = *v44;
            v43[1] = v74;
            *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
            *((_BYTE *)v43 + 40) = *((_BYTE *)v44 + 40);
            v86((uint64_t)v43 + *(int *)(v45 + 28), (uint64_t)v44 + *(int *)(v45 + 28), v11);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v43, 0, 1, v45);
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v13, 0, 1, v37);
          goto LABEL_10;
        }
      }
      else
      {
        if (!v41)
        {
          v63 = *(_QWORD *)v13;
          v64 = *(_QWORD *)(v13 + 8);
          *(_OWORD *)v13 = *(_OWORD *)v14;
          sub_237FFBAB0(v63, v64);
          v87(v13 + *(int *)(v37 + 20), v14 + *(int *)(v37 + 20), v11);
          v65 = *(int *)(v37 + 24);
          v66 = v13 + v65;
          v67 = (_OWORD *)(v14 + v65);
          v68 = type metadata accessor for Signature(0);
          v69 = *(_QWORD *)(v68 - 8);
          v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
          v71 = v70(v66, 1, v68);
          v72 = v70((uint64_t)v67, 1, v68);
          if (v71)
          {
            if (!v72)
            {
              v73 = v67[1];
              *(_OWORD *)v66 = *v67;
              *(_OWORD *)(v66 + 16) = v73;
              *(_QWORD *)(v66 + 32) = *((_QWORD *)v67 + 4);
              *(_BYTE *)(v66 + 40) = *((_BYTE *)v67 + 40);
              (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v66 + *(int *)(v68 + 28), (char *)v67 + *(int *)(v68 + 28), v11);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v72)
            {
              v75 = *(_QWORD *)v66;
              v76 = *(_QWORD *)(v66 + 8);
              *(_OWORD *)v66 = *v67;
              sub_237FFBAB0(v75, v76);
              v77 = *(_QWORD *)(v66 + 16);
              v78 = *(_QWORD *)(v66 + 24);
              *(_OWORD *)(v66 + 16) = v67[1];
              sub_237FFBAB0(v77, v78);
              *(_QWORD *)(v66 + 32) = *((_QWORD *)v67 + 4);
              *(_BYTE *)(v66 + 40) = *((_BYTE *)v67 + 40);
              v87(v66 + *(int *)(v68 + 28), (uint64_t)v67 + *(int *)(v68 + 28), v11);
              goto LABEL_10;
            }
            sub_237FFD540(v66, type metadata accessor for Signature);
          }
          v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
          v31 = (void *)v66;
          v32 = v67;
LABEL_9:
          memcpy(v31, v32, v30);
LABEL_10:
          v28 = v89;
          goto LABEL_23;
        }
        sub_237FFD540(v13, type metadata accessor for SignedObject);
      }
      v29 = &qword_2568C5438;
LABEL_8:
      v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v29) - 8) + 64);
      v31 = (void *)v13;
      v32 = (const void *)v14;
      goto LABEL_9;
    }
    sub_237FFD540(v13, type metadata accessor for LogEntry);
LABEL_7:
    v29 = &qword_2568C5440;
    goto LABEL_8;
  }
  if (v19)
    goto LABEL_7;
  v85 = v10;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
  v20 = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v13 + 48) = v20;
  *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32);
  v83(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v11);
  v21 = *(int *)(v15 + 40);
  v22 = (_OWORD *)(v13 + v21);
  v23 = (_OWORD *)(v14 + v21);
  v24 = type metadata accessor for SignedObject(0);
  v25 = v11;
  v26 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    v28 = v89;
    v11 = v25;
    v10 = v85;
  }
  else
  {
    v82 = v26;
    *v22 = *v23;
    v83((uint64_t)v22 + *(int *)(v24 + 20), (uint64_t)v23 + *(int *)(v24 + 20), v25);
    v47 = *(int *)(v24 + 24);
    v81 = v22;
    v48 = (_OWORD *)((char *)v22 + v47);
    v49 = (_OWORD *)((char *)v23 + v47);
    v50 = type metadata accessor for Signature(0);
    v79 = *(_QWORD *)(v50 - 8);
    v80 = v50;
    v11 = v25;
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v79 + 48))(v49, 1))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v52 = v49[1];
      *v48 = *v49;
      v48[1] = v52;
      *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
      *((_BYTE *)v48 + 40) = *((_BYTE *)v49 + 40);
      v83((uint64_t)v48 + *(int *)(v80 + 28), (uint64_t)v49 + *(int *)(v80 + 28), v25);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v48, 0, 1, v80);
    }
    v10 = v85;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v81, 0, 1, v24);
    v28 = v89;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_23:
  v53 = *(int *)(v28 + 24);
  v54 = (char *)(v9 + v53);
  v55 = (char *)(v10 + v53);
  v56 = type metadata accessor for LogConsistency(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      v87((uint64_t)v54, (uint64_t)v55, v11);
      *(_QWORD *)&v54[*(int *)(v56 + 20)] = *(_QWORD *)&v55[*(int *)(v56 + 20)];
      swift_release();
      return a1;
    }
    sub_237FFD540((uint64_t)v54, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v60)
  {
LABEL_28:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v54, v55, v11);
  *(_QWORD *)&v54[*(int *)(v56 + 20)] = *(_QWORD *)&v55[*(int *)(v56 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t sub_238016458()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238016464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Release();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for TransparencyLogProofs();
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_2380164D8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380164E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Release();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for TransparencyLogProofs();
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_238016560()
{
  JUMPOUT(0x23B82B770);
}

uint64_t sub_238016570(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id DefaultAssetProvider.apTicket.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_2380BD2C8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedDataAccessor);
  v14[0] = 0;
  v6 = objc_msgSend(v5, sel_copyPathForPersonalizedData_error_, 2, v14);

  v7 = v14[0];
  if (v6)
  {
    sub_2380BDD00();
    v8 = v7;

    sub_2380BD28C();
    swift_bridgeObjectRelease();
    v9 = sub_2380BD2E0();
    if (!v0)
    {
      v6 = (id)v9;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return v6;
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v10 = v0;
  }
  else
  {
    v11 = v14[0];
    v10 = sub_2380BD274();

    swift_willThrow();
  }
  sub_238016780();
  swift_allocError();
  *(_QWORD *)v12 = v10;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 1;
  swift_willThrow();
  return v6;
}

unint64_t sub_238016780()
{
  unint64_t result;

  result = qword_2568C5D90;
  if (!qword_2568C5D90)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for DefaultAssetProvider.Error, &type metadata for DefaultAssetProvider.Error);
    atomic_store(result, (unint64_t *)&qword_2568C5D90);
  }
  return result;
}

uint64_t DefaultAssetProvider.provisioningCertificateChain.getter()
{
  uint64_t v0;
  __CFString *v1;
  __CFString *v2;
  CFPropertyListRef v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = (__CFString *)sub_2380BDCF4();
  v2 = (__CFString *)sub_2380BDCF4();
  v3 = CFPreferencesCopyAppValue(v1, v2);

  if (v3)
  {
    swift_unknownObjectRetain();
    if (swift_dynamicCast()
      && (v0 = v10, v4 = sub_2380BD304(), v6 = v5, swift_bridgeObjectRelease(), v6 >> 60 != 15))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5D98);
      v0 = swift_allocObject();
      *(_OWORD *)(v0 + 16) = xmmword_2380BEAC0;
      *(_QWORD *)(v0 + 32) = v4;
      *(_QWORD *)(v0 + 40) = v6;
      swift_unknownObjectRelease();
    }
    else
    {
      sub_238016780();
      swift_allocError();
      *(_OWORD *)v7 = xmmword_2380BFF20;
      *(_BYTE *)(v7 + 16) = 2;
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_238016780();
    swift_allocError();
    *(_OWORD *)v8 = xmmword_2380BFF30;
    *(_BYTE *)(v8 + 16) = 2;
    swift_willThrow();
  }
  return v0;
}

uint64_t DefaultAssetProvider.sealedHashEntries.getter()
{
  uint64_t v0;
  BOOL v1;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (MEMORY[0x24BDE8390])
    v1 = MEMORY[0x24BDE8380] == 0;
  else
    v1 = 1;
  if (v1 || MEMORY[0x24BDE8398] == 0 || MEMORY[0x24BDE8388] == 0)
  {
    sub_238016780();
    swift_allocError();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_2380BD514();
    v4 = (void *)sub_2380BD508();
    v5 = sub_2380BD4FC();
    v0 = sub_238016FC8(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_238016A54@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t *v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  __int128 v62;
  __int128 v63;
  char v64;
  __int128 v65;
  _QWORD *v66;

  v3 = v2;
  v6 = sub_2380BDD48();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (_QWORD *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = *a1;
  v10 = sub_2380BD538();
  v12 = v10 == 0x363532616873 && v11 == 0xE600000000000000;
  if (v12 || (v13 = v10, v14 = v11, (sub_2380BE1B0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v59 = sub_2380BD988();
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
    v16 = (unint64_t *)&unk_2568C5DA8;
    v17 = MEMORY[0x24BDC6AE8];
  }
  else
  {
    if (v13 == 0x343833616873 && v14 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = sub_2380BE1B0();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        v20 = sub_2380BD538();
        v22 = v21;
        sub_238016780();
        swift_allocError();
        *(_QWORD *)v23 = v20;
        *(_QWORD *)(v23 + 8) = v22;
        *(_BYTE *)(v23 + 16) = 0;
        return swift_willThrow();
      }
    }
    v59 = sub_2380BD9AC();
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20];
    v16 = &qword_2568C5898;
    v17 = MEMORY[0x24BDC6B10];
  }
  *(_QWORD *)&v60 = sub_238001820(v16, v15, v17);
  v25 = sub_2380BD52C();
  if (v25 >> 62)
    v26 = sub_2380BE0E4();
  else
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  v56 = a2;
  v57 = v2;
  v54 = v9;
  v55 = v7;
  if (v26)
  {
    v66 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v27 = &v66;
    sub_238075D18(0, v26 & ~(v26 >> 63), 0);
    if (v26 < 0)
    {
      __break(1u);
      goto LABEL_37;
    }
    v53 = v6;
    v28 = 0;
    v9 = v66;
    v29 = v25 & 0xC000000000000001;
    v30 = v25;
    do
    {
      if (v29)
        v31 = (id)MEMORY[0x23B82AEF4](v28, v25);
      else
        v31 = *(id *)(v25 + 8 * v28 + 32);
      v32 = v31;
      v33 = sub_2380BD544();
      v61 = 2;
      SEP.SealedHash.Entry.init<A>(data:flags:algorithm:)(v33, v34, &v61, v59, v60, (uint64_t)&v62);

      v35 = v62;
      v36 = v63;
      v37 = v64;
      v38 = v65;
      v66 = v9;
      v40 = v9[2];
      v39 = v9[3];
      if (v40 >= v39 >> 1)
      {
        v52 = v62;
        v51 = v63;
        v50 = v65;
        sub_238075D18(v39 > 1, v40 + 1, 1);
        v38 = v50;
        v36 = v51;
        v35 = v52;
        v9 = v66;
      }
      ++v28;
      v9[2] = v40 + 1;
      v41 = &v9[7 * v40];
      *((_OWORD *)v41 + 2) = v35;
      *((_OWORD *)v41 + 3) = v36;
      *((_BYTE *)v41 + 64) = v37;
      *(_OWORD *)(v41 + 9) = v38;
      v25 = v30;
    }
    while (v26 != v28);
    swift_bridgeObjectRelease();
    v6 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  result = sub_2380BD520();
  if (!v42)
  {
LABEL_34:
    *v56 = v9;
    return result;
  }
  v43 = v54;
  sub_2380BDD3C();
  v44 = sub_2380BDD0C();
  v46 = v45;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v55 + 8))(v43, v6);
  if (v46 >> 60 != 15)
  {
    LOBYTE(v66) = 4;
    SEP.SealedHash.Entry.init<A>(digest:flags:algorithm:)(v44, v46, (char *)&v66, v59, v60, (uint64_t)&v62);
    v25 = *((_QWORD *)&v62 + 1);
    v27 = (_QWORD *)v62;
    a2 = (_QWORD *)*((_QWORD *)&v63 + 1);
    v3 = v63;
    LOBYTE(v6) = v64;
    v60 = v65;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
LABEL_31:
      v48 = v9[2];
      v47 = v9[3];
      if (v48 >= v47 >> 1)
      {
        result = (uint64_t)sub_238026A00((_QWORD *)(v47 > 1), v48 + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v9[2] = v48 + 1;
      v49 = &v9[7 * v48];
      v49[4] = v27;
      v49[5] = v25;
      v49[6] = v3;
      v49[7] = a2;
      *((_BYTE *)v49 + 64) = v6;
      *(_OWORD *)(v49 + 9) = v60;
      goto LABEL_34;
    }
LABEL_37:
    result = (uint64_t)sub_238026A00(0, v9[2] + 1, 1, v9);
    v9 = (_QWORD *)result;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

id sub_238016EC8()
{
  return DefaultAssetProvider.apTicket.getter();
}

uint64_t sub_238016EDC()
{
  return DefaultAssetProvider.provisioningCertificateChain.getter();
}

uint64_t sub_238016EF0()
{
  uint64_t v0;
  BOOL v1;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (MEMORY[0x24BDE8390])
    v1 = MEMORY[0x24BDE8380] == 0;
  else
    v1 = 1;
  if (v1 || MEMORY[0x24BDE8398] == 0 || MEMORY[0x24BDE8388] == 0)
  {
    sub_238016780();
    swift_allocError();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_2380BD514();
    v4 = (void *)sub_2380BD508();
    v5 = sub_2380BD4FC();
    v0 = sub_238016FC8(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_238016FC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t i;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;

  v2 = sub_2380BD448();
  v40 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v37 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v36 = (char *)&v32 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DA0);
  result = sub_2380BE0F0();
  v7 = result;
  v8 = 0;
  v38 = result;
  v39 = a1;
  v11 = *(_QWORD *)(a1 + 64);
  v10 = a1 + 64;
  v9 = v11;
  v12 = 1 << *(_BYTE *)(v10 - 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v9;
  v33 = v10;
  v34 = (unint64_t)(v12 + 63) >> 6;
  v35 = result + 64;
  v16 = v36;
  v15 = v37;
  if ((v13 & v9) == 0)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v41 = v8;
  for (i = v17 | (v8 << 6); ; i = __clz(__rbit64(v21)) + (v20 << 6))
  {
    v24 = v39;
    v23 = v40;
    v25 = *(_QWORD *)(v40 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v16, *(_QWORD *)(v39 + 48) + v25, v2);
    v26 = *(void **)(*(_QWORD *)(v24 + 56) + 8 * i);
    v44 = v26;
    v27 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v27(v15, v16, v2);
    v28 = v26;
    v29 = v42;
    sub_238016A54((uint64_t *)&v44, &v43);
    v42 = v29;
    if (v29)
    {
      v7 = v38;
      swift_release();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v2);

      return v7;
    }

    *(_QWORD *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v7 = v38;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(_QWORD *)(v38 + 48) + v25, v15, v2);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * i) = v43;
    v30 = *(_QWORD *)(v7 + 16);
    v19 = __OFADD__(v30, 1);
    v31 = v30 + 1;
    if (v19)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(_QWORD *)(v7 + 16) = v31;
    v8 = v41;
    if (v14)
      goto LABEL_4;
LABEL_5:
    v19 = __OFADD__(v8, 1);
    v20 = v8 + 1;
    if (v19)
      goto LABEL_27;
    if (v20 >= v34)
      return v7;
    v21 = *(_QWORD *)(v33 + 8 * v20);
    if (!v21)
      break;
LABEL_15:
    v14 = (v21 - 1) & v21;
    v41 = v20;
  }
  v22 = v20 + 1;
  if (v20 + 1 >= v34)
    return v7;
  v21 = *(_QWORD *)(v33 + 8 * v22);
  if (v21)
    goto LABEL_14;
  v22 = v20 + 2;
  if (v20 + 2 >= v34)
    return v7;
  v21 = *(_QWORD *)(v33 + 8 * v22);
  if (v21)
    goto LABEL_14;
  v22 = v20 + 3;
  if (v20 + 3 >= v34)
    return v7;
  v21 = *(_QWORD *)(v33 + 8 * v22);
  if (v21)
  {
LABEL_14:
    v20 = v22;
    goto LABEL_15;
  }
  while (1)
  {
    v20 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v20 >= v34)
      return v7;
    v21 = *(_QWORD *)(v33 + 8 * v20);
    ++v22;
    if (v21)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of AttestationAssetProvider.apTicket.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AttestationAssetProvider.provisioningCertificateChain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AttestationAssetProvider.sealedHashEntries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for DefaultAssetProvider()
{
  return &type metadata for DefaultAssetProvider;
}

id sub_238017308(id result, id a2, char a3)
{
  if (a3 == 1)
    return result;
  if (!a3)
    return (id)swift_bridgeObjectRetain();
  return result;
}

void destroy for DefaultAssetProvider.Error(uint64_t a1)
{
  sub_238017338(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_238017338(void *a1, id a2, char a3)
{
  if (a3 == 1)
  {

  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t _s16CloudAttestation20DefaultAssetProviderV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_238017308(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DefaultAssetProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_238017308(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_238017338(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DefaultAssetProvider.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_238017338(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultAssetProvider.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultAssetProvider.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_2380174D8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_2380174F0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DefaultAssetProvider.Error()
{
  return &type metadata for DefaultAssetProvider.Error;
}

uint64_t sub_238017518()
{
  __CFString *v0;
  __CFString *v1;
  unsigned __int8 v3;

  if (os_variant_allows_internal_security_policies()
    && (v0 = (__CFString *)sub_2380BDCF4(),
        v1 = (__CFString *)sub_2380BDCF4(),
        CFPreferencesCopyAppValue(v0, v1),
        v0,
        v1,
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542C9C20),
        swift_dynamicCast()))
  {
    return v3;
  }
  else
  {
    return 2;
  }
}

uint64_t NodeValidator.transparencyVerifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1 + 8, a1);
}

uint64_t sub_2380175E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t NodeValidator.transparencyVerifier.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23800A4E4(a1, v3);
}

uint64_t (*NodeValidator.transparencyVerifier.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.validity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t NodeValidator.validity.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*NodeValidator.validity.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.roots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeValidator.roots.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*NodeValidator.roots.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.clock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NodeValidator();
  return sub_2380051FC(v1 + *(int *)(v3 + 32), a1, &qword_2542C9C00);
}

uint64_t type metadata accessor for NodeValidator()
{
  uint64_t result;

  result = qword_2542C9B98;
  if (!qword_2542C9B98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t NodeValidator.clock.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NodeValidator() + 32);
  return sub_23801776C(a1, v3);
}

uint64_t sub_23801776C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*NodeValidator.clock.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.transparencyProofValidation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 36));
}

uint64_t NodeValidator.transparencyProofValidation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NodeValidator.transparencyProofValidation.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.strictCertificateValidation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 40));
}

uint64_t NodeValidator.strictCertificateValidation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*NodeValidator.strictCertificateValidation.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.requireProdTrustAnchors.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 44));
}

uint64_t NodeValidator.requireProdTrustAnchors.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireProdTrustAnchors.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.requireRestrictedExecutionMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 48));
}

uint64_t NodeValidator.requireRestrictedExecutionMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireRestrictedExecutionMode.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.requireEphemeralDataMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 52));
}

uint64_t NodeValidator.requireEphemeralDataMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireEphemeralDataMode.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.restrictDeveloperMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 56));
}

uint64_t NodeValidator.restrictDeveloperMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*NodeValidator.restrictDeveloperMode.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.requireProdFusing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 60));
}

uint64_t NodeValidator.requireProdFusing.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireProdFusing.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.requireLockedCryptexes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 64));
}

uint64_t NodeValidator.requireLockedCryptexes.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireLockedCryptexes.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.ensembleTopologyValidation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 68));
}

uint64_t NodeValidator.ensembleTopologyValidation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*NodeValidator.ensembleTopologyValidation.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t NodeValidator.allowExpired.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 72));
}

uint64_t NodeValidator.allowExpired.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*NodeValidator.allowExpired.modify())()
{
  type metadata accessor for NodeValidator();
  return nullsub_1;
}

uint64_t sub_238017C64()
{
  char v0;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_238017518();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  byte_2568C5DB0 = v0 & 1;
  return result;
}

uint64_t static NodeValidator.cacheProofs.getter()
{
  if (qword_2542C9C18 != -1)
    swift_once();
  swift_beginAccess();
  return byte_2568C5DB0;
}

uint64_t static NodeValidator.cacheProofs.setter(char a1)
{
  uint64_t result;

  if (qword_2542C9C18 != -1)
    swift_once();
  result = swift_beginAccess();
  byte_2568C5DB0 = a1 & 1;
  return result;
}

uint64_t (*static NodeValidator.cacheProofs.modify())()
{
  if (qword_2542C9C18 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_238017E20()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9B30);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9B30);
  return sub_2380BD7FC();
}

uint64_t NodeValidator.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v21[15];
  char v22;
  char v23;

  v2 = type metadata accessor for NodeValidator();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = &v21[-v7];
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = &v21[-v10];
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 64) = MEMORY[0x24BEE4AF8];
  v13 = a1 + *(int *)(v9 + 32);
  v14 = sub_2380BD418();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v16 = *(int *)(v2 + 76);
  *(_QWORD *)(a1 + v16) = 0;
  *((_QWORD *)v8 + 8) = v12;
  v17 = (uint64_t)&v8[*(int *)(v2 + 32)];
  v15(v17, 1, 1, v14);
  v18 = *(int *)(v2 + 76);
  *(_QWORD *)&v8[v18] = 0;
  swift_beginAccess();
  v19 = byte_2542C9B90;
  if (byte_2542C9B90 == 9)
  {
    static Environment.default.getter(&v23);
    v19 = v23;
  }
  v22 = v19;
  NodeValidator.init(validity:environment:)(0xC0DDD92E56000000, 4683, (unsigned __int8 *)&v22, (uint64_t)v5);
  sub_238005240(v17, &qword_2542C9C00);

  sub_238001DE4((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
  sub_238001DE4((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
  swift_bridgeObjectRelease();
  sub_238005240(v13, &qword_2542C9C00);

  return sub_238001DE4((uint64_t)v11, a1, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
}

uint64_t NodeValidator.init(validity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  char v16;
  char v17;

  v6 = type metadata accessor for NodeValidator();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a3 + 64) = MEMORY[0x24BEE4AF8];
  v10 = a3 + *(int *)(v7 + 32);
  v11 = sub_2380BD418();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = *(int *)(v6 + 76);
  *(_QWORD *)(a3 + v12) = 0;
  swift_beginAccess();
  v13 = byte_2542C9B90;
  if (byte_2542C9B90 == 9)
  {
    static Environment.default.getter(&v17);
    v13 = v17;
  }
  v16 = v13;
  NodeValidator.init(validity:environment:)(a1, a2, (unsigned __int8 *)&v16, (uint64_t)v9);
  sub_238005240(v10, &qword_2542C9C00);

  return sub_238001DE4((uint64_t)v9, a3, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
}

uint64_t NodeValidator.init(environment:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 v14;

  v4 = type metadata accessor for NodeValidator();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  *(_QWORD *)(a2 + 64) = MEMORY[0x24BEE4AF8];
  v9 = a2 + *(int *)(v5 + 32);
  v10 = sub_2380BD418();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = *(int *)(v4 + 76);
  *(_QWORD *)(a2 + v11) = 0;
  v14 = v8;
  NodeValidator.init(validity:environment:)(0xC0DDD92E56000000, 4683, &v14, (uint64_t)v7);
  sub_238005240(v9, &qword_2542C9C00);

  return sub_238001DE4((uint64_t)v7, a2, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
}

uint64_t NodeValidator.init(validity:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  char v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  char v26;
  BOOL v27;
  char v28;
  BOOL v29;
  char v30;
  char v31;
  unsigned int v32;
  char v33;
  uint64_t result;
  unint64_t v35;
  __int128 v36;
  ValueMetadata *v37;
  _UNKNOWN **v38;

  v7 = *a3;
  *(_QWORD *)(a4 + 64) = MEMORY[0x24BEE4AF8];
  v8 = (int *)type metadata accessor for NodeValidator();
  v9 = a4 + v8[8];
  v10 = sub_2380BD418();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)(a4 + v8[19]) = 0;
  *(_QWORD *)(a4 + 48) = a1;
  *(_QWORD *)(a4 + 56) = a2;
  if (qword_2542C9C18 != -1)
    swift_once();
  swift_beginAccess();
  if (byte_2568C5DB0 == 1)
  {
    if (MEMORY[0x24BEBA830])
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBA830]), sel_initWithApplication_, 0);
    else
      v11 = 0;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DB8);
    v37 = (ValueMetadata *)v13;
    v38 = &protocol witness table for CachingTransparencyVerifier<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
    sub_2380BD7FC();
    *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v13 + 36)) = (uint64_t)v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DC0);
    v15 = swift_allocObject();
    swift_defaultActor_initialize();
    v35 = sub_23800BC98(MEMORY[0x24BEE4AF8]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DC8);
    sub_2380BDC58();
    *(_QWORD *)(v15 + 112) = v35;
    *(_QWORD *)(v15 + 120) = 4;
    *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v13 + 40)) = v15;
  }
  else
  {
    v37 = &type metadata for SWTransparencyVerifier;
    v38 = &protocol witness table for SWTransparencyVerifier;
    if (MEMORY[0x24BEBA830])
      v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBA830]), sel_initWithApplication_, 0);
    else
      v12 = 0;
    *(_QWORD *)&v36 = v12;
  }
  sub_23800A4E4(&v36, a4 + 8);
  *(_BYTE *)a4 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16 == 2)
    v17 = (0x78u >> v7) & 1;
  else
    LOBYTE(v17) = v16 & 1;
  *(_BYTE *)(a4 + v8[9]) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18 == 2)
    v19 = (0x78u >> v7) & 1;
  else
    LOBYTE(v19) = v18 & 1;
  *(_BYTE *)(a4 + v8[10]) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20 == 2)
    v21 = (0x60u >> v7) & 1;
  else
    LOBYTE(v21) = v20 & 1;
  *(_BYTE *)(a4 + v8[11]) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22 == 2)
    v23 = (0x78u >> v7) & 1;
  else
    LOBYTE(v23) = v22 & 1;
  *(_BYTE *)(a4 + v8[12]) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24 == 2)
    v25 = (0x78u >> v7) & 1;
  else
    LOBYTE(v25) = v24 & 1;
  *(_BYTE *)(a4 + v8[13]) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26 == 2)
    v27 = v7 == 6;
  else
    v27 = v26;
  *(_BYTE *)(a4 + v8[14]) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28 == 2)
    v29 = v7 == 6;
  else
    v29 = v28;
  *(_BYTE *)(a4 + v8[15]) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a4 + v8[16]) = v30 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v31 == 2)
    v32 = (0x78u >> v7) & 1;
  else
    LOBYTE(v32) = v31 & 1;
  *(_BYTE *)(a4 + v8[17]) = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33 = sub_238017518();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(a4 + v8[18]) = v33 & 1;
  return result;
}

uint64_t sub_238018910()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 44)) == 1)
  {
    if (qword_2568C5090 != -1)
      swift_once();
    return swift_bridgeObjectRetain();
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 64);
    if (qword_2568C5090 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    v3 = swift_bridgeObjectRetain();
    sub_23802E770(v3);
    if (qword_2568C5088 != -1)
      swift_once();
    v4 = swift_bridgeObjectRetain();
    sub_23802E770(v4);
    return v2;
  }
}

uint64_t NodeValidator.defaultPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char v64;
  uint64_t v65;
  char v66;
  _QWORD v67[2];
  uint64_t v68;
  _BYTE v69[3];
  __int16 v70;
  char v71;
  int v72;
  __int16 v73;
  _BYTE v74[48];
  uint64_t v75;
  char v76;
  __int128 v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _QWORD v82[12];
  _BYTE v83[56];

  v2 = v1;
  v60 = a1;
  v57 = type metadata accessor for KeyOptionsPolicy(0);
  v3 = MEMORY[0x24BDAC7A8](v57);
  v61 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v58 = (char *)&v53 - v5;
  v6 = type metadata accessor for SecureConfigPolicy(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v59 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v62 = (uint64_t)&v53 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for X509Policy();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v53 - v17;
  v19 = (int *)type metadata accessor for NodeValidator();
  v55 = v19[10];
  v20 = v1[v55];
  v21 = sub_238018910();
  sub_2380051FC((uint64_t)&v2[v19[8]], (uint64_t)v12, &qword_2542C9C00);
  v22 = (uint64_t)&v16[*(int *)(v13 + 24)];
  v23 = sub_2380BD418();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = (uint64_t *)&v16[*(int *)(v13 + 28)];
  *v24 = 0;
  v24[1] = 0;
  *v16 = v20;
  *((_QWORD *)v16 + 1) = v21;
  sub_23801776C((uint64_t)v12, v22);
  sub_23801B358(*v24);
  *v24 = 0;
  v24[1] = 0;
  v63 = v16;
  v56 = v18;
  sub_238001DE4((uint64_t)v16, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v25 = v19[19];
  v26 = *(void **)&v2[v25];
  if (v26)
  {
    sub_23801B63C(*(id *)&v2[v25]);
    sub_23801B64C(0);
    v27 = v26;
    v28 = (uint64_t)v26;
  }
  else
  {
    if ((v2[v55] & 1) != 0)
    {
      v28 = 0;
    }
    else
    {
      if (qword_2568C50A8 != -1)
        swift_once();
      v29 = sub_2380BD808();
      __swift_project_value_buffer(v29, (uint64_t)qword_2568C8C58);
      v30 = sub_2380BD7F0();
      v31 = sub_2380BDF64();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_237FF6000, v30, v31, "Using Insecure SEPAttestationPolicy", v32, 2u);
        MEMORY[0x23B82B830](v32, -1, -1);
      }

      v28 = 1;
    }
    sub_23801B63C((id)v28);
    sub_23801B64C(0);
  }
  LODWORD(v55) = v26 == 0;
  sub_23801B65C((id)v28);
  sub_23801B358(0);
  v54 = v2[v19[16]];
  v33 = type metadata accessor for SEP.SealedHash(0);
  v34 = v62;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v62, 1, 1, v33);
  sub_2380175E0((uint64_t)(v2 + 8), (uint64_t)v83);
  v83[40] = v2[v19[9]];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DD0);
  sub_2380BD49C();
  v35 = (uint64_t (*)(uint64_t))MEMORY[0x24BE07858];
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_2380BEAF0;
  sub_2380BD484();
  sub_2380BD478();
  v82[0] = v36;
  sub_238001820(&qword_2568C5DD8, v35, MEMORY[0x24BE07870]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DE0);
  sub_23800A568((unint64_t *)&qword_2568C5DE8, &qword_2568C5DE0, MEMORY[0x24BEE12C8]);
  v37 = (uint64_t)v58;
  sub_2380BE00C();
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  v38 = v37 + *(int *)(v57 + 20);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v40 = v2[v19[12]];
  v41 = v2[v19[13]];
  v42 = (uint64_t)*(&off_2509DA3C8 + *v2);
  if (v2[v19[15]])
    v43 = 33816833;
  else
    v43 = 3;
  if (v2[v19[14]])
    v44 = 0;
  else
    v44 = 2;
  v53 = v44;
  if (v41)
    v45 = 1;
  else
    v45 = 2;
  if (v40)
    v46 = 1;
  else
    v46 = 2;
  LODWORD(v57) = v2[v19[17]];
  v47 = (uint64_t)v56;
  v48 = (uint64_t)v63;
  sub_238013570((uint64_t)v56, (uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v79 = 0;
  v80 = 0;
  v78 = (void *)v28;
  v81 = v55;
  v82[0] = v48;
  v82[1] = &v78;
  v77 = xmmword_2380BF8E0;
  v75 = 0;
  v76 = v54;
  v82[2] = &v77;
  v82[3] = &v75;
  v49 = v34;
  v50 = v59;
  sub_238013570(v49, v59, type metadata accessor for SecureConfigPolicy);
  v82[4] = v50;
  sub_23801B66C((uint64_t)v83, (uint64_t)v74);
  v82[5] = v74;
  v51 = v61;
  sub_238013570(v37, v61, type metadata accessor for KeyOptionsPolicy);
  v73 = 0;
  v72 = v43;
  v82[6] = v51;
  v82[7] = &v72;
  v69[0] = v46;
  v69[1] = v45;
  v69[2] = v53;
  v71 = 0;
  v70 = 2;
  v68 = v42;
  v82[8] = v69;
  v82[9] = &v68;
  *(_DWORD *)((char *)v67 + 7) = 0;
  v67[0] = 0;
  v64 = v57;
  v65 = 0;
  v66 = 0;
  v82[10] = v67;
  v82[11] = &v64;
  sub_23801910C((uint64_t)v82, v60);
  swift_bridgeObjectRetain();
  sub_237FFD540(v37, type metadata accessor for KeyOptionsPolicy);
  sub_23801B6A8((uint64_t)v83);
  sub_237FFD540(v62, type metadata accessor for SecureConfigPolicy);
  sub_237FFD540(v47, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_237FFD540(v51, type metadata accessor for KeyOptionsPolicy);
  sub_23801B6A8((uint64_t)v74);
  sub_237FFD540(v50, type metadata accessor for SecureConfigPolicy);
  swift_bridgeObjectRelease();
  sub_238008CF0(v77, *((unint64_t *)&v77 + 1));
  sub_23801B6DC(v78, v79);
  return sub_237FFD540((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
}

uint64_t sub_23801910C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char *v25;
  char v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[12];

  v38 = a2;
  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E80);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for X509Policy();
  sub_238013570(*(_QWORD *)a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v39[0] = v5;
  v6 = &v5[v3[12]];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(uint64_t **)(a1 + 16);
  v9 = *(void **)v7;
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_QWORD *)(v7 + 16);
  v12 = *(_BYTE *)(v7 + 24);
  *(_QWORD *)v6 = *(_QWORD *)v7;
  *((_QWORD *)v6 + 1) = v10;
  *((_QWORD *)v6 + 2) = v11;
  v6[24] = v12;
  v39[1] = v6;
  v13 = (uint64_t *)&v5[v3[16]];
  v15 = *v8;
  v36 = v8[1];
  v14 = v36;
  *v13 = v15;
  v13[1] = v14;
  v39[2] = v13;
  v16 = &v5[v3[20]];
  v17 = *(uint64_t **)(a1 + 24);
  v37 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v37;
  v16[8] = (char)v17;
  v39[3] = v16;
  type metadata accessor for SecureConfigPolicy(0);
  v18 = (uint64_t)&v5[v3[24]];
  sub_238013570(*(_QWORD *)(a1 + 32), v18, type metadata accessor for SecureConfigPolicy);
  v39[4] = v18;
  v19 = (uint64_t)&v5[v3[28]];
  sub_23801B66C(*(_QWORD *)(a1 + 40), v19);
  v39[5] = v19;
  type metadata accessor for KeyOptionsPolicy(0);
  v20 = (uint64_t)&v5[v3[32]];
  sub_238013570(*(_QWORD *)(a1 + 48), v20, type metadata accessor for KeyOptionsPolicy);
  v39[6] = v20;
  v21 = &v5[v3[36]];
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_WORD *)(v22 + 4);
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *((_WORD *)v21 + 2) = v24;
  v39[7] = v21;
  v25 = &v5[v3[40]];
  LOWORD(v22) = *(_WORD *)v23;
  LOBYTE(v24) = *(_BYTE *)(v23 + 2);
  v26 = *(_BYTE *)(v23 + 5);
  LOWORD(v23) = *(_WORD *)(v23 + 3);
  *(_WORD *)v25 = v22;
  v25[2] = v24;
  *(_WORD *)(v25 + 3) = v23;
  v25[5] = v26;
  v39[8] = v25;
  v27 = &v5[v3[44]];
  v28 = *(uint64_t **)(a1 + 80);
  *(_QWORD *)v27 = **(_QWORD **)(a1 + 72);
  v39[9] = v27;
  v29 = &v5[v3[48]];
  v30 = *v28;
  LOBYTE(v22) = *((_BYTE *)v28 + 8);
  LOBYTE(v24) = *((_BYTE *)v28 + 9);
  LOBYTE(v28) = *((_BYTE *)v28 + 10);
  *(_QWORD *)v29 = v30;
  v29[8] = v22;
  v29[9] = v24;
  v29[10] = (char)v28;
  v39[10] = v29;
  v31 = &v5[v3[52]];
  v32 = *(_QWORD *)(a1 + 88);
  LOBYTE(v28) = *(_BYTE *)v32;
  v33 = *(_QWORD *)(v32 + 8);
  LOBYTE(v32) = *(_BYTE *)(v32 + 16);
  *v31 = (char)v28;
  *((_QWORD *)v31 + 1) = v33;
  v31[16] = v32;
  v39[11] = v31;
  sub_23801B368((uint64_t)v39, v38);
  sub_23801CA78(v9, v10);
  sub_238009148(v15, v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_238019380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  __int16 v32;
  char *v33;
  uint64_t v35;
  _QWORD v36[11];

  v35 = a2;
  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E70);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v36[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for X509Policy();
  sub_238013570(*(_QWORD *)a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v36[0] = v5;
  v6 = (uint64_t)&v5[v3[12]];
  sub_2380051FC(*(_QWORD *)(a1 + 8), v6, &qword_2568C5E78);
  v36[1] = v6;
  v7 = &v5[v3[16]];
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(uint64_t **)(a1 + 24);
  v11 = *(void **)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v12 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *((_QWORD *)v7 + 1) = v10;
  *((_QWORD *)v7 + 2) = v12;
  v36[2] = v7;
  v13 = (uint64_t *)&v5[v3[20]];
  v15 = *v9;
  v14 = v9[1];
  *v13 = *v9;
  v13[1] = v14;
  v36[3] = v13;
  v16 = &v5[v3[24]];
  v17 = *(uint64_t **)(a1 + 32);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v18;
  v16[8] = (char)v17;
  v36[4] = v16;
  type metadata accessor for SecureConfigPolicy(0);
  v19 = (uint64_t)&v5[v3[28]];
  sub_238013570(*(_QWORD *)(a1 + 40), v19, type metadata accessor for SecureConfigPolicy);
  v36[5] = v19;
  type metadata accessor for KeyOptionsPolicy(0);
  v20 = (uint64_t)&v5[v3[32]];
  sub_238013570(*(_QWORD *)(a1 + 48), v20, type metadata accessor for KeyOptionsPolicy);
  v36[6] = v20;
  type metadata accessor for SoftwareReleasePolicy();
  v21 = (uint64_t)&v5[v3[36]];
  sub_238013570(*(_QWORD *)(a1 + 56), v21, (uint64_t (*)(_QWORD))type metadata accessor for SoftwareReleasePolicy);
  v36[7] = v21;
  v22 = &v5[v3[40]];
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_BYTE *)v23;
  v26 = *(_BYTE *)(v23 + 1);
  v27 = *(_BYTE *)(v23 + 2);
  v28 = *(_QWORD *)(v23 + 12);
  v29 = *(_QWORD *)(v23 + 4);
  LODWORD(v23) = *(_DWORD *)(v23 + 20);
  *v22 = v25;
  v22[1] = v26;
  v22[2] = v27;
  *(_QWORD *)(v22 + 4) = v29;
  *(_QWORD *)(v22 + 12) = v28;
  *((_DWORD *)v22 + 5) = v23;
  v36[8] = v22;
  v30 = &v5[v3[44]];
  LOWORD(v23) = *(_WORD *)v24;
  v31 = *(_BYTE *)(v24 + 2);
  v32 = *(_WORD *)(v24 + 3);
  LOBYTE(v24) = *(_BYTE *)(v24 + 5);
  *(_WORD *)v30 = v23;
  v30[2] = v31;
  v30[5] = v24;
  *(_WORD *)(v30 + 3) = v32;
  v36[9] = v30;
  v33 = &v5[v3[48]];
  *(_QWORD *)v33 = **(_QWORD **)(a1 + 80);
  v36[10] = v33;
  sub_23801B4E4((uint64_t)v36, v35);
  sub_23801B63C(v11);
  sub_23801B64C(v10);
  sub_238009148(v15, v14);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t NodeValidator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9[29] = v15;
  v9[30] = v8;
  v9[27] = a7;
  v9[28] = a8;
  v9[25] = a5;
  v9[26] = a6;
  v9[23] = a3;
  v9[24] = a4;
  v9[21] = a1;
  v9[22] = a2;
  type metadata accessor for AttestationBundle(0);
  v9[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  v9[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
  v9[33] = swift_task_alloc();
  v10 = sub_2380BD598();
  v9[34] = v10;
  v9[35] = *(_QWORD *)(v10 - 8);
  v9[36] = swift_task_alloc();
  v11 = sub_2380BD418();
  v9[37] = v11;
  v9[38] = *(_QWORD *)(v11 - 8);
  v9[39] = swift_task_alloc();
  v9[40] = swift_task_alloc();
  v9[41] = swift_task_alloc();
  v9[42] = swift_task_alloc();
  v9[43] = swift_task_alloc();
  v12 = sub_2380BD844();
  v9[44] = v12;
  v9[45] = *(_QWORD *)(v12 - 8);
  v9[46] = swift_task_alloc();
  v9[47] = type metadata accessor for NodeValidator();
  v9[48] = swift_task_alloc();
  v13 = sub_2380BD808();
  v9[49] = v13;
  v9[50] = *(_QWORD *)(v13 - 8);
  v9[51] = swift_task_alloc();
  v9[52] = swift_task_alloc();
  v9[53] = swift_task_alloc();
  v9[54] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2380197D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;

  if (qword_2568C4E68 != -1)
    swift_once();
  v1 = v0[54];
  v2 = v0[49];
  v3 = v0[50];
  v4 = v0[48];
  v5 = v0[30];
  v6 = __swift_project_value_buffer(v2, (uint64_t)qword_2568C9B30);
  v0[55] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[56] = v7;
  v7(v1, v6, v2);
  sub_238013570(v5, v4, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
  v8 = sub_2380BD7F0();
  v9 = sub_2380BDF70();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = v0[48];
    v11 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v11 = 136446210;
    __asm { BR              X10 }
  }
  v12 = v0[54];
  v13 = v0[49];
  v14 = v0[50];
  sub_237FFD540(v0[48], (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);

  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v0[57] = v15;
  v16 = v0[29];
  sub_2380377AC();
  v0[16] = sub_23800EBF0(MEMORY[0x24BEE4AF8]);
  v17 = *(int **)(v16 + 8);
  v18 = *v17;
  v19 = (_QWORD *)swift_task_alloc();
  v0[58] = v19;
  *v19 = v0;
  v19[1] = sub_238019B44;
  return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD))((char *)v17 + v18))(v0[24], v0 + 16, v0[28], v0[29]);
}

uint64_t sub_238019B44()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 472) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_238019BEC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  double v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  id v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v46;
  NSObject *v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint8_t *buf;
  uint64_t v122;
  NSObject *log;
  os_log_t loga;
  os_log_type_t type;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  void (*v131)(uint64_t, uint64_t);
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, os_log_t);
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  v1 = v0[16];
  if (*(_QWORD *)(v1 + 16)
    && (v2 = sub_23800DEDC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x80000002380C7EE0), (v3 & 1) != 0)&& (sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)(v0 + 6)), __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28), (swift_dynamicCast() & 1) != 0))
  {
    v5 = v0[2];
    v4 = v0[3];
    v7 = v0[4];
    v6 = v0[5];
  }
  else
  {
    v8 = (uint64_t *)v0[24];
    v5 = *v8;
    v4 = v8[1];
    v9 = *MEMORY[0x24BE078F8];
    sub_237FFBA20(*v8, v4);
    *(_QWORD *)&v143 = sub_23800A21C(v9);
    *((_QWORD *)&v143 + 1) = v10;
    sub_23801B708((uint64_t)&v143);
    v142 = v143;
    sub_237FFBA20(v5, v4);
    sub_23801B9A0((uint64_t)&v142);
    LODWORD(v9) = v11;
    sub_237FFBAB0(v5, v4);
    if ((_DWORD)v9)
    {
      sub_23801BD6C();
      v12 = (void *)swift_allocError();
      *v13 = 0;
      swift_willThrow();
      sub_237FFBAB0(v5, v4);
      v15 = *((_QWORD *)&v142 + 1);
      v14 = v142;
LABEL_15:
      sub_237FFBAB0(v14, v15);
LABEL_17:
      v28 = v0[55];
      v29 = (void (*)(uint64_t, uint64_t, uint64_t))v0[56];
      v30 = v0[51];
      v31 = v0[49];
      swift_bridgeObjectRelease();
      v29(v30, v28, v31);
      v32 = v12;
      v33 = v12;
      v34 = sub_2380BD7F0();
      v35 = sub_2380BDF64();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        v37 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v36 = 138543362;
        v38 = v12;
        v39 = v12;
        v40 = _swift_stdlib_bridgeErrorToNSError();
        v0[19] = v40;
        sub_2380BDF94();
        *v37 = v40;

        _os_log_impl(&dword_237FF6000, v34, v35, "AttestationBundle validation failed: %{public}@", v36, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v37, -1, -1);
        MEMORY[0x23B82B830](v36, -1, -1);
      }
      else
      {

      }
      v41 = (void (*)(uint64_t, uint64_t))v0[57];
      v42 = v0[51];
      v43 = v0[49];

      v41(v42, v43);
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v44 = *(uint64_t (**)(void))(v141 + 8);
      return v44();
    }
    v6 = *((_QWORD *)&v142 + 1);
    v7 = v142;
  }
  v16 = v0[26];
  if (v16 >> 60 != 15)
  {
    v17 = v0[25];
    v146 = 0;
    *(_QWORD *)&v142 = 0;
    sub_238009148(v17, v16);
    sub_237FFBA20(v5, v4);
    sub_237FFBA20(v7, v6);
    sub_238034DF4(v5, v4, v7, v6);
    sub_237FFBAB0(v5, v4);
    v139 = v6;
    sub_237FFBAB0(v7, v6);
    v18 = v143;
    v20 = v0[25];
    v19 = v0[26];
    if (*((_QWORD *)&v143 + 1) >> 60 == 15)
    {
      sub_237FFBA20(v20, v19);
      sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
      sub_238008CF0(v20, v19);
LABEL_16:
      v27 = v0[25];
      v26 = v0[26];
      type metadata accessor for CloudAttestationError(0);
      sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
      v12 = (void *)swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_237FFBAB0(v5, v4);
      sub_237FFBAB0(v7, v139);
      sub_238008CF0(v27, v26);
      goto LABEL_17;
    }
    sub_238009148(v20, v19);
    sub_238009148(v18, *((unint64_t *)&v18 + 1));
    sub_238008ED0(v18, *((uint64_t *)&v18 + 1));
    v22 = v21;
    sub_238008CF0(v20, v19);
    sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
    sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
    if ((v22 & 1) == 0)
      goto LABEL_16;
    sub_238008CF0(v0[25], v0[26]);
  }
  *(_QWORD *)&v143 = v5;
  *((_QWORD *)&v143 + 1) = v4;
  v144 = v7;
  v145 = v6;
  v23 = SEP.Attestation.publicKeyData.getter(&v142);
  v24 = *((_QWORD *)&v142 + 1);
  if ((~*((_QWORD *)&v142 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
    v12 = (void *)swift_allocError();
    *v25 = 0xD000000000000017;
    v25[1] = 0x80000002380C7F00;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_237FFBAB0(v5, v4);
    v14 = v7;
    v15 = v6;
    goto LABEL_15;
  }
  v134 = v7;
  v46 = v142;
  ((void (*)(_QWORD, _QWORD, _QWORD, double))v0[56])(v0[53], v0[55], v0[49], v23);
  sub_23801BDB0(v46, v24);
  sub_23801BDC4(v46, v24);
  v47 = sub_2380BD7F0();
  type = sub_2380BDF70();
  v48 = os_log_type_enabled(v47, type);
  v128 = v0[53];
  v131 = (void (*)(uint64_t, uint64_t))v0[57];
  v126 = v0[49];
  v135 = v24;
  v133 = v46;
  v140 = v6;
  if (v48)
  {
    log = v47;
    v49 = v0[46];
    v120 = v0[45];
    v50 = v0[44];
    v51 = (uint8_t *)swift_slowAlloc();
    v122 = swift_slowAlloc();
    *(_QWORD *)&v143 = v122;
    buf = v51;
    *(_DWORD *)v51 = 136446210;
    sub_23801AED4(v46, v24);
    sub_238001820(&qword_2568C5E20, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC6308]);
    v52 = sub_2380BE1A4();
    v53 = v46;
    v55 = v54;
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v49, v50);
    v0[18] = sub_238013968(v52, v55, (uint64_t *)&v143);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_23801BDCC(v53, v24);
    sub_23801BDCC(v53, v24);
    v47 = log;
    _os_log_impl(&dword_237FF6000, log, type, "AttestationBundle passed validation for public key: %{public}s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v122, -1, -1);
    MEMORY[0x23B82B830](buf, -1, -1);
  }
  else
  {
    sub_23801BDCC(v46, v24);
    sub_23801BDCC(v46, v24);
  }

  v131(v128, v126);
  v56 = v0[34];
  v57 = v0[35];
  v58 = v0[33];
  v59 = v0[24];
  sub_2380BE294();
  sub_2380BE294();
  sub_2380BD3F4();
  v60 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v59 + *(int *)(v60 + 36), v58, &qword_2568C5E00);
  v132 = v4;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v58, 1, v56) == 1)
  {
    v61 = v0[33];
    sub_2380BD58C();
    sub_238005240(v61, &qword_2568C5E00);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[35] + 32))(v0[36], v0[33], v0[34]);
  }
  v63 = v0[42];
  v62 = v0[43];
  v129 = v0[41];
  v65 = v0[37];
  v64 = v0[38];
  v67 = v0[35];
  v66 = v0[36];
  v68 = v0[34];
  v69 = v0[32];
  sub_2380BD574();
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
  if ((sub_2380BD3E8() & 1) != 0)
    v70 = v63;
  else
    v70 = v62;
  v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
  v127(v129, v70, v65);
  *(_QWORD *)&v143 = v0[16];
  AttestationPolicyContext.proofExpiration.getter(v69);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v69, 1, v65) == 1)
  {
    sub_238005240(v0[32], &qword_2542C9C00);
    v71 = v134;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[38] + 32))(v0[40], v0[32], v0[37]);
    v71 = v134;
    if ((sub_2380BD3E8() & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[38] + 40))(v0[41], v0[40], v0[37]);
    else
      (*(void (**)(_QWORD, _QWORD))(v0[38] + 8))(v0[40], v0[37]);
  }
  v72 = v0[38];
  v73 = v0[39];
  v74 = v0[37];
  sub_2380BD40C();
  v75 = sub_2380BD3DC();
  v130 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
  v130(v73, v74);
  v76 = v132;
  if ((v75 & 1) != 0)
  {
    if ((*(_BYTE *)(v0[30] + *(int *)(v0[47] + 72)) & 1) == 0)
    {
      v87 = v0[42];
      v136 = v0[43];
      v88 = v0[41];
      v89 = v0[37];
      type metadata accessor for CloudAttestationError(0);
      sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
      v90 = swift_allocError();
      v127(v91, v88, v89);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23801BDCC(v133, v135);
      sub_237FFBAB0(v5, v132);
      sub_237FFBAB0(v71, v140);
      v92 = v87;
      v12 = (void *)v90;
      v130(v92, v89);
      v130(v136, v89);
      v130(v88, v89);
      goto LABEL_17;
    }
    ((void (*)(_QWORD, _QWORD, _QWORD))v0[56])(v0[52], v0[55], v0[49]);
    v77 = sub_2380BD7F0();
    v78 = sub_2380BDF64();
    v79 = os_log_type_enabled(v77, v78);
    v80 = (void (*)(uint64_t, uint64_t))v0[57];
    v81 = v0[52];
    v82 = v0[49];
    if (v79)
    {
      v137 = (void (*)(uint64_t, os_log_t))v0[57];
      loga = (os_log_t)v0[49];
      v83 = (uint8_t *)swift_slowAlloc();
      v84 = swift_slowAlloc();
      *(_QWORD *)&v143 = v84;
      *(_DWORD *)v83 = 136446210;
      swift_beginAccess();
      sub_238001820(&qword_2568C5C70, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
      v85 = sub_2380BE1A4();
      *(_QWORD *)(v141 + 136) = sub_238013968(v85, v86, (uint64_t *)&v143);
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237FF6000, v77, v78, "Allowing expired bundle to fail open: expiration=%{public}s", v83, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v84, -1, -1);
      v71 = v134;
      v0 = (_QWORD *)v141;
      MEMORY[0x23B82B830](v83, -1, -1);

      v137(v81, loga);
    }
    else
    {

      v80(v81, v82);
    }
  }
  v93 = v0[41];
  v94 = v0[37];
  v138 = v0[31];
  v95 = v0[24];
  v96 = (uint64_t *)v0[21];
  v97 = v0[22];
  *v96 = v133;
  v96[1] = v135;
  swift_beginAccess();
  v127(v97, v93, v94);
  sub_238013570(v95, v138, type metadata accessor for AttestationBundle);
  v146 = 0;
  *(_QWORD *)&v142 = 0;
  sub_237FFBA20(v5, v132);
  sub_237FFBA20(v71, v140);
  sub_23801BDB0(v133, v135);
  sub_238033F18(v5, v132, v71, v140);
  sub_237FFBAB0(v5, v132);
  sub_237FFBAB0(v71, v140);
  v98 = 0;
  v99 = 0;
  if (v144 != 2)
  {
    v100 = v143;
    v101 = *((_QWORD *)&v143 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
    v102 = swift_allocObject();
    *(_OWORD *)(v102 + 16) = xmmword_2380BEAF0;
    v103 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v102 + 56) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v102 + 64) = v103;
    v104 = MEMORY[0x24BEE4568];
    *(_DWORD *)(v102 + 32) = v100;
    v76 = v132;
    v105 = MEMORY[0x24BEE45B8];
    *(_QWORD *)(v102 + 96) = v104;
    *(_QWORD *)(v102 + 104) = v105;
    *(_QWORD *)(v102 + 72) = v101;
    v98 = sub_2380BDD30();
  }
  v117 = v99;
  v118 = v98;
  v106 = v0[42];
  v107 = v0[43];
  v119 = v0[41];
  v108 = v0[37];
  v109 = v0[31];
  v110 = v0[23];
  *(_QWORD *)&v143 = v0[16];
  swift_bridgeObjectRetain();
  v111 = sub_2380507D4();
  v116 = v112;
  sub_23801BDCC(v133, v135);
  sub_237FFBAB0(v5, v76);
  sub_237FFBAB0(v134, v140);
  swift_bridgeObjectRelease();
  v130(v106, v108);
  v130(v107, v108);
  v113 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  *(_QWORD *)(v110 + v113[7]) = 0;
  sub_238001DE4(v109, v110, type metadata accessor for AttestationBundle);
  v130(v119, v108);
  v114 = (uint64_t *)(v110 + v113[5]);
  *v114 = v118;
  v114[1] = v117;
  v115 = (uint64_t *)(v110 + v113[6]);
  *v115 = v111;
  v115[1] = v116;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v44 = *(uint64_t (**)(void))(v141 + 8);
  return v44();
}

uint64_t sub_23801AC34()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v1 = *(void **)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 440);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  v4 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 392);
  swift_bridgeObjectRelease();
  v3(v4, v2, v5);
  v6 = v1;
  v7 = v1;
  v8 = sub_2380BD7F0();
  v9 = sub_2380BDF64();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v10 = 138543362;
    v12 = v1;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 152) = v13;
    sub_2380BDF94();
    *v11 = v13;

    _os_log_impl(&dword_237FF6000, v8, v9, "AttestationBundle validation failed: %{public}@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v11, -1, -1);
    MEMORY[0x23B82B830](v10, -1, -1);
  }
  else
  {

  }
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 392);

  v14(v15, v16);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23801AED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v4 = sub_2380BD988();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  MEMORY[0x24BDAC7A8](v4);
  sub_23801BDC4(a1, a2);
  sub_238001820(&qword_2568C5DA8, v5, MEMORY[0x24BDC6AE8]);
  sub_2380BD838();
  __asm { BR              X10 }
}

uint64_t sub_23801AFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 112) = v1;
  *(_WORD *)(v5 - 104) = v0;
  *(_BYTE *)(v5 - 102) = BYTE2(v0);
  *(_BYTE *)(v5 - 101) = BYTE3(v0);
  *(_BYTE *)(v5 - 100) = BYTE4(v0);
  *(_BYTE *)(v5 - 99) = BYTE5(v0);
  sub_2380BD814();
  sub_23801BDE0(v1, v0);
  sub_2380BD820();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
  return sub_23801BDE0(v1, v0);
}

uint64_t sub_23801B16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_238013814;
  return NodeValidator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23801B224()
{
  uint64_t v0;

  sub_2380BDE20();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
  sub_23800A568((unint64_t *)&qword_2568C5E68, &qword_2568C5E60, MEMORY[0x24BEE12B0]);
  v0 = sub_2380BDCD0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23801B2D4@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
  v4 = swift_allocObject();
  v5 = MEMORY[0x24BEE4260];
  *(_OWORD *)(v4 + 16) = xmmword_2380BEAC0;
  v6 = MEMORY[0x24BEE42B0];
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = v6;
  *(_BYTE *)(v4 + 32) = v3;
  result = sub_2380BDD30();
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t sub_23801B358(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_23801B368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_238001DE4(*(_QWORD *)a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E80);
  v5 = a2 + v4[12];
  v6 = *(__int128 **)(a1 + 8);
  v7 = *(_OWORD **)(a1 + 16);
  v8 = *((_QWORD *)v6 + 2);
  v9 = *v6;
  LOBYTE(v6) = *((_BYTE *)v6 + 24);
  *(_OWORD *)v5 = v9;
  *(_QWORD *)(v5 + 16) = v8;
  *(_BYTE *)(v5 + 24) = (_BYTE)v6;
  *(_OWORD *)(a2 + v4[16]) = *v7;
  v10 = a2 + v4[20];
  v12 = *(uint64_t **)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v13 = *v12;
  LOBYTE(v12) = *((_BYTE *)v12 + 8);
  *(_QWORD *)v10 = v13;
  *(_BYTE *)(v10 + 8) = (_BYTE)v12;
  sub_238001DE4(v11, a2 + v4[24], type metadata accessor for SecureConfigPolicy);
  v14 = (_OWORD *)(a2 + v4[28]);
  v16 = *(__int128 **)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v17 = *v16;
  v18 = v16[1];
  *(_OWORD *)((char *)v14 + 25) = *(__int128 *)((char *)v16 + 25);
  *v14 = v17;
  v14[1] = v18;
  result = sub_238001DE4(v15, a2 + v4[32], type metadata accessor for KeyOptionsPolicy);
  v20 = a2 + v4[36];
  v21 = *(int **)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *v21;
  *(_WORD *)(v20 + 4) = *((_WORD *)v21 + 2);
  *(_DWORD *)v20 = v23;
  v24 = a2 + v4[40];
  LOWORD(v21) = *(_WORD *)v22;
  LOBYTE(v23) = *(_BYTE *)(v22 + 2);
  v25 = *(_BYTE *)(v22 + 5);
  LOWORD(v22) = *(_WORD *)(v22 + 3);
  *(_WORD *)v24 = (_WORD)v21;
  *(_BYTE *)(v24 + 2) = v23;
  *(_WORD *)(v24 + 3) = v22;
  *(_BYTE *)(v24 + 5) = v25;
  v26 = *(uint64_t **)(a1 + 80);
  *(_QWORD *)(a2 + v4[44]) = **(_QWORD **)(a1 + 72);
  v27 = a2 + v4[48];
  v28 = *v26;
  LOBYTE(v23) = *((_BYTE *)v26 + 8);
  v29 = *((_BYTE *)v26 + 9);
  LOBYTE(v26) = *((_BYTE *)v26 + 10);
  *(_QWORD *)v27 = v28;
  *(_BYTE *)(v27 + 8) = v23;
  *(_BYTE *)(v27 + 9) = v29;
  *(_BYTE *)(v27 + 10) = (_BYTE)v26;
  v30 = a2 + v4[52];
  v31 = *(_QWORD *)(a1 + 88);
  LOBYTE(v26) = *(_BYTE *)v31;
  v32 = *(_QWORD *)(v31 + 8);
  LOBYTE(v31) = *(_BYTE *)(v31 + 16);
  *(_BYTE *)v30 = (_BYTE)v26;
  *(_QWORD *)(v30 + 8) = v32;
  *(_BYTE *)(v30 + 16) = v31;
  return result;
}

double sub_23801B4E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  char v22;
  char v23;

  sub_238001DE4(*(_QWORD *)a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E70);
  sub_23801CA30(*(_QWORD *)(a1 + 8), a2 + v4[12]);
  v5 = a2 + v4[16];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD **)(a1 + 24);
  v8 = *(_QWORD *)(v6 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v6;
  *(_QWORD *)(v5 + 16) = v8;
  *(_OWORD *)(a2 + v4[20]) = *v7;
  v9 = a2 + v4[24];
  v11 = *(uint64_t **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = *v11;
  LOBYTE(v11) = *((_BYTE *)v11 + 8);
  *(_QWORD *)v9 = v12;
  *(_BYTE *)(v9 + 8) = (_BYTE)v11;
  sub_238001DE4(v10, a2 + v4[28], type metadata accessor for SecureConfigPolicy);
  sub_238001DE4(*(_QWORD *)(a1 + 48), a2 + v4[32], type metadata accessor for KeyOptionsPolicy);
  sub_238001DE4(*(_QWORD *)(a1 + 56), a2 + v4[36], (uint64_t (*)(_QWORD))type metadata accessor for SoftwareReleasePolicy);
  v13 = a2 + v4[40];
  v14 = *(char **)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *v14;
  v17 = v14[1];
  v18 = v14[2];
  v19 = *(_QWORD *)(v14 + 12);
  result = *(double *)(v14 + 4);
  LODWORD(v14) = *((_DWORD *)v14 + 5);
  *(_BYTE *)v13 = v16;
  *(_BYTE *)(v13 + 1) = v17;
  *(_BYTE *)(v13 + 2) = v18;
  *(double *)(v13 + 4) = result;
  *(_QWORD *)(v13 + 12) = v19;
  *(_DWORD *)(v13 + 20) = (_DWORD)v14;
  v21 = a2 + v4[44];
  LOWORD(v14) = *(_WORD *)v15;
  v22 = *(_BYTE *)(v15 + 2);
  v23 = *(_BYTE *)(v15 + 5);
  LOWORD(v15) = *(_WORD *)(v15 + 3);
  *(_WORD *)v21 = (_WORD)v14;
  *(_BYTE *)(v21 + 2) = v22;
  *(_WORD *)(v21 + 3) = v15;
  *(_BYTE *)(v21 + 5) = v23;
  *(_QWORD *)(a2 + v4[48]) = **(_QWORD **)(a1 + 80);
  return result;
}

id sub_23801B63C(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t sub_23801B64C(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void sub_23801B65C(id a1)
{
  if ((unint64_t)a1 >= 2)

}

uint64_t sub_23801B66C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TransparencyPolicy(a2, a1);
  return a2;
}

uint64_t sub_23801B6A8(uint64_t a1)
{
  destroy for TransparencyPolicy();
  return a1;
}

uint64_t sub_23801B6DC(void *a1, uint64_t a2)
{
  sub_23801B65C(a1);
  return sub_23801B358(a2);
}

void sub_23801B708(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_23801B764(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

void sub_23801B8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = sub_2380BD208();
  if (!v9)
    goto LABEL_10;
  v10 = v9;
  v11 = sub_2380BD22C();
  v12 = a1 - v11;
  if (__OFSUB__(a1, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v15 = sub_2380BD220();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  sub_238033670(v10 + v12, v10 + v12 + v16, a4, a5);
}

void sub_23801B9A0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23801BA00@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;

  v10 = v5;
  LOWORD(v11) = a1;
  BYTE2(v11) = BYTE2(a1);
  HIBYTE(v11) = BYTE3(a1);
  v12 = BYTE4(a1);
  v13 = BYTE5(a1);
  v14 = BYTE6(a1);
  sub_238033670((uint64_t)&v10, (uint64_t)&v10 + BYTE6(a1), v3, v2);
  if (!v6)
    v4 = v9;
  v7 = v11 | ((unint64_t)v12 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v14 << 48);
  *v1 = v10;
  v1[1] = v7;
  return v4;
}

unint64_t sub_23801BD6C()
{
  unint64_t result;

  result = qword_2568C5E10;
  if (!qword_2568C5E10)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.Attestation.Error, &type metadata for SEP.Attestation.Error);
    atomic_store(result, (unint64_t *)&qword_2568C5E10);
  }
  return result;
}

uint64_t sub_23801BDB0(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_23801BDC4(a1, a2);
  return a1;
}

uint64_t sub_23801BDC4(uint64_t a1, uint64_t a2)
{
  return sub_237FFBA20(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

uint64_t sub_23801BDCC(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_23801BDE0(a1, a2);
  return a1;
}

uint64_t sub_23801BDE0(uint64_t a1, uint64_t a2)
{
  return sub_237FFBAB0(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

uint64_t sub_23801BDE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for NodeValidator(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v4 + 64) = a2[8];
    v8 = a3[8];
    v9 = (void *)(v4 + v8);
    v10 = (char *)a2 + v8;
    v11 = sub_2380BD418();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[10];
    *(_BYTE *)(v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *(_BYTE *)(v4 + v16) = *((_BYTE *)a2 + v16);
    v17 = a3[12];
    *(_BYTE *)(v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(_BYTE *)(v4 + v17) = *((_BYTE *)a2 + v17);
    v18 = a3[14];
    *(_BYTE *)(v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *(_BYTE *)(v4 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[16];
    *(_BYTE *)(v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    *(_BYTE *)(v4 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[18];
    *(_BYTE *)(v4 + a3[17]) = *((_BYTE *)a2 + a3[17]);
    *(_BYTE *)(v4 + v20) = *((_BYTE *)a2 + v20);
    v21 = a3[19];
    v22 = *(void **)((char *)a2 + v21);
    *(_QWORD *)(v4 + v21) = v22;
    v23 = v22;
  }
  return v4;
}

void destroy for NodeValidator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_2380BD418();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

}

uint64_t initializeWithCopy for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_2380BD418();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[19];
  v20 = *(void **)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v21 = v20;
  return a1;
}

uint64_t assignWithCopy for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_2380BD418();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v15 = a3[19];
  v16 = *(void **)(a1 + v15);
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = v17;

  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 48) = v6;
  v10 = sub_2380BD418();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_2380BD418();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[19];
  v21 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);

  return a1;
}

uint64_t getEnumTagSinglePayload for NodeValidator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23801C814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NodeValidator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23801C8A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_23801C918()
{
  unint64_t v0;

  sub_23801C9D0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_23801C9D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542C9C08)
  {
    sub_2380BD418();
    v0 = sub_2380BDF7C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542C9C08);
  }
}

_UNKNOWN **sub_23801CA24()
{
  return &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
}

uint64_t sub_23801CA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23801CA78(void *a1, uint64_t a2)
{
  sub_23801B63C(a1);
  return sub_23801B64C(a2);
}

void sub_23801CAA4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23801CADC()
{
  sub_2380BDD78();
  return swift_bridgeObjectRelease();
}

uint64_t static Environment.current.getter@<X0>(char *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  if (byte_2542C9B90 == 9)
    return static Environment.default.getter(a1);
  *a1 = byte_2542C9B90;
  return result;
}

uint64_t static Environment.override.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_2542C9B90;
  return result;
}

uint64_t static Environment.override.setter(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  byte_2542C9B90 = v1;
  return result;
}

uint64_t (*static Environment.override.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

char static Environment.default.getter@<W0>(char *a1@<X8>)
{
  int v2;
  char v3;
  char v4;
  char v5;
  char v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  if (os_variant_is_darwinos())
  {
    LOBYTE(v2) = sub_23801CDE0();
    v3 = v7[0];
    if (v7[0] == 9)
      v3 = 0;
    *a1 = v3;
  }
  else
  {
    if (os_variant_has_internal_content())
      v4 = 5;
    else
      v4 = 6;
    v2 = os_variant_allows_internal_security_policies();
    if (v2)
    {
      v8 = &type metadata for PrivateCloudComputeFeatures;
      v9 = sub_23801CD9C();
      v5 = sub_2380BD454();
      LOBYTE(v2) = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
      if ((v5 & 1) == 0)
      {
        LOBYTE(v2) = sub_23801CDE0();
        if (v7[0] != 9)
          v4 = v7[0];
      }
    }
    *a1 = v4;
  }
  return v2;
}

unint64_t sub_23801CD9C()
{
  unint64_t result;

  result = qword_2542C9C10;
  if (!qword_2542C9C10)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for PrivateCloudComputeFeatures, &type metadata for PrivateCloudComputeFeatures);
    atomic_store(result, (unint64_t *)&qword_2542C9C10);
  }
  return result;
}

CloudAttestation::Environment_optional sub_23801CDE0()
{
  __CFString *v0;
  __CFString *v1;
  CFPropertyListRef v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;

  v0 = (__CFString *)sub_2380BDCF4();
  v1 = (__CFString *)sub_2380BDCF4();
  v2 = CFPreferencesCopyAppValue(v0, v1);

  if (v2 && swift_dynamicCast())
  {
    v3 = v6;
    v4 = v7;
  }
  else
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  return Environment.init(rawValue:)(*(Swift::String *)&v3);
}

CloudAttestation::Environment_optional __swiftcall Environment.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CloudAttestation::Environment_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2380BE138();
  result.value = swift_bridgeObjectRelease();
  v5 = 9;
  if (v3 < 9)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t Environment.transparencyURL.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5EB0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v22 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - v10;
  v12 = 1 << *v1;
  if ((v12 & 0x1F) == 0)
  {
    if ((v12 & 0x60) == 0)
    {
      v26 = 0xD000000000000020;
      v27 = 0x80000002380C7F20;
      v24 = 1685025392;
      v25 = 0xE400000000000000;
      v22 = 3301745;
      v23 = 0xE300000000000000;
      sub_23801D1D4();
      sub_2380BDFAC();
      sub_2380BD2A4();
      swift_bridgeObjectRelease();
      v13 = sub_2380BD2C8();
      v21 = *(_QWORD *)(v13 - 8);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v11, 1, v13);
      if ((_DWORD)result != 1)
      {
        v16 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32);
        v17 = a1;
        v18 = v11;
        return v16(v17, v18, v13);
      }
LABEL_13:
      __break(1u);
      return result;
    }
    sub_2380BD2A4();
    v19 = sub_2380BD2C8();
    v20 = *(_QWORD *)(v19 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19);
    if ((_DWORD)result != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(a1, v6, v19);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = 0xD000000000000020;
  v27 = 0x80000002380C7F20;
  v24 = 1685025392;
  v25 = 0xE400000000000000;
  v22 = 3236209;
  v23 = 0xE300000000000000;
  sub_23801D1D4();
  sub_2380BDFAC();
  sub_2380BD2A4();
  swift_bridgeObjectRelease();
  v13 = sub_2380BD2C8();
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v16 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v17 = a1;
  v18 = v9;
  return v16(v17, v18, v13);
}

unint64_t sub_23801D1D4()
{
  unint64_t result;

  result = qword_2568C5E88;
  if (!qword_2568C5E88)
  {
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2568C5E88);
  }
  return result;
}

uint64_t Environment.authenticatingTransparencyURL.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5EB0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v22 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - v10;
  v12 = 1 << *v1;
  if ((v12 & 0x1F) == 0)
  {
    if ((v12 & 0x60) == 0)
    {
      v26 = 0xD000000000000029;
      v27 = 0x80000002380C7F50;
      v24 = 1685025392;
      v25 = 0xE400000000000000;
      v22 = 3301745;
      v23 = 0xE300000000000000;
      sub_23801D1D4();
      sub_2380BDFAC();
      sub_2380BD2A4();
      swift_bridgeObjectRelease();
      v13 = sub_2380BD2C8();
      v21 = *(_QWORD *)(v13 - 8);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v11, 1, v13);
      if ((_DWORD)result != 1)
      {
        v16 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32);
        v17 = a1;
        v18 = v11;
        return v16(v17, v18, v13);
      }
LABEL_13:
      __break(1u);
      return result;
    }
    sub_2380BD2A4();
    v19 = sub_2380BD2C8();
    v20 = *(_QWORD *)(v19 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19);
    if ((_DWORD)result != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(a1, v6, v19);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = 0xD000000000000029;
  v27 = 0x80000002380C7F50;
  v24 = 1685025392;
  v25 = 0xE400000000000000;
  v22 = 3236209;
  v23 = 0xE300000000000000;
  sub_23801D1D4();
  sub_2380BDFAC();
  sub_2380BD2A4();
  swift_bridgeObjectRelease();
  v13 = sub_2380BD2C8();
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v16 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v17 = a1;
  v18 = v9;
  return v16(v17, v18, v13);
}

uint64_t Environment.transparencyPrimaryTree.getter()
{
  _BYTE *v0;

  return (*v0 < 8u) & (0xD0u >> *v0);
}

uint64_t Environment.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23801D528 + 4 * byte_2380C0129[*v0]))(7759204, 0xE300000000000000);
}

uint64_t sub_23801D528()
{
  return 0x6172656D65687065;
}

uint64_t sub_23801D544()
{
  return 1718773104;
}

uint64_t sub_23801D554()
{
  return 24945;
}

uint64_t sub_23801D560()
{
  return 0x676E6967617473;
}

uint64_t sub_23801D578()
{
  return 0x7972726163;
}

uint64_t sub_23801D58C()
{
  return 0x69746375646F7270;
}

uint64_t sub_23801D5A8()
{
  return 0x616D697250326171;
}

uint64_t sub_23801D5C8()
{
  return 0x7265746E49326171;
}

void sub_23801D5E8(char *a1)
{
  sub_238077F08(*a1);
}

uint64_t sub_23801D5F4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2380BE234();
  sub_23801CAA4((uint64_t)v3, v1);
  return sub_2380BE264();
}

void sub_23801D638(uint64_t a1)
{
  char *v1;

  sub_23801CAA4(a1, *v1);
}

uint64_t sub_23801D640()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2380BE234();
  sub_23801CAA4((uint64_t)v3, v1);
  return sub_2380BE264();
}

CloudAttestation::Environment_optional sub_23801D680(Swift::String *a1)
{
  return Environment.init(rawValue:)(*a1);
}

uint64_t sub_23801D68C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Environment.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23801D6B0()
{
  sub_23801DA9C();
  return sub_2380BDE80();
}

uint64_t sub_23801D70C()
{
  sub_23801DA9C();
  return sub_2380BDE68();
}

uint64_t Environment.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23801D780 + 4 * byte_2380C0132[*v0]))(7759204, 0xE300000000000000);
}

uint64_t sub_23801D780()
{
  return 0x6172656D65687065;
}

uint64_t sub_23801D79C()
{
  return 1718773104;
}

uint64_t sub_23801D7AC()
{
  return 24945;
}

uint64_t sub_23801D7B8()
{
  return 0x676E6967617473;
}

uint64_t sub_23801D7D0()
{
  return 0x7972726163;
}

uint64_t sub_23801D7E4()
{
  return 0x69746375646F7270;
}

uint64_t sub_23801D800()
{
  return 0x616D697250326171;
}

uint64_t sub_23801D820()
{
  return 0x7265746E49326171;
}

BOOL static Environment.< infix(_:_:)(char *a1, char *a2)
{
  return qword_2380C02E8[*a1] < qword_2380C02E8[*a2];
}

unint64_t sub_23801D86C()
{
  unint64_t result;

  result = qword_2568C5E90;
  if (!qword_2568C5E90)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for Environment, &type metadata for Environment);
    atomic_store(result, (unint64_t *)&qword_2568C5E90);
  }
  return result;
}

BOOL sub_23801D8B0(char *a1, char *a2)
{
  return qword_2380C02E8[*a1] < qword_2380C02E8[*a2];
}

BOOL sub_23801D8D4(char *a1, char *a2)
{
  return qword_2380C02E8[*a2] >= qword_2380C02E8[*a1];
}

BOOL sub_23801D8F8(char *a1, char *a2)
{
  return qword_2380C02E8[*a1] >= qword_2380C02E8[*a2];
}

BOOL sub_23801D91C(char *a1, char *a2)
{
  return qword_2380C02E8[*a2] < qword_2380C02E8[*a1];
}

uint64_t getEnumTagSinglePayload for Environment(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Environment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23801DA1C + 4 * byte_2380C0140[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23801DA50 + 4 * byte_2380C013B[v4]))();
}

uint64_t sub_23801DA50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23801DA58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23801DA60);
  return result;
}

uint64_t sub_23801DA6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23801DA74);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23801DA78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23801DA80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

unint64_t sub_23801DA9C()
{
  unint64_t result;

  result = qword_2568C5E98;
  if (!qword_2568C5E98)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for Environment, &type metadata for Environment);
    atomic_store(result, (unint64_t *)&qword_2568C5E98);
  }
  return result;
}

uint64_t sub_23801DAE0()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9B48);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9B48);
  return sub_2380BD7FC();
}

void SWTransparencyLog.environment.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

id SWTransparencyLog.init(environment:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  id result;

  v3 = *a1;
  if (MEMORY[0x24BEBA830])
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBA830]), sel_initWithApplication_, 0);
  else
    result = 0;
  *(_BYTE *)a2 = v3;
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t SWTransparencyLog.proveInclusion(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 264) = a2;
  __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  v4 = type metadata accessor for ATLogProofs(0);
  *(_QWORD *)(v3 + 280) = v4;
  *(_QWORD *)(v3 + 288) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  sub_2380BD610();
  *(_QWORD *)(v3 + 304) = swift_task_alloc();
  *(_QWORD *)(v3 + 312) = type metadata accessor for ATLogProofResponse(0);
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  *(_QWORD *)(v3 + 328) = type metadata accessor for ATLogProofRequest(0);
  *(_QWORD *)(v3 + 336) = swift_task_alloc();
  v5 = sub_2380BD280();
  *(_QWORD *)(v3 + 344) = v5;
  *(_QWORD *)(v3 + 352) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 360) = swift_task_alloc();
  v6 = sub_2380BD16C();
  *(_QWORD *)(v3 + 368) = v6;
  *(_QWORD *)(v3 + 376) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 384) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5EB0);
  *(_QWORD *)(v3 + 392) = swift_task_alloc();
  *(_QWORD *)(v3 + 400) = swift_task_alloc();
  *(_QWORD *)(v3 + 408) = swift_task_alloc();
  *(_QWORD *)(v3 + 416) = swift_task_alloc();
  *(_QWORD *)(v3 + 424) = swift_task_alloc();
  *(_QWORD *)(v3 + 432) = swift_task_alloc();
  v7 = sub_2380BD2C8();
  *(_QWORD *)(v3 + 440) = v7;
  *(_QWORD *)(v3 + 448) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 456) = swift_task_alloc();
  *(_QWORD *)(v3 + 464) = swift_task_alloc();
  *(_QWORD *)(v3 + 472) = swift_task_alloc();
  v8 = swift_task_alloc();
  *(_BYTE *)(v3 + 560) = *(_BYTE *)v2;
  v9 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v3 + 480) = v8;
  *(_QWORD *)(v3 + 488) = v9;
  return swift_task_switch();
}

uint64_t sub_23801DDC0()
{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint8_t *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  id v47;
  uint64_t v48;

  v1 = (void *)sub_23801F398();
  v2 = 1 << *(_BYTE *)(v0 + 560);
  if ((v2 & 0x1F) == 0)
  {
    if ((v2 & 0x60) == 0)
    {
      v12 = *(_QWORD *)(v0 + 440);
      v11 = *(_QWORD *)(v0 + 448);
      v13 = *(_QWORD *)(v0 + 432);
      *(_QWORD *)(v0 + 224) = 0xD000000000000029;
      *(_QWORD *)(v0 + 232) = 0x80000002380C7F50;
      *(_QWORD *)(v0 + 160) = 1685025392;
      *(_QWORD *)(v0 + 168) = 0xE400000000000000;
      *(_QWORD *)(v0 + 32) = 3301745;
      *(_QWORD *)(v0 + 40) = 0xE300000000000000;
      sub_23801D1D4();
      sub_2380BDFAC();
      sub_2380BD2A4();
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v12);
      if ((_DWORD)result != 1)
      {
        v7 = (_QWORD *)(v0 + 432);
        goto LABEL_9;
      }
LABEL_20:
      __break(1u);
      return result;
    }
    v9 = *(_QWORD *)(v0 + 440);
    v8 = *(_QWORD *)(v0 + 448);
    v10 = *(_QWORD *)(v0 + 416);
    sub_2380BD2A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9);
    if ((_DWORD)result != 1)
    {
      v7 = (_QWORD *)(v0 + 416);
      goto LABEL_9;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v4 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 424);
  *(_QWORD *)(v0 + 176) = 0xD000000000000029;
  *(_QWORD *)(v0 + 184) = 0x80000002380C7F50;
  *(_QWORD *)(v0 + 192) = 1685025392;
  *(_QWORD *)(v0 + 200) = 0xE400000000000000;
  *(_QWORD *)(v0 + 208) = 3236209;
  *(_QWORD *)(v0 + 216) = 0xE300000000000000;
  sub_23801D1D4();
  sub_2380BDFAC();
  sub_2380BD2A4();
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_19;
  }
  v7 = (_QWORD *)(v0 + 424);
LABEL_9:
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 448) + 32))(*(_QWORD *)(v0 + 480), *v7, *(_QWORD *)(v0 + 440));
  v14 = (objc_class *)type metadata accessor for SWTransparencyLog.Delegate();
  v15 = (char *)objc_allocWithZone(v14);
  *(_QWORD *)&v15[OBJC_IVAR____TtCFV16CloudAttestation17SWTransparencyLog14proveInclusionFzZT2ofVS_7Release_VS_21TransparencyLogProofsL_8Delegate_credential] = v1;
  *(_QWORD *)(v0 + 144) = v15;
  *(_QWORD *)(v0 + 152) = v14;
  v16 = v1;
  v17 = objc_msgSendSuper2((objc_super *)(v0 + 144), sel_init);
  if (qword_2568C4E70 != -1)
    swift_once();
  v19 = *(_QWORD *)(v0 + 472);
  v18 = *(_QWORD *)(v0 + 480);
  v21 = *(_QWORD *)(v0 + 440);
  v20 = *(_QWORD *)(v0 + 448);
  v22 = sub_2380BD808();
  __swift_project_value_buffer(v22, (uint64_t)qword_2568C9B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
  v23 = sub_2380BD7F0();
  v24 = sub_2380BDF4C();
  v25 = os_log_type_enabled(v23, v24);
  v26 = *(_QWORD *)(v0 + 472);
  v28 = *(_QWORD *)(v0 + 440);
  v27 = *(_QWORD *)(v0 + 448);
  if (v25)
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v48 = v30;
    *(_DWORD *)v29 = 136446210;
    sub_238001820(&qword_2568C5ED8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v31 = sub_2380BE1A4();
    *(_QWORD *)(v0 + 240) = sub_238013968(v31, v32, &v48);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    v33 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v33(v26, v28);
    _os_log_impl(&dword_237FF6000, v23, v24, "Using authenticating transparency log url: %{public}s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v30, -1, -1);
    v34 = v29;
    v35 = v33;
    MEMORY[0x23B82B830](v34, -1, -1);

  }
  else
  {

    v35 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v35(v26, v28);

  }
  *(_QWORD *)(v0 + 496) = v35;
  *(_QWORD *)(v0 + 504) = v17;
  v45 = *(_BYTE *)(v0 + 560);
  v46 = *(_QWORD *)(v0 + 488);
  v47 = v17;
  v36 = *(_QWORD *)(v0 + 352);
  v37 = *(_QWORD *)(v0 + 360);
  v38 = *(_QWORD *)(v0 + 344);
  v44 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 16) = 0xD000000000000011;
  *(_QWORD *)(v0 + 24) = 0x80000002380C7FA0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104))(v37, *MEMORY[0x24BDCD7A0], v38);
  sub_23801D1D4();
  sub_2380BD2B0();
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
  swift_bridgeObjectRelease();
  sub_2380BD148();
  sub_2380BD13C();
  sub_2380BD160();
  v39 = swift_task_alloc();
  *(_QWORD *)(v39 + 16) = v44;
  *(_BYTE *)(v39 + 24) = v45;
  *(_QWORD *)(v39 + 32) = v46;
  sub_238001820(&qword_2568C5EC0, type metadata accessor for ATLogProofRequest, (uint64_t)&unk_2380BF4D8);
  sub_2380BD730();
  swift_task_dealloc();
  sub_2380BD70C();
  sub_2380BD154();
  if (v47)
  {
    v40 = (void *)objc_opt_self();
    swift_unknownObjectRetain();
    v41 = objc_msgSend(v40, sel_defaultSessionConfiguration);
    v42 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_delegate_delegateQueue_, v41, v47, 0);

    swift_unknownObjectRelease();
  }
  else
  {
    v42 = objc_msgSend((id)objc_opt_self(), sel_sharedSession);
  }
  *(_QWORD *)(v0 + 512) = v42;
  v43 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 520) = v43;
  *v43 = v0;
  v43[1] = sub_23801E980;
  return sub_2380BDF40();
}

uint64_t sub_23801E980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[66] = a1;
  v5[67] = a2;
  v5[68] = a3;
  v5[69] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23801E9F8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 544);
  objc_opt_self();
  v2 = (void *)swift_dynamicCastObjCClassUnconditional();
  v3 = v1;
  if (objc_msgSend(v2, sel_statusCode) != (id)200)
  {
    v13 = *(void **)(v0 + 544);
    v14 = *(_QWORD *)(v0 + 536);
    v15 = *(_QWORD *)(v0 + 528);
    v16 = *(void **)(v0 + 512);
    v35 = *(_QWORD *)(v0 + 480);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
    v17 = *(_QWORD *)(v0 + 376);
    v33 = *(_QWORD *)(v0 + 384);
    v34 = *(_QWORD *)(v0 + 440);
    v32 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 336);
    v19 = objc_msgSend(v2, sel_statusCode);
    sub_23801F828();
    swift_allocError();
    *(_QWORD *)v20 = v19;
    *(_BYTE *)(v20 + 8) = 0;
    swift_willThrow();

    sub_237FFBAB0(v15, v14);
    swift_unknownObjectRelease();
    sub_237FFD540(v18, type metadata accessor for ATLogProofRequest);
    v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
LABEL_5:
    v21(v33, v32);
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(v0 + 552);
  sub_237FFBA20(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 536));
  sub_2380BD604();
  sub_238001820(&qword_2568C5ED0, type metadata accessor for ATLogProofResponse, (uint64_t)&unk_2380BF460);
  sub_2380BD700();
  if (!v4)
  {
    v23 = *(_QWORD *)(v0 + 320);
    v24 = *(_QWORD *)v23;
    if (*(_BYTE *)(v23 + 8) == 1)
      __asm { BR              X9 }
    v25 = *(void **)(v0 + 544);
    v26 = *(_QWORD *)(v0 + 536);
    v27 = *(_QWORD *)(v0 + 528);
    v28 = *(void **)(v0 + 512);
    v35 = *(_QWORD *)(v0 + 480);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
    v29 = *(_QWORD *)(v0 + 376);
    v33 = *(_QWORD *)(v0 + 384);
    v34 = *(_QWORD *)(v0 + 440);
    v32 = *(_QWORD *)(v0 + 368);
    v30 = *(_QWORD *)(v0 + 336);
    sub_23801F828();
    swift_allocError();
    *(_QWORD *)v31 = v24;
    *(_BYTE *)(v31 + 8) = 32;
    swift_willThrow();

    sub_237FFBAB0(v27, v26);
    swift_unknownObjectRelease();
    sub_237FFD540(v23, type metadata accessor for ATLogProofResponse);
    sub_237FFD540(v30, type metadata accessor for ATLogProofRequest);
    v21 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    goto LABEL_5;
  }
  v5 = *(void **)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(void **)(v0 + 512);
  v35 = *(_QWORD *)(v0 + 480);
  v36 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
  v34 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 336);

  sub_237FFBAB0(v7, v6);
  swift_unknownObjectRelease();
  sub_237FFD540(v12, type metadata accessor for ATLogProofRequest);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
LABEL_6:
  v36(v35, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23801EE30()
{
  _QWORD *v0;

  sub_23801F828();
  swift_allocError();
  *v0 = 1;
  JUMPOUT(0x23801F040);
}

uint64_t sub_23801F22C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 336);

  swift_unknownObjectRelease();
  sub_237FFD540(v7, type metadata accessor for ATLogProofRequest);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23801F398()
{
  BOOL v0;
  objc_class *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _BYTE *v23;
  uint64_t v24;

  if (MEMORY[0x24BECE068])
    v0 = MEMORY[0x24BECE058] == 0;
  else
    v0 = 1;
  if (v0 || MEMORY[0x24BECE070] == 0 || MEMORY[0x24BECE060] == 0)
  {
    if (qword_2568C4E70 != -1)
      swift_once();
    v8 = sub_2380BD808();
    __swift_project_value_buffer(v8, (uint64_t)qword_2568C9B48);
    v9 = sub_2380BD7F0();
    v10 = sub_2380BDF64();
    v7 = v10;
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_237FF6000, v9, (os_log_type_t)v7, "Narrative is not supported on this system", v11, 2u);
      MEMORY[0x23B82B830](v11, -1, -1);
    }

    sub_23801FEE0();
    v12 = swift_allocError();
    *v13 = 0;
    sub_23801F828();
    swift_allocError();
    *(_QWORD *)v14 = v12;
    *(_BYTE *)(v14 + 8) = 96;
    swift_willThrow();
  }
  else
  {
    v3 = (objc_class *)sub_2380BD568();
    v4 = objc_allocWithZone(v3);
    v5 = (void *)sub_2380BD55C();
    v6 = sub_2380BD550();
    if (v6)
    {
      v7 = v6;

    }
    else
    {
      v16 = objc_allocWithZone(v3);
      v17 = (void *)sub_2380BD55C();
      v18 = sub_2380BD550();
      if (v18)
      {
        v7 = v18;

      }
      else
      {
        if (qword_2568C4E70 != -1)
          swift_once();
        v19 = sub_2380BD808();
        __swift_project_value_buffer(v19, (uint64_t)qword_2568C9B48);
        v20 = sub_2380BD7F0();
        v21 = sub_2380BDF64();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v22 = 0;
          _os_log_impl(&dword_237FF6000, v20, v21, "Unable to load acdc or adb narrative identity", v22, 2u);
          MEMORY[0x23B82B830](v22, -1, -1);
        }

        sub_23801FEE0();
        v7 = swift_allocError();
        *v23 = 1;
        sub_23801F828();
        swift_allocError();
        *(_QWORD *)v24 = v7;
        *(_BYTE *)(v24 + 8) = 96;
        swift_willThrow();

      }
    }
  }
  return v7;
}

uint64_t sub_23801F68C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = sub_2380BD844();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a1 = 3;
  *(_BYTE *)(a1 + 8) = 1;
  sub_238028F5C((uint64_t)v9);
  v17 = v5;
  v18 = sub_238001820(&qword_2568C5F88, v6, MEMORY[0x24BDC62D8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v9, v5);
  __swift_project_boxed_opaque_existential_1(v16, v17);
  sub_2380BD268();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  v11 = v15[1];
  v12 = v15[2];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  result = sub_237FFBAB0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  if ((a3 - 4) > 3u)
    v14 = 6;
  else
    v14 = qword_2380C0380[(char)(a3 - 4)];
  *(_QWORD *)(a1 + 16) = v14;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t sub_23801F808(uint64_t a1)
{
  uint64_t v1;

  return sub_23801F68C(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

unint64_t sub_23801F828()
{
  unint64_t result;

  result = qword_2568C5EC8;
  if (!qword_2568C5EC8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for TransparencyLogError, &type metadata for TransparencyLogError);
    atomic_store(result, (unint64_t *)&qword_2568C5EC8);
  }
  return result;
}

uint64_t sub_23801F86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23801F8B4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23801F8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ATLogProofs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SWTransparencyLog.verifyInclusion(of:proofs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;

  v6 = sub_2380BD418();
  v3[3] = v6;
  v3[4] = *(_QWORD *)(v6 - 8);
  v7 = swift_task_alloc();
  v8 = *(void **)(v2 + 8);
  v3[5] = v7;
  v3[6] = v8;
  v9 = v8;
  v3[2] = v8;
  v10 = (_QWORD *)swift_task_alloc();
  v3[7] = v10;
  *v10 = v3;
  v10[1] = sub_23801F9E4;
  return SWTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(v7, a1, a2);
}

uint64_t sub_23801F9E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  return swift_task_switch();
}

uint64_t sub_23801FA58()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23801FA94()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23801FAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_238013814;
  return SWTransparencyLog.proveInclusion(of:)(a1, a2);
}

uint64_t sub_23801FB30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;

  v6 = sub_2380BD418();
  v3[3] = v6;
  v3[4] = *(_QWORD *)(v6 - 8);
  v7 = swift_task_alloc();
  v8 = *(void **)(v2 + 8);
  v3[5] = v7;
  v3[6] = v8;
  v9 = v8;
  v3[2] = v8;
  v10 = (_QWORD *)swift_task_alloc();
  v3[7] = v10;
  *v10 = v3;
  v10[1] = sub_23801FBDC;
  return SWTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(v7, a1, a2);
}

uint64_t sub_23801FBDC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  return swift_task_switch();
}

id sub_23801FD10()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SWTransparencyLog.Delegate()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for SWTransparencyLog(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

void destroy for SWTransparencyLog(uint64_t a1)
{

}

uint64_t assignWithCopy for SWTransparencyLog(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for SWTransparencyLog(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for SWTransparencyLog(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTransparencyLog(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTransparencyLog()
{
  return &type metadata for SWTransparencyLog;
}

unint64_t sub_23801FEE0()
{
  unint64_t result;

  result = qword_2568C5F90;
  if (!qword_2568C5F90)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0460, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_2568C5F90);
  }
  return result;
}

uint64_t _s5ErrorOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s5ErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23802000C + 4 * byte_2380C03A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_238020040 + 4 * byte_2380C03A0[v4]))();
}

uint64_t sub_238020040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_238020048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x238020050);
  return result;
}

uint64_t sub_23802005C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238020064);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_238020068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238020070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23802007C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

BOOL sub_23802009C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2380200B4()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t sub_2380200F8()
{
  return sub_2380BE240();
}

uint64_t sub_238020120()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

unint64_t sub_238020160()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000027;
  else
    return 0xD000000000000035;
}

unint64_t sub_2380201B0()
{
  unint64_t result;

  result = qword_2568C6000;
  if (!qword_2568C6000)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0438, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_2568C6000);
  }
  return result;
}

uint64_t sub_2380201F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, void *);

  v8 = (void *)*((_QWORD *)v3 + 1);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))((char *)&dword_2568C60E0 + dword_2568C60E0);
  v9 = *v3;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_238013814;
  return v12(a1, a2, a3, v9, v8);
}

uint64_t sub_238020288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;

  v5[3] = a1;
  v5[4] = a5;
  v9 = sub_2380BD418();
  v5[5] = v9;
  v5[6] = *(_QWORD *)(v9 - 8);
  v10 = swift_task_alloc();
  v5[7] = v10;
  v11 = a5;
  v5[2] = a5;
  v12 = (_QWORD *)swift_task_alloc();
  v5[8] = v12;
  *v12 = v5;
  v12[1] = sub_238020338;
  return SWTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(v10, a2, a3);
}

uint64_t sub_238020338()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
  return swift_task_switch();
}

uint64_t sub_2380203AC()
{
  uint64_t v0;

  sub_2380BE294();
  sub_2380BE294();
  sub_2380BD3F4();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23802043C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TransparencyVerifier.verifyExpiringInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = a1;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = sub_238020504;
  return v12(a2, a3, a4, a5);
}

uint64_t sub_238020504()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_238020570()
{
  uint64_t v0;

  sub_2380BE294();
  sub_2380BE294();
  sub_2380BD3F4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2380205E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_2380165B0;
  v11[2] = a1;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v12 = (_QWORD *)swift_task_alloc();
  v11[3] = v12;
  *v12 = v11;
  v12[1] = sub_238020504;
  return v14(a2, a3, a4, a5);
}

uint64_t TransparencyLogProofs.init(bundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = a2;
  v3 = type metadata accessor for ATLogProofs(0);
  v4 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  v66 = v4;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v64 = (char *)&v58 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v62 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v58 - v11;
  v13 = type metadata accessor for Proto_TransparencyProofs(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v61 = (uint64_t)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v58 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v60 = (uint64_t)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v58 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v58 - v25;
  v27 = type metadata accessor for TransparencyLogProofs();
  v67 = *(_QWORD *)(v27 - 8);
  v68 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v59 = (uint64_t)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1 + *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 40);
  sub_2380051FC(v29, (uint64_t)v26, &qword_2568C6010);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v31 = v30(v26, 1, v13);
  sub_238005240((uint64_t)v26, &qword_2568C6010);
  if (v31 == 1)
    goto LABEL_6;
  sub_2380051FC(v29, (uint64_t)v24, &qword_2568C6010);
  if (v30(v24, 1, v13) == 1)
  {
    sub_2380BD5BC();
    v33 = v65;
    v32 = v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(&v18[*(int *)(v13 + 20)], 1, 1, v65);
    sub_238005240((uint64_t)v24, &qword_2568C6010);
  }
  else
  {
    sub_238001DE4((uint64_t)v24, (uint64_t)v18, type metadata accessor for Proto_TransparencyProofs);
    v33 = v65;
    v32 = v66;
  }
  sub_2380051FC((uint64_t)&v18[*(int *)(v13 + 20)], (uint64_t)v12, qword_2568C5450);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v35 = v34(v12, 1, v33);
  sub_238005240((uint64_t)v12, qword_2568C5450);
  sub_237FFD540((uint64_t)v18, type metadata accessor for Proto_TransparencyProofs);
  if (v35 == 1)
  {
LABEL_6:
    v36 = type metadata accessor for AttestationBundle;
    v37 = a1;
  }
  else
  {
    v41 = v29;
    v42 = v60;
    sub_2380051FC(v41, v60, &qword_2568C6010);
    v43 = a1;
    if (v30((char *)v42, 1, v13) == 1)
    {
      v44 = v61;
      sub_2380BD5BC();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v44 + *(int *)(v13 + 20), 1, 1, v33);
      sub_238005240(v42, &qword_2568C6010);
    }
    else
    {
      v44 = v61;
      sub_238001DE4(v42, v61, type metadata accessor for Proto_TransparencyProofs);
    }
    v45 = (uint64_t)v64;
    v46 = v62;
    sub_2380051FC(v44 + *(int *)(v13 + 20), v62, qword_2568C5450);
    if (v34((char *)v46, 1, v33) == 1)
    {
      sub_2380BD5BC();
      v47 = v45 + *(int *)(v33 + 20);
      v48 = type metadata accessor for LogEntry(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 1, 1, v48);
      v49 = v45 + *(int *)(v33 + 24);
      v50 = type metadata accessor for LogConsistency(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
      sub_238005240(v46, qword_2568C5450);
    }
    else
    {
      sub_238001DE4(v46, v45, type metadata accessor for ATLogProofs);
    }
    sub_237FFD540(v44, type metadata accessor for Proto_TransparencyProofs);
    v51 = (uint64_t)v63;
    sub_2380BD5BC();
    v52 = v51 + *(int *)(v33 + 20);
    v53 = type metadata accessor for LogEntry(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 1, 1, v53);
    v54 = v51 + *(int *)(v33 + 24);
    v55 = type metadata accessor for LogConsistency(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
    LOBYTE(v54) = _s16CloudAttestation21TransparencyLogProofsV2eeoiySbAC_ACtFZ_0(v45, v51);
    sub_237FFD540(v43, type metadata accessor for AttestationBundle);
    sub_237FFD540(v51, type metadata accessor for ATLogProofs);
    if ((v54 & 1) == 0)
    {
      v56 = v59;
      sub_238001DE4(v45, v59, type metadata accessor for ATLogProofs);
      v57 = v56;
      v39 = v69;
      sub_238001DE4(v57, v69, (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
      v38 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v39, v38, 1, v68);
    }
    v36 = type metadata accessor for ATLogProofs;
    v37 = v45;
  }
  sub_237FFD540(v37, v36);
  v38 = 1;
  v39 = v69;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v39, v38, 1, v68);
}

uint64_t type metadata accessor for TransparencyLogProofs()
{
  uint64_t result;

  result = qword_2568C6098;
  if (!qword_2568C6098)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TransparencyLogProofs.hash(into:)()
{
  type metadata accessor for ATLogProofs(0);
  sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
  return sub_2380BDCB8();
}

uint64_t TransparencyLogProofs.hashValue.getter()
{
  sub_2380BE234();
  type metadata accessor for ATLogProofs(0);
  sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
  sub_2380BDCB8();
  return sub_2380BE264();
}

uint64_t sub_238020D34()
{
  sub_2380BE234();
  type metadata accessor for ATLogProofs(0);
  sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
  sub_2380BDCB8();
  return sub_2380BE264();
}

uint64_t sub_238020DA0()
{
  type metadata accessor for ATLogProofs(0);
  sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
  return sub_2380BDCB8();
}

uint64_t sub_238020DF8()
{
  sub_2380BE234();
  type metadata accessor for ATLogProofs(0);
  sub_238001820(&qword_2568C55C0, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF420);
  sub_2380BDCB8();
  return sub_2380BE264();
}

uint64_t sub_238020E64(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_238020E7C()
{
  return sub_238001820(&qword_2568C6018, (uint64_t (*)(uint64_t))type metadata accessor for TransparencyLogProofs, (uint64_t)&protocol conformance descriptor for TransparencyLogProofs);
}

uint64_t dispatch thunk of TransparencyProver.proveInclusion(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_238013814;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of TransparencyVerifier.verifyInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_2380165B0;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of TransparencyVerifier.verifyExpiringInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 16) + *(_QWORD *)(a5 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_2380165B0;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t *initializeBufferWithCopyOfBuffer for TransparencyLogProofs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t *, uint64_t *, uint64_t);

  v4 = type metadata accessor for ATLogProofs(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = sub_2380BD5C8();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(v6 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for LogEntry(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v52 = v13;
      *v10 = *v11;
      *((_BYTE *)v10 + 8) = *((_BYTE *)v11 + 8);
      v16 = v11[3];
      v10[2] = v11[2];
      v17 = v11[4];
      swift_bridgeObjectRetain();
      sub_237FFBA20(v16, v17);
      v10[3] = v16;
      v10[4] = v17;
      v18 = v11[6];
      v10[5] = v11[5];
      v10[6] = v18;
      *((_BYTE *)v10 + 56) = *((_BYTE *)v11 + 56);
      v8((_QWORD *)((char *)v10 + *(int *)(v12 + 36)), (_QWORD *)((char *)v11 + *(int *)(v12 + 36)), v7);
      v19 = *(int *)(v12 + 40);
      v20 = (_QWORD *)((char *)v10 + v19);
      v53 = v8;
      v21 = (_QWORD *)((char *)v11 + v19);
      v22 = type metadata accessor for SignedObject(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = v52;
        v8 = v53;
      }
      else
      {
        v48 = v23;
        v51 = v7;
        v27 = *v21;
        v26 = v21[1];
        sub_237FFBA20(*v21, v26);
        *v20 = v27;
        v20[1] = v26;
        v53((_QWORD *)((char *)v20 + *(int *)(v22 + 20)), (uint64_t *)((char *)v21 + *(int *)(v22 + 20)), v51);
        v49 = v22;
        v50 = v20;
        v28 = *(int *)(v22 + 24);
        v29 = (_QWORD *)((char *)v20 + v28);
        v30 = (uint64_t *)((char *)v21 + v28);
        v31 = type metadata accessor for Signature(0);
        v32 = *(_QWORD *)(v31 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
          v25 = v52;
          v8 = v53;
        }
        else
        {
          v34 = *v30;
          v46 = v30[1];
          sub_237FFBA20(*v30, v46);
          *v29 = v34;
          v29[1] = v46;
          v35 = v30[2];
          v47 = v30[3];
          sub_237FFBA20(v35, v47);
          v29[2] = v35;
          v29[3] = v47;
          v29[4] = v30[4];
          *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
          v36 = *(int *)(v31 + 28);
          v37 = (char *)v30 + v36;
          v8 = v53;
          v53((_QWORD *)((char *)v29 + v36), (uint64_t *)v37, v51);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
          v25 = v52;
        }
        v7 = v51;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v50, 0, 1, v49);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v12);
    }
    v38 = *(int *)(v6 + 24);
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = type metadata accessor for LogConsistency(0);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v39, (uint64_t *)v40, v7);
      *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
      v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56);
      swift_retain();
      v44(v39, 0, 1, v41);
    }
  }
  return a1;
}

uint64_t destroy for TransparencyLogProofs(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v2 = sub_2380BD5C8();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  v4 = type metadata accessor for ATLogProofs(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = type metadata accessor for LogEntry(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    sub_237FFBAB0(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
    v3(v5 + *(int *)(v6 + 36), v2);
    v7 = v5 + *(int *)(v6 + 40);
    v8 = type metadata accessor for SignedObject(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      sub_237FFBAB0(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
      v3(v7 + *(int *)(v8 + 20), v2);
      v9 = v7 + *(int *)(v8 + 24);
      v10 = type metadata accessor for Signature(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        sub_237FFBAB0(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
        sub_237FFBAB0(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
        v3(v9 + *(int *)(v10 + 28), v2);
      }
    }
  }
  v11 = a1 + *(int *)(v4 + 24);
  v12 = type metadata accessor for LogConsistency(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v3(v11, v2);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for TransparencyLogProofs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  v4 = sub_2380BD5C8();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  v6 = type metadata accessor for ATLogProofs(0);
  v7 = *(int *)(v6 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = type metadata accessor for LogEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v53 = v6;
    v54 = v11;
    *v8 = *v9;
    *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
    v13 = v9[3];
    v8[2] = v9[2];
    v14 = v9[4];
    swift_bridgeObjectRetain();
    sub_237FFBA20(v13, v14);
    v8[3] = v13;
    v8[4] = v14;
    v15 = v9[6];
    v8[5] = v9[5];
    v8[6] = v15;
    *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
    v5((uint64_t)v8 + *(int *)(v10 + 36), (uint64_t)v9 + *(int *)(v10 + 36), v4);
    v16 = *(int *)(v10 + 40);
    v17 = (char *)v8 + v16;
    v18 = v5;
    v19 = (_QWORD *)((char *)v9 + v16);
    v20 = type metadata accessor for SignedObject(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v17, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v5 = v18;
      v6 = v53;
      v23 = v54;
    }
    else
    {
      v50 = v21;
      v24 = v18;
      v52 = v17;
      v26 = *v19;
      v25 = v19[1];
      sub_237FFBA20(*v19, v25);
      *v52 = v26;
      v52[1] = v25;
      v27 = v52;
      v51 = v24;
      v24((uint64_t)v52 + *(int *)(v20 + 20), (uint64_t)v19 + *(int *)(v20 + 20), v4);
      v28 = *(int *)(v20 + 24);
      v29 = (_QWORD *)((char *)v52 + v28);
      v30 = (uint64_t *)((char *)v19 + v28);
      v31 = type metadata accessor for Signature(0);
      v48 = *(_QWORD *)(v31 - 8);
      v32 = v31;
      v49 = v20;
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v48 + 48))(v30, 1))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        v5 = v51;
      }
      else
      {
        v35 = *v30;
        v34 = v30[1];
        sub_237FFBA20(*v30, v34);
        *v29 = v35;
        v29[1] = v34;
        v37 = v30[2];
        v36 = v30[3];
        sub_237FFBA20(v37, v36);
        v29[2] = v37;
        v29[3] = v36;
        v29[4] = v30[4];
        *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
        v38 = *(int *)(v32 + 28);
        v39 = (char *)v30 + v38;
        v5 = v51;
        v27 = v52;
        v51((uint64_t)v29 + v38, (uint64_t)v39, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v29, 0, 1, v32);
      }
      v6 = v53;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v27, 0, 1, v49);
      v23 = v54;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v10);
  }
  v40 = *(int *)(v6 + 24);
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  v43 = type metadata accessor for LogConsistency(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v5((uint64_t)v41, (uint64_t)v42, v4);
    *(_QWORD *)&v41[*(int *)(v43 + 20)] = *(_QWORD *)&v42[*(int *)(v43 + 20)];
    v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56);
    swift_retain();
    v46(v41, 0, 1, v43);
  }
  return a1;
}

uint64_t assignWithCopy for TransparencyLogProofs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  size_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  int v66;
  int v67;
  void (*v68)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *);
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;

  v4 = sub_2380BD5C8();
  v114 = *(_QWORD *)(v4 - 8);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 24);
  v5(a1, a2, v4);
  v115 = type metadata accessor for ATLogProofs(0);
  v6 = *(int *)(v115 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for LogEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v29 = *(_QWORD *)v8;
      *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
      *(_QWORD *)v7 = v29;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v8 + 24);
      v31 = *(_QWORD *)(v8 + 32);
      sub_237FFBA20(v30, v31);
      v32 = *(_QWORD *)(v7 + 24);
      v33 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(v7 + 24) = v30;
      *(_QWORD *)(v7 + 32) = v31;
      sub_237FFBAB0(v32, v33);
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
      v34 = *(_QWORD *)(v8 + 48);
      *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
      *(_QWORD *)(v7 + 48) = v34;
      v5(v7 + *(int *)(v9 + 36), v8 + *(int *)(v9 + 36), v4);
      v35 = *(int *)(v9 + 40);
      v7 += v35;
      v8 += v35;
      v36 = type metadata accessor for SignedObject(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      LODWORD(v30) = v38(v7, 1, v36);
      v39 = v38(v8, 1, v36);
      if ((_DWORD)v30)
      {
        if (!v39)
        {
          v40 = *(_QWORD *)v8;
          v41 = *(_QWORD *)(v8 + 8);
          sub_237FFBA20(*(_QWORD *)v8, v41);
          *(_QWORD *)v7 = v40;
          *(_QWORD *)(v7 + 8) = v41;
          v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16);
          v42(v7 + *(int *)(v36 + 20), v8 + *(int *)(v36 + 20), v4);
          v43 = *(int *)(v36 + 24);
          v44 = (_QWORD *)(v7 + v43);
          v45 = (uint64_t *)(v8 + v43);
          v108 = v4;
          v46 = type metadata accessor for Signature(0);
          v111 = *(_QWORD *)(v46 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v111 + 48))(v45, 1, v46))
          {
            v47 = v108;
            v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
          }
          else
          {
            v107 = (void (*)(char *, char *))v42;
            v113 = v5;
            v87 = *v45;
            v88 = v45[1];
            sub_237FFBA20(*v45, v88);
            *v44 = v87;
            v44[1] = v88;
            v89 = v45[2];
            v90 = v45[3];
            sub_237FFBA20(v89, v90);
            v44[2] = v89;
            v44[3] = v90;
            v5 = v113;
            v91 = v45[4];
            *((_BYTE *)v44 + 40) = *((_BYTE *)v45 + 40);
            v44[4] = v91;
            v47 = v108;
            v107((char *)v44 + *(int *)(v46 + 28), (char *)v45 + *(int *)(v46 + 28));
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v44, 0, 1, v46);
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v7, 0, 1, v36);
          v4 = v47;
          goto LABEL_10;
        }
      }
      else
      {
        if (!v39)
        {
          v71 = *(_QWORD *)v8;
          v72 = *(_QWORD *)(v8 + 8);
          sub_237FFBA20(*(_QWORD *)v8, v72);
          v73 = *(_QWORD *)v7;
          v74 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)v7 = v71;
          *(_QWORD *)(v7 + 8) = v72;
          sub_237FFBAB0(v73, v74);
          v5(v7 + *(int *)(v36 + 20), v8 + *(int *)(v36 + 20), v4);
          v75 = *(int *)(v36 + 24);
          v76 = v7 + v75;
          v77 = v8 + v75;
          v78 = type metadata accessor for Signature(0);
          v79 = *(_QWORD *)(v78 - 8);
          v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
          LODWORD(v71) = v80(v76, 1, v78);
          v81 = v80(v77, 1, v78);
          if ((_DWORD)v71)
          {
            if (!v81)
            {
              v82 = *(_QWORD *)v77;
              v83 = *(_QWORD *)(v77 + 8);
              sub_237FFBA20(*(_QWORD *)v77, v83);
              *(_QWORD *)v76 = v82;
              *(_QWORD *)(v76 + 8) = v83;
              v84 = *(_QWORD *)(v77 + 16);
              v85 = *(_QWORD *)(v77 + 24);
              sub_237FFBA20(v84, v85);
              *(_QWORD *)(v76 + 16) = v84;
              *(_QWORD *)(v76 + 24) = v85;
              v86 = *(_QWORD *)(v77 + 32);
              *(_BYTE *)(v76 + 40) = *(_BYTE *)(v77 + 40);
              *(_QWORD *)(v76 + 32) = v86;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16))(v76 + *(int *)(v78 + 28), v77 + *(int *)(v78 + 28), v4);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v81)
            {
              v92 = *(_QWORD *)v77;
              v93 = *(_QWORD *)(v77 + 8);
              sub_237FFBA20(*(_QWORD *)v77, v93);
              v94 = *(_QWORD *)v76;
              v95 = *(_QWORD *)(v76 + 8);
              *(_QWORD *)v76 = v92;
              *(_QWORD *)(v76 + 8) = v93;
              sub_237FFBAB0(v94, v95);
              v96 = *(_QWORD *)(v77 + 16);
              v97 = *(_QWORD *)(v77 + 24);
              sub_237FFBA20(v96, v97);
              v98 = *(_QWORD *)(v76 + 16);
              v99 = *(_QWORD *)(v76 + 24);
              *(_QWORD *)(v76 + 16) = v96;
              *(_QWORD *)(v76 + 24) = v97;
              sub_237FFBAB0(v98, v99);
              v100 = *(_QWORD *)(v77 + 32);
              *(_BYTE *)(v76 + 40) = *(_BYTE *)(v77 + 40);
              *(_QWORD *)(v76 + 32) = v100;
              v5(v76 + *(int *)(v78 + 28), v77 + *(int *)(v78 + 28), v4);
              goto LABEL_10;
            }
            sub_237FFD540(v76, type metadata accessor for Signature);
          }
          v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
          v26 = (void *)v76;
          v27 = (const void *)v77;
LABEL_9:
          memcpy(v26, v27, v25);
LABEL_10:
          v28 = v115;
          goto LABEL_23;
        }
        sub_237FFD540(v7, type metadata accessor for SignedObject);
      }
      v24 = &qword_2568C5438;
LABEL_8:
      v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v24) - 8) + 64);
      v26 = (void *)v7;
      v27 = (const void *)v8;
      goto LABEL_9;
    }
    sub_237FFD540(v7, type metadata accessor for LogEntry);
LABEL_7:
    v24 = &qword_2568C5440;
    goto LABEL_8;
  }
  if (v13)
    goto LABEL_7;
  v112 = v5;
  v14 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v14;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  v15 = *(_QWORD *)(v8 + 24);
  v16 = *(_QWORD *)(v8 + 32);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v15, v16);
  *(_QWORD *)(v7 + 24) = v15;
  *(_QWORD *)(v7 + 32) = v16;
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  v17 = *(_QWORD *)(v8 + 48);
  *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
  *(_QWORD *)(v7 + 48) = v17;
  v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16);
  v110(v7 + *(int *)(v9 + 36), v8 + *(int *)(v9 + 36), v4);
  v18 = *(int *)(v9 + 40);
  v19 = (_QWORD *)(v7 + v18);
  v20 = (uint64_t *)(v8 + v18);
  v21 = type metadata accessor for SignedObject(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v105 = v22;
    v106 = a2;
    v49 = v4;
    v50 = *v20;
    v51 = v20[1];
    sub_237FFBA20(*v20, v51);
    *v19 = v50;
    v19[1] = v51;
    v109 = v49;
    v110((uint64_t)v19 + *(int *)(v21 + 20), (uint64_t)v20 + *(int *)(v21 + 20), v49);
    v52 = *(int *)(v21 + 24);
    v53 = (_QWORD *)((char *)v19 + v52);
    v54 = (uint64_t *)((char *)v20 + v52);
    v55 = type metadata accessor for Signature(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v102 = v54[1];
      v104 = v19;
      v58 = *v54;
      sub_237FFBA20(*v54, v102);
      *v53 = v58;
      v19 = v104;
      v53[1] = v102;
      v101 = v54[3];
      v103 = v54[2];
      sub_237FFBA20(v103, v101);
      v53[2] = v103;
      v53[3] = v101;
      v59 = v54[4];
      *((_BYTE *)v53 + 40) = *((_BYTE *)v54 + 40);
      v53[4] = v59;
      v110((uint64_t)v53 + *(int *)(v55 + 28), (uint64_t)v54 + *(int *)(v55 + 28), v109);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    a2 = v106;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v19, 0, 1, v21);
    v4 = v109;
  }
  v5 = v112;
  v28 = v115;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_23:
  v60 = *(int *)(v28 + 24);
  v61 = (char *)(a1 + v60);
  v62 = (char *)(a2 + v60);
  v63 = type metadata accessor for LogConsistency(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (!v66)
  {
    if (!v67)
    {
      v5((uint64_t)v61, (uint64_t)v62, v4);
      *(_QWORD *)&v61[*(int *)(v63 + 20)] = *(_QWORD *)&v62[*(int *)(v63 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_237FFD540((uint64_t)v61, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v67)
  {
LABEL_28:
    v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v61, v62, v4);
  *(_QWORD *)&v61[*(int *)(v63 + 20)] = *(_QWORD *)&v62[*(int *)(v63 + 20)];
  v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56);
  swift_retain();
  v68(v61, 0, 1, v63);
  return a1;
}

uint64_t initializeWithTake for TransparencyLogProofs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _OWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);

  v4 = sub_2380BD5C8();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  v6 = type metadata accessor for ATLogProofs(0);
  v7 = *(int *)(v6 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = type metadata accessor for LogEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v43 = v11;
    *v8 = *v9;
    *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
    v8[2] = v9[2];
    *(_OWORD *)(v8 + 3) = *(_OWORD *)(v9 + 3);
    v13 = v9[6];
    v8[5] = v9[5];
    v8[6] = v13;
    *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
    v5((uint64_t)v8 + *(int *)(v10 + 36), (uint64_t)v9 + *(int *)(v10 + 36), v4);
    v14 = *(int *)(v10 + 40);
    v44 = v5;
    v15 = (_OWORD *)((char *)v8 + v14);
    v16 = (_OWORD *)((char *)v9 + v14);
    v17 = type metadata accessor for SignedObject(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      v20 = v43;
      v5 = v44;
    }
    else
    {
      v41 = v18;
      *v15 = *v16;
      v44((uint64_t)v15 + *(int *)(v17 + 20), (uint64_t)v16 + *(int *)(v17 + 20), v4);
      v21 = *(int *)(v17 + 24);
      v42 = v15;
      v22 = (_OWORD *)((char *)v15 + v21);
      v23 = (_OWORD *)((char *)v16 + v21);
      v24 = type metadata accessor for Signature(0);
      v39 = *(_QWORD *)(v24 - 8);
      v25 = v24;
      v40 = v17;
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v39 + 48))(v23, 1))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        v5 = v44;
      }
      else
      {
        v27 = v23[1];
        *v22 = *v23;
        v22[1] = v27;
        *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
        *((_BYTE *)v22 + 40) = *((_BYTE *)v23 + 40);
        v28 = *(int *)(v25 + 28);
        v29 = (char *)v22 + v28;
        v30 = (char *)v23 + v28;
        v31 = v22;
        v5 = v44;
        v44((uint64_t)v29, (uint64_t)v30, v4);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v25);
      }
      v20 = v43;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v10);
  }
  v32 = *(int *)(v6 + 24);
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for LogConsistency(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v5((uint64_t)v33, (uint64_t)v34, v4);
    *(_QWORD *)&v33[*(int *)(v35 + 20)] = *(_QWORD *)&v34[*(int *)(v35 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t assignWithTake for TransparencyLogProofs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  size_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  int v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *__dst;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  void (*v76)(uint64_t, uint64_t, uint64_t);
  void (*v77)(uint64_t, uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;

  v4 = sub_2380BD5C8();
  v79 = *(_QWORD *)(v4 - 8);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 40);
  v5(a1, a2, v4);
  v80 = type metadata accessor for ATLogProofs(0);
  v6 = *(int *)(v80 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for LogEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(v7 + 24);
      v27 = *(_QWORD *)(v7 + 32);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      sub_237FFBAB0(v26, v27);
      v28 = *(_QWORD *)(v8 + 48);
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v7 + 48) = v28;
      *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
      v5(v7 + *(int *)(v9 + 36), v8 + *(int *)(v9 + 36), v4);
      v29 = *(int *)(v9 + 40);
      v7 += v29;
      v8 += v29;
      v30 = type metadata accessor for SignedObject(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
      v33 = v32(v7, 1, v30);
      v34 = v32(v8, 1, v30);
      if (v33)
      {
        if (!v34)
        {
          *(_OWORD *)v7 = *(_OWORD *)v8;
          v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32);
          v78 = v5;
          v76(v7 + *(int *)(v30 + 20), v8 + *(int *)(v30 + 20), v4);
          v35 = *(int *)(v30 + 24);
          v36 = (_OWORD *)(v7 + v35);
          v37 = (_OWORD *)(v8 + v35);
          v38 = type metadata accessor for Signature(0);
          v39 = *(_QWORD *)(v38 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
          {
            v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
          else
          {
            v67 = v37[1];
            *v36 = *v37;
            v36[1] = v67;
            *((_QWORD *)v36 + 4) = *((_QWORD *)v37 + 4);
            *((_BYTE *)v36 + 40) = *((_BYTE *)v37 + 40);
            v76((uint64_t)v36 + *(int *)(v38 + 28), (uint64_t)v37 + *(int *)(v38 + 28), v4);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          }
          v5 = v78;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v7, 0, 1, v30);
          goto LABEL_10;
        }
      }
      else
      {
        if (!v34)
        {
          v56 = *(_QWORD *)v7;
          v57 = *(_QWORD *)(v7 + 8);
          *(_OWORD *)v7 = *(_OWORD *)v8;
          sub_237FFBAB0(v56, v57);
          v5(v7 + *(int *)(v30 + 20), v8 + *(int *)(v30 + 20), v4);
          v58 = *(int *)(v30 + 24);
          v59 = v7 + v58;
          v60 = (_OWORD *)(v8 + v58);
          v61 = type metadata accessor for Signature(0);
          v62 = *(_QWORD *)(v61 - 8);
          v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
          v64 = v63(v59, 1, v61);
          v65 = v63((uint64_t)v60, 1, v61);
          if (v64)
          {
            if (!v65)
            {
              v66 = v60[1];
              *(_OWORD *)v59 = *v60;
              *(_OWORD *)(v59 + 16) = v66;
              *(_QWORD *)(v59 + 32) = *((_QWORD *)v60 + 4);
              *(_BYTE *)(v59 + 40) = *((_BYTE *)v60 + 40);
              (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v59 + *(int *)(v61 + 28), (char *)v60 + *(int *)(v61 + 28), v4);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v65)
            {
              v68 = *(_QWORD *)v59;
              v69 = *(_QWORD *)(v59 + 8);
              *(_OWORD *)v59 = *v60;
              sub_237FFBAB0(v68, v69);
              v70 = *(_QWORD *)(v59 + 16);
              v71 = *(_QWORD *)(v59 + 24);
              *(_OWORD *)(v59 + 16) = v60[1];
              sub_237FFBAB0(v70, v71);
              *(_QWORD *)(v59 + 32) = *((_QWORD *)v60 + 4);
              *(_BYTE *)(v59 + 40) = *((_BYTE *)v60 + 40);
              v5(v59 + *(int *)(v61 + 28), (uint64_t)v60 + *(int *)(v61 + 28), v4);
              goto LABEL_10;
            }
            sub_237FFD540(v59, type metadata accessor for Signature);
          }
          v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
          v23 = (void *)v59;
          v24 = v60;
LABEL_9:
          memcpy(v23, v24, v22);
LABEL_10:
          v25 = v80;
          goto LABEL_23;
        }
        sub_237FFD540(v7, type metadata accessor for SignedObject);
      }
      v21 = &qword_2568C5438;
LABEL_8:
      v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v21) - 8) + 64);
      v23 = (void *)v7;
      v24 = (const void *)v8;
      goto LABEL_9;
    }
    sub_237FFD540(v7, type metadata accessor for LogEntry);
LABEL_7:
    v21 = &qword_2568C5440;
    goto LABEL_8;
  }
  if (v13)
    goto LABEL_7;
  v77 = v5;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  v14 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 48) = v14;
  *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32);
  v75(v7 + *(int *)(v9 + 36), v8 + *(int *)(v9 + 36), v4);
  v15 = *(int *)(v9 + 40);
  v16 = (_OWORD *)(v7 + v15);
  v17 = (_OWORD *)(v8 + v15);
  v18 = type metadata accessor for SignedObject(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v75((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v4);
    v41 = *(int *)(v18 + 24);
    v73 = v16;
    __dst = (_OWORD *)((char *)v16 + v41);
    v42 = (_OWORD *)((char *)v17 + v41);
    v43 = type metadata accessor for Signature(0);
    v72 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v72 + 48))(v42, 1, v43))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(__dst, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = v42[1];
      *__dst = *v42;
      __dst[1] = v45;
      *((_QWORD *)__dst + 4) = *((_QWORD *)v42 + 4);
      *((_BYTE *)__dst + 40) = *((_BYTE *)v42 + 40);
      v75((uint64_t)__dst + *(int *)(v43 + 28), (uint64_t)v42 + *(int *)(v43 + 28), v4);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v43);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v73, 0, 1, v18);
  }
  v5 = v77;
  v25 = v80;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_23:
  v46 = *(int *)(v25 + 24);
  v47 = (char *)(a1 + v46);
  v48 = (char *)(a2 + v46);
  v49 = type metadata accessor for LogConsistency(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (!v53)
    {
      v5((uint64_t)v47, (uint64_t)v48, v4);
      *(_QWORD *)&v47[*(int *)(v49 + 20)] = *(_QWORD *)&v48[*(int *)(v49 + 20)];
      swift_release();
      return a1;
    }
    sub_237FFD540((uint64_t)v47, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v53)
  {
LABEL_28:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v47, v48, v4);
  *(_QWORD *)&v47[*(int *)(v49 + 20)] = *(_QWORD *)&v48[*(int *)(v49 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyLogProofs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238022A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ATLogProofs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TransparencyLogProofs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238022A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ATLogProofs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_238022AA0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ATLogProofs(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TransparencyLogError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_238022B4C(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_238022B4C(id result, char a2)
{
  if ((a2 & 0xC0) == 0x40)
    return result;
  return result;
}

void destroy for TransparencyLogError(uint64_t a1)
{
  sub_238022B70(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_238022B70(id a1, char a2)
{
  if ((a2 & 0xC0) == 0x40)

}

uint64_t assignWithCopy for TransparencyLogError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_238022B4C(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_238022B70(v5, v6);
  return a1;
}

uint64_t assignWithTake for TransparencyLogError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_238022B70(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyLogError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TransparencyLogError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_238022CB8(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = (char)v1;
  v3 = v1 >> 5;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_238022CD8(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 0x1Fu;
  return result;
}

uint64_t sub_238022CE8(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 1 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_BYTE *)(result + 8) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLogError()
{
  return &type metadata for TransparencyLogError;
}

void SEP.AttestationProtocol.attest(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, v6, a2, a3);

  }
  else
  {
    sub_238022DD8();
    swift_allocError();
    *v8 = 0;
    swift_willThrow();
  }
}

unint64_t sub_238022DD8()
{
  unint64_t result;

  result = qword_2568C60E8;
  if (!qword_2568C60E8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.AttestationProtocolError, &type metadata for SEP.AttestationProtocolError);
    atomic_store(result, (unint64_t *)&qword_2568C60E8);
  }
  return result;
}

uint64_t dispatch thunk of SEP.AttestationProtocol.dcik.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SEP.AttestationProtocol.attest(key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

_QWORD *_s24AttestationProtocolErrorOwCP(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void _s24AttestationProtocolErrorOwxx(id *a1)
{

}

void **_s24AttestationProtocolErrorOwca(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **_s24AttestationProtocolErrorOwta(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s24AttestationProtocolErrorOwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t _s24AttestationProtocolErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_238022F8C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_238022FA4(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SEP.AttestationProtocolError()
{
  return &type metadata for SEP.AttestationProtocolError;
}

uint64_t sub_238022FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_23800ED10((_OWORD *)a1, v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v5;
    *v5 = 0x8000000000000000;
    sub_238083CF8(v13, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    *v5 = v12;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_238005240(a1, &qword_2568C6128);
    sub_23804A774(a2, a3, a4, a5, v13);
    swift_bridgeObjectRelease();
    return sub_238005240((uint64_t)v13, &qword_2568C6128);
  }
}

uint64_t TransparencyPolicy.init(verifier:validateProofs:)@<X0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_23800A4E4(a1, a3);
  *(_BYTE *)(a3 + 40) = a2;
  return result;
}

uint64_t AttestationPolicyContext.proofExpiration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  if (*(_QWORD *)(v3 + 16)
    && (v4 = sub_23800DEDC((uint64_t)&type metadata for TransparencyPolicy, (uint64_t)&protocol witness table for TransparencyPolicy, 0x707845666F6F7270, 0xEF6E6F6974617269), (v5 & 1) != 0))
  {
    sub_238016570(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v10);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28);
    v6 = sub_2380BD418();
    v7 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v7 ^ 1u, 1, v6);
  }
  else
  {
    v9 = sub_2380BD418();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
}

uint64_t sub_2380231FC()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C60F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C60F0);
  return sub_2380BD7FC();
}

uint64_t static TransparencyPolicy.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2568C4E78 != -1)
    swift_once();
  v2 = sub_2380BD808();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2568C60F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t TransparencyPolicy.verifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1, a1);
}

uint64_t TransparencyPolicy.validateProofs.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t TransparencyPolicy.init(verifier:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_23800A4E4(a1, a2);
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

uint64_t TransparencyPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[24] = a2;
  v3[25] = v2;
  v3[23] = a1;
  v4 = sub_2380BD418();
  v3[26] = v4;
  v3[27] = *(_QWORD *)(v4 - 8);
  v3[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6110);
  v3[29] = swift_task_alloc();
  v5 = type metadata accessor for TransparencyLogProofs();
  v3[30] = v5;
  v3[31] = *(_QWORD *)(v5 - 8);
  v3[32] = swift_task_alloc();
  type metadata accessor for Proto_AttestationBundle(0);
  v3[33] = swift_task_alloc();
  type metadata accessor for AttestationBundle(0);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = type metadata accessor for Release();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2380234CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v50[2];

  v1 = v0[45];
  v2 = v0[35];
  v3 = v0[33];
  sub_238013570(v0[23], v2, type metadata accessor for AttestationBundle);
  sub_238013570(v2, v3, type metadata accessor for Proto_AttestationBundle);
  sub_23802AA78(v3, 0, v1);
  sub_237FFD540(v2, type metadata accessor for AttestationBundle);
  v4 = v0[46];
  v5 = v0[47];
  sub_238001DE4(v0[45], v4, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  sub_238001DE4(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  if (qword_2568C4E78 != -1)
    swift_once();
  v6 = v0[47];
  v8 = v0[43];
  v7 = v0[44];
  v9 = sub_2380BD808();
  v0[48] = __swift_project_value_buffer(v9, (uint64_t)qword_2568C60F0);
  sub_238013570(v6, v7, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  sub_238013570(v6, v8, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  v10 = sub_2380BD7F0();
  v11 = sub_2380BDF70();
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[43];
  v14 = v0[44];
  if (v12)
  {
    v15 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v50[0] = v48;
    *(_DWORD *)v15 = 136446466;
    sub_238024CC8();
    v16 = sub_2380BE1A4();
    v0[21] = sub_238013968(v16, v17, v50);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_237FFD540(v14, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    *(_WORD *)(v15 + 12) = 2082;
    Release.jsonString.getter();
    v0[22] = sub_238013968(v18, v19, v50);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_237FFD540(v13, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    _os_log_impl(&dword_237FF6000, v10, v11, "Attested device is running %{public}s:\n%{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v48, -1, -1);
    MEMORY[0x23B82B830](v15, -1, -1);
  }
  else
  {
    sub_237FFD540(v14, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    sub_237FFD540(v13, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  }

  sub_238013570(v0[47], v0[42], (uint64_t (*)(_QWORD))type metadata accessor for Release);
  v20 = sub_2380BD7F0();
  v21 = sub_2380BDF70();
  v22 = os_log_type_enabled(v20, v21);
  v23 = v0[42];
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v50[0] = v25;
    *(_DWORD *)v24 = 136446210;
    sub_238024CC8();
    v26 = sub_2380BE1A4();
    v0[20] = sub_238013968(v26, v27, v50);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_237FFD540(v23, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    _os_log_impl(&dword_237FF6000, v20, v21, "Verifying inclusion of %{public}s in transparency log", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v25, -1, -1);
    MEMORY[0x23B82B830](v24, -1, -1);
  }
  else
  {
    sub_237FFD540(v0[42], (uint64_t (*)(_QWORD))type metadata accessor for Release);
  }

  v28 = v0[34];
  v29 = v0[30];
  v30 = v0[31];
  v31 = v0[29];
  sub_238013570(v0[23], v28, type metadata accessor for AttestationBundle);
  TransparencyLogProofs.init(bundle:)(v28, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) == 1)
  {
    sub_238005240(v0[29], &qword_2568C6110);
    v32 = sub_2380BD7F0();
    v33 = sub_2380BDF64();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_237FF6000, v32, v33, "Attestation bundle is missing transparency proofs", v34, 2u);
      MEMORY[0x23B82B830](v34, -1, -1);
    }
    v35 = v0[47];

    sub_238024C84();
    v36 = (void *)swift_allocError();
    *v37 = 0x8000000000000000;
    swift_willThrow();
    sub_237FFD540(v35, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    if (*(_BYTE *)(v0[25] + 40) == 1)
    {
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v38 = (uint64_t (*)(void))v0[1];
    }
    else
    {
      if (qword_2568C4E78 != -1)
        swift_once();
      v39 = sub_2380BD808();
      __swift_project_value_buffer(v39, (uint64_t)qword_2568C60F0);
      v40 = sub_2380BD7F0();
      v41 = sub_2380BDF70();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v42 = 0;
        _os_log_impl(&dword_237FF6000, v40, v41, "Failing transparency checks open since validateProofs is off", v42, 2u);
        MEMORY[0x23B82B830](v42, -1, -1);
      }

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v38 = (uint64_t (*)(void))v0[1];
    }
    return v38();
  }
  else
  {
    v44 = (_QWORD *)v0[25];
    sub_238001DE4(v0[29], v0[32], (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
    v45 = v44[3];
    v46 = v44[4];
    __swift_project_boxed_opaque_existential_1(v44, v45);
    v49 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v46 + 16) + *(_QWORD *)(v46 + 16));
    v47 = (_QWORD *)swift_task_alloc();
    v0[49] = v47;
    *v47 = v0;
    v47[1] = sub_238023D34;
    return v49(v0[28], v0[47], v0[32], v45, v46);
  }
}

uint64_t sub_238023D34()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_238023D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 72) = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v3, v5);
  sub_238024D10(v0 + 48, v0 + 16);
  sub_238022FD8(v0 + 16, (uint64_t)&type metadata for TransparencyPolicy, (uint64_t)&protocol witness table for TransparencyPolicy, 0x707845666F6F7270, 0xEF6E6F6974617269);
  sub_238005240(v0 + 48, &qword_2568C6128);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_238013570(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  v7 = sub_2380BD7F0();
  v8 = sub_2380BDF70();
  if (os_log_type_enabled(v7, v8))
  {
    v20 = *(_QWORD *)(v0 + 376);
    v9 = *(_QWORD *)(v0 + 328);
    v10 = *(_QWORD *)(v0 + 256);
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v21 = v12;
    *(_DWORD *)v11 = 136446210;
    sub_238024CC8();
    v13 = sub_2380BE1A4();
    *(_QWORD *)(v0 + 152) = sub_238013968(v13, v14, &v21);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_237FFD540(v9, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    _os_log_impl(&dword_237FF6000, v7, v8, "AttestationBundle passed TransparencyPolicy: reported software %{public}s is included in transparency log", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v12, -1, -1);
    MEMORY[0x23B82B830](v11, -1, -1);

    sub_237FFD540(v10, (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
    v15 = v20;
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 376);
    v17 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 256);

    sub_237FFD540(v17, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    sub_237FFD540(v18, (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
    v15 = v16;
  }
  sub_237FFD540(v15, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2380240DC()
{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned int v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t (*v68)(void);
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77[2];

  v1 = *(void **)(v0 + 400);
  *(_QWORD *)(v0 + 144) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B60);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(v0 + 88);
    if (v3 >> 5 == 2)
    {
      v38 = *(_QWORD *)(v0 + 376);
      v39 = *(_QWORD *)(v0 + 304);

      *(_BYTE *)(v0 + 88) &= 0x1Fu;
      v40 = *(_QWORD *)(v0 + 80);
      sub_238013570(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for Release);
      v41 = (id)v40;
      v42 = (id)v40;
      v43 = sub_2380BD7F0();
      v44 = sub_2380BDF64();
      v45 = os_log_type_enabled(v43, v44);
      v46 = *(_QWORD *)(v0 + 304);
      if (v45)
      {
        v47 = swift_slowAlloc();
        v48 = (_QWORD *)swift_slowAlloc();
        v74 = swift_slowAlloc();
        *(_DWORD *)v47 = 136446466;
        v77[0] = v74;
        sub_238024CC8();
        v49 = sub_2380BE1A4();
        *(_QWORD *)(v0 + 104) = sub_238013968(v49, v50, v77);
        sub_2380BDF94();
        swift_bridgeObjectRelease();
        sub_237FFD540(v46, (uint64_t (*)(_QWORD))type metadata accessor for Release);
        *(_WORD *)(v47 + 12) = 2114;
        v51 = (id)v40;
        v52 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 112) = v52;
        sub_2380BDF94();
        *v48 = v52;

        _os_log_impl(&dword_237FF6000, v43, v44, "SWTransparency threw unknown error for %{public}s: %{public}@", (uint8_t *)v47, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v48, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v74, -1, -1);
        MEMORY[0x23B82B830](v47, -1, -1);
      }
      else
      {
        sub_237FFD540(*(_QWORD *)(v0 + 304), (uint64_t (*)(_QWORD))type metadata accessor for Release);

      }
      v53 = *(_QWORD *)(v0 + 376);
      v54 = *(_QWORD *)(v0 + 256);
      sub_238024C84();
      v55 = swift_allocError();
      v57 = v40 | 0x4000000000000000;
    }
    else
    {
      v4 = *(void **)(v0 + 80);
      if (v3 >> 5 != 4)
      {
LABEL_15:
        sub_238022B70(v4, v3);
        goto LABEL_16;
      }
      if (v3 == 128 && v4 == (void *)6)
      {
        v58 = *(_QWORD *)(v0 + 376);
        v59 = *(_QWORD *)(v0 + 312);

        sub_238013570(v58, v59, (uint64_t (*)(_QWORD))type metadata accessor for Release);
        v60 = sub_2380BD7F0();
        v61 = sub_2380BDF64();
        v62 = os_log_type_enabled(v60, v61);
        v63 = *(_QWORD *)(v0 + 312);
        if (v62)
        {
          v64 = (uint8_t *)swift_slowAlloc();
          v65 = swift_slowAlloc();
          v77[0] = v65;
          *(_DWORD *)v64 = 136446210;
          sub_238024CC8();
          v66 = sub_2380BE1A4();
          *(_QWORD *)(v0 + 120) = sub_238013968(v66, v67, v77);
          sub_2380BDF94();
          swift_bridgeObjectRelease();
          sub_237FFD540(v63, (uint64_t (*)(_QWORD))type metadata accessor for Release);
          _os_log_impl(&dword_237FF6000, v60, v61, "Software %{public}s has expired in the transparency log", v64, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B82B830](v65, -1, -1);
          MEMORY[0x23B82B830](v64, -1, -1);
        }
        else
        {
          sub_237FFD540(*(_QWORD *)(v0 + 312), (uint64_t (*)(_QWORD))type metadata accessor for Release);
        }

        v53 = *(_QWORD *)(v0 + 376);
        v54 = *(_QWORD *)(v0 + 256);
        sub_238024C84();
        v55 = swift_allocError();
        v57 = 0x8000000000000010;
      }
      else
      {
        if (*(unsigned __int8 *)(v0 + 88) != 128 || v4 != (void *)4)
          goto LABEL_15;
        v7 = *(_QWORD *)(v0 + 376);
        v8 = *(_QWORD *)(v0 + 320);

        sub_238013570(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for Release);
        v9 = sub_2380BD7F0();
        v10 = sub_2380BDF64();
        v11 = os_log_type_enabled(v9, v10);
        v12 = *(_QWORD *)(v0 + 320);
        if (v11)
        {
          v13 = (uint8_t *)swift_slowAlloc();
          v14 = swift_slowAlloc();
          v77[0] = v14;
          *(_DWORD *)v13 = 136446210;
          sub_238024CC8();
          v15 = sub_2380BE1A4();
          *(_QWORD *)(v0 + 128) = sub_238013968(v15, v16, v77);
          sub_2380BDF94();
          swift_bridgeObjectRelease();
          sub_237FFD540(v12, (uint64_t (*)(_QWORD))type metadata accessor for Release);
          _os_log_impl(&dword_237FF6000, v9, v10, "Software %{public}s is not included in transparency log, this is likely indicative of using the wrong transparency log", v13, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B82B830](v14, -1, -1);
          MEMORY[0x23B82B830](v13, -1, -1);
        }
        else
        {
          sub_237FFD540(*(_QWORD *)(v0 + 320), (uint64_t (*)(_QWORD))type metadata accessor for Release);
        }

        v53 = *(_QWORD *)(v0 + 376);
        v54 = *(_QWORD *)(v0 + 256);
        sub_238024C84();
        v55 = swift_allocError();
        v57 = 0x8000000000000008;
      }
    }
    *v56 = v57;
    v76 = (id)v55;
    swift_willThrow();
    sub_237FFD540(v54, (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
    sub_237FFD540(v53, (uint64_t (*)(_QWORD))type metadata accessor for Release);

    goto LABEL_31;
  }
LABEL_16:
  v17 = *(void **)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 296);

  sub_238013570(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  v20 = v17;
  v21 = v17;
  v22 = sub_2380BD7F0();
  v23 = sub_2380BDF64();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(void **)(v0 + 400);
  v26 = *(_QWORD *)(v0 + 296);
  if (v24)
  {
    v27 = swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    v75 = (id)swift_slowAlloc();
    v77[0] = (uint64_t)v75;
    *(_DWORD *)v27 = 136446466;
    sub_238024CC8();
    v29 = sub_2380BE1A4();
    *(_QWORD *)(v0 + 136) = sub_238013968(v29, v30, v77);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_237FFD540(v26, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    *(_WORD *)(v27 + 12) = 2114;
    v31 = v25;
    v32 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 96) = v32;
    sub_2380BDF94();
    *v28 = v32;

    _os_log_impl(&dword_237FF6000, v22, v23, "SWTransparency threw unknown error for %{public}s: %{public}@", (uint8_t *)v27, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v28, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v75, -1, -1);
    MEMORY[0x23B82B830](v27, -1, -1);
  }
  else
  {
    sub_237FFD540(*(_QWORD *)(v0 + 296), (uint64_t (*)(_QWORD))type metadata accessor for Release);

  }
  v33 = *(_QWORD *)(v0 + 400);
  v34 = *(_QWORD *)(v0 + 376);
  v35 = *(_QWORD *)(v0 + 256);
  sub_238024C84();
  v36 = swift_allocError();
  *v37 = v33 | 0x4000000000000000;
  v76 = (id)v36;
  swift_willThrow();
  sub_237FFD540(v35, (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
  sub_237FFD540(v34, (uint64_t (*)(_QWORD))type metadata accessor for Release);
LABEL_31:
  if (*(_BYTE *)(*(_QWORD *)(v0 + 200) + 40) == 1)
  {
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v68 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_2568C4E78 != -1)
      swift_once();
    v69 = sub_2380BD808();
    __swift_project_value_buffer(v69, (uint64_t)qword_2568C60F0);
    v70 = sub_2380BD7F0();
    v71 = sub_2380BDF70();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v72 = 0;
      _os_log_impl(&dword_237FF6000, v70, v71, "Failing transparency checks open since validateProofs is off", v72, 2u);
      MEMORY[0x23B82B830](v72, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v68 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v68();
}

void static TransparencyPolicy.proofExpirationKey.getter(_QWORD *a1@<X8>)
{
  *a1 = &type metadata for TransparencyPolicy;
  a1[1] = &protocol witness table for TransparencyPolicy;
  a1[2] = 0x707845666F6F7270;
  a1[3] = 0xEF6E6F6974617269;
}

uint64_t sub_238024C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_238013814;
  return TransparencyPolicy.evaluate(bundle:context:)(a1, a2);
}

unint64_t sub_238024C84()
{
  unint64_t result;

  result = qword_2568C6118;
  if (!qword_2568C6118)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for TransparencyPolicy.Error, &type metadata for TransparencyPolicy.Error);
    atomic_store(result, (unint64_t *)&qword_2568C6118);
  }
  return result;
}

unint64_t sub_238024CC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C6120;
  if (!qword_2568C6120)
  {
    v1 = type metadata accessor for Release();
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for Release, v1);
    atomic_store(result, (unint64_t *)&qword_2568C6120);
  }
  return result;
}

uint64_t sub_238024D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for TransparencyPolicy(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for TransparencyPolicy(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TransparencyPolicy(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyPolicy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransparencyPolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyPolicy()
{
  return &type metadata for TransparencyPolicy;
}

unint64_t *initializeBufferWithCopyOfBuffer for TransparencyPolicy.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_238024EF8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_238024EF8(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return (unint64_t)(id)result;
}

void destroy for TransparencyPolicy.Error(unint64_t *a1)
{
  sub_238024F1C(*a1);
}

void sub_238024F1C(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
      return;
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }

}

unint64_t *assignWithCopy for TransparencyPolicy.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_238024EF8(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_238024F1C(v4);
  return a1;
}

unint64_t *assignWithTake for TransparencyPolicy.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_238024F1C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyPolicy.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TransparencyPolicy.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_23802504C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_238025068(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_238025078(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyPolicy.Error()
{
  return &type metadata for TransparencyPolicy.Error;
}

uint64_t sub_2380250B8()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9B60);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9B60);
  return sub_2380BD7FC();
}

uint64_t DarwinInit.parameters.getter()
{
  return swift_bridgeObjectRetain();
}

void DarwinInit.securityPolicy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_QWORD *DarwinInit.ensembleCertificateFingerprints.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = sub_23800DCFC(0x632D657275636573, 0xED00006769666E6FLL);
  if ((v3 & 1) == 0)
    return 0;
  sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v23);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6138);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  if (*(_QWORD *)(v22 + 16) && (v4 = sub_23800DCFC(0xD00000000000002ALL, 0x80000002380C8130), (v5 & 1) != 0))
  {
    sub_238016570(*(_QWORD *)(v22 + 56) + 32 * v4, (uint64_t)&v23);
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v24 + 1))
  {
    sub_2380267A8((uint64_t)&v23);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(v22 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = v22 + 40;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      swift_bridgeObjectRetain();
      v10 = sub_2380BD304();
      v12 = v11;
      swift_bridgeObjectRelease();
      if (v12 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_238026C5C(0, v8[2] + 1, 1, v8);
        v14 = v8[2];
        v13 = v8[3];
        if (v14 >= v13 >> 1)
          v8 = sub_238026C5C((_QWORD *)(v13 > 1), v14 + 1, 1, v8);
        v8[2] = v14 + 1;
        v9 = &v8[2 * v14];
        v9[4] = v10;
        v9[5] = v12;
      }
      v7 += 16;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v22 + 16);
  }
  else
  {
    v15 = 0;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = v8[2];
  swift_bridgeObjectRelease();
  if (v16 != v15)
  {
    swift_bridgeObjectRelease();
    if (qword_2568C4E80 != -1)
      swift_once();
    v17 = sub_2380BD808();
    __swift_project_value_buffer(v17, (uint64_t)qword_2568C9B60);
    v18 = sub_2380BD7F0();
    v19 = sub_2380BDF64();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_237FF6000, v18, v19, "Invalid formatted data in com.apple.CloudAttestation.ensembleMembers", v20, 2u);
      MEMORY[0x23B82B830](v20, -1, -1);
    }

    return 0;
  }
  return v8;
}

uint64_t DarwinInit.routingHint.getter()
{
  uint64_t result;
  uint64_t v1;

  result = DarwinInit.secureConfigRoutingHint.getter();
  if (!v1)
    return DarwinInit.cfPrefsRoutingHint.getter();
  return result;
}

uint64_t DarwinInit.secureConfigRoutingHint.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = sub_23800DCFC(0x632D657275636573, 0xED00006769666E6FLL);
  if ((v3 & 1) == 0)
    return 0;
  sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6138);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  if (*(_QWORD *)(v7 + 16) && (v4 = sub_23800DCFC(0xD000000000000026, 0x80000002380C8160), (v5 & 1) != 0))
  {
    sub_238016570(*(_QWORD *)(v7 + 56) + 32 * v4, (uint64_t)&v8);
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
    sub_2380267A8((uint64_t)&v8);
    return 0;
  }
  if (swift_dynamicCast())
    return v7;
  else
    return 0;
}

uint64_t DarwinInit.cfPrefsRoutingHint.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = sub_23800DCFC(0x6E65726566657270, 0xEB00000000736563);
  if ((v3 & 1) == 0)
    return 0;
  sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6148);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(v16 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v5 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(v16 + 8 * v5 + 32);
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_9;
    swift_bridgeObjectRetain();
    v8 = sub_23800DCFC(0x746163696C707061, 0xEE0064695F6E6F69);
    if ((v9 & 1) == 0)
      goto LABEL_8;
    sub_238016570(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v18);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_8;
    if (v16 == 0xD000000000000011 && v17 == 0x80000002380C7EA0)
      break;
    v10 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      goto LABEL_17;
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    if (v4 == ++v5)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_8;
  v11 = sub_23800DCFC(7955819, 0xE300000000000000);
  if ((v12 & 1) == 0)
    goto LABEL_8;
  sub_238016570(*(_QWORD *)(v7 + 56) + 32 * v11, (uint64_t)&v18);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_8;
  if (v16 != 0x44496C6C6563 || v17 != 0xE600000000000000)
  {
    v6 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      goto LABEL_26;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + 16) && (v14 = sub_23800DCFC(0x65756C6176, 0xE500000000000000), (v15 & 1) != 0))
  {
    sub_238016570(*(_QWORD *)(v7 + 56) + 32 * v14, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v19 + 1))
  {
    sub_2380267A8((uint64_t)&v18);
    return 0;
  }
  if (swift_dynamicCast())
    return v16;
  else
    return 0;
}

uint64_t DarwinInit.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  uint64_t v33;
  Swift::String v34;
  char v35;
  _BYTE v36[32];
  uint64_t v37[4];
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_7;
  sub_237FFBA20(*a1, v3);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v6, v7);
  v8 = sub_23800DCFC(0x7079745F656D696DLL, 0xE900000000000065);
  if ((v9 & 1) == 0)
  {
    sub_237FFBAB0(v4, v3);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v6, v7);
    goto LABEL_7;
  }
  v10 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v8);
  v12 = *v10;
  v11 = v10[1];
  swift_bridgeObjectRetain();
  sub_237FFBAB0(v4, v3);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(v6, v7);
  if (v12 == 0xD000000000000010 && v11 == 0x80000002380C8190)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v15 = sub_2380BE1B0();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_7:
    sub_237FFBAB0(v4, v3);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v6, v7);
    sub_238026D68();
    swift_allocError();
    *(_OWORD *)v13 = xmmword_2380BFF30;
LABEL_8:
    *(_BYTE *)(v13 + 16) = 2;
    return swift_willThrow();
  }
LABEL_11:
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_23:
    sub_237FFBAB0(v4, v3);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v6, v7);
    sub_238026D68();
    swift_allocError();
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    goto LABEL_8;
  }
  sub_237FFBA20(v4, v3);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v6, v7);
  v16 = sub_23800DCFC(1701667182, 0xE400000000000000);
  if ((v17 & 1) == 0)
  {
    sub_237FFBAB0(v4, v3);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v6, v7);
    goto LABEL_23;
  }
  v18 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v16);
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain();
  sub_237FFBAB0(v4, v3);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(v6, v7);
  if (v20 == 0x692D6E6977726164 && v19 == 0xEB0000000074696ELL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v21 = sub_2380BE1B0();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
    goto LABEL_23;
LABEL_18:
  v22 = (void *)objc_opt_self();
  v23 = (void *)sub_2380BD358();
  sub_237FFBAB0(v4, v3);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(v6, v7);
  *(_QWORD *)&v38 = 0;
  v24 = objc_msgSend(v22, sel_JSONObjectWithData_options_error_, v23, 0, &v38);

  v25 = (id)v38;
  if (!v24)
  {
    v29 = v25;
    sub_2380BD274();

    return swift_willThrow();
  }
  sub_2380BDFB8();
  swift_unknownObjectRelease();
  sub_238016570((uint64_t)v40, (uint64_t)&v38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6138);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_238026D68();
    swift_allocError();
    *(_OWORD *)v30 = xmmword_2380C0720;
    *(_BYTE *)(v30 + 16) = 2;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  }
  v26 = sub_238025F58(v37[0]);
  if (*(_QWORD *)(v37[0] + 16))
  {
    swift_bridgeObjectRetain();
    v27 = sub_23800DCFC(0xD000000000000016, 0x80000002380C81B0);
    if ((v28 & 1) != 0)
    {
      sub_238016570(*(_QWORD *)(v37[0] + 56) + 32 * v27, (uint64_t)&v38);
    }
    else
    {
      v38 = 0u;
      v39 = 0u;
    }
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  sub_238026DAC((uint64_t)&v38, (uint64_t)v37);
  if (!v37[3])
  {
    sub_2380267A8((uint64_t)&v38);
    v31 = v40;
    goto LABEL_32;
  }
  sub_238026DAC((uint64_t)v37, (uint64_t)v36);
  sub_238026DF4();
  if (swift_dynamicCast())
  {
    sub_2380267A8((uint64_t)&v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);

    v31 = v36;
LABEL_32:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    v32 = 0;
    goto LABEL_33;
  }
  if (!swift_dynamicCast()
    || (DarwinInit.SecureConfigSecurityPolicy.init(rawValue:)(v34), v32 = v35, v35 == 3))
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    sub_2380267A8((uint64_t)v37);
    sub_238026D68();
    swift_allocError();
    *(_QWORD *)v33 = 0xD000000000000016;
    *(_QWORD *)(v33 + 8) = 0x80000002380C81B0;
    *(_BYTE *)(v33 + 16) = 1;
    swift_willThrow();
    sub_2380267A8((uint64_t)&v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return swift_bridgeObjectRelease();
  }
  sub_2380267A8((uint64_t)&v38);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
LABEL_33:
  sub_2380267A8((uint64_t)v37);
  *(_QWORD *)a2 = v26;
  *(_BYTE *)(a2 + 8) = v32;
  return swift_bridgeObjectRelease();
}

unint64_t sub_238025F58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[3];
  _OWORD v45[2];
  __int128 v46;
  _OWORD v47[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61B0);
    v2 = (_QWORD *)sub_2380BE108();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v35 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v34 = (unint64_t)(63 - v3) >> 6;
  v6 = v47;
  v7 = v45;
  v8 = &v41;
  v9 = &v43;
  result = swift_bridgeObjectRetain();
  v36 = 0;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v19 = v36 + 1;
  if (__OFADD__(v36, 1))
    goto LABEL_35;
  if (v19 >= v34)
    goto LABEL_32;
  v20 = *(_QWORD *)(v35 + 8 * v19);
  v21 = v36 + 1;
  if (!v20)
  {
    v21 = v36 + 2;
    if (v36 + 2 >= v34)
      goto LABEL_32;
    v20 = *(_QWORD *)(v35 + 8 * v21);
    if (!v20)
    {
      v21 = v36 + 3;
      if (v36 + 3 >= v34)
        goto LABEL_32;
      v20 = *(_QWORD *)(v35 + 8 * v21);
      if (!v20)
      {
        v21 = v36 + 4;
        if (v36 + 4 >= v34)
          goto LABEL_32;
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            v20 = *(_QWORD *)(v35 + 8 * v22);
            if (v20)
            {
              v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v21 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_36;
              if (v21 >= v34)
                break;
              v20 = *(_QWORD *)(v35 + 8 * v21);
              ++v22;
              if (v20)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_238027BEC();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v36 = v21;
  v37 = (v20 - 1) & v20;
  for (i = __clz(__rbit64(v20)) + (v21 << 6); ; i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v25 = *v23;
    v24 = v23[1];
    sub_238016570(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(_QWORD *)&v46 = v25;
    *((_QWORD *)&v46 + 1) = v24;
    v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    v39 = v25;
    v40 = v24;
    sub_23800ED10(v7, &v38);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28);
    swift_dynamicCast();
    v27 = v39;
    v26 = v40;
    sub_23800ED10(v8, v9);
    sub_23800ED10(v9, v44);
    sub_23800ED10(v44, &v42);
    result = sub_23800DCFC(v27, v26);
    v28 = result;
    if ((v29 & 1) != 0)
    {
      v11 = v9;
      v12 = v8;
      v13 = v1;
      v14 = v7;
      v15 = v6;
      v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v16 = v27;
      v16[1] = v26;
      v6 = v15;
      v7 = v14;
      v1 = v13;
      v8 = v12;
      v9 = v11;
      v17 = (_OWORD *)(v2[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      result = (unint64_t)sub_23800ED10(&v42, v17);
      v5 = v37;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v30 = (uint64_t *)(v2[6] + 16 * result);
    *v30 = v27;
    v30[1] = v26;
    result = (unint64_t)sub_23800ED10(&v42, (_OWORD *)(v2[7] + 32 * result));
    v31 = v2[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_34;
    v2[2] = v33;
    v5 = v37;
    if (!v37)
      goto LABEL_11;
LABEL_10:
    v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

CloudAttestation::DarwinInit::SecureConfigSecurityPolicy_optional __swiftcall DarwinInit.SecureConfigSecurityPolicy.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CloudAttestation::DarwinInit::SecureConfigSecurityPolicy_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2380BE138();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t DarwinInit.SecureConfigSecurityPolicy.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7972726163;
  if (*v0 != 1)
    v1 = 0x72656D6F74737563;
  if (*v0)
    return v1;
  else
    return 1701736302;
}

uint64_t sub_2380263A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_238078168(*a1, *a2);
}

uint64_t sub_2380263B4()
{
  sub_2380BE234();
  sub_2380BDD78();
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

uint64_t sub_238026448()
{
  sub_2380BDD78();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2380264B8()
{
  sub_2380BE234();
  sub_2380BDD78();
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

CloudAttestation::DarwinInit::SecureConfigSecurityPolicy_optional sub_238026548(Swift::String *a1)
{
  return DarwinInit.SecureConfigSecurityPolicy.init(rawValue:)(*a1);
}

void sub_238026554(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x7972726163;
  if (v2 != 1)
  {
    v5 = 0x72656D6F74737563;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701736302;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_2380265A8()
{
  sub_238027260();
  return sub_2380BDE80();
}

uint64_t sub_238026604()
{
  sub_238027260();
  return sub_2380BDE68();
}

unint64_t sub_238026650(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4;

  if (a3)
  {
    if (a3 != 1)
      __asm { BR              X9 }
    v4 = 0;
    sub_2380BE048();
    sub_2380BDD90();
  }
  else
  {
    sub_2380BE048();
    swift_bridgeObjectRelease();
    v4 = 0xD00000000000002DLL;
  }
  sub_2380BDD90();
  sub_2380BDD90();
  return v4;
}

unint64_t sub_23802679C()
{
  uint64_t v0;

  return sub_238026650(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_2380267A8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6140);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_2380267E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61A0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23802753C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2380268F4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61B8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23802762C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_238026A00(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6198);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23802771C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_238026B28(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2380272B8(a1, a2, a3, a4, &qword_2568C6188);
}

_QWORD *sub_238026B3C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6190);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_238027810(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_238026C5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5D98);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_238027904(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_238026D68()
{
  unint64_t result;

  result = qword_2568C6150;
  if (!qword_2568C6150)
  {
    result = MEMORY[0x23B82B770](&unk_2380C08C8, &type metadata for DarwinInit.Error);
    atomic_store(result, (unint64_t *)&qword_2568C6150);
  }
  return result;
}

uint64_t sub_238026DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_238026DF4()
{
  unint64_t result;

  result = qword_2568C6158;
  if (!qword_2568C6158)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2568C6158);
  }
  return result;
}

unint64_t sub_238026E34()
{
  unint64_t result;

  result = qword_2568C6160;
  if (!qword_2568C6160)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for DarwinInit.SecureConfigSecurityPolicy, &type metadata for DarwinInit.SecureConfigSecurityPolicy);
    atomic_store(result, (unint64_t *)&qword_2568C6160);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DarwinInit(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DarwinInit(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for DarwinInit(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DarwinInit(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DarwinInit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinInit()
{
  return &type metadata for DarwinInit;
}

uint64_t getEnumTagSinglePayload for DarwinInit.SecureConfigSecurityPolicy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DarwinInit.SecureConfigSecurityPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2380270A8 + 4 * byte_2380C0739[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2380270DC + 4 * byte_2380C0734[v4]))();
}

uint64_t sub_2380270DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2380270E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2380270ECLL);
  return result;
}

uint64_t sub_2380270F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238027100);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_238027104(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23802710C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DarwinInit.SecureConfigSecurityPolicy()
{
  return &type metadata for DarwinInit.SecureConfigSecurityPolicy;
}

uint64_t sub_23802712C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for DarwinInit.Error(uint64_t a1)
{
  return sub_238027154(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_238027154(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s16CloudAttestation10DarwinInitV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23802712C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DarwinInit.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23802712C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_238027154(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DarwinInit.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_238027154(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for DarwinInit.Error()
{
  return &type metadata for DarwinInit.Error;
}

unint64_t sub_238027260()
{
  unint64_t result;

  result = qword_2568C6168;
  if (!qword_2568C6168)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for DarwinInit.SecureConfigSecurityPolicy, &type metadata for DarwinInit.SecureConfigSecurityPolicy);
    atomic_store(result, (unint64_t *)&qword_2568C6168);
  }
  return result;
}

_QWORD *sub_2380272A4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2380272B8(a1, a2, a3, a4, &qword_2568C61A8);
}

_QWORD *sub_2380272B8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
          memmove(v13, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2380279F4(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2380273E4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23802740C(a1, a2, a3, a4, &qword_2568C6170, &qword_2568C6178);
}

_QWORD *sub_2380273F8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23802740C(a1, a2, a3, a4, &qword_2568C6180, &qword_2568C5BA8);
}

_QWORD *sub_23802740C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[6 * v11 + 4])
          memmove(v15, a4 + 4, 48 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_238027AE4(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_23802753C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_23802762C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_23802771C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238027810(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238027904(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_2380279F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238027AE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 48 * a1 + 32;
    v7 = a3 + 48 * v5;
    if (v6 >= v7 || v6 + 48 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238027BEC()
{
  return swift_release();
}

uint64_t sub_238027BF8()
{
  uint64_t v0;

  v0 = sub_2380BDAB4();
  __swift_allocate_value_buffer(v0, qword_2568C61C0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C61C0);
  return sub_2380BDAA8();
}

uint64_t static ProvisioningCertificate.ChassisID.objectIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2568C4E88 != -1)
    swift_once();
  v2 = sub_2380BDAB4();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2568C61C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t ProvisioningCertificate.ChassisID.string.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ProvisioningCertificate.ChassisID.init(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v4 = sub_2380BDD48();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2380BDA54();
  v9 = sub_23800A2BC(v5, v6, v7, v8);
  v11 = v10;
  swift_unknownObjectRelease();
  sub_2380BDD3C();
  v12 = sub_2380BDD18();
  v14 = v13;
  sub_237FFBAB0((uint64_t)v9, v11);
  if (v14)
  {
    v15 = sub_2380BDA60();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
    *a2 = v12;
    a2[1] = v14;
  }
  else
  {
    sub_2380BDB20();
    sub_2380284B0();
    swift_allocError();
    sub_2380BDB14();
    swift_willThrow();
    v17 = sub_2380BDA60();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
  }
  return result;
}

uint64_t ProvisioningCertificate.ChassisID.init<A>(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  char *v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t result;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;

  v39 = a3;
  v45 = sub_2380BDB20();
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2380BDD48();
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2380BDA30();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2380BDA60();
  v43 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v42 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v38 - v16;
  v46 = v10;
  v47 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  v48 = a2;
  sub_2380BDFD0();
  sub_2380BDB80();
  v18 = v49;
  sub_2380BDB98();
  if (v18)
  {
    v19 = v18;
    v20 = v45;
  }
  else
  {
    v24 = v39;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v42, v17, v13);
    v25 = sub_2380BDA54();
    v29 = sub_23800A2BC(v25, v26, v27, v28);
    v31 = v30;
    swift_unknownObjectRelease();
    sub_2380BDD3C();
    v32 = sub_2380BDD18();
    v34 = v33;
    sub_237FFBAB0((uint64_t)v29, v31);
    if (v34)
    {
      v35 = *(void (**)(char *, uint64_t))(v43 + 8);
      v35(v42, v13);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
      result = ((uint64_t (*)(char *, uint64_t))v35)(v17, v13);
      *v24 = v32;
      v24[1] = v34;
      return result;
    }
    sub_2380284B0();
    v20 = v45;
    v19 = (void *)swift_allocError();
    sub_2380BDB14();
    swift_willThrow();
    v37 = *(void (**)(char *, uint64_t))(v43 + 8);
    v37(v42, v13);
    v37(v17, v13);
  }
  v50 = v19;
  v21 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B60);
  v22 = v44;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v20);
    v50 = v19;
    sub_2380284B0();
    swift_allocError();
    v23 = v19;
    swift_dynamicCast();
  }
  else
  {
    swift_getErrorValue();
    sub_2380BE1EC();
    sub_2380284B0();
    swift_allocError();
    sub_2380BDB08();
    swift_bridgeObjectRelease();
  }
  swift_willThrow();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
}

uint64_t ProvisioningCertificate.ChassisID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2380BDD78();
  return swift_bridgeObjectRelease();
}

uint64_t static ProvisioningCertificate.ChassisID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2380BE1B0();
}

uint64_t ProvisioningCertificate.ChassisID.hashValue.getter()
{
  sub_2380BE234();
  swift_bridgeObjectRetain();
  sub_2380BDD78();
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

uint64_t sub_238028390()
{
  sub_2380BE234();
  swift_bridgeObjectRetain();
  sub_2380BDD78();
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

uint64_t sub_2380283E8()
{
  swift_bridgeObjectRetain();
  sub_2380BDD78();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23802842C()
{
  sub_2380BE234();
  swift_bridgeObjectRetain();
  sub_2380BDD78();
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

uint64_t sub_238028480(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2380BE1B0();
}

unint64_t sub_2380284B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C5B68;
  if (!qword_2568C5B68)
  {
    v1 = sub_2380BDB20();
    result = MEMORY[0x23B82B770](MEMORY[0x24BEB3048], v1);
    atomic_store(result, (unint64_t *)&qword_2568C5B68);
  }
  return result;
}

unint64_t sub_2380284FC()
{
  unint64_t result;

  result = qword_2568C61D8;
  if (!qword_2568C61D8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for ProvisioningCertificate.ChassisID, &type metadata for ProvisioningCertificate.ChassisID);
    atomic_store(result, (unint64_t *)&qword_2568C61D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvisioningCertificate.ChassisID()
{
  return &type metadata for ProvisioningCertificate.ChassisID;
}

uint64_t sub_238028550(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;

  v2 = sub_2380BD844();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0];
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  sub_238001820(&qword_2568C6230, v3, MEMORY[0x24BDC6300]);
  result = sub_2380BDE08();
  v7 = v21;
  v8 = v22;
  v9 = *(_QWORD *)(v21 + 16);
  if (v22 == v9)
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_3:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v20 = xmmword_2380BEAC0;
    while (v8 < v9)
    {
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_14;
      v12 = *(_BYTE *)(v7 + 32 + v8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = v20;
      *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE4260];
      *(_QWORD *)(v13 + 64) = MEMORY[0x24BEE42B0];
      *(_BYTE *)(v13 + 32) = v12;
      v14 = sub_2380BDD30();
      v16 = v15;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2380267E8(0, v10[2] + 1, 1, v10);
        v10 = (_QWORD *)result;
      }
      v18 = v10[2];
      v17 = v10[3];
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)sub_2380267E8((_QWORD *)(v17 > 1), v18 + 1, 1, v10);
        v10 = (_QWORD *)result;
      }
      v10[2] = v18 + 1;
      v19 = &v10[2 * v18];
      v19[4] = v14;
      v19[5] = v16;
      v9 = *(_QWORD *)(v7 + 16);
      ++v8;
      if (v11 == v9)
        goto LABEL_3;
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_238028748(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[10];
  _QWORD *v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = sub_2380BD3A0();
  v25[7] = *(_QWORD *)(v2 - 8);
  v25[8] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v25[6] = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_2380BDA60();
  v29 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v25 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  v30 = MEMORY[0x24BEE4AF8];
  sub_238075D88(0, v10, 0);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = v30;
  v25[9] = a1;
  v26 = (_QWORD *)(a1 + 56);
  v13 = -1;
  v14 = -1 << *(_BYTE *)(a1 + 32);
  if (-v14 < 64)
    v13 = ~(-1 << -(char)v14);
  v15 = v13 & v11;
  v27 = (unint64_t)(63 - v14) >> 6;
  v28 = v9;
  v25[5] = v4;
  v25[3] = v10;
  if (v10)
  {
    swift_bridgeObjectRetain();
    v25[2] = v7;
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      goto LABEL_21;
    }
    if (v27 <= 1)
    {
      __break(1u);
      JUMPOUT(0x238028DF4);
    }
    v17 = v26[1];
    v18 = 1;
    if (v17)
      goto LABEL_20;
    v18 = 2;
    if (v27 > 2)
    {
      v17 = v26[2];
      if (!v17)
      {
        v18 = 3;
        if (v27 <= 3)
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        v17 = v26[3];
        if (!v17)
        {
          v18 = 4;
          if (v27 <= 4)
          {
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          v17 = v26[4];
          if (!v17)
          {
            v19 = 5;
            if (v27 <= 5)
            {
LABEL_48:
              __break(1u);
              JUMPOUT(0x238028E18);
            }
            v17 = v26[5];
            if (v17)
            {
              v18 = 5;
              goto LABEL_20;
            }
            do
            {
              v18 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_44;
              if (v18 >= v27)
                goto LABEL_45;
              v17 = v26[v18];
              ++v19;
            }
            while (!v17);
          }
        }
      }
LABEL_20:
      v16 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_21:
      __asm { BR              X9 }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  swift_bridgeObjectRetain();
  if (v15)
  {
    v20 = __clz(__rbit64(v15));
    goto LABEL_39;
  }
  if (v27 > 1)
  {
    v21 = v26[1];
    v22 = 1;
    if (v21)
      goto LABEL_38;
    v22 = 2;
    if (v27 <= 2)
      goto LABEL_40;
    v21 = v26[2];
    if (v21)
      goto LABEL_38;
    v22 = 3;
    if (v27 <= 3)
      goto LABEL_40;
    v21 = v26[3];
    if (v21)
      goto LABEL_38;
    v22 = 4;
    if (v27 <= 4)
      goto LABEL_40;
    v21 = v26[4];
    if (v21)
    {
LABEL_38:
      v20 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_39:
      __asm { BR              X9 }
    }
    v23 = 5;
    if (v27 > 5)
    {
      v21 = v26[5];
      if (!v21)
      {
        while (1)
        {
          v22 = v23 + 1;
          if (__OFADD__(v23, 1))
            goto LABEL_43;
          if (v22 >= v27)
            goto LABEL_40;
          v21 = v26[v22];
          ++v23;
          if (v21)
            goto LABEL_38;
        }
      }
      v22 = 5;
      goto LABEL_38;
    }
  }
LABEL_40:
  swift_release();
  return v12;
}

uint64_t sub_238028E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_2380BD988();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_238001820(&qword_2568C5DA8, v4, MEMORY[0x24BDC6AE8]);
  sub_2380BD838();
  result = sub_2380BDFC4();
  if (__OFSUB__(v6 >> 1, v7))
  {
    __break(1u);
  }
  else
  {
    sub_2380BD814();
    swift_unknownObjectRelease();
    sub_2380BD820();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return result;
}

void sub_238028F5C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  v9[1] = a1;
  v9[5] = *MEMORY[0x24BDAC8D0];
  v1 = sub_2380BD988();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_2380BDBF8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BDBEC();
  type metadata accessor for Release();
  sub_238001820(&qword_2568C61E0, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
  sub_2380BDBE0();
  v6 = sub_2380BDBC8();
  sub_23800A2B8(v6);
  v8 = v7;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_238001820(&qword_2568C5DA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_2380BD838();
  __asm { BR              X10 }
}

uint64_t Release.digest<A>(using:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[4];

  v0 = sub_2380BDBF8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BDBEC();
  type metadata accessor for Release();
  sub_238001820(&qword_2568C61E0, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
  sub_2380BDBE0();
  v4 = sub_2380BDBC8();
  v5 = sub_23800A2B8(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9[1] = v5;
  v9[2] = v7;
  sub_23800915C();
  sub_2380BD82C();
  return sub_237FFBAB0(v5, v7);
}

uint64_t Release.init(bundle:evaluateTrust:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v9;

  v4 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_238013570(a1, (uint64_t)v6, v7);
  sub_23802AA78((uint64_t)v6, 0, a2);
  return sub_237FFD540(a1, type metadata accessor for AttestationBundle);
}

void Release.jsonString.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = sub_2380BD1B4();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8];
  MEMORY[0x24BDAC7A8](v0);
  sub_2380BD1E4();
  swift_allocObject();
  sub_2380BD1D8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61E8);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2380BEAF0;
  sub_2380BD1A8();
  sub_2380BD19C();
  sub_238001820(&qword_2568C61F0, v1, MEMORY[0x24BDCB2C8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61F8);
  sub_23800A568(&qword_2568C6200, &qword_2568C61F8, MEMORY[0x24BEE12C8]);
  sub_2380BE00C();
  sub_2380BD1C0();
  type metadata accessor for Release();
  sub_238001820(&qword_2568C6208, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
  sub_2380BD1CC();
  __asm { BR              X10 }
}

uint64_t Release.version.getter()
{
  return 1;
}

uint64_t Release.apTicket.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2380BDA60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Release.cryptexTickets.getter()
{
  type metadata accessor for Release();
  return swift_bridgeObjectRetain();
}

uint64_t sub_238029954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v8 = sub_2380BD3A0();
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v26 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2380BDA60();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v30 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v29 = (char *)&v20 - v13;
  v20 = a1;
  v21 = a2;
  sub_23802FBC8(a1, a2);
  v22 = a4;
  sub_2380BDA3C();
  v14 = *(_QWORD *)(a3 + 16);
  v31 = MEMORY[0x24BEE4AF8];
  sub_238075D88(0, v14, 0);
  v24 = a3;
  v25 = v10;
  v23 = v14;
  if (v14)
  {
    v15 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    if (v15)
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x238029E90);
  }
  v16 = v31;
  swift_bridgeObjectRetain();
  v17 = *(_QWORD *)(v24 + 16);
  if (v17 != v23)
  {
    if (v17 <= v23)
    {
      __break(1u);
      JUMPOUT(0x238029EACLL);
    }
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v18 = sub_23802FE3C(v16);
  swift_release();
  sub_237FFBAB0(v20, v21);
  swift_bridgeObjectRelease();
  result = type metadata accessor for Release();
  *(_QWORD *)(v22 + *(int *)(result + 20)) = v18;
  return result;
}

uint64_t Release.init<A>(apTicket:cryptexTickets:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  sub_23802FBC8(a1, a2);
  sub_2380BDA3C();
  v12 = sub_2380BDA60();
  v14 = sub_238007CDC((void (*)(char *, char *))sub_238029FB8, 0, a4, v12, MEMORY[0x24BEE4078], a5, MEMORY[0x24BEE40A8], v13);
  v15 = sub_23802FE3C(v14);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a3, a4);
  result = type metadata accessor for Release();
  *(_QWORD *)(a6 + *(int *)(result + 20)) = v15;
  return result;
}

uint64_t sub_238029FB8(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  sub_237FFBA20(*a1, v2);
  sub_23802FBC8(v1, v2);
  sub_237FFBAB0(v1, v2);
  return sub_2380BDA3C();
}

uint64_t Release.init<A>(apTicket:cryptexTickets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2380BDA60();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80];
  v13 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a4, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  sub_238001820(&qword_2568C5C20, v12, MEMORY[0x24BEB2F90]);
  v14 = sub_2380BDF28();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v11);
  result = type metadata accessor for Release();
  *(_QWORD *)(a4 + *(int *)(result + 20)) = v14;
  return result;
}

uint64_t sub_23802A158@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v30;

  v5 = *(_QWORD *)(a3 + 16);
  v30 = MEMORY[0x24BEE4AF8];
  sub_238075D34(0, v5, 0);
  if (v5)
  {
    v6 = *(_QWORD *)(a3 + 16);
    result = swift_bridgeObjectRetain();
    v8 = 0;
    v9 = (unsigned __int8 *)(a3 + 48);
    while (v6 != v8)
    {
      if (v8 >= *(_QWORD *)(a3 + 16))
      {
        __break(1u);
        goto LABEL_20;
      }
      v10 = *v9;
      v12 = *((_QWORD *)v9 - 2);
      v11 = *((_QWORD *)v9 - 1);
      result = sub_237FFBA20(v12, v11);
      if (v10 == 4)
        goto LABEL_21;
      v14 = *(_QWORD *)(v30 + 16);
      v13 = *(_QWORD *)(v30 + 24);
      if (v14 >= v13 >> 1)
        result = sub_238075D34(v13 > 1, v14 + 1, 1);
      ++v8;
      *(_QWORD *)(v30 + 16) = v14 + 1;
      v15 = v30 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v12;
      *(_QWORD *)(v15 + 40) = v11;
      v9 += 24;
      if (v5 == v8)
        goto LABEL_11;
    }
    goto LABEL_21;
  }
  result = swift_bridgeObjectRetain();
LABEL_11:
  v16 = *(_QWORD *)(a3 + 16);
  v17 = v16 - v5;
  if (v16 == v5)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v18 = sub_23802FDA4(v30);
    swift_release();
    sub_23802FBC8(a1, a2);
    sub_2380BDA3C();
    v19 = sub_238028748(v18);
    v20 = sub_23802FE3C(v19);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = type metadata accessor for Release();
    *(_QWORD *)(a4 + *(int *)(result + 20)) = v20;
    return result;
  }
  if (v16 > v5)
  {
    v21 = (unint64_t *)(a3 + 24 * v5 + 40);
    do
    {
      v22 = *(v21 - 1);
      v23 = *v21;
      sub_237FFBA20(v22, *v21);
      v25 = *(_QWORD *)(v30 + 16);
      v24 = *(_QWORD *)(v30 + 24);
      if (v25 >= v24 >> 1)
        sub_238075D34(v24 > 1, v25 + 1, 1);
      v21 += 3;
      *(_QWORD *)(v30 + 16) = v25 + 1;
      v26 = v30 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v22;
      *(_QWORD *)(v26 + 40) = v23;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t Release.init<A>(apTicket:cryptexTickets:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a1;
  v10 = a1[1];
  v11 = sub_238007CDC((void (*)(char *, char *))sub_238007CAC, 0, a3, MEMORY[0x24BDCDDE8], MEMORY[0x24BEE4078], a4, MEMORY[0x24BEE40A8], a5);
  v12 = sub_23802FDA4(v11);
  swift_bridgeObjectRelease();
  sub_23802FBC8(v9, v10);
  sub_2380BDA3C();
  v13 = sub_238028748(v12);
  v14 = sub_23802FE3C(v13);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(v9, v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a6 + *(int *)(type metadata accessor for Release() + 20)) = v14;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t Release.init(tickets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  v50 = (_QWORD *)MEMORY[0x24BEE4B00];
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    if (!v2[2] || (v32 = sub_23800DFC0(0), (v33 & 1) == 0) || (v34 = *(_QWORD **)(v2[7] + 8 * v32), !v34[2]))
    {
      swift_release();
      sub_23802FF64();
      swift_allocError();
      return swift_willThrow();
    }
    v35 = v34[4];
    v36 = v34[5];
    if (!v2[2])
    {
      v39 = MEMORY[0x24BEE4AF8];
      v41 = MEMORY[0x24BEE4AF8];
      goto LABEL_29;
    }
    v37 = sub_23800DFC0(1u);
    if ((v38 & 1) != 0)
    {
      v39 = *(_QWORD *)(v2[7] + 8 * v37);
      swift_bridgeObjectRetain();
      if (!v2[2])
        goto LABEL_28;
    }
    else
    {
      v39 = MEMORY[0x24BEE4AF8];
      if (!v2[2])
        goto LABEL_28;
    }
    v42 = sub_23800DFC0(2u);
    if ((v43 & 1) != 0)
    {
      v41 = *(_QWORD *)(v2[7] + 8 * v42);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
LABEL_28:
    v41 = MEMORY[0x24BEE4AF8];
LABEL_29:
    sub_237FFBA20(v35, v36);
    sub_237FFBA20(v35, v36);
    sub_23802E928(v41);
    if (v2[2] && (v44 = sub_23800DFC0(3u), (v45 & 1) != 0))
    {
      v46 = *(_QWORD *)(v2[7] + 8 * v44);
      swift_bridgeObjectRetain();
    }
    else
    {
      v46 = MEMORY[0x24BEE4AF8];
    }
    swift_release();
    sub_23802E928(v46);
    sub_23802A158(v35, v36, v39, a2);
    return sub_237FFBAB0(v35, v36);
  }
  v4 = (unsigned __int8 *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v8 = *v4;
    v9 = sub_23800DFC0(*v4);
    v11 = v2[2];
    v12 = (v10 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    v15 = v10;
    v49 = v3;
    v16 = v2;
    v17 = v2[3];
    sub_237FFBA20(v7, v6);
    if (v17 < v13)
    {
      sub_23802D77C(v13, 1);
      v16 = v50;
      v18 = sub_23800DFC0(v8);
      if ((v15 & 1) != (v19 & 1))
        goto LABEL_36;
      v14 = v18;
    }
    if ((v15 & 1) != 0)
    {
      v2 = v16;
      v20 = v16[7];
      v21 = *(_QWORD **)(v20 + 8 * v14);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v20 + 8 * v14) = v21;
      v48 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v21 = sub_2380272A4(0, v21[2] + 1, 1, v21);
        *(_QWORD *)(v20 + 8 * v14) = v21;
      }
      v23 = v49;
      v25 = v21[2];
      v24 = v21[3];
      v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        v27 = sub_2380272A4((_QWORD *)(v24 > 1), v25 + 1, 1, v21);
        v26 = v25 + 1;
        v21 = v27;
        *(_QWORD *)(v48 + 8 * v14) = v27;
      }
      v21[2] = v26;
      v5 = &v21[3 * v25];
      v5[4] = v7;
      v5[5] = v6;
      *((_BYTE *)v5 + 48) = v8;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61A8);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_2380BEAC0;
      *(_QWORD *)(v28 + 32) = v7;
      *(_QWORD *)(v28 + 40) = v6;
      *(_BYTE *)(v28 + 48) = v8;
      v16[(v14 >> 6) + 8] |= 1 << v14;
      *(_BYTE *)(v16[6] + v14) = v8;
      *(_QWORD *)(v16[7] + 8 * v14) = v28;
      v29 = v16[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        goto LABEL_35;
      v2 = v16;
      v16[2] = v31;
      v23 = v49;
    }
    v4 += 24;
    v3 = v23 - 1;
    if (!v3)
      goto LABEL_16;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  result = sub_2380BE1E0();
  __break(1u);
  return result;
}

uint64_t Release.init<A>(serializedData:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v4 = sub_2380BDA30();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Release();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_2380BDFD0();
  _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0();
  sub_238001820(&qword_2568C6228, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
  sub_2380BDB98();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v11, a2);
}

uint64_t Release.init(bundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v9;

  v4 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_238013570(a1, (uint64_t)v6, v7);
  sub_23802AA78((uint64_t)v6, 0, a2);
  return sub_237FFD540(a1, type metadata accessor for AttestationBundle);
}

uint64_t sub_23802AA78@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  __int128 v42;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  sub_237FFBA20(v7, v8);
  sub_2380068C4(v7, v8);
  v10 = v9;
  v12 = v11;
  v39 = v9;
  v40 = v11;
  v41 = 0;
  Image4Manifest.canonicalize(evaluateTrust:)();
  if (v3)
  {
    sub_237FFD540(a1, type metadata accessor for Proto_AttestationBundle);
    return sub_237FFBAB0(v39, v40);
  }
  else
  {
    sub_237FFBAB0(v10, v12);
    v35 = *((_QWORD *)&v42 + 1);
    v14 = v42;
    sub_2380795C0(a2 & 1, (uint64_t)&v37);
    v15 = v38;
    if (v38 == 255)
    {
      v21 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v34 = v14;
      v16 = v37;
      *(_QWORD *)&v42 = v37;
      BYTE8(v42) = v38 & 1;
      v17 = sub_2380797B8();
      v18 = v15;
      v19 = v17;
      sub_238030954(v16, v18);
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v33 = a3;
        v36 = MEMORY[0x24BEE4AF8];
        sub_238075D34(0, v20, 0);
        v21 = v36;
        v22 = (_BYTE *)(v19 + 48);
        do
        {
          v23 = *((_QWORD *)v22 - 2);
          v24 = *((_QWORD *)v22 - 1);
          v25 = *v22;
          v39 = v23;
          v40 = v24;
          v41 = v25;
          sub_237FFBA20(v23, v24);
          Image4Manifest.canonicalize(evaluateTrust:)();
          sub_237FFBAB0(v23, v24);
          v26 = v42;
          v28 = *(_QWORD *)(v36 + 16);
          v27 = *(_QWORD *)(v36 + 24);
          if (v28 >= v27 >> 1)
          {
            v32 = v42;
            sub_238075D34(v27 > 1, v28 + 1, 1);
            v26 = v32;
          }
          v22 += 24;
          *(_QWORD *)(v36 + 16) = v28 + 1;
          *(_OWORD *)(v36 + 16 * v28 + 32) = v26;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        a3 = v33;
      }
      else
      {
        swift_bridgeObjectRelease();
        v21 = MEMORY[0x24BEE4AF8];
      }
      v14 = v34;
    }
    v29 = sub_23802FDA4(v21);
    swift_bridgeObjectRelease();
    sub_237FFBA20(v14, v35);
    sub_23802FBC8(v14, v35);
    sub_2380BDA3C();
    v30 = sub_238028748(v29);
    v31 = sub_23802FE3C(v30);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v14, v35);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v14, v35);
    *(_QWORD *)(a3 + *(int *)(type metadata accessor for Release() + 20)) = v31;
    return sub_237FFD540(a1, type metadata accessor for Proto_AttestationBundle);
  }
}

uint64_t Release.init(bundle:evaluateTrust:requireCryptex1:)@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v11;

  v6 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_238013570(a1, (uint64_t)v8, v9);
  sub_23802AA78((uint64_t)v8, a2, a3);
  return sub_237FFD540(a1, type metadata accessor for AttestationBundle);
}

uint64_t Release.serializedData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_2380BDBF8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BDBEC();
  type metadata accessor for Release();
  sub_238001820(&qword_2568C61E0, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
  sub_2380BDBE0();
  v4 = sub_2380BDBC8();
  v5 = sub_23800A2B8(v4);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t type metadata accessor for Release()
{
  uint64_t result;

  result = qword_2568C62A0;
  if (!qword_2568C62A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Release.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_2380BDA60();
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  sub_2380BDCB8();
  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_23802F68C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static Release.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((sub_2380BDA48() & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for Release() + 20);
  return sub_23802B050(*(_QWORD *)(a1 + v4), *(_QWORD *)(a2 + v4));
}

uint64_t sub_23802B050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = sub_2380BDA60();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v33 - v9;
  result = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v33 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v12;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
    v27 = sub_2380BDCAC();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v4);
      return 0;
    }
    v30 = ~v28;
    while (1)
    {
      v26(v7, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      sub_238001820(&qword_2568C6320, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F98]);
      v31 = sub_2380BDCE8();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v7, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v10, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v32)(v10, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v20 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return 1;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return 1;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 3;
  if (v23 >= v36)
    return 1;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Release.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  sub_2380BE234();
  sub_2380BDA60();
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  sub_2380BDCB8();
  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_23802F68C(v3, v1);
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

uint64_t sub_23802B43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5[4];

  sub_2380BE234();
  sub_2380BDA60();
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  sub_2380BDCB8();
  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  sub_23802F68C(v5, v3);
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

uint64_t sub_23802B4D8(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  sub_2380BDA60();
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  sub_2380BDCB8();
  v5 = *(_QWORD *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  sub_23802F68C(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23802B558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v6[4];

  sub_2380BE234();
  sub_2380BDA60();
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  sub_2380BDCB8();
  v4 = *(_QWORD *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  sub_23802F68C(v6, v4);
  swift_bridgeObjectRelease();
  return sub_2380BE264();
}

uint64_t sub_23802B5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_2380BDA48() & 1) != 0)
    return sub_23802B050(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a2 + *(int *)(a3 + 20)));
  else
    return 0;
}

uint64_t Release.sha256.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;

  v0 = sub_2380BD844();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0];
  v2 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x24BDAC7A8](v0);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v23 - v6;
  sub_238028F5C((uint64_t)&v23 - v6);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v0);
  sub_238001820(&qword_2568C6230, v1, MEMORY[0x24BDC6300]);
  result = sub_2380BDE08();
  v9 = v28;
  v10 = v29;
  v11 = v28[2];
  v25 = v2;
  v26 = v0;
  v24 = v7;
  if (v29 == v11)
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_3:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v26);
    v28 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
    sub_23800A568((unint64_t *)&qword_2568C5E68, &qword_2568C5E60, MEMORY[0x24BEE12B0]);
    v13 = sub_2380BDCD0();
    swift_bridgeObjectRelease();
    return v13;
  }
  else
  {
    if (v29 < v11)
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v27 = xmmword_2380BEAC0;
      v14 = v29;
      while ((v10 & 0x8000000000000000) == 0)
      {
        if (v14 >= v9[2])
          goto LABEL_15;
        v15 = *((_BYTE *)v9 + v14 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = v27;
        *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE4260];
        *(_QWORD *)(v16 + 64) = MEMORY[0x24BEE42B0];
        *(_BYTE *)(v16 + 32) = v15;
        v17 = sub_2380BDD30();
        v19 = v18;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_2380267E8(0, v12[2] + 1, 1, v12);
          v12 = (_QWORD *)result;
        }
        v21 = v12[2];
        v20 = v12[3];
        if (v21 >= v20 >> 1)
        {
          result = (uint64_t)sub_2380267E8((_QWORD *)(v20 > 1), v21 + 1, 1, v12);
          v12 = (_QWORD *)result;
        }
        ++v14;
        v12[2] = v21 + 1;
        v22 = &v12[2 * v21];
        v22[4] = v17;
        v22[5] = v19;
        if (v11 == v14)
          goto LABEL_3;
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

unint64_t Release.description.getter()
{
  sub_2380BE048();
  swift_bridgeObjectRelease();
  Release.sha256.getter();
  sub_2380BDD90();
  swift_bridgeObjectRelease();
  sub_2380BDD90();
  return 0xD000000000000010;
}

uint64_t sub_23802B95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_2380BD844();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 0;
  v8 = 0xE000000000000000;
  sub_2380BE048();
  sub_2380BDD90();
  sub_238028F5C((uint64_t)v3);
  v4 = sub_238028550((uint64_t)v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v6 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
  sub_23800A568((unint64_t *)&qword_2568C5E68, &qword_2568C5E60, MEMORY[0x24BEE12B0]);
  sub_2380BDCD0();
  swift_bridgeObjectRelease();
  sub_2380BDD90();
  swift_bridgeObjectRelease();
  sub_2380BDD90();
  return v7;
}

uint64_t Release.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = type metadata accessor for Release();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_238013570(v1, (uint64_t)v5, v6);
  v7 = sub_23802FFA8((uint64_t)v5);
  sub_23802BB74(a1, v7, v8, v9, v10);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23802BB74(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[4];
  char v14;
  char v15;
  char v16;

  v13[1] = a3;
  v13[2] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6308);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_238030864();
  sub_2380BE288();
  v16 = 0;
  sub_2380BE180();
  if (!v5)
  {
    v15 = 1;
    sub_2380BE174();
    v13[3] = a5;
    v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
    sub_2380308A8();
    sub_2380BE18C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_23802BCE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_238013570(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  v5 = sub_23802FFA8((uint64_t)v4);
  sub_23802BB74(a1, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23802BDA0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;

  v0 = sub_2380BD844();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0];
  v2 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x24BDAC7A8](v0);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v23 - v6;
  sub_2380BDA54();
  sub_238028E38();
  swift_unknownObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v0);
  sub_238001820(&qword_2568C6230, v1, MEMORY[0x24BDC6300]);
  result = sub_2380BDE08();
  v9 = v28;
  v10 = v29;
  v11 = v28[2];
  v25 = v2;
  v26 = v0;
  v24 = v7;
  if (v29 == v11)
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_3:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v26);
    v28 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
    sub_23800A568((unint64_t *)&qword_2568C5E68, &qword_2568C5E60, MEMORY[0x24BEE12B0]);
    v13 = sub_2380BDCD0();
    swift_bridgeObjectRelease();
    return v13;
  }
  else
  {
    if (v29 < v11)
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v27 = xmmword_2380BEAC0;
      v14 = v29;
      while ((v10 & 0x8000000000000000) == 0)
      {
        if (v14 >= v9[2])
          goto LABEL_15;
        v15 = *((_BYTE *)v9 + v14 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = v27;
        *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE4260];
        *(_QWORD *)(v16 + 64) = MEMORY[0x24BEE42B0];
        *(_BYTE *)(v16 + 32) = v15;
        v17 = sub_2380BDD30();
        v19 = v18;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_2380267E8(0, v12[2] + 1, 1, v12);
          v12 = (_QWORD *)result;
        }
        v21 = v12[2];
        v20 = v12[3];
        if (v21 >= v20 >> 1)
        {
          result = (uint64_t)sub_2380267E8((_QWORD *)(v20 > 1), v21 + 1, 1, v12);
          v12 = (_QWORD *)result;
        }
        ++v14;
        v12[2] = v21 + 1;
        v22 = &v12[2 * v21];
        v22[4] = v17;
        v22[5] = v19;
        if (v11 == v14)
          goto LABEL_3;
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23802C03C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x74656B6369547061;
  if (*v0 != 1)
    v1 = 0x5478657470797263;
  if (*v0)
    return v1;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_23802C0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_238030CC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23802C0C8()
{
  return 0;
}

void sub_23802C0D4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23802C0E0()
{
  sub_238030864();
  return sub_2380BE2A0();
}

uint64_t sub_23802C108()
{
  sub_238030864();
  return sub_2380BE2AC();
}

uint64_t sub_23802C130(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23802BB74(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_23802C14C()
{
  return 1;
}

uint64_t sub_23802C154()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t sub_23802C194()
{
  return sub_2380BE240();
}

uint64_t sub_23802C1B8()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t Release.serialize(into:withIdentifier:)()
{
  return sub_2380BDBD4();
}

uint64_t sub_23802C238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_2380BDA30();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 1;
  result = sub_2380BDBE0();
  if (!v2)
  {
    sub_2380BDA60();
    sub_2380BDBE0();
    v10 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for Release() + 20));
    swift_bridgeObjectRetain();
    sub_2380BD9C4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C62F8);
    sub_23800A568(&qword_2568C6300, &qword_2568C62F8, MEMORY[0x24BEE1718]);
    sub_2380BDBBC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Release.init(derEncoded:withIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for Release();
  sub_2380BDC34();
  v4 = sub_2380BDA30();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
  v5 = sub_2380BDAFC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t sub_23802C430@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v21 = a1;
  v1 = sub_2380BDA60();
  v2 = *(_QWORD *)(v1 - 8);
  v23 = v1;
  v24 = v2;
  MEMORY[0x24BDAC7A8](v1);
  v22 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_2380BDA30();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v9);
  sub_2380BDB80();
  v10 = v25;
  result = sub_2380BDB8C();
  if (!v10)
  {
    v25 = v8;
    v20 = v5;
    v13 = v22;
    v12 = v23;
    v14 = v24;
    v15 = v26;
    if (v26 == 1)
    {
      sub_2380BDB80();
      sub_2380BDB8C();
      v16 = v25;
      sub_2380BD9C4();
      v17 = sub_2380BDC04();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v4);
      v18 = v21;
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v21, v13, v12);
      v19 = sub_23802FE3C(v17);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v18 + *(int *)(type metadata accessor for Release() + 20)) = v19;
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v13, v12);
    }
    else
    {
      v26 = 0;
      v27 = 0xE000000000000000;
      sub_2380BE048();
      swift_bridgeObjectRelease();
      v26 = 0xD000000000000015;
      v27 = 0x80000002380C83F0;
      v28 = v15;
      sub_2380BE1A4();
      sub_2380BDD90();
      swift_bridgeObjectRelease();
      sub_2380BDB20();
      sub_238001820((unint64_t *)&qword_2568C5B68, (uint64_t (*)(uint64_t))MEMORY[0x24BEB3038], MEMORY[0x24BEB3048]);
      swift_allocError();
      sub_2380BDB08();
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_23802C768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_2380BDC34();
  v4 = sub_2380BDA30();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
  v5 = sub_2380BDAFC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t sub_23802C7E4()
{
  return sub_2380BDBD4();
}

uint64_t sub_23802C828()
{
  sub_238001820(&qword_2568C6228, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
  return sub_2380BDBA4();
}

uint64_t sub_23802C88C()
{
  sub_238001820(&qword_2568C6228, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
  return sub_2380BDBB0();
}

uint64_t static Release.local<A>(assetProvider:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static Release.local<A>(assetProvider:requireCryptex1:)(0, a1, a2, a3);
}

uint64_t static Release.local<A>(assetProvider:requireCryptex1:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;

  v9 = sub_2380BD448();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (!v4)
  {
    v51 = v14;
    v52 = result;
    v57 = a4;
    v15 = 0;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    if (qword_2568C4EA8 != -1)
      swift_once();
    v17 = __swift_project_value_buffer(v9, (uint64_t)qword_2568C9B98);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v17, v9);
    if (*(_QWORD *)(v16 + 16) && (v18 = a1, v19 = sub_23800DF54((uint64_t)v12), (v20 & 1) != 0))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
      {
        v50 = 0;
        if ((v18 & 1) != 0)
          v23 = 1;
        else
          v23 = 3;
        v47 = v23;
        swift_bridgeObjectRetain();
        v46 = v21;
        v24 = (_BYTE *)(v21 + 64);
        v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v26 = v57;
        while (1)
        {
          v27 = *((_QWORD *)v24 - 1);
          if (v27 >> 60 != 15 && *v24 != 4)
          {
            v49 = v25;
            v30 = *((_QWORD *)v24 - 4);
            v29 = *((_QWORD *)v24 - 3);
            v31 = *((_QWORD *)v24 - 2);
            sub_238009148(v31, v27);
            sub_238009148(v31, v27);
            sub_237FFBA20(v30, v29);
            sub_238009148(v31, v27);
            sub_2380068C4(v31, v27);
            v33 = v32;
            v35 = v34;
            v53 = v32;
            v54 = v34;
            v55 = v47;
            v36 = v50;
            Image4Manifest.canonicalize(evaluateTrust:)();
            v50 = v36;
            if (v36)
            {
              sub_238008CF0(v31, v27);
              sub_237FFBAB0(v33, v35);
              sub_237FFBAB0(v30, v29);
              sub_238008CF0(v31, v27);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_237FFBAB0(v52, v51);
              return swift_bridgeObjectRelease();
            }
            sub_238008CF0(v31, v27);
            sub_237FFBAB0(v33, v35);
            sub_237FFBAB0(v30, v29);
            sub_238008CF0(v31, v27);
            v48 = v56;
            v25 = v49;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v25 = sub_238026C5C(0, v25[2] + 1, 1, v25);
            v26 = v57;
            v38 = v25[2];
            v37 = v25[3];
            if (v38 >= v37 >> 1)
              v25 = sub_238026C5C((_QWORD *)(v37 > 1), v38 + 1, 1, v25);
            v25[2] = v38 + 1;
            *(_OWORD *)&v25[2 * v38 + 4] = v48;
          }
          v24 += 56;
          if (!--v22)
          {
            swift_bridgeObjectRelease();
            v15 = v50;
            goto LABEL_25;
          }
        }
      }
      v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v26 = v57;
LABEL_25:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v25 = 0;
      v26 = v57;
    }
    v40 = v51;
    v39 = v52;
    sub_237FFBA20(v52, v51);
    sub_2380068C4(v39, v40);
    v42 = v41;
    v44 = v43;
    v53 = v41;
    v54 = v43;
    v55 = 0;
    Image4Manifest.canonicalize(evaluateTrust:)();
    sub_237FFBAB0(v42, v44);
    if (v15)
    {
      sub_237FFBAB0(v39, v40);
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (v25)
        v45 = (uint64_t)v25;
      else
        v45 = MEMORY[0x24BEE4AF8];
      sub_238029954(v56, *((uint64_t *)&v56 + 1), v45, v26);
      return sub_237FFBAB0(v39, v40);
    }
  }
  return result;
}

uint64_t sub_23802CD2C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v3 = v2;
  v5 = sub_2380BDACC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C38);
  result = sub_2380BE0FC();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v22 >= v38)
          goto LABEL_33;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_33;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v12 >= v38)
                  goto LABEL_33;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_23;
              }
            }
            v12 = v24;
          }
        }
LABEL_23:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v5);
      result = sub_2380BE228();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v5);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v11;
  return result;
}

uint64_t sub_23802D05C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  __int128 v36;
  _OWORD v37[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5BF0);
  result = sub_2380BE0FC();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v34)
          goto LABEL_34;
        v19 = v35[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_34;
          v19 = v35[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v34)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v8 >= v34)
                  goto LABEL_34;
                v19 = v35[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = 32 * v17;
      v22 = *(_QWORD *)(v5 + 48) + v21;
      v36 = *(_OWORD *)v22;
      v24 = *(_QWORD *)(v22 + 16);
      v23 = *(_QWORD *)(v22 + 24);
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + v21);
      if ((a2 & 1) != 0)
      {
        sub_23800ED10(v25, v37);
      }
      else
      {
        sub_238016570((uint64_t)v25, (uint64_t)v37);
        swift_bridgeObjectRetain();
      }
      sub_2380BE234();
      sub_2380BE240();
      result = sub_2380BE264();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = 32 * v13;
      v15 = *(_QWORD *)(v7 + 48) + v14;
      *(_OWORD *)v15 = v36;
      *(_QWORD *)(v15 + 16) = v24;
      *(_QWORD *)(v15 + 24) = v23;
      result = (uint64_t)sub_23800ED10(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_23802D360(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t i;
  int v48;
  uint64_t v49;

  v3 = v2;
  v5 = type metadata accessor for SEP.SealedHash(0);
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2380BD448();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B98);
  v48 = a2;
  v12 = sub_2380BE0FC();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_42;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v2;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v21 = v11;
  for (i = v11; ; v21 = i)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v27 = v45[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_35:
          swift_release();
          v3 = v43;
          if ((v48 & 1) == 0)
            goto LABEL_42;
          goto LABEL_36;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_44;
            if (v20 >= v44)
              goto LABEL_35;
            v27 = v45[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = *(_QWORD *)(v8 + 72);
    v30 = *(_QWORD *)(v21 + 48) + v29 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v30, v7);
      v31 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      sub_238001DE4(v31 + v32 * v24, v49, type metadata accessor for SEP.SealedHash);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
      v33 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      sub_238013570(v33 + v32 * v24, v49, type metadata accessor for SEP.SealedHash);
    }
    sub_238001820(&qword_2568C5BE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_2380BDCAC();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v29 * v22, v10, v7);
    result = sub_238001DE4(v49, *(_QWORD *)(v13 + 56) + v32 * v22, type metadata accessor for SEP.SealedHash);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v3 = v43;
  v26 = v45;
  if ((v48 & 1) == 0)
    goto LABEL_42;
LABEL_36:
  v41 = 1 << *(_BYTE *)(i + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(i + 16) = 0;
LABEL_42:
  result = swift_release();
  *v3 = v13;
  return result;
}

uint64_t sub_23802D77C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6328);
  result = sub_2380BE0FC();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_2380BE234();
      sub_2380BE240();
      result = sub_2380BE264();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_23802DA4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _BYTE v35[32];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C62E0);
  v6 = sub_2380BE0FC();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = *(_QWORD *)(v5 + 56) + 32 * v17;
      if ((a2 & 1) != 0)
      {
        sub_23803081C(v24, (uint64_t)v35);
      }
      else
      {
        sub_238026DAC(v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_2380BE234();
      sub_2380BDD78();
      result = sub_2380BE264();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = sub_23803081C((uint64_t)v35, *(_QWORD *)(v7 + 56) + 32 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23802DD48(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_2380BD448();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DA0);
  v42 = a2;
  v10 = sub_2380BE0FC();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
    sub_238001820(&qword_2568C5BE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_2380BDCAC();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_23802E0DC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for Proto_SealedHash(0);
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5B88);
  v43 = a2;
  v9 = sub_2380BE0FC();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      sub_238001DE4(v30, (uint64_t)v7, type metadata accessor for Proto_SealedHash);
    }
    else
    {
      sub_238013570(v30, (uint64_t)v7, type metadata accessor for Proto_SealedHash);
      swift_bridgeObjectRetain();
    }
    sub_2380BE234();
    sub_2380BDD78();
    result = sub_2380BE264();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = sub_238001DE4((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, type metadata accessor for Proto_SealedHash);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_23802E45C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5BD8);
  v36 = a2;
  v6 = sub_2380BE0FC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_2380BE234();
    sub_2380BDD78();
    result = sub_2380BE264();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23802E770(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_2380BE0E4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_2380BE0E4();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x23B82AF00](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_23802F970(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_2380BE0E4();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_2380BDEB0();
  }
  __break(1u);
  return result;
}

uint64_t sub_23802E928(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2380272A4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_23802EA80(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_237FFBA20(a1, a2);
  sub_23802FBC8(a1, a2);
  sub_237FFBAB0(a1, a2);
  v4 = sub_2380BDD60();
  swift_release();
  return v4;
}

uint64_t sub_23802EAF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2380BDD60();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23802EB2C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_2380BD208();
  v9 = result;
  if (result)
  {
    result = sub_2380BD22C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = sub_2380BD220();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = (uint64_t)sub_23802FB7C(v9, v15, a4);
  if (v4)
    return v16;
  return result;
}

uint64_t sub_23802EBD8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23803301C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23802EC40(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23802EC40(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_2380BE198();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_23802F328(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_23802F3F4((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_238033008((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_2380BDED4();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_2380BE1B0();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_2380BE1B0()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_238032D5C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_238032D5C((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_23802F3F4((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_2380BE1B0() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_2380BE0CC();
  __break(1u);
  return result;
}

uint64_t sub_23802F328(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_2380BE1B0(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23802F3F4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_2380BE1B0() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_2380BE1B0() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_238032E54((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_23802F68C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  int64_t v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v4 = sub_2380BDA60();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *((_QWORD *)a1 + 8);
  v9 = a1[1];
  v28 = *a1;
  v29 = v9;
  v10 = a1[2];
  v11 = a1[3];
  v27[0] = a1;
  v30 = v10;
  v31 = v11;
  v32 = v8;
  v27[1] = sub_2380BE264();
  v12 = a2 + 56;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(a2 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v17 = a2;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  v20 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v20++, 1))
      goto LABEL_19;
    if (v20 >= v16)
    {
LABEL_17:
      swift_release();
      return sub_2380BE240();
    }
    v25 = *(_QWORD *)(v12 + 8 * v20);
    if (!v25)
      break;
LABEL_16:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v20 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v17 + 48) + *(_QWORD *)(v5 + 72) * v22, v4);
    sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
    v23 = sub_2380BDCAC();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v19 ^= v23;
  }
  v26 = v20 + 1;
  if (v20 + 1 >= v16)
    goto LABEL_17;
  v25 = *(_QWORD *)(v12 + 8 * v26);
  if (v25)
  {
    ++v20;
    goto LABEL_16;
  }
  while (1)
  {
    v20 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v20 >= v16)
      goto LABEL_17;
    v25 = *(_QWORD *)(v12 + 8 * v20);
    ++v26;
    if (v25)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void (*sub_23802F87C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_23802F8FC(v6, a2, a3);
  return sub_23802F8D0;
}

void sub_23802F8D0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_23802F8FC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x23B82AEF4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for SWTransparencyVerifier;
  }
  __break(1u);
  return result;
}

void destroy for SWTransparencyVerifier(id *a1)
{

}

uint64_t sub_23802F970(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_2380BE0E4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_2380BE0E4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_23800A568(&qword_2568C62F0, &qword_2568C62E8, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2568C62E8);
          v12 = sub_23802F87C(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SecCertificate(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

_QWORD *sub_23802FB7C(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

void sub_23802FBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_2380BD3A0();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

_QWORD *sub_23802FC44()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5D88);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_237FFBA20(v2, v0);
    v7 = sub_2380BD2F8();
    sub_237FFBAB0(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x23802FD18);
    }
  }
  return v4;
}

uint64_t sub_23802FD30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2380BDD60();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23802FD64(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6218);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23802FDA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_238030910();
  result = sub_2380BDF1C();
  v8 = result;
  if (v2)
  {
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      sub_237FFBA20(v5, *v4);
      sub_23806EEDC(v7, v5, v6);
      sub_237FFBAB0(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_23802FE3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v2 = sub_2380BDA60();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_238001820(&qword_2568C5C20, v10, MEMORY[0x24BEB2F90]);
  result = sub_2380BDF1C();
  v16 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      sub_23806EC80((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

unint64_t sub_23802FF64()
{
  unint64_t result;

  result = qword_2568C6220;
  if (!qword_2568C6220)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0B88, &type metadata for Release.Error);
    atomic_store(result, (unint64_t *)&qword_2568C6220);
  }
  return result;
}

uint64_t sub_23802FFA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t result;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = sub_2380BDA60();
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v35 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)v31 - v5;
  v6 = sub_23802BDA0();
  v8 = v7;
  v9 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Release() + 20));
  v10 = *(_QWORD *)(v9 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v31[0] = v8;
    v31[1] = v6;
    v32 = a1;
    v38 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_238075DB4(0, v10, 0);
    v12 = sub_238076740(v9);
    v14 = v13;
    v16 = v15 & 1;
    v33 = v9 + 56;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(v9 + 32))
    {
      if (((*(_QWORD *)(v33 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      if (*(_DWORD *)(v9 + 36) != (_DWORD)v14)
        goto LABEL_16;
      v18 = v36;
      v17 = v37;
      v19 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, *(_QWORD *)(v9 + 48) + *(_QWORD *)(v36 + 72) * v12, v37);
      v20 = v35;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v35, v19, v17);
      v21 = sub_23802BDA0();
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      v11 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_238075DB4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v38;
      }
      v25 = *(_QWORD *)(v11 + 16);
      v24 = *(_QWORD *)(v11 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_238075DB4(v24 > 1, v25 + 1, 1);
        v11 = v38;
      }
      *(_QWORD *)(v11 + 16) = v25 + 1;
      v26 = v11 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v21;
      *(_QWORD *)(v26 + 40) = v23;
      v27 = sub_238076C94(v12, v14, v16 & 1, v9);
      v12 = v27;
      v14 = v28;
      v16 = v29 & 1;
      if (!--v10)
      {
        sub_238030904(v27, v28, v29 & 1);
        swift_bridgeObjectRelease();
        a1 = v32;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_13:
    v38 = v11;
    swift_bridgeObjectRetain();
    sub_23802EBD8(&v38);
    sub_237FFD540(a1, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

uint64_t sub_238030264(uint64_t a1)
{
  uint64_t v1;

  return sub_23802C238(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23803027C()
{
  return sub_238001820(&qword_2568C6238, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
}

uint64_t sub_2380302A8()
{
  return sub_238001820(&qword_2568C6240, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
}

uint64_t sub_2380302D4()
{
  return sub_238001820(&qword_2568C61E0, (uint64_t (*)(uint64_t))type metadata accessor for Release, (uint64_t)&protocol conformance descriptor for Release);
}

uint64_t *initializeBufferWithCopyOfBuffer for Release(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2380BDA60();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Release(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Release()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238030568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2380BDA60();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Release()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380305F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2380BDA60();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_238030668()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BDA60();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Release.Error(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for Release.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_238030770 + 4 * asc_2380C0990[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_238030790 + 4 * byte_2380C0995[v4]))();
}

_BYTE *sub_238030770(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_238030790(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_238030798(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2380307A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2380307A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2380307B0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_2380307BC()
{
  return 0;
}

ValueMetadata *type metadata accessor for Release.Error()
{
  return &type metadata for Release.Error;
}

unint64_t sub_2380307D8()
{
  unint64_t result;

  result = qword_2568C62D8;
  if (!qword_2568C62D8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0B60, &type metadata for Release.Error);
    atomic_store(result, (unint64_t *)&qword_2568C62D8);
  }
  return result;
}

uint64_t sub_23803081C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_238030864()
{
  unint64_t result;

  result = qword_2568C6310;
  if (!qword_2568C6310)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0CCC, &type metadata for EncodableRelease.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C6310);
  }
  return result;
}

unint64_t sub_2380308A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2568C6318;
  if (!qword_2568C6318)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C5E60);
    v2 = MEMORY[0x24BEE0D08];
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2568C6318);
  }
  return result;
}

uint64_t sub_238030904(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_238030910()
{
  unint64_t result;

  result = qword_2568C6330;
  if (!qword_2568C6330)
  {
    result = MEMORY[0x23B82B770](MEMORY[0x24BDCDE08], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2568C6330);
  }
  return result;
}

uint64_t sub_238030954(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 != -1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t destroy for EncodableRelease()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EncodableRelease(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EncodableRelease(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *assignWithTake for EncodableRelease(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EncodableRelease(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EncodableRelease(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EncodableRelease()
{
  return &type metadata for EncodableRelease;
}

uint64_t storeEnumTagSinglePayload for EncodableRelease.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_238030B6C + 4 * byte_2380C099F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_238030BA0 + 4 * byte_2380C099A[v4]))();
}

uint64_t sub_238030BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_238030BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x238030BB0);
  return result;
}

uint64_t sub_238030BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238030BC4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_238030BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238030BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EncodableRelease.CodingKeys()
{
  return &type metadata for EncodableRelease.CodingKeys;
}

unint64_t sub_238030BF0()
{
  unint64_t result;

  result = qword_2568C6338;
  if (!qword_2568C6338)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0C7C, &type metadata for EncodableRelease.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C6338);
  }
  return result;
}

unint64_t sub_238030C38()
{
  unint64_t result;

  result = qword_2568C6340;
  if (!qword_2568C6340)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0BEC, &type metadata for EncodableRelease.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C6340);
  }
  return result;
}

unint64_t sub_238030C80()
{
  unint64_t result;

  result = qword_2568C6348;
  if (!qword_2568C6348)
  {
    result = MEMORY[0x23B82B770](&unk_2380C0C14, &type metadata for EncodableRelease.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C6348);
  }
  return result;
}

uint64_t sub_238030CC4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_2380BE1B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74656B6369547061 && a2 == 0xE800000000000000 || (sub_2380BE1B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5478657470797263 && a2 == 0xEE007374656B6369)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_238030E3C(uint64_t a1)
{
  return sub_238030264(a1);
}

uint64_t Release.debugDescription.getter()
{
  return sub_238030EAC(0, 0xE000000000000000);
}

uint64_t sub_238030EAC(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  __int128 __dst;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2380BDA60();
  v52 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v53 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = 0;
  v59 = 0xE000000000000000;
  v60 = 0x3A6E6F6973726556;
  v61 = 0xE900000000000020;
  *(_QWORD *)&__dst = 1;
  sub_2380BE1A4();
  sub_2380BDD90();
  swift_bridgeObjectRelease();
  sub_2380BDD90();
  v60 = (uint64_t)a1;
  v61 = a2;
  swift_bridgeObjectRetain();
  sub_2380BDD90();
  swift_bridgeObjectRelease();
  sub_2380BDD90();
  swift_bridgeObjectRelease();
  v60 = (uint64_t)a1;
  v61 = a2;
  swift_bridgeObjectRetain();
  sub_2380BDD90();
  sub_2380BDD90();
  swift_bridgeObjectRelease();
  v55 = v2;
  v8 = sub_2380BDA54();
  v12 = sub_23800A2BC(v8, v9, v10, v11);
  v14 = v13;
  swift_unknownObjectRelease();
  v60 = (uint64_t)v12;
  v61 = v14;
  v62 = 0;
  v56 = a1;
  *(_QWORD *)&__dst = a1;
  *((_QWORD *)&__dst + 1) = a2;
  swift_bridgeObjectRetain();
  sub_2380BDD90();
  sub_23808ACB0(__dst, *((uint64_t *)&__dst + 1));
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_237FFBAB0((uint64_t)v12, v14);
  }
  else
  {
    v50 = v12;
    v51 = v14;
    swift_bridgeObjectRelease();
    sub_2380BDD90();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v55 + *(int *)(type metadata accessor for Release() + 20));
    swift_bridgeObjectRetain_n();
    v17 = (_QWORD *)sub_23806EA48(v16);
    swift_bridgeObjectRelease();
    v60 = (uint64_t)v17;
    sub_23803167C((_QWORD **)&v60);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v60 + 16);
    v19 = v53;
    v21 = (uint64_t)v50;
    v20 = v51;
    if (v18)
    {
      v54 = 0;
      v55 = a2;
      v22 = (char *)(v60 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80)));
      v23 = *(_QWORD *)(v52 + 72);
      v46 = v60;
      v47 = v23;
      v24 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
      v48 = 0x80000002380C84A0;
      v49 = v24;
      while (1)
      {
        v25 = v6;
        v49(v19, v22, v6);
        v60 = (uint64_t)v56;
        v61 = v55;
        swift_bridgeObjectRetain();
        sub_2380BDD90();
        sub_2380BDD90();
        swift_bridgeObjectRelease();
        v26 = sub_2380BDA54();
        v28 = v27;
        v30 = v29;
        v32 = v31;
        v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A28);
        v63 = v33;
        v64 = sub_238033044();
        v34 = (_QWORD *)swift_allocObject();
        v60 = (uint64_t)v34;
        v34[2] = v26;
        v34[3] = v28;
        v34[4] = v30;
        v34[5] = v32;
        v35 = __swift_project_boxed_opaque_existential_1(&v60, v33);
        v36 = v35[2];
        v37 = v35[3] >> 1;
        v38 = v37 - v36;
        if (__OFSUB__(v37, v36))
          __break(1u);
        if (v38)
        {
          v39 = (const void *)(v35[1] + v36);
          v40 = v56;
          if (v38 <= 14)
          {
            *(_QWORD *)((char *)&__dst + 6) = 0;
            *(_QWORD *)&__dst = 0;
            BYTE14(__dst) = v37 - v36;
            memcpy(&__dst, v39, v37 - v36);
            v43 = (_QWORD *)__dst;
            v44 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
            swift_unknownObjectRetain();
          }
          else
          {
            sub_2380BD238();
            swift_allocObject();
            swift_unknownObjectRetain();
            v41 = sub_2380BD1FC();
            v42 = v41;
            if ((unint64_t)v38 >= 0x7FFFFFFF)
            {
              sub_2380BD310();
              v43 = (_QWORD *)swift_allocObject();
              v43[2] = 0;
              v43[3] = v38;
              v44 = v42 | 0x8000000000000000;
            }
            else
            {
              v43 = (_QWORD *)(v38 << 32);
              v44 = v41 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_unknownObjectRetain();
          v43 = 0;
          v44 = 0xC000000000000000;
          v40 = v56;
        }
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
        v60 = (uint64_t)v43;
        v61 = v44;
        v62 = 3;
        *(_QWORD *)&__dst = v40;
        *((_QWORD *)&__dst + 1) = v55;
        swift_bridgeObjectRetain();
        sub_2380BDD90();
        v45 = v54;
        sub_23808ACB0(__dst, *((uint64_t *)&__dst + 1));
        if (v45)
          break;
        v54 = 0;
        swift_bridgeObjectRelease();
        sub_2380BDD90();
        swift_bridgeObjectRelease();
        sub_237FFBAB0((uint64_t)v43, v44);
        v19 = v53;
        v6 = v25;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v25);
        v22 += v47;
        --v18;
        v21 = (uint64_t)v50;
        v20 = v51;
        if (!v18)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      sub_237FFBAB0((uint64_t)v50, v51);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v25);
      swift_release();
      swift_bridgeObjectRelease();
      return sub_237FFBAB0((uint64_t)v43, v44);
    }
    else
    {
LABEL_15:
      swift_release();
      sub_237FFBAB0(v21, v20);
      return v58;
    }
  }
}

uint64_t sub_238031480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;

  sub_2380BDA54();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  result = sub_2380BDA54();
  v10 = v5 >> 1;
  if (v3 == v5 >> 1)
    goto LABEL_4;
  if (v3 >= (uint64_t)(v5 >> 1))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v11 = v9 >> 1;
  if (v8 == v9 >> 1)
  {
LABEL_4:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_2380BDA54();
    v13 = v12;
    v15 = v14;
    result = swift_unknownObjectRelease();
    v16 = __OFSUB__(v15 >> 1, v13);
    v17 = (v15 >> 1) - v13;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      sub_2380BDA54();
      v19 = v18;
      v21 = v20;
      result = swift_unknownObjectRelease();
      if (!__OFSUB__(v21 >> 1, v19))
        return v17 < (uint64_t)((v21 >> 1) - v19);
    }
    __break(1u);
    goto LABEL_23;
  }
  if (v8 < (uint64_t)(v9 >> 1))
  {
    v22 = *(unsigned __int8 *)(v1 + v3);
    v23 = *(unsigned __int8 *)(v7 + v8);
    if (v22 < v23)
    {
LABEL_9:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 1;
    }
    if (v23 < v22)
    {
LABEL_11:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 0;
    }
    v24 = 0;
    v25 = v8 + 1;
    while (~v3 + v10 != v24)
    {
      if (v3 + 1 + v24 >= v10)
        goto LABEL_24;
      if (~v8 + v11 == v24)
        break;
      if (v25 + v24 < v8 || v25 + v24 >= v11)
        goto LABEL_25;
      v26 = *(unsigned __int8 *)(v1 + v3 + 1 + v24);
      v27 = *(unsigned __int8 *)(v7 + v8 + 1 + v24);
      if (v26 < v27)
        goto LABEL_9;
      ++v24;
      if (v27 < v26)
        goto LABEL_11;
    }
    goto LABEL_4;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_238031620()
{
  return sub_238030EAC(0, 0xE000000000000000);
}

uint64_t sub_23803167C(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_2380BDA60() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_238033030(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_2380316FC(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_2380316FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BOOL4 v66;
  char *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  unint64_t v117;
  char *v118;
  void (*v119)(char *, uint64_t, uint64_t);
  unsigned int v120;
  unsigned int v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  void (*v136)(char *, uint64_t, uint64_t);
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  char v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  void (*v191)(char *, uint64_t);
  uint64_t v192;
  void (*v193)(char *, uint64_t, uint64_t);
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  void (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t *v214;
  char *v215;

  v3 = sub_2380BDA60();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v200 = (char *)&v192 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v212 = (char *)&v192 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v192 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v215 = (char *)&v192 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v204 = (char *)&v192 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v202 = (char *)&v192 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v192 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v192 - v21;
  v214 = a1;
  v23 = a1[1];
  result = sub_2380BE198();
  if (result >= v23)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      if (v23)
        return sub_238032420(0, v23, 1, v214);
      return result;
    }
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    result = sub_2380BE0CC();
    __break(1u);
    return result;
  }
  if (v23 >= 0)
    v25 = v23;
  else
    v25 = v23 + 1;
  if (v23 < -1)
    goto LABEL_208;
  v213 = v11;
  v197 = result;
  v206 = v1;
  if (v23 < 2)
  {
    v29 = (char *)MEMORY[0x24BEE4AF8];
    v203 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v194 = MEMORY[0x24BEE4AF8];
    if (v23 != 1)
    {
      v133 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      goto LABEL_152;
    }
    v195 = v22;
    v196 = v20;
  }
  else
  {
    v195 = v22;
    v196 = v20;
    v26 = v25 >> 1;
    v27 = sub_2380BDED4();
    *(_QWORD *)(v27 + 16) = v26;
    v28 = *(unsigned __int8 *)(v4 + 80);
    v194 = v27;
    v203 = v27 + ((v28 + 32) & ~v28);
  }
  v30 = 0;
  v29 = (char *)MEMORY[0x24BEE4AF8];
  v209 = v4;
  v210 = v3;
  do
  {
    v31 = (uint64_t)v30;
    v32 = (char *)v30 + 1;
    if ((uint64_t)v30 + 1 >= v23)
    {
      v41 = (uint64_t)v30 + 1;
      goto LABEL_59;
    }
    v33 = *v214;
    v208 = (uint64_t)v30;
    v34 = *(_QWORD *)(v4 + 72);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v36 = v195;
    v35(v195, v33 + v34 * (_QWORD)v32, v3);
    v198 = v33;
    v211 = v34;
    v37 = v33 + v34 * v208;
    v38 = v196;
    v193 = v35;
    v35(v196, v37, v3);
    v39 = v206;
    LODWORD(v207) = sub_238031480();
    v206 = v39;
    if (v39)
    {
      v191 = *(void (**)(char *, uint64_t))(v4 + 8);
      v191(v38, v3);
      v191(v36, v3);
      goto LABEL_165;
    }
    v40 = *(char **)(v4 + 8);
    ((void (*)(char *, uint64_t))v40)(v38, v3);
    v199 = v40;
    ((void (*)(char *, uint64_t))v40)(v36, v3);
    v31 = v208;
    v41 = v208 + 2;
    v201 = (char *)v23;
    if (v208 + 2 >= v23)
      goto LABEL_43;
    v42 = v202;
    v43 = v198;
    v44 = v193;
    do
    {
      v205 = (void (*)(char *, uint64_t, uint64_t))v41;
      v45 = v211;
      v44(v42, v43 + v41 * v211, v3);
      v44(v204, v43 + (_QWORD)v32 * v45, v3);
      sub_2380BDA54();
      v47 = v46;
      v49 = v48;
      v51 = v50;
      sub_2380BDA54();
      v55 = v51 >> 1;
      v42 = v202;
      if (v49 != v55)
      {
        if (v49 >= v55)
          goto LABEL_190;
        v56 = v54 >> 1;
        if (v53 != v54 >> 1)
        {
          if (v53 >= (uint64_t)(v54 >> 1))
            goto LABEL_197;
          v68 = *(unsigned __int8 *)(v47 + v49);
          v69 = *(unsigned __int8 *)(v52 + v53);
          if (v68 < v69)
          {
LABEL_29:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v66 = 1;
            goto LABEL_24;
          }
          if (v69 < v68)
          {
LABEL_31:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v66 = 0;
            goto LABEL_24;
          }
          v70 = 0;
          v71 = v53 + 1;
          while (~v49 + v55 != v70)
          {
            if (v49 + 1 + v70 >= v55)
              goto LABEL_189;
            if (~v53 + v56 == v70)
              break;
            if (v71 + v70 < v53 || v71 + v70 >= v56)
              goto LABEL_191;
            v72 = *(unsigned __int8 *)(v49 + 1 + v47 + v70);
            v73 = *(unsigned __int8 *)(v53 + 1 + v52 + v70);
            if (v72 < v73)
              goto LABEL_29;
            ++v70;
            if (v73 < v72)
              goto LABEL_31;
          }
        }
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_2380BDA54();
      v58 = v57;
      v60 = v59;
      swift_unknownObjectRelease();
      v61 = (v60 >> 1) - v58;
      if (__OFSUB__(v60 >> 1, v58))
        goto LABEL_187;
      sub_2380BDA54();
      v63 = v62;
      v65 = v64;
      swift_unknownObjectRelease();
      if (__OFSUB__(v65 >> 1, v63))
      {
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }
      v66 = v61 < (uint64_t)((v65 >> 1) - v63);
LABEL_24:
      v3 = v210;
      v67 = v199;
      ((void (*)(char *, uint64_t))v199)(v204, v210);
      ((void (*)(char *, uint64_t))v67)(v42, v3);
      v41 = (uint64_t)v205;
      if (((v207 ^ v66) & 1) != 0)
      {
        v31 = v208;
        v4 = v209;
LABEL_43:
        v23 = (uint64_t)v201;
        if ((v207 & 1) == 0)
          goto LABEL_59;
LABEL_46:
        if (v41 >= v31)
        {
          if (v31 < v41)
          {
            v199 = v29;
            v74 = 0;
            v75 = v211 * (v41 - 1);
            v76 = v41 * v211;
            v77 = v31;
            v78 = v31 * v211;
            do
            {
              if (v77 != v41 + v74 - 1)
              {
                v81 = v198;
                if (!v198)
                  goto LABEL_206;
                v82 = v41;
                v83 = v198 + v78;
                v207 = (char *)(v198 + v75);
                v205 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
                v205(v200, v198 + v78, v210);
                if (v78 < v75 || v83 >= v81 + v76)
                {
                  v79 = v207;
                  v80 = v210;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  v80 = v210;
                  v79 = v207;
                  if (v78 != v75)
                    swift_arrayInitWithTakeBackToFront();
                }
                v205(v79, (uint64_t)v200, v80);
                v4 = v209;
                v41 = v82;
              }
              ++v77;
              --v74;
              v75 -= v211;
              v76 -= v211;
              v78 += v211;
            }
            while (v77 < v41 + v74);
            v29 = v199;
            v3 = v210;
            v31 = v208;
            v23 = (uint64_t)v201;
          }
          goto LABEL_59;
        }
        goto LABEL_203;
      }
      v32 = (char *)v205;
      v41 = (uint64_t)v205 + 1;
    }
    while ((char *)v205 + 1 != v201);
    v23 = (uint64_t)v201;
    v41 = (uint64_t)v201;
    v31 = v208;
    v4 = v209;
    if ((v207 & 1) != 0)
      goto LABEL_46;
LABEL_59:
    if (v41 >= v23)
      goto LABEL_100;
    if (__OFSUB__(v41, v31))
      goto LABEL_199;
    if (v41 - v31 >= v197)
      goto LABEL_100;
    v84 = v31 + v197;
    if (__OFADD__(v31, v197))
      goto LABEL_201;
    if (v84 >= v23)
      v84 = v23;
    if (v84 < v31)
      goto LABEL_202;
    if (v41 == v84)
      goto LABEL_100;
    v199 = v29;
    v211 = *(_QWORD *)(v4 + 72);
    v207 = *(char **)(v4 + 16);
    v208 = v31;
    v201 = (char *)v84;
    while (2)
    {
      v205 = (void (*)(char *, uint64_t, uint64_t))v41;
      v86 = v41;
      while (2)
      {
        v87 = v86 - 1;
        v88 = *v214;
        v89 = v211;
        v90 = v211 * v86;
        v91 = (void (*)(char *, uint64_t, uint64_t))v207;
        ((void (*)(char *, uint64_t, uint64_t))v207)(v215, *v214 + v211 * v86, v3);
        v92 = v89 * v87;
        v91(v213, v88 + v89 * v87, v3);
        sub_2380BDA54();
        v94 = v93;
        v96 = v95;
        v98 = v97;
        sub_2380BDA54();
        v102 = v98 >> 1;
        if (v96 == v98 >> 1)
          goto LABEL_77;
        if (v96 >= (uint64_t)(v98 >> 1))
          goto LABEL_171;
        v103 = v101 >> 1;
        if (v100 == v101 >> 1)
        {
LABEL_77:
          v4 = v209;
          v3 = v210;
LABEL_78:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          sub_2380BDA54();
          v105 = v104;
          v107 = v106;
          swift_unknownObjectRelease();
          v108 = (v107 >> 1) - v105;
          if (__OFSUB__(v107 >> 1, v105))
            goto LABEL_169;
          v109 = v213;
          sub_2380BDA54();
          v111 = v110;
          v113 = v112;
          swift_unknownObjectRelease();
          v148 = __OFSUB__(v113 >> 1, v111);
          v114 = (v113 >> 1) - v111;
          if (v148)
            goto LABEL_170;
          v115 = *(void (**)(char *, uint64_t))(v4 + 8);
          v115(v109, v3);
          v115(v215, v3);
          if (v108 >= v114)
            goto LABEL_70;
          goto LABEL_81;
        }
        v4 = v209;
        if (v100 >= (uint64_t)(v101 >> 1))
          goto LABEL_176;
        v120 = *(unsigned __int8 *)(v94 + v96);
        v121 = *(unsigned __int8 *)(v99 + v100);
        if (v120 < v121)
        {
          v3 = v210;
LABEL_88:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v122 = *(void (**)(char *, uint64_t))(v4 + 8);
          v122(v213, v3);
          v122(v215, v3);
LABEL_81:
          v116 = *v214;
          if (!*v214)
            goto LABEL_204;
          v117 = v116 + v90;
          v118 = (char *)(v116 + v92);
          v119 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
          v119(v212, v116 + v90, v3);
          if (v90 < v92 || v117 >= (unint64_t)&v118[v211])
            swift_arrayInitWithTakeFrontToBack();
          v119(v118, (uint64_t)v212, v3);
          v86 = v87;
          if (v87 == v208)
            goto LABEL_70;
          continue;
        }
        break;
      }
      if (v121 >= v120)
      {
        v123 = 0;
        v124 = ~v96 + v102;
        v125 = v96 + 1;
        v126 = v96 + 1 + v94;
        v127 = v100 + 1;
        v3 = v210;
        while (1)
        {
          if (v124 == v123)
            goto LABEL_78;
          if (v125 + v123 >= v102)
            break;
          if (~v100 + v103 == v123)
            goto LABEL_78;
          if (v127 + v123 < v100 || v127 + v123 >= v103)
            goto LABEL_168;
          v128 = *(unsigned __int8 *)(v126 + v123);
          v129 = *(unsigned __int8 *)(v100 + 1 + v99 + v123);
          if (v128 < v129)
            goto LABEL_88;
          ++v123;
          if (v129 < v128)
            goto LABEL_69;
        }
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }
      v3 = v210;
LABEL_69:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v85 = *(void (**)(char *, uint64_t))(v4 + 8);
      v85(v213, v3);
      v85(v215, v3);
LABEL_70:
      v41 = (uint64_t)v205 + 1;
      if ((char *)v205 + 1 != v201)
        continue;
      break;
    }
    v41 = (uint64_t)v201;
    v29 = v199;
    v31 = v208;
LABEL_100:
    if (v41 < v31)
    {
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
      goto LABEL_200;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v205 = (void (*)(char *, uint64_t, uint64_t))v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v29 = sub_238032D5C(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    v132 = *((_QWORD *)v29 + 2);
    v131 = *((_QWORD *)v29 + 3);
    v133 = v132 + 1;
    if (v132 >= v131 >> 1)
      v29 = sub_238032D5C((char *)(v131 > 1), v132 + 1, 1, v29);
    *((_QWORD *)v29 + 2) = v133;
    v134 = v29 + 32;
    v135 = &v29[16 * v132 + 32];
    v136 = v205;
    *(_QWORD *)v135 = v31;
    *((_QWORD *)v135 + 1) = v136;
    if (v132)
    {
      while (1)
      {
        v137 = v133 - 1;
        if (v133 >= 4)
        {
          v142 = &v134[16 * v133];
          v143 = *((_QWORD *)v142 - 8);
          v144 = *((_QWORD *)v142 - 7);
          v148 = __OFSUB__(v144, v143);
          v145 = v144 - v143;
          if (v148)
            goto LABEL_177;
          v147 = *((_QWORD *)v142 - 6);
          v146 = *((_QWORD *)v142 - 5);
          v148 = __OFSUB__(v146, v147);
          v140 = v146 - v147;
          v141 = v148;
          if (v148)
            goto LABEL_178;
          v149 = v133 - 2;
          v150 = &v134[16 * v133 - 32];
          v152 = *(_QWORD *)v150;
          v151 = *((_QWORD *)v150 + 1);
          v148 = __OFSUB__(v151, v152);
          v153 = v151 - v152;
          if (v148)
            goto LABEL_180;
          v148 = __OFADD__(v140, v153);
          v154 = v140 + v153;
          if (v148)
            goto LABEL_183;
          if (v154 >= v145)
          {
            v172 = &v134[16 * v137];
            v174 = *(_QWORD *)v172;
            v173 = *((_QWORD *)v172 + 1);
            v148 = __OFSUB__(v173, v174);
            v175 = v173 - v174;
            if (v148)
              goto LABEL_192;
            v165 = v140 < v175;
            goto LABEL_137;
          }
        }
        else
        {
          if (v133 != 3)
          {
            v166 = *((_QWORD *)v29 + 4);
            v167 = *((_QWORD *)v29 + 5);
            v148 = __OFSUB__(v167, v166);
            v159 = v167 - v166;
            v160 = v148;
            goto LABEL_131;
          }
          v139 = *((_QWORD *)v29 + 4);
          v138 = *((_QWORD *)v29 + 5);
          v148 = __OFSUB__(v138, v139);
          v140 = v138 - v139;
          v141 = v148;
        }
        if ((v141 & 1) != 0)
          goto LABEL_179;
        v149 = v133 - 2;
        v155 = &v134[16 * v133 - 32];
        v157 = *(_QWORD *)v155;
        v156 = *((_QWORD *)v155 + 1);
        v158 = __OFSUB__(v156, v157);
        v159 = v156 - v157;
        v160 = v158;
        if (v158)
          goto LABEL_182;
        v161 = &v134[16 * v137];
        v163 = *(_QWORD *)v161;
        v162 = *((_QWORD *)v161 + 1);
        v148 = __OFSUB__(v162, v163);
        v164 = v162 - v163;
        if (v148)
          goto LABEL_185;
        if (__OFADD__(v159, v164))
          goto LABEL_186;
        if (v159 + v164 >= v140)
        {
          v165 = v140 < v164;
LABEL_137:
          if (v165)
            v137 = v149;
          goto LABEL_139;
        }
LABEL_131:
        if ((v160 & 1) != 0)
          goto LABEL_181;
        v168 = &v134[16 * v137];
        v170 = *(_QWORD *)v168;
        v169 = *((_QWORD *)v168 + 1);
        v148 = __OFSUB__(v169, v170);
        v171 = v169 - v170;
        if (v148)
          goto LABEL_184;
        if (v171 < v159)
          goto LABEL_148;
LABEL_139:
        v176 = v137 - 1;
        if (v137 - 1 >= v133)
          goto LABEL_172;
        if (!*v214)
          goto LABEL_205;
        v177 = v29;
        v178 = &v134[16 * v176];
        v179 = *(_QWORD *)v178;
        v180 = &v134[16 * v137];
        v181 = *((_QWORD *)v180 + 1);
        v182 = v206;
        sub_2380327B4(*v214 + *(_QWORD *)(v4 + 72) * *(_QWORD *)v178, *v214 + *(_QWORD *)(v4 + 72) * *(_QWORD *)v180, (char *)(*v214 + *(_QWORD *)(v4 + 72) * v181), v203);
        v206 = v182;
        if (v182)
          goto LABEL_165;
        if (v181 < v179)
          goto LABEL_173;
        if (v137 > *((_QWORD *)v177 + 2))
          goto LABEL_174;
        *(_QWORD *)v178 = v179;
        *(_QWORD *)&v134[16 * v176 + 8] = v181;
        v183 = *((_QWORD *)v177 + 2);
        if (v137 >= v183)
          goto LABEL_175;
        v29 = v177;
        v133 = v183 - 1;
        memmove(&v134[16 * v137], v180 + 16, 16 * (v183 - 1 - v137));
        *((_QWORD *)v177 + 2) = v183 - 1;
        v3 = v210;
        if (v183 <= 2)
          goto LABEL_148;
      }
    }
    v133 = 1;
LABEL_148:
    v23 = v214[1];
    v30 = v205;
  }
  while ((uint64_t)v205 < v23);
LABEL_152:
  if (v133 >= 2)
  {
    v184 = *v214;
    while (1)
    {
      v185 = v133 - 2;
      if (v133 < 2)
        break;
      if (!v184)
        goto LABEL_207;
      v186 = *(_QWORD *)&v29[16 * v185 + 32];
      v187 = *(_QWORD *)&v29[16 * v133 + 24];
      v188 = v206;
      sub_2380327B4(v184 + *(_QWORD *)(v4 + 72) * v186, v184 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v29[16 * v133 + 16], (char *)(v184 + *(_QWORD *)(v4 + 72) * v187), v203);
      v206 = v188;
      if (v188)
        goto LABEL_165;
      if (v187 < v186)
        goto LABEL_194;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v29 = sub_238033008((uint64_t)v29);
      if (v185 >= *((_QWORD *)v29 + 2))
        goto LABEL_195;
      v189 = &v29[16 * v185 + 32];
      *(_QWORD *)v189 = v186;
      *((_QWORD *)v189 + 1) = v187;
      v190 = *((_QWORD *)v29 + 2);
      if (v133 > v190)
        goto LABEL_196;
      memmove(&v29[16 * v133 + 16], &v29[16 * v133 + 32], 16 * (v190 - v133));
      *((_QWORD *)v29 + 2) = v190 - 1;
      v133 = v190 - 1;
      if (v190 <= 2)
        goto LABEL_165;
    }
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }
LABEL_165:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v194 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_238032420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  unsigned int v51;
  unsigned int v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  _QWORD *v68;

  v67 = a4;
  v61 = a1;
  v6 = sub_2380BDA60();
  v68 = *(_QWORD **)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v66 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v58 - v10;
  result = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v58 - v13;
  v59 = a2;
  if (a3 == a2)
    return result;
  v15 = v68[9];
  v64 = (void (*)(char *, uint64_t, uint64_t))v68[2];
  v65 = v15;
  v62 = v11;
  v63 = (char *)&v58 - v13;
LABEL_6:
  v60 = a3;
  v17 = a3;
  while (1)
  {
    v18 = v17 - 1;
    v19 = *v67;
    v21 = v64;
    v20 = v65;
    v22 = v65 * v17;
    v64(v14, *v67 + v65 * v17, v6);
    v23 = v20 * v18;
    v21(v11, v19 + v23, v6);
    sub_2380BDA54();
    v25 = v24;
    v27 = v26;
    v29 = v28;
    result = sub_2380BDA54();
    v33 = v29 >> 1;
    if (v27 != v29 >> 1)
    {
      if (v27 >= (uint64_t)(v29 >> 1))
        goto LABEL_36;
      v34 = v32 >> 1;
      if (v31 != v32 >> 1)
      {
        if (v31 >= (uint64_t)(v32 >> 1))
          goto LABEL_37;
        v51 = *(unsigned __int8 *)(v25 + v27);
        v52 = *(unsigned __int8 *)(v30 + v31);
        if (v51 < v52)
        {
LABEL_21:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v53 = (void (*)(char *, uint64_t))v68[1];
          v11 = v62;
          v53(v62, v6);
          v14 = v63;
          result = ((uint64_t (*)(char *, uint64_t))v53)(v63, v6);
          goto LABEL_15;
        }
        if (v52 < v51)
        {
LABEL_4:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v16 = (void (*)(char *, uint64_t))v68[1];
          v11 = v62;
          v16(v62, v6);
          v14 = v63;
          result = ((uint64_t (*)(char *, uint64_t))v16)(v63, v6);
LABEL_5:
          a3 = v60 + 1;
          if (v60 + 1 == v59)
            return result;
          goto LABEL_6;
        }
        v54 = 0;
        v55 = v31 + 1;
        while (~v27 + v33 != v54)
        {
          if (v27 + 1 + v54 >= v33)
          {
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          if (~v31 + v34 == v54)
            break;
          if (v55 + v54 < v31 || v55 + v54 >= v34)
            goto LABEL_33;
          v56 = *(unsigned __int8 *)(v27 + 1 + v25 + v54);
          v57 = *(unsigned __int8 *)(v31 + 1 + v30 + v54);
          if (v56 < v57)
            goto LABEL_21;
          ++v54;
          if (v57 < v56)
            goto LABEL_4;
        }
      }
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v14 = v63;
    sub_2380BDA54();
    v36 = v35;
    v38 = v37;
    result = swift_unknownObjectRelease();
    v39 = (v38 >> 1) - v36;
    if (__OFSUB__(v38 >> 1, v36))
      break;
    v11 = v62;
    sub_2380BDA54();
    v41 = v40;
    v43 = v42;
    result = swift_unknownObjectRelease();
    v44 = __OFSUB__(v43 >> 1, v41);
    v45 = (v43 >> 1) - v41;
    if (v44)
      goto LABEL_35;
    v46 = (void (*)(char *, uint64_t))v68[1];
    v46(v11, v6);
    result = ((uint64_t (*)(char *, uint64_t))v46)(v14, v6);
    if (v39 >= v45)
      goto LABEL_5;
LABEL_15:
    v47 = *v67;
    if (!*v67)
      goto LABEL_38;
    v48 = v47 + v22;
    v49 = v47 + v23;
    v50 = (void (*)(char *, uint64_t, uint64_t))v68[4];
    v50(v66, v47 + v22, v6);
    if (v22 < v23 || v48 >= v49 + v65)
      swift_arrayInitWithTakeFrontToBack();
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v50)(v49, v66, v6);
    v17 = v18;
    if (v18 == v61)
      goto LABEL_5;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_2380327B4(unint64_t a1, unint64_t a2, char *a3, unint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v29)(char *, unint64_t, uint64_t);
  char v30;
  char v31;
  void (*v32)(char *, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, unint64_t, uint64_t);
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  char v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, unint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;

  v5 = v4;
  v10 = sub_2380BDA60();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v61 = (char *)&v54 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v54 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v54 - v19;
  v63 = *(_QWORD *)(v18 + 72);
  if (!v63)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v21 = v18;
  if (a2 - a1 == 0x8000000000000000 && v63 == -1)
    goto LABEL_66;
  v22 = &a3[-a2];
  if (&a3[-a2] == (char *)0x8000000000000000 && v63 == -1)
    goto LABEL_67;
  v23 = (uint64_t)(a2 - a1) / v63;
  v66 = a1;
  v65 = a4;
  v24 = (uint64_t)v22 / v63;
  if (v23 >= (uint64_t)v22 / v63)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      v26 = v24 * v63;
      v58 = v17;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v36 = a4 + v26;
      v64 = a4 + v26;
      v66 = a2;
      if (v26 >= 1 && a1 < a2)
      {
        v55 = a1;
        v56 = a4;
        v59 = -v63;
        v60 = v10;
        v57 = *(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 16);
        v38 = v61;
        v62 = v21;
        while (1)
        {
          v39 = a2;
          v40 = (unint64_t)a3;
          v41 = v59;
          v42 = v57;
          v57((uint64_t)v38, v36 + v59, v10);
          v63 = v39;
          v43 = v39 + v41;
          v44 = v38;
          v45 = v58;
          v42(v58, v43, v10);
          v46 = sub_238031480();
          if (v5)
            break;
          v47 = v46;
          v61 = 0;
          v48 = v40 + v41;
          v49 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
          v49(v45, v10);
          v49((uint64_t)v44, v10);
          v38 = v44;
          if ((v47 & 1) != 0)
          {
            if (v40 < v63 || v40 + v41 >= v63)
            {
              v48 = v40 + v41;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              v48 = v40 + v41;
              if (v40 != v63)
                swift_arrayInitWithTakeBackToFront();
            }
            v66 += v59;
          }
          else
          {
            v43 = v63;
            v50 = v64;
            v64 += v41;
            if (v40 < v50 || v48 >= v50)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v40 != v50)
            {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v5 = v61;
          v36 = v64;
          if (v64 > v56)
          {
            a2 = v43;
            a3 = (char *)v48;
            v10 = v60;
            if (v43 > v55)
              continue;
          }
          goto LABEL_64;
        }
        v52 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        v52(v45, v10);
        v52((uint64_t)v44, v10);
      }
      goto LABEL_64;
    }
  }
  else
  {
    v61 = a3;
    if ((v23 & 0x8000000000000000) == 0)
    {
      v25 = v23 * v63;
      v62 = v18;
      if (a4 < a1 || a1 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a1)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v27 = a4 + v25;
      v64 = a4 + v25;
      if (v25 >= 1 && a2 < (unint64_t)v61)
      {
        v29 = *(void (**)(char *, unint64_t, uint64_t))(v62 + 16);
        while (1)
        {
          v29(v20, a2, v10);
          v29(v16, a4, v10);
          v30 = sub_238031480();
          if (v4)
            break;
          v31 = v30;
          v32 = *(void (**)(char *, uint64_t))(v62 + 8);
          v32(v16, v10);
          v32(v20, v10);
          v33 = v66;
          if ((v31 & 1) != 0)
          {
            v34 = a2 + v63;
            if (v66 < a2 || v66 >= v34)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v66 == a2)
            {
              v33 = a2;
            }
            else
            {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          else
          {
            v35 = v65 + v63;
            if (v66 < v65 || v66 >= v35)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v66 != v65)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v65 = v35;
            v34 = a2;
          }
          v66 = v33 + v63;
          a4 = v65;
          if (v65 < v27)
          {
            a2 = v34;
            if (v34 < (unint64_t)v61)
              continue;
          }
          goto LABEL_64;
        }
        v51 = *(void (**)(char *, uint64_t))(v62 + 8);
        v51(v16, v10);
        v51(v20, v10);
      }
LABEL_64:
      sub_238032EFC(&v66, &v65, (uint64_t *)&v64);
      return 1;
    }
  }
LABEL_68:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

char *sub_238032D5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6350);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_238032E54(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_2380BE114();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_238032EFC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_2380BDA60();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = sub_2380BE114();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_238033008(uint64_t a1)
{
  return sub_238032D5C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23803301C(uint64_t a1)
{
  return sub_2380763F8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_238033030(_QWORD *a1)
{
  return sub_2380763E4(0, a1[2], 0, a1);
}

unint64_t sub_238033044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C5A30[0];
  if (!qword_2568C5A30[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C5A28);
    result = MEMORY[0x23B82B770](MEMORY[0x24BDD0690], v1);
    atomic_store(result, qword_2568C5A30);
  }
  return result;
}

uint64_t sub_238033090()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t SEP.Attestation.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v12 = sub_23800A21C(*MEMORY[0x24BE078F8]);
  *((_QWORD *)&v12 + 1) = v6;
  sub_23801B708((uint64_t)&v12);
  v13 = v12;
  sub_237FFBA20(a1, a2);
  sub_23801B9A0((uint64_t)&v13);
  v8 = v7;
  result = sub_237FFBAB0(a1, a2);
  if (v8)
  {
    sub_23801BD6C();
    swift_allocError();
    *v10 = 0;
    swift_willThrow();
    sub_237FFBAB0(a1, a2);
    return sub_237FFBAB0(v13, *((unint64_t *)&v13 + 1));
  }
  else
  {
    v11 = v13;
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
    *(_OWORD *)(a3 + 16) = v11;
  }
  return result;
}

uint64_t SEP.Attestation.nonce.getter()
{
  return sub_238035B70((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *))sub_238034DF4);
}

double SEP.Attestation.publicKeyData.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;
  unint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6370);
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  v6 = *v1;
  v5 = v1[1];
  v7 = v1[2];
  v8 = v1[3];
  sub_237FFBA20(*v1, v5);
  sub_237FFBA20(v7, v8);
  sub_238034BC8(v6, v5, v7, v8);
  sub_237FFBAB0(v6, v5);
  sub_237FFBAB0(v7, v8);
  if (v10 >> 60 != 15)
    __asm { BR              X10 }
  result = 0.0;
  *a1 = xmmword_2380C0D50;
  return result;
}

void SEP.Attestation.identity.getter()
{
  uint64_t *v0;

  sub_238033F18(*v0, v0[1], v0[2], v0[3]);
}

uint64_t SEP.Attestation.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_237FFBA20(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_2380335F0()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C6358);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C6358);
  return sub_2380BD7FC();
}

void sub_238033670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x238033890);
}

uint64_t SEP.Attestation.init<A>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE *v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v8 = sub_2380BD3B8();
  v10 = v9;
  *(_QWORD *)&v17 = sub_23800A21C(*MEMORY[0x24BE078F8]);
  *((_QWORD *)&v17 + 1) = v11;
  sub_23801B708((uint64_t)&v17);
  v18 = v17;
  sub_237FFBA20(v8, v10);
  sub_23801B9A0((uint64_t)&v18);
  v13 = v12;
  sub_237FFBAB0(v8, v10);
  if (v13)
  {
    sub_23801BD6C();
    swift_allocError();
    *v14 = 0;
    swift_willThrow();
    sub_237FFBAB0(v8, v10);
    sub_237FFBAB0(v18, *((unint64_t *)&v18 + 1));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    v16 = v18;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v10;
    *(_OWORD *)(a3 + 16) = v16;
  }
  return result;
}

uint64_t SEP.Attestation.init(from:signer:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  __CFError *v7;
  int v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  CFDataRef v13;
  CFDataRef v14;
  uint64_t v15;
  uint64_t v16;
  CFErrorRef v17;
  CFErrorRef *v18;
  unsigned __int128 v19;
  CFErrorRef error[2];
  unsigned __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *MEMORY[0x24BE078F8];
  sub_237FFBA20(a1, a2);
  error[0] = (CFErrorRef)sub_23800A21C(v6);
  error[1] = v7;
  sub_23801B708((uint64_t)error);
  v22 = *(_OWORD *)error;
  sub_237FFBA20(a1, a2);
  sub_23801B9A0((uint64_t)&v22);
  v9 = v8;
  sub_237FFBAB0(a1, a2);
  if (v9)
  {
    sub_23801BD6C();
    swift_allocError();
    *v10 = 0;
    swift_willThrow();
    sub_237FFBAB0(a1, a2);
    sub_237FFBAB0(v22, *((unint64_t *)&v22 + 1));

    v11 = a1;
    v12 = a2;
  }
  else
  {
    v23 = a1;
    v24 = a2;
    error[0] = 0;
    v25 = v22;
    v13 = SecKeyCopyExternalRepresentation((SecKeyRef)a3, error);
    if (v13)
    {
      v14 = v13;
      sub_2380BD37C();
      v16 = v15;

      __asm { BR              X10 }
    }
    v17 = error[0];
    if (!error[0])
    {
      __break(1u);
      JUMPOUT(0x238033EA4);
    }
    type metadata accessor for CFError(0);
    sub_2380367E8();
    swift_allocError();
    *v18 = v17;
    swift_willThrow();

    sub_237FFBAB0(a1, a2);
    v19 = v25;
    sub_237FFBAB0(v23, v24);
    v12 = v19 >> 64;
    v11 = v19;
  }
  return sub_237FFBAB0(v11, v12);
}

void sub_238033EB4(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;

  if (a2)
  {
    if (aks_attest_context_verify())
    {
      sub_23801BD6C();
      swift_allocError();
      *v2 = 3;
      swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_238033F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

_BYTE *sub_238033F7C()
{
  uint64_t *v0;
  _BYTE **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v3;
  v7 = v4;
  v8 = BYTE2(v4);
  v9 = BYTE3(v4);
  v10 = BYTE4(v4);
  v11 = BYTE5(v4);
  return sub_2380352E8((uint64_t)&v6, v1, v0, v2);
}

void sub_238034118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

uint64_t sub_23803417C()
{
  uint64_t (*v0)(uint64_t *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  return v0(&v4);
}

void sub_238034344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  sub_237FFBA20(a7, a8);
  sub_237FFBA20(a9, a10);
  sub_237FFBA20(a7, a8);
  sub_237FFBA20(a9, a10);
  __asm { BR              X10 }
}

uint64_t sub_2380343E4()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v10 = v7;
  v11 = v5;
  v12 = BYTE2(v5);
  v13 = BYTE3(v5);
  v14 = BYTE4(v5);
  v15 = BYTE5(v5);
  sub_237FFBA20(v3, v1);
  sub_237FFBA20(v2, v0);
  sub_237FFBA20(v3, v1);
  sub_237FFBA20(v2, v0);
  sub_238035408((uint64_t)&v10, v4, v6, v3, v1, v2, v0, v9);
  sub_237FFBAB0(v3, v1);
  sub_237FFBAB0(v2, v0);
  sub_237FFBAB0(v3, v1);
  sub_237FFBAB0(v2, v0);
  sub_237FFBAB0(v3, v1);
  sub_237FFBAB0(v2, v0);
  sub_237FFBAB0(v3, v1);
  return sub_237FFBAB0(v2, v0);
}

void sub_2380346E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_238034778(a1, a2, a3, a4);
}

void sub_23803472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_238034778(a1, a2, a3, a4);
}

void sub_238034778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_2380347CC()
{
  if (aks_attest_context_get_uint64())
    return 2;
  else
    return 0;
}

void sub_238034954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_238034778(a1, a2, a3, a4);
}

void sub_2380349A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

unint64_t sub_2380349F0()
{
  return (unint64_t)(aks_attest_context_get_uint64() != 0) << 32;
}

void sub_238034BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_238034C2C()
{
  uint64_t *v0;
  uint64_t *v1;
  _BYTE **v2;
  uint64_t result;
  unint64_t v4;

  if (aks_attest_context_get())
  {
    result = 0;
    v4 = 0xF000000000000000;
  }
  else
  {
    if (!*v2)
    {
      __break(1u);
      JUMPOUT(0x238034CB8);
    }
    result = sub_2380365F0(*v2, *v1);
  }
  *v0 = result;
  v0[1] = v4;
  return result;
}

void sub_238034DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_238034E58()
{
  uint64_t *v0;
  uint64_t *v1;
  _BYTE **v2;
  uint64_t result;
  unint64_t v4;

  if (aks_attest_context_get())
  {
    result = 0;
    v4 = 0xF000000000000000;
  }
  else
  {
    if (!*v2)
    {
      __break(1u);
      JUMPOUT(0x238034EE4);
    }
    result = sub_2380365F0(*v2, *v1);
  }
  *v0 = result;
  v0[1] = v4;
  return result;
}

void sub_238035020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_238035084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v1;
  v4 = v2;
  v5 = BYTE2(v2);
  v6 = BYTE3(v2);
  v7 = BYTE4(v2);
  v8 = BYTE5(v2);
  sub_238033EB4((uint64_t)&v3, v0);
}

double SEP.Attestation.init<A>(from:signer:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double result;
  __int128 v14;
  _OWORD v15[2];

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v11 = sub_2380BD3B8();
  SEP.Attestation.init(from:signer:)(v11, v12, a2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a3);
  if (!v4)
  {
    result = *(double *)v15;
    v14 = v15[1];
    *a4 = v15[0];
    a4[1] = v14;
  }
  return result;
}

_BYTE *sub_2380352E8@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;

  v8 = sub_2380BDD48();
  result = (_BYTE *)MEMORY[0x24BDAC7A8](v8);
  if (a1)
  {
    result = (_BYTE *)aks_attest_context_get();
    if ((_DWORD)result)
      goto LABEL_3;
    result = *a2;
    if (*a2)
    {
      v11 = sub_2380365F0(result, *a3);
      v13 = v12;
      sub_2380BDD3C();
      v14 = sub_2380BDD18();
      if (v15)
      {
        SEP.Identity.init(string:)(v14, v15, &v16);
        result = (_BYTE *)sub_237FFBAB0(v11, v13);
        v10 = v17;
        if (v17 != 2)
        {
          *(_OWORD *)a4 = v16;
          goto LABEL_4;
        }
      }
      else
      {
        result = (_BYTE *)sub_237FFBAB0(v11, v13);
      }
LABEL_3:
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v10 = 2;
LABEL_4:
      *(_QWORD *)(a4 + 16) = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_BYTE *sub_238035408@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  _BYTE *result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (!a1)
    __break(1u);
  if (aks_attest_context_get())
  {
    sub_237FFBAB0(a4, a5);
    result = (_BYTE *)sub_237FFBAB0(a6, a7);
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0x3000000000000000;
  }
  else
  {
    result = *a2;
    if (*a2)
    {
      v16 = sub_2380365F0(result, *a3);
      v18 = v17;
      sub_237FFBA20(a4, a5);
      sub_237FFBA20(a6, a7);
      sub_238033F18(a4, a5, a6, a7);
      sub_237FFBAB0(a4, a5);
      sub_237FFBAB0(a6, a7);
      SEP.SealData.init(for:data:)(v16, v18, a8);
      sub_237FFBAB0(a4, a5);
      return (_BYTE *)sub_237FFBAB0(a6, a7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void SEP.Attestation.sealedHash(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[6];
  _BYTE v7[16];
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  memset(v6, 0, 86);
  v8 = a1;
  v9 = v6;
  sub_238034118((uint64_t)sub_238036830, (uint64_t)v7, v2, v3, v4, v5);
}

uint64_t sub_2380355F4@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  _OWORD v21[3];
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v22 = sub_2380BD43C();
  v23 = v4;
  v24 = v5;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  v29 = v10;
  v30 = v11;
  if (aks_attest_context_get_sealed_hash())
  {
    v12 = type metadata accessor for SEP.SealedHash(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  else
  {
    v14 = *(_OWORD *)(a1 + 54);
    v21[0] = *(_OWORD *)(a1 + 38);
    v21[1] = v14;
    v21[2] = *(_OWORD *)(a1 + 70);
    v15 = sub_2380365F0(v21, *(unsigned __int8 *)(a1 + 37));
    v17 = v16;
    v18 = *(_BYTE *)(a1 + 16);
    v19 = type metadata accessor for SEP.SealedHash(0);
    v20 = (uint64_t *)&a2[*(int *)(v19 + 20)];
    *v20 = v15;
    v20[1] = v17;
    type metadata accessor for SEP.SealedHash.Value(0);
    swift_storeEnumTagMultiPayload();
    *a2 = v18;
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 0, 1, v19);
  }
}

void SEP.Attestation.sealDataA.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = 0;
  v6[0] = 0;
  sub_237FFBA20(v1, v2);
  sub_237FFBA20(v4, v3);
  sub_238034344(v1, v2, v4, v3, (uint64_t)v6, (uint64_t)&v5, v1, v2, v4, v3);
}

uint64_t SEP.Attestation.boardID.getter()
{
  uint64_t *v0;
  unint64_t v1;

  sub_2380349A0(*v0, v0[1], v0[2], v0[3]);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

void SEP.Attestation.keyOptions.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_2380358DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (aks_attest_context_get_uint64())
  {
    v1 = sub_2380BD49C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
  }
  else
  {
    sub_2380BD490();
    v3 = sub_2380BD49C();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v0, 0, 1, v3);
  }
}

void SEP.Attestation.restrictedExecutionMode.getter()
{
  sub_238035AF0();
}

void SEP.Attestation.ephemeralDataMode.getter()
{
  sub_238035AF0();
}

void SEP.Attestation.developerMode.getter()
{
  sub_238035AF0();
}

void sub_238035AF0()
{
  uint64_t *v0;

  sub_238034778(*v0, v0[1], v0[2], v0[3]);
}

uint64_t SEP.Attestation.rawPublicKeyData.getter()
{
  return sub_238035B70((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *))sub_238034BC8);
}

uint64_t sub_238035B70(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v10[0] = 0;
  v8 = 0;
  a1(&v9, v3, v4, v5, v6, v10, &v8);
  return v9;
}

void SEP.Attestation.keyType.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_238035C34()
{
  uint64_t v0;
  uint64_t v1;

  if (!aks_attest_context_get_uint64())
    return sub_2380BD460();
  v1 = sub_2380BD46C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

BOOL static SEP.Attestation.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SEP.Attestation.Error.hash(into:)()
{
  return sub_2380BE240();
}

uint64_t SEP.Attestation.Error.hashValue.getter()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

void sub_238035E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v6 = sub_2380BD208();
  if (v6)
  {
    v7 = v6;
    v8 = sub_2380BD22C();
    v9 = __OFSUB__(a1, v8);
    v10 = a1 - v8;
    if (!v9)
    {
      sub_2380BD220();
      sub_238033EB4(v7 + v10, a4);
      return;
    }
    __break(1u);
  }
  sub_2380BD220();
  __break(1u);
}

uint64_t sub_238035F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = sub_2380BD208();
  if (!result || (result = sub_2380BD22C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_2380BD220();
      v8 = *a4;
      v9 = a4[1];
      v11 = a4[2];
      v10 = a4[3];
      sub_237FFBA20(v8, v9);
      sub_237FFBA20(v11, v10);
      sub_238035020(v8, v9, v11, v10);
      sub_237FFBAB0(v8, v9);
      return sub_237FFBAB0(v11, v10);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_BYTE *sub_23803600C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE **a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  _BYTE *result;
  uint64_t v11;

  result = (_BYTE *)sub_2380BD208();
  v11 = (uint64_t)result;
  if (result)
  {
    result = (_BYTE *)sub_2380BD22C();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v11 += a1 - (_QWORD)result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_2380BD220();
    return sub_2380352E8(v11, a3, a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2380360B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE **a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, unint64_t a9)
{
  uint64_t result;
  uint64_t v16;

  sub_237FFBA20(a5, a6);
  sub_237FFBA20(a7, a9);
  result = sub_2380BD208();
  v16 = result;
  if (result)
  {
    result = sub_2380BD22C();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v16 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_2380BD220();
    sub_237FFBA20(a5, a6);
    sub_237FFBA20(a7, a9);
    sub_238035408(v16, a3, a4, a5, a6, a7, a9, a8);
    sub_237FFBAB0(a5, a6);
    sub_237FFBAB0(a7, a9);
    sub_237FFBAB0(a5, a6);
    return sub_237FFBAB0(a7, a9);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2380361EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  if (!sub_2380BD208())
  {
LABEL_8:
    sub_2380BD220();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_2380BD22C()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_2380BD220();
  if (aks_attest_context_get_uint64())
  {
    v4 = sub_2380BD49C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  }
  else
  {
    sub_2380BD490();
    v6 = sub_2380BD49C();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 0, 1, v6);
  }
}

_BYTE *sub_2380362EC@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X3>, uint64_t *a3@<X4>, _QWORD *a4@<X8>)
{
  _BYTE *result;
  unint64_t v9;

  if (!sub_2380BD208())
    goto LABEL_9;
  if (__OFSUB__(a1, sub_2380BD22C()))
  {
    __break(1u);
LABEL_9:
    result = (_BYTE *)sub_2380BD220();
    __break(1u);
    goto LABEL_10;
  }
  sub_2380BD220();
  if (aks_attest_context_get())
  {
    result = 0;
    v9 = 0xF000000000000000;
LABEL_7:
    *a4 = result;
    a4[1] = v9;
    return result;
  }
  result = *a2;
  if (*a2)
  {
    result = (_BYTE *)sub_2380365F0(result, *a3);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_23803639C@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X3>, uint64_t *a3@<X4>, _QWORD *a4@<X8>)
{
  _BYTE *result;
  unint64_t v9;

  if (!sub_2380BD208())
    goto LABEL_9;
  if (__OFSUB__(a1, sub_2380BD22C()))
  {
    __break(1u);
LABEL_9:
    result = (_BYTE *)sub_2380BD220();
    __break(1u);
    goto LABEL_10;
  }
  sub_2380BD220();
  if (aks_attest_context_get())
  {
    result = 0;
    v9 = 0xF000000000000000;
LABEL_7:
    *a4 = result;
    a4[1] = v9;
    return result;
  }
  result = *a2;
  if (*a2)
  {
    result = (_BYTE *)sub_2380365F0(result, *a3);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23803644C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  if (!sub_2380BD208())
  {
LABEL_8:
    sub_2380BD220();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_2380BD22C()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_2380BD220();
  if (!aks_attest_context_get_uint64())
    return sub_2380BD460();
  v4 = sub_2380BD46C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
}

uint64_t sub_238036530(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_2380365F0(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_238036530(__src, &__src[a2]);
  sub_2380BD238();
  swift_allocObject();
  sub_2380BD1FC();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_2380BD310();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_23803669C(uint64_t a1)
{
  if (!sub_2380BD208())
  {
LABEL_8:
    sub_2380BD220();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_2380BD22C()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_2380BD220();
  if (aks_attest_context_get_uint64())
    return 2;
  else
    return 0;
}

uint64_t sub_238036760(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2380367A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_2380367E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C6378;
  if (!qword_2568C6378)
  {
    type metadata accessor for CFError(255);
    result = MEMORY[0x23B82B770](MEMORY[0x24BDCFD90], v1);
    atomic_store(result, (unint64_t *)&qword_2568C6378);
  }
  return result;
}

uint64_t sub_238036830@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_2380355F4(*(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_23803684C()
{
  unint64_t result;

  result = qword_2568C6380;
  if (!qword_2568C6380)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for SEP.Attestation.Error, &type metadata for SEP.Attestation.Error);
    atomic_store(result, (unint64_t *)&qword_2568C6380);
  }
  return result;
}

uint64_t _s11AttestationVwxx(uint64_t a1)
{
  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_237FFBAB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *_s11AttestationVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_237FFBA20(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_237FFBA20(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *_s11AttestationVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_237FFBA20(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_237FFBAB0(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_237FFBA20(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_237FFBAB0(v10, v11);
  return a1;
}

uint64_t *_s11AttestationVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_237FFBAB0(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_237FFBAB0(v6, v7);
  return a1;
}

uint64_t _s11AttestationVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s11AttestationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.Attestation()
{
  return &type metadata for SEP.Attestation;
}

uint64_t _s11AttestationV5ErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_238036ABC + 4 * byte_2380C0D69[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_238036AF0 + 4 * byte_2380C0D64[v4]))();
}

uint64_t sub_238036AF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_238036AF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x238036B00);
  return result;
}

uint64_t sub_238036B0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238036B14);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_238036B18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238036B20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEP.Attestation.Error()
{
  return &type metadata for SEP.Attestation.Error;
}

unint64_t sub_238036B3C(uint64_t a1)
{
  if (!sub_2380BD208())
  {
LABEL_5:
    sub_2380BD220();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_2380BD22C()))
  {
    __break(1u);
    __break(1u);
    goto LABEL_5;
  }
  sub_2380BD220();
  return (unint64_t)(aks_attest_context_get_uint64() != 0) << 32;
}

void sub_238036C08()
{
  qword_2568C9B78 = (uint64_t)&unk_2509D91A0;
}

uint64_t sub_238036C1C(uint64_t a1)
{
  return sub_238036C54(a1, qword_2568C9B80);
}

uint64_t sub_238036C38(uint64_t a1)
{
  return sub_238036C54(a1, qword_2568C9B98);
}

uint64_t sub_238036C54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6388);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2380BD448();
  __swift_allocate_value_buffer(v6, a2);
  v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  sub_2380BD424();
  v8 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  __break(1u);
  return result;
}

uint64_t sub_238036D28(uint64_t a1)
{
  return sub_238036D78(a1, 0xD00000000000031CLL, 0x80000002380C8810, &qword_2568C9BB0, (unint64_t *)algn_2568C9BB8);
}

uint64_t sub_238036D50(uint64_t a1)
{
  return sub_238036D78(a1, 0xD000000000000314, 0x80000002380C84F0, &qword_2568C9BC0, (unint64_t *)algn_2568C9BC8);
}

uint64_t sub_238036D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v8;

  result = sub_2380BD304();
  if (v8 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a4 = result;
    *a5 = v8;
  }
  return result;
}

CloudAttestation::AttestationPolicyContext __swiftcall AttestationPolicyContext.init()()
{
  CloudAttestation::AttestationPolicyContext *v0;
  CloudAttestation::AttestationPolicyContext *v1;
  CloudAttestation::AttestationPolicyContext result;

  v1 = v0;
  result.context._rawValue = (void *)sub_23800EBF0(MEMORY[0x24BEE4AF8]);
  v1->context._rawValue = result.context._rawValue;
  return result;
}

double AttestationPolicyContext.subscript.getter@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  double result;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_23800DEDC(*a1, a1[1], a1[2], a1[3]), (v6 & 1) != 0))
  {
    sub_238016570(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)a2);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t AttestationPolicyContext.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_238024D10(a1, (uint64_t)v8);
  sub_238022FD8((uint64_t)v8, v3, v4, v5, v6);
  return sub_238037344(a1);
}

uint64_t AttestationPolicyContext.Key.init(domain:key:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t AttestationPolicy.evaluate(bundle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t sub_238036ED0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v1 = v0[5];
  v0[2] = sub_23800EBF0(MEMORY[0x24BEE4AF8]);
  v4 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD))(**(int **)(v1 + 8) + *(_QWORD *)(v1 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  v0[7] = v2;
  *v2 = v0;
  v2[1] = sub_238036F50;
  return v4(v0[3], v0 + 2, v0[4], v0[5]);
}

uint64_t sub_238036F50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_238036FBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238036FC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttestationPolicyContext.Key.domain.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AttestationPolicyContext.Key.key.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_238037008(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  _BYTE v9[32];

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[3];
  sub_238024D10(a1, (uint64_t)v9);
  sub_238024D10((uint64_t)v9, (uint64_t)v8);
  swift_bridgeObjectRetain();
  sub_238022FD8((uint64_t)v8, v3, v4, v5, v6);
  return sub_238037344((uint64_t)v9);
}

void (*AttestationPolicyContext.subscript.modify(_QWORD *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v5 = malloc(0x88uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = a2[1];
  v5[12] = v2;
  v5[13] = v6;
  v8 = a2[2];
  v9 = a2[3];
  v5[14] = v7;
  v5[15] = v8;
  v5[16] = v9;
  v10 = *v2;
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_23800DEDC(v6, v7, v8, v9), (v12 & 1) != 0))
  {
    sub_238016570(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)v5);
  }
  else
  {
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
  }
  swift_bridgeObjectRetain();
  return sub_238037118;
}

void sub_238037118(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 32;
  if ((a2 & 1) != 0)
  {
    v5 = v2[15];
    v4 = v2[16];
    v7 = v2[13];
    v6 = v2[14];
    sub_238024D10(*a1, v3);
    sub_238024D10(v3, (uint64_t)(v2 + 8));
    sub_238022FD8((uint64_t)(v2 + 8), v7, v6, v5, v4);
    sub_238037344(v3);
  }
  else
  {
    v8 = v2[15];
    v9 = v2[16];
    v11 = v2[13];
    v10 = v2[14];
    sub_238024D10(*a1, v3);
    sub_238022FD8(v3, v11, v10, v8, v9);
  }
  sub_238037344((uint64_t)v2);
  free(v2);
}

uint64_t AttestationPolicyContext.Key.hash(into:)()
{
  return sub_2380BE240();
}

uint64_t AttestationPolicyContext.Key.hashValue.getter()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t sub_23803724C()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t sub_238037290()
{
  return sub_2380BE240();
}

uint64_t sub_2380372B8()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t _s16CloudAttestation0B13PolicyContextV3KeyV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[2] == a2[2] && a1[3] == a2[3])
    return 1;
  else
    return sub_2380BE1B0();
}

uint64_t sub_238037344(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6128);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_238037388()
{
  unint64_t result;

  result = qword_2568C6398;
  if (!qword_2568C6398)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for AttestationPolicyContext.Key, &type metadata for AttestationPolicyContext.Key);
    atomic_store(result, (unint64_t *)&qword_2568C6398);
  }
  return result;
}

double sub_2380373CC@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  v9 = *a1;
  v6 = *a2;
  v7 = v3;
  v8 = v4;
  return AttestationPolicyContext.subscript.getter((uint64_t *)&v6, a3);
}

uint64_t sub_238037414()
{
  return 0;
}

uint64_t dispatch thunk of AttestationPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_238013814;
  return v11(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for AttestationPolicyContext()
{
  return &type metadata for AttestationPolicyContext;
}

uint64_t destroy for AttestationPolicyContext.Key()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttestationPolicyContext.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttestationPolicyContext.Key(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttestationPolicyContext.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttestationPolicyContext.Key(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttestationPolicyContext.Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttestationPolicyContext.Key()
{
  return &type metadata for AttestationPolicyContext.Key;
}

const char *PrivateCloudComputeFeatures.domain.getter()
{
  return "PrivateCloudCompute";
}

const char *PrivateCloudComputeFeatures.feature.getter()
{
  return "enforceEnvironment";
}

uint64_t static PrivateCloudComputeFeatures.== infix(_:_:)()
{
  return 1;
}

uint64_t PrivateCloudComputeFeatures.hash(into:)()
{
  return sub_2380BE240();
}

uint64_t PrivateCloudComputeFeatures.hashValue.getter()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

unint64_t sub_2380376A4()
{
  unint64_t result;

  result = qword_2568C63A8;
  if (!qword_2568C63A8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for PrivateCloudComputeFeatures, &type metadata for PrivateCloudComputeFeatures);
    atomic_store(result, (unint64_t *)&qword_2568C63A8);
  }
  return result;
}

const char *sub_2380376E8()
{
  return "PrivateCloudCompute";
}

const char *sub_2380376FC()
{
  return "enforceEnvironment";
}

uint64_t storeEnumTagSinglePayload for PrivateCloudComputeFeatures(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_238037750 + 4 * asc_2380C0F10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_238037770 + 4 * byte_2380C0F15[v4]))();
}

_BYTE *sub_238037750(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_238037770(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_238037778(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_238037780(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_238037788(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_238037790(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PrivateCloudComputeFeatures()
{
  return &type metadata for PrivateCloudComputeFeatures;
}

void sub_2380377AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;
  CFPropertyListRef v11;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  int v15;
  _QWORD v16[13];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[10];

  v20[8] = *MEMORY[0x24BDAC8D0];
  v0 = sub_2380BD988();
  v16[9] = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_2380BD844();
  v16[7] = *(_QWORD *)(v1 - 8);
  v16[8] = v1;
  MEMORY[0x24BDAC7A8](v1);
  v16[6] = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_2380BD280();
  MEMORY[0x24BDAC7A8](v17);
  v19 = sub_2380BD2C8();
  v16[12] = *(_QWORD *)(v19 - 8);
  v3 = MEMORY[0x24BDAC7A8](v19);
  v16[10] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v16[11] = (char *)v16 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v7);
  v18 = (char *)v16 - v8;
  if (os_variant_allows_internal_security_policies())
  {
    v9 = (__CFString *)sub_2380BDCF4();
    v10 = (__CFString *)sub_2380BDCF4();
    v11 = CFPreferencesCopyAppValue(v9, v10);

    if (v11
      || (v12 = (__CFString *)sub_2380BDCF4(),
          v13 = (__CFString *)sub_2380BDCF4(),
          v11 = CFPreferencesCopyAppValue(v12, v13),
          v12,
          v13,
          v11))
    {
      v20[3] = v11;
      if ((swift_dynamicCast() & 1) != 0)
      {
        type metadata accessor for Proto_AttestationBundle(0);
        sub_238001820(&qword_2568C63F8, type metadata accessor for Proto_AttestationBundle, (uint64_t)&unk_2380C7478);
        v16[4] = sub_2380BD70C();
        v16[5] = v14;
        sub_2380BD28C();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v15 = byte_2542C9B90;
        if (byte_2542C9B90 == 9)
        {
          static Environment.default.getter((char *)v20);
          v15 = LOBYTE(v20[0]);
        }
        else
        {
          LOBYTE(v20[0]) = byte_2542C9B90;
        }
        __asm { BR              X12 }
      }
    }
  }
}

uint64_t sub_2380383B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;

  v1 = sub_2380BD844();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0];
  MEMORY[0x24BDAC7A8](v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v1);
  sub_238001820(&qword_2568C6230, v2, MEMORY[0x24BDC6300]);
  result = sub_2380BDE08();
  v6 = v21;
  v7 = v22;
  v8 = v21[2];
  if (v22 == v8)
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_3:
    swift_bridgeObjectRelease();
    v21 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
    sub_23804390C();
    v10 = sub_2380BDCD0();
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    if (v22 < v8)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v20 = xmmword_2380BEAC0;
      v11 = v22;
      while ((v7 & 0x8000000000000000) == 0)
      {
        if (v11 >= v6[2])
          goto LABEL_15;
        v12 = *((_BYTE *)v6 + v11 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = v20;
        *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE4260];
        *(_QWORD *)(v13 + 64) = MEMORY[0x24BEE42B0];
        *(_BYTE *)(v13 + 32) = v12;
        v14 = sub_2380BDD30();
        v16 = v15;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_2380267E8(0, v9[2] + 1, 1, v9);
          v9 = (_QWORD *)result;
        }
        v18 = v9[2];
        v17 = v9[3];
        if (v18 >= v17 >> 1)
        {
          result = (uint64_t)sub_2380267E8((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
          v9 = (_QWORD *)result;
        }
        ++v11;
        v9[2] = v18 + 1;
        v19 = &v9[2 * v18];
        v19[4] = v14;
        v19[5] = v16;
        if (v8 == v11)
          goto LABEL_3;
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

double sub_2380385E8()
{
  return (double)sub_2380BE294();
}

double Attestor.defaultKeyLifetime.getter()
{
  return (double)sub_2380BE294();
}

unint64_t Attestor.defaultKeyDuration.getter()
{
  return 0xC0DDD92E56000000;
}

uint64_t Attestor.attest(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_2380BD418();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2380386B4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD);

  v1 = v0[5];
  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(v0[4], v1);
  sub_2380BD3F4();
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))(**(int **)(v1 + 16)
                                                                                                + *(_QWORD *)(v1 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v0[10] = v2;
  *v2 = v0;
  v2[1] = sub_23803874C;
  return v4(v0[2], v0[3], v0[9], 0, 0xF000000000000000, v0[4], v0[5]);
}

uint64_t sub_23803874C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *(_QWORD *)(*v1 + 56);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_2380387EC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Attestor.attest(key:expiration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t))(**(int **)(a5 + 16) + *(_QWORD *)(a5 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_2380165B0;
  return v13(a1, a2, a3, 0, 0xF000000000000000, a4, a5);
}

uint64_t Attestor.attest(key:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v8 = sub_2380BD418();
  v7[9] = v8;
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_238038928()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v1 = v0[7];
  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(v0[6], v1);
  sub_2380BD3F4();
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v1 + 16)
                                                                                      + *(_QWORD *)(v1 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_2380389BC;
  return v4(v0[2], v0[3], v0[11], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_2380389BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *v1;
  *(_QWORD *)(v5 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_238038A5C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238038A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 16) = v17;
  *v17 = v10;
  v17[1] = sub_2380165B0;
  return Validator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a10);
}

uint64_t Validator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v8[22] = v14;
  v8[23] = v15;
  v8[20] = a7;
  v8[21] = a8;
  v8[18] = a5;
  v8[19] = a6;
  v8[16] = a3;
  v8[17] = a4;
  v8[14] = a1;
  v8[15] = a2;
  type metadata accessor for AttestationBundle(0);
  v8[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
  v8[25] = swift_task_alloc();
  v9 = sub_2380BD598();
  v8[26] = v9;
  v8[27] = *(_QWORD *)(v9 - 8);
  v8[28] = swift_task_alloc();
  v10 = sub_2380BD418();
  v8[29] = v10;
  v8[30] = *(_QWORD *)(v10 - 8);
  v8[31] = swift_task_alloc();
  v8[32] = swift_task_alloc();
  v11 = sub_2380BD844();
  v8[33] = v11;
  v8[34] = *(_QWORD *)(v11 - 8);
  v8[35] = swift_task_alloc();
  v12 = sub_2380BD808();
  v8[36] = v12;
  v8[37] = *(_QWORD *)(v12 - 8);
  v8[38] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_238038CB4()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[23];
  v0[10] = v0[21];
  swift_getMetatypeMetadata();
  sub_2380BDD54();
  sub_2380BD7FC();
  v0[11] = sub_23800EBF0(MEMORY[0x24BEE4AF8]);
  v2 = *(int **)(v1 + 8);
  v3 = *v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[39] = v4;
  *v4 = v0;
  v4[1] = sub_238038DB0;
  return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD))((char *)v2 + v3))(v0[17], v0 + 11, v0[22], v0[23]);
}

uint64_t sub_238038DB0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_238038E58()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(void);
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t *v86;
  _QWORD *v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *type;
  os_log_type_t typeb;
  os_log_type_t typec[8];
  void (*typea)(uint64_t, uint64_t);
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v1 = v0[11];
  if (*(_QWORD *)(v1 + 16)
    && (v2 = sub_23800DEDC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x80000002380C7EE0), (v3 & 1) != 0)&& (sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)(v0 + 2)), __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28), (swift_dynamicCast() & 1) != 0))
  {
    v5 = v0[6];
    v4 = v0[7];
    v7 = v0[8];
    v6 = v0[9];
  }
  else
  {
    v8 = (uint64_t *)v0[17];
    v5 = *v8;
    v4 = v8[1];
    v9 = *MEMORY[0x24BE078F8];
    sub_237FFBA20(*v8, v4);
    *(_QWORD *)&v104 = sub_23800A21C(v9);
    *((_QWORD *)&v104 + 1) = v10;
    sub_23801B708((uint64_t)&v104);
    v103 = v104;
    sub_237FFBA20(v5, v4);
    sub_23801B9A0((uint64_t)&v103);
    LODWORD(v9) = v11;
    sub_237FFBAB0(v5, v4);
    if ((_DWORD)v9)
    {
      sub_23801BD6C();
      v12 = swift_allocError();
      *v13 = 0;
      type = (void *)v12;
      swift_willThrow();
      sub_237FFBAB0(v5, v4);
      v15 = *((_QWORD *)&v103 + 1);
      v14 = v103;
LABEL_15:
      sub_237FFBAB0(v14, v15);
LABEL_27:
      swift_bridgeObjectRelease();
      v61 = type;
      v62 = type;
      v63 = sub_2380BD7F0();
      v64 = sub_2380BDF64();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        v66 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v65 = 138412290;
        v67 = type;
        v68 = _swift_stdlib_bridgeErrorToNSError();
        v0[12] = v68;
        sub_2380BDF94();
        *v66 = v68;

        _os_log_impl(&dword_237FF6000, v63, v64, "AttestationBundle validation failed: %@", v65, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v66, -1, -1);
        MEMORY[0x23B82B830](v65, -1, -1);

      }
      else
      {

      }
      v69 = v0[37];
      v70 = v0[38];
      v71 = v0[36];
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v72 = (uint64_t (*)(void))v0[1];
      return v72();
    }
    v6 = *((_QWORD *)&v103 + 1);
    v7 = v103;
  }
  v16 = v0[19];
  if (v16 >> 60 != 15)
  {
    v17 = v0[18];
    v107 = 0;
    *(_QWORD *)&v103 = 0;
    sub_238009148(v17, v16);
    sub_237FFBA20(v5, v4);
    sub_237FFBA20(v7, v6);
    sub_238034DF4(v5, v4, v7, v6);
    sub_237FFBAB0(v5, v4);
    v94 = v7;
    v96 = v6;
    sub_237FFBAB0(v7, v6);
    v18 = v104;
    v20 = v0[18];
    v19 = v0[19];
    if (*((_QWORD *)&v104 + 1) >> 60 == 15)
    {
      sub_237FFBA20(v20, v19);
      sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
      sub_238008CF0(v20, v19);
LABEL_16:
      v27 = v0[18];
      v26 = v0[19];
      type metadata accessor for CloudAttestationError(0);
      sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
      v28 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      type = (void *)v28;
      swift_willThrow();
      sub_237FFBAB0(v5, v4);
      sub_237FFBAB0(v94, v96);
      sub_238008CF0(v27, v26);
      goto LABEL_27;
    }
    sub_238009148(v20, v19);
    sub_238009148(v18, *((unint64_t *)&v18 + 1));
    sub_238008ED0(v18, *((uint64_t *)&v18 + 1));
    v22 = v21;
    sub_238008CF0(v20, v19);
    sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
    sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
    if ((v22 & 1) == 0)
      goto LABEL_16;
    sub_238008CF0(v0[18], v0[19]);
    v7 = v94;
  }
  *(_QWORD *)&v104 = v5;
  *((_QWORD *)&v104 + 1) = v4;
  v105 = v7;
  v106 = v6;
  SEP.Attestation.publicKeyData.getter(&v103);
  v23 = *((_QWORD *)&v103 + 1);
  if ((~*((_QWORD *)&v103 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
    v24 = swift_allocError();
    *v25 = 0xD000000000000017;
    v25[1] = 0x80000002380C7F00;
    swift_storeEnumTagMultiPayload();
    type = (void *)v24;
    swift_willThrow();
    sub_237FFBAB0(v5, v4);
    v14 = v7;
    v15 = v6;
    goto LABEL_15;
  }
  v29 = v103;
  sub_23801BDB0(v103, *((uint64_t *)&v103 + 1));
  sub_23801BDC4(v29, v23);
  v30 = sub_2380BD7F0();
  v31 = sub_2380BDF70();
  v92 = v23;
  v93 = v29;
  v95 = v7;
  v97 = v6;
  if (os_log_type_enabled(v30, v31))
  {
    typeb = v31;
    v33 = v0[34];
    v32 = v0[35];
    v88 = v30;
    v34 = v0[33];
    v35 = (uint8_t *)swift_slowAlloc();
    v89 = swift_slowAlloc();
    *(_QWORD *)&v104 = v89;
    *(_DWORD *)v35 = 136315138;
    sub_23801AED4(v93, v23);
    sub_238001820(&qword_2568C5E20, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC6308]);
    v36 = sub_2380BE1A4();
    v38 = v37;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    v0[13] = sub_238013968(v36, v38, (uint64_t *)&v104);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_23801BDCC(v93, v92);
    sub_23801BDCC(v93, v92);
    _os_log_impl(&dword_237FF6000, v88, typeb, "AttestationBundle passed validation for public key: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v89, -1, -1);
    MEMORY[0x23B82B830](v35, -1, -1);

  }
  else
  {

    sub_23801BDCC(v29, v23);
    sub_23801BDCC(v29, v23);
  }
  v39 = v0[26];
  v40 = v0[27];
  v41 = v0[25];
  v42 = v0[17];
  v43 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v42 + *(int *)(v43 + 36), v41, &qword_2568C5E00);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) == 1)
  {
    v44 = v0[25];
    sub_2380BD58C();
    sub_238005240(v44, &qword_2568C5E00);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[27] + 32))(v0[28], v0[25], v0[26]);
  }
  v45 = v0[31];
  v46 = v0[30];
  *(_QWORD *)typec = v0[29];
  v48 = v0[27];
  v47 = v0[28];
  v49 = v0[26];
  sub_2380BD574();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  sub_2380BD40C();
  v50 = sub_2380BD3E8();
  v51 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v51(v45, *(_QWORD *)typec);
  v52 = v0[32];
  v54 = v0[29];
  v53 = v0[30];
  if ((v50 & 1) == 0)
  {
    v91 = v0[32];
    type metadata accessor for CloudAttestationError(0);
    sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
    v59 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v60, v91, v54);
    swift_storeEnumTagMultiPayload();
    type = (void *)v59;
    swift_willThrow();
    sub_23801BDCC(v93, v92);
    sub_237FFBAB0(v5, v4);
    sub_237FFBAB0(v95, v97);
    v51(v91, v54);
    goto LABEL_27;
  }
  typea = v51;
  v55 = v0[24];
  v56 = v0[17];
  v58 = (uint64_t *)v0[14];
  v57 = v0[15];
  *v58 = v93;
  v58[1] = v92;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v57, v52, v54);
  sub_23803BD64(v56, v55);
  v107 = 0;
  *(_QWORD *)&v103 = 0;
  sub_237FFBA20(v5, v4);
  sub_237FFBA20(v95, v97);
  sub_23801BDB0(v93, v92);
  sub_238033F18(v5, v4, v95, v97);
  sub_237FFBAB0(v5, v4);
  sub_237FFBAB0(v95, v97);
  if (v105 == 2)
  {
    sub_237FFBAB0(v5, v4);
    sub_237FFBAB0(v95, v97);
    sub_23801BDCC(v93, v92);
    v98 = 0;
    v90 = 0;
  }
  else
  {
    v74 = v104;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
    v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_2380BEAF0;
    v76 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v75 + 56) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v75 + 64) = v76;
    v77 = MEMORY[0x24BEE4568];
    *(_DWORD *)(v75 + 32) = v74;
    v78 = MEMORY[0x24BEE45B8];
    *(_QWORD *)(v75 + 96) = v77;
    *(_QWORD *)(v75 + 104) = v78;
    *(_QWORD *)(v75 + 72) = *((_QWORD *)&v74 + 1);
    v98 = sub_2380BDD30();
    v90 = v79;
    sub_23801BDCC(v93, v92);
    sub_237FFBAB0(v5, v4);
    sub_237FFBAB0(v95, v97);
  }
  v80 = v0[37];
  v81 = v0[38];
  v82 = v0[36];
  v83 = v0[24];
  v84 = v0[16];
  typea(v0[32], v0[29]);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v82);
  v85 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  *(_QWORD *)(v84 + v85[7]) = 0;
  sub_238001DE4(v83, v84, type metadata accessor for AttestationBundle);
  v86 = (uint64_t *)(v84 + v85[5]);
  *v86 = v98;
  v86[1] = v90;
  v87 = (_QWORD *)(v84 + v85[6]);
  *v87 = 0;
  v87[1] = 0;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v72 = (uint64_t (*)(void))v0[1];
  return v72();
}

uint64_t sub_2380399CC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 320);
  swift_bridgeObjectRelease();
  v2 = v1;
  v3 = v1;
  v4 = sub_2380BD7F0();
  v5 = sub_2380BDF64();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v1;
    v9 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 96) = v9;
    sub_2380BDF94();
    *v7 = v9;

    _os_log_impl(&dword_237FF6000, v4, v5, "AttestationBundle validation failed: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v7, -1, -1);
    MEMORY[0x23B82B830](v6, -1, -1);

  }
  else
  {

  }
  v11 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 288);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AttestationBundle(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6478);
}

uint64_t Validator.validate(bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[9] = AssociatedTypeWitness;
  v7[10] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[11] = swift_task_alloc();
  return swift_task_switch();
}

void sub_238039C7C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[7];
  (*(void (**)(_QWORD, uint64_t))(v1 + 24))(v0[6], v1);
  v3 = **(int **)(v1 + 32) + *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  swift_getAssociatedConformanceWitness();
  *v2 = v0;
  v2[1] = sub_2380389BC;
  __asm { BR              X8 }
}

uint64_t Validator.validate(bundle:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;

  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[11] = AssociatedTypeWitness;
  v9[12] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[13] = swift_task_alloc();
  return swift_task_switch();
}

void sub_238039DC8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[9];
  (*(void (**)(_QWORD, uint64_t))(v1 + 24))(v0[8], v1);
  v3 = **(int **)(v1 + 32) + *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)swift_task_alloc();
  v0[14] = v2;
  swift_getAssociatedConformanceWitness();
  *v2 = v0;
  v2[1] = sub_238039E8C;
  __asm { BR              X8 }
}

uint64_t sub_238039E8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 104);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *v1;
  *(_QWORD *)(v5 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_238039F2C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void Validator.validate<A>(bundle:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = **(int **)(a8 + 32) + *(_QWORD *)(a8 + 32);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v9;
  *v9 = v8;
  v9[1] = sub_2380165B0;
  __asm { BR              X8 }
}

uint64_t Validator.validate<A>(bundle:nonce:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9[13] = v14;
  v9[14] = v8;
  v9[11] = v12;
  v9[12] = v13;
  v9[9] = a8;
  v9[10] = v11;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  v9[15] = *(_QWORD *)(v12 - 8);
  v9[16] = swift_task_alloc();
  return swift_task_switch();
}

void sub_23803A09C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  (*(void (**)(void))(v0 + 64))();
  v3 = **(int **)(v1 + 32) + *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v2;
  *v2 = v0;
  v2[1] = sub_23803A12C;
  __asm { BR              X8 }
}

uint64_t sub_23803A12C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *(_QWORD *)(*v1 + 120);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *v1;
  *(_QWORD *)(v5 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23803A1D0()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Validator.validate<A>(bundle:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v9[11] = v12;
  v9[12] = v8;
  v9[9] = a8;
  v9[10] = v11;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  v9[13] = *(_QWORD *)(a8 - 8);
  v9[14] = swift_task_alloc();
  return swift_task_switch();
}

void sub_23803A270()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  (*(void (**)(void))(v0 + 48))();
  v3 = **(int **)(v1 + 32) + *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_23803A304;
  __asm { BR              X8 }
}

uint64_t sub_23803A304()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 72);
  v5 = *v1;
  *(_QWORD *)(v5 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23803A3A8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23803A3DC(uint64_t a1)
{
  return sub_23803ADDC(a1, qword_2568C9BD0);
}

uint64_t AttestationBundle.init(data:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;

  v3 = sub_2380BD610();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  sub_2380BD604();
  sub_238001820(&qword_2568C63F8, type metadata accessor for Proto_AttestationBundle, (uint64_t)&unk_2380C7478);
  result = sub_2380BD700();
  if (!v1)
    return sub_238001DE4((uint64_t)v6, a1, type metadata accessor for Proto_AttestationBundle);
  return result;
}

uint64_t AttestationBundle.init(jsonString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;

  v3 = sub_2380BD5E0();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BD5D4();
  sub_238001820(&qword_2568C63F8, type metadata accessor for Proto_AttestationBundle, (uint64_t)&unk_2380C7478);
  result = sub_2380BD6E8();
  if (!v1)
    return sub_238001DE4((uint64_t)v6, a1, type metadata accessor for Proto_AttestationBundle);
  return result;
}

uint64_t AttestationBundle.withUnvalidatedAttestationBundle<A>(_:)(void (*a1)(char *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = type metadata accessor for Unvalidated.AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23803BD64(v1, (uint64_t)v5);
  a1(v5);
  return sub_237FFD540((uint64_t)v5, type metadata accessor for Unvalidated.AttestationBundle);
}

uint64_t AttestationBundle.encode(to:)(_QWORD *a1)
{
  return sub_2380A0430(a1);
}

uint64_t sub_23803A720(_QWORD *a1)
{
  return sub_2380A0430(a1);
}

uint64_t sub_23803A734(uint64_t a1)
{
  return sub_23803ADDC(a1, qword_2568C9BE8);
}

uint64_t Unvalidated.AttestationBundle.udid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  void *v9;
  _BYTE *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23803BD64(v0, (uint64_t)v3);
  v5 = *v3;
  v4 = v3[1];
  sub_237FFBA20(*v3, v4);
  sub_237FFD540((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
  *(_QWORD *)&v45 = sub_23800A21C(*MEMORY[0x24BE078F8]);
  *((_QWORD *)&v45 + 1) = v6;
  sub_23801B708((uint64_t)&v45);
  v43 = v45;
  sub_237FFBA20(v5, v4);
  sub_23801B9A0((uint64_t)&v43);
  v8 = v7;
  sub_237FFBAB0(v5, v4);
  if (v8)
  {
    sub_23801BD6C();
    v9 = (void *)swift_allocError();
    *v10 = 0;
    swift_willThrow();
    sub_237FFBAB0(v5, v4);
    sub_237FFBAB0(v43, *((unint64_t *)&v43 + 1));
    if (qword_2568C4EC8 != -1)
      swift_once();
    v11 = sub_2380BD808();
    __swift_project_value_buffer(v11, (uint64_t)qword_2568C9BE8);
    v12 = v9;
    v13 = v9;
    v14 = sub_2380BD7F0();
    v15 = sub_2380BDF64();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v16 = 138543362;
      v18 = v9;
      v19 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)&v43 = v19;
      sub_2380BDF94();
      *v17 = v19;

      _os_log_impl(&dword_237FF6000, v14, v15, "Invalid sep attestation blob: %{public}@", v16, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v17, -1, -1);
      MEMORY[0x23B82B830](v16, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v20 = v43;
  *(_QWORD *)&v45 = 0;
  v42 = 0;
  sub_237FFBA20(v5, v4);
  sub_237FFBA20(v20, *((unint64_t *)&v20 + 1));
  sub_238033F18(v5, v4, v20, *((uint64_t *)&v20 + 1));
  sub_237FFBAB0(v5, v4);
  sub_237FFBAB0(v20, *((unint64_t *)&v20 + 1));
  if (v44 == 2)
  {
    if (qword_2568C4EC8 != -1)
      swift_once();
    v21 = sub_2380BD808();
    __swift_project_value_buffer(v21, (uint64_t)qword_2568C9BE8);
    v22 = sub_2380BD7F0();
    v23 = sub_2380BDF64();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_237FF6000, v22, v23, "Unable to parse device udid from sep attestation", v24, 2u);
      MEMORY[0x23B82B830](v24, -1, -1);

      sub_237FFBAB0(v5, v4);
      sub_237FFBAB0(v20, *((unint64_t *)&v20 + 1));
    }
    else
    {
      sub_237FFBAB0(v5, v4);
      sub_237FFBAB0(v20, *((unint64_t *)&v20 + 1));

    }
    return 0;
  }
  v25 = *((_QWORD *)&v43 + 1);
  v26 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2380BEAF0;
  v28 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v27 + 64) = v28;
  v29 = MEMORY[0x24BEE4568];
  *(_DWORD *)(v27 + 32) = v26;
  v30 = MEMORY[0x24BEE45B8];
  *(_QWORD *)(v27 + 96) = v29;
  *(_QWORD *)(v27 + 104) = v30;
  *(_QWORD *)(v27 + 72) = v25;
  v31 = sub_2380BDD30();
  v33 = v32;
  if (qword_2568C4EC8 != -1)
    swift_once();
  v34 = sub_2380BD808();
  __swift_project_value_buffer(v34, (uint64_t)qword_2568C9BE8);
  swift_bridgeObjectRetain_n();
  v35 = sub_2380BD7F0();
  v36 = sub_2380BDF70();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v41 = swift_slowAlloc();
    *(_QWORD *)&v43 = v41;
    *(_DWORD *)v37 = 136446210;
    v40 = v37 + 4;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v45 = sub_238013968(v31, v33, (uint64_t *)&v43);
    sub_2380BDF94();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237FF6000, v35, v36, "Parsed udid=%{public}s from unvalidated attestation bundle", v37, 0xCu);
    v38 = v41;
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v38, -1, -1);
    MEMORY[0x23B82B830](v37, -1, -1);

    sub_237FFBAB0(v5, v4);
    sub_237FFBAB0(v20, *((unint64_t *)&v20 + 1));
  }
  else
  {
    sub_237FFBAB0(v5, v4);
    sub_237FFBAB0(v20, *((unint64_t *)&v20 + 1));

    swift_bridgeObjectRelease_n();
  }
  return v31;
}

uint64_t sub_23803ADB8(uint64_t a1)
{
  return sub_23803ADDC(a1, qword_2568C9C00);
}

uint64_t sub_23803ADDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_2380BD808();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_2380BD7FC();
}

uint64_t Validated.AttestationBundle.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23803BD64(v1, a1);
}

uint64_t Validated.AttestationBundle.sepAttestation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23803BD64(v0, (uint64_t)v3);
  v4 = *(_QWORD *)v3;
  sub_237FFBA20(*(_QWORD *)v3, *((_QWORD *)v3 + 1));
  sub_237FFD540((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
  return v4;
}

uint64_t Validated.AttestationBundle.udid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  void *v15;
  _BYTE *v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  char v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Validated.AttestationBundle(0) + 20));
  if (!v4[1])
  {
    if (qword_2568C4ED0 != -1)
      swift_once();
    v6 = sub_2380BD808();
    __swift_project_value_buffer(v6, (uint64_t)qword_2568C9C00);
    v7 = sub_2380BD7F0();
    v8 = sub_2380BDF64();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_237FF6000, v7, v8, "UDID was not set from validation context, attempting to lazily parse from sep attestation blob", v9, 2u);
      MEMORY[0x23B82B830](v9, -1, -1);
    }

    sub_23803BD64(v0, (uint64_t)v3);
    v11 = *v3;
    v10 = v3[1];
    sub_237FFBA20(*v3, v10);
    sub_237FFD540((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
    *(_QWORD *)&v38 = sub_23800A21C(*MEMORY[0x24BE078F8]);
    *((_QWORD *)&v38 + 1) = v12;
    sub_23801B708((uint64_t)&v38);
    v36 = v38;
    sub_237FFBA20(v11, v10);
    sub_23801B9A0((uint64_t)&v36);
    v14 = v13;
    sub_237FFBAB0(v11, v10);
    if (v14)
    {
      sub_23801BD6C();
      v15 = (void *)swift_allocError();
      *v16 = 0;
      swift_willThrow();
      sub_237FFBAB0(v11, v10);
      sub_237FFBAB0(v36, *((unint64_t *)&v36 + 1));
      v17 = v15;
      v18 = v15;
      v19 = sub_2380BD7F0();
      v20 = sub_2380BDF64();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        v22 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v21 = 138543362;
        v23 = v15;
        v24 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)&v36 = v24;
        sub_2380BDF94();
        *v22 = v24;

        _os_log_impl(&dword_237FF6000, v19, v20, "Unexpected invalid sep attestation blob (how did this happen?): %{public}@", v21, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v22, -1, -1);
        MEMORY[0x23B82B830](v21, -1, -1);

LABEL_17:
        v5 = 0;
        goto LABEL_18;
      }

    }
    else
    {
      v25 = v36;
      *(_QWORD *)&v38 = 0;
      v35 = 0;
      sub_237FFBA20(v11, v10);
      sub_237FFBA20(v25, *((unint64_t *)&v25 + 1));
      sub_238033F18(v11, v10, v25, *((uint64_t *)&v25 + 1));
      sub_237FFBAB0(v11, v10);
      sub_237FFBAB0(v25, *((unint64_t *)&v25 + 1));
      if (v37 != 2)
      {
        v28 = *((_QWORD *)&v36 + 1);
        v29 = v36;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
        v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_2380BEAF0;
        v31 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v30 + 64) = v31;
        v32 = MEMORY[0x24BEE4568];
        *(_DWORD *)(v30 + 32) = v29;
        v33 = MEMORY[0x24BEE45B8];
        *(_QWORD *)(v30 + 96) = v32;
        *(_QWORD *)(v30 + 104) = v33;
        *(_QWORD *)(v30 + 72) = v28;
        v5 = sub_2380BDD30();
        sub_237FFBAB0(v11, v10);
        sub_237FFBAB0(v25, *((unint64_t *)&v25 + 1));
        goto LABEL_18;
      }
      v19 = sub_2380BD7F0();
      v26 = sub_2380BDF64();
      if (os_log_type_enabled(v19, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_237FF6000, v19, v26, "Unable to parse device udid from sep attestation", v27, 2u);
        MEMORY[0x23B82B830](v27, -1, -1);

        sub_237FFBAB0(v11, v10);
        sub_237FFBAB0(v25, *((unint64_t *)&v25 + 1));
        goto LABEL_17;
      }
      sub_237FFBAB0(v11, v10);
      sub_237FFBAB0(v25, *((unint64_t *)&v25 + 1));
    }

    goto LABEL_17;
  }
  v5 = *v4;
LABEL_18:
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t Validated.AttestationBundle.provisioningCertificateChain.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23803BD64(v0, (uint64_t)v3);
  v4 = *((_QWORD *)v3 + 4);
  swift_bridgeObjectRetain();
  sub_237FFD540((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
  return v4;
}

uint64_t Validated.AttestationBundle.keyExpiration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2380BD598();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23803BD64(v1, (uint64_t)v11);
  v12 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC((uint64_t)&v11[*(int *)(v12 + 36)], (uint64_t)v4, &qword_2568C5E00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_2380BD58C();
    sub_238005240((uint64_t)v4, &qword_2568C5E00);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  sub_237FFD540((uint64_t)v11, type metadata accessor for Proto_AttestationBundle);
  sub_2380BD574();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Validated.AttestationBundle.routingHint.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Validated.AttestationBundle(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Validated.AttestationBundle.ensembleUDIDs.getter()
{
  type metadata accessor for Validated.AttestationBundle(0);
  return swift_bridgeObjectRetain();
}

uint64_t PublicKeyData.raw.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23801BDC4(*v0, v0[1]);
  return v1;
}

uint64_t AttestationBundle.serializedData()()
{
  type metadata accessor for Proto_AttestationBundle(0);
  sub_238001820(&qword_2568C63F8, type metadata accessor for Proto_AttestationBundle, (uint64_t)&unk_2380C7478);
  return sub_2380BD70C();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AttestationBundle.jsonString()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String result;
  uint64_t v10;

  v0 = sub_2380BD5F8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BD5EC();
  type metadata accessor for Proto_AttestationBundle(0);
  sub_238001820(&qword_2568C63F8, type metadata accessor for Proto_AttestationBundle, (uint64_t)&unk_2380C7478);
  v4 = sub_2380BD6DC();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = v4;
  v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t AttestationBundle.atLogProofs.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ATLogProofs(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_TransparencyProofs(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v21[1] + *(int *)(v14 + 40), (uint64_t)v9, &qword_2568C6010);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_2380BD5BC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(&v13[*(int *)(v10 + 20)], 1, 1, v3);
    sub_238005240((uint64_t)v9, &qword_2568C6010);
  }
  else
  {
    sub_238001DE4((uint64_t)v9, (uint64_t)v13, type metadata accessor for Proto_TransparencyProofs);
  }
  sub_2380051FC((uint64_t)&v13[*(int *)(v10 + 20)], (uint64_t)v2, qword_2568C5450);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_2380BD5BC();
    v15 = &v6[*(int *)(v3 + 20)];
    v16 = type metadata accessor for LogEntry(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = &v6[*(int *)(v3 + 24)];
    v18 = type metadata accessor for LogConsistency(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    sub_238005240((uint64_t)v2, qword_2568C5450);
  }
  else
  {
    sub_238001DE4((uint64_t)v2, (uint64_t)v6, type metadata accessor for ATLogProofs);
  }
  sub_237FFD540((uint64_t)v13, type metadata accessor for Proto_TransparencyProofs);
  sub_238001820((unint64_t *)&qword_2568C55B8, type metadata accessor for ATLogProofs, (uint64_t)&unk_2380BF3A8);
  v19 = sub_2380BD70C();
  sub_237FFD540((uint64_t)v6, type metadata accessor for ATLogProofs);
  return v19;
}

uint64_t sub_23803BAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 16) = v17;
  *v17 = v10;
  v17[1] = sub_238013814;
  return Validator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a10);
}

uint64_t _s16CloudAttestation13PublicKeyDataO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if ((v3 & 0x2000000000000000) != 0)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      sub_23801BDC4(*a2, a2[1]);
      sub_23801BDC4(v2, v3);
      v6 = v2;
      v7 = v3 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  else if ((v5 & 0x2000000000000000) == 0)
  {
    sub_23801BDC4(*a2, a2[1]);
    sub_23801BDC4(v2, v3);
    v6 = v2;
    v7 = v3;
LABEL_7:
    sub_238008ED0(v6, v7);
    v8 = v9;
    goto LABEL_8;
  }
  sub_23801BDC4(*a2, a2[1]);
  sub_23801BDC4(v2, v3);
  v8 = 0;
LABEL_8:
  sub_23801BDE0(v2, v3);
  sub_23801BDE0(v4, v5);
  return v8 & 1;
}

uint64_t _s16CloudAttestation9ValidatedO0B6BundleV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  if ((j___s16CloudAttestation0B6BundleV2eeoiySbAC_ACtFZ_0() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  v5 = v4[5];
  v6 = (_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  if (!v7)
  {
    if (v9)
      return 0;
    goto LABEL_11;
  }
  if (!v9)
    return 0;
  v10 = *v6 == *v8 && v7 == v9;
  if (v10 || (v11 = sub_2380BE1B0(), result = 0, (v11 & 1) != 0))
  {
LABEL_11:
    v13 = v4[6];
    v14 = (_QWORD *)(a1 + v13);
    v15 = *(_QWORD *)(a1 + v13 + 8);
    v16 = (_QWORD *)(a2 + v13);
    v17 = v16[1];
    if (v15)
    {
      if (!v17)
        return 0;
      if (*v14 != *v16 || v15 != v17)
      {
        v19 = sub_2380BE1B0();
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    v20 = v4[7];
    v21 = *(_QWORD **)(a1 + v20);
    v22 = *(_QWORD **)(a2 + v20);
    if (v21)
    {
      if (v22 && (sub_238001EC4(v21, v22) & 1) != 0)
        return 1;
    }
    else if (!v22)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for CloudAttestationError(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6648);
}

uint64_t sub_23803BD64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttestationBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Validated.AttestationBundle(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6598);
}

uint64_t type metadata accessor for Unvalidated.AttestationBundle(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6508);
}

uint64_t dispatch thunk of Attestor.defaultKeyLifetime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Attestor.attest(key:expiration:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a7 + 16)
                                                                                              + *(_QWORD *)(a7 + 16));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_238013814;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of Validator.defaultPolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Validator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a11 + 32) + *(_QWORD *)(a11 + 32));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 16) = v18;
  *v18 = v11;
  v18[1] = sub_2380165B0;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t getEnumTagSinglePayload for AttestationBundle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23803BF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for Proto_AttestationBundle);
}

uint64_t storeEnumTagSinglePayload for AttestationBundle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23803BF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for Proto_AttestationBundle);
}

ValueMetadata *type metadata accessor for Unvalidated()
{
  return &type metadata for Unvalidated;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, _QWORD, uint64_t, uint64_t);
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *__dst;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;

  v4 = type metadata accessor for Proto_AttestationBundle(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = *a2;
    v8 = a2[1];
    sub_237FFBA20(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_237FFBA20(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = a2[4];
    v11 = v6[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_2380BD5C8();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    v16 = v6[8];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = type metadata accessor for Proto_SealedHashLedger(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v23 = *(int *)(v19 + 20);
      v24 = (char *)v17 + v23;
      v25 = (char *)v18 + v23;
      swift_bridgeObjectRetain();
      v15(v24, v25, v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v26 = v6[9];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = sub_2380BD598();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v6[10];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for Proto_TransparencyProofs(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v15(v33, v34, v14);
      v38 = *(int *)(v35 + 20);
      v39 = &v33[v38];
      v40 = &v34[v38];
      v41 = type metadata accessor for ATLogProofs(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v90 = v36;
        v15(v39, v40, v14);
        v91 = v40;
        v92 = v41;
        v44 = *(int *)(v41 + 20);
        v45 = &v39[v44];
        v89 = v15;
        v46 = &v40[v44];
        v47 = type metadata accessor for LogEntry(0);
        v48 = *(_QWORD *)(v47 - 8);
        v94 = v39;
        v93 = v42;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
          v50 = v91;
          v51 = v92;
          v36 = v90;
        }
        else
        {
          v88 = v48;
          *(_QWORD *)v45 = *(_QWORD *)v46;
          v45[8] = v46[8];
          v52 = *((_QWORD *)v46 + 3);
          *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
          v53 = *((_QWORD *)v46 + 4);
          swift_bridgeObjectRetain();
          sub_237FFBA20(v52, v53);
          *((_QWORD *)v45 + 3) = v52;
          *((_QWORD *)v45 + 4) = v53;
          v54 = *((_QWORD *)v46 + 6);
          *((_QWORD *)v45 + 5) = *((_QWORD *)v46 + 5);
          *((_QWORD *)v45 + 6) = v54;
          v45[56] = v46[56];
          v89(&v45[*(int *)(v47 + 36)], &v46[*(int *)(v47 + 36)], v14);
          v55 = *(int *)(v47 + 40);
          __dst = &v45[v55];
          v56 = &v46[v55];
          v57 = type metadata accessor for SignedObject(0);
          v58 = *(_QWORD *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
          {
            v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(__dst, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
            v39 = v94;
            v60 = v48;
            v36 = v90;
          }
          else
          {
            v86 = v58;
            v85 = v45;
            v61 = v57;
            v62 = *(_QWORD *)v56;
            v63 = *((_QWORD *)v56 + 1);
            sub_237FFBA20(*(_QWORD *)v56, v63);
            *(_QWORD *)__dst = v62;
            *((_QWORD *)__dst + 1) = v63;
            v64 = __dst;
            v89(&__dst[*(int *)(v61 + 20)], &v56[*(int *)(v61 + 20)], v14);
            v84 = v61;
            v65 = *(int *)(v61 + 24);
            v66 = &__dst[v65];
            v67 = (uint64_t *)&v56[v65];
            v68 = type metadata accessor for Signature(0);
            v83 = *(_QWORD *)(v68 - 8);
            v36 = v90;
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v83 + 48))(v67, 1, v68))
            {
              v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
            }
            else
            {
              v70 = *v67;
              v81 = v67[1];
              sub_237FFBA20(*v67, v81);
              *(_QWORD *)v66 = v70;
              *((_QWORD *)v66 + 1) = v81;
              v71 = v67[2];
              v82 = v67[3];
              sub_237FFBA20(v71, v82);
              *((_QWORD *)v66 + 2) = v71;
              v64 = __dst;
              v72 = v67[4];
              *((_QWORD *)v66 + 3) = v82;
              *((_QWORD *)v66 + 4) = v72;
              v66[40] = *((_BYTE *)v67 + 40);
              v89(&v66[*(int *)(v68 + 28)], (char *)v67 + *(int *)(v68 + 28), v14);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v66, 0, 1, v68);
            }
            v60 = v88;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v64, 0, 1, v84);
            v39 = v94;
            v45 = v85;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v45, 0, 1, v47);
          v50 = v91;
          v51 = v92;
        }
        v73 = *(int *)(v51 + 24);
        v74 = &v39[v73];
        v75 = &v50[v73];
        v76 = type metadata accessor for LogConsistency(0);
        v77 = *(_QWORD *)(v76 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        }
        else
        {
          v89(v74, v75, v14);
          *(_QWORD *)&v74[*(int *)(v76 + 20)] = *(_QWORD *)&v75[*(int *)(v76 + 20)];
          v79 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56);
          swift_retain();
          v79(v74, 0, 1, v76);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v94, 0, 1, v51);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t _s16CloudAttestation17AttestationBundleVwxx_0(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_237FFBAB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v3 = a1 + v2[7];
  v4 = sub_2380BD5C8();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = a1 + v2[8];
  v7 = type metadata accessor for Proto_SealedHashLedger(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 20), v4);
  }
  v8 = a1 + v2[9];
  v9 = sub_2380BD598();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = a1 + v2[10];
  v12 = type metadata accessor for Proto_TransparencyProofs(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v5(v11, v4);
    v14 = v11 + *(int *)(v12 + 20);
    v15 = type metadata accessor for ATLogProofs(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15);
    if (!(_DWORD)result)
    {
      v5(v14, v4);
      v16 = v14 + *(int *)(v15 + 20);
      v17 = type metadata accessor for LogEntry(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
      {
        swift_bridgeObjectRelease();
        sub_237FFBAB0(*(_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 32));
        v5(v16 + *(int *)(v17 + 36), v4);
        v18 = v16 + *(int *)(v17 + 40);
        v19 = type metadata accessor for SignedObject(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
        {
          sub_237FFBAB0(*(_QWORD *)v18, *(_QWORD *)(v18 + 8));
          v5(v18 + *(int *)(v19 + 20), v4);
          v20 = v18 + *(int *)(v19 + 24);
          v21 = type metadata accessor for Signature(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
          {
            sub_237FFBAB0(*(_QWORD *)v20, *(_QWORD *)(v20 + 8));
            sub_237FFBAB0(*(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24));
            v5(v20 + *(int *)(v21 + 28), v4);
          }
        }
      }
      v22 = v14 + *(int *)(v15 + 24);
      v23 = type metadata accessor for LogConsistency(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23);
      if (!(_DWORD)result)
      {
        v5(v22, v4);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, _QWORD, uint64_t, uint64_t);
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *__dst;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;

  v4 = *a2;
  v5 = a2[1];
  sub_237FFBA20(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_237FFBA20(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v9 = v8[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_2380BD5C8();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v14 = v8[8];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = type metadata accessor for Proto_SealedHashLedger(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v15 = *v16;
    v20 = *(int *)(v17 + 20);
    v21 = (char *)v15 + v20;
    v22 = (char *)v16 + v20;
    swift_bridgeObjectRetain();
    v13(v21, v22, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v23 = v8[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = sub_2380BD598();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = v8[10];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for Proto_TransparencyProofs(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v13(v30, v31, v12);
    v35 = *(int *)(v32 + 20);
    v36 = &v30[v35];
    v37 = &v31[v35];
    v38 = type metadata accessor for ATLogProofs(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v87 = v33;
      v13(v36, v37, v12);
      v88 = v37;
      v89 = v38;
      v41 = *(int *)(v38 + 20);
      v42 = &v36[v41];
      v86 = v13;
      v43 = &v37[v41];
      v44 = type metadata accessor for LogEntry(0);
      v45 = *(_QWORD *)(v44 - 8);
      v91 = v36;
      v90 = v39;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        v47 = v88;
        v48 = v89;
        v33 = v87;
      }
      else
      {
        v85 = v45;
        *(_QWORD *)v42 = *(_QWORD *)v43;
        v42[8] = v43[8];
        v49 = *((_QWORD *)v43 + 3);
        *((_QWORD *)v42 + 2) = *((_QWORD *)v43 + 2);
        v50 = *((_QWORD *)v43 + 4);
        swift_bridgeObjectRetain();
        sub_237FFBA20(v49, v50);
        *((_QWORD *)v42 + 3) = v49;
        *((_QWORD *)v42 + 4) = v50;
        v51 = *((_QWORD *)v43 + 6);
        *((_QWORD *)v42 + 5) = *((_QWORD *)v43 + 5);
        *((_QWORD *)v42 + 6) = v51;
        v42[56] = v43[56];
        v86(&v42[*(int *)(v44 + 36)], &v43[*(int *)(v44 + 36)], v12);
        v52 = *(int *)(v44 + 40);
        __dst = &v42[v52];
        v53 = &v43[v52];
        v54 = type metadata accessor for SignedObject(0);
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(__dst, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          v36 = v91;
          v57 = v45;
          v33 = v87;
        }
        else
        {
          v81 = v55;
          v83 = v42;
          v58 = v54;
          v59 = *(_QWORD *)v53;
          v60 = *((_QWORD *)v53 + 1);
          sub_237FFBA20(*(_QWORD *)v53, v60);
          *(_QWORD *)__dst = v59;
          *((_QWORD *)__dst + 1) = v60;
          v61 = __dst;
          v86(&__dst[*(int *)(v58 + 20)], &v53[*(int *)(v58 + 20)], v12);
          v82 = v58;
          v62 = *(int *)(v58 + 24);
          v63 = &__dst[v62];
          v64 = (uint64_t *)&v53[v62];
          v65 = type metadata accessor for Signature(0);
          v80 = *(_QWORD *)(v65 - 8);
          v33 = v87;
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v80 + 48))(v64, 1, v65))
          {
            v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          }
          else
          {
            v67 = *v64;
            v78 = v64[1];
            sub_237FFBA20(*v64, v78);
            *(_QWORD *)v63 = v67;
            *((_QWORD *)v63 + 1) = v78;
            v68 = v64[2];
            v79 = v64[3];
            sub_237FFBA20(v68, v79);
            *((_QWORD *)v63 + 2) = v68;
            v61 = __dst;
            v69 = v64[4];
            *((_QWORD *)v63 + 3) = v79;
            *((_QWORD *)v63 + 4) = v69;
            v63[40] = *((_BYTE *)v64 + 40);
            v86(&v63[*(int *)(v65 + 28)], (char *)v64 + *(int *)(v65 + 28), v12);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v63, 0, 1, v65);
          }
          v57 = v85;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v61, 0, 1, v82);
          v36 = v91;
          v42 = v83;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v42, 0, 1, v44);
        v47 = v88;
        v48 = v89;
      }
      v70 = *(int *)(v48 + 24);
      v71 = &v36[v70];
      v72 = &v47[v70];
      v73 = type metadata accessor for LogConsistency(0);
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        v86(v71, v72, v12);
        *(_QWORD *)&v71[*(int *)(v73 + 20)] = *(_QWORD *)&v72[*(int *)(v73 + 20)];
        v76 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56);
        swift_retain();
        v76(v71, 0, 1, v73);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v91, 0, 1, v48);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  int v46;
  void (*v47)(uint64_t, char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  void *v54;
  char *v55;
  size_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  unsigned int (**v68)(_QWORD *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unsigned int (**v74)(_QWORD *, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (**v86)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unsigned int (**v103)(_QWORD *, uint64_t, uint64_t);
  uint64_t v104;
  void (*v105)(uint64_t, char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  size_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  int *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t, uint64_t, uint64_t);
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t (*v204)(uint64_t, uint64_t, uint64_t);
  int v205;
  int v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t, uint64_t, uint64_t);
  int v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  _QWORD *v245;
  void *v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *__dst;
  void (*__dsta)(uint64_t, char *, uint64_t);
  int *__dstb;
  void *__dstc;
  void *__dstd;
  void (*v258)(char *, char *, uint64_t);
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  _QWORD *v263;
  void *v264;
  void (*v265)(uint64_t, char *, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(char *, char *, uint64_t);
  int *v270;
  _QWORD *v271;
  uint64_t v272;
  void (*v273)(uint64_t, char *, uint64_t);
  uint64_t v274;

  v4 = *a2;
  v5 = a2[1];
  sub_237FFBA20(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_237FFBAB0(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_237FFBA20(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_237FFBAB0(v10, v11);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v13 = v12[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_2380BD5C8();
  v272 = *(_QWORD *)(v16 - 8);
  v269 = *(void (**)(char *, char *, uint64_t))(v272 + 24);
  v269(v14, v15, v16);
  v17 = v12[8];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = type metadata accessor for Proto_SealedHashLedger(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      *v18 = *v19;
      v25 = *(int *)(v20 + 20);
      v26 = (char *)v18 + v25;
      v27 = (char *)v19 + v25;
      v28 = *(void (**)(char *, char *, uint64_t))(v272 + 16);
      swift_bridgeObjectRetain();
      v28(v26, v27, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    sub_237FFD540((uint64_t)v18, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  *v18 = *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v269((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v16);
LABEL_7:
  v30 = v12[9];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = sub_2380BD598();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
LABEL_12:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v31, v32, v33);
LABEL_13:
  v39 = v12[10];
  v40 = (uint64_t)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for Proto_TransparencyProofs(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44((uint64_t)v41, 1, v42);
  if (v45)
  {
    if (!v46)
    {
      v47 = *(void (**)(uint64_t, char *, uint64_t))(v272 + 16);
      v47(v40, v41, v16);
      v48 = *(int *)(v42 + 20);
      v49 = (char *)(v40 + v48);
      v50 = &v41[v48];
      v51 = type metadata accessor for ATLogProofs(0);
      v52 = *(_QWORD *)(v51 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        v47((uint64_t)v49, v50, v16);
        v266 = v16;
        v270 = (int *)v51;
        v70 = *(int *)(v51 + 20);
        v258 = (void (*)(char *, char *, uint64_t))v47;
        v262 = v50;
        v71 = &v49[v70];
        v72 = &v50[v70];
        v73 = type metadata accessor for LogEntry(0);
        v74 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v73 - 8);
        v274 = v52;
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v74)[6](v72, 1, v73))
        {
          v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
          v76 = v262;
        }
        else
        {
          v244 = v74;
          v247 = v49;
          v77 = *(_QWORD *)v72;
          v71[8] = v72[8];
          *(_QWORD *)v71 = v77;
          *((_QWORD *)v71 + 2) = *((_QWORD *)v72 + 2);
          v79 = *((_QWORD *)v72 + 3);
          v78 = *((_QWORD *)v72 + 4);
          swift_bridgeObjectRetain();
          sub_237FFBA20(v79, v78);
          *((_QWORD *)v71 + 3) = v79;
          *((_QWORD *)v71 + 4) = v78;
          *((_QWORD *)v71 + 5) = *((_QWORD *)v72 + 5);
          v80 = *((_QWORD *)v72 + 6);
          v71[56] = v72[56];
          *((_QWORD *)v71 + 6) = v80;
          v258(&v71[*(int *)(v73 + 36)], &v72[*(int *)(v73 + 36)], v266);
          v81 = *(int *)(v73 + 40);
          __dst = &v71[v81];
          v82 = (uint64_t *)&v72[v81];
          v83 = type metadata accessor for SignedObject(0);
          v84 = *(_QWORD *)(v83 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
          {
            v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(__dst, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
            v86 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v74;
            v49 = v247;
            v76 = v262;
          }
          else
          {
            v236 = v84;
            v238 = v73;
            v241 = v71;
            v118 = v83;
            v119 = *v82;
            v120 = v82[1];
            sub_237FFBA20(*v82, v120);
            *(_QWORD *)__dst = v119;
            *((_QWORD *)__dst + 1) = v120;
            v258(&__dst[*(int *)(v118 + 20)], (char *)v82 + *(int *)(v118 + 20), v266);
            v237 = v118;
            v121 = *(int *)(v118 + 24);
            v122 = &__dst[v121];
            v123 = (uint64_t *)((char *)v82 + v121);
            v124 = type metadata accessor for Signature(0);
            v125 = *(_QWORD *)(v124 - 8);
            v76 = v262;
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
            {
              v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
            }
            else
            {
              v235 = v125;
              v141 = *v123;
              v142 = v123[1];
              sub_237FFBA20(*v123, v142);
              *(_QWORD *)v122 = v141;
              *((_QWORD *)v122 + 1) = v142;
              v143 = v123[2];
              v144 = v123[3];
              sub_237FFBA20(v143, v144);
              *((_QWORD *)v122 + 2) = v143;
              *((_QWORD *)v122 + 3) = v144;
              v145 = v123[4];
              v122[40] = *((_BYTE *)v123 + 40);
              *((_QWORD *)v122 + 4) = v145;
              v258(&v122[*(int *)(v124 + 28)], (char *)v123 + *(int *)(v124 + 28), v266);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v235 + 56))(v122, 0, 1, v124);
            }
            v86 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v244;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v236 + 56))(__dst, 0, 1, v237);
            v49 = v247;
            v73 = v238;
            v71 = v241;
          }
          ((void (**)(char *, _QWORD, uint64_t, uint64_t))v86)[7](v71, 0, 1, v73);
        }
        v146 = v270[6];
        v147 = v49;
        v148 = &v49[v146];
        v149 = &v76[v146];
        v150 = type metadata accessor for LogConsistency(0);
        v151 = *(_QWORD *)(v150 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
        {
          v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
          memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
        }
        else
        {
          v258(v148, v149, v266);
          *(_QWORD *)&v148[*(int *)(v150 + 20)] = *(_QWORD *)&v149[*(int *)(v150 + 20)];
          v153 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v151 + 56);
          swift_retain();
          v153(v148, 0, 1, v150);
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v274 + 56))(v147, 0, 1, v270);
        goto LABEL_58;
      }
      v53 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
      v54 = v49;
      v55 = v50;
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (!v46)
  {
    v269((char *)v40, v41, v16);
    v59 = *(int *)(v42 + 20);
    v40 += v59;
    v60 = &v41[v59];
    v42 = type metadata accessor for ATLogProofs(0);
    v43 = *(_QWORD *)(v42 - 8);
    v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    v62 = v61(v40, 1, v42);
    v63 = v61((uint64_t)v60, 1, v42);
    if (v62)
    {
      if (!v63)
      {
        v273 = *(void (**)(uint64_t, char *, uint64_t))(v272 + 16);
        v273(v40, v60, v16);
        v64 = *(int *)(v42 + 20);
        v65 = (_QWORD *)(v40 + v64);
        v66 = &v60[v64];
        v67 = type metadata accessor for LogEntry(0);
        v68 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v67 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v68)[6](v66, 1, v67))
        {
          v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          v260 = v60;
          v264 = v68;
          v107 = *(_QWORD *)v66;
          *((_BYTE *)v65 + 8) = v66[8];
          *v65 = v107;
          v65[2] = *((_QWORD *)v66 + 2);
          v108 = v16;
          v109 = *((_QWORD *)v66 + 3);
          v110 = *((_QWORD *)v66 + 4);
          swift_bridgeObjectRetain();
          sub_237FFBA20(v109, v110);
          v65[3] = v109;
          v65[4] = v110;
          v111 = v108;
          v65[5] = *((_QWORD *)v66 + 5);
          v112 = *((_QWORD *)v66 + 6);
          *((_BYTE *)v65 + 56) = v66[56];
          v65[6] = v112;
          v273((uint64_t)v65 + *(int *)(v67 + 36), &v66[*(int *)(v67 + 36)], v108);
          v113 = *(int *)(v67 + 40);
          v271 = (_QWORD *)((char *)v65 + v113);
          v114 = (uint64_t *)&v66[v113];
          v115 = type metadata accessor for SignedObject(0);
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(v271, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
            v16 = v111;
          }
          else
          {
            v248 = v116;
            __dstb = (int *)v115;
            v131 = v111;
            v132 = *v114;
            v133 = v114[1];
            sub_237FFBA20(*v114, v133);
            *v271 = v132;
            v134 = v131;
            v135 = v271;
            v271[1] = v133;
            v136 = __dstb;
            v273((uint64_t)v271 + __dstb[5], (char *)v114 + __dstb[5], v134);
            v137 = __dstb[6];
            v245 = (_QWORD *)((char *)v271 + v137);
            v138 = (uint64_t *)((char *)v114 + v137);
            v139 = type metadata accessor for Signature(0);
            v239 = *(_QWORD *)(v139 - 8);
            v242 = v139;
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(v239 + 48))(v138, 1))
            {
              v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v245, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
              v16 = v134;
            }
            else
            {
              v268 = v134;
              v181 = *v138;
              v182 = v138[1];
              sub_237FFBA20(*v138, v182);
              *v245 = v181;
              v245[1] = v182;
              v183 = v138[2];
              v184 = v138[3];
              sub_237FFBA20(v183, v184);
              v245[2] = v183;
              v245[3] = v184;
              v136 = __dstb;
              v185 = v138[4];
              *((_BYTE *)v245 + 40) = *((_BYTE *)v138 + 40);
              v245[4] = v185;
              v186 = *(int *)(v242 + 28);
              v187 = (char *)v138 + v186;
              v16 = v268;
              v273((uint64_t)v245 + v186, v187, v268);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v245, 0, 1, v242);
              v135 = v271;
            }
            (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v248 + 56))(v135, 0, 1, v136);
          }
          v60 = v260;
          (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v264 + 7))(v65, 0, 1, v67);
        }
        v188 = *(int *)(v42 + 24);
        v189 = (char *)(v40 + v188);
        v190 = &v60[v188];
        v191 = type metadata accessor for LogConsistency(0);
        v192 = *(_QWORD *)(v191 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48))(v190, 1, v191))
        {
          v273((uint64_t)v189, v190, v16);
          *(_QWORD *)&v189[*(int *)(v191 + 20)] = *(_QWORD *)&v190[*(int *)(v191 + 20)];
          v193 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56);
          swift_retain();
          v193(v189, 0, 1, v191);
          goto LABEL_58;
        }
        v53 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
        v54 = v189;
        v55 = v190;
LABEL_17:
        memcpy(v54, v55, v53);
LABEL_58:
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        return a1;
      }
      goto LABEL_32;
    }
    if (v63)
    {
      sub_237FFD540(v40, type metadata accessor for ATLogProofs);
LABEL_32:
      v56 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
      v57 = (void *)v40;
      v58 = v60;
      goto LABEL_21;
    }
    v267 = v16;
    v269((char *)v40, v60, v16);
    v87 = *(int *)(v42 + 20);
    v88 = v40 + v87;
    v89 = &v60[v87];
    v90 = type metadata accessor for LogEntry(0);
    v91 = *(_QWORD *)(v90 - 8);
    v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
    v93 = v92(v88, 1, v90);
    v94 = v92((uint64_t)v89, 1, v90);
    if (v93)
    {
      if (!v94)
      {
        v259 = v91;
        v95 = *(_QWORD *)v89;
        *(_BYTE *)(v88 + 8) = v89[8];
        *(_QWORD *)v88 = v95;
        *(_QWORD *)(v88 + 16) = *((_QWORD *)v89 + 2);
        v96 = *((_QWORD *)v89 + 3);
        v97 = *((_QWORD *)v89 + 4);
        swift_bridgeObjectRetain();
        sub_237FFBA20(v96, v97);
        *(_QWORD *)(v88 + 24) = v96;
        *(_QWORD *)(v88 + 32) = v97;
        *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
        v98 = *((_QWORD *)v89 + 6);
        *(_BYTE *)(v88 + 56) = v89[56];
        *(_QWORD *)(v88 + 48) = v98;
        v99 = v267;
        __dsta = *(void (**)(uint64_t, char *, uint64_t))(v272 + 16);
        __dsta(v88 + *(int *)(v90 + 36), &v89[*(int *)(v90 + 36)], v267);
        v100 = *(int *)(v90 + 40);
        v263 = (_QWORD *)(v88 + v100);
        v101 = &v89[v100];
        v102 = type metadata accessor for SignedObject(0);
        v103 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v102 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v103)[6](v101, 1, v102))
        {
          v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(v263, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
          v105 = (void (*)(uint64_t, char *, uint64_t))v269;
          v106 = v259;
        }
        else
        {
          v246 = v103;
          v173 = *(_QWORD *)v101;
          v174 = v102;
          v249 = *((_QWORD *)v101 + 1);
          sub_237FFBA20(*(_QWORD *)v101, v249);
          v175 = v263;
          *v263 = v173;
          v99 = v267;
          v263[1] = v249;
          __dsta((uint64_t)v263 + *(int *)(v174 + 20), &v101[*(int *)(v174 + 20)], v267);
          v250 = v174;
          v176 = *(int *)(v174 + 24);
          v177 = (_QWORD *)((char *)v263 + v176);
          v178 = (uint64_t *)&v101[v176];
          v179 = type metadata accessor for Signature(0);
          v240 = *(_QWORD *)(v179 - 8);
          v243 = v179;
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(v240 + 48))(v178, 1))
          {
            v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
          }
          else
          {
            v194 = *v178;
            v195 = v178[1];
            sub_237FFBA20(*v178, v195);
            *v177 = v194;
            v177[1] = v195;
            v196 = v178[2];
            v197 = v178[3];
            sub_237FFBA20(v196, v197);
            v177[2] = v196;
            v177[3] = v197;
            v198 = v178[4];
            *((_BYTE *)v177 + 40) = *((_BYTE *)v178 + 40);
            v177[4] = v198;
            v175 = v263;
            __dsta((uint64_t)v177 + *(int *)(v243 + 28), (char *)v178 + *(int *)(v243 + 28), v267);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v177, 0, 1, v243);
            v99 = v267;
          }
          v106 = v259;
          (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v246 + 7))(v175, 0, 1, v250);
          v105 = (void (*)(uint64_t, char *, uint64_t))v269;
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v106 + 56))(v88, 0, 1, v90);
        goto LABEL_78;
      }
    }
    else
    {
      if (!v94)
      {
        v155 = *(_QWORD *)v89;
        *(_BYTE *)(v88 + 8) = v89[8];
        *(_QWORD *)v88 = v155;
        *(_QWORD *)(v88 + 16) = *((_QWORD *)v89 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v156 = *((_QWORD *)v89 + 3);
        v157 = *((_QWORD *)v89 + 4);
        sub_237FFBA20(v156, v157);
        v158 = *(_QWORD *)(v88 + 24);
        v159 = *(_QWORD *)(v88 + 32);
        *(_QWORD *)(v88 + 24) = v156;
        *(_QWORD *)(v88 + 32) = v157;
        sub_237FFBAB0(v158, v159);
        *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
        v160 = *((_QWORD *)v89 + 6);
        *(_BYTE *)(v88 + 56) = v89[56];
        *(_QWORD *)(v88 + 48) = v160;
        v269((char *)(v88 + *(int *)(v90 + 36)), &v89[*(int *)(v90 + 36)], v267);
        v161 = *(int *)(v90 + 40);
        v88 += v161;
        v89 += v161;
        v162 = type metadata accessor for SignedObject(0);
        v163 = *(_QWORD *)(v162 - 8);
        v164 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 48);
        LODWORD(v156) = v164(v88, 1, v162);
        v165 = v164((uint64_t)v89, 1, v162);
        if ((_DWORD)v156)
        {
          if (!v165)
          {
            v166 = *(_QWORD *)v89;
            v167 = *((_QWORD *)v89 + 1);
            sub_237FFBA20(*(_QWORD *)v89, v167);
            *(_QWORD *)v88 = v166;
            *(_QWORD *)(v88 + 8) = v167;
            v265 = *(void (**)(uint64_t, char *, uint64_t))(v272 + 16);
            v265(v88 + *(int *)(v162 + 20), &v89[*(int *)(v162 + 20)], v267);
            v168 = *(int *)(v162 + 24);
            v169 = (_QWORD *)(v88 + v168);
            v170 = (void **)&v89[v168];
            v171 = type metadata accessor for Signature(0);
            v261 = *(_QWORD *)(v171 - 8);
            if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v261 + 48))(v170, 1, v171))
            {
              v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
            }
            else
            {
              v251 = (unint64_t)v170[1];
              __dstc = *v170;
              sub_237FFBA20((uint64_t)*v170, v251);
              *v169 = __dstc;
              v169[1] = v251;
              v252 = (unint64_t)v170[3];
              __dstd = v170[2];
              sub_237FFBA20((uint64_t)__dstd, v252);
              v169[2] = __dstd;
              v169[3] = v252;
              v224 = v170[4];
              *((_BYTE *)v169 + 40) = *((_BYTE *)v170 + 40);
              v169[4] = v224;
              v265((uint64_t)v169 + *(int *)(v171 + 28), (char *)v170 + *(int *)(v171 + 28), v267);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v261 + 56))(v169, 0, 1, v171);
            }
            v105 = (void (*)(uint64_t, char *, uint64_t))v269;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v163 + 56))(v88, 0, 1, v162);
            v99 = v267;
            goto LABEL_78;
          }
        }
        else
        {
          if (!v165)
          {
            v208 = *(_QWORD *)v89;
            v209 = *((_QWORD *)v89 + 1);
            sub_237FFBA20(*(_QWORD *)v89, v209);
            v210 = *(_QWORD *)v88;
            v211 = *(_QWORD *)(v88 + 8);
            *(_QWORD *)v88 = v208;
            *(_QWORD *)(v88 + 8) = v209;
            sub_237FFBAB0(v210, v211);
            v269((char *)(v88 + *(int *)(v162 + 20)), &v89[*(int *)(v162 + 20)], v267);
            v212 = *(int *)(v162 + 24);
            v213 = v88 + v212;
            v214 = &v89[v212];
            v215 = type metadata accessor for Signature(0);
            v216 = *(_QWORD *)(v215 - 8);
            v217 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
            LODWORD(v208) = v217(v213, 1, v215);
            v218 = v217((uint64_t)v214, 1, v215);
            if ((_DWORD)v208)
            {
              if (!v218)
              {
                v219 = *(_QWORD *)v214;
                v220 = *((_QWORD *)v214 + 1);
                sub_237FFBA20(*(_QWORD *)v214, v220);
                *(_QWORD *)v213 = v219;
                *(_QWORD *)(v213 + 8) = v220;
                v221 = *((_QWORD *)v214 + 2);
                v222 = *((_QWORD *)v214 + 3);
                sub_237FFBA20(v221, v222);
                *(_QWORD *)(v213 + 16) = v221;
                *(_QWORD *)(v213 + 24) = v222;
                v223 = *((_QWORD *)v214 + 4);
                *(_BYTE *)(v213 + 40) = v214[40];
                *(_QWORD *)(v213 + 32) = v223;
                v99 = v267;
                (*(void (**)(uint64_t, char *, uint64_t))(v272 + 16))(v213 + *(int *)(v215 + 28), &v214[*(int *)(v215 + 28)], v267);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v216 + 56))(v213, 0, 1, v215);
                goto LABEL_48;
              }
            }
            else
            {
              if (!v218)
              {
                v225 = *(_QWORD *)v214;
                v226 = *((_QWORD *)v214 + 1);
                sub_237FFBA20(*(_QWORD *)v214, v226);
                v227 = *(_QWORD *)v213;
                v228 = *(_QWORD *)(v213 + 8);
                *(_QWORD *)v213 = v225;
                *(_QWORD *)(v213 + 8) = v226;
                sub_237FFBAB0(v227, v228);
                v229 = *((_QWORD *)v214 + 2);
                v230 = *((_QWORD *)v214 + 3);
                sub_237FFBA20(v229, v230);
                v231 = *(_QWORD *)(v213 + 16);
                v232 = *(_QWORD *)(v213 + 24);
                *(_QWORD *)(v213 + 16) = v229;
                *(_QWORD *)(v213 + 24) = v230;
                sub_237FFBAB0(v231, v232);
                v233 = *((_QWORD *)v214 + 4);
                *(_BYTE *)(v213 + 40) = v214[40];
                *(_QWORD *)(v213 + 32) = v233;
                v234 = *(int *)(v215 + 28);
                v99 = v267;
                v105 = (void (*)(uint64_t, char *, uint64_t))v269;
                v269((char *)(v213 + v234), &v214[v234], v267);
                goto LABEL_78;
              }
              sub_237FFD540(v213, type metadata accessor for Signature);
            }
            v128 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
            v129 = (void *)v213;
            v130 = v214;
LABEL_47:
            memcpy(v129, v130, v128);
            v99 = v267;
LABEL_48:
            v105 = (void (*)(uint64_t, char *, uint64_t))v269;
LABEL_78:
            v199 = *(int *)(v42 + 24);
            v200 = v40 + v199;
            v201 = &v60[v199];
            v202 = type metadata accessor for LogConsistency(0);
            v203 = *(_QWORD *)(v202 - 8);
            v204 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
            v205 = v204(v200, 1, v202);
            v206 = v204((uint64_t)v201, 1, v202);
            if (v205)
            {
              if (!v206)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(v272 + 16))(v200, v201, v99);
                *(_QWORD *)(v200 + *(int *)(v202 + 20)) = *(_QWORD *)&v201[*(int *)(v202 + 20)];
                v207 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v203 + 56);
                swift_retain();
                v207(v200, 0, 1, v202);
                return a1;
              }
            }
            else
            {
              if (!v206)
              {
                v105(v200, v201, v99);
                *(_QWORD *)(v200 + *(int *)(v202 + 20)) = *(_QWORD *)&v201[*(int *)(v202 + 20)];
                swift_retain();
                swift_release();
                return a1;
              }
              sub_237FFD540(v200, type metadata accessor for LogConsistency);
            }
            v56 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
            v57 = (void *)v200;
            v58 = v201;
            goto LABEL_21;
          }
          sub_237FFD540(v88, type metadata accessor for SignedObject);
        }
        v127 = &qword_2568C5438;
LABEL_46:
        v128 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v127) - 8) + 64);
        v129 = (void *)v88;
        v130 = v89;
        goto LABEL_47;
      }
      sub_237FFD540(v88, type metadata accessor for LogEntry);
    }
    v127 = &qword_2568C5440;
    goto LABEL_46;
  }
  sub_237FFD540(v40, type metadata accessor for Proto_TransparencyProofs);
LABEL_20:
  v56 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010) - 8) + 64);
  v57 = (void *)v40;
  v58 = v41;
LABEL_21:
  memcpy(v57, v58, v56);
  return a1;
}

uint64_t _s16CloudAttestation17AttestationBundleVwtk_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *__dst;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v6 = v5[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2380BD5C8();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = v5[8];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for Proto_SealedHashLedger(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((uint64_t)v12 + *(int *)(v14 + 20), (uint64_t)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = v5[9];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_2380BD598();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = v5[10];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for Proto_TransparencyProofs(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v24, (uint64_t)v25, v9);
    v29 = *(int *)(v26 + 20);
    v30 = &v24[v29];
    v31 = &v25[v29];
    v32 = type metadata accessor for ATLogProofs(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v75 = v33;
      v10((uint64_t)v30, (uint64_t)v31, v9);
      v76 = v32;
      v77 = v30;
      v35 = *(int *)(v32 + 20);
      v36 = v31;
      v37 = &v30[v35];
      v74 = v36;
      v38 = &v36[v35];
      v39 = type metadata accessor for LogEntry(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        v43 = v76;
        v42 = v77;
        v44 = v74;
      }
      else
      {
        v70 = v40;
        *(_QWORD *)v37 = *(_QWORD *)v38;
        v37[8] = v38[8];
        *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
        v45 = *((_QWORD *)v38 + 6);
        *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
        *((_QWORD *)v37 + 6) = v45;
        v37[56] = v38[56];
        v10((uint64_t)&v37[*(int *)(v39 + 36)], (uint64_t)&v38[*(int *)(v39 + 36)], v9);
        v71 = v39;
        v46 = *(int *)(v39 + 40);
        __dst = &v37[v46];
        v47 = &v38[v46];
        v48 = type metadata accessor for SignedObject(0);
        v49 = *(_QWORD *)(v48 - 8);
        v72 = v37;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(__dst, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          v52 = v70;
          v51 = v71;
          v44 = v74;
          v43 = v76;
        }
        else
        {
          v68 = v49;
          *(_OWORD *)__dst = *(_OWORD *)v47;
          v10((uint64_t)&__dst[*(int *)(v48 + 20)], (uint64_t)&v47[*(int *)(v48 + 20)], v9);
          v69 = v48;
          v53 = *(int *)(v48 + 24);
          v54 = &__dst[v53];
          v55 = &v47[v53];
          v56 = type metadata accessor for Signature(0);
          v66 = *(_QWORD *)(v56 - 8);
          v67 = v56;
          v44 = v74;
          v43 = v76;
          if ((*(unsigned int (**)(char *, uint64_t))(v66 + 48))(v55, 1))
          {
            v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
          }
          else
          {
            v58 = *((_OWORD *)v55 + 1);
            *(_OWORD *)v54 = *(_OWORD *)v55;
            *((_OWORD *)v54 + 1) = v58;
            *((_QWORD *)v54 + 4) = *((_QWORD *)v55 + 4);
            v54[40] = v55[40];
            v10((uint64_t)&v54[*(int *)(v67 + 28)], (uint64_t)&v55[*(int *)(v67 + 28)], v9);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v54, 0, 1, v67);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(__dst, 0, 1, v69);
          v52 = v70;
          v51 = v71;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v72, 0, 1, v51);
        v42 = v77;
      }
      v59 = *(int *)(v43 + 24);
      v60 = &v42[v59];
      v61 = &v44[v59];
      v62 = type metadata accessor for LogConsistency(0);
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
      {
        v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        v10((uint64_t)v60, (uint64_t)v61, v9);
        *(_QWORD *)&v60[*(int *)(v62 + 20)] = *(_QWORD *)&v61[*(int *)(v62 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v77, 0, 1, v76);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwta_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  int v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  size_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  int v55;
  int v56;
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  _OWORD *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  int v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t (*v170)(uint64_t, uint64_t, uint64_t);
  int v171;
  int v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *__src;
  void *__srca;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _OWORD *v193;
  _OWORD *v194;
  char *__dst;
  void (*__dsta)(uint64_t, char *, uint64_t);
  void *__dstb;
  void (*__dstc)(uint64_t, char *, uint64_t);
  void (*v199)(char *, char *, uint64_t);
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void (*v208)(char *, uint64_t);
  char *v209;
  uint64_t v210;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_237FFBAB0(v6, v7);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v8 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v9 = v8[7];
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = sub_2380BD5C8();
  v13 = *(_QWORD *)(v12 - 8);
  v207 = v12;
  v208 = *(void (**)(char *, uint64_t))(v13 + 40);
  v208(v10, v11);
  v14 = v8[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for Proto_SealedHashLedger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v207);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_237FFD540((uint64_t)v15, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v208)(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v207);
LABEL_7:
  v23 = v8[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)(a2 + v23);
  v26 = sub_2380BD598();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_12:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_13:
  v32 = v8[10];
  v33 = (uint64_t)a1 + v32;
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for Proto_TransparencyProofs(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      v40 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
      v40(v33, v34, v207);
      v41 = *(int *)(v35 + 20);
      v42 = (char *)(v33 + v41);
      v43 = &v34[v41];
      v44 = type metadata accessor for ATLogProofs(0);
      v45 = *(_QWORD *)(v44 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v210 = v45;
        v40((uint64_t)v42, v43, v207);
        v67 = *(int *)(v44 + 20);
        v199 = (void (*)(char *, char *, uint64_t))v40;
        v204 = v42;
        v68 = &v42[v67];
        v69 = &v43[v67];
        v70 = type metadata accessor for LogEntry(0);
        v71 = *(_QWORD *)(v70 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
          v73 = v204;
        }
        else
        {
          v192 = v71;
          *(_QWORD *)v68 = *(_QWORD *)v69;
          v68[8] = v69[8];
          *((_QWORD *)v68 + 2) = *((_QWORD *)v69 + 2);
          *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
          v74 = *((_QWORD *)v69 + 6);
          *((_QWORD *)v68 + 5) = *((_QWORD *)v69 + 5);
          *((_QWORD *)v68 + 6) = v74;
          v68[56] = v69[56];
          v199(&v68[*(int *)(v70 + 36)], &v69[*(int *)(v70 + 36)], v207);
          v75 = *(int *)(v70 + 40);
          __dst = &v68[v75];
          v76 = &v69[v75];
          v77 = type metadata accessor for SignedObject(0);
          v184 = *(_QWORD *)(v77 - 8);
          v189 = v70;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v76, 1, v77))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
            v80 = v70;
            v79 = v192;
            v73 = v204;
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)v76;
            v199(&__dst[*(int *)(v77 + 20)], &v76[*(int *)(v77 + 20)], v207);
            v181 = v77;
            v105 = *(int *)(v77 + 24);
            v106 = &__dst[v105];
            v107 = &v76[v105];
            v108 = type metadata accessor for Signature(0);
            v180 = *(_QWORD *)(v108 - 8);
            __src = (int *)v108;
            v73 = v204;
            if ((*(unsigned int (**)(char *, uint64_t))(v180 + 48))(v107, 1))
            {
              v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
            }
            else
            {
              v118 = *((_OWORD *)v107 + 1);
              *(_OWORD *)v106 = *(_OWORD *)v107;
              *((_OWORD *)v106 + 1) = v118;
              *((_QWORD *)v106 + 4) = *((_QWORD *)v107 + 4);
              v106[40] = v107[40];
              v199(&v106[__src[7]], &v107[__src[7]], v207);
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v180 + 56))(v106, 0, 1, __src);
            }
            v80 = v189;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(__dst, 0, 1, v181);
            v79 = v192;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v68, 0, 1, v80);
        }
        v119 = *(int *)(v44 + 24);
        v120 = &v73[v119];
        v121 = &v43[v119];
        v122 = type metadata accessor for LogConsistency(0);
        v123 = *(_QWORD *)(v122 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
        {
          v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
          memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
        }
        else
        {
          v199(v120, v121, v207);
          *(_QWORD *)&v120[*(int *)(v122 + 20)] = *(_QWORD *)&v121[*(int *)(v122 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(v73, 0, 1, v44);
        goto LABEL_58;
      }
      v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
      v47 = v42;
      v48 = v43;
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (!v39)
  {
    ((void (*)(uint64_t, char *, uint64_t))v208)(v33, v34, v207);
    v52 = *(int *)(v35 + 20);
    v33 += v52;
    v53 = &v34[v52];
    v35 = type metadata accessor for ATLogProofs(0);
    v36 = *(_QWORD *)(v35 - 8);
    v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    v55 = v54(v33, 1, v35);
    v56 = v54((uint64_t)v53, 1, v35);
    if (v55)
    {
      if (!v56)
      {
        v57 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
        v58 = v207;
        v57(v33, v53, v207);
        v59 = *(int *)(v35 + 20);
        v60 = (_QWORD *)(v33 + v59);
        v209 = v53;
        v61 = &v53[v59];
        v62 = type metadata accessor for LogEntry(0);
        v63 = *(_QWORD *)(v62 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
          v65 = (void (*)(char *, char *, uint64_t))v57;
          v66 = v209;
        }
        else
        {
          __dstb = (void *)v33;
          v201 = v63;
          *v60 = *(_QWORD *)v61;
          *((_BYTE *)v60 + 8) = v61[8];
          v60[2] = *((_QWORD *)v61 + 2);
          *(_OWORD *)(v60 + 3) = *(_OWORD *)(v61 + 24);
          v97 = *((_QWORD *)v61 + 6);
          v60[5] = *((_QWORD *)v61 + 5);
          v60[6] = v97;
          *((_BYTE *)v60 + 56) = v61[56];
          v57((uint64_t)v60 + *(int *)(v62 + 36), &v61[*(int *)(v62 + 36)], v207);
          v98 = *(int *)(v62 + 40);
          v99 = (_OWORD *)((char *)v60 + v98);
          v100 = &v61[v98];
          v101 = type metadata accessor for SignedObject(0);
          v102 = *(_QWORD *)(v101 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
          {
            v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
            v58 = v207;
            v66 = v209;
            v33 = (uint64_t)__dstb;
            v104 = v201;
          }
          else
          {
            v190 = v102;
            *v99 = *(_OWORD *)v100;
            v57((uint64_t)v99 + *(int *)(v101 + 20), &v100[*(int *)(v101 + 20)], v207);
            v113 = *(int *)(v101 + 24);
            v193 = v99;
            v114 = (_OWORD *)((char *)v99 + v113);
            v115 = &v100[v113];
            v116 = type metadata accessor for Signature(0);
            v182 = *(_QWORD *)(v116 - 8);
            v185 = v116;
            v66 = v209;
            __srca = (void *)v101;
            if ((*(unsigned int (**)(char *, uint64_t))(v182 + 48))(v115, 1))
            {
              v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
              v58 = v207;
            }
            else
            {
              v147 = *((_OWORD *)v115 + 1);
              *v114 = *(_OWORD *)v115;
              v114[1] = v147;
              *((_QWORD *)v114 + 4) = *((_QWORD *)v115 + 4);
              *((_BYTE *)v114 + 40) = v115[40];
              v148 = *(int *)(v185 + 28);
              v149 = &v115[v148];
              v58 = v207;
              v57((uint64_t)v114 + v148, v149, v207);
              (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v114, 0, 1, v185);
            }
            v33 = (uint64_t)__dstb;
            (*(void (**)(_OWORD *, _QWORD, uint64_t, void *))(v190 + 56))(v193, 0, 1, __srca);
            v104 = v201;
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v60, 0, 1, v62);
          v65 = (void (*)(char *, char *, uint64_t))v57;
        }
        v150 = *(int *)(v35 + 24);
        v151 = (char *)(v33 + v150);
        v152 = &v66[v150];
        v153 = type metadata accessor for LogConsistency(0);
        v154 = *(_QWORD *)(v153 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
        {
          v65(v151, v152, v58);
          *(_QWORD *)&v151[*(int *)(v153 + 20)] = *(_QWORD *)&v152[*(int *)(v153 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
          goto LABEL_58;
        }
        v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
        v47 = v151;
        v48 = v152;
LABEL_17:
        memcpy(v47, v48, v46);
LABEL_58:
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        return a1;
      }
      goto LABEL_32;
    }
    if (v56)
    {
      sub_237FFD540(v33, type metadata accessor for ATLogProofs);
LABEL_32:
      v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
      v50 = (void *)v33;
      v51 = v53;
      goto LABEL_21;
    }
    ((void (*)(uint64_t, char *, uint64_t))v208)(v33, v53, v207);
    v81 = *(int *)(v35 + 20);
    v82 = v33 + v81;
    v83 = &v53[v81];
    v84 = type metadata accessor for LogEntry(0);
    v200 = *(_QWORD *)(v84 - 8);
    v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v200 + 48);
    v86 = v85(v82, 1, v84);
    v205 = v84;
    v87 = v85((uint64_t)v83, 1, v84);
    if (v86)
    {
      if (!v87)
      {
        *(_QWORD *)v82 = *(_QWORD *)v83;
        *(_BYTE *)(v82 + 8) = v83[8];
        *(_QWORD *)(v82 + 16) = *((_QWORD *)v83 + 2);
        *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
        v88 = *((_QWORD *)v83 + 6);
        *(_QWORD *)(v82 + 40) = *((_QWORD *)v83 + 5);
        *(_QWORD *)(v82 + 48) = v88;
        *(_BYTE *)(v82 + 56) = v83[56];
        __dsta = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
        __dsta(v82 + *(int *)(v84 + 36), &v83[*(int *)(v84 + 36)], v207);
        v89 = *(int *)(v84 + 40);
        v90 = (_OWORD *)(v82 + v89);
        v91 = &v83[v89];
        v92 = type metadata accessor for SignedObject(0);
        v93 = *(_QWORD *)(v92 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
        {
          v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
          v95 = (void (*)(uint64_t, char *, uint64_t))v208;
          v96 = v200;
        }
        else
        {
          *v90 = *(_OWORD *)v91;
          __dsta((uint64_t)v90 + *(int *)(v92 + 20), &v91[*(int *)(v92 + 20)], v207);
          v191 = v92;
          v194 = v90;
          v142 = *(int *)(v92 + 24);
          v143 = (_OWORD *)((char *)v90 + v142);
          v144 = &v91[v142];
          v145 = type metadata accessor for Signature(0);
          v183 = *(_QWORD *)(v145 - 8);
          v186 = v145;
          v96 = v200;
          if ((*(unsigned int (**)(char *, uint64_t))(v183 + 48))(v144, 1))
          {
            v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
          }
          else
          {
            v155 = *((_OWORD *)v144 + 1);
            *v143 = *(_OWORD *)v144;
            v143[1] = v155;
            *((_QWORD *)v143 + 4) = *((_QWORD *)v144 + 4);
            *((_BYTE *)v143 + 40) = v144[40];
            __dsta((uint64_t)v143 + *(int *)(v186 + 28), &v144[*(int *)(v186 + 28)], v207);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v143, 0, 1, v186);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v194, 0, 1, v191);
          v95 = (void (*)(uint64_t, char *, uint64_t))v208;
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v82, 0, 1, v205);
        goto LABEL_78;
      }
    }
    else
    {
      if (!v87)
      {
        *(_QWORD *)v82 = *(_QWORD *)v83;
        *(_BYTE *)(v82 + 8) = v83[8];
        *(_QWORD *)(v82 + 16) = *((_QWORD *)v83 + 2);
        swift_bridgeObjectRelease();
        v126 = *(_QWORD *)(v82 + 24);
        v127 = *(_QWORD *)(v82 + 32);
        *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
        sub_237FFBAB0(v126, v127);
        v128 = *((_QWORD *)v83 + 6);
        *(_QWORD *)(v82 + 40) = *((_QWORD *)v83 + 5);
        *(_QWORD *)(v82 + 48) = v128;
        *(_BYTE *)(v82 + 56) = v83[56];
        ((void (*)(uint64_t, char *, uint64_t))v208)(v82 + *(int *)(v84 + 36), &v83[*(int *)(v84 + 36)], v207);
        v129 = *(int *)(v84 + 40);
        v130 = v82 + v129;
        v83 += v129;
        v131 = type metadata accessor for SignedObject(0);
        v206 = *(_QWORD *)(v131 - 8);
        v132 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 48);
        v133 = v130;
        LODWORD(v130) = v132(v130, 1, v131);
        v134 = v132((uint64_t)v83, 1, v131);
        if ((_DWORD)v130)
        {
          if (!v134)
          {
            v135 = v133;
            *(_OWORD *)v133 = *(_OWORD *)v83;
            __dstc = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
            __dstc(v133 + *(int *)(v131 + 20), &v83[*(int *)(v131 + 20)], v207);
            v136 = *(int *)(v131 + 24);
            v137 = (_OWORD *)(v133 + v136);
            v138 = &v83[v136];
            v139 = type metadata accessor for Signature(0);
            v140 = *(_QWORD *)(v139 - 8);
            v202 = v139;
            if ((*(unsigned int (**)(char *, uint64_t))(v140 + 48))(v138, 1))
            {
              v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
            }
            else
            {
              v174 = *((_OWORD *)v138 + 1);
              *v137 = *(_OWORD *)v138;
              v137[1] = v174;
              *((_QWORD *)v137 + 4) = *((_QWORD *)v138 + 4);
              *((_BYTE *)v137 + 40) = v138[40];
              __dstc((uint64_t)v137 + *(int *)(v202 + 28), &v138[*(int *)(v202 + 28)], v207);
              (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v202);
            }
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v206 + 56))(v135, 0, 1, v131);
            goto LABEL_48;
          }
        }
        else
        {
          if (!v134)
          {
            v164 = *(_QWORD *)v133;
            v165 = *(_QWORD *)(v133 + 8);
            *(_OWORD *)v133 = *(_OWORD *)v83;
            sub_237FFBAB0(v164, v165);
            ((void (*)(uint64_t, char *, uint64_t))v208)(v133 + *(int *)(v131 + 20), &v83[*(int *)(v131 + 20)], v207);
            v166 = *(int *)(v131 + 24);
            v167 = v133 + v166;
            v168 = &v83[v166];
            v169 = type metadata accessor for Signature(0);
            v203 = *(_QWORD *)(v169 - 8);
            v170 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
            v171 = v170(v167, 1, v169);
            v172 = v170((uint64_t)v168, 1, v169);
            if (v171)
            {
              if (!v172)
              {
                v173 = *((_OWORD *)v168 + 1);
                *(_OWORD *)v167 = *(_OWORD *)v168;
                *(_OWORD *)(v167 + 16) = v173;
                *(_QWORD *)(v167 + 32) = *((_QWORD *)v168 + 4);
                *(_BYTE *)(v167 + 40) = v168[40];
                (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v167 + *(int *)(v169 + 28), &v168[*(int *)(v169 + 28)], v207);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v203 + 56))(v167, 0, 1, v169);
                goto LABEL_48;
              }
            }
            else
            {
              if (!v172)
              {
                v175 = *(_QWORD *)v167;
                v176 = *(_QWORD *)(v167 + 8);
                *(_OWORD *)v167 = *(_OWORD *)v168;
                sub_237FFBAB0(v175, v176);
                v177 = *(_QWORD *)(v167 + 16);
                v178 = *(_QWORD *)(v167 + 24);
                *(_OWORD *)(v167 + 16) = *((_OWORD *)v168 + 1);
                sub_237FFBAB0(v177, v178);
                *(_QWORD *)(v167 + 32) = *((_QWORD *)v168 + 4);
                *(_BYTE *)(v167 + 40) = v168[40];
                v179 = *(int *)(v169 + 28);
                v95 = (void (*)(uint64_t, char *, uint64_t))v208;
                ((void (*)(uint64_t, char *, uint64_t))v208)(v167 + v179, &v168[v179], v207);
                goto LABEL_78;
              }
              sub_237FFD540(v167, type metadata accessor for Signature);
            }
            v110 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
            v111 = (void *)v167;
            v112 = v168;
LABEL_47:
            memcpy(v111, v112, v110);
LABEL_48:
            v95 = (void (*)(uint64_t, char *, uint64_t))v208;
LABEL_78:
            v156 = *(int *)(v35 + 24);
            v157 = v33 + v156;
            v158 = &v53[v156];
            v159 = type metadata accessor for LogConsistency(0);
            v160 = *(_QWORD *)(v159 - 8);
            v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
            v162 = v161(v157, 1, v159);
            v163 = v161((uint64_t)v158, 1, v159);
            if (v162)
            {
              if (!v163)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v157, v158, v207);
                *(_QWORD *)(v157 + *(int *)(v159 + 20)) = *(_QWORD *)&v158[*(int *)(v159 + 20)];
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
                return a1;
              }
            }
            else
            {
              if (!v163)
              {
                v95(v157, v158, v207);
                *(_QWORD *)(v157 + *(int *)(v159 + 20)) = *(_QWORD *)&v158[*(int *)(v159 + 20)];
                swift_release();
                return a1;
              }
              sub_237FFD540(v157, type metadata accessor for LogConsistency);
            }
            v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
            v50 = (void *)v157;
            v51 = v158;
            goto LABEL_21;
          }
          sub_237FFD540(v133, type metadata accessor for SignedObject);
        }
        v110 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
        v111 = (void *)v133;
LABEL_46:
        v112 = v83;
        goto LABEL_47;
      }
      sub_237FFD540(v82, type metadata accessor for LogEntry);
    }
    v110 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440) - 8) + 64);
    v111 = (void *)v82;
    goto LABEL_46;
  }
  sub_237FFD540(v33, type metadata accessor for Proto_TransparencyProofs);
LABEL_20:
  v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010) - 8) + 64);
  v50 = (void *)v33;
  v51 = v34;
LABEL_21:
  memcpy(v50, v51, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for Unvalidated.AttestationBundle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23803F614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for AttestationBundle);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for Unvalidated.AttestationBundle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23803F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for AttestationBundle);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t sub_23803F6B4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Proto_AttestationBundle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Validated()
{
  return &type metadata for Validated;
}

uint64_t *initializeBufferWithCopyOfBuffer for Validated.AttestationBundle(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *__dst;
  uint64_t v111;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    sub_237FFBA20(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    v8 = a2[2];
    v9 = a2[3];
    sub_237FFBA20(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    a1[4] = a2[4];
    v10 = (int *)type metadata accessor for Proto_AttestationBundle(0);
    v11 = v10[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_2380BD5C8();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    v16 = v10[8];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = type metadata accessor for Proto_SealedHashLedger(0);
    v20 = *(_QWORD *)(v19 - 8);
    v111 = v14;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = v15;
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v24 = *(int *)(v19 + 20);
      v25 = (char *)v17 + v24;
      v26 = (char *)v18 + v24;
      swift_bridgeObjectRetain();
      v27 = v14;
      v21 = v15;
      v15(v25, v26, v27);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v28 = v10[9];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_2380BD598();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v34 = v21;
    v35 = v10[10];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    v38 = type metadata accessor for Proto_TransparencyProofs(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      v41 = a3;
    }
    else
    {
      v21(v36, v37, v111);
      v42 = *(int *)(v38 + 20);
      __dst = &v36[v42];
      v43 = &v37[v42];
      v44 = type metadata accessor for ATLogProofs(0);
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
        memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        v41 = a3;
      }
      else
      {
        v107 = v45;
        v21(__dst, v43, v111);
        v108 = v44;
        v47 = *(int *)(v44 + 20);
        v48 = v43;
        v49 = &__dst[v47];
        v106 = v48;
        v50 = &v48[v47];
        v51 = type metadata accessor for LogEntry(0);
        v52 = *(_QWORD *)(v51 - 8);
        v105 = v34;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
          v54 = v108;
          v55 = v106;
          v56 = v111;
        }
        else
        {
          v103 = v52;
          *(_QWORD *)v49 = *(_QWORD *)v50;
          v49[8] = v50[8];
          v57 = *((_QWORD *)v50 + 3);
          *((_QWORD *)v49 + 2) = *((_QWORD *)v50 + 2);
          v58 = *((_QWORD *)v50 + 4);
          swift_bridgeObjectRetain();
          sub_237FFBA20(v57, v58);
          *((_QWORD *)v49 + 3) = v57;
          *((_QWORD *)v49 + 4) = v58;
          v59 = *((_QWORD *)v50 + 6);
          *((_QWORD *)v49 + 5) = *((_QWORD *)v50 + 5);
          *((_QWORD *)v49 + 6) = v59;
          v49[56] = v50[56];
          v105(&v49[*(int *)(v51 + 36)], &v50[*(int *)(v51 + 36)], v111);
          v60 = *(int *)(v51 + 40);
          v104 = &v49[v60];
          v61 = &v50[v60];
          v62 = type metadata accessor for SignedObject(0);
          v63 = *(_QWORD *)(v62 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
          {
            v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(v104, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
            v54 = v108;
            v65 = v103;
            v56 = v111;
          }
          else
          {
            v101 = v49;
            v102 = v63;
            v100 = v51;
            v66 = *(_QWORD *)v61;
            v67 = *((_QWORD *)v61 + 1);
            sub_237FFBA20(*(_QWORD *)v61, v67);
            *(_QWORD *)v104 = v66;
            *((_QWORD *)v104 + 1) = v67;
            v105(&v104[*(int *)(v62 + 20)], &v61[*(int *)(v62 + 20)], v111);
            v99 = v62;
            v68 = *(int *)(v62 + 24);
            v69 = &v104[v68];
            v70 = (uint64_t *)&v61[v68];
            v71 = type metadata accessor for Signature(0);
            v72 = *(_QWORD *)(v71 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
            {
              v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
              v65 = v103;
              v56 = v111;
            }
            else
            {
              v98 = v72;
              v74 = *v70;
              v75 = v70[1];
              sub_237FFBA20(*v70, v75);
              *(_QWORD *)v69 = v74;
              *((_QWORD *)v69 + 1) = v75;
              v76 = v70[2];
              v77 = v70[3];
              sub_237FFBA20(v76, v77);
              *((_QWORD *)v69 + 2) = v76;
              *((_QWORD *)v69 + 3) = v77;
              *((_QWORD *)v69 + 4) = v70[4];
              v69[40] = *((_BYTE *)v70 + 40);
              v78 = *(int *)(v71 + 28);
              v79 = (char *)v70 + v78;
              v80 = v71;
              v56 = v111;
              v105(&v69[v78], v79, v111);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v69, 0, 1, v80);
              v65 = v103;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v104, 0, 1, v99);
            v54 = v108;
            v51 = v100;
            v49 = v101;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v49, 0, 1, v51);
          v55 = v106;
        }
        v81 = *(int *)(v54 + 24);
        v82 = &__dst[v81];
        v83 = &v55[v81];
        v84 = type metadata accessor for LogConsistency(0);
        v85 = *(_QWORD *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          v105(v82, v83, v56);
          *(_QWORD *)&v82[*(int *)(v84 + 20)] = *(_QWORD *)&v83[*(int *)(v84 + 20)];
          v87 = v82;
          v88 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56);
          swift_retain();
          v88(v87, 0, 1, v84);
        }
        v41 = a3;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(__dst, 0, 1, v108);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v89 = v41[5];
    v90 = v41[6];
    v91 = (uint64_t *)((char *)a1 + v89);
    v92 = (uint64_t *)((char *)a2 + v89);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    v94 = (uint64_t *)((char *)a1 + v90);
    v95 = (uint64_t *)((char *)a2 + v90);
    v96 = v95[1];
    *v94 = *v95;
    v94[1] = v96;
    *(uint64_t *)((char *)a1 + v41[7]) = *(uint64_t *)((char *)a2 + v41[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Validated.AttestationBundle(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_237FFBAB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v3 = a1 + v2[7];
  v4 = sub_2380BD5C8();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = a1 + v2[8];
  v7 = type metadata accessor for Proto_SealedHashLedger(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 20), v4);
  }
  v8 = a1 + v2[9];
  v9 = sub_2380BD598();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = a1 + v2[10];
  v12 = type metadata accessor for Proto_TransparencyProofs(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v5(v11, v4);
    v13 = v11 + *(int *)(v12 + 20);
    v14 = type metadata accessor for ATLogProofs(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
    {
      v5(v13, v4);
      v15 = v13 + *(int *)(v14 + 20);
      v16 = type metadata accessor for LogEntry(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        sub_237FFBAB0(*(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32));
        v5(v15 + *(int *)(v16 + 36), v4);
        v17 = v15 + *(int *)(v16 + 40);
        v18 = type metadata accessor for SignedObject(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
        {
          sub_237FFBAB0(*(_QWORD *)v17, *(_QWORD *)(v17 + 8));
          v5(v17 + *(int *)(v18 + 20), v4);
          v19 = v17 + *(int *)(v18 + 24);
          v20 = type metadata accessor for Signature(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
          {
            sub_237FFBAB0(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
            sub_237FFBAB0(*(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24));
            v5(v19 + *(int *)(v20 + 28), v4);
          }
        }
      }
      v21 = v13 + *(int *)(v14 + 24);
      v22 = type metadata accessor for LogConsistency(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
      {
        v5(v21, v4);
        swift_release();
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for Validated.AttestationBundle(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *__dst;
  uint64_t v109;

  v5 = *a2;
  v6 = a2[1];
  sub_237FFBA20(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  sub_237FFBA20(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a2[4];
  v9 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v10 = v9[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2380BD5C8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  v15 = v9[8];
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = type metadata accessor for Proto_SealedHashLedger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v109 = v13;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = v14;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v22 = *(int *)(v18 + 20);
    v23 = (char *)v16 + v22;
    v24 = (char *)v17 + v22;
    swift_bridgeObjectRetain();
    v25 = v13;
    v20 = v14;
    v14(v23, v24, v25);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v26 = v9[9];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_2380BD598();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = v20;
  v33 = v9[10];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for Proto_TransparencyProofs(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    v39 = a3;
  }
  else
  {
    v20(v34, v35, v109);
    v40 = *(int *)(v36 + 20);
    __dst = &v34[v40];
    v41 = &v35[v40];
    v42 = type metadata accessor for ATLogProofs(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
      memcpy(__dst, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      v39 = a3;
    }
    else
    {
      v105 = v43;
      v32(__dst, v41, v109);
      v106 = v42;
      v45 = *(int *)(v42 + 20);
      v46 = v41;
      v47 = &__dst[v45];
      v104 = v46;
      v48 = &v46[v45];
      v49 = type metadata accessor for LogEntry(0);
      v50 = *(_QWORD *)(v49 - 8);
      v103 = v32;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        v52 = v106;
        v53 = v104;
        v54 = v109;
      }
      else
      {
        v101 = v50;
        *(_QWORD *)v47 = *(_QWORD *)v48;
        v47[8] = v48[8];
        v55 = *((_QWORD *)v48 + 3);
        *((_QWORD *)v47 + 2) = *((_QWORD *)v48 + 2);
        v56 = *((_QWORD *)v48 + 4);
        swift_bridgeObjectRetain();
        sub_237FFBA20(v55, v56);
        *((_QWORD *)v47 + 3) = v55;
        *((_QWORD *)v47 + 4) = v56;
        v57 = *((_QWORD *)v48 + 6);
        *((_QWORD *)v47 + 5) = *((_QWORD *)v48 + 5);
        *((_QWORD *)v47 + 6) = v57;
        v47[56] = v48[56];
        v103(&v47[*(int *)(v49 + 36)], &v48[*(int *)(v49 + 36)], v109);
        v58 = *(int *)(v49 + 40);
        v102 = &v47[v58];
        v59 = &v48[v58];
        v60 = type metadata accessor for SignedObject(0);
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(v102, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
          v52 = v106;
          v63 = v101;
          v54 = v109;
        }
        else
        {
          v97 = v61;
          v99 = v49;
          v100 = v47;
          v64 = *(_QWORD *)v59;
          v65 = *((_QWORD *)v59 + 1);
          sub_237FFBA20(*(_QWORD *)v59, v65);
          *(_QWORD *)v102 = v64;
          *((_QWORD *)v102 + 1) = v65;
          v103(&v102[*(int *)(v60 + 20)], &v59[*(int *)(v60 + 20)], v109);
          v98 = v60;
          v66 = *(int *)(v60 + 24);
          v67 = &v102[v66];
          v68 = (uint64_t *)&v59[v66];
          v69 = type metadata accessor for Signature(0);
          v70 = *(_QWORD *)(v69 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
          {
            v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
            v63 = v101;
            v54 = v109;
          }
          else
          {
            v96 = v70;
            v72 = *v68;
            v73 = v68[1];
            sub_237FFBA20(*v68, v73);
            *(_QWORD *)v67 = v72;
            *((_QWORD *)v67 + 1) = v73;
            v74 = v68[2];
            v75 = v68[3];
            sub_237FFBA20(v74, v75);
            *((_QWORD *)v67 + 2) = v74;
            *((_QWORD *)v67 + 3) = v75;
            *((_QWORD *)v67 + 4) = v68[4];
            v67[40] = *((_BYTE *)v68 + 40);
            v76 = *(int *)(v69 + 28);
            v77 = (char *)v68 + v76;
            v78 = v69;
            v54 = v109;
            v103(&v67[v76], v77, v109);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v67, 0, 1, v78);
            v63 = v101;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v102, 0, 1, v98);
          v52 = v106;
          v49 = v99;
          v47 = v100;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v47, 0, 1, v49);
        v53 = v104;
      }
      v79 = *(int *)(v52 + 24);
      v80 = &__dst[v79];
      v81 = &v53[v79];
      v82 = type metadata accessor for LogConsistency(0);
      v83 = *(_QWORD *)(v82 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
      {
        v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
        memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        v103(v80, v81, v54);
        *(_QWORD *)&v80[*(int *)(v82 + 20)] = *(_QWORD *)&v81[*(int *)(v82 + 20)];
        v85 = v80;
        v86 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56);
        swift_retain();
        v86(v85, 0, 1, v82);
      }
      v39 = a3;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(__dst, 0, 1, v106);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v87 = v39[5];
  v88 = v39[6];
  v89 = (uint64_t *)((char *)a1 + v87);
  v90 = (uint64_t *)((char *)a2 + v87);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  v92 = (uint64_t *)((char *)a1 + v88);
  v93 = (uint64_t *)((char *)a2 + v88);
  v94 = v93[1];
  *v92 = *v93;
  v92[1] = v94;
  *(uint64_t *)((char *)a1 + v39[7]) = *(uint64_t *)((char *)a2 + v39[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for Validated.AttestationBundle(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  int v47;
  int v48;
  void (*v49)(uint64_t, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t *v57;
  size_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  void *v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (*v209)(uint64_t, uint64_t, uint64_t);
  int v210;
  int v211;
  void (*v212)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t (*v221)(uint64_t, uint64_t, uint64_t);
  int v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  void *v242;
  void *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void (*v261)(uint64_t, char *, uint64_t);
  _QWORD *v262;
  uint64_t v263;
  char *__dst;
  _QWORD *__dsta;
  void *__dstb;
  void (*__dstc)(char *, char *, uint64_t);
  _QWORD *__dstd;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  void (*v278)(uint64_t, char *, uint64_t);
  uint64_t v279;
  uint64_t v280;

  v5 = *a2;
  v6 = a2[1];
  sub_237FFBA20(*a2, v6);
  v7 = *a1;
  v8 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  sub_237FFBAB0(v7, v8);
  v9 = a2[2];
  v10 = a2[3];
  sub_237FFBA20(v9, v10);
  v11 = a1[2];
  v12 = a1[3];
  a1[2] = v9;
  a1[3] = v10;
  sub_237FFBAB0(v11, v12);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v14 = v13[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_2380BD5C8();
  v277 = *(_QWORD *)(v17 - 8);
  v280 = v17;
  v18 = *(void (**)(char *, char *))(v277 + 24);
  v18(v15, v16);
  v19 = v13[8];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = type metadata accessor for Proto_SealedHashLedger(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v27 = *(int *)(v22 + 20);
      v28 = (char *)v20 + v27;
      v29 = (char *)v21 + v27;
      v30 = *(void (**)(char *, char *, uint64_t))(v277 + 16);
      swift_bridgeObjectRetain();
      v30(v28, v29, v280);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    sub_237FFD540((uint64_t)v20, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  *v20 = *v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v18)((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v280);
LABEL_7:
  v32 = v13[9];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = sub_2380BD598();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  v41 = v13[10];
  v42 = (uint64_t)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = type metadata accessor for Proto_TransparencyProofs(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46((uint64_t)v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      v274 = v45;
      v49 = *(void (**)(uint64_t, char *, uint64_t))(v277 + 16);
      v49(v42, v43, v280);
      v50 = *(int *)(v44 + 20);
      v51 = (char *)(v42 + v50);
      v52 = &v43[v50];
      v53 = type metadata accessor for ATLogProofs(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        v56 = a3;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v274 + 56))(v42, 0, 1, v44);
      }
      else
      {
        v49((uint64_t)v51, v52, v280);
        v279 = v53;
        v74 = *(int *)(v53 + 20);
        __dst = &v51[v74];
        v75 = &v52[v74];
        v76 = type metadata accessor for LogEntry(0);
        v77 = *(_QWORD *)(v76 - 8);
        v250 = v76;
        v255 = (void (*)(char *, char *, uint64_t))v49;
        v260 = v54;
        v269 = v51;
        if ((*(unsigned int (**)(char *, uint64_t))(v77 + 48))(v75, 1))
        {
          v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(__dst, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          v79 = v279;
        }
        else
        {
          v244 = v52;
          v247 = v77;
          v80 = *(_QWORD *)v75;
          __dst[8] = v75[8];
          *(_QWORD *)__dst = v80;
          *((_QWORD *)__dst + 2) = *((_QWORD *)v75 + 2);
          v81 = *((_QWORD *)v75 + 3);
          v82 = *((_QWORD *)v75 + 4);
          swift_bridgeObjectRetain();
          sub_237FFBA20(v81, v82);
          *((_QWORD *)__dst + 3) = v81;
          *((_QWORD *)__dst + 4) = v82;
          *((_QWORD *)__dst + 5) = *((_QWORD *)v75 + 5);
          v83 = *((_QWORD *)v75 + 6);
          __dst[56] = v75[56];
          *((_QWORD *)__dst + 6) = v83;
          v84 = v250;
          v49((uint64_t)&__dst[*(int *)(v250 + 36)], &v75[*(int *)(v250 + 36)], v280);
          v85 = *(int *)(v250 + 40);
          v241 = &__dst[v85];
          v86 = &v75[v85];
          v87 = type metadata accessor for SignedObject(0);
          v88 = *(_QWORD *)(v87 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
          {
            v89 = __dst;
            v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(v241, v86, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
            v51 = v269;
            v79 = v279;
          }
          else
          {
            v239 = v88;
            v120 = *(_QWORD *)v86;
            v121 = *((_QWORD *)v86 + 1);
            sub_237FFBA20(*(_QWORD *)v86, v121);
            *(_QWORD *)v241 = v120;
            *((_QWORD *)v241 + 1) = v121;
            v122 = v241;
            v49((uint64_t)&v241[*(int *)(v87 + 20)], &v86[*(int *)(v87 + 20)], v280);
            v240 = v87;
            v123 = *(int *)(v87 + 24);
            v124 = &v241[v123];
            v125 = (uint64_t *)&v86[v123];
            v126 = type metadata accessor for Signature(0);
            v127 = *(_QWORD *)(v126 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
            {
              v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
            }
            else
            {
              v238 = v127;
              v140 = *v125;
              v141 = v125[1];
              sub_237FFBA20(*v125, v141);
              *(_QWORD *)v124 = v140;
              *((_QWORD *)v124 + 1) = v141;
              v142 = v125[2];
              v143 = v125[3];
              sub_237FFBA20(v142, v143);
              *((_QWORD *)v124 + 2) = v142;
              *((_QWORD *)v124 + 3) = v143;
              v122 = v241;
              v144 = v125[4];
              v124[40] = *((_BYTE *)v125 + 40);
              *((_QWORD *)v124 + 4) = v144;
              v49((uint64_t)&v124[*(int *)(v126 + 28)], (char *)v125 + *(int *)(v126 + 28), v280);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v124, 0, 1, v126);
            }
            v52 = v244;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v122, 0, 1, v240);
            v89 = __dst;
            v51 = v269;
            v79 = v279;
            v84 = v250;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v89, 0, 1, v84);
        }
        v145 = *(int *)(v79 + 24);
        v146 = &v51[v145];
        v147 = &v52[v145];
        v148 = type metadata accessor for LogConsistency(0);
        v149 = *(_QWORD *)(v148 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
        {
          v150 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
          memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
        }
        else
        {
          v255(v146, v147, v280);
          *(_QWORD *)&v146[*(int *)(v148 + 20)] = *(_QWORD *)&v147[*(int *)(v148 + 20)];
          v151 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56);
          swift_retain();
          v151(v146, 0, 1, v148);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v260 + 56))(v269, 0, 1, v279);
        v56 = a3;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v274 + 56))(v42, 0, 1, v44);
      }
      goto LABEL_70;
    }
    goto LABEL_19;
  }
  if (v48)
  {
    sub_237FFD540(v42, type metadata accessor for Proto_TransparencyProofs);
LABEL_19:
    v57 = &qword_2568C6010;
LABEL_20:
    v58 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v57) - 8) + 64);
    v59 = (void *)v42;
    v60 = v43;
    goto LABEL_21;
  }
  ((void (*)(uint64_t, char *, uint64_t))v18)(v42, v43, v280);
  v61 = *(int *)(v44 + 20);
  v42 += v61;
  v43 += v61;
  v62 = type metadata accessor for ATLogProofs(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v42, 1, v62);
  v66 = v64((uint64_t)v43, 1, v62);
  if (!v65)
  {
    if (v66)
    {
      sub_237FFD540(v42, type metadata accessor for ATLogProofs);
      goto LABEL_33;
    }
    ((void (*)(uint64_t, char *, uint64_t))v18)(v42, v43, v280);
    v91 = *(int *)(v62 + 20);
    v92 = v43;
    v93 = v42 + v91;
    v276 = v92;
    v94 = &v92[v91];
    v95 = type metadata accessor for LogEntry(0);
    __dsta = *(_QWORD **)(v95 - 8);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dsta[6];
    v97 = v96(v93, 1, v95);
    v270 = v95;
    v98 = v96((uint64_t)v94, 1, v95);
    if (v97)
    {
      if (!v98)
      {
        v99 = *(_QWORD *)v94;
        *(_BYTE *)(v93 + 8) = v94[8];
        *(_QWORD *)v93 = v99;
        *(_QWORD *)(v93 + 16) = *((_QWORD *)v94 + 2);
        v100 = *((_QWORD *)v94 + 3);
        v101 = *((_QWORD *)v94 + 4);
        swift_bridgeObjectRetain();
        sub_237FFBA20(v100, v101);
        *(_QWORD *)(v93 + 24) = v100;
        *(_QWORD *)(v93 + 32) = v101;
        *(_QWORD *)(v93 + 40) = *((_QWORD *)v94 + 5);
        v102 = *((_QWORD *)v94 + 6);
        *(_BYTE *)(v93 + 56) = v94[56];
        *(_QWORD *)(v93 + 48) = v102;
        v261 = *(void (**)(uint64_t, char *, uint64_t))(v277 + 16);
        v261(v93 + *(int *)(v270 + 36), &v94[*(int *)(v270 + 36)], v280);
        v103 = *(int *)(v270 + 40);
        v104 = (_QWORD *)(v93 + v103);
        v105 = &v94[v103];
        v106 = type metadata accessor for SignedObject(0);
        v107 = *(_QWORD *)(v106 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
        {
          v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        else
        {
          v252 = v107;
          v257 = v106;
          v173 = *(_QWORD *)v105;
          v174 = *((_QWORD *)v105 + 1);
          sub_237FFBA20(*(_QWORD *)v105, v174);
          *v104 = v173;
          v104[1] = v174;
          v175 = v257;
          v261((uint64_t)v104 + *(int *)(v257 + 20), &v105[*(int *)(v257 + 20)], v280);
          v176 = *(int *)(v257 + 24);
          v177 = (_QWORD *)((char *)v104 + v176);
          v178 = (uint64_t *)&v105[v176];
          v179 = type metadata accessor for Signature(0);
          v245 = *(_QWORD *)(v179 - 8);
          v249 = v179;
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(v245 + 48))(v178, 1))
          {
            v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
          }
          else
          {
            v200 = *v178;
            v242 = (void *)v178[1];
            sub_237FFBA20(*v178, (unint64_t)v242);
            *v177 = v200;
            v177[1] = v242;
            v201 = v178[2];
            v243 = (void *)v178[3];
            sub_237FFBA20(v201, (unint64_t)v243);
            v177[2] = v201;
            v177[3] = v243;
            v202 = v178[4];
            *((_BYTE *)v177 + 40) = *((_BYTE *)v178 + 40);
            v177[4] = v202;
            v175 = v257;
            v261((uint64_t)v177 + *(int *)(v249 + 28), (char *)v178 + *(int *)(v249 + 28), v280);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v245 + 56))(v177, 0, 1, v249);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v252 + 56))(v104, 0, 1, v175);
        }
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dsta[7])(v93, 0, 1, v270);
        goto LABEL_77;
      }
    }
    else
    {
      if (!v98)
      {
        v152 = *(_QWORD *)v94;
        *(_BYTE *)(v93 + 8) = v94[8];
        *(_QWORD *)v93 = v152;
        *(_QWORD *)(v93 + 16) = *((_QWORD *)v94 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v153 = *((_QWORD *)v94 + 3);
        v154 = *((_QWORD *)v94 + 4);
        sub_237FFBA20(v153, v154);
        v155 = *(_QWORD *)(v93 + 24);
        v156 = *(_QWORD *)(v93 + 32);
        *(_QWORD *)(v93 + 24) = v153;
        *(_QWORD *)(v93 + 32) = v154;
        sub_237FFBAB0(v155, v156);
        *(_QWORD *)(v93 + 40) = *((_QWORD *)v94 + 5);
        v157 = *((_QWORD *)v94 + 6);
        *(_BYTE *)(v93 + 56) = v94[56];
        *(_QWORD *)(v93 + 48) = v157;
        ((void (*)(uint64_t, char *, uint64_t))v18)(v93 + *(int *)(v270 + 36), &v94[*(int *)(v270 + 36)], v280);
        v158 = *(int *)(v270 + 40);
        v159 = (uint64_t *)(v93 + v158);
        v160 = (uint64_t *)&v94[v158];
        v161 = type metadata accessor for SignedObject(0);
        v272 = *(_QWORD *)(v161 - 8);
        v162 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v272 + 48);
        v163 = v159;
        LODWORD(v159) = v162(v159, 1, v161);
        v164 = v162(v160, 1, v161);
        if ((_DWORD)v159)
        {
          if (!v164)
          {
            v165 = *v160;
            v166 = v160[1];
            sub_237FFBA20(*v160, v166);
            *v163 = v165;
            v163[1] = v166;
            v167 = v163;
            __dstc = *(void (**)(char *, char *, uint64_t))(v277 + 16);
            __dstc((char *)v163 + *(int *)(v161 + 20), (char *)v160 + *(int *)(v161 + 20), v280);
            v168 = *(int *)(v161 + 24);
            v169 = (uint64_t *)((char *)v163 + v168);
            v170 = (uint64_t *)((char *)v160 + v168);
            v171 = type metadata accessor for Signature(0);
            v263 = *(_QWORD *)(v171 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v263 + 48))(v170, 1, v171))
            {
              v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
            }
            else
            {
              v253 = v170[1];
              v258 = *v170;
              sub_237FFBA20(*v170, v253);
              *v169 = v258;
              v169[1] = v253;
              v254 = v170[3];
              v259 = v170[2];
              sub_237FFBA20(v259, v254);
              v169[2] = v259;
              v169[3] = v254;
              v228 = v170[4];
              *((_BYTE *)v169 + 40) = *((_BYTE *)v170 + 40);
              v169[4] = v228;
              __dstc((char *)v169 + *(int *)(v171 + 28), (char *)v170 + *(int *)(v171 + 28), v280);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v169, 0, 1, v171);
            }
            v203 = v276;
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v167, 0, 1, v161);
            goto LABEL_78;
          }
        }
        else
        {
          if (!v164)
          {
            v213 = *v160;
            v214 = v160[1];
            sub_237FFBA20(*v160, v214);
            v215 = *v163;
            v216 = v163[1];
            *v163 = v213;
            v163[1] = v214;
            sub_237FFBAB0(v215, v216);
            ((void (*)(char *, char *, uint64_t))v18)((char *)v163 + *(int *)(v161 + 20), (char *)v160 + *(int *)(v161 + 20), v280);
            v217 = *(int *)(v161 + 24);
            v218 = (uint64_t)v163 + v217;
            v219 = (char *)v160 + v217;
            v220 = type metadata accessor for Signature(0);
            __dstd = *(_QWORD **)(v220 - 8);
            v221 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstd[6];
            LODWORD(v213) = v221(v218, 1, v220);
            v273 = v220;
            v222 = v221((uint64_t)v219, 1, v220);
            if ((_DWORD)v213)
            {
              if (!v222)
              {
                v223 = *(_QWORD *)v219;
                v224 = *((_QWORD *)v219 + 1);
                sub_237FFBA20(*(_QWORD *)v219, v224);
                *(_QWORD *)v218 = v223;
                *(_QWORD *)(v218 + 8) = v224;
                v225 = *((_QWORD *)v219 + 2);
                v226 = *((_QWORD *)v219 + 3);
                sub_237FFBA20(v225, v226);
                *(_QWORD *)(v218 + 16) = v225;
                *(_QWORD *)(v218 + 24) = v226;
                v227 = *((_QWORD *)v219 + 4);
                *(_BYTE *)(v218 + 40) = v219[40];
                *(_QWORD *)(v218 + 32) = v227;
                (*(void (**)(uint64_t, char *, uint64_t))(v277 + 16))(v218 + *(int *)(v273 + 28), &v219[*(int *)(v273 + 28)], v280);
                ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dstd[7])(v218, 0, 1, v273);
                goto LABEL_77;
              }
            }
            else
            {
              if (!v222)
              {
                v229 = *(_QWORD *)v219;
                v230 = *((_QWORD *)v219 + 1);
                sub_237FFBA20(*(_QWORD *)v219, v230);
                v231 = *(_QWORD *)v218;
                v232 = *(_QWORD *)(v218 + 8);
                *(_QWORD *)v218 = v229;
                *(_QWORD *)(v218 + 8) = v230;
                sub_237FFBAB0(v231, v232);
                v233 = *((_QWORD *)v219 + 2);
                v234 = *((_QWORD *)v219 + 3);
                sub_237FFBA20(v233, v234);
                v235 = *(_QWORD *)(v218 + 16);
                v236 = *(_QWORD *)(v218 + 24);
                *(_QWORD *)(v218 + 16) = v233;
                *(_QWORD *)(v218 + 24) = v234;
                sub_237FFBAB0(v235, v236);
                v237 = *((_QWORD *)v219 + 4);
                *(_BYTE *)(v218 + 40) = v219[40];
                *(_QWORD *)(v218 + 32) = v237;
                ((void (*)(uint64_t, char *, uint64_t))v18)(v218 + *(int *)(v273 + 28), &v219[*(int *)(v273 + 28)], v280);
                goto LABEL_77;
              }
              sub_237FFD540(v218, type metadata accessor for Signature);
            }
            v129 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
            v130 = (void *)v218;
            v131 = (uint64_t *)v219;
LABEL_47:
            memcpy(v130, v131, v129);
LABEL_77:
            v203 = v276;
LABEL_78:
            v204 = *(int *)(v62 + 24);
            v205 = v42 + v204;
            v206 = &v203[v204];
            v207 = type metadata accessor for LogConsistency(0);
            v208 = *(_QWORD *)(v207 - 8);
            v209 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v208 + 48);
            v210 = v209(v205, 1, v207);
            v211 = v209((uint64_t)v206, 1, v207);
            if (v210)
            {
              if (!v211)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(v277 + 16))(v205, v206, v280);
                *(_QWORD *)(v205 + *(int *)(v207 + 20)) = *(_QWORD *)&v206[*(int *)(v207 + 20)];
                v212 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v208 + 56);
                swift_retain();
                v212(v205, 0, 1, v207);
                goto LABEL_22;
              }
            }
            else
            {
              if (!v211)
              {
                ((void (*)(uint64_t, char *, uint64_t))v18)(v205, v206, v280);
                *(_QWORD *)(v205 + *(int *)(v207 + 20)) = *(_QWORD *)&v206[*(int *)(v207 + 20)];
                swift_retain();
                swift_release();
                goto LABEL_22;
              }
              sub_237FFD540(v205, type metadata accessor for LogConsistency);
            }
            v58 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
            v59 = (void *)v205;
            v60 = v206;
LABEL_21:
            memcpy(v59, v60, v58);
LABEL_22:
            v56 = a3;
            goto LABEL_70;
          }
          sub_237FFD540((uint64_t)v163, type metadata accessor for SignedObject);
        }
        v129 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
        v130 = v163;
        v131 = v160;
        goto LABEL_47;
      }
      sub_237FFD540(v93, type metadata accessor for LogEntry);
    }
    v129 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440) - 8) + 64);
    v130 = (void *)v93;
    v131 = (uint64_t *)v94;
    goto LABEL_47;
  }
  if (v66)
  {
LABEL_33:
    v57 = qword_2568C5450;
    goto LABEL_20;
  }
  v278 = *(void (**)(uint64_t, char *, uint64_t))(v277 + 16);
  v278(v42, v43, v280);
  v67 = *(int *)(v62 + 20);
  v68 = v43;
  v69 = (_QWORD *)(v42 + v67);
  v275 = v68;
  v70 = &v68[v67];
  v71 = type metadata accessor for LogEntry(0);
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    __dstb = (void *)v42;
    v271 = v72;
    v109 = *(_QWORD *)v70;
    *((_BYTE *)v69 + 8) = v70[8];
    *v69 = v109;
    v69[2] = *((_QWORD *)v70 + 2);
    v110 = *((_QWORD *)v70 + 3);
    v111 = *((_QWORD *)v70 + 4);
    swift_bridgeObjectRetain();
    sub_237FFBA20(v110, v111);
    v69[3] = v110;
    v69[4] = v111;
    v69[5] = *((_QWORD *)v70 + 5);
    v112 = *((_QWORD *)v70 + 6);
    *((_BYTE *)v69 + 56) = v70[56];
    v69[6] = v112;
    v278((uint64_t)v69 + *(int *)(v71 + 36), &v70[*(int *)(v71 + 36)], v280);
    v113 = *(int *)(v71 + 40);
    v114 = (char *)v69 + v113;
    v115 = (uint64_t *)&v70[v113];
    v116 = type metadata accessor for SignedObject(0);
    v117 = *(_QWORD *)(v116 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
    {
      v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      v42 = (uint64_t)__dstb;
      v119 = v271;
    }
    else
    {
      v251 = v117;
      v262 = v114;
      v132 = *v115;
      v133 = v115[1];
      sub_237FFBA20(*v115, v133);
      *v262 = v132;
      v134 = v262;
      v262[1] = v133;
      v278((uint64_t)v262 + *(int *)(v116 + 20), (char *)v115 + *(int *)(v116 + 20), v280);
      v256 = v116;
      v135 = *(int *)(v116 + 24);
      v136 = (_QWORD *)((char *)v262 + v135);
      v137 = (uint64_t *)((char *)v115 + v135);
      v138 = type metadata accessor for Signature(0);
      v248 = *(_QWORD *)(v138 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v248 + 48))(v137, 1, v138))
      {
        v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
      }
      else
      {
        v246 = v138;
        v181 = *v137;
        v182 = v137[1];
        sub_237FFBA20(*v137, v182);
        *v136 = v181;
        v136[1] = v182;
        v183 = v137[2];
        v184 = v137[3];
        sub_237FFBA20(v183, v184);
        v136[2] = v183;
        v136[3] = v184;
        v134 = v262;
        v185 = v137[4];
        *((_BYTE *)v136 + 40) = *((_BYTE *)v137 + 40);
        v136[4] = v185;
        v278((uint64_t)v136 + *(int *)(v246 + 28), (char *)v137 + *(int *)(v246 + 28), v280);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v248 + 56))(v136, 0, 1, v246);
      }
      v42 = (uint64_t)__dstb;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v134, 0, 1, v256);
      v119 = v271;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v69, 0, 1, v71);
  }
  v186 = *(int *)(v62 + 24);
  v187 = (char *)(v42 + v186);
  v188 = &v275[v186];
  v189 = type metadata accessor for LogConsistency(0);
  v190 = *(_QWORD *)(v189 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v190 + 48))(v188, 1, v189))
  {
    v191 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
    memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
  }
  else
  {
    v278((uint64_t)v187, v188, v280);
    *(_QWORD *)&v187[*(int *)(v189 + 20)] = *(_QWORD *)&v188[*(int *)(v189 + 20)];
    v192 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v190 + 56);
    swift_retain();
    v192(v187, 0, 1, v189);
  }
  v56 = a3;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v42, 0, 1, v62);
LABEL_70:
  v193 = v56[5];
  v194 = (uint64_t *)((char *)a1 + v193);
  v195 = (uint64_t *)((char *)a2 + v193);
  *v194 = *v195;
  v194[1] = v195[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v196 = v56[6];
  v197 = (uint64_t *)((char *)a1 + v196);
  v198 = (uint64_t *)((char *)a2 + v196);
  *v197 = *v198;
  v197[1] = v198[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v56[7]) = *(uint64_t *)((char *)a2 + v56[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Validated.AttestationBundle(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *__dst;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int *v80;
  char *v81;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v8 = v7[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = v7[8];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for Proto_SealedHashLedger(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v12((uint64_t)v14 + *(int *)(v16 + 20), (uint64_t)v15 + *(int *)(v16 + 20), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = v7[9];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = sub_2380BD598();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = v7[10];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for Proto_TransparencyProofs(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v80 = a3;
    v12((uint64_t)v26, (uint64_t)v27, v11);
    v31 = *(int *)(v28 + 20);
    v81 = v26;
    v32 = &v26[v31];
    v33 = &v27[v31];
    v34 = type metadata accessor for ATLogProofs(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(qword_2568C5450);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v37 = v81;
      a3 = v80;
    }
    else
    {
      v76 = v35;
      v77 = v29;
      v12((uint64_t)v32, (uint64_t)v33, v11);
      v78 = v32;
      v79 = v34;
      v38 = *(int *)(v34 + 20);
      v39 = &v32[v38];
      v40 = v12;
      v41 = &v33[v38];
      v42 = type metadata accessor for LogEntry(0);
      v43 = *(_QWORD *)(v42 - 8);
      v75 = (void (*)(char *, char *, uint64_t))v40;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
        memcpy(v39, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        v46 = v78;
        v45 = v79;
        v37 = v81;
      }
      else
      {
        v72 = v33;
        v73 = v43;
        *(_QWORD *)v39 = *(_QWORD *)v41;
        v39[8] = v41[8];
        *((_QWORD *)v39 + 2) = *((_QWORD *)v41 + 2);
        *(_OWORD *)(v39 + 24) = *(_OWORD *)(v41 + 24);
        v47 = *((_QWORD *)v41 + 6);
        *((_QWORD *)v39 + 5) = *((_QWORD *)v41 + 5);
        *((_QWORD *)v39 + 6) = v47;
        v39[56] = v41[56];
        v40((uint64_t)&v39[*(int *)(v42 + 36)], (uint64_t)&v41[*(int *)(v42 + 36)], v11);
        v48 = *(int *)(v42 + 40);
        __dst = &v39[v48];
        v49 = &v41[v48];
        v50 = type metadata accessor for SignedObject(0);
        v51 = *(_QWORD *)(v50 - 8);
        v71 = v42;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
          v46 = v78;
          v37 = v81;
          v33 = v72;
          v53 = v73;
        }
        else
        {
          v69 = v51;
          *(_OWORD *)__dst = *(_OWORD *)v49;
          v40((uint64_t)&__dst[*(int *)(v50 + 20)], (uint64_t)&v49[*(int *)(v50 + 20)], v11);
          v70 = v50;
          v54 = *(int *)(v50 + 24);
          v55 = &__dst[v54];
          v56 = &v49[v54];
          v57 = type metadata accessor for Signature(0);
          v58 = *(_QWORD *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
          {
            v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
          }
          else
          {
            v60 = *((_OWORD *)v56 + 1);
            *(_OWORD *)v55 = *(_OWORD *)v56;
            *((_OWORD *)v55 + 1) = v60;
            *((_QWORD *)v55 + 4) = *((_QWORD *)v56 + 4);
            v55[40] = v56[40];
            v40((uint64_t)&v55[*(int *)(v57 + 28)], (uint64_t)&v56[*(int *)(v57 + 28)], v11);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
          }
          v37 = v81;
          v33 = v72;
          v53 = v73;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__dst, 0, 1, v70);
          v46 = v78;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v39, 0, 1, v71);
        v45 = v79;
      }
      v61 = *(int *)(v45 + 24);
      v62 = &v46[v61];
      v63 = &v33[v61];
      v64 = type metadata accessor for LogConsistency(0);
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v75(v62, v63, v11);
        *(_QWORD *)&v62[*(int *)(v64 + 20)] = *(_QWORD *)&v63[*(int *)(v64 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      }
      v29 = v77;
      a3 = v80;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v79);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v37, 0, 1, v28);
  }
  v67 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v67) = *(_OWORD *)(a2 + v67);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t *assignWithTake for Validated.AttestationBundle(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  int *v49;
  size_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  int v84;
  size_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(uint64_t, char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  _OWORD *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  char *v152;
  char *v153;
  _OWORD *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(uint64_t, uint64_t, uint64_t);
  int v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t (*v180)(uint64_t, uint64_t, uint64_t);
  int v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _OWORD *v199;
  void (*v200)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*__dsta)(uint64_t, char *, uint64_t);
  void *__dstb;
  _QWORD *__dstc;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int *v210;
  void *v211;
  _OWORD *v212;
  char *v213;
  void *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v221)(char *, uint64_t);
  void (*v222)(uint64_t, char *, uint64_t);
  void (*v223)(uint64_t, char *);

  v5 = *a1;
  v6 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v5, v6);
  v7 = a1[2];
  v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_237FFBAB0(v7, v8);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v9 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  v10 = v9[7];
  v11 = (char *)a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2380BD5C8();
  v14 = *(_QWORD *)(v13 - 8);
  v219 = v13;
  v221 = *(void (**)(char *, uint64_t))(v14 + 40);
  v221(v11, v12);
  v15 = v9[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)(a2 + v15);
  v18 = type metadata accessor for Proto_SealedHashLedger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v219);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    sub_237FFD540((uint64_t)v16, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v221)(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v219);
LABEL_7:
  v24 = v9[9];
  v25 = (char *)a1 + v24;
  v26 = (char *)(a2 + v24);
  v27 = sub_2380BD598();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_13:
  v33 = v9[10];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)(a2 + v33);
  v36 = type metadata accessor for Proto_TransparencyProofs(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38((uint64_t)v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      v222 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
      v222(v34, v35, v219);
      v41 = *(int *)(v36 + 20);
      v42 = (char *)(v34 + v41);
      v43 = &v35[v41];
      v44 = type metadata accessor for ATLogProofs(0);
      v45 = *(_QWORD *)(v44 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v205 = v45;
        v222((uint64_t)v42, v43, v219);
        v210 = (int *)v44;
        v216 = v42;
        v65 = *(int *)(v44 + 20);
        v66 = &v42[v65];
        v67 = &v43[v65];
        v68 = type metadata accessor for LogEntry(0);
        v69 = *(_QWORD *)(v68 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          v72 = v210;
          v71 = v216;
        }
        else
        {
          v194 = v43;
          v197 = v69;
          *(_QWORD *)v66 = *(_QWORD *)v67;
          v66[8] = v67[8];
          *((_QWORD *)v66 + 2) = *((_QWORD *)v67 + 2);
          *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
          v73 = *((_QWORD *)v67 + 6);
          *((_QWORD *)v66 + 5) = *((_QWORD *)v67 + 5);
          *((_QWORD *)v66 + 6) = v73;
          v66[56] = v67[56];
          v222((uint64_t)&v66[*(int *)(v68 + 36)], &v67[*(int *)(v68 + 36)], v219);
          v74 = *(int *)(v68 + 40);
          __dst = &v66[v74];
          v75 = &v67[v74];
          v76 = type metadata accessor for SignedObject(0);
          v77 = *(_QWORD *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
            memcpy(__dst, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
            v72 = v210;
            v71 = v216;
            v43 = v194;
          }
          else
          {
            v190 = v77;
            *(_OWORD *)__dst = *(_OWORD *)v75;
            v222((uint64_t)&__dst[*(int *)(v76 + 20)], &v75[*(int *)(v76 + 20)], v219);
            v192 = v76;
            v94 = *(int *)(v76 + 24);
            v95 = &__dst[v94];
            v96 = &v75[v94];
            v97 = type metadata accessor for Signature(0);
            v188 = *(_QWORD *)(v97 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v96, 1, v97))
            {
              v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
              memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
            }
            else
            {
              v114 = *((_OWORD *)v96 + 1);
              *(_OWORD *)v95 = *(_OWORD *)v96;
              *((_OWORD *)v95 + 1) = v114;
              *((_QWORD *)v95 + 4) = *((_QWORD *)v96 + 4);
              v95[40] = v96[40];
              v222((uint64_t)&v95[*(int *)(v97 + 28)], &v96[*(int *)(v97 + 28)], v219);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v95, 0, 1, v97);
            }
            v43 = v194;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v190 + 56))(__dst, 0, 1, v192);
            v72 = v210;
            v71 = v216;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v66, 0, 1, v68);
        }
        v115 = v72[6];
        v116 = &v71[v115];
        v117 = &v43[v115];
        v118 = type metadata accessor for LogConsistency(0);
        v119 = *(_QWORD *)(v118 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
        {
          v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448);
          memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
        }
        else
        {
          v222((uint64_t)v116, v117, v219);
          *(_QWORD *)&v116[*(int *)(v118 + 20)] = *(_QWORD *)&v117[*(int *)(v118 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
        }
        v49 = a3;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v205 + 56))(v216, 0, 1, v210);
        goto LABEL_60;
      }
      v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
      v47 = v42;
      v48 = v43;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  if (v40)
  {
    sub_237FFD540(v34, type metadata accessor for Proto_TransparencyProofs);
LABEL_21:
    v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C6010) - 8) + 64);
    v51 = (void *)v34;
    v52 = v35;
    goto LABEL_22;
  }
  ((void (*)(uint64_t, char *, uint64_t))v221)(v34, v35, v219);
  v53 = *(int *)(v36 + 20);
  v34 += v53;
  v54 = &v35[v53];
  v36 = type metadata accessor for ATLogProofs(0);
  v37 = *(_QWORD *)(v36 - 8);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  v56 = v55(v34, 1, v36);
  v57 = v55((uint64_t)v54, 1, v36);
  if (v56)
  {
    if (!v57)
    {
      v223 = *(void (**)(uint64_t, char *))(v14 + 32);
      v223(v34, v54);
      v58 = *(int *)(v36 + 20);
      v59 = (_QWORD *)(v34 + v58);
      v215 = v54;
      v60 = &v54[v58];
      v61 = type metadata accessor for LogEntry(0);
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        v64 = (void (*)(char *, char *, uint64_t))v223;
      }
      else
      {
        v207 = v62;
        *v59 = *(_QWORD *)v60;
        *((_BYTE *)v59 + 8) = v60[8];
        v59[2] = *((_QWORD *)v60 + 2);
        *(_OWORD *)(v59 + 3) = *(_OWORD *)(v60 + 24);
        v87 = *((_QWORD *)v60 + 6);
        v59[5] = *((_QWORD *)v60 + 5);
        v59[6] = v87;
        *((_BYTE *)v59 + 56) = v60[56];
        ((void (*)(char *, char *, uint64_t))v223)((char *)v59 + *(int *)(v61 + 36), &v60[*(int *)(v61 + 36)], v219);
        v88 = *(int *)(v61 + 40);
        v212 = (_OWORD *)((char *)v59 + v88);
        v89 = &v60[v88];
        v90 = type metadata accessor for SignedObject(0);
        v91 = *(_QWORD *)(v90 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
        {
          v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
          memcpy(v212, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
          v64 = (void (*)(char *, char *, uint64_t))v223;
          v93 = v207;
          v54 = v215;
        }
        else
        {
          v198 = v91;
          *v212 = *(_OWORD *)v89;
          ((void (*)(char *, char *, uint64_t))v223)((char *)v212 + *(int *)(v90 + 20), &v89[*(int *)(v90 + 20)], v219);
          __dstb = (void *)v90;
          v109 = *(int *)(v90 + 24);
          v110 = (_OWORD *)((char *)v212 + v109);
          v111 = &v89[v109];
          v112 = type metadata accessor for Signature(0);
          v193 = *(_QWORD *)(v112 - 8);
          v195 = v112;
          v54 = v215;
          if ((*(unsigned int (**)(char *, uint64_t))(v193 + 48))(v111, 1))
          {
            v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
            memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
            v64 = (void (*)(char *, char *, uint64_t))v223;
          }
          else
          {
            v150 = *((_OWORD *)v111 + 1);
            *v110 = *(_OWORD *)v111;
            v110[1] = v150;
            *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
            *((_BYTE *)v110 + 40) = v111[40];
            v151 = *(int *)(v195 + 28);
            v152 = (char *)v110 + v151;
            v153 = &v111[v151];
            v154 = v110;
            v64 = (void (*)(char *, char *, uint64_t))v223;
            ((void (*)(char *, char *, uint64_t))v223)(v152, v153, v219);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v154, 0, 1, v195);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, void *))(v198 + 56))(v212, 0, 1, __dstb);
          v93 = v207;
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v59, 0, 1, v61);
      }
      v155 = *(int *)(v36 + 24);
      v156 = (char *)(v34 + v155);
      v157 = &v54[v155];
      v158 = type metadata accessor for LogConsistency(0);
      v159 = *(_QWORD *)(v158 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
      {
        v64(v156, v157, v219);
        *(_QWORD *)&v156[*(int *)(v158 + 20)] = *(_QWORD *)&v157[*(int *)(v158 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
        goto LABEL_18;
      }
      v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
      v47 = v156;
      v48 = v157;
LABEL_17:
      memcpy(v47, v48, v46);
LABEL_18:
      v49 = a3;
LABEL_60:
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_61;
    }
    goto LABEL_34;
  }
  if (v57)
  {
    sub_237FFD540(v34, type metadata accessor for ATLogProofs);
LABEL_34:
    v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2568C5450) - 8) + 64);
    v51 = (void *)v34;
    v52 = v54;
    goto LABEL_22;
  }
  ((void (*)(uint64_t, char *, uint64_t))v221)(v34, v54, v219);
  v79 = *(int *)(v36 + 20);
  v80 = v34 + v79;
  v81 = &v54[v79];
  v82 = type metadata accessor for LogEntry(0);
  v206 = *(_QWORD *)(v82 - 8);
  v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 48);
  v217 = v80;
  LODWORD(v80) = v83(v80, 1, v82);
  v211 = (void *)v82;
  v84 = v83((uint64_t)v81, 1, v82);
  if ((_DWORD)v80)
  {
    if (!v84)
    {
      *(_QWORD *)v217 = *(_QWORD *)v81;
      *(_BYTE *)(v217 + 8) = v81[8];
      *(_QWORD *)(v217 + 16) = *((_QWORD *)v81 + 2);
      *(_OWORD *)(v217 + 24) = *(_OWORD *)(v81 + 24);
      v101 = *((_QWORD *)v81 + 6);
      *(_QWORD *)(v217 + 40) = *((_QWORD *)v81 + 5);
      *(_QWORD *)(v217 + 48) = v101;
      *(_BYTE *)(v217 + 56) = v81[56];
      __dsta = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
      __dsta(v217 + *(int *)(v82 + 36), &v81[*(int *)(v82 + 36)], v219);
      v102 = *(int *)(v82 + 40);
      v103 = (_OWORD *)(v217 + v102);
      v104 = &v81[v102];
      v105 = type metadata accessor for SignedObject(0);
      v106 = *(_QWORD *)(v105 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
      {
        v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
        v100 = (void (*)(uint64_t, char *, uint64_t))v221;
        v108 = v206;
      }
      else
      {
        *v103 = *(_OWORD *)v104;
        __dsta((uint64_t)v103 + *(int *)(v105 + 20), &v104[*(int *)(v105 + 20)], v219);
        v196 = v105;
        v199 = v103;
        v145 = *(int *)(v105 + 24);
        v146 = (_OWORD *)((char *)v103 + v145);
        v147 = &v104[v145];
        v148 = type metadata accessor for Signature(0);
        v189 = *(_QWORD *)(v148 - 8);
        v191 = v148;
        v108 = v206;
        if ((*(unsigned int (**)(char *, uint64_t))(v189 + 48))(v147, 1))
        {
          v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
          memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
        }
        else
        {
          v165 = *((_OWORD *)v147 + 1);
          *v146 = *(_OWORD *)v147;
          v146[1] = v165;
          *((_QWORD *)v146 + 4) = *((_QWORD *)v147 + 4);
          *((_BYTE *)v146 + 40) = v147[40];
          __dsta((uint64_t)v146 + *(int *)(v191 + 28), &v147[*(int *)(v191 + 28)], v219);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v189 + 56))(v146, 0, 1, v191);
        }
        v100 = (void (*)(uint64_t, char *, uint64_t))v221;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v199, 0, 1, v196);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, void *))(v108 + 56))(v217, 0, 1, v211);
      goto LABEL_81;
    }
    v85 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440) - 8) + 64);
    v86 = (void *)v217;
    goto LABEL_46;
  }
  if (v84)
  {
    sub_237FFD540(v217, type metadata accessor for LogEntry);
    v85 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440) - 8) + 64);
    v86 = (void *)v217;
LABEL_46:
    v99 = v81;
    goto LABEL_47;
  }
  *(_QWORD *)v217 = *(_QWORD *)v81;
  *(_BYTE *)(v217 + 8) = v81[8];
  *(_QWORD *)(v217 + 16) = *((_QWORD *)v81 + 2);
  swift_bridgeObjectRelease();
  v132 = *(_QWORD *)(v217 + 24);
  v133 = *(_QWORD *)(v217 + 32);
  *(_OWORD *)(v217 + 24) = *(_OWORD *)(v81 + 24);
  sub_237FFBAB0(v132, v133);
  v134 = *((_QWORD *)v81 + 6);
  *(_QWORD *)(v217 + 40) = *((_QWORD *)v81 + 5);
  *(_QWORD *)(v217 + 48) = v134;
  *(_BYTE *)(v217 + 56) = v81[56];
  ((void (*)(uint64_t, char *, uint64_t))v221)(v217 + *(int *)(v82 + 36), &v81[*(int *)(v82 + 36)], v219);
  v135 = *(int *)(v82 + 40);
  v136 = v217 + v135;
  v137 = &v81[v135];
  v138 = type metadata accessor for SignedObject(0);
  __dstc = *(_QWORD **)(v138 - 8);
  v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstc[6];
  v218 = v136;
  v140 = v136;
  v141 = v138;
  v142 = v139(v140, 1, v138);
  v208 = v141;
  v213 = v137;
  v143 = v139((uint64_t)v137, 1, v141);
  if (v142)
  {
    if (!v143)
    {
      *(_OWORD *)v218 = *(_OWORD *)v137;
      v200 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
      v200(v218 + *(int *)(v141 + 20), &v137[*(int *)(v141 + 20)], v219);
      v160 = *(int *)(v141 + 24);
      v161 = (_OWORD *)(v218 + v160);
      v162 = &v213[v160];
      v163 = type metadata accessor for Signature(0);
      v214 = *(void **)(v163 - 8);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v214 + 6))(v162, 1, v163))
      {
        v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
      }
      else
      {
        v182 = *((_OWORD *)v162 + 1);
        *v161 = *(_OWORD *)v162;
        v161[1] = v182;
        *((_QWORD *)v161 + 4) = *((_QWORD *)v162 + 4);
        *((_BYTE *)v161 + 40) = v162[40];
        v200((uint64_t)v161 + *(int *)(v163 + 28), &v162[*(int *)(v163 + 28)], v219);
        (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v214 + 7))(v161, 0, 1, v163);
      }
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dstc[7])(v218, 0, 1, v208);
      goto LABEL_48;
    }
    v144 = &qword_2568C5438;
  }
  else
  {
    if (v143)
    {
      sub_237FFD540(v218, type metadata accessor for SignedObject);
      v85 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
      v86 = (void *)v218;
      v99 = v137;
      goto LABEL_47;
    }
    v174 = *(_QWORD *)v218;
    v175 = *(_QWORD *)(v218 + 8);
    *(_OWORD *)v218 = *(_OWORD *)v137;
    sub_237FFBAB0(v174, v175);
    ((void (*)(uint64_t, char *, uint64_t))v221)(v218 + *(int *)(v141 + 20), &v137[*(int *)(v141 + 20)], v219);
    v176 = *(int *)(v141 + 24);
    v177 = v218 + v176;
    v178 = &v213[v176];
    v179 = type metadata accessor for Signature(0);
    v209 = *(_QWORD *)(v179 - 8);
    v180 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
    v218 = v177;
    LODWORD(v177) = v180(v177, 1, v179);
    v213 = v178;
    v181 = v180((uint64_t)v178, 1, v179);
    if (!(_DWORD)v177)
    {
      if (!v181)
      {
        v184 = *(_QWORD *)v218;
        v185 = *(_QWORD *)(v218 + 8);
        *(_OWORD *)v218 = *(_OWORD *)v178;
        sub_237FFBAB0(v184, v185);
        v186 = *(_QWORD *)(v218 + 16);
        v187 = *(_QWORD *)(v218 + 24);
        *(_OWORD *)(v218 + 16) = *((_OWORD *)v178 + 1);
        sub_237FFBAB0(v186, v187);
        *(_QWORD *)(v218 + 32) = *((_QWORD *)v178 + 4);
        *(_BYTE *)(v218 + 40) = v178[40];
        v100 = (void (*)(uint64_t, char *, uint64_t))v221;
        ((void (*)(uint64_t, char *, uint64_t))v221)(v218 + *(int *)(v179 + 28), &v178[*(int *)(v179 + 28)], v219);
        goto LABEL_81;
      }
      sub_237FFD540(v218, type metadata accessor for Signature);
      v85 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
      v86 = (void *)v218;
      v99 = v178;
      goto LABEL_47;
    }
    if (!v181)
    {
      v183 = *((_OWORD *)v178 + 1);
      *(_OWORD *)v218 = *(_OWORD *)v178;
      *(_OWORD *)(v218 + 16) = v183;
      *(_QWORD *)(v218 + 32) = *((_QWORD *)v178 + 4);
      *(_BYTE *)(v218 + 40) = v178[40];
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v218 + *(int *)(v179 + 28), &v178[*(int *)(v179 + 28)], v219);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v209 + 56))(v218, 0, 1, v179);
      goto LABEL_48;
    }
    v144 = &qword_2568C5430;
  }
  v85 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v144) - 8) + 64);
  v99 = v213;
  v86 = (void *)v218;
LABEL_47:
  memcpy(v86, v99, v85);
LABEL_48:
  v100 = (void (*)(uint64_t, char *, uint64_t))v221;
LABEL_81:
  v166 = *(int *)(v36 + 24);
  v167 = v34 + v166;
  v168 = &v54[v166];
  v169 = type metadata accessor for LogConsistency(0);
  v170 = *(_QWORD *)(v169 - 8);
  v171 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 48);
  v172 = v171(v167, 1, v169);
  v173 = v171((uint64_t)v168, 1, v169);
  if (v172)
  {
    if (!v173)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v167, v168, v219);
      *(_QWORD *)(v167 + *(int *)(v169 + 20)) = *(_QWORD *)&v168[*(int *)(v169 + 20)];
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v170 + 56))(v167, 0, 1, v169);
      goto LABEL_23;
    }
  }
  else
  {
    if (!v173)
    {
      v100(v167, v168, v219);
      *(_QWORD *)(v167 + *(int *)(v169 + 20)) = *(_QWORD *)&v168[*(int *)(v169 + 20)];
      swift_release();
      goto LABEL_23;
    }
    sub_237FFD540(v167, type metadata accessor for LogConsistency);
  }
  v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5448) - 8) + 64);
  v51 = (void *)v167;
  v52 = v168;
LABEL_22:
  memcpy(v51, v52, v50);
LABEL_23:
  v49 = a3;
LABEL_61:
  v121 = v49[5];
  v122 = (uint64_t *)((char *)a1 + v121);
  v123 = (uint64_t *)(a2 + v121);
  v125 = *v123;
  v124 = v123[1];
  *v122 = v125;
  v122[1] = v124;
  swift_bridgeObjectRelease();
  v126 = v49[6];
  v127 = (uint64_t *)((char *)a1 + v126);
  v128 = (uint64_t *)(a2 + v126);
  v130 = *v128;
  v129 = v128[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v49[7]) = *(_QWORD *)(a2 + v49[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Validated.AttestationBundle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238043044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for AttestationBundle(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for Validated.AttestationBundle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380430DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AttestationBundle(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_238043158()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Proto_AttestationBundle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PublicKeyData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_23801BDC4(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for PublicKeyData(uint64_t *a1)
{
  return sub_23801BDE0(*a1, a1[1]);
}

uint64_t *assignWithCopy for PublicKeyData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_23801BDC4(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_23801BDE0(v5, v6);
  return a1;
}

uint64_t *assignWithTake for PublicKeyData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23801BDE0(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PublicKeyData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PublicKeyData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_238043334(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_238043340(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_238043350(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for PublicKeyData()
{
  return &type metadata for PublicKeyData;
}

char *initializeBufferWithCopyOfBuffer for CloudAttestationError(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
        v10 = *a2;
        v11 = v10;
        *(_QWORD *)a1 = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v12 = sub_2380BD418();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for CloudAttestationError(id *a1)
{
  uint64_t v2;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      break;
    case 1u:
    case 2u:

      break;
    case 3u:
      v2 = sub_2380BD418();
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    default:
      return;
  }
}

_QWORD *initializeWithCopy for CloudAttestationError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 1u:
    case 2u:
      v7 = (void *)*a2;
      v8 = v7;
      *a1 = v7;
      goto LABEL_6;
    case 3u:
      v9 = sub_2380BD418();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for CloudAttestationError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_237FFD540((uint64_t)a1, type metadata accessor for CloudAttestationError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 1u:
      case 2u:
        v6 = (void *)*a2;
        v7 = v6;
        *a1 = v6;
        goto LABEL_7;
      case 3u:
        v8 = sub_2380BD418();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for CloudAttestationError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v6 = sub_2380BD418();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for CloudAttestationError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_237FFD540((uint64_t)a1, type metadata accessor for CloudAttestationError);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v6 = sub_2380BD418();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_238043890()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD418();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_23804390C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C5E68;
  if (!qword_2568C5E68)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C5E60);
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2568C5E68);
  }
  return result;
}

uint64_t CeremonyAttestor.inner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23804396C(v1, a1);
}

uint64_t sub_23804396C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NodeAttestor(a2, a1);
  return a2;
}

uint64_t CeremonyAttestor.inner.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_2380439B0(a1, v1);
}

uint64_t sub_2380439B0(uint64_t a1, uint64_t a2)
{
  assignWithTake for NodeAttestor(a2, a1);
  return a2;
}

uint64_t (*CeremonyAttestor.inner.modify())()
{
  return nullsub_1;
}

uint64_t CeremonyAttestor.assetProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1 + 24, a1);
}

uint64_t CeremonyAttestor.assetProvider.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 24;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23800A4E4(a1, v3);
}

void (*CeremonyAttestor.assetProvider.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_2380175E0(v1 + 24, (uint64_t)v3);
  return sub_238043A98;
}

void sub_238043A98(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v2 + 80) + 24;
    sub_2380175E0(*a1, v2 + 40);
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_23800A4E4((__int128 *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 80) + 24;
    __swift_destroy_boxed_opaque_existential_1(v4);
    sub_23800A4E4((__int128 *)v2, v4);
  }
  free((void *)v2);
}

uint64_t CeremonyAttestor.transparencyProver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1 + 64, a1);
}

uint64_t CeremonyAttestor.transparencyProver.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 64;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23800A4E4(a1, v3);
}

void (*CeremonyAttestor.transparencyProver.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_2380175E0(v1 + 64, (uint64_t)v3);
  return sub_238043BB4;
}

void sub_238043BB4(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v2 + 80) + 64;
    sub_2380175E0(*a1, v2 + 40);
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_23800A4E4((__int128 *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 80) + 64;
    __swift_destroy_boxed_opaque_existential_1(v4);
    sub_23800A4E4((__int128 *)v2, v4);
  }
  free((void *)v2);
}

uint64_t CeremonyAttestor.init()@<X0>(uint64_t a1@<X8>)
{
  char v2;
  __int128 v3;
  _UNKNOWN **v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  char v12;
  char v13;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _UNKNOWN **v22;
  _OWORD v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _UNKNOWN **v30;

  *(_OWORD *)((char *)v23 + 8) = xmmword_2380C1230;
  *((_QWORD *)&v29 + 1) = &type metadata for SEP.PhysicalDevice;
  v30 = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  v2 = byte_2542C9B90;
  if (byte_2542C9B90 == 9)
  {
    static Environment.default.getter(&v13);
    v2 = v13;
  }
  v12 = v2;
  NodeAttestor.init(environment:)(&v12, (uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v27 = v19;
  v3 = v15;
  v23[2] = v15;
  v28 = v20;
  v29 = v21;
  v4 = v22;
  v30 = v22;
  v24 = v16;
  v25 = v17;
  v26 = v18;
  v23[0] = v14[0];
  v23[1] = v14[1];
  v5 = v20;
  v6 = v21;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 144) = v4;
  v7 = v24;
  v8 = v25;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v7;
  v9 = v26;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  v10 = v23[1];
  *(_OWORD *)a1 = v23[0];
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 104) = 0;
  result = __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_QWORD *)(a1 + 48) = &type metadata for CeremonyAttestor.AssetProvider;
  *(_QWORD *)(a1 + 56) = &protocol witness table for CeremonyAttestor.AssetProvider;
  return result;
}

uint64_t CeremonyAttestor.attest(key:expiration:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_238013814;
  return NodeAttestor.attest(key:expiration:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t sub_238043DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_2380165B0;
  return NodeAttestor.attest(key:expiration:nonce:)(a1, a2, a3, a4, a5);
}

id CeremonyAttestor.AssetProvider.apTicket.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_2380BD2C8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedDataAccessor);
  v14[0] = 0;
  v6 = objc_msgSend(v5, sel_copyPathForPersonalizedData_error_, 2, v14);

  v7 = v14[0];
  if (v6)
  {
    sub_2380BDD00();
    v8 = v7;

    sub_2380BD28C();
    swift_bridgeObjectRelease();
    v9 = sub_2380BD2E0();
    if (!v0)
    {
      v6 = (id)v9;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return v6;
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v10 = v0;
  }
  else
  {
    v11 = v14[0];
    v10 = sub_2380BD274();

    swift_willThrow();
  }
  sub_238016780();
  swift_allocError();
  *(_QWORD *)v12 = v10;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 1;
  swift_willThrow();
  return v6;
}

uint64_t CeremonyAttestor.AssetProvider.provisioningCertificateChain.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t CeremonyAttestor.AssetProvider.sealedHashEntries.getter()
{
  uint64_t v0;
  BOOL v1;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (MEMORY[0x24BDE8390])
    v1 = MEMORY[0x24BDE8380] == 0;
  else
    v1 = 1;
  if (v1 || MEMORY[0x24BDE8398] == 0 || MEMORY[0x24BDE8388] == 0)
  {
    sub_238016780();
    swift_allocError();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_2380BD514();
    v4 = (void *)sub_2380BD508();
    v5 = sub_2380BD4FC();
    v0 = sub_238016FC8(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t (*CeremonyAttestor.AssetProvider.inner.modify())()
{
  return nullsub_1;
}

id sub_238044134()
{
  return CeremonyAttestor.AssetProvider.apTicket.getter();
}

uint64_t sub_238044148()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_238044154()
{
  uint64_t v0;
  BOOL v1;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (MEMORY[0x24BDE8390])
    v1 = MEMORY[0x24BDE8380] == 0;
  else
    v1 = 1;
  if (v1 || MEMORY[0x24BDE8398] == 0 || MEMORY[0x24BDE8388] == 0)
  {
    sub_238016780();
    swift_allocError();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_2380BD514();
    v4 = (void *)sub_2380BD508();
    v5 = sub_2380BD4FC();
    v0 = sub_238016FC8(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_23804422C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380175E0(a1 + 24, a2);
}

uint64_t sub_238044248(uint64_t a1, uint64_t a2)
{
  __int128 v4[2];

  sub_2380175E0(a1, (uint64_t)v4);
  a2 += 24;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_23800A4E4(v4, a2);
}

uint64_t sub_23804428C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380175E0(a1 + 64, a2);
}

uint64_t sub_2380442A8(uint64_t a1, uint64_t a2)
{
  __int128 v4[2];

  sub_2380175E0(a1, (uint64_t)v4);
  a2 += 64;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_23800A4E4(v4, a2);
}

uint64_t destroy for NodeAttestor(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 112);
}

uint64_t initializeWithCopy for NodeAttestor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
  v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 64, a2 + 64);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 112, a2 + 112);
  return a1;
}

uint64_t assignWithCopy for NodeAttestor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for NodeAttestor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeAttestor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeAttestor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CeremonyAttestor()
{
  return &type metadata for CeremonyAttestor;
}

ValueMetadata *type metadata accessor for CeremonyAttestor.AssetProvider()
{
  return &type metadata for CeremonyAttestor.AssetProvider;
}

double NodeAttestor.init()@<D0>(uint64_t a1@<X8>)
{
  char v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  char v8;
  char v9;
  _OWORD v10[9];
  uint64_t v11;

  *(_OWORD *)(a1 + 8) = xmmword_2380C1230;
  *(_QWORD *)(a1 + 136) = &type metadata for SEP.PhysicalDevice;
  *(_QWORD *)(a1 + 144) = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  v2 = byte_2542C9B90;
  if (byte_2542C9B90 == 9)
  {
    static Environment.default.getter(&v9);
    v2 = v9;
  }
  v8 = v2;
  NodeAttestor.init(environment:)(&v8, (uint64_t)v10);
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  v3 = v10[7];
  *(_OWORD *)(a1 + 96) = v10[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v10[8];
  *(_QWORD *)(a1 + 144) = v11;
  v4 = v10[3];
  *(_OWORD *)(a1 + 32) = v10[2];
  *(_OWORD *)(a1 + 48) = v4;
  v5 = v10[5];
  *(_OWORD *)(a1 + 64) = v10[4];
  *(_OWORD *)(a1 + 80) = v5;
  result = *(double *)v10;
  v7 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t NodeAttestor.attest(key:expiration:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[59] = a5;
  v6[60] = v5;
  v6[57] = a3;
  v6[58] = a4;
  v6[55] = a1;
  v6[56] = a2;
  v7 = sub_2380BD988();
  v6[61] = v7;
  v6[62] = *(_QWORD *)(v7 - 8);
  v6[63] = swift_task_alloc();
  v8 = type metadata accessor for Proto_TransparencyProofs(0);
  v6[64] = v8;
  v6[65] = *(_QWORD *)(v8 - 8);
  v6[66] = swift_task_alloc();
  v6[67] = type metadata accessor for ATLogProofs(0);
  v6[68] = swift_task_alloc();
  type metadata accessor for TransparencyLogProofs();
  v6[69] = swift_task_alloc();
  v9 = sub_2380BD844();
  v6[70] = v9;
  v6[71] = *(_QWORD *)(v9 - 8);
  v6[72] = swift_task_alloc();
  v6[73] = swift_task_alloc();
  v6[74] = swift_task_alloc();
  type metadata accessor for AttestationBundle(0);
  v6[75] = swift_task_alloc();
  type metadata accessor for Release();
  v6[76] = swift_task_alloc();
  v6[77] = swift_task_alloc();
  v6[78] = swift_task_alloc();
  v6[79] = swift_task_alloc();
  v6[80] = swift_task_alloc();
  v6[81] = swift_task_alloc();
  v6[82] = type metadata accessor for Proto_AttestationBundle(0);
  v6[83] = swift_task_alloc();
  v6[84] = swift_task_alloc();
  v10 = sub_2380BD808();
  v6[85] = v10;
  v6[86] = *(_QWORD *)(v10 - 8);
  v6[87] = swift_task_alloc();
  v6[88] = swift_task_alloc();
  v6[89] = swift_task_alloc();
  v6[90] = swift_task_alloc();
  v6[91] = swift_task_alloc();
  v6[92] = swift_task_alloc();
  v6[93] = swift_task_alloc();
  v6[94] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_238044928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  _QWORD *v92;
  id v94;
  id v95;
  id v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  _QWORD *v100;
  void *v101;
  id v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  os_log_type_t v121;
  NSObject *log;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  if (qword_2568C4ED8 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 752);
  v2 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 480);
  v4 = __swift_project_value_buffer(*(_QWORD *)(v0 + 680), (uint64_t)qword_2568C9C18);
  *(_QWORD *)(v0 + 760) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 768) = v5;
  v125 = v4;
  v126 = v5;
  ((void (*)(uint64_t))v5)(v1);
  sub_23804396C(v3, v0 + 16);
  v6 = sub_2380BD7F0();
  v7 = sub_2380BDF70();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (_DWORD *)swift_slowAlloc();
    v129 = swift_slowAlloc();
    *v8 = 136446210;
    __asm { BR              X10 }
  }
  v9 = *(_QWORD *)(v0 + 752);
  v10 = *(_QWORD *)(v0 + 688);
  v11 = *(_QWORD *)(v0 + 680);
  sub_23804A6B0(v0 + 16);

  v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v12(v9, v11);
  *(_QWORD *)(v0 + 776) = v12;
  v13 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD **)(v0 + 480);
  v15 = v14[17];
  v16 = v14[18];
  __swift_project_boxed_opaque_existential_1(v14 + 14, v15);
  if (v13 >> 60 == 15)
  {
    SEP.AttestationProtocol.attest(key:)(*(_QWORD *)(v0 + 448), v15, v16);
LABEL_9:
    v29 = v129;
    v28 = v130;
    v30 = v131;
    v123 = v132;
    *(_QWORD *)(v0 + 808) = v132;
    *(_QWORD *)(v0 + 800) = v30;
    *(_QWORD *)(v0 + 792) = v28;
    *(_QWORD *)(v0 + 784) = v29;
    v31 = *(_QWORD *)(v0 + 480);
    v32 = *(_QWORD *)(v0 + 456);
    v33 = (_QWORD *)swift_task_alloc();
    v33[2] = v29;
    v33[3] = v28;
    v33[4] = v32;
    v33[5] = v31;
    v33[6] = v29;
    v33[7] = v28;
    v33[8] = v30;
    v33[9] = v123;
    sub_237FFBA20(v29, v28);
    sub_238001820(&qword_2568C63F8, type metadata accessor for Proto_AttestationBundle, (uint64_t)&unk_2380C7478);
    sub_2380BD730();
    v36 = *(_QWORD *)(v0 + 744);
    v37 = *(_QWORD *)(v0 + 680);
    v38 = *(_QWORD *)(v0 + 672);
    v39 = *(_QWORD *)(v0 + 480);
    v40 = *(_QWORD *)(v0 + 440);
    swift_task_dealloc();
    sub_238013570(v38, v40, type metadata accessor for Proto_AttestationBundle);
    v41 = *(unsigned __int8 *)(v39 + 106);
    v42 = v37;
    v43 = v39;
    v126(v36, v125, v42);
    v119 = v0 + 168;
    sub_23804396C(v39, v0 + 168);
    v44 = sub_2380BD7F0();
    v45 = sub_2380BDF70();
    if (os_log_type_enabled(v44, v45))
    {
      v116 = v41;
      v47 = swift_slowAlloc();
      *(_DWORD *)v47 = 67240448;
      *(_DWORD *)(v0 + 836) = v116;
      sub_2380BDF94();
      *(_WORD *)(v47 + 8) = 1026;
      v48 = v12;
      v49 = *(unsigned __int8 *)(v0 + 274);
      sub_23804A6B0(v119);
      *(_DWORD *)(v0 + 832) = v49;
      v12 = v48;
      v43 = v39;
      sub_2380BDF94();
      _os_log_impl(&dword_237FF6000, v44, v45, "Computing release object: evaluateTrust=%{BOOL,public}d, requireCryptex1=%{BOOL,public}d)", (uint8_t *)v47, 0xEu);
      MEMORY[0x23B82B830](v47, -1, -1);
    }
    else
    {
      sub_23804A6B0(v119);
    }

    v50 = *(_QWORD *)(v0 + 664);
    v51 = *(_QWORD *)(v0 + 632);
    v52 = *(_QWORD *)(v0 + 600);
    v53 = *(_QWORD *)(v0 + 440);
    v12(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 680));
    sub_238013570(v53, v52, type metadata accessor for AttestationBundle);
    LOBYTE(v53) = *(_BYTE *)(v43 + 106);
    sub_238013570(v52, v50, type metadata accessor for Proto_AttestationBundle);
    sub_23802AA78(v50, v53, v51);
    v124 = v12;
    v54 = *(_QWORD *)(v0 + 736);
    v55 = *(_QWORD *)(v0 + 680);
    v56 = *(_QWORD *)(v0 + 648);
    v57 = *(_QWORD *)(v0 + 640);
    v58 = *(_QWORD *)(v0 + 632);
    v59 = *(_QWORD *)(v0 + 624);
    v60 = *(_QWORD *)(v0 + 616);
    sub_237FFD540(*(_QWORD *)(v0 + 600), type metadata accessor for AttestationBundle);
    sub_238001DE4(v58, v57, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    sub_238001DE4(v57, v56, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    v126(v54, v125, v55);
    sub_238013570(v56, v59, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    sub_238013570(v56, v60, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    v61 = sub_2380BD7F0();
    v62 = sub_2380BDF58();
    if (!os_log_type_enabled(v61, v62))
    {
      v84 = *(_QWORD *)(v0 + 736);
      v85 = *(_QWORD *)(v0 + 680);
      v86 = *(_QWORD *)(v0 + 616);
      sub_237FFD540(*(_QWORD *)(v0 + 624), (uint64_t (*)(_QWORD))type metadata accessor for Release);
      sub_237FFD540(v86, (uint64_t (*)(_QWORD))type metadata accessor for Release);

      v82 = v84;
      v83 = v85;
LABEL_19:
      v124(v82, v83);
      v87 = *(_QWORD **)(v0 + 480);
      v88 = v87[11];
      v89 = v87[12];
      __swift_project_boxed_opaque_existential_1(v87 + 8, v88);
      v90 = *(int **)(v89 + 8);
      v91 = *v90;
      v92 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 816) = v92;
      *v92 = v0;
      v92[1] = sub_238045AE8;
      return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))((char *)v90 + v91))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 648), v88, v89);
    }
    v121 = v62;
    log = v61;
    v63 = *(_QWORD *)(v0 + 624);
    v64 = *(_QWORD *)(v0 + 608);
    v65 = *(_QWORD *)(v0 + 592);
    v66 = *(_QWORD *)(v0 + 584);
    v67 = *(_QWORD *)(v0 + 568);
    v68 = *(_QWORD *)(v0 + 560);
    v69 = swift_slowAlloc();
    v120 = swift_slowAlloc();
    v128 = v120;
    *(_DWORD *)v69 = 136446466;
    sub_238013570(v63, v64, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    v129 = 0;
    v130 = 0xE000000000000000;
    sub_2380BE048();
    swift_bridgeObjectRelease();
    v129 = 0xD000000000000010;
    v130 = 0x80000002380C83D0;
    sub_238028F5C(v65);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v66, v65, v68);
    sub_238001820(&qword_2568C6230, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC6300]);
    sub_2380BDE08();
    v70 = *(_QWORD *)(v0 + 368);
    v71 = *(_QWORD *)(v0 + 376);
    v72 = *(_QWORD *)(v70 + 16);
    if (v71 == v72)
    {
      v73 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_17:
      v127 = *(_QWORD *)(v0 + 736);
      v115 = *(_QWORD *)(v0 + 624);
      v117 = *(_QWORD *)(v0 + 616);
      v118 = *(_QWORD *)(v0 + 680);
      v74 = *(_QWORD *)(v0 + 608);
      v75 = *(_QWORD *)(v0 + 592);
      v76 = *(_QWORD *)(v0 + 568);
      v77 = *(_QWORD *)(v0 + 560);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
      *(_QWORD *)(v0 + 408) = v73;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
      sub_23804390C();
      sub_2380BDCD0();
      swift_bridgeObjectRelease();
      sub_2380BDD90();
      swift_bridgeObjectRelease();
      sub_2380BDD90();
      v78 = v129;
      v79 = v130;
      sub_237FFD540(v74, (uint64_t (*)(_QWORD))type metadata accessor for Release);
      *(_QWORD *)(v0 + 416) = sub_238013968(v78, v79, &v128);
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      sub_237FFD540(v115, (uint64_t (*)(_QWORD))type metadata accessor for Release);
      *(_WORD *)(v69 + 12) = 2082;
      Release.jsonString.getter();
      *(_QWORD *)(v0 + 424) = sub_238013968(v80, v81, &v128);
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      sub_237FFD540(v117, (uint64_t (*)(_QWORD))type metadata accessor for Release);
      _os_log_impl(&dword_237FF6000, log, v121, "This device's %{public}s:\n%{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v120, -1, -1);
      MEMORY[0x23B82B830](v69, -1, -1);

      v82 = v127;
      v83 = v118;
      goto LABEL_19;
    }
    if ((uint64_t)v71 < v72)
    {
      if ((v71 & 0x8000000000000000) != 0)
        goto LABEL_36;
      v73 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (v71 < *(_QWORD *)(v70 + 16))
      {
        v107 = *(_BYTE *)(v70 + 32 + v71);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
        v108 = swift_allocObject();
        *(_OWORD *)(v108 + 16) = xmmword_2380BEAC0;
        *(_QWORD *)(v108 + 56) = MEMORY[0x24BEE4260];
        *(_QWORD *)(v108 + 64) = MEMORY[0x24BEE42B0];
        *(_BYTE *)(v108 + 32) = v107;
        v109 = sub_2380BDD30();
        v111 = v110;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v73 = sub_2380267E8(0, v73[2] + 1, 1, v73);
        v113 = v73[2];
        v112 = v73[3];
        if (v113 >= v112 >> 1)
          v73 = sub_2380267E8((_QWORD *)(v112 > 1), v113 + 1, 1, v73);
        ++v71;
        v73[2] = v113 + 1;
        v114 = &v73[2 * v113];
        v114[4] = v109;
        v114[5] = v111;
        if (v72 == v71)
          goto LABEL_17;
      }
      __break(1u);
    }
    __break(1u);
LABEL_36:
    __break(1u);
  }
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
  sub_237FFBA20(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472));
  v18 = (void *)v17(v15, v16);
  v20 = *(_QWORD *)(v0 + 464);
  v19 = *(_QWORD *)(v0 + 472);
  if (v18)
  {
    v21 = *(_QWORD *)(v0 + 448);
    v22 = v18;
    v23 = (void *)sub_2380BD358();
    SecKeySetParameter();

    v24 = v14[17];
    v25 = v14[18];
    __swift_project_boxed_opaque_existential_1(v14 + 14, v24);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, id, uint64_t, uint64_t))(v25 + 16))(&v129, v21, v22, v24, v25);
    v26 = *(_QWORD *)(v0 + 464);
    v27 = *(_QWORD *)(v0 + 472);

    sub_238008CF0(v26, v27);
    goto LABEL_9;
  }
  sub_23804A730();
  v34 = (void *)swift_allocError();
  *v35 = 0;
  swift_willThrow();
  sub_238008CF0(v20, v19);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 768))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 680));
  v94 = v34;
  v95 = v34;
  v96 = v34;
  v97 = sub_2380BD7F0();
  v98 = sub_2380BDF64();
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc();
    v100 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v99 = 138543362;
    v101 = v34;
    v102 = v34;
    v103 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 400) = v103;
    sub_2380BDF94();
    *v100 = v103;

    _os_log_impl(&dword_237FF6000, v97, v98, "Attestation failed: %{public}@", v99, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v100, -1, -1);
    MEMORY[0x23B82B830](v99, -1, -1);
  }
  else
  {

    v101 = v34;
  }
  v104 = *(void (**)(uint64_t, uint64_t))(v0 + 776);
  v105 = *(_QWORD *)(v0 + 712);
  v106 = *(_QWORD *)(v0 + 680);

  v104(v105, v106);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238045AE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 824) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_238045B90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t a10)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFDataRef v31;
  CFDataRef v32;
  NSObject *v33;
  os_log_type_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  __SecKey *v52;
  const __CFData *v53;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v10 + 768))(*(_QWORD *)(v10 + 728), *(_QWORD *)(v10 + 760), *(_QWORD *)(v10 + 680));
  v11 = sub_2380BD7F0();
  v12 = sub_2380BDF58();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_237FF6000, v11, v12, "Fetched inclusion proofs for release", v13, 2u);
    MEMORY[0x23B82B830](v13, -1, -1);
  }
  v14 = *(void (**)(uint64_t, uint64_t))(v10 + 776);
  v15 = *(_QWORD *)(v10 + 728);
  v16 = *(_QWORD *)(v10 + 680);
  v17 = *(_QWORD *)(v10 + 552);
  v18 = *(_QWORD *)(v10 + 544);
  v19 = *(_QWORD *)(v10 + 536);

  v14(v15, v16);
  sub_2380BD5BC();
  v20 = v18 + *(int *)(v19 + 20);
  v21 = type metadata accessor for LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v18 + *(int *)(v19 + 24);
  v23 = type metadata accessor for LogConsistency(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  LOBYTE(v22) = _s16CloudAttestation21TransparencyLogProofsV2eeoiySbAC_ACtFZ_0(v17, v18);
  sub_237FFD540(v18, type metadata accessor for ATLogProofs);
  if ((v22 & 1) == 0)
  {
    v24 = *(_QWORD *)(v10 + 656);
    v25 = *(_QWORD *)(v10 + 552);
    v26 = *(_QWORD *)(v10 + 528);
    v27 = *(_QWORD *)(v10 + 520);
    v28 = *(_QWORD *)(v10 + 512);
    v29 = *(_QWORD *)(v10 + 440);
    *(_QWORD *)(swift_task_alloc() + 16) = v25;
    sub_238001820(&qword_2568C66A8, type metadata accessor for Proto_TransparencyProofs, (uint64_t)&unk_2380C7400);
    sub_2380BD730();
    swift_task_dealloc();
    v30 = v29 + *(int *)(v24 + 40);
    sub_238005240(v30, &qword_2568C6010);
    sub_238001DE4(v26, v30, type metadata accessor for Proto_TransparencyProofs);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v28);
  }
  v52 = SecKeyCopyPublicKey(*(SecKeyRef *)(v10 + 448));
  if (!v52)
  {
    v47 = *(_QWORD *)(v10 + 808);
    v48 = *(_QWORD *)(v10 + 800);
    sub_237FFBAB0(*(_QWORD *)(v10 + 784), *(_QWORD *)(v10 + 792));
    sub_237FFBAB0(v48, v47);
    __break(1u);
LABEL_11:
    v49 = *(_QWORD *)(v10 + 808);
    v50 = *(_QWORD *)(v10 + 800);
    sub_237FFBAB0(*(_QWORD *)(v10 + 784), *(_QWORD *)(v10 + 792));
    sub_237FFBAB0(v50, v49);
    __break(1u);
  }
  v31 = SecKeyCopyExternalRepresentation(v52, 0);
  if (!v31)
    goto LABEL_11;
  v32 = v31;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v10 + 768))(*(_QWORD *)(v10 + 720), *(_QWORD *)(v10 + 760), *(_QWORD *)(v10 + 680));
  v53 = v32;
  v33 = sub_2380BD7F0();
  v34 = sub_2380BDF70();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v35 = 136446210;
    sub_2380BD37C();
    v37 = v36;
    sub_238001820(&qword_2568C5DA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_2380BD838();
    __asm { BR              X10 }
  }
  v38 = *(_QWORD *)(v10 + 808);
  v39 = *(_QWORD *)(v10 + 800);
  v40 = *(_QWORD *)(v10 + 792);
  v41 = *(_QWORD *)(v10 + 784);
  v51 = *(void (**)(uint64_t, uint64_t))(v10 + 776);
  v42 = *(_QWORD *)(v10 + 720);
  v43 = *(_QWORD *)(v10 + 680);
  v44 = *(_QWORD *)(v10 + 672);
  v45 = *(_QWORD *)(v10 + 648);
  sub_237FFBAB0(v41, v40);

  sub_237FFBAB0(v41, v40);
  sub_237FFBAB0(v39, v38);
  v51(v42, v43);
  sub_237FFD540(v45, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  sub_237FFD540(v44, type metadata accessor for Proto_AttestationBundle);
  sub_237FFD540(*(_QWORD *)(v10 + 552), (uint64_t (*)(_QWORD))type metadata accessor for TransparencyLogProofs);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_2380464A0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 808);
  v2 = *(_QWORD *)(v0 + 800);
  v3 = *(_QWORD *)(v0 + 792);
  v4 = *(_QWORD *)(v0 + 784);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 648);
  v7 = *(_QWORD *)(v0 + 440);
  sub_237FFBAB0(v4, v3);
  sub_237FFBAB0(v4, v3);
  sub_237FFBAB0(v2, v1);
  sub_237FFD540(v6, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  sub_237FFD540(v7, type metadata accessor for AttestationBundle);
  sub_237FFD540(v5, type metadata accessor for Proto_AttestationBundle);
  v8 = *(void **)(v0 + 824);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 768))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 680));
  v9 = v8;
  v10 = v8;
  v11 = v8;
  v12 = sub_2380BD7F0();
  v13 = sub_2380BDF64();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138543362;
    v16 = v8;
    v17 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 400) = v17;
    sub_2380BDF94();
    *v15 = v17;

    _os_log_impl(&dword_237FF6000, v12, v13, "Attestation failed: %{public}@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v15, -1, -1);
    MEMORY[0x23B82B830](v14, -1, -1);
  }
  else
  {

  }
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 776);
  v19 = *(_QWORD *)(v0 + 712);
  v20 = *(_QWORD *)(v0 + 680);

  v18(v19, v20);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void NodeAttestor.environment.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t NodeAttestor.defaultKeyDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t NodeAttestor.defaultKeyDuration.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NodeAttestor.defaultKeyDuration.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.assetProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1 + 24, a1);
}

uint64_t NodeAttestor.assetProvider.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 24;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23800A4E4(a1, v3);
}

uint64_t (*NodeAttestor.assetProvider.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.transparencyProver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1 + 64, a1);
}

uint64_t NodeAttestor.transparencyProver.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 64;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23800A4E4(a1, v3);
}

uint64_t (*NodeAttestor.transparencyProver.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.requireCertificateChain.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t NodeAttestor.requireCertificateChain.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 104) = result;
  return result;
}

uint64_t (*NodeAttestor.requireCertificateChain.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.requireSealedHashes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t NodeAttestor.requireSealedHashes.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 105) = result;
  return result;
}

uint64_t (*NodeAttestor.requireSealedHashes.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.requireCryptex1.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 106);
}

uint64_t NodeAttestor.requireCryptex1.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 106) = result;
  return result;
}

uint64_t (*NodeAttestor.requireCryptex1.modify())()
{
  return nullsub_1;
}

uint64_t sub_238046984()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9C18);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9C18);
  return sub_2380BD7FC();
}

uint64_t NodeAttestor.sepAttestationImpl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1 + 112, a1);
}

uint64_t NodeAttestor.sepAttestationImpl.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 112;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23800A4E4(a1, v3);
}

uint64_t (*NodeAttestor.sepAttestationImpl.modify())()
{
  return nullsub_1;
}

double NodeAttestor.init(environment:)@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  __int128 v4;
  id v5;
  void *v6;
  int v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13;
  char v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _UNKNOWN **v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _UNKNOWN **v33;

  v3 = *a1;
  v4 = xmmword_2380C1230;
  *(_OWORD *)(a2 + 8) = xmmword_2380C1230;
  *(_QWORD *)(a2 + 136) = &type metadata for SEP.PhysicalDevice;
  *(_QWORD *)(a2 + 144) = &protocol witness table for SEP.PhysicalDevice;
  if (MEMORY[0x24BEBA830])
  {
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBA830]), sel_initWithApplication_, 0);
    v4 = xmmword_2380C1230;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  *(_OWORD *)&v15[8] = v4;
  *((_QWORD *)&v22 + 1) = &type metadata for SEP.PhysicalDevice;
  v23 = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  v7 = byte_2542C9B90;
  v8 = v6;
  if (v7 == 9)
  {
    static Environment.default.getter(&v14);
    LOBYTE(v7) = v14;
  }
  sub_238046EEC(v3, v6, v7, (uint64_t)&v24);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  v20 = v30;
  v21 = v31;
  v22 = v32;
  v23 = v33;
  v16 = v26;
  v17 = v27;
  v18 = v28;
  v19 = v29;
  *(_OWORD *)v15 = v24;
  *(_OWORD *)&v15[16] = v25;
  __swift_destroy_boxed_opaque_existential_1(a2 + 112);
  v9 = v31;
  *(_OWORD *)(a2 + 96) = v30;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v32;
  *(_QWORD *)(a2 + 144) = v33;
  v10 = v27;
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v10;
  v11 = v29;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v11;
  result = *(double *)&v24;
  v13 = v25;
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v13;
  return result;
}

double NodeAttestor.init<A, B>(transparencyProver:assetProvider:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _OWORD v31[9];
  uint64_t v32;

  v28 = a6;
  v27 = a5;
  v12 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a7 + 8) = xmmword_2380C1230;
  *(_QWORD *)(a7 + 136) = &type metadata for SEP.PhysicalDevice;
  *(_QWORD *)(a7 + 144) = &protocol witness table for SEP.PhysicalDevice;
  (*(void (**)(char *, uint64_t))(v17 + 16))(v19, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a4);
  swift_beginAccess();
  v20 = byte_2542C9B90;
  if (byte_2542C9B90 == 9)
  {
    static Environment.default.getter(&v30);
    v20 = v30;
  }
  v29 = v20;
  sub_238047290((uint64_t)v19, (uint64_t)v15, &v29, a3, a4, v27, v28, (uint64_t)v31);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  __swift_destroy_boxed_opaque_existential_1(a7 + 112);
  v21 = v31[7];
  *(_OWORD *)(a7 + 96) = v31[6];
  *(_OWORD *)(a7 + 112) = v21;
  *(_OWORD *)(a7 + 128) = v31[8];
  *(_QWORD *)(a7 + 144) = v32;
  v22 = v31[3];
  *(_OWORD *)(a7 + 32) = v31[2];
  *(_OWORD *)(a7 + 48) = v22;
  v23 = v31[5];
  *(_OWORD *)(a7 + 64) = v31[4];
  *(_OWORD *)(a7 + 80) = v23;
  result = *(double *)v31;
  v25 = v31[1];
  *(_OWORD *)a7 = v31[0];
  *(_OWORD *)(a7 + 16) = v25;
  return result;
}

double NodeAttestor.init<A>(transparencyProver:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[9];
  uint64_t v20;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a4 + 8) = xmmword_2380C1230;
  *(_QWORD *)(a4 + 136) = &type metadata for SEP.PhysicalDevice;
  *(_QWORD *)(a4 + 144) = &protocol witness table for SEP.PhysicalDevice;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  v12 = NodeAttestor.init<A, B>(transparencyProver:assetProvider:)((uint64_t)v10, v11, a2, (uint64_t)&type metadata for DefaultAssetProvider, a3, (uint64_t)&protocol witness table for DefaultAssetProvider, (uint64_t)v19);
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 8))(a1, a2, v12);
  __swift_destroy_boxed_opaque_existential_1(a4 + 112);
  v13 = v19[7];
  *(_OWORD *)(a4 + 96) = v19[6];
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v19[8];
  *(_QWORD *)(a4 + 144) = v20;
  v14 = v19[3];
  *(_OWORD *)(a4 + 32) = v19[2];
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v19[5];
  *(_OWORD *)(a4 + 64) = v19[4];
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)v19;
  v17 = v19[1];
  *(_OWORD *)a4 = v19[0];
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

void sub_238046EEC(char a1@<W0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  id v6;
  char v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  char v11;
  unsigned int v12;

  *(_QWORD *)(a4 + 136) = &type metadata for SEP.PhysicalDevice;
  *(_QWORD *)(a4 + 144) = &protocol witness table for SEP.PhysicalDevice;
  *(_QWORD *)(a4 + 48) = &type metadata for DefaultAssetProvider;
  *(_QWORD *)(a4 + 56) = &protocol witness table for DefaultAssetProvider;
  *(_OWORD *)(a4 + 8) = xmmword_2380C1230;
  *(_QWORD *)(a4 + 88) = &type metadata for SWTransparencyLog;
  *(_QWORD *)(a4 + 96) = &protocol witness table for SWTransparencyLog;
  *(_BYTE *)(a4 + 64) = a1;
  *(_QWORD *)(a4 + 72) = a2;
  *(_BYTE *)a4 = a3;
  v6 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 == 2)
    v8 = (0x78u >> a3) & 1;
  else
    LOBYTE(v8) = v7 & 1;
  *(_BYTE *)(a4 + 104) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9 == 2)
    v10 = (0x78u >> a3) & 1;
  else
    LOBYTE(v10) = v9 & 1;
  *(_BYTE *)(a4 + 105) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11 == 2)
  {
    v12 = (0x78u >> a3) & 1;

  }
  else
  {

    LOBYTE(v12) = v11 & 1;
  }
  *(_BYTE *)(a4 + 106) = v12;
}

uint64_t sub_2380470CC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  char v9;
  uint64_t result;
  unsigned int v11;

  *(_OWORD *)(a3 + 8) = xmmword_2380C1230;
  *(_QWORD *)(a3 + 136) = &type metadata for SEP.PhysicalDevice;
  *(_QWORD *)(a3 + 144) = &protocol witness table for SEP.PhysicalDevice;
  *(_QWORD *)(a3 + 48) = &type metadata for DefaultAssetProvider;
  *(_QWORD *)(a3 + 56) = &protocol witness table for DefaultAssetProvider;
  *(_QWORD *)(a3 + 88) = &type metadata for NopTransparencyLog;
  *(_QWORD *)(a3 + 96) = &protocol witness table for NopTransparencyLog;
  *(_BYTE *)(a3 + 64) = a1;
  *(_BYTE *)a3 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 == 2)
    v6 = (0x78u >> a2) & 1;
  else
    LOBYTE(v6) = v5 & 1;
  *(_BYTE *)(a3 + 104) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 == 2)
    v8 = (0x78u >> a2) & 1;
  else
    LOBYTE(v8) = v7 & 1;
  *(_BYTE *)(a3 + 105) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_238017518();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v9 == 2)
    v11 = (0x78u >> a2) & 1;
  else
    LOBYTE(v11) = v9 & 1;
  *(_BYTE *)(a3 + 106) = v11;
  return result;
}

uint64_t sub_238047290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;

  v14 = *a3;
  *(_OWORD *)(a8 + 8) = xmmword_2380C1230;
  *(_QWORD *)(a8 + 136) = &type metadata for SEP.PhysicalDevice;
  *(_QWORD *)(a8 + 144) = &protocol witness table for SEP.PhysicalDevice;
  *(_QWORD *)(a8 + 48) = a5;
  *(_QWORD *)(a8 + 56) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a8 + 24));
  v16 = *(_QWORD *)(a5 - 8);
  v26 = a2;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(boxed_opaque_existential_1, a2, a5);
  *(_QWORD *)(a8 + 88) = a4;
  *(_QWORD *)(a8 + 96) = a6;
  v17 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a8 + 64));
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v17, a1, a4);
  *(_BYTE *)a8 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19 == 2)
    v20 = (0x78u >> v14) & 1;
  else
    LOBYTE(v20) = v19 & 1;
  *(_BYTE *)(a8 + 104) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21 == 2)
    v22 = (0x78u >> v14) & 1;
  else
    LOBYTE(v22) = v21 & 1;
  *(_BYTE *)(a8 + 105) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = sub_238017518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23 == 2)
    v24 = (0x78u >> v14) & 1;
  else
    LOBYTE(v24) = v23 & 1;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, a5);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, a4);
  *(_BYTE *)(a8 + 106) = v24;
  return result;
}

void sub_2380474BC(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  _QWORD *v79;
  id v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint8_t *v109;
  uint64_t v110;
  char *v111;
  NSObject *v112;
  uint64_t v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  void *v122;
  char v123;
  uint64_t v124;
  char *v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint8_t *v129;
  void *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  NSObject *v151;
  uint64_t v152;
  os_log_type_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint8_t *v159;
  uint64_t v160;
  id v161;
  id v162;
  NSObject *v163;
  os_log_type_t v164;
  uint8_t *v165;
  uint64_t v166;
  _QWORD *v167;
  id v168;
  uint64_t v169;
  _QWORD *v170;
  void *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  void (*v188)(char *, uint64_t, uint64_t);
  _QWORD *v189;
  void (*v190)(_QWORD, _QWORD, _QWORD);
  uint8_t *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197[5];
  uint64_t v198;

  v180 = a8;
  v179 = a7;
  v178 = a6;
  v193 = a5;
  v190 = a3;
  v191 = (uint8_t *)a4;
  v184 = sub_2380BD448();
  v182 = *(_QWORD *)(v184 - 8);
  v11 = MEMORY[0x24BDAC7A8](v184);
  v177 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v181 = (char *)&v172 - v13;
  v14 = sub_2380BD808();
  v194 = *(_QWORD *)(v14 - 8);
  v195 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v185 = (char *)&v172 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v186 = (char *)&v172 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v187 = (char *)&v172 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v173 = (char *)&v172 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v174 = (char *)&v172 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v183 = (char *)&v172 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v175 = (char *)&v172 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v176 = (char *)&v172 - v29;
  v188 = (void (*)(char *, uint64_t, uint64_t))sub_2380BD418();
  v30 = *((_QWORD *)v188 - 1);
  MEMORY[0x24BDAC7A8](v188);
  v32 = (char *)&v172 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = (_QWORD *)sub_2380BD598();
  v33 = *(v189 - 1);
  MEMORY[0x24BDAC7A8](v189);
  v35 = (char *)&v172 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *a1;
  v36 = a1[1];
  v38 = v190;
  sub_237FFBA20(a2, (unint64_t)v190);
  v39 = v36;
  v40 = v193;
  sub_237FFBAB0(v37, v39);
  *a1 = a2;
  a1[1] = (uint64_t)v38;
  (*(void (**)(char *, uint8_t *, _QWORD *))(v30 + 16))(v32, v191, v188);
  sub_2380BD580();
  v41 = *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 36);
  v191 = (uint8_t *)a1;
  v42 = (char *)a1 + v41;
  sub_238005240((uint64_t)a1 + v41, &qword_2568C5E00);
  v43 = v35;
  v44 = v189;
  (*(void (**)(char *, char *, _QWORD *))(v33 + 32))(v42, v43, v189);
  (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v33 + 56))(v42, 0, 1, v44);
  v45 = (_QWORD *)(v40 + 24);
  v46 = *(_QWORD *)(v40 + 48);
  v47 = *(_QWORD *)(v40 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v40 + 24), v46);
  v48 = v192;
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
  if (v48)
  {
    if (qword_2568C4ED8 != -1)
      swift_once();
    v51 = v195;
    v52 = __swift_project_value_buffer(v195, (uint64_t)qword_2568C9C18);
    v53 = v194;
    v54 = v187;
    (*(void (**)(char *, uint64_t, uint64_t))(v194 + 16))(v187, v52, v51);
    v55 = v48;
    v56 = v48;
    v57 = sub_2380BD7F0();
    v58 = sub_2380BDF64();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v59 = 138543362;
      v61 = v48;
      v62 = _swift_stdlib_bridgeErrorToNSError();
      v197[0] = v62;
      sub_2380BDF94();
      *v60 = v62;
      v53 = v194;

      _os_log_impl(&dword_237FF6000, v57, v58, "Unable to fetch ap ticket: %{public}@", v59, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
      swift_arrayDestroy();
      v51 = v195;
      MEMORY[0x23B82B830](v60, -1, -1);
      MEMORY[0x23B82B830](v59, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v51);
LABEL_13:
    swift_willThrow();
    return;
  }
  v63 = v49;
  v64 = v50;
  v65 = (uint64_t)v191;
  sub_237FFBAB0(*((_QWORD *)v191 + 2), *((_QWORD *)v191 + 3));
  *(_QWORD *)(v65 + 16) = v63;
  *(_QWORD *)(v65 + 24) = v64;
  v66 = *(_QWORD *)(v40 + 48);
  v67 = *(_QWORD *)(v40 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v40 + 24), v66);
  v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 16))(v66, v67);
  v70 = v194;
  v69 = v195;
  v83 = v68;
  if (*(_QWORD *)(v68 + 16))
  {
    v84 = (uint64_t)v191;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v84 + 32) = v83;
    v85 = v70;
    v72 = v69;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_2568C4ED8 != -1)
      swift_once();
    v124 = __swift_project_value_buffer(v69, (uint64_t)qword_2568C9C18);
    v125 = v176;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v176, v124, v69);
    v126 = sub_2380BD7F0();
    v127 = sub_2380BDF64();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v128 = 0;
      _os_log_impl(&dword_237FF6000, v126, v127, "Empty provisioning certificate chain", v128, 2u);
      v129 = v128;
      v125 = v176;
      MEMORY[0x23B82B830](v129, -1, -1);
    }

    v85 = v70;
    v72 = v69;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v125, v69);
    if (*(_BYTE *)(v40 + 104) == 1)
    {
      sub_23804A730();
      v130 = (void *)swift_allocError();
      *v131 = 2;
      swift_willThrow();
      v71 = v186;
      if (qword_2568C4ED8 != -1)
        swift_once();
      v72 = v69;
      v73 = __swift_project_value_buffer(v69, (uint64_t)qword_2568C9C18);
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v71, v73, v69);
      v74 = v130;
      v75 = v130;
      v76 = sub_2380BD7F0();
      v77 = sub_2380BDF64();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v79 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v78 = 138543362;
        v80 = v130;
        v81 = _swift_stdlib_bridgeErrorToNSError();
        v197[0] = v81;
        v72 = v195;
        sub_2380BDF94();
        *v79 = v81;
        v70 = v194;

        _os_log_impl(&dword_237FF6000, v76, v77, "Failed to obtain provisioning certificate chain from CFPrefs: %{public}@", v78, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
        swift_arrayDestroy();
        v82 = v79;
        v40 = v193;
        MEMORY[0x23B82B830](v82, -1, -1);
        MEMORY[0x23B82B830](v78, -1, -1);
      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v186, v72);
      if ((*(_BYTE *)(v40 + 104) & 1) != 0)
        goto LABEL_13;
      v85 = v70;

    }
  }
  v86 = *(_QWORD *)(v40 + 48);
  v87 = *(_QWORD *)(v40 + 56);
  __swift_project_boxed_opaque_existential_1(v45, v86);
  v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 24))(v86, v87);
  v192 = 0;
  v198 = v88;
  v197[0] = v178;
  v197[1] = v179;
  v197[2] = v180;
  v197[3] = a9;
  sub_2380487E4((uint64_t)v197, &v198);
  if (qword_2568C4EA8 != -1)
    swift_once();
  v89 = v184;
  v90 = __swift_project_value_buffer(v184, (uint64_t)qword_2568C9B98);
  v91 = (uint64_t)v181;
  v92 = v182;
  v93 = *(void (**)(_QWORD))(v182 + 16);
  v187 = (char *)v90;
  v190 = (void (*)(_QWORD, _QWORD, _QWORD))v93;
  v93(v181);
  v94 = v198;
  v95 = v183;
  if (*(_QWORD *)(v198 + 16) && (v96 = sub_23800DF54(v91), (v97 & 1) != 0))
  {
    v98 = *(_QWORD *)(*(_QWORD *)(v94 + 56) + 8 * v96);
    v99 = *(_QWORD **)(v92 + 8);
    swift_bridgeObjectRetain();
    v189 = v99;
    ((void (*)(uint64_t, uint64_t))v99)(v91, v89);
    if (qword_2568C4ED8 != -1)
      swift_once();
    v100 = __swift_project_value_buffer(v72, (uint64_t)qword_2568C9C18);
    v188 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
    v188(v95, v100, v72);
    v101 = v95;
    v102 = sub_2380BD7F0();
    v103 = sub_2380BDF70();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc();
      v105 = swift_slowAlloc();
      v197[0] = v105;
      *(_DWORD *)v104 = 136446210;
      v186 = (char *)(v104 + 4);
      sub_238001820(&qword_2568C66C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v106 = sub_2380BE1A4();
      v196 = sub_238013968(v106, v107, v197);
      v72 = v195;
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237FF6000, v102, v103, "Reading cryptexes from %{public}s", v104, 0xCu);
      swift_arrayDestroy();
      v108 = v105;
      v89 = v184;
      MEMORY[0x23B82B830](v108, -1, -1);
      v109 = v104;
      v85 = v194;
      MEMORY[0x23B82B830](v109, -1, -1);

      v186 = *(char **)(v85 + 8);
      ((void (*)(char *, uint64_t))v186)(v183, v72);
    }
    else
    {

      v186 = *(char **)(v85 + 8);
      ((void (*)(char *, uint64_t))v186)(v101, v72);
    }
    v119 = v185;
    sub_238049304((uint64_t)v191, v98);
    swift_bridgeObjectRelease();
    v120 = (uint64_t)v177;
  }
  else
  {
    v189 = *(_QWORD **)(v92 + 8);
    ((void (*)(uint64_t, uint64_t))v189)(v91, v89);
    if (qword_2568C4ED8 != -1)
      swift_once();
    v110 = __swift_project_value_buffer(v72, (uint64_t)qword_2568C9C18);
    v111 = v175;
    v188 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
    v188(v175, v110, v72);
    v112 = sub_2380BD7F0();
    v113 = v85;
    v114 = sub_2380BDF64();
    if (os_log_type_enabled(v112, v114))
    {
      v115 = (uint8_t *)swift_slowAlloc();
      v116 = swift_slowAlloc();
      v197[0] = v116;
      *(_DWORD *)v115 = 136446210;
      sub_238001820(&qword_2568C66C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v117 = sub_2380BE1A4();
      v196 = sub_238013968(v117, v118, v197);
      v89 = v184;
      v72 = v195;
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237FF6000, v112, v114, "Failed to read cryptexes from %{public}s", v115, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v116, -1, -1);
      MEMORY[0x23B82B830](v115, -1, -1);
    }

    v186 = *(char **)(v113 + 8);
    ((void (*)(char *, uint64_t))v186)(v111, v72);
    v85 = v113;
    v119 = v185;
    v40 = v193;
    v120 = (uint64_t)v177;
    if (*(_BYTE *)(v193 + 105) == 1)
    {
      sub_23804A730();
      v122 = (void *)swift_allocError();
      v123 = 3;
      goto LABEL_55;
    }
  }
  if (qword_2568C4EA0 != -1)
    swift_once();
  v132 = __swift_project_value_buffer(v89, (uint64_t)qword_2568C9B80);
  v190(v120, v132, v89);
  v133 = v198;
  if (*(_QWORD *)(v198 + 16))
  {
    v134 = sub_23800DF54(v120);
    if ((v135 & 1) != 0)
    {
      v136 = v120;
      v137 = *(_QWORD *)(*(_QWORD *)(v133 + 56) + 8 * v134);
      swift_bridgeObjectRetain();
      ((void (*)(uint64_t, uint64_t))v189)(v136, v89);
      if (qword_2568C4ED8 != -1)
        swift_once();
      v138 = __swift_project_value_buffer(v72, (uint64_t)qword_2568C9C18);
      v139 = v173;
      v188(v173, v138, v72);
      swift_bridgeObjectRetain_n();
      v140 = sub_2380BD7F0();
      v141 = sub_2380BDF70();
      if (os_log_type_enabled(v140, v141))
      {
        v142 = (uint8_t *)swift_slowAlloc();
        v143 = swift_slowAlloc();
        v197[0] = v143;
        *(_DWORD *)v142 = 136446210;
        v190 = (void (*)(_QWORD, _QWORD, _QWORD))(v142 + 4);
        v144 = swift_bridgeObjectRetain();
        v145 = MEMORY[0x23B82AD38](v144, &type metadata for SEP.SealedHash.Entry);
        v147 = v146;
        swift_bridgeObjectRelease();
        v196 = sub_238013968(v145, v147, v197);
        v72 = v195;
        sub_2380BDF94();
        swift_bridgeObjectRelease_n();
        v119 = v185;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_237FF6000, v140, v141, "Reading secure config from %{public}s", v142, 0xCu);
        swift_arrayDestroy();
        v148 = v143;
        v85 = v194;
        MEMORY[0x23B82B830](v148, -1, -1);
        MEMORY[0x23B82B830](v142, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      ((void (*)(char *, uint64_t))v186)(v139, v72);
      v171 = v192;
      v40 = v193;
      sub_238049674((uint64_t)v191, v137);
      v122 = v171;
      if (v171)
      {
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      swift_bridgeObjectRelease();
LABEL_67:
      swift_bridgeObjectRelease();
      return;
    }
  }
  ((void (*)(uint64_t, uint64_t))v189)(v120, v89);
  if (qword_2568C4ED8 != -1)
    swift_once();
  v149 = __swift_project_value_buffer(v72, (uint64_t)qword_2568C9C18);
  v150 = v174;
  v188(v174, v149, v72);
  v151 = sub_2380BD7F0();
  v152 = v72;
  v153 = sub_2380BDF64();
  if (os_log_type_enabled(v151, v153))
  {
    v154 = (uint8_t *)swift_slowAlloc();
    v155 = swift_slowAlloc();
    v197[0] = v155;
    *(_DWORD *)v154 = 136446210;
    v191 = v154 + 4;
    sub_238001820(&qword_2568C66C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v156 = sub_2380BE1A4();
    v196 = sub_238013968(v156, v157, v197);
    v119 = v185;
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237FF6000, v151, v153, "Failed to read secure config from %{public}s", v154, 0xCu);
    swift_arrayDestroy();
    v158 = v155;
    v85 = v194;
    MEMORY[0x23B82B830](v158, -1, -1);
    v159 = v154;
    v40 = v193;
    MEMORY[0x23B82B830](v159, -1, -1);
  }

  ((void (*)(char *, uint64_t))v186)(v150, v152);
  v72 = v152;
  if (*(_BYTE *)(v40 + 105) != 1)
    goto LABEL_67;
  sub_23804A730();
  v122 = (void *)swift_allocError();
  v123 = 4;
LABEL_55:
  *v121 = v123;
  swift_willThrow();
LABEL_56:
  swift_bridgeObjectRelease();
  v192 = 0;
  if (qword_2568C4ED8 != -1)
    swift_once();
  v160 = __swift_project_value_buffer(v72, (uint64_t)qword_2568C9C18);
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v119, v160, v72);
  v161 = v122;
  v162 = v122;
  v163 = sub_2380BD7F0();
  v164 = sub_2380BDF64();
  if (os_log_type_enabled(v163, v164))
  {
    v165 = (uint8_t *)swift_slowAlloc();
    v166 = v40;
    v167 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v165 = 138543362;
    v168 = v122;
    v169 = _swift_stdlib_bridgeErrorToNSError();
    v197[0] = v169;
    v85 = v194;
    v72 = v195;
    sub_2380BDF94();
    *v167 = v169;
    v119 = v185;

    _os_log_impl(&dword_237FF6000, v163, v164, "Failed to read sealed hashes: %{public}@", v165, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    v170 = v167;
    v40 = v166;
    MEMORY[0x23B82B830](v170, -1, -1);
    MEMORY[0x23B82B830](v165, -1, -1);
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v85 + 8))(v119, v72);
  if ((*(_BYTE *)(v40 + 105) & 1) != 0)
    goto LABEL_13;

}

uint64_t sub_2380487E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v36[17];
  _QWORD *v37;
  int64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[22];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66F0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SEP.SealedHash(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2380BD448();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v36[11] = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v36[12] = (char *)v36 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v36[10] = (char *)v36 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v36 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6388);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 24);
  v36[14] = a2;
  v25 = *a2;
  v26 = *(_QWORD *)(*a2 + 64);
  v37 = (_QWORD *)(*a2 + 64);
  v27 = 1 << *(_BYTE *)(v25 + 32);
  v38 = (unint64_t)(v27 + 63) >> 6;
  v28 = v24 >> 62;
  if (v27 < 64)
    v29 = ~(-1 << v27);
  else
    v29 = -1;
  v30 = v29 & v26;
  v40 = v24;
  v36[15] = v24 & 0x3FFFFFFFFFFFFFFFLL;
  v41 = (int)v23;
  v47 = v23;
  v36[13] = v23 >> 32;
  v46 = v25;
  swift_bridgeObjectRetain();
  v45 = v28;
  v36[16] = v6;
  v39 = v9;
  v42 = v19;
  if (v30)
  {
    v31 = __clz(__rbit64(v30));
    goto LABEL_20;
  }
  v32 = 1;
  if (v38 <= 1)
    goto LABEL_26;
  v33 = v37[1];
  if (!v33)
  {
    v34 = 2;
    if (v38 > 2)
    {
      v33 = v37[2];
      if (v33)
        goto LABEL_18;
      v34 = 3;
      if (v38 <= 3)
        goto LABEL_26;
      v33 = v37[3];
      if (v33)
        goto LABEL_18;
      v34 = 4;
      if (v38 <= 4)
        goto LABEL_26;
      v33 = v37[4];
      if (v33)
        goto LABEL_18;
      v34 = 5;
      if (v38 <= 5)
        goto LABEL_26;
      v33 = v37[5];
      if (v33)
      {
LABEL_18:
        v32 = v34;
        goto LABEL_19;
      }
      v34 = 6;
      if (v38 > 6)
      {
        v33 = v37[6];
        if (v33)
          goto LABEL_18;
        while (1)
        {
          v32 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
            __break(1u);
            JUMPOUT(0x2380492CCLL);
          }
          if (v32 >= v38)
            break;
          v33 = v37[v32];
          ++v34;
          if (v33)
            goto LABEL_19;
        }
      }
    }
LABEL_26:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v22, 1, 1, v10);
    return swift_release();
  }
LABEL_19:
  v31 = __clz(__rbit64(v33)) + (v32 << 6);
LABEL_20:
  (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v22, *(_QWORD *)(v46 + 48) + *(_QWORD *)(v11 + 72) * v31, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v22, 1, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v22, v10);
    v51 = 0u;
    memset(v52, 0, sizeof(v52));
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    __asm { BR              X8 }
  }
  return swift_release();
}

uint64_t sub_238049304(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;

  v31 = a1;
  v3 = type metadata accessor for Proto_SealedHash(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_SealedHashLedger(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (unint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66C8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  result = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v26 - v18;
  if (*(_QWORD *)(a2 + 16))
  {
    v27 = v17;
    v30 = v6;
    v28 = sub_2380BD430();
    v29 = v20;
    MEMORY[0x24BDAC7A8](v28);
    *(&v26 - 2) = a2;
    sub_238001820(&qword_2568C66D0, type metadata accessor for Proto_SealedHash, (uint64_t)&unk_2380C7098);
    sub_2380BD730();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v19, 0, 1, v3);
    v21 = v31 + *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 32);
    sub_23804AFE4(v21, (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      *v13 = sub_23800C00C(MEMORY[0x24BEE4AF8]);
      sub_2380BD5BC();
      sub_238005240((uint64_t)v9, &qword_2568C6418);
    }
    else
    {
      sub_238001DE4((uint64_t)v9, (uint64_t)v13, type metadata accessor for Proto_SealedHashLedger);
    }
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v19, 1, v3);
    v23 = (uint64_t)v30;
    if (v22 == 1)
    {
      sub_238005240((uint64_t)v19, &qword_2568C66C8);
      v24 = v27;
      sub_23804A840(v28, v29, v27);
      swift_bridgeObjectRelease();
      sub_238005240(v24, &qword_2568C66C8);
    }
    else
    {
      sub_238001DE4((uint64_t)v19, (uint64_t)v30, type metadata accessor for Proto_SealedHash);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v32 = *v13;
      *v13 = 0x8000000000000000;
      sub_238083FC4(v23, v28, v29, isUniquelyReferenced_nonNull_native);
      *v13 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_238005240(v21, &qword_2568C6418);
    sub_238001DE4((uint64_t)v13, v21, type metadata accessor for Proto_SealedHashLedger);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  }
  return result;
}

uint64_t sub_238049674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v42 = a1;
  v4 = type metadata accessor for Proto_SealedHash(0);
  v43 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v41 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_SealedHashLedger(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (unint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66C8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  result = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  if (*(_QWORD *)(a2 + 16))
  {
    v39 = v12;
    v40 = v10;
    v37 = v16;
    v38 = v9;
    if (qword_2568C4EA0 != -1)
      swift_once();
    v19 = sub_2380BD448();
    __swift_project_value_buffer(v19, (uint64_t)qword_2568C9B80);
    v20 = sub_2380BD430();
    v22 = v21;
    MEMORY[0x24BDAC7A8](v20);
    *(&v36 - 2) = a2;
    sub_238001820(&qword_2568C66D0, type metadata accessor for Proto_SealedHash, (uint64_t)&unk_2380C7098);
    sub_2380BD730();
    if (v2)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      v36 = 0;
      v23 = v43;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v18, 0, 1, v4);
      v24 = v42 + *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 32);
      sub_23804AFE4(v24, (uint64_t)v8);
      v25 = v38;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v8, 1, v38) == 1)
      {
        v26 = sub_23800C00C(MEMORY[0x24BEE4AF8]);
        *v39 = v26;
        sub_2380BD5BC();
        sub_238005240((uint64_t)v8, &qword_2568C6418);
      }
      else
      {
        sub_238001DE4((uint64_t)v8, (uint64_t)v39, type metadata accessor for Proto_SealedHashLedger);
      }
      v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v4);
      v28 = v22;
      if (v27 == 1)
      {
        sub_238005240((uint64_t)v18, &qword_2568C66C8);
        v29 = v37;
        v30 = v20;
        v31 = v39;
        sub_23804A840(v30, v28, v37);
        swift_bridgeObjectRelease();
        sub_238005240(v29, &qword_2568C66C8);
      }
      else
      {
        v32 = v41;
        sub_238001DE4((uint64_t)v18, v41, type metadata accessor for Proto_SealedHash);
        v33 = v39;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44 = *v33;
        *v33 = 0x8000000000000000;
        v35 = v20;
        v31 = v33;
        sub_238083FC4(v32, v35, v28, isUniquelyReferenced_nonNull_native);
        *v33 = v44;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_238005240(v24, &qword_2568C6418);
      sub_238001DE4((uint64_t)v31, v24, type metadata accessor for Proto_SealedHashLedger);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v24, 0, 1, v25);
    }
  }
  return result;
}

uint64_t sub_238049A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ATLogProofs(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_238013570(a2, (uint64_t)v7, type metadata accessor for ATLogProofs);
  v8 = a1 + *(int *)(type metadata accessor for Proto_TransparencyProofs(0) + 20);
  sub_238005240(v8, qword_2568C5450);
  sub_238001DE4((uint64_t)v7, v8, type metadata accessor for ATLogProofs);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t sub_238049B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_238013814;
  return NodeAttestor.attest(key:expiration:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t sub_238049BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Proto_SealedHash.Entry(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = a1;
    v10 = a2 + 32;
    *(_QWORD *)v9 = sub_2380A0D24();
    v19 = v9;
    *(_BYTE *)(v9 + 8) = v11 & 1;
    v22 = MEMORY[0x24BEE4AF8];
    v12 = sub_238075DD0(0, v8, 0);
    do
    {
      v13 = *(_OWORD *)(v10 + 16);
      v20[0] = *(_OWORD *)v10;
      v20[1] = v13;
      v20[2] = *(_OWORD *)(v10 + 32);
      v21 = *(_QWORD *)(v10 + 48);
      MEMORY[0x24BDAC7A8](v12);
      *(&v18 - 2) = (uint64_t)v20;
      sub_23804B044(v20, (void (*)(_QWORD, _QWORD))sub_237FFBA20, (void (*)(uint64_t, uint64_t))sub_238009148);
      sub_238001820(&qword_2568C66D8, type metadata accessor for Proto_SealedHash.Entry, (uint64_t)&unk_2380C6F30);
      sub_2380BD730();
      sub_23804B044(v20, (void (*)(_QWORD, _QWORD))sub_237FFBAB0, (void (*)(uint64_t, uint64_t))sub_238008CF0);
      v14 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_238075DD0(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v22;
      }
      v16 = *(_QWORD *)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_238075DD0(v15 > 1, v16 + 1, 1);
        v14 = v22;
      }
      *(_QWORD *)(v14 + 16) = v16 + 1;
      v12 = sub_238001DE4((uint64_t)v7, v14+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v16, type metadata accessor for Proto_SealedHash.Entry);
      v10 += 56;
      --v8;
    }
    while (v8);
    a1 = v19;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    v14 = MEMORY[0x24BEE4AF8];
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_238049E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v4 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Cryptex.Salt(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(a2 + 32);
  *(_DWORD *)a1 = v9;
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  sub_237FFBA20(*(_QWORD *)a2, v11);
  v14 = sub_237FFBAB0(v13, v12);
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  if ((v9 & 4) == 0)
    goto LABEL_6;
  sub_237FFBA20(v10, v11);
  if (qword_2568C4E98 != -1)
    swift_once();
  v15 = swift_bridgeObjectRetain();
  sub_238076FC4(v15, v10, v11);
  v17 = v16;
  swift_bridgeObjectRelease();
  v14 = sub_237FFBAB0(v10, v11);
  if ((v17 & 1) != 0)
  {
    sub_2380BD5BC();
    v18 = a1 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
    sub_238005240(v18, &qword_2568C56E8);
    sub_238001DE4((uint64_t)v8, v18, type metadata accessor for Proto_Cryptex.Salt);
    v19 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 0, 1, v19);
  }
  else
  {
LABEL_6:
    MEMORY[0x24BDAC7A8](v14);
    *(&v24 - 2) = a2;
    sub_238001820(&qword_2568C66E0, type metadata accessor for Proto_Cryptex, (uint64_t)&unk_2380C6DA0);
    v21 = (uint64_t)v25;
    sub_2380BD730();
    v22 = a1 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
    sub_238005240(v22, &qword_2568C56E8);
    sub_238001DE4(v21, v22, type metadata accessor for Proto_Cryptex);
    v23 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
}

uint64_t *sub_23804A0C8(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2 >> 60 != 15)
  {
    v3 = result;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *result;
    v6 = result[1];
    sub_237FFBA20(v4, *(_QWORD *)(a2 + 24));
    result = (uint64_t *)sub_237FFBAB0(v5, v6);
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t sub_23804A130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v5 = type metadata accessor for Proto_SealedHash.Entry(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = a2 + 32;
    *(_QWORD *)a1 = sub_2380A0D24();
    v19 = a1;
    *(_BYTE *)(a1 + 8) = v11 & 1;
    v22 = MEMORY[0x24BEE4AF8];
    v12 = sub_238075DD0(0, v9, 0);
    while (1)
    {
      v13 = *(_OWORD *)(v10 + 16);
      v20[0] = *(_OWORD *)v10;
      v20[1] = v13;
      v20[2] = *(_OWORD *)(v10 + 32);
      v21 = *(_QWORD *)(v10 + 48);
      MEMORY[0x24BDAC7A8](v12);
      *(&v18 - 2) = (uint64_t)v20;
      sub_23804B044(v20, (void (*)(_QWORD, _QWORD))sub_237FFBA20, (void (*)(uint64_t, uint64_t))sub_238009148);
      sub_238001820(&qword_2568C66D8, type metadata accessor for Proto_SealedHash.Entry, (uint64_t)&unk_2380C6F30);
      sub_2380BD730();
      sub_23804B044(v20, (void (*)(_QWORD, _QWORD))sub_237FFBAB0, (void (*)(uint64_t, uint64_t))sub_238008CF0);
      v14 = v22;
      if (v2)
        return swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_238075DD0(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v22;
      }
      v16 = *(_QWORD *)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_238075DD0(v15 > 1, v16 + 1, 1);
        v14 = v22;
      }
      *(_QWORD *)(v14 + 16) = v16 + 1;
      v12 = sub_238001DE4((uint64_t)v8, v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, type metadata accessor for Proto_SealedHash.Entry);
      v10 += 56;
      if (!--v9)
      {
        a1 = v19;
        goto LABEL_12;
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    v14 = MEMORY[0x24BEE4AF8];
LABEL_12:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 16) = v14;
  }
  return result;
}

uint64_t sub_23804A390(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  __int128 *v14;
  __int128 v15;

  v5 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_DWORD *)a1 = *((unsigned __int8 *)a2 + 32);
  v15 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  sub_23804B0D8((uint64_t)&v15);
  sub_237FFBAB0(v8, v9);
  *(_OWORD *)(a1 + 8) = v15;
  v14 = a2;
  sub_238001820(&qword_2568C66E8, type metadata accessor for Proto_SecureConfig, (uint64_t)&unk_2380C6AD0);
  result = sub_2380BD730();
  if (!v2)
  {
    v11 = a1 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
    sub_238005240(v11, &qword_2568C56E8);
    sub_238001DE4((uint64_t)v7, v11, type metadata accessor for Proto_SecureConfig);
    v12 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  }
  return result;
}

uint64_t sub_23804A4FC(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2 >> 60 != 15)
  {
    v3 = (uint64_t *)result;
    v4 = *(_QWORD *)(a2 + 16);
    sub_237FFBA20(v4, *(_QWORD *)(a2 + 24));
    sub_237FFBA20(v4, v2);
    SecureConfig.init(from:)(v4, v2, (uint64_t)v13);
    v5 = v14;
    if (v14)
    {
      v7 = v15;
      v6 = v16;
      v9 = v13[0];
      v8 = v13[1];
      sub_238008CF0(v4, v2);
      v10 = *v3;
      v11 = v3[1];
      sub_237FFBA20(v9, v8);
      sub_237FFBAB0(v10, v11);
      *v3 = v9;
      v3[1] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = sub_23804B11C(v9, v8, v5, v7, v6);
      v3[2] = v5;
    }
    else
    {
      sub_23804A730();
      swift_allocError();
      *v12 = 1;
      swift_willThrow();
      return sub_238008CF0(v4, v2);
    }
  }
  return result;
}

BOOL static NodeAttestor.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NodeAttestor.Error.hash(into:)()
{
  return sub_2380BE240();
}

uint64_t NodeAttestor.Error.hashValue.getter()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t sub_23804A6B0(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  return a1;
}

void sub_23804A6E8(uint64_t *a1)
{
  uint64_t v1;

  sub_2380474BC(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_23804A718(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_23804A730()
{
  unint64_t result;

  result = qword_2568C66A0;
  if (!qword_2568C66A0)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for NodeAttestor.Error, &type metadata for NodeAttestor.Error);
    atomic_store(result, (unint64_t *)&qword_2568C66A0);
  }
  return result;
}

double sub_23804A774@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  double result;
  uint64_t v14;

  v6 = v5;
  v8 = sub_23800DEDC(a1, a2, a3, a4);
  if ((v9 & 1) != 0)
  {
    v10 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v5;
    v14 = *v6;
    *v6 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_238089014();
      v12 = v14;
    }
    swift_bridgeObjectRelease();
    sub_23800ED10((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v10), a5);
    sub_23804A970(v10, v12);
    *v6 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t sub_23804A840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_23800DCFC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_2380898CC();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for Proto_SealedHash(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_238001DE4(v12 + *(_QWORD *)(v14 + 72) * v8, a3, type metadata accessor for Proto_SealedHash);
    sub_23804AB2C(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Proto_SealedHash(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

unint64_t sub_23804A970(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2380BE018();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2380BE234();
        sub_2380BE240();
        result = sub_2380BE264();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 32 * v3);
          v13 = (_OWORD *)(v11 + 32 * v6);
          if (v3 != v6 || v12 >= v13 + 2)
          {
            v14 = v13[1];
            *v12 = *v13;
            v12[1] = v14;
          }
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_23804AB2C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2380BE018();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_2380BE234();
        swift_bridgeObjectRetain();
        sub_2380BDD78();
        v9 = sub_2380BE264();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Proto_SealedHash(0) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_23804AD28(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_2380BD208();
  if (!result || (result = sub_2380BD22C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_2380BD220();
      sub_2380BD988();
      sub_238001820(&qword_2568C5DA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_2380BD814();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_23804ADEC(_QWORD *a1)
{
  return sub_238026A00(0, a1[2], 0, a1);
}

uint64_t sub_23804AE00(uint64_t a1)
{
  uint64_t v1;

  return sub_238049A68(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_23804AE1C()
{
  unint64_t result;

  result = qword_2568C66B8;
  if (!qword_2568C66B8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for NodeAttestor.Error, &type metadata for NodeAttestor.Error);
    atomic_store(result, (unint64_t *)&qword_2568C66B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeAttestor()
{
  return &type metadata for NodeAttestor;
}

uint64_t getEnumTagSinglePayload for NodeAttestor.Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeAttestor.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23804AF4C + 4 * byte_2380C12A5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23804AF80 + 4 * byte_2380C12A0[v4]))();
}

uint64_t sub_23804AF80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23804AF88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23804AF90);
  return result;
}

uint64_t sub_23804AF9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23804AFA4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23804AFA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23804AFB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NodeAttestor.Error()
{
  return &type metadata for NodeAttestor.Error;
}

uint64_t sub_23804AFCC(uint64_t a1)
{
  uint64_t v1;

  return sub_238049BC4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23804AFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23804B02C(uint64_t a1)
{
  uint64_t v1;

  return sub_238049E18(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *sub_23804B044(_QWORD *a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1[2];
  v6 = a1[3];
  a2(*a1, a1[1]);
  a3(v5, v6);
  return a1;
}

uint64_t *sub_23804B090(uint64_t *a1)
{
  uint64_t v1;

  return sub_23804A0C8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23804B0A8(uint64_t a1)
{
  uint64_t v1;

  return sub_23804A130(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23804B0C0(uint64_t a1)
{
  uint64_t v1;

  return sub_23804A390(a1, *(__int128 **)(v1 + 16));
}

uint64_t sub_23804B0D8(uint64_t a1)
{
  sub_237FFBA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_23804B104(uint64_t a1)
{
  uint64_t v1;

  return sub_23804A4FC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23804B11C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3)
  {
    sub_237FFBAB0(result, a2);
    swift_bridgeObjectRelease();
    return sub_237FFBAB0(a4, a5);
  }
  return result;
}

uint64_t IORegistryEntry.deinit()
{
  uint64_t v0;

  IOObjectRelease(*(_DWORD *)(v0 + 16));
  return v0;
}

uint64_t IORegistryEntry.__deallocating_deinit()
{
  uint64_t v0;

  IOObjectRelease(*(_DWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t IORegistryEntry.property<A>(key:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  io_registry_entry_t v5;
  __CFString *v6;
  CFTypeRef CFProperty;
  uint64_t v8;
  int v10;

  v5 = *(_DWORD *)(v2 + 16);
  v6 = (__CFString *)sub_2380BDCF4();
  CFProperty = IORegistryEntryCreateCFProperty(v5, v6, (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);

  if (!CFProperty)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  v8 = MEMORY[0x24BDCDDE8];
  if (!swift_dynamicCast())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  if (a1 != v8)
    __asm { BR              X11 }
  v10 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, v10 ^ 1u, 1, v8);
}

uint64_t sub_23804B3D8()
{
  return sub_2380BDE50();
}

uint64_t type metadata accessor for IORegistryEntry()
{
  return objc_opt_self();
}

uint64_t method lookup function for IORegistryEntry()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23804B440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8[27] = a7;
  v8[28] = v7;
  v8[25] = a5;
  v8[26] = a6;
  v8[23] = a3;
  v8[24] = a4;
  v8[21] = a1;
  v8[22] = a2;
  type metadata accessor for AttestationBundle(0);
  v8[29] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  v8[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
  v8[31] = swift_task_alloc();
  v9 = sub_2380BD598();
  v8[32] = v9;
  v8[33] = *(_QWORD *)(v9 - 8);
  v8[34] = swift_task_alloc();
  v10 = sub_2380BD418();
  v8[35] = v10;
  v8[36] = *(_QWORD *)(v10 - 8);
  v8[37] = swift_task_alloc();
  v8[38] = swift_task_alloc();
  v8[39] = swift_task_alloc();
  v8[40] = swift_task_alloc();
  v8[41] = swift_task_alloc();
  v11 = sub_2380BD844();
  v8[42] = v11;
  v8[43] = *(_QWORD *)(v11 - 8);
  v8[44] = swift_task_alloc();
  v8[45] = type metadata accessor for NodeValidator();
  v8[46] = swift_task_alloc();
  v12 = sub_2380BD808();
  v8[47] = v12;
  v8[48] = *(_QWORD *)(v12 - 8);
  v8[49] = swift_task_alloc();
  v8[50] = swift_task_alloc();
  v8[51] = swift_task_alloc();
  v8[52] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23804B638()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;

  if (qword_2568C4E68 != -1)
    swift_once();
  v1 = v0[52];
  v2 = v0[47];
  v3 = v0[48];
  v4 = v0[46];
  v5 = v0[28];
  v6 = __swift_project_value_buffer(v2, (uint64_t)qword_2568C9B30);
  v0[53] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[54] = v7;
  v7(v1, v6, v2);
  sub_238013570(v5, v4, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
  v8 = sub_2380BD7F0();
  v9 = sub_2380BDF70();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = v0[46];
    v11 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v11 = 136446210;
    __asm { BR              X10 }
  }
  v12 = v0[52];
  v13 = v0[47];
  v14 = v0[48];
  sub_23804D170(v0[46]);

  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v0[55] = v15;
  sub_2380377AC();
  v0[16] = sub_23800EBF0(MEMORY[0x24BEE4AF8]);
  v16 = dword_2568C7E38;
  v17 = (_QWORD *)swift_task_alloc();
  v0[56] = v17;
  *v17 = v0;
  v17[1] = sub_23804B998;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_2568C7E38 + v16))(v0[24], (uint64_t)(v0 + 16));
}

uint64_t sub_23804B998()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 456) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23804BA40()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v48;
  NSObject *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  NSObject *v80;
  os_log_type_t v81;
  BOOL v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *log;
  os_log_type_t type;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  void (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v1 = v0[16];
  if (*(_QWORD *)(v1 + 16)
    && (v2 = sub_23800DEDC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x80000002380C7EE0), (v3 & 1) != 0)&& (sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)(v0 + 6)), __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28), (swift_dynamicCast() & 1) != 0))
  {
    v5 = v0[2];
    v4 = v0[3];
    v7 = v0[4];
    v6 = v0[5];
  }
  else
  {
    v8 = (uint64_t *)v0[24];
    v5 = *v8;
    v4 = v8[1];
    v9 = *MEMORY[0x24BE078F8];
    sub_237FFBA20(*v8, v4);
    *(_QWORD *)&v145 = sub_23800A21C(v9);
    *((_QWORD *)&v145 + 1) = v10;
    sub_23801B708((uint64_t)&v145);
    v144 = v145;
    sub_237FFBA20(v5, v4);
    sub_23801B9A0((uint64_t)&v144);
    LODWORD(v9) = v11;
    sub_237FFBAB0(v5, v4);
    if ((_DWORD)v9)
    {
      sub_23801BD6C();
      v12 = (void *)swift_allocError();
      *v13 = 0;
      swift_willThrow();
      sub_237FFBAB0(v5, v4);
      v15 = *((_QWORD *)&v144 + 1);
      v14 = v144;
LABEL_15:
      sub_237FFBAB0(v14, v15);
LABEL_17:
      v31 = v0[53];
      v32 = (void (*)(uint64_t, uint64_t, uint64_t))v0[54];
      v33 = v0[49];
      v34 = v0[47];
      swift_bridgeObjectRelease();
      v32(v33, v31, v34);
      v35 = v12;
      v36 = v12;
      v37 = sub_2380BD7F0();
      v38 = sub_2380BDF64();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v39 = 138543362;
        v41 = v12;
        v42 = _swift_stdlib_bridgeErrorToNSError();
        v0[19] = v42;
        sub_2380BDF94();
        *v40 = v42;

        _os_log_impl(&dword_237FF6000, v37, v38, "AttestationBundle validation failed: %{public}@", v39, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v40, -1, -1);
        MEMORY[0x23B82B830](v39, -1, -1);
      }
      else
      {

      }
      v43 = (void (*)(uint64_t, uint64_t))v0[55];
      v44 = v143[49];
      v45 = v143[47];

      v43(v44, v45);
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v46 = (uint64_t (*)(void))v143[1];
      return v46();
    }
    v6 = *((_QWORD *)&v144 + 1);
    v7 = v144;
  }
  v16 = v0[26];
  if (v16 >> 60 != 15)
  {
    v17 = v0[25];
    v148 = 0;
    *(_QWORD *)&v144 = 0;
    sub_238009148(v17, v16);
    sub_237FFBA20(v5, v4);
    sub_237FFBA20(v7, v6);
    sub_238034DF4(v5, v4, v7, v6);
    sub_237FFBAB0(v5, v4);
    v141 = v6;
    sub_237FFBAB0(v7, v6);
    v18 = v145;
    v20 = v0[25];
    v19 = v0[26];
    if (*((_QWORD *)&v145 + 1) >> 60 == 15)
    {
      sub_237FFBA20(v0[25], v0[26]);
      sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
      sub_238008CF0(v20, v19);
LABEL_16:
      v28 = v0[25];
      v27 = v0[26];
      type metadata accessor for CloudAttestationError(0);
      sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
      v29 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_237FFBAB0(v5, v4);
      v30 = v7;
      v12 = (void *)v29;
      sub_237FFBAB0(v30, v141);
      sub_238008CF0(v28, v27);
      goto LABEL_17;
    }
    sub_238009148(v20, v19);
    sub_238009148(v18, *((unint64_t *)&v18 + 1));
    sub_238008ED0(v18, *((uint64_t *)&v18 + 1));
    v22 = v21;
    sub_238008CF0(v20, v19);
    sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
    sub_238008CF0(v18, *((unint64_t *)&v18 + 1));
    if ((v22 & 1) == 0)
      goto LABEL_16;
    sub_238008CF0(v0[25], v0[26]);
  }
  *(_QWORD *)&v145 = v5;
  *((_QWORD *)&v145 + 1) = v4;
  v146 = v7;
  v147 = v6;
  v23 = SEP.Attestation.publicKeyData.getter(&v144);
  v24 = *((_QWORD *)&v144 + 1);
  if ((~*((_QWORD *)&v144 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
    v25 = swift_allocError();
    *v26 = 0xD000000000000017;
    v26[1] = 0x80000002380C7F00;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_237FFBAB0(v5, v4);
    v14 = v7;
    v12 = (void *)v25;
    v15 = v6;
    goto LABEL_15;
  }
  v48 = v144;
  ((void (*)(_QWORD, _QWORD, _QWORD, double))v0[54])(v0[51], v0[53], v0[47], v23);
  sub_23801BDB0(v48, v24);
  sub_23801BDC4(v48, v24);
  v49 = sub_2380BD7F0();
  type = sub_2380BDF70();
  v50 = os_log_type_enabled(v49, type);
  v131 = v0[51];
  v132 = (void (*)(uint64_t, uint64_t))v0[55];
  v129 = v0[47];
  v136 = v48;
  v137 = v7;
  v139 = v24;
  v142 = v6;
  if (v50)
  {
    log = v49;
    v51 = v0[44];
    v125 = v0[43];
    v52 = v24;
    v53 = v0[42];
    v54 = (uint8_t *)swift_slowAlloc();
    v126 = swift_slowAlloc();
    *(_QWORD *)&v145 = v126;
    *(_DWORD *)v54 = 136446210;
    sub_23801AED4(v48, v52);
    sub_238001820(&qword_2568C5E20, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC6308]);
    v55 = sub_2380BE1A4();
    v57 = v56;
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v51, v53);
    v143[18] = sub_238013968(v55, v57, (uint64_t *)&v145);
    v0 = v143;
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_23801BDCC(v48, v139);
    sub_23801BDCC(v48, v139);
    v49 = log;
    _os_log_impl(&dword_237FF6000, log, type, "AttestationBundle passed validation for public key: %{public}s", v54, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v126, -1, -1);
    MEMORY[0x23B82B830](v54, -1, -1);
  }
  else
  {
    sub_23801BDCC(v48, v24);
    sub_23801BDCC(v48, v24);
  }

  v132(v131, v129);
  v58 = v0[32];
  v59 = v0[33];
  v60 = v0[31];
  v61 = v0[24];
  sub_2380BE294();
  sub_2380BE294();
  sub_2380BD3F4();
  v62 = type metadata accessor for Proto_AttestationBundle(0);
  sub_23804DE04(v61 + *(int *)(v62 + 36), v60);
  v138 = v4;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v58) == 1)
  {
    v63 = v0[31];
    sub_2380BD58C();
    sub_238005240(v63, &qword_2568C5E00);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[33] + 32))(v0[34], v0[31], v0[32]);
  }
  v65 = v0[40];
  v64 = v0[41];
  v133 = v0[39];
  v67 = v0[35];
  v66 = v0[36];
  v69 = v0[33];
  v68 = v0[34];
  v70 = v0[32];
  v71 = v0[30];
  sub_2380BD574();
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
  if ((sub_2380BD3E8() & 1) != 0)
    v72 = v65;
  else
    v72 = v64;
  v73 = v133;
  v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
  v134(v73, v72, v67);
  *(_QWORD *)&v145 = v0[16];
  AttestationPolicyContext.proofExpiration.getter(v71);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v71, 1, v67) == 1)
  {
    sub_238005240(v0[30], &qword_2542C9C00);
    v74 = v0;
    v75 = v138;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[36] + 32))(v0[38], v0[30], v0[35]);
    v74 = v0;
    v75 = v138;
    if ((sub_2380BD3E8() & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[36] + 40))(v0[39], v0[38], v0[35]);
    else
      (*(void (**)(_QWORD, _QWORD))(v0[36] + 8))(v0[38], v0[35]);
  }
  v77 = v74[36];
  v76 = v74[37];
  v78 = v74[35];
  sub_2380BD40C();
  v79 = sub_2380BD3DC();
  v135 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v135(v76, v78);
  if ((v79 & 1) != 0)
  {
    if (*(_BYTE *)(v74[28] + *(int *)(v74[45] + 72)) != 1)
    {
      v92 = v74[40];
      v91 = v74[41];
      v93 = v74[39];
      v94 = v74[35];
      type metadata accessor for CloudAttestationError(0);
      sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
      v95 = swift_allocError();
      v134(v96, v93, v94);
      v12 = (void *)v95;
      v0 = v143;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23801BDCC(v136, v139);
      sub_237FFBAB0(v5, v75);
      sub_237FFBAB0(v137, v142);
      v135(v92, v94);
      v135(v91, v94);
      v135(v93, v94);
      goto LABEL_17;
    }
    ((void (*)(_QWORD, _QWORD, _QWORD))v74[54])(v74[50], v74[53], v74[47]);
    v80 = sub_2380BD7F0();
    v81 = sub_2380BDF64();
    v82 = os_log_type_enabled(v80, v81);
    v83 = (void (*)(uint64_t, uint64_t))v74[55];
    v84 = v74[50];
    v85 = v74[47];
    if (v82)
    {
      v140 = v74[50];
      v86 = (uint8_t *)swift_slowAlloc();
      *(_QWORD *)&v145 = swift_slowAlloc();
      v130 = v83;
      v87 = v145;
      *(_DWORD *)v86 = 136446210;
      swift_beginAccess();
      sub_238001820(&qword_2568C5C70, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
      v88 = sub_2380BE1A4();
      v143[17] = sub_238013968(v88, v89, (uint64_t *)&v145);
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237FF6000, v80, v81, "Allowing expired bundle to fail open: expiration=%{public}s", v86, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v87, -1, -1);
      v90 = v86;
      v74 = v143;
      MEMORY[0x23B82B830](v90, -1, -1);

      v130(v140, v85);
    }
    else
    {

      v83(v84, v85);
    }
  }
  v97 = v74[39];
  v98 = v74[35];
  v99 = v74[29];
  v100 = v74[24];
  v101 = (uint64_t *)v74[21];
  v102 = v74[22];
  *v101 = v136;
  v101[1] = v139;
  swift_beginAccess();
  v134(v102, v97, v98);
  sub_238013570(v100, v99, type metadata accessor for AttestationBundle);
  v148 = 0;
  *(_QWORD *)&v144 = 0;
  sub_237FFBA20(v5, v75);
  sub_237FFBA20(v137, v142);
  sub_23801BDB0(v136, v139);
  sub_238033F18(v5, v75, v137, v142);
  sub_237FFBAB0(v5, v75);
  sub_237FFBAB0(v137, v142);
  v103 = 0;
  v104 = 0;
  if (v146 != 2)
  {
    v106 = v145;
    v105 = *((_QWORD *)&v145 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
    v107 = swift_allocObject();
    *(_OWORD *)(v107 + 16) = xmmword_2380BEAF0;
    v108 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v107 + 56) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v107 + 64) = v108;
    v109 = MEMORY[0x24BEE4568];
    *(_DWORD *)(v107 + 32) = v106;
    v110 = MEMORY[0x24BEE45B8];
    *(_QWORD *)(v107 + 96) = v109;
    *(_QWORD *)(v107 + 104) = v110;
    *(_QWORD *)(v107 + 72) = v105;
    v103 = sub_2380BDD30();
  }
  v122 = v104;
  v123 = v103;
  v111 = v74[40];
  v112 = v74[41];
  v124 = v74[39];
  v113 = v74[35];
  v114 = v74[29];
  v115 = v74[23];
  *(_QWORD *)&v145 = v74[16];
  swift_bridgeObjectRetain();
  v116 = sub_2380507D4();
  v118 = v117;
  sub_23801BDCC(v136, v139);
  sub_237FFBAB0(v5, v138);
  sub_237FFBAB0(v137, v142);
  swift_bridgeObjectRelease();
  v135(v111, v113);
  v135(v112, v113);
  v119 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  *(_QWORD *)(v115 + v119[7]) = 0;
  sub_23804DE4C(v114, v115);
  v135(v124, v113);
  v120 = (uint64_t *)(v115 + v119[5]);
  *v120 = v123;
  v120[1] = v122;
  v121 = (uint64_t *)(v115 + v119[6]);
  *v121 = v116;
  v121[1] = v118;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v46 = (uint64_t (*)(void))v143[1];
  return v46();
}

uint64_t sub_23804CA9C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v1 = *(void **)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 376);
  swift_bridgeObjectRelease();
  v3(v4, v2, v5);
  v6 = v1;
  v7 = v1;
  v8 = sub_2380BD7F0();
  v9 = sub_2380BDF64();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v10 = 138543362;
    v12 = v1;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 152) = v13;
    sub_2380BDF94();
    *v11 = v13;

    _os_log_impl(&dword_237FF6000, v8, v9, "AttestationBundle validation failed: %{public}@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v11, -1, -1);
    MEMORY[0x23B82B830](v10, -1, -1);
  }
  else
  {

  }
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
  v15 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 376);

  v14(v15, v16);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CeremonyValidator.inner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_238013570(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
}

uint64_t CeremonyValidator.inner.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23804CD6C(a1, v1);
}

uint64_t sub_23804CD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NodeValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CeremonyValidator.inner.modify())()
{
  return nullsub_1;
}

uint64_t CeremonyValidator.transparencyVerifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2380175E0(v1 + 8, a1);
}

uint64_t CeremonyValidator.transparencyVerifier.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23800A4E4(a1, v3);
}

void (*CeremonyValidator.transparencyVerifier.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_2380175E0(v1 + 8, (uint64_t)v3);
  return sub_23804CE4C;
}

void sub_23804CE4C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v2 + 80) + 8;
    sub_2380175E0(*a1, v2 + 40);
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_23800A4E4((__int128 *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 80) + 8;
    __swift_destroy_boxed_opaque_existential_1(v4);
    sub_23800A4E4((__int128 *)v2, v4);
  }
  free((void *)v2);
}

uint64_t CeremonyValidator.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  NodeValidator.init()(a1);
  result = type metadata accessor for NodeValidator();
  *(_BYTE *)(a1 + *(int *)(result + 40)) = 0;
  *(_BYTE *)(a1 + *(int *)(result + 68)) = 0;
  return result;
}

uint64_t CeremonyValidator.validate(bundle:nonce:signedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C67A0);
  v8[10] = swift_task_alloc();
  v8[11] = type metadata accessor for NodeValidator();
  v8[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23804CF94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD *v8;
  char *v10;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[10];
  v4 = (void *)v0[8];
  sub_238013570(v0[9], v1, (uint64_t (*)(_QWORD))type metadata accessor for NodeValidator);
  v5 = *(int *)(v2 + 76);
  v6 = *(void **)(v1 + v5);
  v7 = v4;

  *(_QWORD *)(v1 + v5) = v4;
  NodeValidator.defaultPolicy.getter(v3);
  v10 = (char *)&dword_2568C67A8 + dword_2568C67A8;
  v8 = (_QWORD *)swift_task_alloc();
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_23804D054;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v10)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[10]);
}

uint64_t sub_23804D054()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_238005240(*(_QWORD *)(v2 + 80), &qword_2568C67A0);
  return swift_task_switch();
}

uint64_t sub_23804D0C8()
{
  uint64_t v0;

  sub_23804D170(*(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23804D114()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  sub_238005240(*(_QWORD *)(v0 + 80), &qword_2568C67A0);
  sub_23804D170(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23804D170(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NodeValidator();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CeremonyValidator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_238013814;
  return NodeValidator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23804D268()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23804D278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v16;
  _QWORD *v17;

  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v16;
  *v16 = v8;
  v16[1] = sub_2380165B0;
  v17 = (_QWORD *)swift_task_alloc();
  v16[2] = v17;
  *v17 = v16;
  v17[1] = sub_238013814;
  return NodeValidator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23804D348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380175E0(a1 + 8, a2);
}

uint64_t sub_23804D354(uint64_t a1, uint64_t a2)
{
  __int128 v4[2];

  sub_2380175E0(a1, (uint64_t)v4);
  a2 += 8;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_23800A4E4(v4, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for CeremonyValidator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v4 = type metadata accessor for NodeValidator();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_QWORD *)(a1 + 64) = a2[8];
    v8 = v6[8];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = sub_2380BD418();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_BYTE *)(a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
    *(_BYTE *)(a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
    *(_BYTE *)(a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
    *(_BYTE *)(a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
    *(_BYTE *)(a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *(_BYTE *)(a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    *(_BYTE *)(a1 + v6[15]) = *((_BYTE *)a2 + v6[15]);
    *(_BYTE *)(a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
    *(_BYTE *)(a1 + v6[17]) = *((_BYTE *)a2 + v6[17]);
    *(_BYTE *)(a1 + v6[18]) = *((_BYTE *)a2 + v6[18]);
    v16 = v6[19];
    v17 = *(void **)((char *)a2 + v16);
    *(_QWORD *)(a1 + v16) = v17;
    v18 = v17;
  }
  return a1;
}

void destroy for CeremonyValidator(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for NodeValidator();
  v3 = a1 + *(int *)(v2 + 32);
  v4 = sub_2380BD418();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);

}

uint64_t initializeWithCopy for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = (int *)type metadata accessor for NodeValidator();
  v6 = v5[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_2380BD418();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_BYTE *)(a1 + v5[9]) = *(_BYTE *)(a2 + v5[9]);
  *(_BYTE *)(a1 + v5[10]) = *(_BYTE *)(a2 + v5[10]);
  *(_BYTE *)(a1 + v5[11]) = *(_BYTE *)(a2 + v5[11]);
  *(_BYTE *)(a1 + v5[12]) = *(_BYTE *)(a2 + v5[12]);
  *(_BYTE *)(a1 + v5[13]) = *(_BYTE *)(a2 + v5[13]);
  *(_BYTE *)(a1 + v5[14]) = *(_BYTE *)(a2 + v5[14]);
  *(_BYTE *)(a1 + v5[15]) = *(_BYTE *)(a2 + v5[15]);
  *(_BYTE *)(a1 + v5[16]) = *(_BYTE *)(a2 + v5[16]);
  *(_BYTE *)(a1 + v5[17]) = *(_BYTE *)(a2 + v5[17]);
  *(_BYTE *)(a1 + v5[18]) = *(_BYTE *)(a2 + v5[18]);
  v13 = v5[19];
  v14 = *(void **)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  v15 = v14;
  return a1;
}

uint64_t assignWithCopy for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for NodeValidator();
  v5 = v4[8];
  v6 = (void *)(a1 + v5);
  v7 = (void *)(a2 + v5);
  v8 = sub_2380BD418();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v6, v7, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
LABEL_7:
  *(_BYTE *)(a1 + v4[9]) = *(_BYTE *)(a2 + v4[9]);
  *(_BYTE *)(a1 + v4[10]) = *(_BYTE *)(a2 + v4[10]);
  *(_BYTE *)(a1 + v4[11]) = *(_BYTE *)(a2 + v4[11]);
  *(_BYTE *)(a1 + v4[12]) = *(_BYTE *)(a2 + v4[12]);
  *(_BYTE *)(a1 + v4[13]) = *(_BYTE *)(a2 + v4[13]);
  *(_BYTE *)(a1 + v4[14]) = *(_BYTE *)(a2 + v4[14]);
  *(_BYTE *)(a1 + v4[15]) = *(_BYTE *)(a2 + v4[15]);
  *(_BYTE *)(a1 + v4[16]) = *(_BYTE *)(a2 + v4[16]);
  *(_BYTE *)(a1 + v4[17]) = *(_BYTE *)(a2 + v4[17]);
  *(_BYTE *)(a1 + v4[18]) = *(_BYTE *)(a2 + v4[18]);
  v14 = v4[19];
  v15 = *(void **)(a1 + v14);
  v16 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v16;
  v17 = v16;

  return a1;
}

uint64_t initializeWithTake for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = (int *)type metadata accessor for NodeValidator();
  v5 = v4[8];
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_2380BD418();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(_BYTE *)(a1 + v4[9]) = *(_BYTE *)(a2 + v4[9]);
  *(_BYTE *)(a1 + v4[10]) = *(_BYTE *)(a2 + v4[10]);
  *(_BYTE *)(a1 + v4[11]) = *(_BYTE *)(a2 + v4[11]);
  *(_BYTE *)(a1 + v4[12]) = *(_BYTE *)(a2 + v4[12]);
  *(_BYTE *)(a1 + v4[13]) = *(_BYTE *)(a2 + v4[13]);
  *(_BYTE *)(a1 + v4[14]) = *(_BYTE *)(a2 + v4[14]);
  *(_BYTE *)(a1 + v4[15]) = *(_BYTE *)(a2 + v4[15]);
  *(_BYTE *)(a1 + v4[16]) = *(_BYTE *)(a2 + v4[16]);
  *(_BYTE *)(a1 + v4[17]) = *(_BYTE *)(a2 + v4[17]);
  *(_BYTE *)(a1 + v4[18]) = *(_BYTE *)(a2 + v4[18]);
  *(_QWORD *)(a1 + v4[19]) = *(_QWORD *)(a2 + v4[19]);
  return a1;
}

uint64_t assignWithTake for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for NodeValidator();
  v5 = v4[8];
  v6 = (void *)(a1 + v5);
  v7 = (void *)(a2 + v5);
  v8 = sub_2380BD418();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
LABEL_7:
  *(_BYTE *)(a1 + v4[9]) = *(_BYTE *)(a2 + v4[9]);
  *(_BYTE *)(a1 + v4[10]) = *(_BYTE *)(a2 + v4[10]);
  *(_BYTE *)(a1 + v4[11]) = *(_BYTE *)(a2 + v4[11]);
  *(_BYTE *)(a1 + v4[12]) = *(_BYTE *)(a2 + v4[12]);
  *(_BYTE *)(a1 + v4[13]) = *(_BYTE *)(a2 + v4[13]);
  *(_BYTE *)(a1 + v4[14]) = *(_BYTE *)(a2 + v4[14]);
  *(_BYTE *)(a1 + v4[15]) = *(_BYTE *)(a2 + v4[15]);
  *(_BYTE *)(a1 + v4[16]) = *(_BYTE *)(a2 + v4[16]);
  *(_BYTE *)(a1 + v4[17]) = *(_BYTE *)(a2 + v4[17]);
  *(_BYTE *)(a1 + v4[18]) = *(_BYTE *)(a2 + v4[18]);
  v14 = v4[19];
  v15 = *(void **)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);

  return a1;
}

uint64_t getEnumTagSinglePayload for CeremonyValidator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23804DCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NodeValidator();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CeremonyValidator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23804DD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NodeValidator();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CeremonyValidator()
{
  uint64_t result;

  result = qword_2568C6840;
  if (!qword_2568C6840)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23804DD90()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NodeValidator();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **sub_23804DDF8()
{
  return &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
}

uint64_t sub_23804DE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23804DE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttestationBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t KeyOptionsPolicy.init(mustContain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23804E04C(a1, a2);
}

uint64_t type metadata accessor for KeyOptionsPolicy.Assertion(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6AD8);
}

uint64_t type metadata accessor for KeyOptionsPolicy(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6900);
}

uint64_t sub_23804DEC0()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9C30);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9C30);
  return sub_2380BD7FC();
}

uint64_t KeyOptionsPolicy.init(_:mustContain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23804DF9C(a1, a2, a3);
}

uint64_t sub_23804DF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t KeyOptionsPolicy.init(_:mustEqual:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23804DF9C(a1, a2, a3);
}

uint64_t sub_23804DF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_2380BD49C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a2, v6);
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  v7 = a3 + *(int *)(type metadata accessor for KeyOptionsPolicy(0) + 20);
  sub_23804DF4C(a1, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
}

uint64_t KeyOptionsPolicy.init(mustEqual:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23804E04C(a1, a2);
}

uint64_t sub_23804E04C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_2380BD49C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  v5 = a2 + *(int *)(type metadata accessor for KeyOptionsPolicy(0) + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t KeyOptionsPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[6] = type metadata accessor for KeyOptionsPolicy.Assertion(0);
  v3[7] = swift_task_alloc();
  type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
  v3[8] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v5 = sub_2380BD49C();
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23804E20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for KeyOptionsPolicy(0);
  sub_238013570(v4 + *(int *)(v5 + 20), v3, type metadata accessor for KeyOptionsPolicy.OptionsLoader);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v55 = **(_QWORD **)(v0 + 32);
    v6 = AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v51);
    v7 = v52;
    if (v52 >> 60 == 15)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)(v0 + 104) + 56))(*(_QWORD *)(v0 + 88), 1, 1, *(_QWORD *)(v0 + 96), v6);
    }
    else
    {
      v9 = v53;
      v8 = v54;
      v10 = v51;
      v55 = v51;
      v56 = v52;
      v57 = v53;
      v58 = v54;
      SEP.Attestation.keyOptions.getter();
      sub_23804E940(v10, v7, v9, v8);
    }
  }
  else
  {
    sub_23804DF4C(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
  }
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
  {
    sub_23804E8A0(v13);
    type metadata accessor for KeyOptionsPolicy.Error(0);
    sub_238001820(&qword_2568C6880, type metadata accessor for KeyOptionsPolicy.Error, (uint64_t)&protocol conformance descriptor for KeyOptionsPolicy.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = *(void (**)(_QWORD, uint64_t, uint64_t))(v12 + 32);
  v16(*(_QWORD *)(v0 + 168), v13, v11);
  sub_238013570(v15, v14, type metadata accessor for KeyOptionsPolicy.Assertion);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v18 = *(_QWORD *)(v0 + 56);
  if (EnumCaseMultiPayload == 1)
  {
    v16(*(_QWORD *)(v0 + 112), v18, *(_QWORD *)(v0 + 96));
    sub_238001820(&qword_2568C6888, (uint64_t (*)(uint64_t))MEMORY[0x24BE07858], MEMORY[0x24BE07868]);
    sub_2380BDE5C();
    sub_2380BDE5C();
    if (*(_QWORD *)(v0 + 16) != *(_QWORD *)(v0 + 24))
    {
      v27 = *(_QWORD *)(v0 + 168);
      v28 = *(_QWORD *)(v0 + 104);
      v29 = *(_QWORD *)(v0 + 112);
      v30 = *(_QWORD *)(v0 + 96);
      type metadata accessor for KeyOptionsPolicy.Error(0);
      sub_238001820(&qword_2568C6880, type metadata accessor for KeyOptionsPolicy.Error, (uint64_t)&protocol conformance descriptor for KeyOptionsPolicy.Error);
      swift_allocError();
      v32 = v31;
      v33 = v31 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C6890) + 48);
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
      v34(v32, v27, v30);
      v34(v33, v29, v30);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      v35 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v35(v29, v30);
      v35(v27, v30);
      goto LABEL_20;
    }
    v19 = *(_QWORD *)(v0 + 112);
  }
  else
  {
    v16(*(_QWORD *)(v0 + 160), v18, *(_QWORD *)(v0 + 96));
    sub_238001820(&qword_2568C5DD8, (uint64_t (*)(uint64_t))MEMORY[0x24BE07858], MEMORY[0x24BE07870]);
    if ((sub_2380BDFF4() & 1) == 0)
    {
      v37 = *(_QWORD *)(v0 + 160);
      v36 = *(_QWORD *)(v0 + 168);
      v48 = *(_QWORD *)(v0 + 152);
      v38 = *(_QWORD *)(v0 + 128);
      v39 = *(_QWORD *)(v0 + 136);
      v40 = *(_QWORD *)(v0 + 120);
      v41 = *(_QWORD *)(v0 + 96);
      v50 = *(_QWORD *)(v0 + 104);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
      v42(*(_QWORD *)(v0 + 144), v37, v41);
      v42(v38, v37, v41);
      v42(v40, v36, v41);
      sub_2380BDFE8();
      sub_2380BDFDC();
      v43 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v43(v39, v41);
      type metadata accessor for KeyOptionsPolicy.Error(0);
      sub_238001820(&qword_2568C6880, type metadata accessor for KeyOptionsPolicy.Error, (uint64_t)&protocol conformance descriptor for KeyOptionsPolicy.Error);
      swift_allocError();
      v45 = v44;
      v46 = v44 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C6898) + 48);
      v42(v45, v36, v41);
      v42(v46, v48, v41);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      v43(v48, v41);
      v43(v37, v41);
      v43(v36, v41);
      goto LABEL_20;
    }
    v19 = *(_QWORD *)(v0 + 160);
  }
  v49 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 8);
  v49(v19, *(_QWORD *)(v0 + 96));
  if (qword_2568C4EE0 != -1)
    swift_once();
  v20 = sub_2380BD808();
  __swift_project_value_buffer(v20, (uint64_t)qword_2568C9C30);
  v21 = sub_2380BD7F0();
  v22 = sub_2380BDF70();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_237FF6000, v21, v22, "AttestationBundle passed KeyOptionsPolicy: attested key has expected flags set", v23, 2u);
    MEMORY[0x23B82B830](v23, -1, -1);
  }
  v24 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 96);

  v49(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t type metadata accessor for KeyOptionsPolicy.OptionsLoader(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C6A50);
}

uint64_t sub_23804E8A0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for KeyOptionsPolicy.Error(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C69A8);
}

uint64_t sub_23804E8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_238013814;
  return KeyOptionsPolicy.evaluate(bundle:context:)((uint64_t)v4, a2);
}

uint64_t sub_23804E940(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_237FFBAB0(result, a2);
    return sub_237FFBAB0(a3, a4);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyOptionsPolicy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for KeyOptionsPolicy.Assertion(0);
    swift_getEnumCaseMultiPayload();
    v7 = sub_2380BD49C();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
      {
        memcpy(v11, v12, *(_QWORD *)(v14 + 64));
      }
      else
      {
        v9((uint64_t *)v11, (uint64_t *)v12, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for KeyOptionsPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  v4 = sub_2380BD49C();
  v5 = *(_QWORD *)(v4 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, v4);
  }
  return result;
}

char *initializeWithCopy for KeyOptionsPolicy(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_getEnumCaseMultiPayload();
  v6 = sub_2380BD49C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  swift_storeEnumTagMultiPayload();
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
    {
      memcpy(v10, v11, *(_QWORD *)(v13 + 64));
    }
    else
    {
      v8(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithCopy for KeyOptionsPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;

  if (a1 != a2)
  {
    sub_237FFD540(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    type metadata accessor for KeyOptionsPolicy.Assertion(0);
    swift_getEnumCaseMultiPayload();
    v6 = sub_2380BD49C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      v18 = sub_2380BD49C();
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
      v21 = v20(v8, 1, v18);
      v22 = v20(v9, 1, v18);
      if (v21)
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v8, v9, v18);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v8, 0, 1, v18);
          return a1;
        }
      }
      else
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v8, v9, v18);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v19 + 8))(v8, v18);
      }
      v17 = *(_QWORD *)(v11 + 64);
      goto LABEL_10;
    }
    sub_23804E8A0((uint64_t)v8);
LABEL_9:
    v17 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for KeyOptionsPolicy.OptionsLoader(0) - 8) + 64);
LABEL_10:
    memcpy(v8, v9, v17);
    return a1;
  }
  if (v14)
    goto LABEL_9;
  v15 = sub_2380BD49C();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    memcpy(v8, v9, *(_QWORD *)(v11 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v8, v9, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

char *initializeWithTake for KeyOptionsPolicy(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_getEnumCaseMultiPayload();
  v6 = sub_2380BD49C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  swift_storeEnumTagMultiPayload();
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
    {
      memcpy(v10, v11, *(_QWORD *)(v13 + 64));
    }
    else
    {
      v8(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithTake for KeyOptionsPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;

  if (a1 != a2)
  {
    sub_237FFD540(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    type metadata accessor for KeyOptionsPolicy.Assertion(0);
    swift_getEnumCaseMultiPayload();
    v6 = sub_2380BD49C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      v18 = sub_2380BD49C();
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
      v21 = v20(v8, 1, v18);
      v22 = v20(v9, 1, v18);
      if (v21)
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v8, v9, v18);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v8, 0, 1, v18);
          return a1;
        }
      }
      else
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v8, v9, v18);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v19 + 8))(v8, v18);
      }
      v17 = *(_QWORD *)(v11 + 64);
      goto LABEL_10;
    }
    sub_23804E8A0((uint64_t)v8);
LABEL_9:
    v17 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for KeyOptionsPolicy.OptionsLoader(0) - 8) + 64);
LABEL_10:
    memcpy(v8, v9, v17);
    return a1;
  }
  if (v14)
    goto LABEL_9;
  v15 = sub_2380BD49C();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    memcpy(v8, v9, *(_QWORD *)(v11 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v8, v9, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyOptionsPolicy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23804F2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for KeyOptionsPolicy.Assertion(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for KeyOptionsPolicy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23804F368(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for KeyOptionsPolicy.Assertion(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_23804F3E4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for KeyOptionsPolicy.Assertion(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for KeyOptionsPolicy.OptionsLoader(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyOptionsPolicy.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v12 = sub_2380BD49C();
      v13 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(a1, a2, v12);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6890);
      v13((uint64_t *)((char *)a1 + *(int *)(v14 + 48)), (uint64_t *)((char *)a2 + *(int *)(v14 + 48)), v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = sub_2380BD49C();
      v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6898);
      v9((uint64_t *)((char *)a1 + *(int *)(v10 + 48)), (uint64_t *)((char *)a2 + *(int *)(v10 + 48)), v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for KeyOptionsPolicy.Error(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = sub_2380BD49C();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v6(a1, v3);
    v4 = &qword_2568C6890;
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v3 = sub_2380BD49C();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v6(a1, v3);
    v4 = &qword_2568C6898;
  }
  v5 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v4) + 48);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(v5, v3);
}

char *initializeWithCopy for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v10 = sub_2380BD49C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6890);
    v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_2380BD49C();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6898);
    v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  if (a1 != a2)
  {
    sub_237FFD540((uint64_t)a1, type metadata accessor for KeyOptionsPolicy.Error);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = sub_2380BD49C();
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6890);
      v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_2380BD49C();
      v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6898);
      v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v10 = sub_2380BD49C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(a1, a2, v10);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6890);
    v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_2380BD49C();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6898);
    v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  if (a1 != a2)
  {
    sub_237FFD540((uint64_t)a1, type metadata accessor for KeyOptionsPolicy.Error);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = sub_2380BD49C();
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
      v11(a1, a2, v10);
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6890);
      v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_2380BD49C();
      v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6898);
      v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23804FAE0()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  char v3;
  char *v4;
  uint64_t *v5;

  result = sub_2380BD49C();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v4 = &v3;
    swift_getTupleTypeLayout2();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_23804FB78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_2380BD49C();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        memcpy(a1, a2, *(_QWORD *)(v8 + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_23804FC98(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_2380BD49C();
    v5 = *(_QWORD *)(v4 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  return result;
}

void *sub_23804FD28(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_2380BD49C();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_23804FE24(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v14 = sub_2380BD49C();
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      v17 = v16(a1, 1, v14);
      v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 16))(a1, a2, v14);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 24))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      v13 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_23804E8A0((uint64_t)a1);
LABEL_7:
    v13 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v13);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  v11 = sub_2380BD49C();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v12 + 16))(a1, a2, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_23804FFDC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_2380BD49C();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_2380500D8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v14 = sub_2380BD49C();
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      v17 = v16(a1, 1, v14);
      v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 32))(a1, a2, v14);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 40))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      v13 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_23804E8A0((uint64_t)a1);
LABEL_7:
    v13 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v13);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  v11 = sub_2380BD49C();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v12 + 32))(a1, a2, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_238050290()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23805029C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_2380502EC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380502F8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_23805034C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_238050388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

void sub_2380503CC()
{
  unint64_t v0;

  sub_238050420();
  if (v0 <= 0x3F)
    swift_initEnumMetadataSinglePayload();
}

void sub_238050420()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2568C6A60)
  {
    sub_2380BD49C();
    v0 = sub_2380BDF7C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2568C6A60);
  }
}

uint64_t *sub_238050474(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v6 = sub_2380BD49C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_238050520(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2380BD49C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_238050554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = sub_2380BD49C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_2380505C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_237FFD540(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    swift_getEnumCaseMultiPayload();
    v4 = sub_2380BD49C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_238050654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = sub_2380BD49C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_2380506C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_237FFD540(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    swift_getEnumCaseMultiPayload();
    v4 = sub_2380BD49C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_238050754()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD49C();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t RoutingHintPolicy.init(required:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 9) = result;
  *(_BYTE *)(a2 + 10) = 0;
  return result;
}

uint64_t sub_2380507D4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[32];

  v1 = *v0;
  if (qword_2568C4EF0 == -1)
  {
    if (!*(_QWORD *)(v1 + 16))
      return 0;
  }
  else
  {
    swift_once();
    if (!*(_QWORD *)(v1 + 16))
      return 0;
  }
  v2 = sub_23800DEDC(xmmword_2568C6B10, *((uint64_t *)&xmmword_2568C6B10 + 1), qword_2568C6B20, unk_2568C6B28);
  if ((v3 & 1) == 0)
    return 0;
  sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28);
  if (swift_dynamicCast())
    return v5;
  else
    return 0;
}

uint64_t sub_238050898()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9C48);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9C48);
  return sub_2380BD7FC();
}

uint64_t RoutingHintPolicy.init(_:required:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *(_BYTE *)(result + 8);
  *(_QWORD *)a3 = *(_QWORD *)result;
  *(_BYTE *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 9) = a2;
  *(_BYTE *)(a3 + 10) = 0;
  return result;
}

uint64_t RoutingHintPolicy.init(_:required:fallback:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *(_BYTE *)(result + 8);
  *(_QWORD *)a4 = *(_QWORD *)result;
  *(_BYTE *)(a4 + 8) = v4;
  *(_BYTE *)(a4 + 9) = a2;
  *(_BYTE *)(a4 + 10) = a3;
  return result;
}

uint64_t RoutingHintPolicy.init(required:fallback:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 9) = result;
  *(_BYTE *)(a3 + 10) = a2;
  return result;
}

uint64_t RoutingHintPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 88) = v4;
  *(_BYTE *)(v3 + 96) = *((_BYTE *)v2 + 8);
  *(_BYTE *)(v3 + 97) = *((_BYTE *)v2 + 9);
  *(_BYTE *)(v3 + 98) = *((_BYTE *)v2 + 10);
  return swift_task_switch();
}

uint64_t sub_238050998()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_BYTE *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 88);
    goto LABEL_5;
  }
  v33 = **(_QWORD **)(v0 + 80);
  AttestationPolicyContext.validatedDarwinInit.getter((uint64_t)&v31);
  v2 = v31;
  if (v31)
  {
    v1 = v32;
LABEL_5:
    v31 = v2;
    v32 = v1;
    swift_bridgeObjectRetain();
    v3 = DarwinInit.secureConfigRoutingHint.getter();
    if (v4)
    {
      v5 = v3;
      v6 = v4;
      swift_bridgeObjectRelease();
LABEL_7:
      if (qword_2568C4EF0 != -1)
        swift_once();
      v7 = xmmword_2568C6B10;
      v8 = qword_2568C6B20;
      v9 = unk_2568C6B28;
      *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v0 + 16) = v5;
      *(_QWORD *)(v0 + 24) = v6;
      sub_238024D10(v0 + 16, v0 + 48);
      swift_bridgeObjectRetain();
      sub_238022FD8(v0 + 48, v7, *((uint64_t *)&v7 + 1), v8, v9);
      sub_238037344(v0 + 16);
      goto LABEL_39;
    }
    if ((*(_BYTE *)(v0 + 98) & 1) != 0)
    {
      if (qword_2568C4EE8 != -1)
        swift_once();
      v10 = sub_2380BD808();
      __swift_project_value_buffer(v10, (uint64_t)qword_2568C9C48);
      v11 = sub_2380BD7F0();
      v12 = sub_2380BDF4C();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_237FF6000, v11, v12, "Reading fallback routing hint from Preferences", v13, 2u);
        MEMORY[0x23B82B830](v13, -1, -1);
      }

      v31 = v2;
      v32 = v1;
      v5 = DarwinInit.cfPrefsRoutingHint.getter();
      v6 = v14;
      swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_7;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (*(_BYTE *)(v0 + 97) == 1)
    {
      if (qword_2568C4EE8 != -1)
        swift_once();
      v15 = sub_2380BD808();
      __swift_project_value_buffer(v15, (uint64_t)qword_2568C9C48);
      v16 = sub_2380BD7F0();
      v17 = sub_2380BDF64();
      if (!os_log_type_enabled(v16, v17))
      {
        v19 = 1;
        goto LABEL_43;
      }
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_237FF6000, v16, v17, "Required routing hint missing from darwin-init", v18, 2u);
      v19 = 1;
LABEL_28:
      MEMORY[0x23B82B830](v18, -1, -1);
LABEL_43:

      sub_23805101C();
      swift_allocError();
      *v30 = v19;
      swift_willThrow();
      v28 = *(uint64_t (**)(void))(v0 + 8);
      return v28();
    }
    if (qword_2568C4EE8 != -1)
      swift_once();
    v22 = sub_2380BD808();
    __swift_project_value_buffer(v22, (uint64_t)qword_2568C9C48);
    v23 = sub_2380BD7F0();
    v24 = sub_2380BDF64();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      v26 = "Optional routing hint missing from darwin-init";
LABEL_37:
      _os_log_impl(&dword_237FF6000, v23, v24, v26, v25, 2u);
      MEMORY[0x23B82B830](v25, -1, -1);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if (*(_BYTE *)(v0 + 97) == 1)
  {
    if (qword_2568C4EE8 != -1)
      swift_once();
    v20 = sub_2380BD808();
    __swift_project_value_buffer(v20, (uint64_t)qword_2568C9C48);
    v16 = sub_2380BD7F0();
    v21 = sub_2380BDF64();
    if (!os_log_type_enabled(v16, v21))
    {
      v19 = 0;
      goto LABEL_43;
    }
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_237FF6000, v16, v21, "Required validated darwin-init unavailable", v18, 2u);
    v19 = 0;
    goto LABEL_28;
  }
  if (qword_2568C4EE8 != -1)
    swift_once();
  v27 = sub_2380BD808();
  __swift_project_value_buffer(v27, (uint64_t)qword_2568C9C48);
  v23 = sub_2380BD7F0();
  v24 = sub_2380BDF64();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    v26 = "Optional validated darwin-init unavailable";
    goto LABEL_37;
  }
LABEL_38:

LABEL_39:
  v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_238050E84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)v5 = v3;
  *(_QWORD *)(v5 + 8) = sub_238013814;
  v6 = *v2;
  *(_QWORD *)(v5 + 80) = a2;
  *(_QWORD *)(v5 + 88) = v6;
  *(_BYTE *)(v5 + 96) = *((_BYTE *)v2 + 8);
  *(_BYTE *)(v5 + 97) = *((_BYTE *)v2 + 9);
  *(_BYTE *)(v5 + 98) = *((_BYTE *)v2 + 10);
  return swift_task_switch();
}

void sub_238050F00()
{
  *(_QWORD *)&xmmword_2568C6B10 = &type metadata for RoutingHintPolicy;
  *((_QWORD *)&xmmword_2568C6B10 + 1) = &protocol witness table for RoutingHintPolicy;
  qword_2568C6B20 = 0xD000000000000014;
  unk_2568C6B28 = 0x80000002380C8C40;
}

uint64_t static RoutingHintPolicy.validatedRoutingHintKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2568C4EF0 != -1)
    swift_once();
  v3 = qword_2568C6B20;
  v2 = unk_2568C6B28;
  *(_OWORD *)a1 = xmmword_2568C6B10;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

BOOL static RoutingHintPolicy.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RoutingHintPolicy.Error.hash(into:)()
{
  return sub_2380BE240();
}

uint64_t RoutingHintPolicy.Error.hashValue.getter()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

unint64_t sub_23805101C()
{
  unint64_t result;

  result = qword_2568C6B38;
  if (!qword_2568C6B38)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for RoutingHintPolicy.Error, &type metadata for RoutingHintPolicy.Error);
    atomic_store(result, (unint64_t *)&qword_2568C6B38);
  }
  return result;
}

unint64_t sub_238051064()
{
  unint64_t result;

  result = qword_2568C6B48;
  if (!qword_2568C6B48)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for RoutingHintPolicy.Error, &type metadata for RoutingHintPolicy.Error);
    atomic_store(result, (unint64_t *)&qword_2568C6B48);
  }
  return result;
}

uint64_t sub_2380510AC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RoutingHintPolicy(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t __swift_memcpy11_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for RoutingHintPolicy(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingHintPolicy(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 11))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingHintPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoutingHintPolicy()
{
  return &type metadata for RoutingHintPolicy;
}

uint64_t storeEnumTagSinglePayload for RoutingHintPolicy.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2380512B4 + 4 * byte_2380C14F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2380512E8 + 4 * asc_2380C14F0[v4]))();
}

uint64_t sub_2380512E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2380512F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2380512F8);
  return result;
}

uint64_t sub_238051304(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23805130CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_238051310(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238051318(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoutingHintPolicy.Error()
{
  return &type metadata for RoutingHintPolicy.Error;
}

uint64_t getEnumTagSinglePayload for RoutingHintPolicy.DarwinInitLoader(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RoutingHintPolicy.DarwinInitLoader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_2380513DC(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    *(_BYTE *)(result + 8) = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RoutingHintPolicy.DarwinInitLoader()
{
  return &type metadata for RoutingHintPolicy.DarwinInitLoader;
}

uint64_t sub_238051410@<X0>(uint64_t a1@<X8>)
{
  return sub_238051968((uint64_t (*)(void))sub_2380654AC, a1);
}

uint64_t sub_23805141C()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_2380C39E8[result];
  return result;
}

uint64_t sub_23805143C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380519A4(a1, (uint64_t (*)(_QWORD))sub_2380654AC, a2);
}

void sub_238051448(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
    v2 = qword_2380C39E8[v2];
  *a1 = v2;
}

uint64_t sub_238051470()
{
  sub_238001D18();
  return sub_2380BD634();
}

BOOL sub_2380514AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v2 = qword_2380C39E8[v2];
  v3 = *a2;
  if (*((_BYTE *)a2 + 8))
    v3 = qword_2380C39E8[v3];
  return v2 == v3;
}

void sub_2380514E4()
{
  qword_2568C9C60 = (uint64_t)&unk_2509D9260;
}

uint64_t sub_2380514F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4EF8, &qword_2568C9C60, a1);
}

uint64_t sub_238051514@<X0>(uint64_t a1@<X8>)
{
  return sub_238051968((uint64_t (*)(void))sub_2380654E4, a1);
}

uint64_t sub_238051520()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_238051528@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380519A4(a1, (uint64_t (*)(_QWORD))sub_2380654E4, a2);
}

void sub_238051534(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_238051540()
{
  sub_238001D5C();
  return sub_2380BD634();
}

BOOL sub_238051578(uint64_t a1, uint64_t *a2)
{
  return sub_238077ED8(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void sub_238051594()
{
  qword_2568C9C68 = (uint64_t)&unk_2509D92D0;
}

uint64_t sub_2380515A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4F00, &qword_2568C9C68, a1);
}

uint64_t sub_2380515C4@<X0>(uint64_t a1@<X8>)
{
  return sub_238051968((uint64_t (*)(void))sub_2380654F8, a1);
}

uint64_t sub_2380515D0()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_2380C39B0[result];
  return result;
}

uint64_t sub_2380515F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380519A4(a1, sub_2380654F8, a2);
}

void sub_2380515FC(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
    v2 = qword_2380C39B0[v2];
  *a1 = v2;
}

uint64_t sub_238051620()
{
  sub_238001DA0();
  return sub_2380BD634();
}

BOOL sub_238051658(uint64_t a1, uint64_t a2)
{
  return sub_238077EE4(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void sub_238051674()
{
  qword_2568C9C70 = (uint64_t)&unk_2509D9360;
}

uint64_t sub_238051688@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4F08, &qword_2568C9C70, a1);
}

uint64_t sub_2380516A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  uint64_t v3;

  v2 = result == 0;
  if (result == 3)
    v3 = 1;
  else
    v3 = result;
  *(_QWORD *)a2 = v3;
  if (result == 3)
    v2 = 1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_2380516D0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 3;
  if (!*(_QWORD *)v0)
    v1 = 0;
  if (v0[8])
    return v1;
  else
    return *(_QWORD *)v0;
}

uint64_t *sub_2380516F0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  char v5;

  v2 = *result;
  v3 = *result == 0;
  v4 = *result == 3;
  if (*result == 3)
    v2 = 1;
  *(_QWORD *)a2 = v2;
  v5 = v4 || v3;
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_238051720(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)v1;
  v3 = 3;
  if (!*(_QWORD *)v1)
    v3 = 0;
  if (*(_BYTE *)(v1 + 8))
    v2 = v3;
  *a1 = v2;
}

uint64_t sub_238051744()
{
  sub_238060DB8();
  return sub_2380BD634();
}

BOOL sub_23805177C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v3 = 3;
  else
    v3 = 0;
  if (*(_BYTE *)(a1 + 8))
    v2 = v3;
  if (*(_QWORD *)a2)
    v4 = 3;
  else
    v4 = 0;
  if (!*(_BYTE *)(a2 + 8))
    v4 = *(_QWORD *)a2;
  return v2 == v4;
}

void sub_2380517BC()
{
  qword_2568C9C78 = (uint64_t)&unk_2509D93F0;
}

uint64_t sub_2380517D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4F10, &qword_2568C9C78, a1);
}

uint64_t sub_2380517EC@<X0>(uint64_t a1@<X8>)
{
  return sub_238051968((uint64_t (*)(void))sub_238065574, a1);
}

uint64_t sub_2380517F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380519A4(a1, (uint64_t (*)(_QWORD))sub_238065574, a2);
}

uint64_t sub_238051804()
{
  sub_238060FD0();
  return sub_2380BD634();
}

BOOL sub_23805183C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_238051850()
{
  qword_2568C9C80 = (uint64_t)&unk_2509D9430;
}

uint64_t sub_238051864@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4F18, &qword_2568C9C80, a1);
}

unint64_t sub_238051880@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_238051898()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *sub_2380518B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_2380518D0(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t sub_2380518F0()
{
  sub_238061058();
  return sub_2380BD634();
}

void sub_23805192C()
{
  qword_2568C9C88 = (uint64_t)&unk_2509D94B0;
}

uint64_t sub_238051940@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4F20, &qword_2568C9C88, a1);
}

uint64_t sub_23805195C@<X0>(uint64_t a1@<X8>)
{
  return sub_238051968((uint64_t (*)(void))sub_238065588, a1);
}

uint64_t sub_238051968@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_238051998@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2380519A4(a1, (uint64_t (*)(_QWORD))sub_238065588, a2);
}

uint64_t sub_2380519A4@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  char v6;

  result = a2(*a1);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_2380519D8()
{
  sub_238061014();
  return sub_2380BD634();
}

uint64_t sub_238051A10(uint64_t a1, uint64_t a2)
{
  return sub_2380795BC(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

void sub_238051A2C()
{
  qword_2568C9C90 = (uint64_t)&unk_2509D94F0;
}

uint64_t sub_238051A40@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4F28, &qword_2568C9C90, a1);
}

uint64_t sub_238051A5C()
{
  sub_238060F8C();
  return sub_2380BD634();
}

BOOL sub_238051A94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

void sub_238051AD0()
{
  qword_2568C9C98 = (uint64_t)&unk_2509D9590;
}

uint64_t sub_238051AE4@<X0>(_QWORD *a1@<X8>)
{
  return sub_238051B00(&qword_2568C4F30, &qword_2568C9C98, a1);
}

uint64_t sub_238051B00@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_238051B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9CA0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9CA0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEB00;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN_VERSION";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "V1";
  *(_QWORD *)(v11 + 8) = 2;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "V2";
  *((_QWORD *)v13 + 1) = 2;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "V3";
  *((_QWORD *)v15 + 1) = 2;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 999999999;
  *(_QWORD *)v16 = "FUTURE";
  *(_QWORD *)(v16 + 8) = 6;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238051D3C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F38, (uint64_t)qword_2568C9CA0, a1);
}

uint64_t sub_238051D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9CB8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9CB8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380C1650;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN_APPLICATION";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "IDS_MESSAGING";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CLOUDKIT";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "IDS_MULTIPLEX_ICLOUD";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "IDS_FACETIME";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PRIVATE_CLOUD_COMPUTE";
  *((_QWORD *)v19 + 1) = 21;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PRIVATE_CLOUD_COMPUTE_INTERNAL";
  *((_QWORD *)v21 + 1) = 30;
  v21[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238051FBC@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F40, (uint64_t)qword_2568C9CB8, a1);
}

uint64_t sub_238051FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9CD0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9CD0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380C1650;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN_STATUS";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "OK";
  *(_QWORD *)(v11 + 8) = 2;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "MUTATION_PENDING";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ALREADY_EXISTS";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "INTERNAL_ERROR";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "INVALID_REQUEST";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "NOT_FOUND";
  *((_QWORD *)v21 + 1) = 9;
  v21[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_23805223C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F48, (uint64_t)qword_2568C9CD0, a1);
}

uint64_t sub_238052258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9CE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9CE8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "UNKNOWN_VRF";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 3;
  *(_QWORD *)v11 = "ECVRF_ED25519_SHA512_Elligator2";
  *((_QWORD *)v11 + 1) = 31;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_2380523A8@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F50, (uint64_t)qword_2568C9CE8, a1);
}

uint64_t sub_2380523C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9D00);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9D00);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN_LOG";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PER_APPLICATION_CHANGE_LOG";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PER_APPLICATION_TREE";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TOP_LEVEL_TREE";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "CT_LOG";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "AT_LOG";
  *((_QWORD *)v19 + 1) = 6;
  v19[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_2380525F4@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F58, (uint64_t)qword_2568C9D00, a1);
}

uint64_t sub_238052610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9D18);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9D18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "UNKNOWN_MAP";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "PER_APP_OBJECT_MAP";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238052760@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F60, (uint64_t)qword_2568C9D18, a1);
}

uint64_t sub_23805277C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9D30);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9D30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380C1660;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PACL_NODE";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PAT_NODE";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PAT_CONFIG_NODE";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TLT_NODE";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "TLT_CONFIG_NODE";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "LOG_CLOSED_NODE";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "CT_NODE";
  *((_QWORD *)v21 + 1) = 7;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "ATL_NODE";
  *((_QWORD *)v23 + 1) = 8;
  v23[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238052A1C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F68, (uint64_t)qword_2568C9D30, a1);
}

uint64_t sub_238052A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9D48);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9D48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "type";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "output";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "proof";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238052BCC()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        sub_2380BD6A0();
      }
      else if (result == 1)
      {
        sub_238060DB8();
        sub_2380BD688();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_238052CC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (sub_238060DB8(), result = sub_2380BD76C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_238052E50@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_2380BEAE0;
  *(_OWORD *)(a1 + 32) = xmmword_2380BEAE0;
  return sub_2380BD5BC();
}

uint64_t sub_238052E84()
{
  return 0x656E746957465256;
}

uint64_t sub_238052EA8()
{
  return sub_238052BCC();
}

uint64_t sub_238052EBC()
{
  return sub_238052CC0();
}

uint64_t sub_238052ED0()
{
  sub_238001820(&qword_2568C72A8, type metadata accessor for VRFWitness, (uint64_t)&unk_2380C2D9C);
  return sub_2380BD628();
}

uint64_t sub_238052F20@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F70, (uint64_t)qword_2568C9D48, a1);
}

uint64_t sub_238052F3C()
{
  sub_238001820(&qword_2568C7208, type metadata accessor for VRFWitness, (uint64_t)&unk_2380C2DD4);
  return sub_2380BD718();
}

uint64_t sub_238052F7C()
{
  sub_238001820(&qword_2568C7208, type metadata accessor for VRFWitness, (uint64_t)&unk_2380C2DD4);
  return sub_2380BD724();
}

uint64_t sub_238052FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9D60);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9D60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "vrfKey";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "type";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238053120()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_238060DB8();
        sub_2380BD688();
      }
      else if (result == 1)
      {
        sub_2380BD6A0();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_238053204()
{
  return 0x696C627550465256;
}

uint64_t (*sub_23805322C())()
{
  return nullsub_1;
}

uint64_t sub_238053240()
{
  return sub_238053120();
}

void sub_238053254()
{
  sub_23805D318();
}

uint64_t sub_238053284()
{
  sub_238001820(&qword_2568C72B8, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2C34);
  return sub_2380BD628();
}

uint64_t sub_2380532D4@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F78, (uint64_t)qword_2568C9D60, a1);
}

uint64_t sub_2380532F0()
{
  sub_238001820(&qword_2568C71E8, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2C6C);
  return sub_2380BD718();
}

uint64_t sub_238053330()
{
  sub_238001820(&qword_2568C71E8, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2C6C);
  return sub_2380BD724();
}

uint64_t sub_238053384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9D78);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9D78);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "signature";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "signingKeySPKIHash";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "algorithm";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238053518()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_238060F8C();
        sub_2380BD688();
      }
      else if (result == 2 || result == 1)
      {
        sub_2380BD6A0();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

void sub_23805360C()
{
  __asm { BR              X10 }
}

uint64_t sub_238053658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_2380BD784(), !v2))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_2380537A0@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2380BEAE0;
  *(_OWORD *)(a1 + 16) = xmmword_2380BEAE0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  return sub_2380BD5BC();
}

uint64_t sub_2380537D4()
{
  return 0x727574616E676953;
}

uint64_t sub_2380537F0()
{
  return sub_238053518();
}

void sub_238053804()
{
  sub_23805360C();
}

uint64_t sub_238053818()
{
  sub_238001820(&qword_2568C72C0, type metadata accessor for Signature, (uint64_t)&unk_2380C2ACC);
  return sub_2380BD628();
}

uint64_t sub_238053868@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F80, (uint64_t)qword_2568C9D78, a1);
}

uint64_t sub_238053884()
{
  sub_238001820(&qword_2568C71C8, type metadata accessor for Signature, (uint64_t)&unk_2380C2B04);
  return sub_2380BD718();
}

uint64_t sub_2380538C4()
{
  sub_238001820(&qword_2568C71C8, type metadata accessor for Signature, (uint64_t)&unk_2380C2B04);
  return sub_2380BD724();
}

uint64_t sub_238053918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9D90);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9D90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "UNKNOWN";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "ECDSA_SHA256";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238053A68@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F88, (uint64_t)qword_2568C9D90, a1);
}

uint64_t sub_238053A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9DA8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9DA8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "object";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "signature";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238053BD4()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_2380BD658();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      sub_238053C60();
    }
    else if (result == 1)
    {
      sub_2380BD6A0();
    }
  }
  return result;
}

uint64_t sub_238053C60()
{
  type metadata accessor for SignedObject(0);
  type metadata accessor for Signature(0);
  sub_238001820(&qword_2568C71C8, type metadata accessor for Signature, (uint64_t)&unk_2380C2B04);
  return sub_2380BD6D0();
}

void sub_238053CF4()
{
  __asm { BR              X10 }
}

uint64_t sub_238053D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_2380BD784(), !v2))
  {
    result = sub_238053DE8(v5, v6, v4, v3);
    if (!v2)
    {
      type metadata accessor for SignedObject(0);
      return sub_2380BD5B0();
    }
  }
  return result;
}

uint64_t sub_238053DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Signature(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SignedObject(0);
  sub_2380051FC(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_2568C5430);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C5430);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Signature);
  sub_238001820(&qword_2568C71C8, type metadata accessor for Signature, (uint64_t)&unk_2380C2B04);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for Signature);
}

uint64_t sub_238053F60@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = xmmword_2380BEAE0;
  sub_2380BD5BC();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for Signature(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_238053FC0()
{
  return 0x624F64656E676953;
}

uint64_t sub_238053FE0()
{
  return sub_238053BD4();
}

void sub_238053FF4()
{
  sub_238053CF4();
}

uint64_t sub_238054008()
{
  sub_238001820(&qword_2568C72D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C293C);
  return sub_2380BD628();
}

uint64_t sub_238054058@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F90, (uint64_t)qword_2568C9DA8, a1);
}

uint64_t sub_238054074()
{
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  return sub_2380BD718();
}

uint64_t sub_2380540B4()
{
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  return sub_2380BD724();
}

uint64_t sub_238054108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9DC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9DC0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380C1660;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "logBeginningMs";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "logSize";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "logHeadHash";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "revision";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "logType";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "application";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "treeId";
  *((_QWORD *)v21 + 1) = 6;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "timestampMs";
  *((_QWORD *)v23 + 1) = 11;
  v23[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_2380543B4()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_2380BD658();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
        case 7:
        case 8:
          v4 = v3;
          sub_2380BD6B8();
          goto LABEL_10;
        case 3:
          v4 = v3;
          sub_2380BD6A0();
          goto LABEL_10;
        case 5:
          sub_238060FD0();
          goto LABEL_8;
        case 6:
          sub_238001D5C();
LABEL_8:
          v4 = v3;
          sub_2380BD688();
LABEL_10:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_23805451C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_2380BD79C(), !v1))
  {
    if (!v0[1] || (result = sub_2380BD79C(), !v1))
      __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_238054734@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xC000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return sub_2380BD5BC();
}

uint64_t sub_238054774()
{
  return 0x64616548676F4CLL;
}

uint64_t (*sub_238054794())()
{
  return nullsub_1;
}

uint64_t sub_2380547A8()
{
  return sub_2380543B4();
}

uint64_t sub_2380547BC()
{
  return sub_23805451C();
}

uint64_t sub_2380547D0()
{
  sub_238001820(&qword_2568C72D8, type metadata accessor for LogHead, (uint64_t)&unk_2380C27D4);
  return sub_2380BD628();
}

uint64_t sub_238054820@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4F98, (uint64_t)qword_2568C9DC0, a1);
}

uint64_t sub_23805483C()
{
  sub_238001820(&qword_2568C7190, type metadata accessor for LogHead, (uint64_t)&unk_2380C280C);
  return sub_2380BD718();
}

uint64_t sub_23805487C()
{
  sub_238001820(&qword_2568C7190, type metadata accessor for LogHead, (uint64_t)&unk_2380C280C);
  return sub_2380BD724();
}

uint64_t sub_2380548D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9DD8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9DD8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "logType";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "slh";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "hashesOfPeersInPathToRoot";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "nodeBytes";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "nodePosition";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "nodeType";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238054B08()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_2380BD658();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_238060FD0();
          goto LABEL_5;
        case 2:
          v4 = v3;
          sub_238054C68();
          goto LABEL_6;
        case 3:
          v4 = v3;
          sub_2380BD694();
          goto LABEL_6;
        case 4:
          v4 = v3;
          sub_2380BD6A0();
          goto LABEL_6;
        case 5:
          v4 = v3;
          sub_2380BD6B8();
          goto LABEL_6;
        case 6:
          sub_238061014();
LABEL_5:
          v4 = v3;
          sub_2380BD688();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_238054C68()
{
  type metadata accessor for LogEntry(0);
  type metadata accessor for SignedObject(0);
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  return sub_2380BD6D0();
}

uint64_t sub_238054CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (sub_238060FD0(), result = sub_2380BD76C(), !v4))
  {
    result = sub_238054EE0((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      if (*(_QWORD *)(v3[2] + 16))
        sub_2380BD778();
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_238054DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) == 0 || (sub_2380BD784(), !v3))
  {
    if (!*(_QWORD *)(v2 + 40) || (sub_2380BD79C(), !v3))
    {
      if (!*(_QWORD *)(v2 + 48) || (sub_238061014(), sub_2380BD76C(), !v3))
      {
        type metadata accessor for LogEntry(0);
        sub_2380BD5B0();
      }
    }
  }
  JUMPOUT(0x238054D90);
}

uint64_t sub_238054EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SignedObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LogEntry(0);
  sub_2380051FC(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_2568C5438);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C5438);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for SignedObject);
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for SignedObject);
}

uint64_t sub_238055058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a2 + 24) = xmmword_2380BEAE0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  sub_2380BD5BC();
  v4 = a2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for SignedObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_2380550D8()
{
  return 0x7972746E45676F4CLL;
}

uint64_t sub_2380550F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_238055130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_238055170())()
{
  return nullsub_1;
}

uint64_t sub_238055184()
{
  return sub_238054B08();
}

uint64_t sub_238055198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238054CFC(a1, a2, a3);
}

uint64_t sub_2380551AC()
{
  sub_238001820(&qword_2568C72E8, type metadata accessor for LogEntry, (uint64_t)&unk_2380C266C);
  return sub_2380BD628();
}

uint64_t sub_2380551FC@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FA0, (uint64_t)qword_2568C9DD8, a1);
}

uint64_t sub_238055218()
{
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  return sub_2380BD718();
}

uint64_t sub_238055258()
{
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  return sub_2380BD724();
}

uint64_t sub_2380552AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9DF0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9DF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2380C1670;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "logBeginningMs";
  *(_QWORD *)(v6 + 8) = 14;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = sub_2380BD7C0();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "mapHeadHash";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "application";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "changeLogHead";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "revision";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "mapType";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "treeId";
  *((_QWORD *)v20 + 1) = 6;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "timestampMs";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "populating";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return sub_2380BD7CC();
}

uint64_t sub_238055580()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
        case 7:
        case 8:
          sub_2380BD6B8();
          break;
        case 2:
          sub_2380BD6A0();
          break;
        case 3:
          sub_238001D5C();
          goto LABEL_9;
        case 4:
          sub_238055734();
          break;
        case 6:
          sub_238061058();
LABEL_9:
          sub_2380BD688();
          break;
        case 9:
          sub_2380BD67C();
          break;
        default:
          break;
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_238055734()
{
  type metadata accessor for MapHead(0);
  type metadata accessor for LogHead(0);
  sub_238001820(&qword_2568C7190, type metadata accessor for LogHead, (uint64_t)&unk_2380C280C);
  return sub_2380BD6D0();
}

uint64_t sub_2380557C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_2380BD79C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_238055A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LogHead(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MapHead(0);
  sub_2380051FC(a1 + *(int *)(v12 + 52), (uint64_t)v7, &qword_2568C7308);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C7308);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogHead);
  sub_238001820(&qword_2568C7190, type metadata accessor for LogHead, (uint64_t)&unk_2380C280C);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for LogHead);
}

uint64_t sub_238055B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_2380BEAB0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  sub_2380BD5BC();
  v4 = a2 + *(int *)(a1 + 52);
  v5 = type metadata accessor for LogHead(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_238055BFC()
{
  return 0x6461654870614DLL;
}

uint64_t sub_238055C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_238055C54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 48);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_238055C94()
{
  return sub_238055580();
}

uint64_t sub_238055CA8()
{
  return sub_2380557C8();
}

uint64_t sub_238055CBC()
{
  sub_238001820(&qword_2568C72F8, type metadata accessor for MapHead, (uint64_t)&unk_2380C2504);
  return sub_2380BD628();
}

uint64_t sub_238055D0C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FA8, (uint64_t)qword_2568C9DF0, a1);
}

uint64_t sub_238055D28()
{
  sub_238001820(&qword_2568C7158, type metadata accessor for MapHead, (uint64_t)&unk_2380C253C);
  return sub_2380BD718();
}

uint64_t sub_238055D68()
{
  sub_238001820(&qword_2568C7158, type metadata accessor for MapHead, (uint64_t)&unk_2380C253C);
  return sub_2380BD724();
}

uint64_t sub_238055DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9E08);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9E08);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "smh";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "hashesOfPeersInPathToRoot";
  *((_QWORD *)v11 + 1) = 25;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "mapLeaf";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238055F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_2380BD658();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          sub_2380BD6A0();
          break;
        case 2:
          sub_2380BD694();
          break;
        case 1:
          sub_23805CBE0(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for MapEntry, type metadata accessor for SignedObject, &qword_2568C56D0, (uint64_t)&unk_2380C2974);
          break;
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_238056054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_23805616C(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
      sub_2380BD778();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23805616C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SignedObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MapEntry(0);
  sub_2380051FC(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_2568C5438);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C5438);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for SignedObject);
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for SignedObject);
}

uint64_t sub_2380562E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a2 + 8) = xmmword_2380BEAE0;
  sub_2380BD5BC();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for SignedObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_238056350()
{
  return 0x7972746E4570614DLL;
}

uint64_t sub_238056368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238055F50(a1, a2, a3);
}

uint64_t sub_23805637C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238056054(a1, a2, a3);
}

uint64_t sub_238056390()
{
  sub_238001820(&qword_2568C7318, type metadata accessor for MapEntry, (uint64_t)&unk_2380C239C);
  return sub_2380BD628();
}

uint64_t sub_2380563E0@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FB0, (uint64_t)qword_2568C9E08, a1);
}

uint64_t sub_2380563FC()
{
  sub_238001820(&qword_2568C7138, type metadata accessor for MapEntry, (uint64_t)&unk_2380C23D4);
  return sub_2380BD718();
}

uint64_t sub_23805643C()
{
  sub_238001820(&qword_2568C7138, type metadata accessor for MapEntry, (uint64_t)&unk_2380C23D4);
  return sub_2380BD724();
}

uint64_t sub_238056490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9E20);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9E20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BFC90;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 2;
  *(_QWORD *)v7 = "mapEntry";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 3;
  *(_QWORD *)v11 = "index";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "perApplicationTreeEntry";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "topLevelTreeEntry";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238056654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for InclusionProof._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  v2 = type metadata accessor for MapEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index) = xmmword_2380BEAE0;
  v3 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  v4 = type metadata accessor for LogEntry(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v4);
  qword_2568C6B50 = v0;
  return result;
}

uint64_t sub_238056728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7328);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v1
     + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  v10 = type metadata accessor for MapEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index) = xmmword_2380BEAE0;
  v12 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  v13 = type metadata accessor for LogEntry(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  v15 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  v14(v1+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v13);
  v16 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  sub_2380051FC(v16, (uint64_t)v8, &qword_2568C7328);
  swift_beginAccess();
  sub_238005174((uint64_t)v8, v9, &qword_2568C7328);
  swift_endAccess();
  v17 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  swift_beginAccess();
  v19 = *v17;
  v18 = v17[1];
  swift_beginAccess();
  v20 = *v11;
  v21 = v11[1];
  *v11 = v19;
  v11[1] = v18;
  sub_237FFBA20(v19, v18);
  sub_237FFBAB0(v20, v21);
  v22 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v22, (uint64_t)v5, &qword_2568C5440);
  swift_beginAccess();
  sub_238005174((uint64_t)v5, v12, &qword_2568C5440);
  swift_endAccess();
  v23 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v23, (uint64_t)v5, &qword_2568C5440);
  swift_release();
  swift_beginAccess();
  sub_238005174((uint64_t)v5, v15, &qword_2568C5440);
  swift_endAccess();
  return v1;
}

uint64_t sub_238056A04()
{
  uint64_t v0;

  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry, &qword_2568C7328);
  sub_237FFBAB0(*(_QWORD *)(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index), *(_QWORD *)(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index+ 8));
  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry, &qword_2568C5440);
  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, &qword_2568C5440);
  return swift_deallocClassInstance();
}

uint64_t sub_238056A88()
{
  return type metadata accessor for InclusionProof._StorageClass(0);
}

uint64_t type metadata accessor for InclusionProof._StorageClass(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C6BA8);
}

void sub_238056AA4()
{
  unint64_t v0;
  unint64_t v1;

  sub_237FFB4E8(319, qword_2568C6BB8, (void (*)(uint64_t))type metadata accessor for MapEntry);
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, qword_2568C51D0, (void (*)(uint64_t))type metadata accessor for LogEntry);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for MapEntry(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6E10);
}

uint64_t type metadata accessor for LogEntry(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6FE0);
}

uint64_t sub_238056B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  result = sub_2380BD658();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 2:
          sub_238000400(a2, a1, a3, a4, (uint64_t)&OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry, type metadata accessor for MapEntry, &qword_2568C7138, (uint64_t)&unk_2380C23D4);
          break;
        case 3:
          sub_238056CCC();
          break;
        case 4:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
          goto LABEL_11;
        case 5:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
LABEL_11:
          sub_238000400(v11, v12, v13, v14, (uint64_t)v15, type metadata accessor for LogEntry, &qword_2568C5688, (uint64_t)&unk_2380C26A4);
          break;
        default:
          break;
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_238056CCC()
{
  swift_beginAccess();
  sub_2380BD6A0();
  return swift_endAccess();
}

uint64_t sub_238056D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  result = sub_238056E8C(a1, a2, a3, a4);
  if (!v4)
  {
    v7 = a1
       + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index;
    swift_beginAccess();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_238056E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7328);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MapEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  sub_2380051FC(v12, (uint64_t)v7, &qword_2568C7328);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C7328);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for MapEntry);
  sub_238001820(&qword_2568C7138, type metadata accessor for MapEntry, (uint64_t)&unk_2380C23D4);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for MapEntry);
}

uint64_t sub_238057018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LogEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v12, (uint64_t)v7, &qword_2568C5440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C5440);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for LogEntry);
}

uint64_t sub_2380571A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LogEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v12, (uint64_t)v7, &qword_2568C5440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C5440);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for LogEntry);
}

BOOL sub_238057330(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t *v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;

  v80 = a2;
  v76 = type metadata accessor for LogEntry(0);
  v74 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v70 = (uint64_t *)((char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56D8);
  v4 = MEMORY[0x24BDAC7A8](v75);
  v71 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v77 = (uint64_t)&v68 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v69 = (uint64_t *)((char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v8);
  v73 = (char *)&v68 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v72 = (uint64_t *)((char *)&v68 - v13);
  MEMORY[0x24BDAC7A8](v12);
  v79 = (uint64_t)&v68 - v14;
  v15 = type metadata accessor for MapEntry(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v78 = (uint64_t *)((char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7330);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7328);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v68 - v25;
  v27 = a1;
  v28 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  sub_2380051FC(v28, (uint64_t)v26, &qword_2568C7328);
  v29 = v80;
  v30 = v80
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_2380051FC((uint64_t)v26, (uint64_t)v20, &qword_2568C7328);
  sub_2380051FC(v30, v31, &qword_2568C7328);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v32((uint64_t)v20, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    sub_238005240((uint64_t)v26, &qword_2568C7328);
    v33 = v27;
    if (v32(v31, 1, v15) == 1)
    {
      sub_238005240((uint64_t)v20, &qword_2568C7328);
      goto LABEL_9;
    }
LABEL_6:
    v34 = &qword_2568C7330;
    v35 = (uint64_t)v20;
LABEL_7:
    sub_238005240(v35, v34);
    goto LABEL_20;
  }
  sub_2380051FC((uint64_t)v20, (uint64_t)v24, &qword_2568C7328);
  if (v32(v31, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    sub_238005240((uint64_t)v26, &qword_2568C7328);
    sub_237FFD540((uint64_t)v24, type metadata accessor for MapEntry);
    goto LABEL_6;
  }
  v36 = v78;
  sub_238001DE4(v31, (uint64_t)v78, type metadata accessor for MapEntry);
  v33 = v27;
  swift_retain();
  swift_retain();
  v37 = sub_23805FB04(v24, v36);
  sub_237FFD540((uint64_t)v36, type metadata accessor for MapEntry);
  sub_238005240((uint64_t)v26, &qword_2568C7328);
  sub_237FFD540((uint64_t)v24, type metadata accessor for MapEntry);
  sub_238005240((uint64_t)v20, &qword_2568C7328);
  if ((v37 & 1) == 0)
    goto LABEL_20;
LABEL_9:
  v38 = (uint64_t *)(v33
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  swift_beginAccess();
  v40 = *v38;
  v39 = v38[1];
  v41 = (uint64_t *)(v29
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  swift_beginAccess();
  v43 = *v41;
  v42 = v41[1];
  sub_237FFBA20(v40, v39);
  sub_237FFBA20(v43, v42);
  sub_238008ED0(v40, v39);
  v45 = v44;
  sub_237FFBAB0(v43, v42);
  sub_237FFBAB0(v40, v39);
  if ((v45 & 1) == 0)
    goto LABEL_20;
  v46 = v33
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  v47 = v79;
  sub_2380051FC(v46, v79, &qword_2568C5440);
  v48 = v29
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  v49 = v75;
  v50 = v77;
  v51 = v77 + *(int *)(v75 + 48);
  sub_2380051FC(v47, v77, &qword_2568C5440);
  sub_2380051FC(v48, v51, &qword_2568C5440);
  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  v53 = v76;
  if (v52(v50, 1, v76) != 1)
  {
    v56 = v72;
    sub_2380051FC(v50, (uint64_t)v72, &qword_2568C5440);
    v57 = v52(v51, 1, v53);
    v55 = (uint64_t)v73;
    if (v57 != 1)
    {
      v58 = v70;
      sub_238001DE4(v51, (uint64_t)v70, type metadata accessor for LogEntry);
      v59 = sub_23806091C(v56, v58);
      sub_237FFD540((uint64_t)v58, type metadata accessor for LogEntry);
      sub_238005240(v79, &qword_2568C5440);
      sub_237FFD540((uint64_t)v56, type metadata accessor for LogEntry);
      sub_238005240(v77, &qword_2568C5440);
      if ((v59 & 1) != 0)
        goto LABEL_17;
LABEL_20:
      swift_release();
      swift_release();
      return 0;
    }
    sub_238005240(v79, &qword_2568C5440);
    sub_237FFD540((uint64_t)v56, type metadata accessor for LogEntry);
    goto LABEL_15;
  }
  sub_238005240(v47, &qword_2568C5440);
  v54 = v52(v51, 1, v53);
  v55 = (uint64_t)v73;
  if (v54 != 1)
  {
LABEL_15:
    v34 = &qword_2568C56D8;
    v35 = v50;
    goto LABEL_7;
  }
  sub_238005240(v50, &qword_2568C5440);
LABEL_17:
  v60 = v33
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v60, v55, &qword_2568C5440);
  v61 = v29
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  v62 = v71;
  v63 = v71 + *(int *)(v49 + 48);
  sub_2380051FC(v55, v71, &qword_2568C5440);
  sub_2380051FC(v61, v63, &qword_2568C5440);
  if (v52(v62, 1, v53) == 1)
  {
    swift_release();
    swift_release();
    sub_238005240(v55, &qword_2568C5440);
    if (v52(v63, 1, v53) == 1)
    {
      sub_238005240(v62, &qword_2568C5440);
      return 1;
    }
    goto LABEL_25;
  }
  v65 = v69;
  sub_2380051FC(v62, (uint64_t)v69, &qword_2568C5440);
  if (v52(v63, 1, v53) == 1)
  {
    swift_release();
    swift_release();
    sub_238005240(v55, &qword_2568C5440);
    sub_237FFD540((uint64_t)v65, type metadata accessor for LogEntry);
LABEL_25:
    sub_238005240(v62, &qword_2568C56D8);
    return 0;
  }
  v66 = v70;
  sub_238001DE4(v63, (uint64_t)v70, type metadata accessor for LogEntry);
  v67 = sub_23806091C(v65, v66);
  swift_release();
  swift_release();
  sub_237FFD540((uint64_t)v66, type metadata accessor for LogEntry);
  sub_238005240(v55, &qword_2568C5440);
  sub_237FFD540((uint64_t)v65, type metadata accessor for LogEntry);
  sub_238005240(v62, &qword_2568C5440);
  return (v67 & 1) != 0;
}

uint64_t sub_238057C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23805BC5C(a1, &qword_2568C4FC0, &qword_2568C6B50, a2);
}

uint64_t sub_238057C2C()
{
  return 0x6F6973756C636E49;
}

uint64_t sub_238057C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805B118(a1, a2, a3, type metadata accessor for InclusionProof, (void (*)(_QWORD))type metadata accessor for InclusionProof._StorageClass, sub_238056728, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238056B7C);
}

uint64_t sub_238057C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805B2E0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for InclusionProof, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238056D50);
}

uint64_t sub_238057CA8()
{
  sub_238001820(&qword_2568C7320, type metadata accessor for InclusionProof, (uint64_t)&unk_2380C2234);
  return sub_2380BD628();
}

uint64_t sub_238057CF8@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FB8, (uint64_t)qword_2568C9E20, a1);
}

uint64_t sub_238057D14()
{
  sub_238001820(&qword_2568C7118, type metadata accessor for InclusionProof, (uint64_t)&unk_2380C226C);
  return sub_2380BD718();
}

uint64_t sub_238057D54()
{
  sub_238001820(&qword_2568C7118, type metadata accessor for InclusionProof, (uint64_t)&unk_2380C226C);
  return sub_2380BD724();
}

uint64_t sub_238057DA4(uint64_t a1, uint64_t a2)
{
  return sub_23805FF00(a1, a2, type metadata accessor for InclusionProof, (uint64_t (*)(uint64_t, uint64_t))sub_238057330) & 1;
}

uint64_t sub_238057DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9E38);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9E38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "perApplicationTreeEntry";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "topLevelTreeEntry";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_238057F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PatInclusionProof._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  v2 = type metadata accessor for LogEntry(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v2);
  qword_2568C6B58 = v0;
  return result;
}

uint64_t sub_238057FAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  v7 = type metadata accessor for LogEntry(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v9 = v1
     + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  v8(v1+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v7);
  v10 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v10, (uint64_t)v5, &qword_2568C5440);
  swift_beginAccess();
  sub_238005174((uint64_t)v5, v6, &qword_2568C5440);
  swift_endAccess();
  v11 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v11, (uint64_t)v5, &qword_2568C5440);
  swift_release();
  swift_beginAccess();
  sub_238005174((uint64_t)v5, v9, &qword_2568C5440);
  swift_endAccess();
  return v1;
}

uint64_t sub_23805813C()
{
  uint64_t v0;

  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry, &qword_2568C5440);
  sub_238005240(v0+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, &qword_2568C5440);
  return swift_deallocClassInstance();
}

uint64_t sub_238058194()
{
  return type metadata accessor for PatInclusionProof._StorageClass(0);
}

uint64_t type metadata accessor for PatInclusionProof._StorageClass(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6CF0);
}

void sub_2380581B0()
{
  unint64_t v0;

  sub_237FFB4E8(319, qword_2568C51D0, (void (*)(uint64_t))type metadata accessor for LogEntry);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t *sub_23805822C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    swift_bridgeObjectRetain();
    sub_237FFBA20(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_2380BD5C8();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v15 = *(int *)(a3 + 28);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = type metadata accessor for SignedObject(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = *v17;
      v22 = v17[1];
      sub_237FFBA20(*v17, v22);
      *v16 = v21;
      v16[1] = v22;
      v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
      v23 = *(int *)(v18 + 24);
      v24 = (_QWORD *)((char *)v16 + v23);
      v25 = (uint64_t *)((char *)v17 + v23);
      v26 = type metadata accessor for Signature(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v32 = *v25;
        v34 = v27;
        v29 = v25[1];
        sub_237FFBA20(*v25, v29);
        *v24 = v32;
        v24[1] = v29;
        v30 = v25[3];
        v33 = v25[2];
        sub_237FFBA20(v33, v30);
        v24[2] = v33;
        v24[3] = v30;
        v24[4] = v25[4];
        *((_BYTE *)v24 + 40) = *((_BYTE *)v25 + 40);
        v14((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v13);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v24, 0, 1, v26);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t type metadata accessor for SignedObject(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C6F40);
}

uint64_t type metadata accessor for Signature(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C6EA8);
}

uint64_t sub_23805847C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  sub_237FFBAB0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_2380BD5C8();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for SignedObject(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_237FFBAB0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    v11(v6 + *(int *)(v7 + 20), v5);
    v9 = v6 + *(int *)(v7 + 24);
    v10 = type metadata accessor for Signature(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      sub_237FFBAB0(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
      sub_237FFBAB0(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 28), v5);
    }
  }
  return result;
}

_QWORD *sub_238058598(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_237FFBA20(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for SignedObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    sub_237FFBA20(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
    v21 = *(int *)(v16 + 24);
    v22 = (_QWORD *)((char *)v14 + v21);
    v23 = (uint64_t *)((char *)v15 + v21);
    v24 = type metadata accessor for Signature(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v30 = *v23;
      v32 = v25;
      v27 = v23[1];
      sub_237FFBA20(*v23, v27);
      *v22 = v30;
      v22[1] = v27;
      v28 = v23[3];
      v31 = v23[2];
      sub_237FFBA20(v31, v28);
      v22[2] = v31;
      v22[3] = v28;
      v22[4] = v23[4];
      *((_BYTE *)v22 + 40) = *((_BYTE *)v23 + 40);
      v12((char *)v22 + *(int *)(v24 + 28), (char *)v23 + *(int *)(v24 + 28), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v22, 0, 1, v24);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

_QWORD *sub_23805879C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[1];
  v7 = a2[2];
  sub_237FFBA20(v6, v7);
  v8 = a1[1];
  v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_237FFBAB0(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2380BD5C8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 28);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = type metadata accessor for SignedObject(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v35 = *v18;
      v36 = v18[1];
      sub_237FFBA20(*v18, v36);
      v37 = *v17;
      v38 = v17[1];
      *v17 = v35;
      v17[1] = v36;
      sub_237FFBAB0(v37, v38);
      v15((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v13);
      v39 = *(int *)(v19 + 24);
      v40 = (uint64_t)v17 + v39;
      v41 = (char *)v18 + v39;
      v42 = type metadata accessor for Signature(0);
      v43 = *(_QWORD *)(v42 - 8);
      v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      LODWORD(v35) = v44(v40, 1, v42);
      v45 = v44((uint64_t)v41, 1, v42);
      if ((_DWORD)v35)
      {
        if (!v45)
        {
          v46 = *(_QWORD *)v41;
          v47 = *((_QWORD *)v41 + 1);
          sub_237FFBA20(*(_QWORD *)v41, v47);
          *(_QWORD *)v40 = v46;
          *(_QWORD *)(v40 + 8) = v47;
          v48 = *((_QWORD *)v41 + 2);
          v49 = *((_QWORD *)v41 + 3);
          sub_237FFBA20(v48, v49);
          *(_QWORD *)(v40 + 16) = v48;
          *(_QWORD *)(v40 + 24) = v49;
          v50 = *((_QWORD *)v41 + 4);
          *(_BYTE *)(v40 + 40) = v41[40];
          *(_QWORD *)(v40 + 32) = v50;
          (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v40 + *(int *)(v42 + 28), &v41[*(int *)(v42 + 28)], v13);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
          return a1;
        }
      }
      else
      {
        if (!v45)
        {
          v57 = *(_QWORD *)v41;
          v58 = *((_QWORD *)v41 + 1);
          sub_237FFBA20(*(_QWORD *)v41, v58);
          v59 = *(_QWORD *)v40;
          v60 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)v40 = v57;
          *(_QWORD *)(v40 + 8) = v58;
          sub_237FFBAB0(v59, v60);
          v61 = *((_QWORD *)v41 + 2);
          v62 = *((_QWORD *)v41 + 3);
          sub_237FFBA20(v61, v62);
          v63 = *(_QWORD *)(v40 + 16);
          v64 = *(_QWORD *)(v40 + 24);
          *(_QWORD *)(v40 + 16) = v61;
          *(_QWORD *)(v40 + 24) = v62;
          sub_237FFBAB0(v63, v64);
          v65 = *((_QWORD *)v41 + 4);
          *(_BYTE *)(v40 + 40) = v41[40];
          *(_QWORD *)(v40 + 32) = v65;
          v15((char *)(v40 + *(int *)(v42 + 28)), &v41[*(int *)(v42 + 28)], v13);
          return a1;
        }
        sub_237FFD540(v40, type metadata accessor for Signature);
      }
      v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
      v33 = (void *)v40;
      v34 = (uint64_t *)v41;
      goto LABEL_8;
    }
    sub_237FFD540((uint64_t)v17, type metadata accessor for SignedObject);
LABEL_7:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
    v33 = v17;
    v34 = v18;
LABEL_8:
    memcpy(v33, v34, v32);
    return a1;
  }
  if (v22)
    goto LABEL_7;
  v23 = *v18;
  v24 = v18[1];
  sub_237FFBA20(*v18, v24);
  *v17 = v23;
  v17[1] = v24;
  v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v25((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v13);
  v26 = *(int *)(v19 + 24);
  v27 = (uint64_t *)((char *)v17 + v26);
  v28 = (uint64_t *)((char *)v18 + v26);
  v29 = type metadata accessor for Signature(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v66 = v25;
    v67 = v30;
    v51 = *v28;
    v52 = v28[1];
    sub_237FFBA20(*v28, v52);
    *v27 = v51;
    v27[1] = v52;
    v53 = v28[2];
    v54 = v28[3];
    sub_237FFBA20(v53, v54);
    v27[2] = v53;
    v27[3] = v54;
    v55 = v28[4];
    *((_BYTE *)v27 + 40) = *((_BYTE *)v28 + 40);
    v27[4] = v55;
    v66((char *)v27 + *(int *)(v29 + 28), (char *)v28 + *(int *)(v29 + 28), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v27, 0, 1, v29);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_238058B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_2380BD5C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for SignedObject(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    v17 = *(int *)(v14 + 24);
    v18 = (_OWORD *)((char *)v12 + v17);
    v19 = (_OWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for Signature(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = v19[1];
      *v18 = *v19;
      v18[1] = v23;
      *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
      *((_BYTE *)v18 + 40) = *((_BYTE *)v19 + 40);
      v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *sub_238058D08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  int v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = a1[1];
  v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_237FFBAB0(v6, v7);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = type metadata accessor for SignedObject(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v31 = *v15;
      v32 = v15[1];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      sub_237FFBAB0(v31, v32);
      v13((char *)v15 + *(int *)(v17 + 20), (uint64_t)v16 + *(int *)(v17 + 20), v11);
      v33 = *(int *)(v17 + 24);
      v34 = (uint64_t)v15 + v33;
      v35 = (char *)v16 + v33;
      v36 = type metadata accessor for Signature(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          v41 = *((_OWORD *)v35 + 1);
          *(_OWORD *)v34 = *(_OWORD *)v35;
          *(_OWORD *)(v34 + 16) = v41;
          *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
          *(_BYTE *)(v34 + 40) = v35[40];
          (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v34 + *(int *)(v36 + 28), &v35[*(int *)(v36 + 28)], v11);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          v44 = *(_QWORD *)v34;
          v45 = *(_QWORD *)(v34 + 8);
          *(_OWORD *)v34 = *(_OWORD *)v35;
          sub_237FFBAB0(v44, v45);
          v46 = *(_QWORD *)(v34 + 16);
          v47 = *(_QWORD *)(v34 + 24);
          *(_OWORD *)(v34 + 16) = *((_OWORD *)v35 + 1);
          sub_237FFBAB0(v46, v47);
          *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
          *(_BYTE *)(v34 + 40) = v35[40];
          v13((char *)(v34 + *(int *)(v36 + 28)), (uint64_t)&v35[*(int *)(v36 + 28)], v11);
          return a1;
        }
        sub_237FFD540(v34, type metadata accessor for Signature);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
      v29 = (void *)v34;
      v30 = (uint64_t *)v35;
      goto LABEL_8;
    }
    sub_237FFD540((uint64_t)v15, type metadata accessor for SignedObject);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
    v29 = v15;
    v30 = v16;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v20)
    goto LABEL_7;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v11);
  v22 = *(int *)(v17 + 24);
  v23 = (_OWORD *)((char *)v15 + v22);
  v24 = (_OWORD *)((char *)v16 + v22);
  v25 = type metadata accessor for Signature(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v42 = v24[1];
    *v23 = *v24;
    v23[1] = v42;
    *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
    *((_BYTE *)v23 + 40) = *((_BYTE *)v24 + 40);
    v21((char *)v23 + *(int *)(v25 + 28), (char *)v24 + *(int *)(v25 + 28), v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_23805902C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238059038(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_2380590DC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2380590E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_238059188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2380643F4(a1, a2, a3, MEMORY[0x24BEE0158] + 64, (uint64_t)&unk_2380C1710, &qword_2568C51C8, (void (*)(uint64_t))type metadata accessor for SignedObject);
}

unint64_t sub_2380591B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_237FFBA20(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    sub_237FFBA20(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v11 = *(int *)(a3 + 28);
    v12 = a1 + v11;
    v13 = a2 + v11;
    v14 = sub_2380BD5C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_238059278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_237FFBAB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_2380592CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_237FFBA20(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_238059368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_237FFBAB0(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_237FFBA20(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  sub_237FFBAB0(v12, v13);
  v14 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  v15 = *(int *)(a3 + 28);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_238059414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_238059480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_237FFBAB0(v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_238059510()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23805951C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_2380595A4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2380595B0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_2380BD5C8();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23805962C()
{
  return sub_23806154C();
}

uint64_t *sub_238059640(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_237FFBA20(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2380BD5C8();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for Signature(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      sub_237FFBA20(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v23 = v16[2];
      v24 = v16[3];
      sub_237FFBA20(v23, v24);
      v15[2] = v23;
      v15[3] = v24;
      v15[4] = v16[4];
      *((_BYTE *)v15 + 40) = *((_BYTE *)v16 + 40);
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_2380597B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2380BD5C8();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for Signature(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_237FFBAB0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    sub_237FFBAB0(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

uint64_t *sub_238059880(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  sub_237FFBA20(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for Signature(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    sub_237FFBA20(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v21 = v15[2];
    v22 = v15[3];
    sub_237FFBA20(v21, v22);
    v14[2] = v21;
    v14[3] = v22;
    v14[4] = v15[4];
    *((_BYTE *)v14 + 40) = *((_BYTE *)v15 + 40);
    v12((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *sub_2380599C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v6 = *a2;
  v7 = a2[1];
  sub_237FFBA20(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_237FFBAB0(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2380BD5C8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 24);
  v17 = (uint64_t)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Signature(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21((uint64_t)v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v30 = *(_QWORD *)v18;
      v31 = *((_QWORD *)v18 + 1);
      sub_237FFBA20(*(_QWORD *)v18, v31);
      v32 = *(_QWORD *)v17;
      v33 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)v17 = v30;
      *(_QWORD *)(v17 + 8) = v31;
      sub_237FFBAB0(v32, v33);
      v34 = *((_QWORD *)v18 + 2);
      v35 = *((_QWORD *)v18 + 3);
      sub_237FFBA20(v34, v35);
      v36 = *(_QWORD *)(v17 + 16);
      v37 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 16) = v34;
      *(_QWORD *)(v17 + 24) = v35;
      sub_237FFBAB0(v36, v37);
      v38 = *((_QWORD *)v18 + 4);
      *(_BYTE *)(v17 + 40) = v18[40];
      *(_QWORD *)(v17 + 32) = v38;
      v15((char *)(v17 + *(int *)(v19 + 28)), &v18[*(int *)(v19 + 28)], v13);
      return a1;
    }
    sub_237FFD540(v17, type metadata accessor for Signature);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy((void *)v17, v18, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  v23 = *(_QWORD *)v18;
  v24 = *((_QWORD *)v18 + 1);
  sub_237FFBA20(*(_QWORD *)v18, v24);
  *(_QWORD *)v17 = v23;
  *(_QWORD *)(v17 + 8) = v24;
  v25 = *((_QWORD *)v18 + 2);
  v26 = *((_QWORD *)v18 + 3);
  sub_237FFBA20(v25, v26);
  *(_QWORD *)(v17 + 16) = v25;
  *(_QWORD *)(v17 + 24) = v26;
  v27 = *((_QWORD *)v18 + 4);
  *(_BYTE *)(v17 + 40) = v18[40];
  *(_QWORD *)(v17 + 32) = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v17 + *(int *)(v19 + 28), &v18[*(int *)(v19 + 28)], v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

_OWORD *sub_238059BA8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2380BD5C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Signature(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
    *((_BYTE *)v12 + 40) = *((_BYTE *)v13 + 40);
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_238059CBC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_237FFBAB0(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 24);
  v15 = (uint64_t)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Signature(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19((uint64_t)v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v24 = *(_QWORD *)v15;
      v25 = *(_QWORD *)(v15 + 8);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      sub_237FFBAB0(v24, v25);
      v26 = *(_QWORD *)(v15 + 16);
      v27 = *(_QWORD *)(v15 + 24);
      *(_OWORD *)(v15 + 16) = *((_OWORD *)v16 + 1);
      sub_237FFBAB0(v26, v27);
      *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
      *(_BYTE *)(v15 + 40) = v16[40];
      v13((char *)(v15 + *(int *)(v17 + 28)), &v16[*(int *)(v17 + 28)], v11);
      return a1;
    }
    sub_237FFD540(v15, type metadata accessor for Signature);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy((void *)v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v21;
  *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
  *(_BYTE *)(v15 + 40) = v16[40];
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v15 + *(int *)(v17 + 28), &v16[*(int *)(v17 + 28)], v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_238059E5C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238059E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_238059F18()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_238059F24(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_238059FCC()
{
  unint64_t v0;
  unint64_t v1;

  sub_2380BD5C8();
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, qword_2568C6F50, (void (*)(uint64_t))type metadata accessor for Signature);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23805A06C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[4];
    swift_bridgeObjectRetain();
    sub_237FFBA20(v7, v8);
    *(_QWORD *)(v4 + 24) = v7;
    *(_QWORD *)(v4 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v9;
    *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
    v10 = *(int *)(a3 + 36);
    v11 = (char *)(v4 + v10);
    v12 = (char *)a2 + v10;
    v13 = sub_2380BD5C8();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v15 = *(int *)(a3 + 40);
    v16 = (_QWORD *)(v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = type metadata accessor for SignedObject(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v22 = *v17;
      v23 = v17[1];
      sub_237FFBA20(*v17, v23);
      *v16 = v22;
      v16[1] = v23;
      v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
      v24 = *(int *)(v18 + 24);
      v25 = (_QWORD *)((char *)v16 + v24);
      v26 = (uint64_t *)((char *)v17 + v24);
      v27 = type metadata accessor for Signature(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v33 = *v26;
        v35 = v28;
        v30 = v26[1];
        sub_237FFBA20(*v26, v30);
        *v25 = v33;
        v25[1] = v30;
        v31 = v26[3];
        v34 = v26[2];
        sub_237FFBA20(v34, v31);
        v25[2] = v34;
        v25[3] = v31;
        v25[4] = v26[4];
        *((_BYTE *)v25 + 40) = *((_BYTE *)v26 + 40);
        v14((char *)v25 + *(int *)(v27 + 28), (char *)v26 + *(int *)(v27 + 28), v13);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v25, 0, 1, v27);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v4;
}

uint64_t sub_23805A2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  sub_237FFBAB0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_2380BD5C8();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  v7 = type metadata accessor for SignedObject(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_237FFBAB0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    v11(v6 + *(int *)(v7 + 20), v5);
    v9 = v6 + *(int *)(v7 + 24);
    v10 = type metadata accessor for Signature(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      sub_237FFBAB0(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
      sub_237FFBAB0(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 28), v5);
    }
  }
  return result;
}

uint64_t sub_23805A3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(int *)(a3 + 36);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = sub_2380BD5C8();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v14 = *(int *)(a3 + 40);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = type metadata accessor for SignedObject(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = *v16;
    v21 = v16[1];
    sub_237FFBA20(*v16, v21);
    *v15 = v20;
    v15[1] = v21;
    v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
    v22 = *(int *)(v17 + 24);
    v23 = (_QWORD *)((char *)v15 + v22);
    v24 = (uint64_t *)((char *)v16 + v22);
    v25 = type metadata accessor for Signature(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v31 = *v24;
      v33 = v26;
      v28 = v24[1];
      sub_237FFBA20(*v24, v28);
      *v23 = v31;
      v23[1] = v28;
      v29 = v24[3];
      v32 = v24[2];
      sub_237FFBA20(v32, v29);
      v23[2] = v32;
      v23[3] = v29;
      v23[4] = v24[4];
      *((_BYTE *)v23 + 40) = *((_BYTE *)v24 + 40);
      v13((char *)v23 + *(int *)(v25 + 28), (char *)v24 + *(int *)(v25 + 28), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v23, 0, 1, v25);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t sub_23805A5FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a2[3];
  v8 = a2[4];
  sub_237FFBA20(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  sub_237FFBAB0(v9, v10);
  *(_QWORD *)(a1 + 40) = a2[5];
  v11 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = sub_2380BD5C8();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v18 = *(int *)(a3 + 40);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = type metadata accessor for SignedObject(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v14) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v14)
  {
    if (!v24)
    {
      v37 = *v20;
      v38 = v20[1];
      sub_237FFBA20(*v20, v38);
      v39 = *v19;
      v40 = v19[1];
      *v19 = v37;
      v19[1] = v38;
      sub_237FFBAB0(v39, v40);
      v17((uint64_t)v19 + *(int *)(v21 + 20), (uint64_t)v20 + *(int *)(v21 + 20), v15);
      v41 = *(int *)(v21 + 24);
      v42 = (uint64_t)v19 + v41;
      v43 = (char *)v20 + v41;
      v44 = type metadata accessor for Signature(0);
      v45 = *(_QWORD *)(v44 - 8);
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
      LODWORD(v37) = v46(v42, 1, v44);
      v47 = v46((uint64_t)v43, 1, v44);
      if ((_DWORD)v37)
      {
        if (!v47)
        {
          v48 = *(_QWORD *)v43;
          v49 = *((_QWORD *)v43 + 1);
          sub_237FFBA20(*(_QWORD *)v43, v49);
          *(_QWORD *)v42 = v48;
          *(_QWORD *)(v42 + 8) = v49;
          v50 = *((_QWORD *)v43 + 2);
          v51 = *((_QWORD *)v43 + 3);
          sub_237FFBA20(v50, v51);
          *(_QWORD *)(v42 + 16) = v50;
          *(_QWORD *)(v42 + 24) = v51;
          v52 = *((_QWORD *)v43 + 4);
          *(_BYTE *)(v42 + 40) = v43[40];
          *(_QWORD *)(v42 + 32) = v52;
          (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v42 + *(int *)(v44 + 28), &v43[*(int *)(v44 + 28)], v15);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
          return a1;
        }
      }
      else
      {
        if (!v47)
        {
          v59 = *(_QWORD *)v43;
          v60 = *((_QWORD *)v43 + 1);
          sub_237FFBA20(*(_QWORD *)v43, v60);
          v61 = *(_QWORD *)v42;
          v62 = *(_QWORD *)(v42 + 8);
          *(_QWORD *)v42 = v59;
          *(_QWORD *)(v42 + 8) = v60;
          sub_237FFBAB0(v61, v62);
          v63 = *((_QWORD *)v43 + 2);
          v64 = *((_QWORD *)v43 + 3);
          sub_237FFBA20(v63, v64);
          v65 = *(_QWORD *)(v42 + 16);
          v66 = *(_QWORD *)(v42 + 24);
          *(_QWORD *)(v42 + 16) = v63;
          *(_QWORD *)(v42 + 24) = v64;
          sub_237FFBAB0(v65, v66);
          v67 = *((_QWORD *)v43 + 4);
          *(_BYTE *)(v42 + 40) = v43[40];
          *(_QWORD *)(v42 + 32) = v67;
          v17(v42 + *(int *)(v44 + 28), (uint64_t)&v43[*(int *)(v44 + 28)], v15);
          return a1;
        }
        sub_237FFD540(v42, type metadata accessor for Signature);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
      v35 = (void *)v42;
      v36 = (uint64_t *)v43;
      goto LABEL_8;
    }
    sub_237FFD540((uint64_t)v19, type metadata accessor for SignedObject);
LABEL_7:
    v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
    v35 = v19;
    v36 = v20;
LABEL_8:
    memcpy(v35, v36, v34);
    return a1;
  }
  if (v24)
    goto LABEL_7;
  v25 = *v20;
  v26 = v20[1];
  sub_237FFBA20(*v20, v26);
  *v19 = v25;
  v19[1] = v26;
  v27 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v27((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v15);
  v28 = *(int *)(v21 + 24);
  v29 = (uint64_t *)((char *)v19 + v28);
  v30 = (uint64_t *)((char *)v20 + v28);
  v31 = type metadata accessor for Signature(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v68 = v27;
    v69 = v32;
    v53 = *v30;
    v54 = v30[1];
    sub_237FFBA20(*v30, v54);
    *v29 = v53;
    v29[1] = v54;
    v55 = v30[2];
    v56 = v30[3];
    sub_237FFBA20(v55, v56);
    v29[2] = v55;
    v29[3] = v56;
    v57 = v30[4];
    *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
    v29[4] = v57;
    v68((char *)v29 + *(int *)(v31 + 28), (char *)v30 + *(int *)(v31 + 28), v15);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v29, 0, 1, v31);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t sub_23805A9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(int *)(a3 + 36);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 24) = v6;
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 40);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = type metadata accessor for SignedObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
    v19 = *(int *)(v16 + 24);
    v20 = (_OWORD *)((char *)v14 + v19);
    v21 = (_OWORD *)((char *)v15 + v19);
    v22 = type metadata accessor for Signature(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v25 = v21[1];
      *v20 = *v21;
      v20[1] = v25;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
      *((_BYTE *)v20 + 40) = *((_BYTE *)v21 + 40);
      v12((char *)v20 + *(int *)(v22 + 28), (char *)v21 + *(int *)(v22 + 28), v11);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_23805ABB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t *, uint64_t, uint64_t);
  int v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_237FFBAB0(v6, v7);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_2380BD5C8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  v15 = *(int *)(a3 + 40);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = type metadata accessor for SignedObject(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v11) = v20(v16, 1, v18);
  v21 = v20(v17, 1, v18);
  if (!(_DWORD)v11)
  {
    if (!v21)
    {
      v32 = *v16;
      v33 = v16[1];
      *(_OWORD *)v16 = *(_OWORD *)v17;
      sub_237FFBAB0(v32, v33);
      v14((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v12);
      v34 = *(int *)(v18 + 24);
      v35 = (uint64_t)v16 + v34;
      v36 = (char *)v17 + v34;
      v37 = type metadata accessor for Signature(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, v37);
      v41 = v39((uint64_t)v36, 1, v37);
      if (v40)
      {
        if (!v41)
        {
          v42 = *((_OWORD *)v36 + 1);
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_OWORD *)(v35 + 16) = v42;
          *(_QWORD *)(v35 + 32) = *((_QWORD *)v36 + 4);
          *(_BYTE *)(v35 + 40) = v36[40];
          (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v35 + *(int *)(v37 + 28), &v36[*(int *)(v37 + 28)], v12);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v45 = *(_QWORD *)v35;
          v46 = *(_QWORD *)(v35 + 8);
          *(_OWORD *)v35 = *(_OWORD *)v36;
          sub_237FFBAB0(v45, v46);
          v47 = *(_QWORD *)(v35 + 16);
          v48 = *(_QWORD *)(v35 + 24);
          *(_OWORD *)(v35 + 16) = *((_OWORD *)v36 + 1);
          sub_237FFBAB0(v47, v48);
          *(_QWORD *)(v35 + 32) = *((_QWORD *)v36 + 4);
          *(_BYTE *)(v35 + 40) = v36[40];
          v14(v35 + *(int *)(v37 + 28), (uint64_t)&v36[*(int *)(v37 + 28)], v12);
          return a1;
        }
        sub_237FFD540(v35, type metadata accessor for Signature);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
      v30 = (void *)v35;
      v31 = (uint64_t *)v36;
      goto LABEL_8;
    }
    sub_237FFD540((uint64_t)v16, type metadata accessor for SignedObject);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
    v30 = v16;
    v31 = v17;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v21)
    goto LABEL_7;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v12);
  v23 = *(int *)(v18 + 24);
  v24 = (_OWORD *)((char *)v16 + v23);
  v25 = (_OWORD *)((char *)v17 + v23);
  v26 = type metadata accessor for Signature(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v43 = v25[1];
    *v24 = *v25;
    v24[1] = v43;
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    *((_BYTE *)v24 + 40) = *((_BYTE *)v25 + 40);
    v22((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v12);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_23805AEF4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23805AF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23805AFA4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23805AFB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_23805B050()
{
  unint64_t v0;
  unint64_t v1;

  sub_2380BD5C8();
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, &qword_2568C51C8, (void (*)(uint64_t))type metadata accessor for SignedObject);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23805B118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    v14 = swift_retain();
    *(_QWORD *)(v7 + v13) = a6(v14);
    swift_release();
  }
  v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t sub_23805B1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  result = sub_2380BD658();
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        v11 = a2;
        v12 = a1;
        v13 = a3;
        v14 = a4;
        v15 = &OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
        goto LABEL_5;
      }
LABEL_6:
      result = sub_2380BD658();
    }
    v11 = a2;
    v12 = a1;
    v13 = a3;
    v14 = a4;
    v15 = &OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
LABEL_5:
    sub_238000400(v11, v12, v13, v14, (uint64_t)v15, type metadata accessor for LogEntry, &qword_2568C5688, (uint64_t)&unk_2380C26A4);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_23805B2E0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  a4(0);
  v10 = swift_retain();
  a5(v10, a1, a2, a3);
  result = swift_release();
  if (!v5)
    return sub_2380BD5B0();
  return result;
}

uint64_t sub_23805B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  result = sub_23805B3C0(a1, a2, a3, a4);
  if (!v4)
    return sub_23805B54C(a1, a2, a3, a4);
  return result;
}

uint64_t sub_23805B3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LogEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v12, (uint64_t)v7, &qword_2568C5440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C5440);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for LogEntry);
}

uint64_t sub_23805B54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LogEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v12, (uint64_t)v7, &qword_2568C5440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C5440);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for LogEntry);
}

BOOL sub_23805B6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v40;
  char v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v4 = type metadata accessor for LogEntry(0);
  v48 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v43 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56D8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v46 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v42 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5440);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v42 = (_QWORD **)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x24BDAC7A8](v12);
  v45 = (uint64_t)&v42 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v47 = (_QWORD **)((char *)&v42 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v42 - v18;
  v20 = a1;
  v21 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_2380051FC(v21, (uint64_t)v19, &qword_2568C5440);
  v22 = a2
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  v44 = v6;
  v23 = *(int *)(v6 + 48);
  v24 = v4;
  v25 = (uint64_t)&v10[v23];
  sub_2380051FC((uint64_t)v19, (uint64_t)v10, &qword_2568C5440);
  sub_2380051FC(v22, v25, &qword_2568C5440);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v26((uint64_t)v10, 1, v4) != 1)
  {
    v28 = a2;
    v30 = v47;
    sub_2380051FC((uint64_t)v10, (uint64_t)v47, &qword_2568C5440);
    if (v26(v25, 1, v24) != 1)
    {
      v31 = v43;
      sub_238001DE4(v25, (uint64_t)v43, type metadata accessor for LogEntry);
      v29 = v20;
      swift_retain();
      swift_retain();
      v32 = sub_23806091C(v30, v31);
      sub_237FFD540((uint64_t)v31, type metadata accessor for LogEntry);
      sub_238005240((uint64_t)v19, &qword_2568C5440);
      sub_237FFD540((uint64_t)v30, type metadata accessor for LogEntry);
      sub_238005240((uint64_t)v10, &qword_2568C5440);
      if ((v32 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_238005240((uint64_t)v19, &qword_2568C5440);
    sub_237FFD540((uint64_t)v30, type metadata accessor for LogEntry);
LABEL_6:
    sub_238005240((uint64_t)v10, &qword_2568C56D8);
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  sub_238005240((uint64_t)v19, &qword_2568C5440);
  v27 = v26(v25, 1, v4);
  v28 = a2;
  v29 = v20;
  if (v27 != 1)
    goto LABEL_6;
  sub_238005240((uint64_t)v10, &qword_2568C5440);
LABEL_9:
  v33 = v29
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  v34 = v45;
  sub_2380051FC(v33, v45, &qword_2568C5440);
  v35 = v28
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  v36 = v46;
  v37 = v46 + *(int *)(v44 + 48);
  sub_2380051FC(v34, v46, &qword_2568C5440);
  sub_2380051FC(v35, v37, &qword_2568C5440);
  if (v26(v36, 1, v24) == 1)
  {
    swift_release();
    swift_release();
    sub_238005240(v34, &qword_2568C5440);
    if (v26(v37, 1, v24) == 1)
    {
      sub_238005240(v36, &qword_2568C5440);
      return 1;
    }
    goto LABEL_14;
  }
  v38 = v42;
  sub_2380051FC(v36, (uint64_t)v42, &qword_2568C5440);
  if (v26(v37, 1, v24) == 1)
  {
    swift_release();
    swift_release();
    sub_238005240(v34, &qword_2568C5440);
    sub_237FFD540((uint64_t)v38, type metadata accessor for LogEntry);
LABEL_14:
    sub_238005240(v36, &qword_2568C56D8);
    return 0;
  }
  v40 = v43;
  sub_238001DE4(v37, (uint64_t)v43, type metadata accessor for LogEntry);
  v41 = sub_23806091C(v38, v40);
  swift_release();
  swift_release();
  sub_237FFD540((uint64_t)v40, type metadata accessor for LogEntry);
  sub_238005240(v34, &qword_2568C5440);
  sub_237FFD540((uint64_t)v38, type metadata accessor for LogEntry);
  sub_238005240(v36, &qword_2568C5440);
  return (v41 & 1) != 0;
}

uint64_t sub_23805BC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23805BC5C(a1, &qword_2568C4FD0, &qword_2568C6B58, a2);
}

uint64_t sub_23805BC5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;

  sub_2380BD5BC();
  v8 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

unint64_t sub_23805BCC4()
{
  return 0xD000000000000011;
}

uint64_t sub_23805BCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805B118(a1, a2, a3, type metadata accessor for PatInclusionProof, (void (*)(_QWORD))type metadata accessor for PatInclusionProof._StorageClass, sub_238057FAC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23805B1F8);
}

uint64_t sub_23805BD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805B2E0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PatInclusionProof, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23805B374);
}

uint64_t sub_23805BD38()
{
  sub_238001820(&qword_2568C7338, type metadata accessor for PatInclusionProof, (uint64_t)&unk_2380C20CC);
  return sub_2380BD628();
}

uint64_t sub_23805BD88@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FC8, (uint64_t)qword_2568C9E38, a1);
}

uint64_t sub_23805BDA4()
{
  sub_238001820(&qword_2568C70F8, type metadata accessor for PatInclusionProof, (uint64_t)&unk_2380C2104);
  return sub_2380BD718();
}

uint64_t sub_23805BDE4()
{
  sub_238001820(&qword_2568C70F8, type metadata accessor for PatInclusionProof, (uint64_t)&unk_2380C2104);
  return sub_2380BD724();
}

uint64_t sub_23805BE34(uint64_t a1, uint64_t a2)
{
  return sub_23805FF00(a1, a2, type metadata accessor for PatInclusionProof, (uint64_t (*)(uint64_t, uint64_t))sub_23805B6D8) & 1;
}

uint64_t sub_23805BE5C(uint64_t a1)
{
  return sub_23805C364(a1, qword_2568C9E50, 1, (uint64_t)"mutation", 8);
}

uint64_t sub_23805BE78()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_2380BD658();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_2380BD6A0();
  }
  return result;
}

void sub_23805BEE4()
{
  __asm { BR              X10 }
}

uint64_t sub_23805BF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_2380BD784(), !v2))
  {
    type metadata accessor for ChangeLogNodeV2(0);
    return sub_2380BD5B0();
  }
  return result;
}

uint64_t sub_23805BFB8@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_2380BEAE0;
  return sub_2380BD5BC();
}

uint64_t sub_23805BFE0()
{
  return 0x6F4C65676E616843;
}

uint64_t sub_23805C004()
{
  return sub_23805BE78();
}

void sub_23805C018()
{
  sub_23805BEE4();
}

uint64_t sub_23805C02C()
{
  sub_238001820(&qword_2568C7340, type metadata accessor for ChangeLogNodeV2, (uint64_t)&unk_2380C1F64);
  return sub_2380BD628();
}

uint64_t sub_23805C07C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FD8, (uint64_t)qword_2568C9E50, a1);
}

uint64_t sub_23805C098()
{
  sub_238001820(&qword_2568C70D8, type metadata accessor for ChangeLogNodeV2, (uint64_t)&unk_2380C1F9C);
  return sub_2380BD718();
}

uint64_t sub_23805C0D8()
{
  sub_238001820(&qword_2568C70D8, type metadata accessor for ChangeLogNodeV2, (uint64_t)&unk_2380C1F9C);
  return sub_2380BD724();
}

uint64_t sub_23805C12C(uint64_t a1)
{
  return sub_23805C364(a1, qword_2568C9E68, 2, (uint64_t)"objectMapHead", 13);
}

uint64_t sub_23805C148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_2380BD658();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
        sub_23805C500(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PerApplicationTreeNode);
      result = sub_2380BD658();
    }
  }
  return result;
}

unint64_t sub_23805C1DC()
{
  return 0xD000000000000016;
}

uint64_t sub_23805C1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805C148(a1, a2, a3);
}

uint64_t sub_23805C20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805C594(a1, a2, a3, type metadata accessor for PerApplicationTreeNode, 2);
}

uint64_t sub_23805C22C()
{
  sub_238001820(&qword_2568C7348, type metadata accessor for PerApplicationTreeNode, (uint64_t)&unk_2380C1DFC);
  return sub_2380BD628();
}

uint64_t sub_23805C27C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FE0, (uint64_t)qword_2568C9E68, a1);
}

uint64_t sub_23805C298()
{
  sub_238001820(&qword_2568C70B8, type metadata accessor for PerApplicationTreeNode, (uint64_t)&unk_2380C1E34);
  return sub_2380BD718();
}

uint64_t sub_23805C2D8()
{
  sub_238001820(&qword_2568C70B8, type metadata accessor for PerApplicationTreeNode, (uint64_t)&unk_2380C1E34);
  return sub_2380BD724();
}

uint64_t sub_23805C328(uint64_t a1, uint64_t a2)
{
  return sub_23805F5FC(a1, a2, type metadata accessor for PerApplicationTreeNode) & 1;
}

uint64_t sub_23805C348(uint64_t a1)
{
  return sub_23805C364(a1, qword_2568C9E80, 1, (uint64_t)"patHead", 7);
}

uint64_t sub_23805C364(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2380BEAC0;
  v14 = v13 + v12 + *(int *)(v10 + 48);
  *(_QWORD *)(v13 + v12) = a3;
  *(_QWORD *)v14 = a4;
  *(_QWORD *)(v14 + 8) = a5;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x24BE5C318];
  v16 = sub_2380BD7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  return sub_2380BD7CC();
}

uint64_t sub_23805C470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_2380BD658();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 1)
        sub_23805C500(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for TopLevelTreeNode);
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_23805C500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for SignedObject(0);
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  return sub_2380BD6D0();
}

uint64_t sub_23805C594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  result = sub_23805C5F0(v5, a1, a2, a3, a4, a5);
  if (!v6)
    return sub_2380BD5B0();
  return result;
}

uint64_t sub_23805C5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[4];

  v17[0] = a6;
  v17[1] = a3;
  v17[3] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SignedObject(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a5(0);
  sub_2380051FC(a1 + *(int *)(v15 + 20), (uint64_t)v10, &qword_2568C5438);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_238005240((uint64_t)v10, &qword_2568C5438);
  sub_238001DE4((uint64_t)v10, (uint64_t)v14, type metadata accessor for SignedObject);
  sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v14, type metadata accessor for SignedObject);
}

uint64_t sub_23805C76C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  sub_2380BD5BC();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for SignedObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t sub_23805C7B8()
{
  return 0xD000000000000010;
}

uint64_t sub_23805C7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805C470(a1, a2, a3);
}

uint64_t sub_23805C7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805C594(a1, a2, a3, type metadata accessor for TopLevelTreeNode, 1);
}

uint64_t sub_23805C808()
{
  sub_238001820(&qword_2568C7350, type metadata accessor for TopLevelTreeNode, (uint64_t)&unk_2380C1C94);
  return sub_2380BD628();
}

uint64_t sub_23805C858@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FE8, (uint64_t)qword_2568C9E80, a1);
}

uint64_t sub_23805C874()
{
  sub_238001820(&qword_2568C7098, type metadata accessor for TopLevelTreeNode, (uint64_t)&unk_2380C1CCC);
  return sub_2380BD718();
}

uint64_t sub_23805C8B4()
{
  sub_238001820(&qword_2568C7098, type metadata accessor for TopLevelTreeNode, (uint64_t)&unk_2380C1CCC);
  return sub_2380BD724();
}

uint64_t sub_23805C904(uint64_t a1, uint64_t a2)
{
  return sub_23805F5FC(a1, a2, type metadata accessor for TopLevelTreeNode) & 1;
}

uint64_t sub_23805C924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9E98);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9E98);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "vrfPublicKey";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "publicKeyBytes";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "earliestVersion";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_23805CAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = sub_2380BD658();
  v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v12 = v11;
        sub_2380BD6A0();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v12 = v11;
        sub_23805CBE0(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PerApplicationTreeConfigNode, type metadata accessor for VRFPublicKey, &qword_2568C71E8, (uint64_t)&unk_2380C2C6C);
        goto LABEL_5;
      }
LABEL_6:
      result = sub_2380BD658();
    }
    sub_238001D18();
    v12 = v11;
    sub_2380BD688();
LABEL_5:
    v11 = v12;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_23805CBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  sub_238001820(a7, a6, a8);
  return sub_2380BD6D0();
}

uint64_t sub_23805CC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_23805CDC0(v3, a1, a2, a3);
  if (!v4)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23805CDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for VRFPublicKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PerApplicationTreeConfigNode(0);
  sub_2380051FC(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_2568C7360);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_238005240((uint64_t)v7, &qword_2568C7360);
  sub_238001DE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for VRFPublicKey);
  sub_238001820(&qword_2568C71E8, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2C6C);
  sub_2380BD7B4();
  return sub_237FFD540((uint64_t)v11, type metadata accessor for VRFPublicKey);
}

uint64_t sub_23805CF34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a2 = xmmword_2380BEAE0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  sub_2380BD5BC();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for VRFPublicKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t sub_23805CFA0()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_23805CFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805CAB8(a1, a2, a3);
}

uint64_t sub_23805CFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23805CC84(a1, a2, a3);
}

uint64_t sub_23805CFE4()
{
  sub_238001820(&qword_2568C7358, type metadata accessor for PerApplicationTreeConfigNode, (uint64_t)&unk_2380C1B2C);
  return sub_2380BD628();
}

uint64_t sub_23805D034@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FF0, (uint64_t)qword_2568C9E98, a1);
}

uint64_t sub_23805D050()
{
  sub_238001820(&qword_2568C7078, type metadata accessor for PerApplicationTreeConfigNode, (uint64_t)&unk_2380C1B64);
  return sub_2380BD718();
}

uint64_t sub_23805D090()
{
  sub_238001820(&qword_2568C7078, type metadata accessor for PerApplicationTreeConfigNode, (uint64_t)&unk_2380C1B64);
  return sub_2380BD724();
}

uint64_t sub_23805D0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9EB0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9EB0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "publicKeyBytes";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 3;
  *(_QWORD *)v11 = "earliestVersion";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_23805D238()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_238001D18();
        sub_2380BD688();
      }
      else if (result == 1)
      {
        sub_2380BD6A0();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

void sub_23805D318()
{
  __asm { BR              X10 }
}

uint64_t sub_23805D378(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void (*v5)(_QWORD);

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_2380BD784(), !v2))
  {
    if (!*(_QWORD *)(v3 + 16) || (v4(result, a2), result = sub_2380BD76C(), !v2))
    {
      v5(0);
      return sub_2380BD5B0();
    }
  }
  return result;
}

uint64_t sub_23805D458@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2380BEAE0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return sub_2380BD5BC();
}

unint64_t sub_23805D48C()
{
  return 0xD000000000000016;
}

uint64_t sub_23805D4A8()
{
  return sub_23805D238();
}

void sub_23805D4BC()
{
  sub_23805D318();
}

uint64_t sub_23805D4EC()
{
  sub_238001820(&qword_2568C7370, type metadata accessor for TopLevelTreeConfigNode, (uint64_t)&unk_2380C19C4);
  return sub_2380BD628();
}

uint64_t sub_23805D53C@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C4FF8, (uint64_t)qword_2568C9EB0, a1);
}

uint64_t sub_23805D558()
{
  sub_238001820(&qword_2568C7058, type metadata accessor for TopLevelTreeConfigNode, (uint64_t)&unk_2380C19FC);
  return sub_2380BD718();
}

uint64_t sub_23805D598()
{
  sub_238001820(&qword_2568C7058, type metadata accessor for TopLevelTreeConfigNode, (uint64_t)&unk_2380C19FC);
  return sub_2380BD724();
}

uint64_t sub_23805D5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_2380BD7E4();
  __swift_allocate_value_buffer(v0, qword_2568C9EC8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9EC8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5690);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5698);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "timestampMs";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_2380BD7C0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 3;
  *(_QWORD *)v11 = "earliestVersionForNextTree";
  *((_QWORD *)v11 + 1) = 26;
  v11[16] = 2;
  v10();
  return sub_2380BD7CC();
}

uint64_t sub_23805D740()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_2380BD658();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_238001D18();
        sub_2380BD688();
      }
      else if (result == 1)
      {
        sub_2380BD6B8();
      }
      result = sub_2380BD658();
    }
  }
  return result;
}

uint64_t sub_23805D820()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_2380BD79C(), !v1))
  {
    if (!v0[1] || (sub_238001D18(), result = sub_2380BD76C(), !v1))
    {
      type metadata accessor for LogClosedNode(0);
      return sub_2380BD5B0();
    }
  }
  return result;
}

uint64_t sub_23805D900@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return sub_2380BD5BC();
}

uint64_t sub_23805D928()
{
  return 0x65736F6C43676F4CLL;
}

uint64_t sub_23805D94C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23805D98C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_23805D9CC()
{
  return sub_23805D740();
}

uint64_t sub_23805D9E0()
{
  return sub_23805D820();
}

uint64_t sub_23805D9F4()
{
  sub_238001820(qword_2568C7378, type metadata accessor for LogClosedNode, (uint64_t)&unk_2380C185C);
  return sub_2380BD628();
}

uint64_t sub_23805DA44@<X0>(uint64_t a1@<X8>)
{
  return sub_237FF9298(&qword_2568C5000, (uint64_t)qword_2568C9EC8, a1);
}

uint64_t sub_23805DA60()
{
  sub_238001820(&qword_2568C7038, type metadata accessor for LogClosedNode, (uint64_t)&unk_2380C1894);
  return sub_2380BD718();
}

uint64_t sub_23805DAA0()
{
  sub_238001820(&qword_2568C7038, type metadata accessor for LogClosedNode, (uint64_t)&unk_2380C1894);
  return sub_2380BD724();
}

uint64_t sub_23805DAF4()
{
  return sub_238001820(&qword_2568C7030, type metadata accessor for LogClosedNode, (uint64_t)&unk_2380C17A4);
}

uint64_t type metadata accessor for LogClosedNode(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7958);
}

uint64_t sub_23805DB34()
{
  return sub_238001820(&qword_2568C7038, type metadata accessor for LogClosedNode, (uint64_t)&unk_2380C1894);
}

uint64_t sub_23805DB60()
{
  return sub_238001820(&qword_2568C7040, type metadata accessor for LogClosedNode, (uint64_t)&unk_2380C17CC);
}

uint64_t sub_23805DB8C()
{
  return sub_238001820(&qword_2568C7048, type metadata accessor for LogClosedNode, (uint64_t)&unk_2380C180C);
}

uint64_t sub_23805DBB8()
{
  return sub_238001820(&qword_2568C7050, type metadata accessor for TopLevelTreeConfigNode, (uint64_t)&unk_2380C190C);
}

uint64_t type metadata accessor for TopLevelTreeConfigNode(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C78C0);
}

uint64_t sub_23805DBF8()
{
  return sub_238001820(&qword_2568C7058, type metadata accessor for TopLevelTreeConfigNode, (uint64_t)&unk_2380C19FC);
}

uint64_t sub_23805DC24()
{
  return sub_238001820(&qword_2568C7060, type metadata accessor for TopLevelTreeConfigNode, (uint64_t)&unk_2380C1934);
}

uint64_t sub_23805DC50()
{
  return sub_238001820(&qword_2568C7068, type metadata accessor for TopLevelTreeConfigNode, (uint64_t)&unk_2380C1974);
}

uint64_t sub_23805DC7C()
{
  return sub_238001820(&qword_2568C7070, type metadata accessor for PerApplicationTreeConfigNode, (uint64_t)&unk_2380C1A74);
}

uint64_t type metadata accessor for PerApplicationTreeConfigNode(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C7820);
}

uint64_t sub_23805DCBC()
{
  return sub_238001820(&qword_2568C7078, type metadata accessor for PerApplicationTreeConfigNode, (uint64_t)&unk_2380C1B64);
}

uint64_t sub_23805DCE8()
{
  return sub_238001820(&qword_2568C7080, type metadata accessor for PerApplicationTreeConfigNode, (uint64_t)&unk_2380C1A9C);
}

uint64_t sub_23805DD14()
{
  return sub_238001820(&qword_2568C7088, type metadata accessor for PerApplicationTreeConfigNode, (uint64_t)&unk_2380C1ADC);
}

uint64_t sub_23805DD40()
{
  return sub_238001820(&qword_2568C7090, type metadata accessor for TopLevelTreeNode, (uint64_t)&unk_2380C1BDC);
}

uint64_t type metadata accessor for TopLevelTreeNode(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7790);
}

uint64_t sub_23805DD80()
{
  return sub_238001820(&qword_2568C7098, type metadata accessor for TopLevelTreeNode, (uint64_t)&unk_2380C1CCC);
}

uint64_t sub_23805DDAC()
{
  return sub_238001820(&qword_2568C70A0, type metadata accessor for TopLevelTreeNode, (uint64_t)&unk_2380C1C04);
}

uint64_t sub_23805DDD8()
{
  return sub_238001820(&qword_2568C70A8, type metadata accessor for TopLevelTreeNode, (uint64_t)&unk_2380C1C44);
}

uint64_t sub_23805DE04()
{
  return sub_238001820(&qword_2568C70B0, type metadata accessor for PerApplicationTreeNode, (uint64_t)&unk_2380C1D44);
}

uint64_t type metadata accessor for PerApplicationTreeNode(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7700);
}

uint64_t sub_23805DE44()
{
  return sub_238001820(&qword_2568C70B8, type metadata accessor for PerApplicationTreeNode, (uint64_t)&unk_2380C1E34);
}

uint64_t sub_23805DE70()
{
  return sub_238001820(&qword_2568C70C0, type metadata accessor for PerApplicationTreeNode, (uint64_t)&unk_2380C1D6C);
}

uint64_t sub_23805DE9C()
{
  return sub_238001820(&qword_2568C70C8, type metadata accessor for PerApplicationTreeNode, (uint64_t)&unk_2380C1DAC);
}

uint64_t sub_23805DEC8()
{
  return sub_238001820(&qword_2568C70D0, type metadata accessor for ChangeLogNodeV2, (uint64_t)&unk_2380C1EAC);
}

uint64_t type metadata accessor for ChangeLogNodeV2(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7670);
}

uint64_t sub_23805DF08()
{
  return sub_238001820(&qword_2568C70D8, type metadata accessor for ChangeLogNodeV2, (uint64_t)&unk_2380C1F9C);
}

uint64_t sub_23805DF34()
{
  return sub_238001820(&qword_2568C70E0, type metadata accessor for ChangeLogNodeV2, (uint64_t)&unk_2380C1ED4);
}

uint64_t sub_23805DF60()
{
  return sub_238001820(&qword_2568C70E8, type metadata accessor for ChangeLogNodeV2, (uint64_t)&unk_2380C1F14);
}

uint64_t sub_23805DF8C()
{
  return sub_238001820(&qword_2568C70F0, type metadata accessor for PatInclusionProof, (uint64_t)&unk_2380C2014);
}

uint64_t type metadata accessor for PatInclusionProof(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7A80);
}

uint64_t sub_23805DFCC()
{
  return sub_238001820(&qword_2568C70F8, type metadata accessor for PatInclusionProof, (uint64_t)&unk_2380C2104);
}

uint64_t sub_23805DFF8()
{
  return sub_238001820(&qword_2568C7100, type metadata accessor for PatInclusionProof, (uint64_t)&unk_2380C203C);
}

uint64_t sub_23805E024()
{
  return sub_238001820(&qword_2568C7108, type metadata accessor for PatInclusionProof, (uint64_t)&unk_2380C207C);
}

uint64_t sub_23805E050()
{
  return sub_238001820(&qword_2568C7110, type metadata accessor for InclusionProof, (uint64_t)&unk_2380C217C);
}

uint64_t type metadata accessor for InclusionProof(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C79F0);
}

uint64_t sub_23805E090()
{
  return sub_238001820(&qword_2568C7118, type metadata accessor for InclusionProof, (uint64_t)&unk_2380C226C);
}

uint64_t sub_23805E0BC()
{
  return sub_238001820(&qword_2568C7120, type metadata accessor for InclusionProof, (uint64_t)&unk_2380C21A4);
}

uint64_t sub_23805E0E8()
{
  return sub_238001820(&qword_2568C7128, type metadata accessor for InclusionProof, (uint64_t)&unk_2380C21E4);
}

uint64_t sub_23805E114()
{
  return sub_238001820(&qword_2568C7130, type metadata accessor for MapEntry, (uint64_t)&unk_2380C22E4);
}

uint64_t sub_23805E140()
{
  return sub_238001820(&qword_2568C7138, type metadata accessor for MapEntry, (uint64_t)&unk_2380C23D4);
}

uint64_t sub_23805E16C()
{
  return sub_238001820(&qword_2568C7140, type metadata accessor for MapEntry, (uint64_t)&unk_2380C230C);
}

uint64_t sub_23805E198()
{
  return sub_238001820(&qword_2568C7148, type metadata accessor for MapEntry, (uint64_t)&unk_2380C234C);
}

uint64_t sub_23805E1C4()
{
  return sub_238001820(&qword_2568C7150, type metadata accessor for MapHead, (uint64_t)&unk_2380C244C);
}

uint64_t type metadata accessor for MapHead(uint64_t a1)
{
  return sub_238001B1C(a1, (uint64_t *)&unk_2568C75B8);
}

uint64_t sub_23805E204()
{
  return sub_238001820(&qword_2568C7158, type metadata accessor for MapHead, (uint64_t)&unk_2380C253C);
}

uint64_t sub_23805E230()
{
  return sub_238001820(&qword_2568C7160, type metadata accessor for MapHead, (uint64_t)&unk_2380C2474);
}

uint64_t sub_23805E25C()
{
  return sub_238001820(&qword_2568C7168, type metadata accessor for MapHead, (uint64_t)&unk_2380C24B4);
}

uint64_t sub_23805E288()
{
  return sub_238001820(&qword_2568C7170, type metadata accessor for LogEntry, (uint64_t)&unk_2380C25B4);
}

uint64_t sub_23805E2B4()
{
  return sub_238001820(&qword_2568C5688, type metadata accessor for LogEntry, (uint64_t)&unk_2380C26A4);
}

uint64_t sub_23805E2E0()
{
  return sub_238001820(&qword_2568C7178, type metadata accessor for LogEntry, (uint64_t)&unk_2380C25DC);
}

uint64_t sub_23805E30C()
{
  return sub_238001820(&qword_2568C7180, type metadata accessor for LogEntry, (uint64_t)&unk_2380C261C);
}

uint64_t sub_23805E338()
{
  return sub_238001820(&qword_2568C7188, type metadata accessor for LogHead, (uint64_t)&unk_2380C271C);
}

uint64_t type metadata accessor for LogHead(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7508);
}

uint64_t sub_23805E378()
{
  return sub_238001820(&qword_2568C7190, type metadata accessor for LogHead, (uint64_t)&unk_2380C280C);
}

uint64_t sub_23805E3A4()
{
  return sub_238001820(&qword_2568C7198, type metadata accessor for LogHead, (uint64_t)&unk_2380C2744);
}

uint64_t sub_23805E3D0()
{
  return sub_238001820(&qword_2568C71A0, type metadata accessor for LogHead, (uint64_t)&unk_2380C2784);
}

uint64_t sub_23805E3FC()
{
  return sub_238001820(&qword_2568C71A8, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2884);
}

uint64_t sub_23805E428()
{
  return sub_238001820(&qword_2568C56D0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C2974);
}

uint64_t sub_23805E454()
{
  return sub_238001820(&qword_2568C71B0, type metadata accessor for SignedObject, (uint64_t)&unk_2380C28AC);
}

uint64_t sub_23805E480()
{
  return sub_238001820(&qword_2568C71B8, type metadata accessor for SignedObject, (uint64_t)&unk_2380C28EC);
}

uint64_t sub_23805E4AC()
{
  return sub_238001820(&qword_2568C71C0, type metadata accessor for Signature, (uint64_t)&unk_2380C2A14);
}

uint64_t sub_23805E4D8()
{
  return sub_238001820(&qword_2568C71C8, type metadata accessor for Signature, (uint64_t)&unk_2380C2B04);
}

uint64_t sub_23805E504()
{
  return sub_238001820(&qword_2568C71D0, type metadata accessor for Signature, (uint64_t)&unk_2380C2A3C);
}

uint64_t sub_23805E530()
{
  return sub_238001820(&qword_2568C71D8, type metadata accessor for Signature, (uint64_t)&unk_2380C2A7C);
}

uint64_t sub_23805E55C()
{
  return sub_238001820(&qword_2568C71E0, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2B7C);
}

uint64_t type metadata accessor for VRFPublicKey(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7470);
}

uint64_t sub_23805E59C()
{
  return sub_238001820(&qword_2568C71E8, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2C6C);
}

uint64_t sub_23805E5C8()
{
  return sub_238001820(&qword_2568C71F0, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2BA4);
}

uint64_t sub_23805E5F4()
{
  return sub_238001820(&qword_2568C71F8, type metadata accessor for VRFPublicKey, (uint64_t)&unk_2380C2BE4);
}

uint64_t sub_23805E620()
{
  return sub_238001820(&qword_2568C7200, type metadata accessor for VRFWitness, (uint64_t)&unk_2380C2CE4);
}

uint64_t type metadata accessor for VRFWitness(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C73D8);
}

uint64_t sub_23805E660()
{
  return sub_238001820(&qword_2568C7208, type metadata accessor for VRFWitness, (uint64_t)&unk_2380C2DD4);
}

uint64_t sub_23805E68C()
{
  return sub_238001820(&qword_2568C7210, type metadata accessor for VRFWitness, (uint64_t)&unk_2380C2D0C);
}

uint64_t sub_23805E6B8()
{
  return sub_238001820(&qword_2568C7218, type metadata accessor for VRFWitness, (uint64_t)&unk_2380C2D4C);
}

uint64_t sub_23805E6E4()
{
  return sub_23805E804(&qword_2568C7220, &qword_2568C7228);
}

uint64_t sub_23805E708()
{
  return sub_23805E804(&qword_2568C7230, &qword_2568C7238);
}

uint64_t sub_23805E72C()
{
  return sub_23805E804(&qword_2568C7240, &qword_2568C7248);
}

uint64_t sub_23805E750()
{
  return sub_23805E804(&qword_2568C7250, &qword_2568C7258);
}

uint64_t sub_23805E774()
{
  return sub_23805E804(&qword_2568C7260, &qword_2568C7268);
}

uint64_t sub_23805E798()
{
  return sub_23805E804(&qword_2568C7270, &qword_2568C7278);
}

uint64_t sub_23805E7BC()
{
  return sub_23805E804(&qword_2568C7280, &qword_2568C7288);
}

uint64_t sub_23805E7E0()
{
  return sub_23805E804(&qword_2568C7290, &qword_2568C7298);
}

uint64_t sub_23805E804(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23805E844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v4 = sub_2380BD5C8();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)&v46 - v7;
  v8 = type metadata accessor for LogHead(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7310);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v46 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v46 - v22;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_26;
  sub_238008ED0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if ((v24 & 1) == 0)
    goto LABEL_26;
  v25 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 32) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 24) != v25)
    goto LABEL_26;
  v26 = type metadata accessor for MapHead(0);
  v47 = v14;
  v27 = v26;
  sub_2380051FC(a1 + *(int *)(v26 + 52), (uint64_t)v23, &qword_2568C7308);
  v46 = v27;
  v28 = *(int *)(v27 + 52);
  v29 = (uint64_t)v47;
  sub_2380051FC(a2 + v28, (uint64_t)v21, &qword_2568C7308);
  v30 = v29 + *(int *)(v12 + 48);
  sub_2380051FC((uint64_t)v23, v29, &qword_2568C7308);
  sub_2380051FC((uint64_t)v21, v30, &qword_2568C7308);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31(v29, 1, v8) == 1)
  {
    sub_238005240((uint64_t)v21, &qword_2568C7308);
    sub_238005240((uint64_t)v23, &qword_2568C7308);
    if (v31(v30, 1, v8) == 1)
    {
      sub_238005240(v29, &qword_2568C7308);
LABEL_13:
      if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
      {
        v34 = *(_QWORD *)(a1 + 48);
        v35 = *(_QWORD *)(a2 + 48);
        if (*(_BYTE *)(a1 + 56))
          v34 = v34 != 0;
        if (*(_BYTE *)(a2 + 56) == 1)
        {
          if (v35)
          {
            if (v34 == 1)
              goto LABEL_23;
          }
          else if (!v34)
          {
LABEL_23:
            if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64)
              && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72)
              && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
            {
              v37 = v46;
              v38 = a1 + *(int *)(v46 + 48);
              v40 = v50;
              v39 = v51;
              v41 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
              v42 = v48;
              v41(v48, v38, v51);
              v43 = a2 + *(int *)(v37 + 48);
              v44 = v49;
              v41(v49, v43, v39);
              sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
              v32 = sub_2380BDCE8();
              v45 = *(void (**)(char *, uint64_t))(v40 + 8);
              v45(v44, v39);
              v45(v42, v39);
              return v32 & 1;
            }
          }
        }
        else if (v34 == v35)
        {
          goto LABEL_23;
        }
      }
LABEL_26:
      v32 = 0;
      return v32 & 1;
    }
  }
  else
  {
    sub_2380051FC(v29, (uint64_t)v18, &qword_2568C7308);
    if (v31(v30, 1, v8) != 1)
    {
      sub_238001DE4(v30, (uint64_t)v11, type metadata accessor for LogHead);
      v33 = sub_23805ED58(v18, (uint64_t)v11);
      sub_237FFD540((uint64_t)v11, type metadata accessor for LogHead);
      sub_238005240((uint64_t)v21, &qword_2568C7308);
      sub_238005240((uint64_t)v23, &qword_2568C7308);
      sub_237FFD540((uint64_t)v18, type metadata accessor for LogHead);
      sub_238005240(v29, &qword_2568C7308);
      if ((v33 & 1) == 0)
        goto LABEL_26;
      goto LABEL_13;
    }
    sub_238005240((uint64_t)v21, &qword_2568C7308);
    sub_238005240((uint64_t)v23, &qword_2568C7308);
    sub_237FFD540((uint64_t)v18, type metadata accessor for LogHead);
  }
  sub_238005240(v29, &qword_2568C7310);
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_23805ED58(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  if (*a1 != *(_QWORD *)a2)
    goto LABEL_14;
  if (a1[1] != *(_QWORD *)(a2 + 8))
    goto LABEL_14;
  sub_238008ED0(a1[2], a1[3]);
  if ((v11 & 1) == 0 || a1[4] != *(_QWORD *)(a2 + 32))
    goto LABEL_14;
  v12 = *(_QWORD *)(a2 + 40);
  if (*(_BYTE *)(a2 + 48) == 1)
    __asm { BR              X11 }
  if (a1[5] != v12)
    goto LABEL_14;
  v13 = *(_QWORD *)(a2 + 56);
  if (*(_BYTE *)(a2 + 64) == 1)
    __asm { BR              X11 }
  if (a1[7] == v13 && a1[9] == *(_QWORD *)(a2 + 72) && a1[10] == *(_QWORD *)(a2 + 80))
  {
    v14 = type metadata accessor for LogHead(0);
    v15 = (char *)a1 + *(int *)(v14 + 48);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (char *)(a2 + *(int *)(v14 + 48)), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = sub_2380BDCE8();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
LABEL_14:
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_23805EFD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;

  v4 = sub_2380BD5C8();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v46 - v7;
  v8 = type metadata accessor for VRFPublicKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7368);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v46 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v46 - v21;
  v23 = type metadata accessor for PerApplicationTreeConfigNode(0);
  v24 = *(int *)(v23 + 28);
  v51 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = v23;
  sub_2380051FC(v25, (uint64_t)v22, &qword_2568C7360);
  v27 = *(int *)(v26 + 28);
  v52 = a2;
  sub_2380051FC(a2 + v27, (uint64_t)v20, &qword_2568C7360);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_2380051FC((uint64_t)v22, (uint64_t)v13, &qword_2568C7360);
  sub_2380051FC((uint64_t)v20, v28, &qword_2568C7360);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    v30 = (uint64_t)v53;
    sub_2380051FC((uint64_t)v13, (uint64_t)v17, &qword_2568C7360);
    if (v29(v28, 1, v8) != 1)
    {
      sub_238001DE4(v28, v30, type metadata accessor for VRFPublicKey);
      v31 = sub_238060228((uint64_t)v17, v30);
      sub_237FFD540(v30, type metadata accessor for VRFPublicKey);
      sub_238005240((uint64_t)v20, &qword_2568C7360);
      sub_238005240((uint64_t)v22, &qword_2568C7360);
      sub_237FFD540((uint64_t)v17, type metadata accessor for VRFPublicKey);
      sub_238005240((uint64_t)v13, &qword_2568C7360);
      if ((v31 & 1) == 0)
        goto LABEL_13;
      goto LABEL_8;
    }
    sub_238005240((uint64_t)v20, &qword_2568C7360);
    sub_238005240((uint64_t)v22, &qword_2568C7360);
    sub_237FFD540((uint64_t)v17, type metadata accessor for VRFPublicKey);
LABEL_6:
    sub_238005240((uint64_t)v13, &qword_2568C7368);
    goto LABEL_13;
  }
  sub_238005240((uint64_t)v20, &qword_2568C7360);
  sub_238005240((uint64_t)v22, &qword_2568C7360);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  sub_238005240((uint64_t)v13, &qword_2568C7360);
LABEL_8:
  v32 = v51;
  v33 = v52;
  sub_238008ED0(*v51, v51[1]);
  if ((v34 & 1) != 0)
  {
    v35 = v32[2];
    if (*((_BYTE *)v32 + 24) == 1)
      v35 = qword_2380C39E8[v35];
    v36 = *(_QWORD *)(v33 + 16);
    if (*(_BYTE *)(v33 + 24))
      __asm { BR              X11 }
    if (v35 == v36)
    {
      v39 = (char *)v32 + *(int *)(v26 + 24);
      v41 = v49;
      v40 = v50;
      v42 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v43 = v47;
      v42(v47, v39, v50);
      v44 = v48;
      v42(v48, (char *)(v33 + *(int *)(v26 + 24)), v40);
      sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v37 = sub_2380BDCE8();
      v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      v45(v44, v40);
      v45(v43, v40);
      return v37 & 1;
    }
  }
LABEL_13:
  v37 = 0;
  return v37 & 1;
}

uint64_t sub_23805F444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  sub_238008ED0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0)
    goto LABEL_6;
  v12 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24) == 1)
    v12 = qword_2380C39E8[v12];
  v13 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24))
    __asm { BR              X11 }
  if (v12 == v13)
  {
    v15 = type metadata accessor for TopLevelTreeConfigNode(0);
    v16 = a1 + *(int *)(v15 + 24);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, a2 + *(int *)(v15 + 24), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = sub_2380BDCE8();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
LABEL_6:
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_23805F5FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;

  v6 = sub_2380BD5C8();
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v43 = (char *)&v40 - v9;
  v10 = type metadata accessor for SignedObject(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v40 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v47 = (uint64_t *)((char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v40 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v40 - v22;
  v24 = a3(0);
  v25 = *(int *)(v24 + 20);
  v41 = a1;
  sub_2380051FC(a1 + v25, (uint64_t)v23, &qword_2568C5438);
  v26 = *(int *)(v24 + 20);
  v42 = a2;
  sub_2380051FC(a2 + v26, (uint64_t)v21, &qword_2568C5438);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_2380051FC((uint64_t)v23, (uint64_t)v15, &qword_2568C5438);
  sub_2380051FC((uint64_t)v21, v27, &qword_2568C5438);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v28((uint64_t)v15, 1, v10) != 1)
  {
    v29 = v47;
    sub_2380051FC((uint64_t)v15, (uint64_t)v47, &qword_2568C5438);
    if (v28(v27, 1, v10) != 1)
    {
      v30 = v40;
      sub_238001DE4(v27, v40, type metadata accessor for SignedObject);
      v31 = sub_23806052C(v29, v30);
      sub_237FFD540(v30, type metadata accessor for SignedObject);
      sub_238005240((uint64_t)v21, &qword_2568C5438);
      sub_238005240((uint64_t)v23, &qword_2568C5438);
      sub_237FFD540((uint64_t)v29, type metadata accessor for SignedObject);
      sub_238005240((uint64_t)v15, &qword_2568C5438);
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v37 = 0;
      return v37 & 1;
    }
    sub_238005240((uint64_t)v21, &qword_2568C5438);
    sub_238005240((uint64_t)v23, &qword_2568C5438);
    sub_237FFD540((uint64_t)v29, type metadata accessor for SignedObject);
LABEL_6:
    sub_238005240((uint64_t)v15, &qword_2568C56E0);
    goto LABEL_9;
  }
  sub_238005240((uint64_t)v21, &qword_2568C5438);
  sub_238005240((uint64_t)v23, &qword_2568C5438);
  if (v28(v27, 1, v10) != 1)
    goto LABEL_6;
  sub_238005240((uint64_t)v15, &qword_2568C5438);
LABEL_8:
  v33 = v45;
  v32 = v46;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v35 = v43;
  v34(v43, v41, v46);
  v36 = v44;
  v34(v44, v42, v32);
  sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v37 = sub_2380BDCE8();
  v38 = *(void (**)(char *, uint64_t))(v33 + 8);
  v38(v36, v32);
  v38(v35, v32);
  return v37 & 1;
}

uint64_t sub_23805F9D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  sub_238008ED0(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    v12 = type metadata accessor for ChangeLogNodeV2(0);
    v13 = (char *)a1 + *(int *)(v12 + 20);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 20)), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = sub_2380BDCE8();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_23805FB04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  char *v51;

  v4 = sub_2380BD5C8();
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v44 - v7;
  v8 = type metadata accessor for SignedObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v44 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v44 - v21;
  v23 = type metadata accessor for MapEntry(0);
  v24 = *(int *)(v23 + 28);
  v49 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = v23;
  sub_2380051FC(v25, (uint64_t)v22, &qword_2568C5438);
  v27 = *(int *)(v26 + 28);
  v50 = a2;
  sub_2380051FC((uint64_t)a2 + v27, (uint64_t)v20, &qword_2568C5438);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_2380051FC((uint64_t)v22, (uint64_t)v13, &qword_2568C5438);
  sub_2380051FC((uint64_t)v20, v28, &qword_2568C5438);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    v30 = (uint64_t)v51;
    sub_2380051FC((uint64_t)v13, (uint64_t)v17, &qword_2568C5438);
    if (v29(v28, 1, v8) != 1)
    {
      sub_238001DE4(v28, v30, type metadata accessor for SignedObject);
      v31 = sub_23806052C(v17, v30);
      sub_237FFD540(v30, type metadata accessor for SignedObject);
      sub_238005240((uint64_t)v20, &qword_2568C5438);
      sub_238005240((uint64_t)v22, &qword_2568C5438);
      sub_237FFD540((uint64_t)v17, type metadata accessor for SignedObject);
      sub_238005240((uint64_t)v13, &qword_2568C5438);
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v41 = 0;
      return v41 & 1;
    }
    sub_238005240((uint64_t)v20, &qword_2568C5438);
    sub_238005240((uint64_t)v22, &qword_2568C5438);
    sub_237FFD540((uint64_t)v17, type metadata accessor for SignedObject);
LABEL_6:
    sub_238005240((uint64_t)v13, &qword_2568C56E0);
    goto LABEL_11;
  }
  sub_238005240((uint64_t)v20, &qword_2568C5438);
  sub_238005240((uint64_t)v22, &qword_2568C5438);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  sub_238005240((uint64_t)v13, &qword_2568C5438);
LABEL_8:
  v32 = v49;
  v33 = v50;
  if ((sub_238002940(*v49, *v50) & 1) == 0)
    goto LABEL_11;
  sub_238008ED0(v32[1], v32[2]);
  if ((v34 & 1) == 0)
    goto LABEL_11;
  v35 = (char *)v32 + *(int *)(v26 + 24);
  v37 = v47;
  v36 = v48;
  v38 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v39 = v45;
  v38(v45, v35, v48);
  v40 = v46;
  v38(v46, (char *)v33 + *(int *)(v26 + 24), v36);
  sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v41 = sub_2380BDCE8();
  v42 = *(void (**)(char *, uint64_t))(v37 + 8);
  v42(v40, v36);
  v42(v39, v36);
  return v41 & 1;
}

uint64_t sub_23805FF00(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = sub_2380BD5C8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v15 = *(int *)(a3(0) + 20);
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = sub_2380BDCE8();
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_238060070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_6;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 16) == 1)
    v11 = qword_2380C39E8[v11];
  v12 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16))
    __asm { BR              X11 }
  if (v11 == v12)
  {
    v14 = type metadata accessor for LogClosedNode(0);
    v15 = a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, a2 + *(int *)(v14 + 24), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v13 = sub_2380BDCE8();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
LABEL_6:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_238060228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  sub_238008ED0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0)
    goto LABEL_9;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = 3;
  if (!v12)
    v14 = 0;
  if (*(_BYTE *)(a1 + 24))
    v12 = v14;
  if (*(_BYTE *)(a2 + 24) != 1)
  {
    if (v12 != v13)
      goto LABEL_9;
LABEL_11:
    v16 = type metadata accessor for VRFPublicKey(0);
    v17 = a1 + *(int *)(v16 + 24);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v10, v17, v4);
    v18(v8, a2 + *(int *)(v16 + 24), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = sub_2380BDCE8();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
    return v15 & 1;
  }
  if (!v13)
  {
    if (v12)
      goto LABEL_9;
    goto LABEL_11;
  }
  if (v12 == 3)
    goto LABEL_11;
LABEL_9:
  v15 = 0;
  return v15 & 1;
}

uint64_t sub_2380603A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  sub_238008ED0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0)
    goto LABEL_8;
  sub_238008ED0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v12 & 1) == 0)
    goto LABEL_8;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(a1 + 40))
    v13 = v13 != 0;
  if (*(_BYTE *)(a2 + 40) != 1)
  {
    if (v13 != v14)
      goto LABEL_8;
LABEL_11:
    v17 = type metadata accessor for Signature(0);
    v18 = a1 + *(int *)(v17 + 28);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v19(v10, v18, v4);
    v19(v8, a2 + *(int *)(v17 + 28), v4);
    sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = sub_2380BDCE8();
    v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
    return v15 & 1;
  }
  if (!v14)
  {
    if (v13)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v13 == 1)
    goto LABEL_11;
LABEL_8:
  v15 = 0;
  return v15 & 1;
}

uint64_t sub_23806052C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = sub_2380BD5C8();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for Signature(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C72A0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v45 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v45 - v23;
  sub_238008ED0(*a1, a1[1]);
  if ((v25 & 1) == 0)
    goto LABEL_8;
  v47 = v7;
  v48 = v19;
  v45 = v12;
  v46 = v9;
  v26 = type metadata accessor for SignedObject(0);
  sub_2380051FC((uint64_t)a1 + *(int *)(v26 + 24), (uint64_t)v24, &qword_2568C5430);
  sub_2380051FC(a2 + *(int *)(v26 + 24), (uint64_t)v22, &qword_2568C5430);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_2380051FC((uint64_t)v24, (uint64_t)v15, &qword_2568C5430);
  sub_2380051FC((uint64_t)v22, v27, &qword_2568C5430);
  v28 = v52;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v30 = a2;
  v31 = v26;
  if (v29((uint64_t)v15, 1, v52) == 1)
  {
    sub_238005240((uint64_t)v22, &qword_2568C5430);
    sub_238005240((uint64_t)v24, &qword_2568C5430);
    if (v29(v27, 1, v28) == 1)
    {
      sub_238005240((uint64_t)v15, &qword_2568C5430);
LABEL_11:
      v37 = (char *)a1 + *(int *)(v31 + 20);
      v39 = v49;
      v38 = v50;
      v40 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v41 = v46;
      v40(v46, v37, v50);
      v42 = (char *)(v30 + *(int *)(v31 + 20));
      v43 = v47;
      v40(v47, v42, v38);
      sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v33 = sub_2380BDCE8();
      v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v43, v38);
      v44(v41, v38);
      return v33 & 1;
    }
    goto LABEL_7;
  }
  v32 = (uint64_t)v48;
  sub_2380051FC((uint64_t)v15, (uint64_t)v48, &qword_2568C5430);
  if (v29(v27, 1, v28) == 1)
  {
    sub_238005240((uint64_t)v22, &qword_2568C5430);
    sub_238005240((uint64_t)v24, &qword_2568C5430);
    sub_237FFD540(v32, type metadata accessor for Signature);
LABEL_7:
    sub_238005240((uint64_t)v15, &qword_2568C72A0);
    goto LABEL_8;
  }
  v35 = (uint64_t)v45;
  sub_238001DE4(v27, (uint64_t)v45, type metadata accessor for Signature);
  v36 = sub_2380603A4(v32, v35);
  sub_237FFD540(v35, type metadata accessor for Signature);
  sub_238005240((uint64_t)v22, &qword_2568C5430);
  sub_238005240((uint64_t)v24, &qword_2568C5430);
  sub_237FFD540(v32, type metadata accessor for Signature);
  sub_238005240((uint64_t)v15, &qword_2568C5430);
  if ((v36 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v33 = 0;
  return v33 & 1;
}

uint64_t sub_23806091C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = sub_2380BD5C8();
  v44 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v41 - v7;
  v8 = type metadata accessor for SignedObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v45 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v41 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v41 - v21;
  v46 = a1;
  v23 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 != v23)
    goto LABEL_16;
  v41 = v4;
  v24 = type metadata accessor for LogEntry(0);
  sub_2380051FC((uint64_t)v46 + *(int *)(v24 + 40), (uint64_t)v22, &qword_2568C5438);
  sub_2380051FC((uint64_t)a2 + *(int *)(v24 + 40), (uint64_t)v20, &qword_2568C5438);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_2380051FC((uint64_t)v22, (uint64_t)v13, &qword_2568C5438);
  sub_2380051FC((uint64_t)v20, v25, &qword_2568C5438);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    sub_2380051FC((uint64_t)v13, (uint64_t)v17, &qword_2568C5438);
    if (v26(v25, 1, v8) != 1)
    {
      v27 = v45;
      sub_238001DE4(v25, v45, type metadata accessor for SignedObject);
      v28 = sub_23806052C(v17, v27);
      sub_237FFD540(v27, type metadata accessor for SignedObject);
      sub_238005240((uint64_t)v20, &qword_2568C5438);
      sub_238005240((uint64_t)v22, &qword_2568C5438);
      sub_237FFD540((uint64_t)v17, type metadata accessor for SignedObject);
      sub_238005240((uint64_t)v13, &qword_2568C5438);
      if ((v28 & 1) != 0)
        goto LABEL_11;
LABEL_16:
      v38 = 0;
      return v38 & 1;
    }
    sub_238005240((uint64_t)v20, &qword_2568C5438);
    sub_238005240((uint64_t)v22, &qword_2568C5438);
    sub_237FFD540((uint64_t)v17, type metadata accessor for SignedObject);
LABEL_9:
    sub_238005240((uint64_t)v13, &qword_2568C56E0);
    goto LABEL_16;
  }
  sub_238005240((uint64_t)v20, &qword_2568C5438);
  sub_238005240((uint64_t)v22, &qword_2568C5438);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_9;
  sub_238005240((uint64_t)v13, &qword_2568C5438);
LABEL_11:
  v29 = v46;
  if ((sub_238002940(v46[2], a2[2]) & 1) == 0)
    goto LABEL_16;
  sub_238008ED0(v29[3], v29[4]);
  if ((v30 & 1) == 0
    || v29[5] != a2[5]
    || (sub_2380795BC(v29[6], *((unsigned __int8 *)v29 + 56), a2[6], *((unsigned __int8 *)a2 + 56)) & 1) == 0)
  {
    goto LABEL_16;
  }
  v31 = (uint64_t)v29 + *(int *)(v24 + 36);
  v32 = v44;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  v34 = v41;
  v35 = v42;
  v33(v42, v31, v41);
  v36 = (uint64_t)a2 + *(int *)(v24 + 36);
  v37 = v43;
  v33(v43, v36, v34);
  sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v38 = sub_2380BDCE8();
  v39 = *(void (**)(char *, uint64_t))(v32 + 8);
  v39(v37, v34);
  v39(v35, v34);
  return v38 & 1;
}

unint64_t sub_238060DB8()
{
  unint64_t result;

  result = qword_2568C72B0;
  if (!qword_2568C72B0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3888, &type metadata for VRFType);
    atomic_store(result, (unint64_t *)&qword_2568C72B0);
  }
  return result;
}

uint64_t sub_238060DFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = sub_2380BD5C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)a1;
  v12 = *a2;
  v13 = 3;
  if (!*(_QWORD *)a1)
    v13 = 0;
  if (*(_BYTE *)(a1 + 8))
    v11 = v13;
  if (*((_BYTE *)a2 + 8) != 1)
  {
    if (v11 == v12)
      goto LABEL_12;
    goto LABEL_15;
  }
  if (!v12)
  {
    if (!v11)
      goto LABEL_12;
LABEL_15:
    v19 = 0;
    return v19 & 1;
  }
  if (v11 != 3)
    goto LABEL_15;
LABEL_12:
  sub_238008ED0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v14 & 1) == 0)
    goto LABEL_15;
  sub_238008ED0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((v15 & 1) == 0)
    goto LABEL_15;
  v16 = type metadata accessor for VRFWitness(0);
  v17 = a1 + *(int *)(v16 + 28);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, v17, v4);
  v18(v8, (uint64_t)a2 + *(int *)(v16 + 28), v4);
  sub_238001820(&qword_2568C56B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = sub_2380BDCE8();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

unint64_t sub_238060F8C()
{
  unint64_t result;

  result = qword_2568C72C8;
  if (!qword_2568C72C8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3840, &type metadata for Signature.SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2568C72C8);
  }
  return result;
}

unint64_t sub_238060FD0()
{
  unint64_t result;

  result = qword_2568C72E0;
  if (!qword_2568C72E0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C37F8, &type metadata for LogType);
    atomic_store(result, (unint64_t *)&qword_2568C72E0);
  }
  return result;
}

unint64_t sub_238061014()
{
  unint64_t result;

  result = qword_2568C72F0;
  if (!qword_2568C72F0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C37B0, &type metadata for NodeType);
    atomic_store(result, (unint64_t *)&qword_2568C72F0);
  }
  return result;
}

unint64_t sub_238061058()
{
  unint64_t result;

  result = qword_2568C7300;
  if (!qword_2568C7300)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3768, &type metadata for MapType);
    atomic_store(result, (unint64_t *)&qword_2568C7300);
  }
  return result;
}

ValueMetadata *type metadata accessor for VRFType()
{
  return &type metadata for VRFType;
}

ValueMetadata *type metadata accessor for MapType()
{
  return &type metadata for MapType;
}

_QWORD *sub_2380610BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[2];
    v8 = a2[3];
    sub_237FFBA20(v7, v8);
    v4[2] = v7;
    v4[3] = v8;
    v9 = a2[4];
    v10 = a2[5];
    sub_237FFBA20(v9, v10);
    v4[4] = v9;
    v4[5] = v10;
    v11 = *(int *)(a3 + 28);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = sub_2380BD5C8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_238061184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237FFBAB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_237FFBAB0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_2380611D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_237FFBA20(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_237FFBA20(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_238061274(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  v8 = a2[3];
  sub_237FFBA20(v7, v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  sub_237FFBAB0(v9, v10);
  v11 = a2[4];
  v12 = a2[5];
  sub_237FFBA20(v11, v12);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  sub_237FFBAB0(v13, v14);
  v15 = *(int *)(a3 + 28);
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_238061320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_23806138C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_237FFBAB0(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_237FFBAB0(v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_23806141C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238061428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 24) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_2380614B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380614BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_238061538()
{
  return sub_23806154C();
}

uint64_t sub_23806154C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2380615DC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380615EC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380615FC()
{
  return sub_238064BC8();
}

_OWORD *sub_238061608(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = a2[2];
    v8 = a2[3];
    sub_237FFBA20(v7, v8);
    *((_QWORD *)v4 + 2) = v7;
    *((_QWORD *)v4 + 3) = v8;
    v9 = a2[5];
    *((_QWORD *)v4 + 4) = a2[4];
    *((_QWORD *)v4 + 5) = v9;
    *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
    *((_QWORD *)v4 + 7) = a2[7];
    *((_BYTE *)v4 + 64) = *((_BYTE *)a2 + 64);
    v10 = *(_OWORD *)(a2 + 9);
    v11 = *(int *)(a3 + 48);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    *(_OWORD *)((char *)v4 + 72) = v10;
    v14 = sub_2380BD5C8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_2380616DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237FFBAB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 48);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_238061728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_237FFBA20(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 72);
  v10 = *(int *)(a3 + 48);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 72) = v9;
  v13 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_2380617D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_237FFBA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  sub_237FFBAB0(v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(int *)(a3 + 48);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_238061898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_23806191C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  sub_237FFBAB0(v6, v7);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 72);
  v11 = *(int *)(a3 + 48);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)(a1 + 72) = v10;
  v14 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_2380619B4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380619C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 24) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_238061A48()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238061A54(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t sub_238061AD0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_238061B64(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    v8 = a2[2];
    sub_237FFBA20(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v4[3] = a2[3];
    *((_BYTE *)v4 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    v4[5] = a2[5];
    v4[6] = v9;
    *((_BYTE *)v4 + 56) = *((_BYTE *)a2 + 56);
    v10 = *((_OWORD *)a2 + 4);
    *((_BYTE *)v4 + 80) = *((_BYTE *)a2 + 80);
    v11 = *(int *)(a3 + 48);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    *((_OWORD *)v4 + 4) = v10;
    v14 = sub_2380BD5C8();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    v16 = *(int *)(a3 + 52);
    v17 = (_OWORD *)((char *)v4 + v16);
    v18 = (_OWORD *)((char *)a2 + v16);
    v19 = type metadata accessor for LogHead(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v23 = *((_QWORD *)v18 + 2);
      v24 = *((_QWORD *)v18 + 3);
      sub_237FFBA20(v23, v24);
      *((_QWORD *)v17 + 2) = v23;
      *((_QWORD *)v17 + 3) = v24;
      v25 = *((_QWORD *)v18 + 5);
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 5) = v25;
      *((_BYTE *)v17 + 48) = *((_BYTE *)v18 + 48);
      *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
      *((_BYTE *)v17 + 64) = *((_BYTE *)v18 + 64);
      *(_OWORD *)((char *)v17 + 72) = *(_OWORD *)((char *)v18 + 72);
      v15((char *)v17 + *(int *)(v19 + 48), (uint64_t)v18 + *(int *)(v19 + 48), v14);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return v4;
}

uint64_t sub_238061D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_237FFBAB0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 48);
  v5 = sub_2380BD5C8();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 52);
  v7 = type metadata accessor for LogHead(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_237FFBAB0(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 48), v5);
  }
  return result;
}

uint64_t sub_238061DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  sub_237FFBA20(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(int *)(a3 + 48);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  *(_OWORD *)(a1 + 64) = v9;
  v13 = sub_2380BD5C8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 52);
  v16 = (_OWORD *)(a1 + v15);
  v17 = (_OWORD *)(a2 + v15);
  v18 = type metadata accessor for LogHead(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v21 = *((_QWORD *)v17 + 2);
    v22 = *((_QWORD *)v17 + 3);
    sub_237FFBA20(v21, v22);
    *((_QWORD *)v16 + 2) = v21;
    *((_QWORD *)v16 + 3) = v22;
    v23 = *((_QWORD *)v17 + 5);
    *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
    *((_QWORD *)v16 + 5) = v23;
    *((_BYTE *)v16 + 48) = *((_BYTE *)v17 + 48);
    *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
    *((_BYTE *)v16 + 64) = *((_BYTE *)v17 + 64);
    *(_OWORD *)((char *)v16 + 72) = *(_OWORD *)((char *)v17 + 72);
    v14((char *)v16 + *(int *)(v18 + 48), (char *)v17 + *(int *)(v18 + 48), v13);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t sub_238061F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_237FFBA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_237FFBAB0(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(int *)(a3 + 48);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2380BD5C8();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v18 = *(int *)(a3 + 52);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for LogHead(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v14) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v14)
  {
    if (!v24)
    {
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      v31 = *(_QWORD *)(v20 + 16);
      v32 = *(_QWORD *)(v20 + 24);
      sub_237FFBA20(v31, v32);
      v33 = *(_QWORD *)(v19 + 16);
      v34 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 16) = v31;
      *(_QWORD *)(v19 + 24) = v32;
      sub_237FFBAB0(v33, v34);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      v35 = *(_QWORD *)(v20 + 40);
      *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
      *(_QWORD *)(v19 + 40) = v35;
      v36 = *(_QWORD *)(v20 + 56);
      *(_BYTE *)(v19 + 64) = *(_BYTE *)(v20 + 64);
      *(_QWORD *)(v19 + 56) = v36;
      *(_QWORD *)(v19 + 72) = *(_QWORD *)(v20 + 72);
      *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
      v17(v19 + *(int *)(v21 + 48), v20 + *(int *)(v21 + 48), v15);
      return a1;
    }
    sub_237FFD540(v19, type metadata accessor for LogHead);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
    memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  v25 = *(_QWORD *)(v20 + 16);
  v26 = *(_QWORD *)(v20 + 24);
  sub_237FFBA20(v25, v26);
  *(_QWORD *)(v19 + 16) = v25;
  *(_QWORD *)(v19 + 24) = v26;
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  v27 = *(_QWORD *)(v20 + 40);
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  *(_QWORD *)(v19 + 40) = v27;
  v28 = *(_QWORD *)(v20 + 56);
  *(_BYTE *)(v19 + 64) = *(_BYTE *)(v20 + 64);
  *(_QWORD *)(v19 + 56) = v28;
  *(_QWORD *)(v19 + 72) = *(_QWORD *)(v20 + 72);
  *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v19 + *(int *)(v21 + 48), v20 + *(int *)(v21 + 48), v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t sub_2380621D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(int *)(a3 + 48);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 64) = v7;
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 52);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = type metadata accessor for LogHead(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = v15[1];
    *v14 = *v15;
    v14[1] = v19;
    v20 = *((_QWORD *)v15 + 5);
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 5) = v20;
    *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
    *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
    *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
    *(_OWORD *)((char *)v14 + 72) = *(_OWORD *)((char *)v15 + 72);
    v12((char *)v14 + *(int *)(v16 + 48), (char *)v15 + *(int *)(v16 + 48), v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_238062338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  sub_237FFBAB0(v7, v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(int *)(a3 + 48);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)(a1 + 64) = v10;
  v14 = sub_2380BD5C8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  v16(v12, v13, v14);
  v17 = *(int *)(a3 + 52);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for LogHead(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v13) = v22(v18, 1, v20);
  v23 = v22(v19, 1, v20);
  if (!(_DWORD)v13)
  {
    if (!v23)
    {
      v28 = *(_QWORD *)(v18 + 16);
      v29 = *(_QWORD *)(v18 + 24);
      v30 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 16) = v30;
      sub_237FFBAB0(v28, v29);
      v31 = *(_QWORD *)(v19 + 40);
      *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
      *(_QWORD *)(v18 + 40) = v31;
      *(_BYTE *)(v18 + 48) = *(_BYTE *)(v19 + 48);
      *(_QWORD *)(v18 + 56) = *(_QWORD *)(v19 + 56);
      *(_BYTE *)(v18 + 64) = *(_BYTE *)(v19 + 64);
      *(_OWORD *)(v18 + 72) = *(_OWORD *)(v19 + 72);
      v16(v18 + *(int *)(v20 + 48), v19 + *(int *)(v20 + 48), v14);
      return a1;
    }
    sub_237FFD540(v18, type metadata accessor for LogHead);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
    memcpy((void *)v18, (const void *)v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  v24 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v24;
  *(_BYTE *)(v18 + 48) = *(_BYTE *)(v19 + 48);
  v25 = *(_QWORD *)(v19 + 40);
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  *(_QWORD *)(v18 + 40) = v25;
  *(_QWORD *)(v18 + 56) = *(_QWORD *)(v19 + 56);
  *(_BYTE *)(v18 + 64) = *(_BYTE *)(v19 + 64);
  *(_OWORD *)(v18 + 72) = *(_OWORD *)(v19 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v18 + *(int *)(v20 + 48), v19 + *(int *)(v20 + 48), v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_238062530()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23806253C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 80);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_2380BD5C8();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 48);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_2380625E0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380625EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 80) = a2 + 1;
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 48);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7308);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_238062688()
{
  unint64_t v0;
  unint64_t v1;

  sub_2380BD5C8();
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, qword_2568C75C8, (void (*)(uint64_t))type metadata accessor for LogHead);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_238062750(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_237FFBA20(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2380BD5C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_2380627F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_238062840(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_237FFBA20(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2380BD5C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_2380628B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_237FFBA20(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_237FFBAB0(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2380BD5C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_238062938(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_2380BD5C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_238062994(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_237FFBAB0(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2380BD5C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_238062A04()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238062A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_238062A98()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_238062AA4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_2380BD5C8();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_238062B20()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_238062BAC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238062BBC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_238062BD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2380BD5C8();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for SignedObject(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = *v11;
      v17 = v11[1];
      sub_237FFBA20(*v11, v17);
      *v10 = v16;
      v10[1] = v17;
      v8((_QWORD *)((char *)v10 + *(int *)(v12 + 20)), (uint64_t *)((char *)v11 + *(int *)(v12 + 20)), v7);
      v18 = *(int *)(v12 + 24);
      v19 = (_QWORD *)((char *)v10 + v18);
      v20 = (uint64_t *)((char *)v11 + v18);
      v21 = type metadata accessor for Signature(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v27 = *v20;
        v29 = v22;
        v24 = v20[1];
        sub_237FFBA20(*v20, v24);
        *v19 = v27;
        v19[1] = v24;
        v25 = v20[3];
        v28 = v20[2];
        sub_237FFBA20(v28, v25);
        v19[2] = v28;
        v19[3] = v25;
        v19[4] = v20[4];
        *((_BYTE *)v19 + 40) = *((_BYTE *)v20 + 40);
        v8((_QWORD *)((char *)v19 + *(int *)(v21 + 28)), (uint64_t *)((char *)v20 + *(int *)(v21 + 28)), v7);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v19, 0, 1, v21);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t sub_238062DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = sub_2380BD5C8();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for SignedObject(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    sub_237FFBAB0(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    v10(v5 + *(int *)(v6 + 20), v4);
    v8 = v5 + *(int *)(v6 + 24);
    v9 = type metadata accessor for Signature(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      sub_237FFBAB0(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
      sub_237FFBAB0(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8 + *(int *)(v9 + 28), v4);
    }
  }
  return result;
}

char *sub_238062ED8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_2380BD5C8();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = (uint64_t *)&a2[v8];
  v11 = type metadata accessor for SignedObject(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *v10;
    v15 = v10[1];
    sub_237FFBA20(*v10, v15);
    *(_QWORD *)v9 = v14;
    *((_QWORD *)v9 + 1) = v15;
    v7(&v9[*(int *)(v11 + 20)], (char *)v10 + *(int *)(v11 + 20), v6);
    v16 = *(int *)(v11 + 24);
    v17 = &v9[v16];
    v18 = (uint64_t *)((char *)v10 + v16);
    v19 = type metadata accessor for Signature(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v25 = *v18;
      v27 = v20;
      v22 = v18[1];
      sub_237FFBA20(*v18, v22);
      *(_QWORD *)v17 = v25;
      *((_QWORD *)v17 + 1) = v22;
      v23 = v18[3];
      v26 = v18[2];
      sub_237FFBA20(v26, v23);
      *((_QWORD *)v17 + 2) = v26;
      *((_QWORD *)v17 + 3) = v23;
      *((_QWORD *)v17 + 4) = v18[4];
      v17[40] = *((_BYTE *)v18 + 40);
      v7(&v17[*(int *)(v19 + 28)], (char *)v18 + *(int *)(v19 + 28), v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_2380630B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;

  v6 = sub_2380BD5C8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = type metadata accessor for SignedObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v29 = *v11;
      v30 = v11[1];
      sub_237FFBA20(*v11, v30);
      v31 = *v10;
      v32 = v10[1];
      *v10 = v29;
      v10[1] = v30;
      sub_237FFBAB0(v31, v32);
      v8((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20), v6);
      v33 = *(int *)(v12 + 24);
      v34 = (uint64_t)v10 + v33;
      v35 = (char *)v11 + v33;
      v36 = type metadata accessor for Signature(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      LODWORD(v29) = v38(v34, 1, v36);
      v39 = v38((uint64_t)v35, 1, v36);
      if ((_DWORD)v29)
      {
        if (!v39)
        {
          v40 = *(_QWORD *)v35;
          v41 = *((_QWORD *)v35 + 1);
          sub_237FFBA20(*(_QWORD *)v35, v41);
          *(_QWORD *)v34 = v40;
          *(_QWORD *)(v34 + 8) = v41;
          v42 = *((_QWORD *)v35 + 2);
          v43 = *((_QWORD *)v35 + 3);
          sub_237FFBA20(v42, v43);
          *(_QWORD *)(v34 + 16) = v42;
          *(_QWORD *)(v34 + 24) = v43;
          v44 = *((_QWORD *)v35 + 4);
          *(_BYTE *)(v34 + 40) = v35[40];
          *(_QWORD *)(v34 + 32) = v44;
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v34 + *(int *)(v36 + 28), &v35[*(int *)(v36 + 28)], v6);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          v51 = *(_QWORD *)v35;
          v52 = *((_QWORD *)v35 + 1);
          sub_237FFBA20(*(_QWORD *)v35, v52);
          v53 = *(_QWORD *)v34;
          v54 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)v34 = v51;
          *(_QWORD *)(v34 + 8) = v52;
          sub_237FFBAB0(v53, v54);
          v55 = *((_QWORD *)v35 + 2);
          v56 = *((_QWORD *)v35 + 3);
          sub_237FFBA20(v55, v56);
          v57 = *(_QWORD *)(v34 + 16);
          v58 = *(_QWORD *)(v34 + 24);
          *(_QWORD *)(v34 + 16) = v55;
          *(_QWORD *)(v34 + 24) = v56;
          sub_237FFBAB0(v57, v58);
          v59 = *((_QWORD *)v35 + 4);
          *(_BYTE *)(v34 + 40) = v35[40];
          *(_QWORD *)(v34 + 32) = v59;
          v8(v34 + *(int *)(v36 + 28), (uint64_t)&v35[*(int *)(v36 + 28)], v6);
          return a1;
        }
        sub_237FFD540(v34, type metadata accessor for Signature);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
      v27 = (void *)v34;
      v28 = (uint64_t *)v35;
      goto LABEL_8;
    }
    sub_237FFD540((uint64_t)v10, type metadata accessor for SignedObject);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
    v27 = v10;
    v28 = v11;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = *v11;
  v18 = v11[1];
  sub_237FFBA20(*v11, v18);
  *v10 = v17;
  v10[1] = v18;
  v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v19((char *)v10 + *(int *)(v12 + 20), (char *)v11 + *(int *)(v12 + 20), v6);
  v20 = *(int *)(v12 + 24);
  v21 = (uint64_t *)((char *)v10 + v20);
  v22 = (uint64_t *)((char *)v11 + v20);
  v23 = type metadata accessor for Signature(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v60 = v19;
    v61 = v24;
    v45 = *v22;
    v46 = v22[1];
    sub_237FFBA20(*v22, v46);
    *v21 = v45;
    v21[1] = v46;
    v47 = v22[2];
    v48 = v22[3];
    sub_237FFBA20(v47, v48);
    v21[2] = v47;
    v21[3] = v48;
    v49 = v22[4];
    *((_BYTE *)v21 + 40) = *((_BYTE *)v22 + 40);
    v21[4] = v49;
    v60((char *)v21 + *(int *)(v23 + 28), (char *)v22 + *(int *)(v23 + 28), v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

char *sub_23806342C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = sub_2380BD5C8();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for SignedObject(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v7(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v6);
    v14 = *(int *)(v11 + 24);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = type metadata accessor for Signature(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
      v15[40] = v16[40];
      v7(&v15[*(int *)(v17 + 28)], &v16[*(int *)(v17 + 28)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_2380635C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t, uint64_t);
  int v15;
  int v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v6 = sub_2380BD5C8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = type metadata accessor for SignedObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v27 = *v10;
      v28 = v10[1];
      *(_OWORD *)v10 = *(_OWORD *)v11;
      sub_237FFBAB0(v27, v28);
      v8((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20), v6);
      v29 = *(int *)(v12 + 24);
      v30 = (uint64_t)v10 + v29;
      v31 = (char *)v11 + v29;
      v32 = type metadata accessor for Signature(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          v37 = *((_OWORD *)v31 + 1);
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *(_OWORD *)(v30 + 16) = v37;
          *(_QWORD *)(v30 + 32) = *((_QWORD *)v31 + 4);
          *(_BYTE *)(v30 + 40) = v31[40];
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v30 + *(int *)(v32 + 28), &v31[*(int *)(v32 + 28)], v6);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          v40 = *(_QWORD *)v30;
          v41 = *(_QWORD *)(v30 + 8);
          *(_OWORD *)v30 = *(_OWORD *)v31;
          sub_237FFBAB0(v40, v41);
          v42 = *(_QWORD *)(v30 + 16);
          v43 = *(_QWORD *)(v30 + 24);
          *(_OWORD *)(v30 + 16) = *((_OWORD *)v31 + 1);
          sub_237FFBAB0(v42, v43);
          *(_QWORD *)(v30 + 32) = *((_QWORD *)v31 + 4);
          *(_BYTE *)(v30 + 40) = v31[40];
          v8(v30 + *(int *)(v32 + 28), (uint64_t)&v31[*(int *)(v32 + 28)], v6);
          return a1;
        }
        sub_237FFD540(v30, type metadata accessor for Signature);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430) - 8) + 64);
      v25 = (void *)v30;
      v26 = (uint64_t *)v31;
      goto LABEL_8;
    }
    sub_237FFD540((uint64_t)v10, type metadata accessor for SignedObject);
LABEL_7:
    v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438) - 8) + 64);
    v25 = v10;
    v26 = v11;
LABEL_8:
    memcpy(v25, v26, v24);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v17((char *)v10 + *(int *)(v12 + 20), (char *)v11 + *(int *)(v12 + 20), v6);
  v18 = *(int *)(v12 + 24);
  v19 = (_OWORD *)((char *)v10 + v18);
  v20 = (_OWORD *)((char *)v11 + v18);
  v21 = type metadata accessor for Signature(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5430);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v38 = v20[1];
    *v19 = *v20;
    v19[1] = v38;
    *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
    *((_BYTE *)v19 + 40) = *((_BYTE *)v20 + 40);
    v17((char *)v19 + *(int *)(v21 + 28), (char *)v20 + *(int *)(v21 + 28), v6);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_2380638B8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_17Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_2380BD5C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_238063940()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_18Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_2380BD5C8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5438);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_2380639D0()
{
  unint64_t v0;
  unint64_t v1;

  sub_2380BD5C8();
  if (v0 <= 0x3F)
  {
    sub_237FFB4E8(319, &qword_2568C51C8, (void (*)(uint64_t))type metadata accessor for SignedObject);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_238063A64(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_237FFBA20(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v9 = *(int *)(a3 + 24);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = sub_2380BD5C8();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    v17 = type metadata accessor for VRFPublicKey(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      sub_237FFBA20(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v15[2] = v16[2];
      *((_BYTE *)v15 + 24) = *((_BYTE *)v16 + 24);
      v13((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_238063BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_2380BD5C8();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for VRFPublicKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_237FFBAB0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  }
  return result;
}

uint64_t sub_238063C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = sub_2380BD5C8();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = type metadata accessor for VRFPublicKey(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    sub_237FFBA20(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v14[2] = v15[2];
    *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_238063DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_237FFBAB0(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2380BD5C8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for VRFPublicKey(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v13) = v22(v18, 1, v20);
  v23 = v22(v19, 1, v20);
  if (!(_DWORD)v13)
  {
    if (!v23)
    {
      v29 = *(_QWORD *)v19;
      v30 = *(_QWORD *)(v19 + 8);
      sub_237FFBA20(*(_QWORD *)v19, v30);
      v31 = *(_QWORD *)v18;
      v32 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v30;
      sub_237FFBAB0(v31, v32);
      v33 = *(_QWORD *)(v19 + 16);
      *(_BYTE *)(v18 + 24) = *(_BYTE *)(v19 + 24);
      *(_QWORD *)(v18 + 16) = v33;
      v16(v18 + *(int *)(v20 + 24), v19 + *(int *)(v20 + 24), v14);
      return a1;
    }
    sub_237FFD540(v18, type metadata accessor for VRFPublicKey);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
    memcpy((void *)v18, (const void *)v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  v24 = *(_QWORD *)v19;
  v25 = *(_QWORD *)(v19 + 8);
  sub_237FFBA20(*(_QWORD *)v19, v25);
  *(_QWORD *)v18 = v24;
  *(_QWORD *)(v18 + 8) = v25;
  v26 = *(_QWORD *)(v19 + 16);
  *(_BYTE *)(v18 + 24) = *(_BYTE *)(v19 + 24);
  *(_QWORD *)(v18 + 16) = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v18 + *(int *)(v20 + 24), v19 + *(int *)(v20 + 24), v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_238063F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_2380BD5C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for VRFPublicKey(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_2380640C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for VRFPublicKey(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v23 = *(_QWORD *)v15;
      v24 = *(_QWORD *)(v15 + 8);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      sub_237FFBAB0(v23, v24);
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
      *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
      v13(v15 + *(int *)(v17 + 24), v16 + *(int *)(v17 + 24), v11);
      return a1;
    }
    sub_237FFD540(v15, type metadata accessor for VRFPublicKey);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15 + *(int *)(v17 + 24), v16 + *(int *)(v17 + 24), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_238064260()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23806426C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23806431C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_238064328(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_2380BD5C8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7360);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_2380643D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2380643F4(a1, a2, a3, (uint64_t)&unk_2380C1710, (uint64_t)"\t", qword_2568C7830, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);
}

void sub_2380643F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v9;
  unint64_t v10;

  sub_2380BD5C8();
  if (v9 <= 0x3F)
  {
    sub_237FFB4E8(319, a6, a7);
    if (v10 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_238064494(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_237FFBA20(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v9 = *(int *)(a3 + 24);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = sub_2380BD5C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_238064548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_238064594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_23806461C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_237FFBAB0(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_2380646AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_238064718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_238064798()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_9Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_2380BD5C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_238064830()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_10Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_2380BD5C8();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

_QWORD *sub_2380648BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = sub_2380BD5C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_23806494C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_238064984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t sub_2380649E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_238064A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_238064AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_2380BD5C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_238064B1C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238064B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_238064B68()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238064B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_2380BD5C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_238064BB8()
{
  return sub_238064BC8();
}

uint64_t sub_238064BC8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD5C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_238064C54()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238064C64()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238064C78()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_27Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2380BD5C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_238064D04()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_28Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2380BD5C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

ValueMetadata *type metadata accessor for Signature.SignatureAlgorithm()
{
  return &type metadata for Signature.SignatureAlgorithm;
}

ValueMetadata *type metadata accessor for NodeType()
{
  return &type metadata for NodeType;
}

ValueMetadata *type metadata accessor for LogType()
{
  return &type metadata for LogType;
}

ValueMetadata *type metadata accessor for Application()
{
  return &type metadata for Application;
}

ValueMetadata *type metadata accessor for ProtocolVersion()
{
  return &type metadata for ProtocolVersion;
}

ValueMetadata *type metadata accessor for Status()
{
  return &type metadata for Status;
}

unint64_t sub_238064DF0()
{
  unint64_t result;

  result = qword_2568C7AB8;
  if (!qword_2568C7AB8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3268, &type metadata for Status);
    atomic_store(result, (unint64_t *)&qword_2568C7AB8);
  }
  return result;
}

unint64_t sub_238064E38()
{
  unint64_t result;

  result = qword_2568C7AC0;
  if (!qword_2568C7AC0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3308, &type metadata for ProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_2568C7AC0);
  }
  return result;
}

unint64_t sub_238064E80()
{
  unint64_t result;

  result = qword_2568C7AC8;
  if (!qword_2568C7AC8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C33A8, &type metadata for Application);
    atomic_store(result, (unint64_t *)&qword_2568C7AC8);
  }
  return result;
}

unint64_t sub_238064EC8()
{
  unint64_t result;

  result = qword_2568C7AD0;
  if (!qword_2568C7AD0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3448, &type metadata for LogType);
    atomic_store(result, (unint64_t *)&qword_2568C7AD0);
  }
  return result;
}

unint64_t sub_238064F10()
{
  unint64_t result;

  result = qword_2568C7AD8;
  if (!qword_2568C7AD8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C34E8, &type metadata for NodeType);
    atomic_store(result, (unint64_t *)&qword_2568C7AD8);
  }
  return result;
}

unint64_t sub_238064F58()
{
  unint64_t result;

  result = qword_2568C7AE0;
  if (!qword_2568C7AE0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3588, &type metadata for Signature.SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2568C7AE0);
  }
  return result;
}

unint64_t sub_238064FA0()
{
  unint64_t result;

  result = qword_2568C7AE8;
  if (!qword_2568C7AE8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C35F0, &type metadata for MapType);
    atomic_store(result, (unint64_t *)&qword_2568C7AE8);
  }
  return result;
}

unint64_t sub_238064FE8()
{
  unint64_t result;

  result = qword_2568C7AF0;
  if (!qword_2568C7AF0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3690, &type metadata for VRFType);
    atomic_store(result, (unint64_t *)&qword_2568C7AF0);
  }
  return result;
}

unint64_t sub_238065030()
{
  unint64_t result;

  result = qword_2568C7AF8;
  if (!qword_2568C7AF8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3618, &type metadata for MapType);
    atomic_store(result, (unint64_t *)&qword_2568C7AF8);
  }
  return result;
}

unint64_t sub_238065078()
{
  unint64_t result;

  result = qword_2568C7B00;
  if (!qword_2568C7B00)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3658, &type metadata for MapType);
    atomic_store(result, (unint64_t *)&qword_2568C7B00);
  }
  return result;
}

unint64_t sub_2380650C0()
{
  unint64_t result;

  result = qword_2568C7B08;
  if (!qword_2568C7B08)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3510, &type metadata for NodeType);
    atomic_store(result, (unint64_t *)&qword_2568C7B08);
  }
  return result;
}

unint64_t sub_238065108()
{
  unint64_t result;

  result = qword_2568C7B10;
  if (!qword_2568C7B10)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3550, &type metadata for NodeType);
    atomic_store(result, (unint64_t *)&qword_2568C7B10);
  }
  return result;
}

unint64_t sub_238065150()
{
  unint64_t result;

  result = qword_2568C7B18;
  if (!qword_2568C7B18)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3470, &type metadata for LogType);
    atomic_store(result, (unint64_t *)&qword_2568C7B18);
  }
  return result;
}

unint64_t sub_238065198()
{
  unint64_t result;

  result = qword_2568C7B20;
  if (!qword_2568C7B20)
  {
    result = MEMORY[0x23B82B770](&unk_2380C34B0, &type metadata for LogType);
    atomic_store(result, (unint64_t *)&qword_2568C7B20);
  }
  return result;
}

unint64_t sub_2380651E0()
{
  unint64_t result;

  result = qword_2568C7B28;
  if (!qword_2568C7B28)
  {
    result = MEMORY[0x23B82B770](&unk_2380C35B0, &type metadata for Signature.SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2568C7B28);
  }
  return result;
}

unint64_t sub_238065228()
{
  unint64_t result;

  result = qword_2568C7B30;
  if (!qword_2568C7B30)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3730, &type metadata for Signature.SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2568C7B30);
  }
  return result;
}

unint64_t sub_238065270()
{
  unint64_t result;

  result = qword_2568C7B38;
  if (!qword_2568C7B38)
  {
    result = MEMORY[0x23B82B770](&unk_2380C36B8, &type metadata for VRFType);
    atomic_store(result, (unint64_t *)&qword_2568C7B38);
  }
  return result;
}

unint64_t sub_2380652B8()
{
  unint64_t result;

  result = qword_2568C7B40;
  if (!qword_2568C7B40)
  {
    result = MEMORY[0x23B82B770](&unk_2380C36F8, &type metadata for VRFType);
    atomic_store(result, (unint64_t *)&qword_2568C7B40);
  }
  return result;
}

unint64_t sub_238065300()
{
  unint64_t result;

  result = qword_2568C7B48;
  if (!qword_2568C7B48)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3290, &type metadata for Status);
    atomic_store(result, (unint64_t *)&qword_2568C7B48);
  }
  return result;
}

unint64_t sub_238065348()
{
  unint64_t result;

  result = qword_2568C7B50;
  if (!qword_2568C7B50)
  {
    result = MEMORY[0x23B82B770](&unk_2380C32D0, &type metadata for Status);
    atomic_store(result, (unint64_t *)&qword_2568C7B50);
  }
  return result;
}

unint64_t sub_238065390()
{
  unint64_t result;

  result = qword_2568C7B58;
  if (!qword_2568C7B58)
  {
    result = MEMORY[0x23B82B770](&unk_2380C33D0, &type metadata for Application);
    atomic_store(result, (unint64_t *)&qword_2568C7B58);
  }
  return result;
}

unint64_t sub_2380653D8()
{
  unint64_t result;

  result = qword_2568C7B60;
  if (!qword_2568C7B60)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3410, &type metadata for Application);
    atomic_store(result, (unint64_t *)&qword_2568C7B60);
  }
  return result;
}

unint64_t sub_238065420()
{
  unint64_t result;

  result = qword_2568C7B68;
  if (!qword_2568C7B68)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3330, &type metadata for ProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_2568C7B68);
  }
  return result;
}

unint64_t sub_238065468()
{
  unint64_t result;

  result = qword_2568C7B70;
  if (!qword_2568C7B70)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3370, &type metadata for ProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_2568C7B70);
  }
  return result;
}

unint64_t sub_2380654AC(unint64_t result)
{
  uint64_t v1;

  v1 = 4;
  if (result != 999999999)
    v1 = result;
  if (result >= 4)
    return v1;
  return result;
}

uint64_t sub_2380654F8(uint64_t result)
{
  switch(result)
  {
    case 1:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 4;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 6;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2380655C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_2380BD3A0();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_23806564C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  sub_237FFBA20(v3, v2);
  sub_237FFBA20(v3, v2);
  sub_2380BD3AC();
  sub_237FFBAB0(v3, v2);
  sub_238065828();
  sub_2380BDF88();
  if ((*(_BYTE *)(v4 - 81) & 1) != 0)
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_OWORD *)(v4 - 112) = xmmword_2380BEAC0;
    v8 = MEMORY[0x24BEE4260];
    v9 = MEMORY[0x24BEE42B0];
    do
    {
      v10 = *(_BYTE *)(v4 - 82);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v4 - 112);
      *(_QWORD *)(v11 + 56) = v8;
      *(_QWORD *)(v11 + 64) = v9;
      *(_BYTE *)(v11 + 32) = v10;
      v12 = sub_2380BDD30();
      v14 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_2380267E8(0, v5[2] + 1, 1, v5);
      v16 = v5[2];
      v15 = v5[3];
      if (v16 >= v15 >> 1)
        v5 = sub_2380267E8((_QWORD *)(v15 > 1), v16 + 1, 1, v5);
      v5[2] = v16 + 1;
      v17 = &v5[2 * v16];
      v17[4] = v12;
      v17[5] = v14;
      sub_2380BDF88();
    }
    while (*(_BYTE *)(v4 - 81) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 120) + 8))(v1, v0);
  *(_QWORD *)(v4 - 96) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E60);
  sub_23804390C();
  v6 = sub_2380BDCD0();
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_238065828()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C7B78;
  if (!qword_2568C7B78)
  {
    v1 = sub_2380BD3A0();
    result = MEMORY[0x23B82B770](MEMORY[0x24BDCDD80], v1);
    atomic_store(result, (unint64_t *)&qword_2568C7B78);
  }
  return result;
}

CloudAttestation::NopTransparencyLog __swiftcall NopTransparencyLog.init()()
{
  _BYTE *v0;
  CloudAttestation::NopTransparencyLog result;

  *v0 = 0;
  return result;
}

CloudAttestation::NopTransparencyLog __swiftcall NopTransparencyLog.init(nonEmptyProofs:)(CloudAttestation::NopTransparencyLog nonEmptyProofs)
{
  CloudAttestation::NopTransparencyLog *v1;

  v1->nonEmptyProofs = nonEmptyProofs.nonEmptyProofs;
  return nonEmptyProofs;
}

uint64_t NopTransparencyLog.proveInclusion(of:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = *v1;
  return swift_task_switch();
}

uint64_t sub_2380658A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v0 + 24) == 1)
  {
    type metadata accessor for ATLogProofs(0);
    sub_238065BBC();
    sub_2380BD730();
  }
  else
  {
    sub_2380BD5BC();
    v2 = type metadata accessor for ATLogProofs(0);
    v3 = v1 + *(int *)(v2 + 20);
    v4 = type metadata accessor for LogEntry(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
    v5 = v1 + *(int *)(v2 + 24);
    v6 = type metadata accessor for LogConsistency(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NopTransparencyLog.verifyInclusion(of:proofs:)()
{
  uint64_t v0;

  return sub_238065C04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_238065998(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = *v1;
  return swift_task_switch();
}

uint64_t sub_2380659B8()
{
  uint64_t v0;

  return sub_238065C04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2380659C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = type metadata accessor for LogConsistency(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LogEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *((_QWORD *)v9 + 2) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v9 + 24) = xmmword_2380BEAE0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  v9[56] = 1;
  sub_2380BD5BC();
  v10 = &v9[*(int *)(v6 + 40)];
  v11 = type metadata accessor for SignedObject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = type metadata accessor for ATLogProofs(0);
  v13 = a1 + *(int *)(v12 + 20);
  sub_238005240(v13, &qword_2568C5440);
  sub_238001DE4((uint64_t)v9, v13, type metadata accessor for LogEntry);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  sub_2380BD5BC();
  v14 = *(int *)(v2 + 20);
  if (qword_2568C4E50 != -1)
    swift_once();
  *(_QWORD *)&v5[v14] = qword_2568C4E58;
  v15 = a1 + *(int *)(v12 + 24);
  swift_retain();
  sub_238005240(v15, &qword_2568C5448);
  sub_238001DE4((uint64_t)v5, v15, type metadata accessor for LogConsistency);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
}

unint64_t sub_238065BBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C55B8;
  if (!qword_2568C55B8)
  {
    v1 = type metadata accessor for ATLogProofs(255);
    result = MEMORY[0x23B82B770](&unk_2380BF3A8, v1);
    atomic_store(result, (unint64_t *)&qword_2568C55B8);
  }
  return result;
}

uint64_t sub_238065C04(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t getEnumTagSinglePayload for NopTransparencyLog(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NopTransparencyLog(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_238065CFC + 4 * byte_2380C3A25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_238065D30 + 4 * byte_2380C3A20[v4]))();
}

uint64_t sub_238065D30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_238065D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x238065D40);
  return result;
}

uint64_t sub_238065D4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238065D54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_238065D58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238065D60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NopTransparencyLog()
{
  return &type metadata for NopTransparencyLog;
}

uint64_t sub_238065D80()
{
  return swift_initClassMetadata2();
}

uint64_t sub_238065DC8(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_238065E04(a1);
  return v2;
}

uint64_t **sub_238065E04(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;

  v3 = *v1;
  swift_defaultActor_initialize();
  v1[14] = (uint64_t *)sub_23800AE6C(a1, v3[10], v3[11], v3[12]);
  v1[15] = v4;
  return v1;
}

uint64_t sub_238065E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (_QWORD *)*v2;
  swift_beginAccess();
  v6 = v2[14];
  v7 = v5[10];
  v8 = v5[11];
  v9 = v5[12];
  swift_bridgeObjectRetain();
  sub_23800AF14(a1, v6, v7, v8, v9, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_238065EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v7;
  uint64_t *v8;

  v7 = *v3;
  swift_beginAccess();
  v8 = (uint64_t *)type metadata accessor for TemporalCache(0, v7[10], v7[11], v7[12]);
  LOBYTE(a3) = sub_23800B144(a1, a2, a3, v8);
  swift_endAccess();
  return a3 & 1;
}

uint64_t sub_238065F68()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for AsyncTemporalCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncTemporalCache);
}

uint64_t sub_238065F98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_238065FA4()
{
  return sub_238065F98();
}

uint64_t sub_238065FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  v7[15] = a2;
  v7[16] = a3;
  v7[14] = a1;
  type metadata accessor for AttestationBundle(0);
  v7[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E00);
  v7[22] = swift_task_alloc();
  v8 = sub_2380BD598();
  v7[23] = v8;
  v7[24] = *(_QWORD *)(v8 - 8);
  v7[25] = swift_task_alloc();
  v9 = sub_2380BD418();
  v7[26] = v9;
  v7[27] = *(_QWORD *)(v9 - 8);
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  v10 = sub_2380BD844();
  v7[30] = v10;
  v7[31] = *(_QWORD *)(v10 - 8);
  v7[32] = swift_task_alloc();
  v11 = sub_2380BD808();
  v7[33] = v11;
  v7[34] = *(_QWORD *)(v11 - 8);
  v7[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_238066120()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[10] = type metadata accessor for EnsembleValidator();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E18);
  sub_2380BDD54();
  sub_2380BD7FC();
  v0[11] = sub_23800EBF0(MEMORY[0x24BEE4AF8]);
  v1 = dword_2568C7E20;
  v2 = (_QWORD *)swift_task_alloc();
  v0[36] = v2;
  *v2 = v0;
  v2[1] = sub_238066224;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_2568C7E20 + v1))(v0[17], (uint64_t)(v0 + 11));
}

uint64_t sub_238066224()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2380662CC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint8_t *buf;
  uint64_t v96;
  NSObject *log;
  os_log_type_t type;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  id v108;
  id v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v2 = v0 + 11;
  v1 = v0[11];
  if (*(_QWORD *)(v1 + 16)
    && (v3 = sub_23800DEDC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x80000002380C7EE0), (v4 & 1) != 0)&& (sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)(v0 + 2)), __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28), (swift_dynamicCast() & 1) != 0))
  {
    v6 = v0[6];
    v5 = v0[7];
    v7 = v0[8];
    v8 = v0[9];
  }
  else
  {
    v9 = (uint64_t *)v0[17];
    v6 = *v9;
    v5 = v9[1];
    v10 = *MEMORY[0x24BE078F8];
    sub_237FFBA20(*v9, v5);
    *(_QWORD *)&v111 = sub_23800A21C(v10);
    *((_QWORD *)&v111 + 1) = v11;
    sub_23801B708((uint64_t)&v111);
    v110 = v111;
    sub_237FFBA20(v6, v5);
    sub_23801B9A0((uint64_t)&v110);
    LODWORD(v10) = v12;
    sub_237FFBAB0(v6, v5);
    if ((_DWORD)v10)
    {
      sub_23801BD6C();
      v13 = swift_allocError();
      *v14 = 0;
      v108 = (id)v13;
      swift_willThrow();
      sub_237FFBAB0(v6, v5);
      v16 = *((_QWORD *)&v110 + 1);
      v15 = v110;
LABEL_15:
      sub_237FFBAB0(v15, v16);
LABEL_27:
      swift_bridgeObjectRelease();
      v65 = v108;
      v66 = v108;
      v67 = sub_2380BD7F0();
      v68 = sub_2380BDF64();
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc();
        v107 = v0;
        v70 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v69 = 138412290;
        v71 = v108;
        v72 = _swift_stdlib_bridgeErrorToNSError();
        v2[1] = v72;
        sub_2380BDF94();
        *v70 = v72;

        _os_log_impl(&dword_237FF6000, v67, v68, "AttestationBundle validation failed: %@", v69, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
        swift_arrayDestroy();
        v73 = v70;
        v0 = v107;
        MEMORY[0x23B82B830](v73, -1, -1);
        MEMORY[0x23B82B830](v69, -1, -1);

      }
      else
      {

      }
      v74 = v0[34];
      v75 = v0[35];
      v76 = v0[33];
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v75, v76);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v77 = (uint64_t (*)(void))v0[1];
      return v77();
    }
    v8 = *((_QWORD *)&v110 + 1);
    v7 = v110;
  }
  v17 = v0[19];
  if (v17 >> 60 != 15)
  {
    v102 = v0 + 11;
    v18 = v0[18];
    v114 = 0;
    *(_QWORD *)&v110 = 0;
    sub_238009148(v18, v17);
    sub_237FFBA20(v6, v5);
    sub_237FFBA20(v7, v8);
    sub_238034DF4(v6, v5, v7, v8);
    sub_237FFBAB0(v6, v5);
    v105 = v7;
    v19 = v7;
    v20 = v8;
    sub_237FFBAB0(v19, v8);
    v21 = v111;
    v23 = v0[18];
    v22 = v0[19];
    if (*((_QWORD *)&v111 + 1) >> 60 == 15)
    {
      sub_237FFBA20(v23, v22);
      sub_238008CF0(v21, *((unint64_t *)&v21 + 1));
      sub_238008CF0(v23, v22);
LABEL_16:
      v29 = v0[18];
      v30 = v0[19];
      type metadata accessor for CloudAttestationError(0);
      sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
      v31 = v0;
      v32 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      v108 = (id)v32;
      v0 = v31;
      swift_willThrow();
      sub_237FFBAB0(v6, v5);
      sub_237FFBAB0(v105, v20);
      sub_238008CF0(v29, v30);
      v2 = v102;
      goto LABEL_27;
    }
    sub_238009148(v23, v22);
    sub_238009148(v21, *((unint64_t *)&v21 + 1));
    sub_238008ED0(v21, *((uint64_t *)&v21 + 1));
    v25 = v24;
    sub_238008CF0(v23, v22);
    sub_238008CF0(v21, *((unint64_t *)&v21 + 1));
    sub_238008CF0(v21, *((unint64_t *)&v21 + 1));
    if ((v25 & 1) == 0)
      goto LABEL_16;
    sub_238008CF0(v0[18], v0[19]);
    v8 = v20;
    v2 = v0 + 11;
    v7 = v105;
  }
  *(_QWORD *)&v111 = v6;
  *((_QWORD *)&v111 + 1) = v5;
  v112 = v7;
  v113 = v8;
  SEP.Attestation.publicKeyData.getter(&v110);
  v26 = *((_QWORD *)&v110 + 1);
  if ((~*((_QWORD *)&v110 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
    v27 = swift_allocError();
    *v28 = 0xD000000000000017;
    v28[1] = 0x80000002380C7F00;
    swift_storeEnumTagMultiPayload();
    v108 = (id)v27;
    swift_willThrow();
    sub_237FFBAB0(v6, v5);
    v15 = v7;
    v16 = v8;
    goto LABEL_15;
  }
  v33 = v110;
  sub_23801BDB0(v110, *((uint64_t *)&v110 + 1));
  sub_23801BDC4(v33, v26);
  v34 = sub_2380BD7F0();
  type = sub_2380BDF70();
  v103 = v2;
  v106 = v7;
  v99 = v33;
  v100 = v26;
  if (os_log_type_enabled(v34, type))
  {
    log = v34;
    v35 = v0[32];
    v94 = v0[31];
    v36 = v0[30];
    v37 = (uint8_t *)swift_slowAlloc();
    v96 = swift_slowAlloc();
    *(_QWORD *)&v111 = v96;
    buf = v37;
    *(_DWORD *)v37 = 136315138;
    sub_23801AED4(v33, v26);
    sub_238001820(&qword_2568C5E20, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC6308]);
    v38 = v36;
    v39 = sub_2380BE1A4();
    v41 = v40;
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v35, v38);
    v0[13] = sub_238013968(v39, v41, (uint64_t *)&v111);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    sub_23801BDCC(v33, v26);
    sub_23801BDCC(v33, v26);
    _os_log_impl(&dword_237FF6000, log, type, "AttestationBundle passed validation for public key: %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v96, -1, -1);
    MEMORY[0x23B82B830](buf, -1, -1);

  }
  else
  {

    sub_23801BDCC(v33, v26);
    sub_23801BDCC(v33, v26);
  }
  v42 = v0[23];
  v43 = v0[24];
  v44 = v0[22];
  v45 = v0[17];
  v46 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v45 + *(int *)(v46 + 36), v44, &qword_2568C5E00);
  v101 = v8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v42) == 1)
  {
    v47 = v0[22];
    sub_2380BD58C();
    sub_238005240(v47, &qword_2568C5E00);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[24] + 32))(v0[25], v0[22], v0[23]);
  }
  v48 = v0[28];
  v49 = v0[26];
  v50 = v0[27];
  v52 = v0[24];
  v51 = v0[25];
  v53 = v0[23];
  sub_2380BD574();
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
  sub_2380BD40C();
  v54 = sub_2380BD3E8();
  v55 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v55(v48, v49);
  v56 = v0[29];
  v57 = v0[26];
  v58 = v0[27];
  if ((v54 & 1) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_238001820(&qword_2568C5E18, type metadata accessor for CloudAttestationError, (uint64_t)&protocol conformance descriptor for CloudAttestationError);
    v63 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v64, v56, v57);
    swift_storeEnumTagMultiPayload();
    v108 = (id)v63;
    swift_willThrow();
    sub_23801BDCC(v99, v100);
    sub_237FFBAB0(v6, v5);
    sub_237FFBAB0(v106, v101);
    v55(v56, v57);
    v2 = v103;
    goto LABEL_27;
  }
  v59 = v0[21];
  v60 = v0[17];
  v62 = (uint64_t *)v0[14];
  v61 = v0[15];
  *v62 = v99;
  v62[1] = v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v61, v56, v57);
  sub_238013570(v60, v59, type metadata accessor for AttestationBundle);
  v114 = 0;
  *(_QWORD *)&v110 = 0;
  sub_237FFBA20(v6, v5);
  sub_237FFBA20(v106, v101);
  sub_23801BDB0(v99, v100);
  sub_238033F18(v6, v5, v106, v101);
  sub_237FFBAB0(v6, v5);
  sub_237FFBAB0(v106, v101);
  if (v112 == 2)
  {
    sub_237FFBAB0(v6, v5);
    sub_237FFBAB0(v106, v101);
    sub_23801BDCC(v99, v100);
    v109 = 0;
    v104 = 0;
  }
  else
  {
    v79 = v111;
    v80 = *((_QWORD *)&v111 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_2380BEAF0;
    v82 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v81 + 56) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v81 + 64) = v82;
    v83 = MEMORY[0x24BEE4568];
    *(_DWORD *)(v81 + 32) = v79;
    v84 = MEMORY[0x24BEE45B8];
    *(_QWORD *)(v81 + 96) = v83;
    *(_QWORD *)(v81 + 104) = v84;
    *(_QWORD *)(v81 + 72) = v80;
    v109 = (id)sub_2380BDD30();
    v104 = v85;
    sub_23801BDCC(v99, v100);
    sub_237FFBAB0(v6, v5);
    sub_237FFBAB0(v106, v101);
  }
  v86 = v0[34];
  v87 = v0[35];
  v88 = v0[33];
  v89 = v0[21];
  v90 = v0[16];
  v55(v0[29], v0[26]);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
  v91 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  *(_QWORD *)(v90 + v91[7]) = 0;
  sub_238001DE4(v89, v90, type metadata accessor for AttestationBundle);
  v92 = (_QWORD *)(v90 + v91[5]);
  *v92 = v109;
  v92[1] = v104;
  v93 = (_QWORD *)(v90 + v91[6]);
  *v93 = 0;
  v93[1] = 0;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v77 = (uint64_t (*)(void))v0[1];
  return v77();
}

uint64_t sub_238066E8C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 296);
  swift_bridgeObjectRelease();
  v2 = v1;
  v3 = v1;
  v4 = sub_2380BD7F0();
  v5 = sub_2380BDF64();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v1;
    v9 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 96) = v9;
    sub_2380BDF94();
    *v7 = v9;

    _os_log_impl(&dword_237FF6000, v4, v5, "AttestationBundle validation failed: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E08);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v7, -1, -1);
    MEMORY[0x23B82B830](v6, -1, -1);

  }
  else
  {

  }
  v11 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 280);
  v12 = *(_QWORD *)(v0 + 264);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2380670A8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6388);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_2380BD448();
  __swift_allocate_value_buffer(v3, qword_2568C7C20);
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_2568C7C20);
  sub_2380BD424();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t static EnsembleChannelSecurity.sealedHashSlotUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2568C5008 != -1)
    swift_once();
  v2 = sub_2380BD448();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2568C7C20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static EnsembleChannelSecurity.sealedHashSlotSalt.getter()
{
  return 1953259859;
}

uint64_t sub_238067208(uint64_t a1)
{
  return sub_23806BDF0(a1, qword_2568C9EE0);
}

uint64_t EnsembleChannelSecurity.Leader.symmetricKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 28);
  v4 = sub_2380BD898();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for EnsembleChannelSecurity.Leader(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7D08);
}

uint64_t EnsembleChannelSecurity.Leader.maxChassisCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 40));
}

uint64_t EnsembleChannelSecurity.Leader.maxChassisCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  *(_QWORD *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*EnsembleChannelSecurity.Leader.maxChassisCount.modify())()
{
  type metadata accessor for EnsembleChannelSecurity.Leader(0);
  return nullsub_1;
}

uint64_t EnsembleChannelSecurity.Leader.maxNodesPerChassis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 44));
}

uint64_t EnsembleChannelSecurity.Leader.maxNodesPerChassis.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  *(_QWORD *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*EnsembleChannelSecurity.Leader.maxNodesPerChassis.modify())()
{
  type metadata accessor for EnsembleChannelSecurity.Leader(0);
  return nullsub_1;
}

uint64_t EnsembleChannelSecurity.Leader.init<A>(udid:followerUDIDs:keySize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = a3;
  v13 = (int *)type metadata accessor for EnsembleChannelSecurity.Leader(0);
  v14 = v13[8];
  *(_QWORD *)(a7 + v14) = 0;
  v15 = v13[9];
  v16 = sub_23800C404(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a7 + v15) = v16;
  *(_QWORD *)(a7 + v13[10]) = 2;
  *(_QWORD *)(a7 + v13[11]) = 4;
  if (MEMORY[0x24BDE8390])
    v17 = MEMORY[0x24BDE8380] == 0;
  else
    v17 = 1;
  if (v17 || MEMORY[0x24BDE8398] == 0 || MEMORY[0x24BDE8388] == 0)
  {
    swift_bridgeObjectRelease();
    sub_238067730();
    swift_allocError();
    *(_OWORD *)v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_BYTE *)(v33 + 32) = 0x80;
    swift_willThrow();
    v34 = sub_2380BD8C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a4, v34);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(v53, a5);
    goto LABEL_14;
  }
  v44 = a1;
  v45 = a6;
  v48 = a2;
  v50 = v43;
  v51 = a4;
  v20 = MEMORY[0x24BDAC7A8](v16);
  v46 = (_QWORD *)((char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = v43;
  v22 = a5;
  v23 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v53, a5);
  v27 = type metadata accessor for EnsembleHPKE.Leader(0);
  v47 = v43;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = v52;
  EnsembleHPKE.Leader.init()((uint64_t)v29);
  if (v30)
  {
    swift_bridgeObjectRelease();
    v31 = sub_2380BD8C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v51, v31);
    v32 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v32(v26, v22);
    v32((uint64_t)v25, v22);
LABEL_14:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v43[2] = v14;
  v52 = v15;
  v36 = sub_2380BD8C8();
  v43[1] = v43;
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)v43 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(void (**)(char *, uint64_t))(v37 + 16);
  v41 = v51;
  v43[0] = v42;
  v40(v39, v51);
  sub_238067774(v44, v48, (uint64_t)v25, (uint64_t)v29, (uint64_t)v39, v22, v45, v46);
  (*(void (**)(uint64_t, _QWORD))(v37 + 8))(v41, v43[0]);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v53, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_238001DE4((uint64_t)v46, a7, type metadata accessor for EnsembleChannelSecurity.Leader);
}

unint64_t sub_238067730()
{
  unint64_t result;

  result = qword_2568C7C38;
  if (!qword_2568C7C38)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for EnsembleChannelSecurity.Error, &type metadata for EnsembleChannelSecurity.Error);
    atomic_store(result, (unint64_t *)&qword_2568C7C38);
  }
  return result;
}

uint64_t sub_238067774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a1;
  v33 = a2;
  v34 = a7;
  v36 = a4;
  v37 = a5;
  v38 = a3;
  v10 = sub_2380BD8C8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for EnsembleChannelSecurity.Leader(0);
  v35 = v18[8];
  *(_QWORD *)((char *)a8 + v35) = 0;
  v19 = v18[9];
  *(_QWORD *)((char *)a8 + v19) = sub_23800C404(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)a8 + v18[10]) = 2;
  *(_QWORD *)((char *)a8 + v18[11]) = 4;
  v20 = v33;
  *a8 = v32;
  a8[1] = v20;
  v32 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v38, a6);
  v33 = a6;
  a8[2] = sub_2380BDF28();
  v21 = v36;
  sub_238013570(v36, (uint64_t)a8 + v18[6], type metadata accessor for EnsembleHPKE.Leader);
  v22 = v37;
  (*(void (**)(char *))(v11 + 16))(v14);
  v23 = v21;
  sub_2380BD880();
  v24 = (_QWORD *)(v21 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 24));
  v25 = v24[6];
  v26 = v24[7];
  v27 = __swift_project_boxed_opaque_existential_1(v24 + 3, v25);
  v28 = sub_2380679CC((uint64_t)v27, v25, v26);
  *(_QWORD *)((char *)a8 + v35) = v28;
  if (v28 && (v29 = v31[1], sub_238067F88(), v29))
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, v10);
    sub_237FFD540(v23, type metadata accessor for EnsembleHPKE.Leader);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v33);
    return sub_237FFD540((uint64_t)a8, type metadata accessor for EnsembleChannelSecurity.Leader);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, v10);
    sub_237FFD540(v23, type metadata accessor for EnsembleHPKE.Leader);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v38, v33);
  }
}

_QWORD *sub_2380679CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v5 = sub_2380BD448();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if (qword_2568C4EA0 != -1)
    swift_once();
  v10 = __swift_project_value_buffer(v5, (uint64_t)qword_2568C9B80);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  if (*(_QWORD *)(v9 + 16) && (v11 = sub_23800DF54((uint64_t)v8), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = (unint64_t *)(v13 + 56);
      v16 = (unint64_t *)(v13 + 56);
      while (1)
      {
        v18 = *v16;
        v16 += 7;
        v17 = v18;
        if (v18 >> 60 != 15)
        {
          v19 = *(v15 - 1);
          sub_237FFBA20(v19, v17);
          SecureConfig.init(from:)(v19, v17, (uint64_t)&v38);
          v20 = v40;
          if (v40)
          {
            v22 = v38;
            v21 = v39;
            v24 = v41;
            v23 = v42;
            if ((sub_23806BB9C(&v38) & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v38 = v22;
              v39 = v21;
              v40 = v20;
              v41 = v24;
              v42 = v23;
              sub_237FFBA20(v22, v21);
              swift_bridgeObjectRetain();
              sub_237FFBA20(v24, v23);
              DarwinInit.init(from:)(&v38, (uint64_t)&v36);
              v38 = v36;
              LOBYTE(v39) = v37;
              v29 = DarwinInit.ensembleCertificateFingerprints.getter();
              swift_bridgeObjectRelease();
              sub_23804B11C(v22, v21, v20, v24, v23);
              swift_bridgeObjectRelease();
              return v29;
            }
            sub_23804B11C(v22, v21, v20, v24, v23);
          }
        }
        v15 = v16;
        if (!--v14)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    if (qword_2568C5010 != -1)
      swift_once();
    v31 = sub_2380BD808();
    __swift_project_value_buffer(v31, (uint64_t)qword_2568C9EE0);
    v32 = sub_2380BD7F0();
    v33 = sub_2380BDF64();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_237FF6000, v32, v33, "No darwin-init entry in SecureConfigDB", v34, 2u);
      MEMORY[0x23B82B830](v34, -1, -1);
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (qword_2568C5010 != -1)
      swift_once();
    v25 = sub_2380BD808();
    __swift_project_value_buffer(v25, (uint64_t)qword_2568C9EE0);
    v26 = sub_2380BD7F0();
    v27 = sub_2380BDF64();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_237FF6000, v26, v27, "No SecureConfig entries in SecureConfigDB", v28, 2u);
      MEMORY[0x23B82B830](v28, -1, -1);
    }

  }
  return 0;
}

_QWORD *sub_238067F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const __CFData *v13;
  __SecCertificate *v14;
  void *v15;
  __SecCertificate *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  __SecCertificate *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v2 = v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 24);
  v3 = (_QWORD *)(v2 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 24));
  v4 = v3[6];
  v5 = v3[7];
  __swift_project_boxed_opaque_existential_1(v3 + 3, v4);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  if (!v1)
  {
    if (!result[2])
    {
      swift_bridgeObjectRelease();
      sub_238067730();
      swift_allocError();
      *(_OWORD *)v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_BYTE *)(v22 + 32) = 64;
      return (_QWORD *)swift_willThrow();
    }
    v8 = result[4];
    v7 = result[5];
    sub_237FFBA20(v8, v7);
    swift_bridgeObjectRelease();
    sub_237FFBA20(v8, v7);
    sub_237FFBA20(v8, v7);
    sub_2380068C4(v8, v7);
    v10 = v9;
    v12 = v11;
    v13 = (const __CFData *)sub_2380BD358();
    sub_237FFBAB0(v10, v12);
    v14 = SecCertificateCreateWithData(0, v13);

    if (!v14)
    {
      type metadata accessor for ProvisioningCertificate.Error();
      sub_238001820(&qword_2568C7C60, (uint64_t (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error, (uint64_t)&protocol conformance descriptor for ProvisioningCertificate.Error);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_237FFBAB0(v8, v7);
      return (_QWORD *)sub_237FFBAB0(v8, v7);
    }
    ProvisioningCertificate.init(from:)(v14, &v34);
    sub_237FFBAB0(v8, v7);
    v16 = v34;
    v15 = v35;
    v17 = v37;
    v18 = v39;
    if (v37)
    {
      if (!v39)
      {
        sub_238067730();
        swift_allocError();
        *(_OWORD *)v24 = xmmword_2380C3B30;
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)(v24 + 24) = 0;
        *(_BYTE *)(v24 + 32) = 64;
        swift_willThrow();
        goto LABEL_14;
      }
      v19 = v36;
      v20 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SEP.Identity.init(string:)(v20, v18, &v34);
      if (v36 == 2)
      {
        swift_bridgeObjectRelease();
        sub_238067730();
        swift_allocError();
        *(_OWORD *)v21 = xmmword_2380C3B20;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_BYTE *)(v21 + 32) = 64;
        swift_willThrow();
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return (_QWORD *)sub_237FFBAB0(v8, v7);
      }
      v33 = v35;
      v40 = v19;
      v25 = (int)v34;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_2380BEAF0;
      v27 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v26 + 64) = v27;
      v28 = MEMORY[0x24BEE4568];
      *(_DWORD *)(v26 + 32) = v25;
      v29 = MEMORY[0x24BEE45B8];
      *(_QWORD *)(v26 + 96) = v28;
      *(_QWORD *)(v26 + 104) = v29;
      *(_QWORD *)(v26 + 72) = v33;
      v30 = sub_2380BDD30();
      v31 = v40;
      v40 = v32;
      sub_23806B7F4(v31, v17, v30, v32);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      sub_238067730();
      swift_allocError();
      *(_OWORD *)v23 = xmmword_2380C3B40;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)(v23 + 24) = 0;
      *(_BYTE *)(v23 + 32) = 64;
      swift_willThrow();
      swift_bridgeObjectRelease();

    }
    swift_bridgeObjectRelease();
    return (_QWORD *)sub_237FFBAB0(v8, v7);
  }
  return result;
}

uint64_t EnsembleChannelSecurity.Leader.attest()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_2380BD418();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2380683FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[3];
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 24));
  type metadata accessor for EnsembleHPKE.Leader(0);
  v3 = *v2;
  sub_2380BE294();
  sub_2380BD3F4();
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = sub_2380684B0;
  return NodeAttestor.attest(key:expiration:nonce:)(v0[2], v3, v0[6], 0, 0xF000000000000000);
}

uint64_t sub_2380684B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[5] + 8))(v2[6], v2[4]);
  return swift_task_switch();
}

uint64_t sub_238068524()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_2568C5010 != -1)
    swift_once();
  v1 = sub_2380BD808();
  __swift_project_value_buffer(v1, (uint64_t)qword_2568C9EE0);
  v2 = sub_2380BD7F0();
  v3 = sub_2380BDF70();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_237FF6000, v2, v3, "Leader attestation generated", v4, 2u);
    MEMORY[0x23B82B830](v4, -1, -1);
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238068610()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnsembleChannelSecurity.Leader.rekey()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v2 = sub_2380BD8C8();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_2380BD898();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  v8 = (id *)(v0 + *(int *)(v7 + 24));
  if (*((_BYTE *)v8 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 28)) == 1)
  {
    sub_2380934D0();
    if (v1)
      return;
  }
  else
  {
    sub_23809318C();
    if (v1)
      return;
  }
  v10 = v9;

  *v8 = v10;
  v11 = v0 + *(int *)(v7 + 28);
  sub_2380BD88C();
  sub_2380BD8BC();
  sub_2380BD880();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v11, v6, v3);
  if (qword_2568C5010 != -1)
    swift_once();
  v12 = sub_2380BD808();
  __swift_project_value_buffer(v12, (uint64_t)qword_2568C9EE0);
  v13 = sub_2380BD7F0();
  v14 = sub_2380BDF70();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_237FF6000, v13, v14, "Leader rekeyed", v15, 2u);
    MEMORY[0x23B82B830](v15, -1, -1);
  }

}

uint64_t EnsembleChannelSecurity.Leader.pair(with:authenticatedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = sub_2380BD898();
  v5[14] = v6;
  v5[15] = *(_QWORD *)(v6 - 8);
  v5[16] = swift_task_alloc();
  type metadata accessor for AttestationBundle(0);
  v5[17] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7C50);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v7 = sub_2380BD910();
  v5[22] = v7;
  v5[23] = *(_QWORD *)(v7 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_238068974()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35[2];

  if (qword_2568C5010 != -1)
    swift_once();
  v1 = sub_2380BD808();
  *(_QWORD *)(v0 + 216) = __swift_project_value_buffer(v1, (uint64_t)qword_2568C9EE0);
  swift_bridgeObjectRetain_n();
  v2 = sub_2380BD7F0();
  v3 = sub_2380BDF70();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 88);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 80);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v35[0] = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = sub_238013968(v6, v5, v35);
    sub_2380BDF94();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237FF6000, v2, v3, "Leader pairing with %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v8, -1, -1);
    MEMORY[0x23B82B830](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if ((sub_23806A9BC(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(*(_QWORD *)(v0 + 104) + 16)) & 1) != 0)
  {
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = type metadata accessor for EnsembleChannelSecurity.Leader(0);
    *(_QWORD *)(v0 + 224) = v11;
    v12 = *(_QWORD *)(v9 + *(int *)(v11 + 32));
    type metadata accessor for EnsembleHPKE.Leader(0);
    v13 = *(_QWORD *)(v0 + 80);
    if (v12)
    {
      v14 = *(_QWORD *)(v0 + 168);
      swift_bridgeObjectRetain();
      _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(v13, v10, v12, v14);
      swift_bridgeObjectRelease();
      v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2568C7C58
                                                                                         + dword_2568C7C58);
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 232) = v15;
      *v15 = v0;
      v15[1] = sub_238068EB4;
      v16 = *(_QWORD *)(v0 + 200);
      v17 = *(_QWORD *)(v0 + 168);
      v18 = *(_QWORD *)(v0 + 152);
    }
    else
    {
      _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(*(_QWORD *)(v0 + 80), v10, 0, *(_QWORD *)(v0 + 160));
      v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2568C7C58
                                                                                         + dword_2568C7C58);
      v33 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 248) = v33;
      *v33 = v0;
      v33[1] = sub_238069B7C;
      v16 = *(_QWORD *)(v0 + 192);
      v17 = *(_QWORD *)(v0 + 160);
      v18 = *(_QWORD *)(v0 + 144);
    }
    return v34(v16, v18, *(_QWORD *)(v0 + 96), 0, 0xC000000000000000, v17);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v19 = sub_2380BD7F0();
    v20 = sub_2380BDF70();
    v21 = os_log_type_enabled(v19, v20);
    v22 = *(_QWORD *)(v0 + 88);
    if (v21)
    {
      v23 = *(_QWORD *)(v0 + 80);
      v24 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v35[0] = v25;
      *(_DWORD *)v24 = 136446466;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = sub_238013968(v23, v22, v35);
      sub_2380BDF94();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2082;
      swift_bridgeObjectRetain();
      v26 = sub_2380BDF10();
      v28 = v27;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 40) = sub_238013968(v26, v28, v35);
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237FF6000, v19, v20, "Follower UDID %{public}s not in expected set %{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v25, -1, -1);
      MEMORY[0x23B82B830](v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    v30 = *(_QWORD *)(v0 + 80);
    v29 = *(_QWORD *)(v0 + 88);
    sub_238067730();
    swift_allocError();
    *(_QWORD *)v31 = v30;
    *(_QWORD *)(v31 + 8) = v29;
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_BYTE *)(v31 + 32) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_238068EB4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_238068F18()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const __CFData *v9;
  __SecCertificate *v10;
  uint64_t v11;
  void *v12;
  __SecCertificate *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t type;
  uint64_t v99;
  __SecCertificate *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  __SecCertificate *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __SecCertificate *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;

  v1 = v0[17];
  sub_238013570(v0[19], v1, type metadata accessor for AttestationBundle);
  v2 = *(_QWORD **)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_237FFD540(v1, type metadata accessor for Proto_AttestationBundle);
  if (!v2[2])
  {
    v20 = v0[25];
    v21 = v0[22];
    v22 = v0[23];
    v23 = v0[21];
    v24 = v0[19];
    swift_bridgeObjectRelease();
    sub_238067730();
    swift_allocError();
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_BYTE *)(v25 + 32) = 64;
    swift_willThrow();
    sub_237FFD540(v24, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    v26 = v23;
LABEL_10:
    sub_238005240(v26, &qword_2568C7C50);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
  v4 = v2[4];
  v3 = v2[5];
  sub_237FFBA20(v4, v3);
  swift_bridgeObjectRelease();
  sub_237FFBA20(v4, v3);
  sub_237FFBA20(v4, v3);
  sub_2380068C4(v4, v3);
  v6 = v5;
  v8 = v7;
  v9 = (const __CFData *)sub_2380BD358();
  sub_237FFBAB0(v6, v8);
  v10 = SecCertificateCreateWithData(0, v9);

  if (!v10)
  {
    type metadata accessor for ProvisioningCertificate.Error();
    sub_238001820(&qword_2568C7C60, (uint64_t (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error, (uint64_t)&protocol conformance descriptor for ProvisioningCertificate.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_237FFBAB0(v4, v3);
    goto LABEL_9;
  }
  v11 = v0[30];
  ProvisioningCertificate.init(from:)(v10, &v115);
  sub_237FFBAB0(v4, v3);
  if (v11)
  {
LABEL_9:
    sub_237FFBAB0(v4, v3);
    v27 = v0[25];
    v28 = v0[22];
    v29 = v0[23];
    v30 = v0[21];
    sub_237FFD540(v0[19], type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    v26 = v30;
    goto LABEL_10;
  }
  v13 = v115;
  v12 = v116;
  v14 = v118;
  v15 = v120;
  if (!v120)
  {
    v33 = v0[23];
    v108 = v0[22];
    v112 = v0[25];
    v114 = v0[21];
    v34 = v0[19];
    sub_238067730();
    swift_allocError();
    *(_OWORD *)v35 = xmmword_2380C3B30;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_BYTE *)(v35 + 32) = 64;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v4, v3);
    sub_237FFD540(v34, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v112, v108);
    goto LABEL_18;
  }
  v16 = v117;
  v17 = v119;
  swift_bridgeObjectRetain();
  SEP.Identity.init(string:)(v17, v15, &v115);
  if (v117 == 2)
  {
    v106 = v0[23];
    v107 = v0[22];
    v111 = v0[25];
    v114 = v0[21];
    v18 = v0[19];
    sub_238067730();
    swift_allocError();
    *(_OWORD *)v19 = xmmword_2380C3B20;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_BYTE *)(v19 + 32) = 64;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v4, v3);
    sub_237FFD540(v18, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v111, v107);
LABEL_18:
    v26 = v114;
    goto LABEL_10;
  }
  if (!v14)
  {
    v46 = v0[23];
    v110 = v0[22];
    v113 = v0[25];
    v114 = v0[21];
    v47 = v0[19];
    sub_238067730();
    swift_allocError();
    *(_OWORD *)v48 = xmmword_2380C3B40;
    *(_QWORD *)(v48 + 16) = 0;
    *(_QWORD *)(v48 + 24) = 0;
    *(_BYTE *)(v48 + 32) = 64;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v4, v3);
    sub_237FFD540(v47, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v113, v110);
    goto LABEL_18;
  }
  v105 = v13;
  v109 = v12;
  v36 = (uint64_t)v116;
  v37 = (int)v115;
  v39 = v0[10];
  v38 = v0[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_2380BEAF0;
  v41 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v40 + 64) = v41;
  v42 = MEMORY[0x24BEE4568];
  v103 = v37;
  *(_DWORD *)(v40 + 32) = v37;
  v43 = MEMORY[0x24BEE45B8];
  *(_QWORD *)(v40 + 96) = v42;
  *(_QWORD *)(v40 + 104) = v43;
  v44 = v36;
  *(_QWORD *)(v40 + 72) = v36;
  swift_bridgeObjectRetain();
  if (sub_2380BDD30() == v39 && v45 == v38)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v49 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      v63 = sub_2380BD7F0();
      v64 = sub_2380BDF70();
      v65 = os_log_type_enabled(v63, v64);
      v66 = v0[11];
      if (v65)
      {
        v96 = v0[10];
        v67 = swift_slowAlloc();
        v100 = (__SecCertificate *)swift_slowAlloc();
        v115 = v100;
        *(_DWORD *)v67 = 136446466;
        swift_bridgeObjectRetain();
        v0[6] = sub_238013968(v96, v66, (uint64_t *)&v115);
        sub_2380BDF94();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v67 + 12) = 2082;
        v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = xmmword_2380BEAF0;
        *(_QWORD *)(v68 + 56) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v68 + 64) = MEMORY[0x24BEE4558];
        *(_DWORD *)(v68 + 32) = v103;
        v69 = MEMORY[0x24BEE4568];
        *(_QWORD *)(v68 + 96) = MEMORY[0x24BEE4568];
        v70 = v44;
        v97 = v44;
        v71 = MEMORY[0x24BEE45B8];
        *(_QWORD *)(v68 + 104) = MEMORY[0x24BEE45B8];
        *(_QWORD *)(v68 + 72) = v70;
        v72 = sub_2380BDD30();
        v0[7] = sub_238013968(v72, v73, (uint64_t *)&v115);
        sub_2380BDF94();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_237FF6000, v63, v64, "Follower UDID %{public}s does not match provisioning certificate UDID %{public}s", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy();
        v74 = v103;
        MEMORY[0x23B82B830](v100, -1, -1);
        MEMORY[0x23B82B830](v67, -1, -1);

        v75 = v97;
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v75 = v44;
        v74 = v103;
        v69 = MEMORY[0x24BEE4568];
        v71 = MEMORY[0x24BEE45B8];
      }
      v101 = v0[22];
      v102 = v0[25];
      v104 = v0[21];
      type = v0[19];
      v99 = v0[23];
      v76 = v0[10];
      v77 = v0[11];
      v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = xmmword_2380BEAF0;
      *(_QWORD *)(v78 + 56) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v78 + 64) = MEMORY[0x24BEE4558];
      *(_QWORD *)(v78 + 72) = v75;
      *(_DWORD *)(v78 + 32) = v74;
      *(_QWORD *)(v78 + 96) = v69;
      *(_QWORD *)(v78 + 104) = v71;
      swift_bridgeObjectRetain();
      v79 = sub_2380BDD30();
      v81 = v80;
      sub_238067730();
      swift_allocError();
      *(_QWORD *)v82 = v76;
      *(_QWORD *)(v82 + 8) = v77;
      *(_QWORD *)(v82 + 16) = v79;
      *(_QWORD *)(v82 + 24) = v81;
      *(_BYTE *)(v82 + 32) = 64;
      swift_willThrow();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_237FFBAB0(v4, v3);
      sub_237FFD540(type, type metadata accessor for Validated.AttestationBundle);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v102, v101);
      v26 = v104;
      goto LABEL_10;
    }
  }
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_2380BEAF0;
  *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v50 + 64) = MEMORY[0x24BEE4558];
  *(_DWORD *)(v50 + 32) = v103;
  *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE4568];
  *(_QWORD *)(v50 + 104) = MEMORY[0x24BEE45B8];
  *(_QWORD *)(v50 + 72) = v36;
  v51 = sub_2380BDD30();
  sub_23806B7F4(v16, v14, v51, v52);
  v53 = v0[19];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
  sub_237FFBAB0(v4, v3);
  sub_237FFD540(v53, type metadata accessor for Validated.AttestationBundle);
  v54 = v0[28];
  v55 = v0[25];
  v56 = v0[26];
  v57 = v0[22];
  v58 = v0[23];
  v60 = v0[15];
  v59 = v0[16];
  v61 = v0[13];
  v62 = v0[14];
  sub_238005240(v0[21], &qword_2568C7C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v56, v55, v57);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v59, v61 + *(int *)(v54 + 28), v62);
  *(_QWORD *)(swift_task_alloc() + 16) = v56;
  sub_2380BD868();
  v83 = v0[28];
  v84 = v0[13];
  (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
  swift_task_dealloc();
  v86 = v0[2];
  v85 = v0[3];
  v87 = (id *)(v84 + *(int *)(v83 + 24));
  if (*((_BYTE *)v87 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 28)) == 1)
    sub_2380934D0();
  else
    sub_23809318C();
  v89 = v88;
  v90 = v0[26];
  v91 = v0[23];
  v92 = v0[22];
  v93 = (_QWORD *)v0[9];

  *v87 = v89;
  v94 = sub_2380BD8F8();
  *v93 = v86;
  v93[1] = v85;
  v93[2] = v94;
  v93[3] = v95;
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

uint64_t sub_238069B7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_237FFD540(*(_QWORD *)(v2 + 144), type metadata accessor for Validated.AttestationBundle);
  return swift_task_switch();
}

uint64_t sub_238069BF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  void *v18;
  uint64_t (*v19)(void);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = v0[32];
  v2 = v0[23];
  v1 = v0[24];
  v3 = v0[28];
  v4 = v0[26];
  v5 = v0[22];
  v6 = v0[15];
  v7 = v0[16];
  v8 = v0[13];
  v9 = v0[14];
  sub_238005240(v0[20], &qword_2568C7C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v8 + *(int *)(v3 + 28), v9);
  *(_QWORD *)(swift_task_alloc() + 16) = v4;
  sub_2380BD868();
  if (v28)
  {
    v10 = v0[26];
    v11 = v0[22];
    v12 = v0[23];
    (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v19 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v13 = v0[28];
    v14 = v0[13];
    (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    v16 = v0[2];
    v15 = v0[3];
    v17 = (id *)(v14 + *(int *)(v13 + 24));
    if (*((_BYTE *)v17 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 28)) == 1)
      sub_2380934D0();
    else
      sub_23809318C();
    v21 = v18;
    v22 = v0[26];
    v23 = v0[23];
    v24 = v0[22];
    v25 = (_QWORD *)v0[9];

    *v17 = v21;
    v26 = sub_2380BD8F8();
    *v25 = v16;
    v25[1] = v15;
    v25[2] = v26;
    v25[3] = v27;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v19 = (uint64_t (*)(void))v0[1];
  }
  return v19();
}

uint64_t sub_238069E84()
{
  uint64_t v0;

  sub_238005240(*(_QWORD *)(v0 + 168), &qword_2568C7C50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238069F38()
{
  uint64_t v0;

  sub_238005240(*(_QWORD *)(v0 + 160), &qword_2568C7C50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_238069FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_2380BE234();
    sub_2380BD388();
    v4 = sub_2380BE264() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_23806A9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_2380BE234();
    sub_2380BDD78();
    v6 = sub_2380BE264();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_2380BE1B0() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_2380BE1B0() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_23806AAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v7[12] = a5;
  v7[13] = v6;
  v7[10] = a2;
  v7[11] = a4;
  v7[9] = a1;
  v10 = sub_2380BD8E0();
  v7[14] = v10;
  v7[15] = *(_QWORD *)(v10 - 8);
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  v11 = sub_2380BD97C();
  v7[18] = v11;
  v7[19] = *(_QWORD *)(v11 - 8);
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  v12 = sub_2380BD8B0();
  v7[22] = v12;
  v7[23] = *(_QWORD *)(v12 - 8);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  v13 = sub_2380BD94C();
  v7[26] = v13;
  v7[27] = *(_QWORD *)(v13 - 8);
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  v14 = swift_task_alloc();
  v7[32] = v14;
  v7[33] = swift_task_alloc();
  v15 = sub_2380BD418();
  v7[34] = v15;
  v7[35] = *(_QWORD *)(v15 - 8);
  v7[36] = swift_task_alloc();
  v16 = swift_task_alloc();
  v7[37] = v16;
  v7[38] = swift_task_alloc();
  v7[39] = type metadata accessor for EnsembleHPKE.Leader(0);
  v17 = dword_2568C7E08;
  v18 = (_QWORD *)swift_task_alloc();
  v7[40] = v18;
  *v18 = v7;
  v18[1] = sub_23806AD48;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2568C7E08
                                                                                                + v17))((uint64_t)(v7 + 2), v16, v14, a3, 0, 0xF000000000000000, a6);
}

uint64_t sub_23806AD48()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 328) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

CFDataRef sub_23806ADF0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  SecKeyRef *v29;
  CFDataRef result;
  CFDataRef v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);

  v1 = v0;
  v3 = v0 + 2;
  v2 = v0[2];
  v4 = v0[37];
  v5 = v0[38];
  v7 = v0[35];
  v6 = v3[34];
  v9 = v3[31];
  v8 = v3[32];
  v10 = v3[30];
  v11 = v3[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5, v4, v8);
  sub_238001DE4(v10, v9, type metadata accessor for Validated.AttestationBundle);
  sub_2380BD40C();
  sub_238001820(&qword_2568C5C68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  LOBYTE(v5) = sub_2380BDCDC();
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v6, v8);
  if ((v5 & 1) != 0)
  {
    v13 = v1[38];
    v15 = v1[33];
    v14 = v1[34];
    sub_238075130();
    swift_allocError();
    *v16 = 0;
    swift_willThrow();
    sub_23801BDE0(v2, v11);
    sub_237FFD540(v15, type metadata accessor for Validated.AttestationBundle);
    v12(v13, v14);
    v17 = v1;
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v71 = (uint64_t (*)(void))v17[1];
    return (CFDataRef)v71();
  }
  if ((v11 & 0x2000000000000000) != 0)
  {
    v17 = v1;
    v22 = v1[38];
    v24 = v1[33];
    v23 = v1[34];
    sub_238075130();
    swift_allocError();
    *v25 = 1;
    swift_willThrow();
    sub_23801BDE0(v2, v11);
    sub_237FFD540(v24, type metadata accessor for Validated.AttestationBundle);
    v12(v22, v23);
    goto LABEL_19;
  }
  v83 = v12;
  v18 = v1[41];
  v1[4] = v2;
  v1[5] = v11;
  sub_237FFBA20(v2, v11);
  sub_2380BD940();
  if (v18)
  {
    v19 = v1[38];
    v20 = v1[33];
    v21 = v1[34];
    sub_23801BDE0(v2, v11);
    sub_237FFD540(v20, type metadata accessor for Validated.AttestationBundle);
    v83(v19, v21);
    v17 = v1;
    goto LABEL_19;
  }
  v26 = v1[39];
  v27 = v1[13];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[27] + 32))(v1[31], v1[30], v1[26]);
  if ((*(_BYTE *)(v27 + *(int *)(v26 + 28)) & 1) == 0)
  {
    v34 = *(id *)v1[13];
    sub_2380BD8A4();
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[27] + 16))(v1[28], v1[31], v1[26]);
    if (qword_2568C5068 != -1)
      swift_once();
    v42 = v1[24];
    v78 = v1[25];
    v44 = v1[22];
    v43 = v1[23];
    v45 = v1[15];
    v46 = v1[16];
    v47 = v1[14];
    v48 = v1;
    v50 = v1[11];
    v49 = v1[12];
    v74 = v43;
    v51 = __swift_project_value_buffer(v47, (uint64_t)qword_2568C8998);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v46, v51, v47);
    sub_237FFBA20(v50, v49);
    sub_2380068C4(v50, v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v42, v78, v44);
    sub_2380BD8EC();
    v79 = v48[34];
    v82 = v48[38];
    v76 = v48[33];
    v52 = v48[31];
    v54 = v48[26];
    v53 = v48[27];
    v55 = v48[25];
    v57 = v48[22];
    v56 = v48[23];
    v72 = v48[10];
    sub_23801BDE0(v2, v11);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    goto LABEL_21;
  }
  v28 = v3 + 6;
  v29 = (SecKeyRef *)v1[13];
  v1[8] = 0;
  result = SecKeyCopyExternalRepresentation(*v29, (CFErrorRef *)v3 + 6);
  if (result)
  {
    v31 = result;
    v1[6] = sub_2380BD37C();
    v1[7] = v32;
    sub_2380BD964();
    v33 = v1;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[27] + 16))(v1[29], v1[31], v1[26]);
    if (qword_2568C5068 != -1)
      swift_once();
    v80 = v1[21];
    v58 = v1[20];
    v59 = v1[18];
    v73 = v1[19];
    v60 = v1[17];
    v62 = v1[14];
    v61 = v33[15];
    v48 = v33;
    v63 = v33[12];
    v64 = v48[11];
    v77 = v58;
    v65 = __swift_project_value_buffer(v62, (uint64_t)qword_2568C8998);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v60, v65, v62);
    sub_237FFBA20(v64, v63);
    sub_2380068C4(v64, v63);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v77, v80, v59);
    sub_2380BD8EC();
    v79 = v48[34];
    v82 = v48[38];
    v75 = v48[31];
    v76 = v48[33];
    v67 = v48[26];
    v66 = v48[27];
    v68 = v48[21];
    v69 = v48[18];
    v70 = v48[19];
    v72 = v48[10];
    sub_23801BDE0(v2, v11);

    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v75, v67);
LABEL_21:
    v83(v82, v79);
    sub_238001DE4(v76, v72, type metadata accessor for Validated.AttestationBundle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v71 = (uint64_t (*)(void))v48[1];
    return (CFDataRef)v71();
  }
  v35 = *v28;
  if (*v28)
  {
    v81 = v1[38];
    v37 = v1[33];
    v36 = v1[34];
    v38 = v1[31];
    v40 = v1[26];
    v39 = v1[27];
    type metadata accessor for CFError(0);
    sub_238001820((unint64_t *)&qword_2568C6378, (uint64_t (*)(uint64_t))type metadata accessor for CFError, MEMORY[0x24BDCFD90]);
    swift_allocError();
    *v41 = v35;
    v17 = v1;
    swift_willThrow();
    sub_23801BDE0(v2, v11);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    sub_237FFD540(v37, type metadata accessor for Validated.AttestationBundle);
    v83(v81, v36);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_23806B6D0()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23806B7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v10 = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  v11 = *(int *)(v10 + 36);
  v12 = *(_QWORD *)(v4 + v11);
  if (*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    v13 = sub_23800DCFC(a1, a2);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v26 = v15;
      swift_bridgeObjectRetain();
      sub_23806F908(&v25, a3, a4);
      swift_bridgeObjectRelease();
      v16 = v26;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61A0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2380BEAC0;
  *(_QWORD *)(inited + 32) = a3;
  *(_QWORD *)(inited + 40) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_238071FC0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
LABEL_6:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *(_QWORD *)(v5 + v11);
  *(_QWORD *)(v5 + v11) = 0x8000000000000000;
  sub_238084104(v16, a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v5 + v11) = v25;
  swift_bridgeObjectRelease();
  v19 = swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(*(_QWORD *)(v5 + v11) + 16);
  v21 = *(_QWORD *)(v5 + *(int *)(v10 + 40));
  if (v21 >= v20)
  {
    MEMORY[0x24BDAC7A8](v19);
    v24 = swift_bridgeObjectRetain();
    sub_238072160(v24, (void (*)(uint64_t, uint64_t, uint64_t))sub_238075174);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_238067730();
    swift_allocError();
    *(_QWORD *)v22 = v20;
    *(_QWORD *)(v22 + 8) = v21;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_BYTE *)(v22 + 32) = 96;
    return swift_willThrow();
  }
}

uint64_t sub_23806BA54@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (a1)
    v5 = a2 - (_QWORD)a1;
  else
    v5 = 0;
  sub_23806EB60(a1, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A28);
  sub_238075190();
  v6 = sub_2380BD904();
  v8 = v7;
  result = swift_release();
  if (!v3)
  {
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t sub_23806BB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(a3 + 16);
  result = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  v11 = *(_QWORD *)(a4 + *(int *)(result + 44));
  if (v11 < v9)
  {
    sub_238067730();
    swift_allocError();
    *(_QWORD *)v12 = a5;
    *(_QWORD *)(v12 + 8) = a6;
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    *(_BYTE *)(v12 + 32) = 97;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23806BB9C(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v1 = a1[2];
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v3 = *a1;
  v2 = a1[1];
  v5 = a1[3];
  v4 = a1[4];
  sub_237FFBA20(*a1, v2);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v5, v4);
  v6 = sub_23800DCFC(1701667182, 0xE400000000000000);
  if ((v7 & 1) == 0)
    goto LABEL_15;
  v8 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v6);
  v10 = *v8;
  v9 = v8[1];
  swift_bridgeObjectRetain();
  sub_237FFBAB0(v3, v2);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(v5, v4);
  if (v10 == 0x692D6E6977726164 && v9 == 0xEB0000000074696ELL)
  {
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v1 + 16))
      return 0;
  }
  else
  {
    v12 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v12 & 1) == 0)
      return result;
    if (!*(_QWORD *)(v1 + 16))
      return 0;
  }
  sub_237FFBA20(v3, v2);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v5, v4);
  v14 = sub_23800DCFC(0x7079745F656D696DLL, 0xE900000000000065);
  if ((v15 & 1) == 0)
  {
LABEL_15:
    sub_237FFBAB0(v3, v2);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v5, v4);
    return 0;
  }
  v16 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v14);
  v18 = *v16;
  v17 = v16[1];
  swift_bridgeObjectRetain();
  sub_237FFBAB0(v3, v2);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(v5, v4);
  if (v18 == 0xD000000000000010 && v17 == 0x80000002380C8190)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v19 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    return v19 & 1;
  }
}

uint64_t sub_23806BDE4(uint64_t a1)
{
  return sub_23806BDF0(a1, qword_2568C9EF8);
}

uint64_t sub_23806BDF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_2380BD808();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_2380BD7FC();
}

uint64_t EnsembleChannelSecurity.Follower.init(udid:leaderUDID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;

  v11 = type metadata accessor for EnsembleHPKE.Follower(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  EnsembleHPKE.Follower.init()((uint64_t)v13);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = a4;
    v15 = type metadata accessor for EnsembleChannelSecurity.Follower(0);
    return sub_238001DE4((uint64_t)v13, (uint64_t)a5 + *(int *)(v15 + 24), type metadata accessor for EnsembleHPKE.Follower);
  }
}

uint64_t EnsembleChannelSecurity.Follower.init(udid:leaderUDID:followerHPKE:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v8 = type metadata accessor for EnsembleChannelSecurity.Follower(0);
  return sub_238001DE4(a5, (uint64_t)a6 + *(int *)(v8 + 24), type metadata accessor for EnsembleHPKE.Follower);
}

uint64_t EnsembleChannelSecurity.Follower.attest()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_23806BF9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[3];
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Follower(0) + 24));
  v3 = (uint64_t *)((char *)v2 + *(int *)(type metadata accessor for EnsembleHPKE.Follower(0) + 24));
  v5 = v3[3];
  v4 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc();
  v0[4] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = sub_23806C03C;
  return Attestor.attest(key:)(v0[2], v6, v5, v4);
}

uint64_t sub_23806C03C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnsembleChannelSecurity.Follower.rekey()()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v2 = (id *)(v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Follower(0) + 24));
  if (*((_BYTE *)v2 + *(int *)(type metadata accessor for EnsembleHPKE.Follower(0) + 28)) == 1)
  {
    sub_2380934D0();
    if (v1)
      return;
  }
  else
  {
    sub_23809318C();
    if (v1)
      return;
  }
  v4 = v3;

  *v2 = v4;
  if (qword_2568C5018 != -1)
    swift_once();
  v5 = sub_2380BD808();
  __swift_project_value_buffer(v5, (uint64_t)qword_2568C9EF8);
  v6 = sub_2380BD7F0();
  v7 = sub_2380BDF70();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_237FF6000, v6, v7, "Follower rekeyed", v8, 2u);
    MEMORY[0x23B82B830](v8, -1, -1);
  }

}

uint64_t EnsembleChannelSecurity.Follower.completePairing(using:authenticatedBy:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 72) = v3;
  *(_QWORD *)(v4 + 56) = a1;
  type metadata accessor for Validated.AttestationBundle(0);
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  v6 = sub_2380BD934();
  *(_QWORD *)(v4 + 88) = v6;
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7C50);
  *(_QWORD *)(v4 + 112) = swift_task_alloc();
  v7 = a2[1];
  *(_OWORD *)(v4 + 120) = *a2;
  *(_OWORD *)(v4 + 136) = v7;
  return swift_task_switch();
}

uint64_t sub_23806C268()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[14];
  v2 = v0[9];
  v3 = *(_QWORD *)(v2 + 16);
  v0[19] = v3;
  v4 = *(_QWORD *)(v2 + 24);
  v0[20] = v4;
  type metadata accessor for EnsembleChannelSecurity.Follower(0);
  type metadata accessor for EnsembleHPKE.Follower(0);
  swift_bridgeObjectRetain();
  _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(v3, v4, 0, v1);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2568C7C78 + dword_2568C7C78);
  v5 = (_QWORD *)swift_task_alloc();
  v0[21] = v5;
  *v5 = v0;
  v5[1] = sub_23806C344;
  return v7(v0[13], v0[10], v0[8], v0[17], v0[18], 0, 0xC000000000000000, v0[14]);
}

uint64_t sub_23806C344()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    sub_237FFD540(*(_QWORD *)(v2 + 80), type metadata accessor for Validated.AttestationBundle);
  return swift_task_switch();
}

uint64_t sub_23806C3C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0[15];
  v0[2] = v1;
  v2 = v0[22];
  v3 = v0[16];
  v0[3] = v3;
  sub_237FFBA20(v1, v3);
  sub_23800915C();
  v4 = sub_2380BD928();
  if (v2)
  {
    v6 = v0[15];
    v7 = v0[16];
    v9 = v0[13];
    v8 = v0[14];
    v10 = v0[11];
    v11 = v0[12];
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v12 = v8;
LABEL_5:
    sub_238005240(v12, &qword_2568C7C50);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  v13 = v4;
  v14 = v5;
  sub_237FFBAB0(v0[15], v0[16]);
  v0[4] = v13;
  v0[5] = v14;
  sub_2380BD874();
  EnsembleChannelSecurity.Follower.rekey()();
  if (v15)
  {
    v16 = v0[13];
    v17 = v0[14];
    v18 = v0[11];
    v19 = v0[12];
    v20 = v0[7];
    swift_bridgeObjectRelease();
    v21 = sub_2380BD898();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    v12 = v17;
    goto LABEL_5;
  }
  if (qword_2568C5018 != -1)
    swift_once();
  v24 = sub_2380BD808();
  __swift_project_value_buffer(v24, (uint64_t)qword_2568C9EF8);
  swift_bridgeObjectRetain();
  v25 = sub_2380BD7F0();
  v26 = sub_2380BDF70();
  v27 = os_log_type_enabled(v25, v26);
  v28 = v0[20];
  if (v27)
  {
    v29 = v0[19];
    v39 = v0[13];
    v40 = v0[14];
    v37 = v0[12];
    v38 = v0[11];
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v41 = v31;
    *(_DWORD *)v30 = 136446210;
    swift_bridgeObjectRetain();
    v0[6] = sub_238013968(v29, v28, &v41);
    sub_2380BDF94();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237FF6000, v25, v26, "Follower completed pairing with leader: %{public}s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v31, -1, -1);
    MEMORY[0x23B82B830](v30, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    v32 = v40;
  }
  else
  {
    v34 = v0[13];
    v33 = v0[14];
    v35 = v0[11];
    v36 = v0[12];

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    v32 = v33;
  }
  sub_238005240(v32, &qword_2568C7C50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_23806C728()
{
  uint64_t v0;

  sub_238005240(*(_QWORD *)(v0 + 112), &qword_2568C7C50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23806C788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v9[14] = a7;
  v9[15] = v8;
  v9[12] = a5;
  v9[13] = a6;
  v9[10] = a2;
  v9[11] = a4;
  v9[9] = a1;
  v12 = sub_2380BD8E0();
  v9[16] = v12;
  v9[17] = *(_QWORD *)(v12 - 8);
  v9[18] = swift_task_alloc();
  v9[19] = swift_task_alloc();
  v13 = sub_2380BD97C();
  v9[20] = v13;
  v9[21] = *(_QWORD *)(v13 - 8);
  v9[22] = swift_task_alloc();
  v9[23] = swift_task_alloc();
  v14 = sub_2380BD8B0();
  v9[24] = v14;
  v9[25] = *(_QWORD *)(v14 - 8);
  v9[26] = swift_task_alloc();
  v9[27] = swift_task_alloc();
  v15 = sub_2380BD94C();
  v9[28] = v15;
  v9[29] = *(_QWORD *)(v15 - 8);
  v9[30] = swift_task_alloc();
  v9[31] = swift_task_alloc();
  v9[32] = swift_task_alloc();
  v9[33] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  v16 = swift_task_alloc();
  v9[34] = v16;
  v9[35] = swift_task_alloc();
  v17 = sub_2380BD418();
  v9[36] = v17;
  v9[37] = *(_QWORD *)(v17 - 8);
  v9[38] = swift_task_alloc();
  v18 = swift_task_alloc();
  v9[39] = v18;
  v9[40] = swift_task_alloc();
  v9[41] = type metadata accessor for EnsembleHPKE.Follower(0);
  v19 = dword_2568C7E08;
  v20 = (_QWORD *)swift_task_alloc();
  v9[42] = v20;
  *v20 = v9;
  v20[1] = sub_23806C9E4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2568C7E08
                                                                                                + v19))((uint64_t)(v9 + 2), v18, v16, a3, 0, 0xF000000000000000, a8);
}

uint64_t sub_23806C9E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

CFDataRef sub_23806CA8C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t (*v24)(void);
  CFDataRef result;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  SecKeyRef *v29;
  CFDataRef v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CFDataRef v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);

  v1 = v0;
  v3 = v0 + 2;
  v2 = v0[2];
  v4 = v0[39];
  v5 = v0[40];
  v7 = v0[37];
  v6 = v3[36];
  v9 = v3[33];
  v8 = v3[34];
  v10 = v3[32];
  v11 = v3[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5, v4, v8);
  sub_238001DE4(v10, v9, type metadata accessor for Validated.AttestationBundle);
  sub_2380BD40C();
  sub_238001820(&qword_2568C5C68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  LOBYTE(v5) = sub_2380BDCDC();
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v6, v8);
  if ((v5 & 1) != 0)
  {
    v13 = v1[40];
    v15 = v1[35];
    v14 = v1[36];
    sub_238075130();
    swift_allocError();
    *v16 = 0;
LABEL_8:
    swift_willThrow();
    sub_23801BDE0(v2, v11);
    sub_237FFD540(v15, type metadata accessor for Validated.AttestationBundle);
    v12(v13, v14);
    goto LABEL_9;
  }
  v17 = v1;
  if ((v11 & 0x2000000000000000) != 0)
  {
    v13 = v1[40];
    v15 = v1[35];
    v14 = v1[36];
    sub_238075130();
    swift_allocError();
    *v23 = 1;
    goto LABEL_8;
  }
  v85 = v12;
  v18 = v1[43];
  v1[4] = v2;
  v1[5] = v11;
  sub_237FFBA20(v2, v11);
  sub_2380BD940();
  if (v18)
  {
    v19 = v1[40];
    v20 = v1[35];
    v21 = v1[36];
    sub_23801BDE0(v2, v11);
    sub_237FFD540(v20, type metadata accessor for Validated.AttestationBundle);
    v22 = v19;
LABEL_6:
    v85(v22, v21);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v24 = (uint64_t (*)(void))v1[1];
    return (CFDataRef)v24();
  }
  v26 = v1[41];
  v27 = v1[15];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[29] + 32))(v1[33], v1[32], v1[28]);
  if ((*(_BYTE *)(v27 + *(int *)(v26 + 28)) & 1) == 0)
  {
    v32 = *(id *)v1[15];
    sub_2380BD8A4();
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[25] + 16))(v1[26], v1[27], v1[24]);
    if (qword_2568C5068 != -1)
      swift_once();
    v73 = v1[29];
    v75 = v1[30];
    v39 = v1[28];
    v79 = v1[33];
    v40 = v1[17];
    v41 = v1[18];
    v42 = v1;
    v43 = v1[16];
    v44 = v1[14];
    v46 = v17[12];
    v45 = v17[13];
    v47 = v42[11];
    v77 = v39;
    v48 = __swift_project_value_buffer(v43, (uint64_t)qword_2568C8998);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v41, v48, v43);
    sub_237FFBA20(v45, v44);
    sub_2380068C4(v45, v44);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v75, v79, v77);
    sub_237FFBA20(v47, v46);
    sub_2380BD91C();
    v82 = v42[36];
    v84 = v42[40];
    v80 = v42[35];
    v49 = v42[33];
    v51 = v42[28];
    v50 = v42[29];
    v52 = v42[27];
    v54 = v42[24];
    v53 = v42[25];
    v71 = v42[10];
    sub_23801BDE0(v2, v11);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    goto LABEL_23;
  }
  v28 = v3 + 6;
  v29 = (SecKeyRef *)v1[15];
  v1[8] = 0;
  result = SecKeyCopyExternalRepresentation(*v29, (CFErrorRef *)v3 + 6);
  if (result)
  {
    v30 = result;
    v1[6] = sub_2380BD37C();
    v1[7] = v31;
    sub_2380BD964();
    v72 = v30;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[21] + 16))(v1[22], v1[23], v1[20]);
    if (qword_2568C5068 != -1)
      swift_once();
    v74 = v1[29];
    v76 = v1[31];
    v55 = v1[28];
    v81 = v1[33];
    v56 = v1[19];
    v42 = v1;
    v57 = v1[16];
    v58 = v1[17];
    v60 = v1[13];
    v59 = v1[14];
    v63 = v1 + 11;
    v62 = v1[11];
    v61 = v63[1];
    v78 = v55;
    v64 = __swift_project_value_buffer(v57, (uint64_t)qword_2568C8998);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v56, v64, v57);
    sub_237FFBA20(v60, v59);
    sub_2380068C4(v60, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v76, v81, v78);
    sub_237FFBA20(v62, v61);
    sub_2380BD91C();
    v82 = v42[36];
    v84 = v42[40];
    v80 = v42[35];
    v65 = v42[33];
    v67 = v42[28];
    v66 = v42[29];
    v68 = v42[23];
    v69 = v42[20];
    v70 = v42[21];
    v71 = v42[10];
    sub_23801BDE0(v2, v11);

    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
LABEL_23:
    v85(v84, v82);
    sub_238001DE4(v80, v71, type metadata accessor for Validated.AttestationBundle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v24 = (uint64_t (*)(void))v42[1];
    return (CFDataRef)v24();
  }
  v33 = *v28;
  if (*v28)
  {
    v83 = v1[40];
    v34 = v1[35];
    v21 = v1[36];
    v35 = v1[33];
    v37 = v1[28];
    v36 = v1[29];
    type metadata accessor for CFError(0);
    sub_238001820((unint64_t *)&qword_2568C6378, (uint64_t (*)(uint64_t))type metadata accessor for CFError, MEMORY[0x24BDCFD90]);
    swift_allocError();
    *v38 = v33;
    swift_willThrow();
    sub_23801BDE0(v2, v11);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    sub_237FFD540(v34, type metadata accessor for Validated.AttestationBundle);
    v22 = v83;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_23806D370()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EnsembleChannelSecurity.PairingData.cipherText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_237FFBA20(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t EnsembleChannelSecurity.PairingData.encapsulatedKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_237FFBA20(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t EnsembleChannelSecurity.PairingData.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  sub_237FFBA20(v1, v2);
  sub_2380BD388();
  sub_237FFBAB0(v1, v2);
  sub_237FFBA20(v4, v3);
  sub_2380BD388();
  return sub_237FFBAB0(v4, v3);
}

void static EnsembleChannelSecurity.PairingData.== infix(_:_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = a1[2];
  v2 = a1[3];
  sub_238008ED0(*a1, a1[1]);
  if ((v3 & 1) != 0)
    sub_238008ED0(v1, v2);
}

uint64_t sub_23806D5D8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C75737061636E65;
  else
    return 0x6554726568706963;
}

uint64_t sub_23806D624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_238075010(a1, a2);
  *a3 = result;
  return result;
}

void sub_23806D648(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23806D654()
{
  sub_23807236C();
  return sub_2380BE2A0();
}

uint64_t sub_23806D67C()
{
  sub_23807236C();
  return sub_2380BE2AC();
}

uint64_t EnsembleChannelSecurity.PairingData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7C80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v13 = v1[3];
  v14 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23807236C();
  sub_2380BE288();
  v16 = v8;
  v17 = v7;
  v18 = 0;
  sub_2380723B0();
  v10 = v15;
  sub_2380BE18C();
  if (!v10)
  {
    v16 = v14;
    v17 = v13;
    v18 = 1;
    sub_2380BE18C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t EnsembleChannelSecurity.PairingData.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  sub_2380BE234();
  sub_237FFBA20(v1, v2);
  sub_2380BD388();
  sub_237FFBAB0(v1, v2);
  sub_237FFBA20(v4, v3);
  sub_2380BD388();
  sub_237FFBAB0(v4, v3);
  return sub_2380BE264();
}

uint64_t EnsembleChannelSecurity.PairingData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7C98);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23807236C();
  sub_2380BE270();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = a2;
  v19 = 0;
  sub_2380723F4();
  sub_2380BE144();
  v9 = v17;
  v10 = v18;
  v19 = 1;
  sub_237FFBA20(v17, v18);
  sub_2380BE144();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v17;
  v12 = v18;
  sub_237FFBA20(v9, v10);
  sub_237FFBA20(v11, v12);
  sub_237FFBAB0(v9, v10);
  v13 = v16;
  *v16 = v9;
  v13[1] = v10;
  v13[2] = v11;
  v13[3] = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_237FFBAB0(v9, v10);
  return sub_237FFBAB0(v11, v12);
}

uint64_t sub_23806DA88()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  sub_2380BE234();
  sub_237FFBA20(v1, v2);
  sub_2380BD388();
  sub_237FFBAB0(v1, v2);
  sub_237FFBA20(v4, v3);
  sub_2380BD388();
  sub_237FFBAB0(v4, v3);
  return sub_2380BE264();
}

uint64_t sub_23806DB1C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  sub_237FFBA20(v1, v2);
  sub_2380BD388();
  sub_237FFBAB0(v1, v2);
  sub_237FFBA20(v4, v3);
  sub_2380BD388();
  return sub_237FFBAB0(v4, v3);
}

uint64_t sub_23806DB9C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  sub_2380BE234();
  sub_237FFBA20(v1, v2);
  sub_2380BD388();
  sub_237FFBAB0(v1, v2);
  sub_237FFBA20(v4, v3);
  sub_2380BD388();
  sub_237FFBAB0(v4, v3);
  return sub_2380BE264();
}

uint64_t sub_23806DC2C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return EnsembleChannelSecurity.PairingData.init(from:)(a1, a2);
}

uint64_t sub_23806DC40(_QWORD *a1)
{
  return EnsembleChannelSecurity.PairingData.encode(to:)(a1);
}

void sub_23806DC54(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = a1[2];
  v2 = a1[3];
  sub_238008ED0(*a1, a1[1]);
  if ((v3 & 1) != 0)
    sub_238008ED0(v1, v2);
}

uint64_t sub_23806DCB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E80);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380051FC(v2, (uint64_t)v6, &qword_2568C5E80);
  sub_238001DE4((uint64_t)v6, *(_QWORD *)a1, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v7 = &v6[v4[12]];
  v8 = *((_QWORD *)v7 + 2);
  v9 = v7[24];
  v10 = *(_OWORD *)v7;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_OWORD **)(a1 + 16);
  *(_OWORD *)v11 = v10;
  *(_QWORD *)(v11 + 16) = v8;
  *(_BYTE *)(v11 + 24) = v9;
  *v12 = *(_OWORD *)&v6[v4[16]];
  v13 = &v6[v4[20]];
  v14 = *(_QWORD *)v13;
  LOBYTE(v13) = v13[8];
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v16 = v14;
  *(_BYTE *)(v16 + 8) = (_BYTE)v13;
  sub_238001DE4((uint64_t)&v6[v4[24]], v15, type metadata accessor for SecureConfigPolicy);
  v17 = &v6[v4[28]];
  v18 = *(_OWORD *)v17;
  v19 = *((_OWORD *)v17 + 1);
  v20 = *(_OWORD *)(v17 + 25);
  v22 = *(_OWORD **)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)((char *)v22 + 25) = v20;
  *v22 = v18;
  v22[1] = v19;
  result = sub_238001DE4((uint64_t)&v6[v4[32]], v21, type metadata accessor for KeyOptionsPolicy);
  v24 = &v6[v4[36]];
  v25 = *(_DWORD *)v24;
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(a1 + 64);
  *(_WORD *)(v26 + 4) = *((_WORD *)v24 + 2);
  *(_DWORD *)v26 = v25;
  v28 = &v6[v4[40]];
  LOWORD(v25) = *(_WORD *)v28;
  LOBYTE(v26) = v28[2];
  v29 = v28[5];
  LOWORD(v28) = *(_WORD *)(v28 + 3);
  *(_WORD *)v27 = v25;
  *(_BYTE *)(v27 + 2) = v26;
  *(_WORD *)(v27 + 3) = (_WORD)v28;
  *(_BYTE *)(v27 + 5) = v29;
  v30 = *(_QWORD *)(a1 + 80);
  **(_QWORD **)(a1 + 72) = *(_QWORD *)&v6[v4[44]];
  v31 = &v6[v4[48]];
  v32 = *(_QWORD *)v31;
  LOBYTE(v27) = v31[8];
  v33 = v31[9];
  LOBYTE(v31) = v31[10];
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v27;
  *(_BYTE *)(v30 + 9) = v33;
  *(_BYTE *)(v30 + 10) = (_BYTE)v31;
  v34 = *(_QWORD *)(a1 + 88);
  v35 = &v6[v4[52]];
  LOBYTE(v30) = *v35;
  v36 = *((_QWORD *)v35 + 1);
  LOBYTE(v35) = v35[16];
  *(_BYTE *)v34 = v30;
  *(_QWORD *)(v34 + 8) = v36;
  *(_BYTE *)(v34 + 16) = (_BYTE)v35;
  return result;
}

double sub_23806DE80@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _OWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  int v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int16 v26;
  char v27;
  char v28;
  uint64_t v29;

  v2 = v1;
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E70);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380051FC(v2, (uint64_t)v6, &qword_2568C5E70);
  sub_238001DE4((uint64_t)v6, *(_QWORD *)a1, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  sub_23801CA30((uint64_t)&v6[v4[12]], *(_QWORD *)(a1 + 8));
  v7 = &v6[v4[16]];
  v8 = *((_QWORD *)v7 + 2);
  v9 = *(_OWORD *)v7;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_OWORD **)(a1 + 24);
  *(_OWORD *)v10 = v9;
  *(_QWORD *)(v10 + 16) = v8;
  *v11 = *(_OWORD *)&v6[v4[20]];
  v12 = &v6[v4[24]];
  v13 = *(_QWORD *)v12;
  LOBYTE(v12) = v12[8];
  v15 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v15 = v13;
  *(_BYTE *)(v15 + 8) = (_BYTE)v12;
  sub_238001DE4((uint64_t)&v6[v4[28]], v14, type metadata accessor for SecureConfigPolicy);
  sub_238001DE4((uint64_t)&v6[v4[32]], *(_QWORD *)(a1 + 48), type metadata accessor for KeyOptionsPolicy);
  sub_238001DE4((uint64_t)&v6[v4[36]], *(_QWORD *)(a1 + 56), (uint64_t (*)(_QWORD))type metadata accessor for SoftwareReleasePolicy);
  v16 = &v6[v4[40]];
  v17 = *v16;
  v18 = v16[1];
  v19 = v16[2];
  v20 = *(_QWORD *)(v16 + 12);
  v21 = *((_DWORD *)v16 + 5);
  result = *(double *)(v16 + 4);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)v23 = v17;
  *(_BYTE *)(v23 + 1) = v18;
  *(_BYTE *)(v23 + 2) = v19;
  *(double *)(v23 + 4) = result;
  *(_QWORD *)(v23 + 12) = v20;
  *(_DWORD *)(v23 + 20) = v21;
  v25 = &v6[v4[44]];
  v26 = *(_WORD *)v25;
  v27 = v25[2];
  v28 = v25[5];
  LOWORD(v25) = *(_WORD *)(v25 + 3);
  *(_WORD *)v24 = v26;
  *(_BYTE *)(v24 + 2) = v27;
  *(_WORD *)(v24 + 3) = (_WORD)v25;
  *(_BYTE *)(v24 + 5) = v28;
  **(_QWORD **)(a1 + 80) = *(_QWORD *)&v6[v4[48]];
  return result;
}

uint64_t sub_23806E024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v3[17] = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E80);
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23806E088()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  v2 = (int *)v0[17];
  v1 = v0[18];
  v0[19] = type metadata accessor for X509Policy();
  v0[2] = v1;
  v0[20] = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E40);
  v0[3] = v1 + v2[12];
  v0[4] = v1 + v2[16];
  v0[5] = v1 + v2[20];
  v0[21] = type metadata accessor for SecureConfigPolicy(0);
  v0[6] = v1 + v2[24];
  v0[7] = v1 + v2[28];
  v0[22] = type metadata accessor for KeyOptionsPolicy(0);
  v0[8] = v1 + v2[32];
  v0[23] = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E48);
  v0[9] = v1 + v2[36];
  v0[10] = v1 + v2[40];
  v0[11] = v1 + v2[44];
  v0[12] = v1 + v2[48];
  v0[13] = v1 + v2[52];
  sub_23806DCB8((uint64_t)(v0 + 2));
  v3 = v0[19];
  v0[24] = 0;
  v0[25] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[26] = v4;
  v0[27] = swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  v7 = (char *)&dword_2568C8BA0 + dword_2568C8BA0;
  v5 = (_QWORD *)swift_task_alloc();
  v0[28] = v5;
  *v5 = v0;
  v5[1] = sub_23806E228;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _UNKNOWN **))v7)(v0[14], v0[15], v3, &protocol witness table for X509Policy);
}

uint64_t sub_23806E228()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[26] + 8))(v2[27], v2[25]);
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23806E2B0()
{
  uint64_t v0;
  uint64_t v1;
  _UNKNOWN **v3;
  ValueMetadata *v4;
  void (**Description)(void);
  _QWORD *v6;
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 192);
  if (v1 == 11)
  {
    sub_238005240(*(_QWORD *)(v0 + 144), &qword_2568C5E80);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 192) = v1 + 1;
    v3 = &protocol witness table for APTicketPolicy;
    v4 = &type metadata for APTicketPolicy;
    switch(v1)
    {
      case 0:
        v4 = *(ValueMetadata **)(v0 + 160);
        v3 = &protocol witness table for PolicyBuilder.ConditionalPolicy<A, B>;
        break;
      case 1:
        break;
      case 2:
        v3 = &protocol witness table for CryptexPolicy;
        v4 = &type metadata for CryptexPolicy;
        break;
      case 3:
        v4 = *(ValueMetadata **)(v0 + 168);
        v3 = &protocol witness table for SecureConfigPolicy;
        break;
      case 4:
        v3 = &protocol witness table for TransparencyPolicy;
        v4 = &type metadata for TransparencyPolicy;
        break;
      case 5:
        v4 = *(ValueMetadata **)(v0 + 176);
        v3 = &protocol witness table for KeyOptionsPolicy;
        break;
      case 6:
        v4 = *(ValueMetadata **)(v0 + 184);
        v3 = &protocol witness table for PolicyBuilder.OptionalPolicy<A>;
        break;
      case 7:
        v3 = &protocol witness table for DeviceModePolicy;
        v4 = &type metadata for DeviceModePolicy;
        break;
      case 8:
        v3 = &protocol witness table for DarwinInitPolicy;
        v4 = &type metadata for DarwinInitPolicy;
        break;
      case 9:
        v3 = &protocol witness table for RoutingHintPolicy;
        v4 = &type metadata for RoutingHintPolicy;
        break;
      case 10:
        v3 = &protocol witness table for EnsembleMembersPolicy;
        v4 = &type metadata for EnsembleMembersPolicy;
        break;
      default:
        __break(1u);
        JUMPOUT(0x23806E4D0);
    }
    *(_QWORD *)(v0 + 200) = v4;
    Description = (void (**)(void))v4[-1].Description;
    *(_QWORD *)(v0 + 208) = Description;
    *(_QWORD *)(v0 + 216) = swift_task_alloc();
    Description[2]();
    v7 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))((char *)v3[1] + *(int *)v3[1]);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v6;
    *v6 = v0;
    v6[1] = sub_23806E228;
    return v7(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), v4, v3);
  }
}

uint64_t sub_23806E4FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc();
  sub_238005240(v1, &qword_2568C5E80);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23806E54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E70);
  v3[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23806E5B0()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  v2 = (int *)v0[16];
  v1 = v0[17];
  v0[18] = type metadata accessor for X509Policy();
  v0[2] = v1;
  v0[19] = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E78);
  v0[3] = v1 + v2[12];
  v0[4] = v1 + v2[16];
  v0[5] = v1 + v2[20];
  v0[6] = v1 + v2[24];
  v0[20] = type metadata accessor for SecureConfigPolicy(0);
  v0[7] = v1 + v2[28];
  v0[21] = type metadata accessor for KeyOptionsPolicy(0);
  v0[8] = v1 + v2[32];
  v0[22] = type metadata accessor for SoftwareReleasePolicy();
  v0[9] = v1 + v2[36];
  v0[10] = v1 + v2[40];
  v0[11] = v1 + v2[44];
  v0[12] = v1 + v2[48];
  sub_23806DE80((uint64_t)(v0 + 2));
  v3 = v0[18];
  v0[23] = 0;
  v0[24] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[25] = v4;
  v0[26] = swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  v7 = (char *)&dword_2568C8BA0 + dword_2568C8BA0;
  v5 = (_QWORD *)swift_task_alloc();
  v0[27] = v5;
  *v5 = v0;
  v5[1] = sub_23806E740;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _UNKNOWN **))v7)(v0[13], v0[14], v3, &protocol witness table for X509Policy);
}

uint64_t sub_23806E740()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[25] + 8))(v2[26], v2[24]);
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23806E7C8()
{
  uint64_t v0;
  uint64_t v1;
  _UNKNOWN **v3;
  ValueMetadata *v4;
  void (**Description)(void);
  _QWORD *v6;
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 184);
  if (v1 == 10)
  {
    sub_238005240(*(_QWORD *)(v0 + 136), &qword_2568C5E70);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 184) = v1 + 1;
    v3 = &protocol witness table for SEPAttestationPolicy;
    v4 = &type metadata for SEPAttestationPolicy;
    switch(v1)
    {
      case 0:
        v4 = *(ValueMetadata **)(v0 + 152);
        v3 = &protocol witness table for PolicyBuilder.OptionalPolicy<A>;
        break;
      case 1:
        break;
      case 2:
        v3 = &protocol witness table for APTicketPolicy;
        v4 = &type metadata for APTicketPolicy;
        break;
      case 3:
        v3 = &protocol witness table for CryptexPolicy;
        v4 = &type metadata for CryptexPolicy;
        break;
      case 4:
        v4 = *(ValueMetadata **)(v0 + 160);
        v3 = &protocol witness table for SecureConfigPolicy;
        break;
      case 5:
        v4 = *(ValueMetadata **)(v0 + 168);
        v3 = &protocol witness table for KeyOptionsPolicy;
        break;
      case 6:
        v4 = *(ValueMetadata **)(v0 + 176);
        v3 = &protocol witness table for SoftwareReleasePolicy;
        break;
      case 7:
        v3 = &protocol witness table for HardwareIdentifiersPolicy;
        v4 = &type metadata for HardwareIdentifiersPolicy;
        break;
      case 8:
        v3 = &protocol witness table for DeviceModePolicy;
        v4 = &type metadata for DeviceModePolicy;
        break;
      case 9:
        v3 = &protocol witness table for DarwinInitPolicy;
        v4 = &type metadata for DarwinInitPolicy;
        break;
      default:
        __break(1u);
        JUMPOUT(0x23806E9D0);
    }
    *(_QWORD *)(v0 + 192) = v4;
    Description = (void (**)(void))v4[-1].Description;
    *(_QWORD *)(v0 + 200) = Description;
    *(_QWORD *)(v0 + 208) = swift_task_alloc();
    Description[2]();
    v7 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))((char *)v3[1] + *(int *)v3[1]);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v6;
    *v6 = v0;
    v6[1] = sub_23806E740;
    return v7(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), v4, v3);
  }
}

uint64_t sub_23806E9F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc();
  sub_238005240(v1, &qword_2568C5E70);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

size_t sub_23806EA48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E50);
  v3 = *(_QWORD *)(sub_2380BDA60() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = sub_238080E2C(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_238027BEC();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23806EB60(char *a1, int64_t a2)
{
  char *v4;
  size_t v5;
  char *v6;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5D88);
    v4 = (char *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    *((_QWORD *)v4 + 2) = a2;
    *((_QWORD *)v4 + 3) = 2 * v5 - 64;
    v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_23806EC80(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_2380BDA60();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_238001820(&qword_2568C5C20, v11, MEMORY[0x24BEB2F90]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_2380BDCAC();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_238001820(&qword_2568C6320, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F98]);
      v21 = sub_2380BDCE8();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_2380703D8((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_23806EEDC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v10;
  uint64_t __s1;

  v6 = *v3;
  sub_2380BE234();
  swift_bridgeObjectRetain();
  sub_2380BD388();
  v7 = sub_2380BE264() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1 = *v10;
  *v10 = 0x8000000000000000;
  sub_237FFBA20(a2, a3);
  sub_2380705DC(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  *v10 = __s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23806F908(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_2380BE234();
  swift_bridgeObjectRetain();
  sub_2380BDD78();
  v8 = sub_2380BE264();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2380BE1B0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2380BE1B0() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_238071020(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23806FAB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_2380BDA60();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E60);
  v6 = sub_2380BE030();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
      result = sub_2380BDCAC();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_23806FE20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E58);
  v3 = sub_2380BE030();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_2380BE234();
      sub_2380BD388();
      result = sub_2380BE264();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2380700FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E28);
  v3 = sub_2380BE030();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_2380BE234();
      sub_2380BDD78();
      result = sub_2380BE264();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2380703D8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_2380BDA60();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23806FAB4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_2380711B8();
      goto LABEL_12;
    }
    sub_23807173C();
  }
  v12 = *v3;
  sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
  v13 = sub_2380BDCAC();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_238001820(&qword_2568C6320, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F98]);
      v18 = sub_2380BDCE8();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_2380BE1D4();
  __break(1u);
  return result;
}

uint64_t sub_2380705DC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_23806FE20();
    }
    else
    {
      if (v9 > v8)
      {
        result = (uint64_t)sub_2380713DC();
        goto LABEL_10;
      }
      sub_238071A64();
    }
    v10 = *v4;
    sub_2380BE234();
    sub_2380BD388();
    result = sub_2380BE264();
    a3 = result & ~(-1 << *(_BYTE *)(v10 + 32));
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v11 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v12 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * a3);
  *v12 = v7;
  v12[1] = a2;
  v13 = *(_QWORD *)(v11 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x238070F44);
  }
  *(_QWORD *)(v11 + 16) = v15;
  return result;
}

uint64_t sub_238071020(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_2380700FC();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23807158C();
      goto LABEL_22;
    }
    sub_238071D14();
  }
  v11 = *v4;
  sub_2380BE234();
  sub_2380BDD78();
  result = sub_2380BE264();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_2380BE1B0(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_2380BE1D4();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_2380BE1B0();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_2380711B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_2380BDA60();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E60);
  v6 = *v0;
  v7 = sub_2380BE024();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_2380713DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E58);
  v2 = *v0;
  v3 = sub_2380BE024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_237FFBA20(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23807158C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E28);
  v2 = *v0;
  v3 = sub_2380BE024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23807173C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_2380BDA60();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E60);
  v7 = sub_2380BE030();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_238001820(&qword_2568C5C20, (uint64_t (*)(uint64_t))MEMORY[0x24BEB2F80], MEMORY[0x24BEB2F90]);
    result = sub_2380BDCAC();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_238071A64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E58);
  v3 = sub_2380BE030();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_2380BE234();
    sub_237FFBA20(v20, v21);
    sub_2380BD388();
    result = sub_2380BE264();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_238071D14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E28);
  v3 = sub_2380BE030();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_2380BE234();
    swift_bridgeObjectRetain();
    sub_2380BDD78();
    result = sub_2380BE264();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_238071FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C7E28);
    v3 = sub_2380BE03C();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_2380BE234();
      swift_bridgeObjectRetain();
      sub_2380BDD78();
      result = sub_2380BE264();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_2380BE1B0(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_2380BE1B0();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_238072160(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;

  v3 = v2;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v18, v19, v20);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22)
      return swift_release();
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v22)
        return swift_release();
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 2;
      if (v11 + 2 >= v22)
        return swift_release();
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 3;
      if (v11 + 3 >= v22)
        return swift_release();
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
      {
LABEL_14:
        v11 = v16;
        goto LABEL_15;
      }
      v21 = v11 + 4;
      if (v11 + 4 >= v22)
        return swift_release();
      v15 = *(_QWORD *)(v6 + 8 * v21);
      v11 += 4;
      if (!v15)
        break;
    }
LABEL_15:
    v9 = (v15 - 1) & v15;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v22)
      return swift_release();
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v21;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_238072340@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_23806BA54(a1, a2, a3);
}

uint64_t type metadata accessor for EnsembleChannelSecurity.Follower(uint64_t a1)
{
  return sub_238001B1C(a1, qword_2568C7DB0);
}

unint64_t sub_23807236C()
{
  unint64_t result;

  result = qword_2568C7C88;
  if (!qword_2568C7C88)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3E18, &type metadata for EnsembleChannelSecurity.PairingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C7C88);
  }
  return result;
}

unint64_t sub_2380723B0()
{
  unint64_t result;

  result = qword_2568C7C90;
  if (!qword_2568C7C90)
  {
    result = MEMORY[0x23B82B770](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2568C7C90);
  }
  return result;
}

unint64_t sub_2380723F4()
{
  unint64_t result;

  result = qword_2568C7CA0;
  if (!qword_2568C7CA0)
  {
    result = MEMORY[0x23B82B770](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2568C7CA0);
  }
  return result;
}

unint64_t sub_23807243C()
{
  unint64_t result;

  result = qword_2568C7CA8;
  if (!qword_2568C7CA8)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for EnsembleChannelSecurity.PairingData, &type metadata for EnsembleChannelSecurity.PairingData);
    atomic_store(result, (unint64_t *)&qword_2568C7CA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity()
{
  return &type metadata for EnsembleChannelSecurity;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnsembleChannelSecurity.Leader(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *__dst;
  int *v43;
  char *v44;
  char *v45;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    a1[2] = a2[2];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = *(void **)((char *)a2 + v7);
    *(uint64_t *)((char *)a1 + v7) = (uint64_t)v10;
    v43 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
    v44 = v9;
    v11 = v43[5];
    v45 = v8;
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = sub_2380BDA60();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v10;
    v15(v12, v13, v14);
    v17 = *(int *)(type metadata accessor for Release() + 20);
    *(_QWORD *)&v12[v17] = *(_QWORD *)&v13[v17];
    v18 = (int *)type metadata accessor for EnsembleValidator();
    v19 = v18[5];
    v20 = &v12[v19];
    v21 = &v13[v19];
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    *(_DWORD *)&v12[v18[6]] = *(_DWORD *)&v13[v18[6]];
    v12[v18[7]] = v13[v18[7]];
    v12[v18[8]] = v13[v18[8]];
    v12[v18[9]] = v13[v18[9]];
    v12[v18[10]] = v13[v18[10]];
    v12[v18[11]] = v13[v18[11]];
    *(_QWORD *)&v12[v18[12]] = *(_QWORD *)&v13[v18[12]];
    v22 = v18[13];
    __dst = &v12[v22];
    v23 = &v13[v22];
    v24 = sub_2380BD418();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
      memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
    }
    v12[v18[14]] = v13[v18[14]];
    v12[v18[15]] = v13[v18[15]];
    v29 = v43[6];
    v30 = &v45[v29];
    v31 = &v44[v29];
    *v30 = v44[v29];
    *(_OWORD *)(v30 + 8) = *(_OWORD *)&v44[v29 + 8];
    v32 = *(_OWORD *)&v44[v29 + 48];
    *((_OWORD *)v30 + 3) = v32;
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))((uint64_t)&v45[v29 + 24], (uint64_t)&v44[v29 + 24]);
    v33 = *(_OWORD *)(v31 + 88);
    *(_OWORD *)(v30 + 88) = v33;
    (**(void (***)(uint64_t, uint64_t))(v33 - 8))((uint64_t)(v30 + 64), (uint64_t)(v31 + 64));
    v30[104] = v31[104];
    *(_WORD *)(v30 + 105) = *(_WORD *)(v31 + 105);
    v34 = *(_OWORD *)(v31 + 136);
    *(_OWORD *)(v30 + 136) = v34;
    (**(void (***)(uint64_t, uint64_t))(v34 - 8))((uint64_t)(v30 + 112), (uint64_t)(v31 + 112));
    v45[v43[7]] = v44[v43[7]];
    v35 = a3[7];
    v36 = (char *)v4 + v35;
    v37 = (char *)a2 + v35;
    v38 = sub_2380BD898();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
    v39 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v39) = *(uint64_t *)((char *)a2 + v39);
    v40 = a3[11];
    *(uint64_t *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(uint64_t *)((char *)v4 + v40) = *(uint64_t *)((char *)a2 + v40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for EnsembleChannelSecurity.Leader(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (id *)(a1 + *(int *)(a2 + 24));

  v5 = type metadata accessor for EnsembleHPKE.Leader(0);
  v6 = (char *)v4 + *(int *)(v5 + 20);
  v7 = sub_2380BDA60();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for EnsembleValidator();
  swift_bridgeObjectRelease();
  v9 = &v6[*(int *)(v8 + 52)];
  v10 = sub_2380BD418();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v12 = (char *)v4 + *(int *)(v5 + 24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 24));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 64));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 112));
  v13 = a1 + *(int *)(a2 + 28);
  v14 = sub_2380BD898();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for EnsembleChannelSecurity.Leader(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  id v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *__dst;
  int *v40;
  char *v41;
  char *v42;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = a3[6];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = *(void **)((char *)a2 + v5);
  *(_QWORD *)((char *)a1 + v5) = v8;
  v40 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  v41 = v7;
  v9 = v40[5];
  v42 = v6;
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2380BDA60();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v8;
  v13(v10, v11, v12);
  v15 = type metadata accessor for Release();
  *(_QWORD *)&v10[*(int *)(v15 + 20)] = *(_QWORD *)&v11[*(int *)(v15 + 20)];
  v16 = (int *)type metadata accessor for EnsembleValidator();
  v17 = v16[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
  *(_DWORD *)&v10[v16[6]] = *(_DWORD *)&v11[v16[6]];
  v10[v16[7]] = v11[v16[7]];
  v10[v16[8]] = v11[v16[8]];
  v10[v16[9]] = v11[v16[9]];
  v10[v16[10]] = v11[v16[10]];
  v10[v16[11]] = v11[v16[11]];
  *(_QWORD *)&v10[v16[12]] = *(_QWORD *)&v11[v16[12]];
  v20 = v16[13];
  __dst = &v10[v20];
  v21 = &v11[v20];
  v22 = sub_2380BD418();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v24(v21, 1, v22))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dst, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
  }
  v10[v16[14]] = v11[v16[14]];
  v10[v16[15]] = v11[v16[15]];
  v26 = v40[6];
  v27 = &v42[v26];
  v28 = &v41[v26];
  *v27 = v41[v26];
  *(_OWORD *)(v27 + 8) = *(_OWORD *)&v41[v26 + 8];
  v29 = *(_OWORD *)&v41[v26 + 48];
  *((_OWORD *)v27 + 3) = v29;
  (**(void (***)(uint64_t, uint64_t))(v29 - 8))((uint64_t)&v42[v26 + 24], (uint64_t)&v41[v26 + 24]);
  v30 = *(_OWORD *)(v28 + 88);
  *(_OWORD *)(v27 + 88) = v30;
  (**(void (***)(uint64_t, uint64_t))(v30 - 8))((uint64_t)(v27 + 64), (uint64_t)(v28 + 64));
  v27[104] = v28[104];
  *(_WORD *)(v27 + 105) = *(_WORD *)(v28 + 105);
  v31 = *(_OWORD *)(v28 + 136);
  *(_OWORD *)(v27 + 136) = v31;
  (**(void (***)(uint64_t, uint64_t))(v31 - 8))((uint64_t)(v27 + 112), (uint64_t)(v28 + 112));
  v42[v40[7]] = v41[v40[7]];
  v32 = a3[7];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = sub_2380BD898();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  v36 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  v37 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v37) = *(_QWORD *)((char *)a2 + v37);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EnsembleChannelSecurity.Leader(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v37;
  void **v38;
  void **v39;
  int *v40;
  _QWORD *v41;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3;
  v41 = a2;
  v6 = a3[6];
  v7 = (void **)((char *)a1 + v6);
  v8 = (void **)((char *)a2 + v6);
  v9 = *v8;
  v10 = *v7;
  *v7 = *v8;
  v11 = v9;

  v37 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  v38 = v8;
  v12 = v37[5];
  v39 = v7;
  v13 = (char *)v7 + v12;
  v14 = (char *)v8 + v12;
  v15 = sub_2380BDA60();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = type metadata accessor for Release();
  *(_QWORD *)&v13[*(int *)(v16 + 20)] = *(_QWORD *)&v14[*(int *)(v16 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (int *)type metadata accessor for EnsembleValidator();
  v18 = v17[5];
  v19 = &v13[v18];
  v20 = &v14[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  v19[16] = v20[16];
  v19[17] = v20[17];
  v19[18] = v20[18];
  *((_DWORD *)v19 + 5) = *((_DWORD *)v20 + 5);
  *(_DWORD *)&v13[v17[6]] = *(_DWORD *)&v14[v17[6]];
  v13[v17[7]] = v14[v17[7]];
  v13[v17[8]] = v14[v17[8]];
  v13[v17[9]] = v14[v17[9]];
  v13[v17[10]] = v14[v17[10]];
  v13[v17[11]] = v14[v17[11]];
  *(_QWORD *)&v13[v17[12]] = *(_QWORD *)&v14[v17[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = v17[13];
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = sub_2380BD418();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v7) = v26(v22, 1, v24);
  v27 = v26(v23, 1, v24);
  if (!(_DWORD)v7)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  v13[v17[14]] = v14[v17[14]];
  v13[v17[15]] = v14[v17[15]];
  v29 = v37[6];
  v30 = (char *)v39 + v29;
  v31 = (uint64_t *)((char *)v38 + v29);
  *v30 = *((_BYTE *)v38 + v29);
  *((_QWORD *)v30 + 1) = *(void **)((char *)v38 + v29 + 8);
  *((_QWORD *)v30 + 2) = *(void **)((char *)v38 + v29 + 16);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)v39 + v29 + 24), (uint64_t *)((char *)v38 + v29 + 24));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v30 + 8, v31 + 8);
  v30[104] = *((_BYTE *)v31 + 104);
  v30[105] = *((_BYTE *)v31 + 105);
  v30[106] = *((_BYTE *)v31 + 106);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v30 + 14, v31 + 14);
  *((_BYTE *)v39 + v37[7]) = *((_BYTE *)v38 + v37[7]);
  v32 = v40[7];
  v33 = (char *)a1 + v32;
  v34 = (char *)v41 + v32;
  v35 = sub_2380BD898();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  *(_QWORD *)((char *)a1 + v40[8]) = *(_QWORD *)((char *)v41 + v40[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v40[9]) = *(_QWORD *)((char *)v41 + v40[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v40[10]) = *(_QWORD *)((char *)v41 + v40[10]);
  *(_QWORD *)((char *)a1 + v40[11]) = *(_QWORD *)((char *)v41 + v40[11]);
  return a1;
}

uint64_t initializeWithTake for EnsembleChannelSecurity.Leader(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v39;
  uint64_t v40;
  uint64_t v41;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)(a1 + v6) = *(_QWORD *)(a2 + v6);
  v39 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  v40 = v8;
  v9 = v39[5];
  v41 = v7;
  v10 = v7 + v9;
  v11 = v8 + v9;
  v12 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = type metadata accessor for Release();
  *(_QWORD *)(v10 + *(int *)(v13 + 20)) = *(_QWORD *)(v11 + *(int *)(v13 + 20));
  v14 = (int *)type metadata accessor for EnsembleValidator();
  v15 = v14[5];
  v16 = v10 + v15;
  v17 = v11 + v15;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_DWORD *)(v10 + v14[6]) = *(_DWORD *)(v11 + v14[6]);
  *(_BYTE *)(v10 + v14[7]) = *(_BYTE *)(v11 + v14[7]);
  *(_BYTE *)(v10 + v14[8]) = *(_BYTE *)(v11 + v14[8]);
  *(_BYTE *)(v10 + v14[9]) = *(_BYTE *)(v11 + v14[9]);
  *(_BYTE *)(v10 + v14[10]) = *(_BYTE *)(v11 + v14[10]);
  *(_BYTE *)(v10 + v14[11]) = *(_BYTE *)(v11 + v14[11]);
  *(_QWORD *)(v10 + v14[12]) = *(_QWORD *)(v11 + v14[12]);
  v18 = v14[13];
  v19 = (void *)(v10 + v18);
  v20 = (const void *)(v11 + v18);
  v21 = sub_2380BD418();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_BYTE *)(v10 + v14[14]) = *(_BYTE *)(v11 + v14[14]);
  *(_BYTE *)(v10 + v14[15]) = *(_BYTE *)(v11 + v14[15]);
  v24 = v39[6];
  v25 = v41 + v24;
  v26 = v40 + v24;
  v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  v28 = *(_OWORD *)(v26 + 80);
  *(_OWORD *)(v25 + 64) = *(_OWORD *)(v26 + 64);
  *(_OWORD *)(v25 + 80) = v28;
  v29 = *(_OWORD *)(v26 + 48);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)(v26 + 32);
  *(_OWORD *)(v25 + 48) = v29;
  *(_QWORD *)(v25 + 144) = *(_QWORD *)(v26 + 144);
  v30 = *(_OWORD *)(v26 + 128);
  v31 = *(_OWORD *)(v26 + 96);
  *(_OWORD *)(v25 + 112) = *(_OWORD *)(v26 + 112);
  *(_OWORD *)(v25 + 128) = v30;
  *(_OWORD *)(v25 + 96) = v31;
  *(_BYTE *)(v41 + v39[7]) = *(_BYTE *)(v40 + v39[7]);
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = sub_2380BD898();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  v36 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v36) = *(_QWORD *)(a2 + v36);
  v37 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);
  return a1;
}

_QWORD *assignWithTake for EnsembleChannelSecurity.Leader(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int *v40;
  _QWORD *v41;
  char *v42;
  int *v43;
  _QWORD *v44;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v43 = a3;
  v44 = a2;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = *(void **)((char *)a1 + v7);
  *(_QWORD *)((char *)a1 + v7) = *v9;

  v40 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  v41 = v9;
  v11 = v40[5];
  v42 = v8;
  v12 = &v8[v11];
  v13 = (char *)v9 + v11;
  v14 = sub_2380BDA60();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = type metadata accessor for Release();
  *(_QWORD *)&v12[*(int *)(v15 + 20)] = *(_QWORD *)&v13[*(int *)(v15 + 20)];
  swift_bridgeObjectRelease();
  v16 = (int *)type metadata accessor for EnsembleValidator();
  v17 = v16[5];
  v18 = &v12[v17];
  v19 = &v13[v17];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  v18[16] = v19[16];
  v18[17] = v19[17];
  v18[18] = v19[18];
  *((_DWORD *)v18 + 5) = *((_DWORD *)v19 + 5);
  *(_DWORD *)&v12[v16[6]] = *(_DWORD *)&v13[v16[6]];
  v12[v16[7]] = v13[v16[7]];
  v12[v16[8]] = v13[v16[8]];
  v12[v16[9]] = v13[v16[9]];
  v12[v16[10]] = v13[v16[10]];
  v12[v16[11]] = v13[v16[11]];
  *(_QWORD *)&v12[v16[12]] = *(_QWORD *)&v13[v16[12]];
  swift_bridgeObjectRelease();
  v20 = v16[13];
  v21 = &v12[v20];
  v22 = &v13[v20];
  v23 = sub_2380BD418();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_7:
  v12[v16[14]] = v13[v16[14]];
  v12[v16[15]] = v13[v16[15]];
  v29 = v40[6];
  v30 = &v42[v29];
  v31 = (char *)v41 + v29;
  *v30 = *((_BYTE *)v41 + v29);
  *(_OWORD *)(v30 + 8) = *(_OWORD *)((char *)v41 + v29 + 8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42[v29 + 24]);
  *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
  *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
  *((_QWORD *)v30 + 7) = *((_QWORD *)v31 + 7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v30 + 64));
  v32 = *((_OWORD *)v31 + 5);
  *((_OWORD *)v30 + 4) = *((_OWORD *)v31 + 4);
  *((_OWORD *)v30 + 5) = v32;
  *((_QWORD *)v30 + 12) = *((_QWORD *)v31 + 12);
  v30[104] = v31[104];
  v30[105] = v31[105];
  v30[106] = v31[106];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v30 + 112));
  v33 = *((_OWORD *)v31 + 8);
  *((_OWORD *)v30 + 7) = *((_OWORD *)v31 + 7);
  *((_OWORD *)v30 + 8) = v33;
  *((_QWORD *)v30 + 18) = *((_QWORD *)v31 + 18);
  v42[v40[7]] = *((_BYTE *)v41 + v40[7]);
  v34 = v43[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)v44 + v34;
  v37 = sub_2380BD898();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  *(_QWORD *)((char *)a1 + v43[8]) = *(_QWORD *)((char *)v44 + v43[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v43[9]) = *(_QWORD *)((char *)v44 + v43[9]);
  swift_bridgeObjectRelease();
  v38 = v43[11];
  *(_QWORD *)((char *)a1 + v43[10]) = *(_QWORD *)((char *)v44 + v43[10]);
  *(_QWORD *)((char *)a1 + v38) = *(_QWORD *)((char *)v44 + v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Leader()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380735B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EnsembleHPKE.Leader(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_2380BD898();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Leader()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23807365C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EnsembleHPKE.Leader(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_2380BD898();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_2380736F8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for EnsembleHPKE.Leader(319);
  if (v1 <= 0x3F)
  {
    result = sub_2380BD898();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnsembleChannelSecurity.Follower(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char *__dst;
  int *v33;
  char *v34;
  char *v35;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v28 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v28 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = *(void **)((char *)a2 + v7);
    *(uint64_t *)((char *)a1 + v7) = (uint64_t)v10;
    v33 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
    v34 = v9;
    v11 = v33[5];
    v35 = v8;
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = sub_2380BDA60();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v10;
    v15(v12, v13, v14);
    v17 = type metadata accessor for Release();
    *(_QWORD *)&v12[*(int *)(v17 + 20)] = *(_QWORD *)&v13[*(int *)(v17 + 20)];
    v18 = (int *)type metadata accessor for EnsembleValidator();
    v19 = v18[5];
    v20 = &v12[v19];
    v21 = &v13[v19];
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    *(_DWORD *)&v12[v18[6]] = *(_DWORD *)&v13[v18[6]];
    v12[v18[7]] = v13[v18[7]];
    v12[v18[8]] = v13[v18[8]];
    v12[v18[9]] = v13[v18[9]];
    v12[v18[10]] = v13[v18[10]];
    v12[v18[11]] = v13[v18[11]];
    *(_QWORD *)&v12[v18[12]] = *(_QWORD *)&v13[v18[12]];
    v22 = v18[13];
    __dst = &v12[v22];
    v23 = &v13[v22];
    v24 = sub_2380BD418();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
      memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
    }
    v12[v18[14]] = v13[v18[14]];
    v12[v18[15]] = v13[v18[15]];
    v29 = v33[6];
    v30 = *(_OWORD *)&v34[v29 + 24];
    *(_OWORD *)&v35[v29 + 24] = v30;
    (**(void (***)(void))(v30 - 8))();
    v35[v33[7]] = v34[v33[7]];
  }
  return v3;
}

uint64_t destroy for EnsembleChannelSecurity.Follower(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (id *)(a1 + *(int *)(a2 + 24));

  v5 = type metadata accessor for EnsembleHPKE.Follower(0);
  v6 = (char *)v4 + *(int *)(v5 + 20);
  v7 = sub_2380BDA60();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for EnsembleValidator();
  swift_bridgeObjectRelease();
  v9 = &v6[*(int *)(v8 + 52)];
  v10 = sub_2380BD418();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4 + *(int *)(v5 + 24));
}

_QWORD *initializeWithCopy for EnsembleChannelSecurity.Follower(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char *__dst;
  int *v31;
  char *v32;
  char *v33;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(void **)((char *)a2 + v6);
  *(_QWORD *)((char *)a1 + v6) = v9;
  v31 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  v32 = v8;
  v10 = v31[5];
  v33 = v7;
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_2380BDA60();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v9;
  v14(v11, v12, v13);
  v16 = type metadata accessor for Release();
  *(_QWORD *)&v11[*(int *)(v16 + 20)] = *(_QWORD *)&v12[*(int *)(v16 + 20)];
  v17 = (int *)type metadata accessor for EnsembleValidator();
  v18 = v17[5];
  v19 = &v11[v18];
  v20 = &v12[v18];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  *(_DWORD *)&v11[v17[6]] = *(_DWORD *)&v12[v17[6]];
  v11[v17[7]] = v12[v17[7]];
  v11[v17[8]] = v12[v17[8]];
  v11[v17[9]] = v12[v17[9]];
  v11[v17[10]] = v12[v17[10]];
  v11[v17[11]] = v12[v17[11]];
  *(_QWORD *)&v11[v17[12]] = *(_QWORD *)&v12[v17[12]];
  v21 = v17[13];
  __dst = &v11[v21];
  v22 = &v12[v21];
  v23 = sub_2380BD418();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
  }
  v11[v17[14]] = v12[v17[14]];
  v11[v17[15]] = v12[v17[15]];
  v27 = v31[6];
  v28 = *(_OWORD *)&v32[v27 + 24];
  *(_OWORD *)&v33[v27 + 24] = v28;
  (**(void (***)(void))(v28 - 8))();
  v33[v31[7]] = v32[v31[7]];
  return a1;
}

_QWORD *assignWithCopy for EnsembleChannelSecurity.Follower(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  int *v31;
  char *v32;
  void **v33;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (void **)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  v9 = *(void **)((char *)a2 + v6);
  v10 = *v7;
  *v7 = v9;
  v11 = v9;

  v31 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  v32 = v8;
  v12 = v31[5];
  v33 = v7;
  v13 = (char *)v7 + v12;
  v14 = &v8[v12];
  v15 = sub_2380BDA60();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = type metadata accessor for Release();
  *(_QWORD *)&v13[*(int *)(v16 + 20)] = *(_QWORD *)&v14[*(int *)(v16 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (int *)type metadata accessor for EnsembleValidator();
  v18 = v17[5];
  v19 = &v13[v18];
  v20 = &v14[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  v19[16] = v20[16];
  v19[17] = v20[17];
  v19[18] = v20[18];
  *((_DWORD *)v19 + 5) = *((_DWORD *)v20 + 5);
  *(_DWORD *)&v13[v17[6]] = *(_DWORD *)&v14[v17[6]];
  v13[v17[7]] = v14[v17[7]];
  v13[v17[8]] = v14[v17[8]];
  v13[v17[9]] = v14[v17[9]];
  v13[v17[10]] = v14[v17[10]];
  v13[v17[11]] = v14[v17[11]];
  *(_QWORD *)&v13[v17[12]] = *(_QWORD *)&v14[v17[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = v17[13];
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = sub_2380BD418();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  v13[v17[14]] = v14[v17[14]];
  v13[v17[15]] = v14[v17[15]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)v33 + v31[6]), (uint64_t *)&v32[v31[6]]);
  *((_BYTE *)v33 + v31[7]) = v32[v31[7]];
  return a1;
}

_OWORD *initializeWithTake for EnsembleChannelSecurity.Follower(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  int *v28;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *(_QWORD *)((char *)a1 + v5) = *(_QWORD *)((char *)a2 + v5);
  v28 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  v8 = v28[5];
  v9 = &v6[v8];
  v10 = &v7[v8];
  v11 = sub_2380BDA60();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = type metadata accessor for Release();
  *(_QWORD *)&v9[*(int *)(v12 + 20)] = *(_QWORD *)&v10[*(int *)(v12 + 20)];
  v13 = (int *)type metadata accessor for EnsembleValidator();
  v14 = v13[5];
  v15 = &v9[v14];
  v16 = &v10[v14];
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
  *(_DWORD *)&v9[v13[6]] = *(_DWORD *)&v10[v13[6]];
  v9[v13[7]] = v10[v13[7]];
  v9[v13[8]] = v10[v13[8]];
  v9[v13[9]] = v10[v13[9]];
  v9[v13[10]] = v10[v13[10]];
  v9[v13[11]] = v10[v13[11]];
  *(_QWORD *)&v9[v13[12]] = *(_QWORD *)&v10[v13[12]];
  v17 = v13[13];
  v18 = &v9[v17];
  v19 = &v10[v17];
  v20 = sub_2380BD418();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v9[v13[14]] = v10[v13[14]];
  v9[v13[15]] = v10[v13[15]];
  v23 = v28[6];
  v24 = &v6[v23];
  v25 = &v7[v23];
  *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
  v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  v6[v28[7]] = v7[v28[7]];
  return a1;
}

_QWORD *assignWithTake for EnsembleChannelSecurity.Follower(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  int *v35;
  char *v36;
  char *v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *(void **)((char *)a1 + v8);
  *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);

  v35 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  v36 = v10;
  v12 = v35[5];
  v37 = v9;
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = sub_2380BDA60();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = type metadata accessor for Release();
  *(_QWORD *)&v13[*(int *)(v16 + 20)] = *(_QWORD *)&v14[*(int *)(v16 + 20)];
  swift_bridgeObjectRelease();
  v17 = (int *)type metadata accessor for EnsembleValidator();
  v18 = v17[5];
  v19 = &v13[v18];
  v20 = &v14[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  v19[16] = v20[16];
  v19[17] = v20[17];
  v19[18] = v20[18];
  *((_DWORD *)v19 + 5) = *((_DWORD *)v20 + 5);
  *(_DWORD *)&v13[v17[6]] = *(_DWORD *)&v14[v17[6]];
  v13[v17[7]] = v14[v17[7]];
  v13[v17[8]] = v14[v17[8]];
  v13[v17[9]] = v14[v17[9]];
  v13[v17[10]] = v14[v17[10]];
  v13[v17[11]] = v14[v17[11]];
  *(_QWORD *)&v13[v17[12]] = *(_QWORD *)&v14[v17[12]];
  swift_bridgeObjectRelease();
  v21 = v17[13];
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = sub_2380BD418();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  v13[v17[14]] = v14[v17[14]];
  v13[v17[15]] = v14[v17[15]];
  v30 = v35[6];
  v31 = &v37[v30];
  v32 = &v36[v30];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37[v30]);
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  v37[v35[7]] = v36[v35[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Follower()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2380744AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EnsembleHPKE.Follower(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Follower()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238074534(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EnsembleHPKE.Follower(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_2380745A8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for EnsembleHPKE.Follower(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.PairingData()
{
  return &type metadata for EnsembleChannelSecurity.PairingData;
}

id sub_23807462C(id result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  switch(a5 >> 5)
  {
    case 0:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 1:
      result = result;
      break;
    case 2:
      result = (id)sub_238074670((uint64_t)result, a2);
      break;
    case 3:
      result = (id)sub_2380746A4((uint64_t)result, a2, a3, a4, a5 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_238074670(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2380746A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

void destroy for EnsembleChannelSecurity.Error(uint64_t a1)
{
  sub_2380746C8(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

void sub_2380746C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  switch(a5 >> 5)
  {
    case 0:
      swift_bridgeObjectRelease();
      break;
    case 1:

      break;
    case 2:
      sub_23807470C((uint64_t)a1, a2);
      break;
    case 3:
      sub_238074740((uint64_t)a1, a2, a3, a4, a5 & 1);
      break;
    default:
      return;
  }
}

uint64_t sub_23807470C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_238074740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for EnsembleChannelSecurity.Error(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23807462C(*(id *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for EnsembleChannelSecurity.Error(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23807462C(*(id *)a2, v4, v5, v6, v7);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_2380746C8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for EnsembleChannelSecurity.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_2380746C8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 124;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_23807492C(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = (char)v1;
  v3 = v1 >> 5;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_23807494C(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x1Fu;
  return result;
}

uint64_t sub_23807495C(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.Error()
{
  return &type metadata for EnsembleChannelSecurity.Error;
}

unint64_t destroy for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for EnsembleChannelSecurity.Error.ProvisioningCertificateError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_238074C40(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_238074C58(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.Error.ProvisioningCertificateError()
{
  return &type metadata for EnsembleChannelSecurity.Error.ProvisioningCertificateError;
}

uint64_t destroy for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1)
{
  return sub_238074740(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_2380746A4(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_2380746A4(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_238074740(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_238074740(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Error.TopologyError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_238074E48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_238074E50(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.Error.TopologyError()
{
  return &type metadata for EnsembleChannelSecurity.Error.TopologyError;
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.PairingData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_238074EB8 + 4 * byte_2380C3B5D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_238074EEC + 4 * byte_2380C3B58[v4]))();
}

uint64_t sub_238074EEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_238074EF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x238074EFCLL);
  return result;
}

uint64_t sub_238074F08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238074F10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_238074F14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238074F1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.PairingData.CodingKeys()
{
  return &type metadata for EnsembleChannelSecurity.PairingData.CodingKeys;
}

unint64_t sub_238074F3C()
{
  unint64_t result;

  result = qword_2568C7DF0;
  if (!qword_2568C7DF0)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3DF0, &type metadata for EnsembleChannelSecurity.PairingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C7DF0);
  }
  return result;
}

unint64_t sub_238074F84()
{
  unint64_t result;

  result = qword_2568C7DF8;
  if (!qword_2568C7DF8)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3D60, &type metadata for EnsembleChannelSecurity.PairingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C7DF8);
  }
  return result;
}

unint64_t sub_238074FCC()
{
  unint64_t result;

  result = qword_2568C7E00;
  if (!qword_2568C7E00)
  {
    result = MEMORY[0x23B82B770](&unk_2380C3D88, &type metadata for EnsembleChannelSecurity.PairingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568C7E00);
  }
  return result;
}

uint64_t sub_238075010(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6554726568706963 && a2 == 0xEA00000000007478;
  if (v2 || (sub_2380BE1B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C75737061636E65 && a2 == 0xEF79654B64657461)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_238075130()
{
  unint64_t result;

  result = qword_2568C7E10;
  if (!qword_2568C7E10)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for EnsembleHPKE.Error, &type metadata for EnsembleHPKE.Error);
    atomic_store(result, (unint64_t *)&qword_2568C7E10);
  }
  return result;
}

uint64_t sub_238075174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_23806BB04(a1, a2, a3, v3[2], v3[3], v3[4]);
}

unint64_t sub_238075190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C7E30;
  if (!qword_2568C7E30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C5A28);
    result = MEMORY[0x23B82B770](MEMORY[0x24BDD0688], v1);
    atomic_store(result, (unint64_t *)&qword_2568C7E30);
  }
  return result;
}

uint64_t X509FingerprintPolicy.init<A>(fingerprints:hashFunction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2380BD7FC();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  sub_238030910();
  v13 = sub_2380BDF28();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  result = type metadata accessor for X509FingerprintPolicy(0, a2, a4, v14);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = v13;
  return result;
}

uint64_t type metadata accessor for X509FingerprintPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for X509FingerprintPolicy);
}

uint64_t X509FingerprintPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v4[15] = a3;
  v4[16] = v3;
  v4[14] = a2;
  v4[17] = *(_QWORD *)(a3 - 8);
  v4[18] = swift_task_alloc();
  v6 = sub_2380BD808();
  v4[19] = v6;
  v4[20] = *(_QWORD *)(v6 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = *(_QWORD *)(a3 + 24);
  v4[24] = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[25] = AssociatedTypeWitness;
  v4[26] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2380753F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  int v51;
  int v52;
  char v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint8_t *v82;
  os_log_type_t v83;
  NSObject *log;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];

  v1 = **(_QWORD **)(v0 + 112);
  v2 = type metadata accessor for X509Policy();
  if (!*(_QWORD *)(v1 + 16)
    || (v3 = sub_23800DEDC(v2, (uint64_t)&protocol witness table for X509Policy, 0x65746164696C6176, 0xED00007472654364), (v4 & 1) == 0)|| (sub_238016570(*(_QWORD *)(v1 + 56) + 32 * v3, v0 + 64), __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28), (swift_dynamicCast() & 1) == 0)|| !*(_QWORD *)(v0 + 16))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 152));
    v20 = sub_2380BD7F0();
    v21 = sub_2380BDF64();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_237FF6000, v20, v21, "Missing provisioning certificate", v22, 2u);
      MEMORY[0x23B82B830](v22, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 160);
    v25 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 152);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    v29 = type metadata accessor for X509FingerprintPolicy.Error(0, v23, v24, v28);
    MEMORY[0x23B82B770](&protocol conformance descriptor for X509FingerprintPolicy<A>.Error, v29);
    swift_allocError();
    *v30 = 0;
    swift_willThrow();
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v89 = *(void **)(v0 + 24);
  v87 = *(void **)(v0 + 16);
  ProvisioningCertificate.fingerprint<A>(using:)();
  v90 = v10;
  v11 = *(_QWORD *)(v9 + *(int *)(v10 + 36));
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v12(v6, v5, v7);
  swift_getAssociatedConformanceWitness();
  v13 = sub_2380BD3B8();
  v15 = v14;
  v16 = sub_238069FEC(v13, v14, v11);
  sub_237FFBAB0(v13, v15);
  v17 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 144);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 200));
    sub_238075CD0(v87, v89);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  v32 = *(_QWORD *)(v0 + 216);
  v33 = *(_QWORD *)(v0 + 200);
  v35 = *(_QWORD *)(v0 + 128);
  v34 = *(_QWORD *)(v0 + 136);
  v36 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 176), v35, *(_QWORD *)(v0 + 152));
  v12(v32, v17, v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v18, v35, v36);
  v37 = sub_2380BD7F0();
  v38 = sub_2380BDF64();
  v39 = os_log_type_enabled(v37, v38);
  v41 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 216);
  v42 = *(_QWORD *)(v0 + 200);
  if (!v39)
  {
    v68 = *(_QWORD *)(v0 + 176);
    v69 = *(_QWORD *)(v0 + 152);
    v70 = *(_QWORD *)(v0 + 160);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    v86 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v86(v40, v42);

    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
    v46 = v89;
LABEL_25:
    v77 = *(_QWORD *)(v0 + 232);
    v78 = *(_QWORD *)(v0 + 200);
    v79 = type metadata accessor for X509FingerprintPolicy.Error(0, *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 184), v71);
    MEMORY[0x23B82B770](&protocol conformance descriptor for X509FingerprintPolicy<A>.Error, v79);
    swift_allocError();
    *v80 = 1;
    swift_willThrow();
    sub_238075CD0(v87, v46);
    v86(v77, v78);
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  v83 = v38;
  log = v37;
  v85 = *(_QWORD *)(v0 + 144);
  v43 = swift_slowAlloc();
  v81 = swift_slowAlloc();
  v94[0] = v81;
  *(_DWORD *)v43 = 136446466;
  v44 = sub_23801B224();
  *(_QWORD *)(v0 + 96) = sub_238013968(v44, v45, v94);
  sub_2380BDF94();
  swift_bridgeObjectRelease();
  v86 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v86(v40, v42);
  v82 = (uint8_t *)v43;
  *(_WORD *)(v43 + 12) = 2082;
  v46 = v89;
  v47 = *(_QWORD *)(v85 + *(int *)(v90 + 36));
  v48 = *(_QWORD *)(v47 + 16);
  v49 = MEMORY[0x24BEE4AF8];
  if (!v48)
  {
LABEL_24:
    v92 = *(_QWORD *)(v0 + 176);
    v72 = *(_QWORD *)(v0 + 152);
    v73 = *(_QWORD *)(v0 + 160);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    v74 = MEMORY[0x23B82AD38](v49, MEMORY[0x24BEE0D00]);
    v76 = v75;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 104) = sub_238013968(v74, v76, v94);
    sub_2380BDF94();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237FF6000, log, v83, "Fingerprint %{public}s not a member of %{public}s", v82, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](v81, -1, -1);
    MEMORY[0x23B82B830](v82, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v92, v72);
    goto LABEL_25;
  }
  v93 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  sub_238075DB4(0, v48, 0);
  v49 = v93;
  result = sub_238076744(v47);
  v50 = result;
  v52 = v51;
  v54 = v53 & 1;
  v88 = v47 + 56;
  while ((v50 & 0x8000000000000000) == 0 && v50 < 1 << *(_BYTE *)(v47 + 32))
  {
    if (((*(_QWORD *)(v88 + (((unint64_t)v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(v47 + 36) != v52)
      goto LABEL_28;
    v91 = v54;
    v55 = (uint64_t *)(*(_QWORD *)(v47 + 48) + 16 * v50);
    v56 = v47;
    v58 = *v55;
    v57 = v55[1];
    sub_237FFBA20(*v55, v57);
    sub_2380655C8(v58, v57);
    v60 = v59;
    v62 = v61;
    sub_237FFBAB0(v58, v57);
    v64 = *(_QWORD *)(v93 + 16);
    v63 = *(_QWORD *)(v93 + 24);
    if (v64 >= v63 >> 1)
      sub_238075DB4(v63 > 1, v64 + 1, 1);
    *(_QWORD *)(v93 + 16) = v64 + 1;
    v65 = v93 + 16 * v64;
    *(_QWORD *)(v65 + 32) = v60;
    *(_QWORD *)(v65 + 40) = v62;
    result = sub_238076C98(v50, v52, v91 & 1, v56);
    v50 = result;
    v52 = v66;
    v54 = v67 & 1;
    --v48;
    v46 = v89;
    v47 = v56;
    if (!v48)
    {
      sub_238030904(result, v66, v54);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_238075BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_238013814;
  return X509FingerprintPolicy.evaluate(bundle:context:)((uint64_t)v6, a2, a3);
}

BOOL static X509FingerprintPolicy.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t X509FingerprintPolicy.Error.hash(into:)()
{
  return sub_2380BE240();
}

uint64_t X509FingerprintPolicy.Error.hashValue.getter()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

uint64_t sub_238075C8C()
{
  sub_2380BE234();
  X509FingerprintPolicy.Error.hash(into:)();
  return sub_2380BE264();
}

uint64_t type metadata accessor for X509FingerprintPolicy.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for X509FingerprintPolicy.Error);
}

void *sub_238075CD0(void *result, void *a2)
{
  if (result)
  {

    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_238075D18(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_238075DFC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_238075D34(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_238075F84(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_238075D50(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2380760EC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_238075D6C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23807626C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_238075D88(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_238076560(a1, a2, a3, (_QWORD *)*v3, &qword_2568C7E50, (uint64_t (*)(_QWORD))MEMORY[0x24BEB2F80]);
  *v3 = result;
  return result;
}

uint64_t sub_238075DB4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2380763F8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_238075DD0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_238076560(a1, a2, a3, (_QWORD *)*v3, &qword_2568C7F78, type metadata accessor for Proto_SealedHash.Entry);
  *v3 = result;
  return result;
}

uint64_t sub_238075DFC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6198);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238075F84(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5D98);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_2380760EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6190);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_23807626C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_2380763E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_238076560(a1, a2, a3, a4, &qword_2568C7E50, (uint64_t (*)(_QWORD))MEMORY[0x24BEB2F80]);
}

uint64_t sub_2380763F8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C61A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238076560(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_2380BE114();
  __break(1u);
  return result;
}

uint64_t sub_238076744(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_2380767E4()
{
  JUMPOUT(0x23B82B770);
}

uint64_t sub_2380767F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2380BD808();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_238076868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2380BD808();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_2380768F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2380BD808();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_238076938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_238076998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_238076A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_238076A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2380BD808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_238076AC4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_238076AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2380BD808();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_238076B4C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_238076B58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2380BD808();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_238076BD0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_238076BD8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_238076C24 + 4 * byte_2380C3E75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_238076C58 + 4 * byte_2380C3E70[v4]))();
}

uint64_t sub_238076C58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_238076C60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x238076C68);
  return result;
}

uint64_t sub_238076C74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238076C7CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_238076C80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238076C88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

int64_t sub_238076C98(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

double APTicketPolicy.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_2380BF8E0;
  return result;
}

void sub_238076D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_2380BD85C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2380BD3A0();
  MEMORY[0x24BDAC7A8](v5);
  __asm { BR              X10 }
}

uint64_t sub_238076E48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  sub_237FFBA20(v6, v5);
  sub_237FFBA20(v6, v5);
  sub_2380BD3AC();
  sub_237FFBAB0(v6, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v4, v3);
  sub_238001820(&qword_2568C7FA0, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6320], MEMORY[0x24BDC6330]);
  sub_2380BDE08();
  v10 = *(_QWORD *)(v9 - 96);
  v11 = *(_QWORD *)(v10 + 16);
  sub_238001820((unint64_t *)&qword_2568C7B78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
  sub_2380BDF88();
  v12 = *(_QWORD *)(v9 - 88);
  if (v12 == v11)
  {
LABEL_7:
    v13 = *(unsigned __int8 *)(v9 - 97);
  }
  else
  {
    while (1)
    {
      if ((v12 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x238076FB4);
      }
      if (v12 >= *(_QWORD *)(v10 + 16))
        goto LABEL_10;
      v13 = 0;
      v14 = v12 + 1;
      v15 = *(unsigned __int8 *)(v10 + 32 + v12);
      *(_QWORD *)(v9 - 88) = v14;
      if ((*(_BYTE *)(v9 - 97) & 1) != 0 || *(unsigned __int8 *)(v9 - 98) != v15)
        break;
      sub_2380BDF88();
      v12 = *(_QWORD *)(v9 - 88);
      if (v12 == v11)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v0);
  return v13;
}

void sub_238076FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_2380BD3A0();
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X10 }
}

uint64_t sub_238077044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;

  sub_237FFBA20(v4, v3);
  sub_237FFBA20(v4, v3);
  sub_2380BD3AC();
  sub_237FFBAB0(v4, v3);
  v7 = *(_QWORD *)(v2 + 16);
  sub_238001820((unint64_t *)&qword_2568C7B78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
  swift_bridgeObjectRetain();
  sub_2380BDF88();
  if (v7)
  {
    v8 = (unsigned __int8 *)(v2 + 32);
    while ((*(_BYTE *)(v6 - 65) & 1) == 0 && *(unsigned __int8 *)(v6 - 66) == *v8)
    {
      sub_2380BDF88();
      ++v8;
      if (!--v7)
        goto LABEL_6;
    }
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = *(unsigned __int8 *)(v6 - 65);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v0);
  return v9;
}

uint64_t sub_238077144()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9F10);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9F10);
  return sub_2380BD7FC();
}

uint64_t APTicketPolicy.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t APTicketPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v4 = sub_2380BD9AC();
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 48) = swift_task_alloc();
  v5 = sub_2380BD85C();
  *(_QWORD *)(v3 + 56) = v5;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 72) = swift_task_alloc();
  *(_OWORD *)(v3 + 80) = *v2;
  return swift_task_switch();
}

uint64_t sub_238077288()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 88);
  if (v1 >> 60 != 15)
  {
    v7 = *(_QWORD *)(v0 + 80);
    v8 = v7;
    v9 = *(_QWORD *)(v0 + 88);
    goto LABEL_6;
  }
  v19 = **(_QWORD **)(v0 + 24);
  AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v15);
  v2 = v16;
  if (v16 >> 60 != 15)
  {
    v4 = v17;
    v3 = v18;
    v5 = v15;
    v22[0] = 0;
    v14 = 0;
    sub_237FFBA20(v15, v16);
    sub_237FFBA20(v4, v3);
    sub_238034344(v5, v2, v4, v3, (uint64_t)v22, (uint64_t)&v14, v5, v2, v4, v3);
    sub_23804E940(v5, v2, v4, v3);
    if ((~v21 & 0x3000000000000000) != 0)
    {
      if ((v21 & 0x2000000000000000) != 0)
        v8 = v20;
      else
        v8 = v19;
      if ((v21 & 0x2000000000000000) != 0)
        v9 = v21 & 0xDFFFFFFFFFFFFFFFLL;
      else
        v9 = v20;
      v7 = *(_QWORD *)(v0 + 80);
      v1 = *(_QWORD *)(v0 + 88);
LABEL_6:
      v10 = *(_QWORD *)(v0 + 16);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      sub_238009148(v8, v9);
      sub_237FFBA20(v11, v12);
      sub_238009148(v7, v1);
      sub_238001820(&qword_2568C5898, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
      sub_2380BD838();
      __asm { BR              X9 }
    }
  }
  sub_2380777FC();
  swift_allocError();
  *v6 = 0;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_2380777FC()
{
  unint64_t result;

  result = qword_2568C7F88;
  if (!qword_2568C7F88)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for APTicketPolicy.Error, &type metadata for APTicketPolicy.Error);
    atomic_store(result, (unint64_t *)&qword_2568C7F88);
  }
  return result;
}

uint64_t sub_238077840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_238013814;
  return APTicketPolicy.evaluate(bundle:context:)(a1, a2);
}

BOOL static APTicketPolicy.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t APTicketPolicy.Error.hash(into:)()
{
  return sub_2380BE240();
}

uint64_t APTicketPolicy.Error.hashValue.getter()
{
  sub_2380BE234();
  sub_2380BE240();
  return sub_2380BE264();
}

unint64_t sub_238077924()
{
  unint64_t result;

  result = qword_2568C7F98;
  if (!qword_2568C7F98)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for APTicketPolicy.Error, &type metadata for APTicketPolicy.Error);
    atomic_store(result, (unint64_t *)&qword_2568C7F98);
  }
  return result;
}

uint64_t *destroy for APTicketPolicy(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_237FFBAB0(*result, v1);
  return result;
}

uint64_t _s16CloudAttestation14APTicketPolicyVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_237FFBA20(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for APTicketPolicy(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_237FFBA20(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_237FFBAB0(v7, v8);
      return a1;
    }
    sub_238009EE8((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  sub_237FFBA20(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for APTicketPolicy(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_237FFBAB0(v6, v4);
      return a1;
    }
    sub_238009EE8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for APTicketPolicy(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for APTicketPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for APTicketPolicy()
{
  return &type metadata for APTicketPolicy;
}

uint64_t storeEnumTagSinglePayload for APTicketPolicy.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_238077BEC + 4 * byte_2380C3FA9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_238077C20 + 4 * byte_2380C3FA4[v4]))();
}

uint64_t sub_238077C20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_238077C28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x238077C30);
  return result;
}

uint64_t sub_238077C3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x238077C44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_238077C48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_238077C50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for APTicketPolicy.Error()
{
  return &type metadata for APTicketPolicy.Error;
}

uint64_t *destroy for APTicketPolicy.DigestLoader(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_237FFBAB0(*result, v1);
  return result;
}

uint64_t _s16CloudAttestation14APTicketPolicyV12DigestLoaderOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_237FFBA20(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for APTicketPolicy.DigestLoader(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      v9 = *a2;
      sub_237FFBA20(v9, v5);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_237FFBAB0(v10, v11);
      return a1;
    }
    sub_237FFBAB0(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v7 = *a2;
  sub_237FFBA20(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *assignWithTake for APTicketPolicy.DigestLoader(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_237FFBAB0(v7, v4);
      return a1;
    }
    sub_237FFBAB0(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for APTicketPolicy.DigestLoader(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for APTicketPolicy.DigestLoader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_238077E70(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_238077E98(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for APTicketPolicy.DigestLoader()
{
  return &type metadata for APTicketPolicy.DigestLoader;
}

BOOL sub_238077ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL sub_238077EE4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    a1 = qword_2380C4130[a1];
  if ((a4 & 1) != 0)
    a3 = qword_2380C4130[a3];
  return a1 == a3;
}

void sub_238077F08(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_238077F48(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_238078024 + 4 * byte_2380C40A9[a2]))(0x6172656D65687065);
}

uint64_t sub_238078024(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6172656D65687065 && v1 == 0xE90000000000006CLL)
    v2 = 1;
  else
    v2 = sub_2380BE1B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_238078168(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7972726163;
    else
      v3 = 0x72656D6F74737563;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7972726163;
      else
        v6 = 0x72656D6F74737563;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701736302;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701736302)
  {
LABEL_21:
    v8 = sub_2380BE1B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL sub_238078268(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    a1 = qword_2380C4168[a1];
  if ((a4 & 1) != 0)
    a3 = qword_2380C4168[a3];
  return a1 == a3;
}

uint64_t DarwinInitPolicy.init<A>(securityPolicies:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v8 = sub_2380BDEF8();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v8;
  return result;
}

void AttestationPolicyContext.validatedDarwinInit.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *v1;
  if (!*(_QWORD *)(v3 + 16)
    || (v4 = sub_23800DEDC((uint64_t)&type metadata for DarwinInitPolicy, (uint64_t)&protocol witness table for DarwinInitPolicy, 0xD000000000000013, 0x80000002380C9370), (v5 & 1) == 0)|| (sub_238016570(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v6), __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2568C5E28), (swift_dynamicCast() & 1) == 0))
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

uint64_t sub_2380783DC()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9F28);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9F28);
  return sub_2380BD7FC();
}

uint64_t DarwinInitPolicy.allowedSecurityPolicies.getter()
{
  return swift_bridgeObjectRetain();
}

CloudAttestation::DarwinInitPolicy __swiftcall DarwinInitPolicy.init(securityPolicy:)(CloudAttestation::DarwinInit::SecureConfigSecurityPolicy securityPolicy)
{
  CloudAttestation::DarwinInitPolicy *v1;
  CloudAttestation::DarwinInitPolicy *v2;
  char v3;
  CloudAttestation::DarwinInitPolicy result;

  v2 = v1;
  v3 = *(_BYTE *)securityPolicy;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8168);
  result.allowedSecurityPolicies._rawValue = (void *)swift_allocObject();
  *((_OWORD *)result.allowedSecurityPolicies._rawValue + 1) = xmmword_2380BEAC0;
  *((_BYTE *)result.allowedSecurityPolicies._rawValue + 32) = v3;
  v2->allowedSecurityPolicies._rawValue = result.allowedSecurityPolicies._rawValue;
  return result;
}

uint64_t DarwinInitPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[10] = a1;
  v3[11] = a2;
  v3[12] = *v2;
  return swift_task_switch();
}

uint64_t sub_2380784D4()
{
  unint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  _OWORD *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t (*v63)(void);
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  _OWORD *v67;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint8_t *buf;
  os_log_type_t type;
  uint64_t *v89;
  uint64_t v90;
  os_log_t loga;
  os_log_t log;
  NSObject *logb;
  unint64_t v94;
  unsigned __int8 v95;
  uint64_t v96[6];

  if (qword_2568C5028 != -1)
LABEL_74:
    swift_once();
  v1 = sub_2380BD808();
  __swift_project_value_buffer(v1, (uint64_t)qword_2568C9F28);
  swift_bridgeObjectRetain_n();
  v2 = sub_2380BD7F0();
  v3 = sub_2380BDF70();
  v89 = (uint64_t *)(v0 + 2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    loga = (os_log_t)swift_slowAlloc();
    v96[0] = (uint64_t)loga;
    *(_DWORD *)v4 = 136446210;
    v5 = swift_bridgeObjectRetain();
    v6 = MEMORY[0x23B82AD38](v5, &type metadata for DarwinInit.SecureConfigSecurityPolicy);
    v8 = v7;
    swift_bridgeObjectRelease();
    v0[2] = sub_238013968(v6, v8, v96);
    sub_2380BDF94();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237FF6000, v2, v3, "Evaluating DarwinInit against allowed policies: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B82B830](loga, -1, -1);
    MEMORY[0x23B82B830](v4, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v9 = v0[12];
  v10 = v0;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v12 = (unsigned __int8 *)(v9 + 32);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v14 = *v12++;
      v13 = v14;
      if (v14 != 1 && v13 != 2)
        break;
      v15 = sub_2380BE1B0();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
      {
        v17 = v10;
        goto LABEL_56;
      }
      if (!--v11)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_12;
      }
    }
    v17 = v10;
    swift_bridgeObjectRelease();
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = sub_2380BD7F0();
    v61 = sub_2380BDF64();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      _os_log_impl(&dword_237FF6000, v60, v61, "Allowing absent darwin-init since DarwinInitPolicy allows config-security-policy=none", v62, 2u);
      MEMORY[0x23B82B830](v62, -1, -1);
    }

LABEL_59:
    v63 = (uint64_t (*)(void))v17[1];
    return v63();
  }
LABEL_12:
  v16 = sub_23807F2E0();
  v17 = v10;
  if (!v16)
  {
    v46 = sub_2380BD7F0();
    v47 = sub_2380BDF64();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_237FF6000, v46, v47, "Missing secure config in Attestation Bundle", v48, 2u);
      MEMORY[0x23B82B830](v48, -1, -1);
    }

    sub_238079320();
    swift_allocError();
    *v49 = 0;
    v49[1] = 0;
    goto LABEL_54;
  }
  v18 = v16;
  v19 = *(_QWORD *)(v16 + 16);
  if (!v19)
  {
    v21 = (uint8_t *)MEMORY[0x24BEE4AF8];
    goto LABEL_48;
  }
  v20 = 0;
  log = (os_log_t)-v19;
  v21 = (uint8_t *)MEMORY[0x24BEE4AF8];
  v22 = v16 + 64;
  v86 = v17;
  v84 = v16 + 64;
  do
  {
    buf = v21;
    v0 = (unint64_t *)(v22 + 40 * v20++);
    while (1)
    {
      if ((unint64_t)(v20 - 1) >= *(_QWORD *)(v18 + 16))
      {
        __break(1u);
        goto LABEL_74;
      }
      v23 = *(v0 - 2);
      if (*(_QWORD *)(v23 + 16))
        break;
LABEL_18:
      ++v20;
      v0 += 5;
      if ((os_log_t)((char *)log + v20) == (os_log_t)1)
      {
        v17 = v86;
        v21 = buf;
        goto LABEL_48;
      }
    }
    v25 = *(v0 - 4);
    v24 = *(v0 - 3);
    v27 = *(v0 - 1);
    v26 = *v0;
    sub_237FFBA20(v25, v24);
    swift_bridgeObjectRetain();
    sub_237FFBA20(v27, v26);
    sub_237FFBA20(v25, v24);
    swift_bridgeObjectRetain();
    sub_237FFBA20(v27, v26);
    v28 = sub_23800DCFC(1701667182, 0xE400000000000000);
    if ((v29 & 1) == 0)
    {
LABEL_16:
      sub_237FFBAB0(v25, v24);
      swift_bridgeObjectRelease();
      sub_237FFBAB0(v27, v26);
LABEL_17:
      sub_237FFBAB0(v25, v24);
      swift_bridgeObjectRelease();
      sub_237FFBAB0(v27, v26);
      goto LABEL_18;
    }
    v30 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v28);
    v32 = *v30;
    v31 = v30[1];
    swift_bridgeObjectRetain();
    sub_237FFBAB0(v25, v24);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v27, v26);
    if (v32 == 0x692D6E6977726164 && v31 == 0xEB0000000074696ELL)
    {
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v23 + 16))
        goto LABEL_17;
    }
    else
    {
      v34 = sub_2380BE1B0();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0 || !*(_QWORD *)(v23 + 16))
        goto LABEL_17;
    }
    sub_237FFBA20(v25, v24);
    swift_bridgeObjectRetain();
    sub_237FFBA20(v27, v26);
    v35 = sub_23800DCFC(0x7079745F656D696DLL, 0xE900000000000065);
    if ((v36 & 1) == 0)
      goto LABEL_16;
    v37 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v35);
    v39 = *v37;
    v38 = v37[1];
    swift_bridgeObjectRetain();
    sub_237FFBAB0(v25, v24);
    swift_bridgeObjectRelease();
    sub_237FFBAB0(v27, v26);
    if (v39 != 0xD000000000000010 || v38 != 0x80000002380C8190)
    {
      v40 = sub_2380BE1B0();
      swift_bridgeObjectRelease();
      if ((v40 & 1) != 0)
        goto LABEL_36;
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
LABEL_36:
    v41 = (uint64_t)buf;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v96[0] = (uint64_t)buf;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_238075D50(0, *((_QWORD *)buf + 2) + 1, 1);
      v41 = v96[0];
    }
    v22 = v84;
    v44 = *(_QWORD *)(v41 + 16);
    v43 = *(_QWORD *)(v41 + 24);
    if (v44 >= v43 >> 1)
    {
      sub_238075D50(v43 > 1, v44 + 1, 1);
      v22 = v84;
      v41 = v96[0];
    }
    *(_QWORD *)(v41 + 16) = v44 + 1;
    v45 = (_QWORD *)(v41 + 40 * v44);
    v45[4] = v25;
    v45[5] = v24;
    v45[6] = v23;
    v45[7] = v27;
    v45[8] = v26;
    v17 = v86;
    v21 = (uint8_t *)v41;
  }
  while ((os_log_t)((char *)log + v20));
LABEL_48:
  swift_bridgeObjectRelease();
  v50 = *((_QWORD *)v21 + 2);
  if (!v50)
  {
    swift_release();
    v56 = sub_2380BD7F0();
    v57 = sub_2380BDF64();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_237FF6000, v56, v57, "Attestation contains secure config, but none of them are darwin-init", v58, 2u);
      MEMORY[0x23B82B830](v58, -1, -1);
    }

    sub_238079320();
    swift_allocError();
    *v59 = xmmword_2380C3B30;
LABEL_54:
    swift_willThrow();
    goto LABEL_64;
  }
  v52 = *((_QWORD *)v21 + 4);
  v51 = *((_QWORD *)v21 + 5);
  v54 = *((_QWORD *)v21 + 6);
  v53 = *((_QWORD *)v21 + 7);
  v55 = *((_QWORD *)v21 + 8);
  sub_237FFBA20(v52, v51);
  swift_bridgeObjectRetain();
  sub_237FFBA20(v53, v55);
  swift_release();
  if (v50 == 1)
  {
    v96[0] = v52;
    v96[1] = v51;
    v96[2] = v54;
    v96[3] = v53;
    v96[4] = v55;
    sub_237FFBA20(v52, v51);
    swift_bridgeObjectRetain();
    sub_237FFBA20(v53, v55);
    DarwinInit.init(from:)(v96, (uint64_t)&v94);
    v69 = v17[12];
    v70 = v94;
    v71 = v95;
    swift_bridgeObjectRetain();
    v72 = sub_238079120(v71, v69);
    swift_bridgeObjectRelease();
    if ((v72 & 1) != 0)
    {
      *((_BYTE *)v17 + 24) = v71;
      v17[5] = (unint64_t)&type metadata for DarwinInit;
      v17[2] = v70;
      sub_238024D10((uint64_t)v89, (uint64_t)(v17 + 6));
      sub_238022FD8((uint64_t)(v17 + 6), (uint64_t)&type metadata for DarwinInitPolicy, (uint64_t)&protocol witness table for DarwinInitPolicy, 0xD000000000000013, 0x80000002380C9370);
      sub_238037344((uint64_t)v89);
      swift_bridgeObjectRetain_n();
      v73 = sub_2380BD7F0();
      v74 = sub_2380BDF70();
      if (os_log_type_enabled(v73, v74))
      {
        logb = v73;
        type = v74;
        v75 = (uint8_t *)swift_slowAlloc();
        v90 = swift_slowAlloc();
        v96[0] = v90;
        *(_DWORD *)v75 = 136446210;
        v76 = swift_bridgeObjectRetain();
        v85 = MEMORY[0x23B82AD38](v76, &type metadata for DarwinInit.SecureConfigSecurityPolicy);
        v78 = v77;
        swift_bridgeObjectRelease();
        *v89 = sub_238013968(v85, v78, v96);
        sub_2380BDF94();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_237FF6000, logb, type, "AttestationBundle passed DarwinInitPolicy: reported darwin-init config-security-policy matches allowed list: %{public}s", v75, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v90, -1, -1);
        MEMORY[0x23B82B830](v75, -1, -1);

        sub_237FFBAB0(v52, v51);
        swift_bridgeObjectRelease();
        sub_237FFBAB0(v53, v55);
      }
      else
      {
        sub_237FFBAB0(v52, v51);
        swift_bridgeObjectRelease();
        sub_237FFBAB0(v53, v55);

        swift_bridgeObjectRelease_n();
      }
      goto LABEL_59;
    }
    v79 = sub_2380BD7F0();
    v80 = sub_2380BDF64();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v81 = 0;
      _os_log_impl(&dword_237FF6000, v79, v80, "", v81, 2u);
      MEMORY[0x23B82B830](v81, -1, -1);
    }
    v82 = v17[12];

    sub_238079320();
    swift_allocError();
    *v83 = v71;
    v83[1] = v82;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    v64 = sub_2380BD7F0();
    v65 = sub_2380BDF64();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      _os_log_impl(&dword_237FF6000, v64, v65, "Attestation contains too many darwin-init secure configs", v66, 2u);
      MEMORY[0x23B82B830](v66, -1, -1);
    }

    sub_238079320();
    swift_allocError();
    *v67 = xmmword_2380C3B20;
    swift_willThrow();
  }
  sub_237FFBAB0(v52, v51);
  swift_bridgeObjectRelease();
  sub_237FFBAB0(v53, v55);
LABEL_64:
  v63 = (uint64_t (*)(void))v17[1];
  return v63();
}

uint64_t sub_238079120(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (1)
  {
    v6 = a2 + v5++;
    v7 = *(unsigned __int8 *)(v6 + 32);
    v8 = 0x72656D6F74737563;
    if (v7 == 1)
    {
      v8 = 0x7972726163;
      v9 = 0xE500000000000000;
    }
    else
    {
      v9 = 0xE800000000000000;
    }
    v10 = v7 ? v8 : 1701736302;
    v11 = v7 ? v9 : 0xE400000000000000;
    if (a1)
    {
      if (a1 == 1)
        v12 = 0x7972726163;
      else
        v12 = 0x72656D6F74737563;
      if (a1 == 1)
        v13 = 0xE500000000000000;
      else
        v13 = 0xE800000000000000;
      if (v10 != v12)
        goto LABEL_23;
    }
    else
    {
      v13 = 0xE400000000000000;
      if (v10 != 1701736302)
        goto LABEL_23;
    }
    if (v11 == v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return 1;
    }
LABEL_23:
    v14 = sub_2380BE1B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      break;
    if (v2 == v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

void static DarwinInitPolicy.validatedDarwinInitKey.getter(_QWORD *a1@<X8>)
{
  *a1 = &type metadata for DarwinInitPolicy;
  a1[1] = &protocol witness table for DarwinInitPolicy;
  a1[2] = 0xD000000000000013;
  a1[3] = 0x80000002380C9370;
}

uint64_t sub_2380792AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_238013814;
  v6[10] = a1;
  v6[11] = a2;
  v6[12] = *v2;
  return swift_task_switch();
}

unint64_t sub_238079320()
{
  unint64_t result;

  result = qword_2568C8178;
  if (!qword_2568C8178)
  {
    result = MEMORY[0x23B82B770](&unk_2380C40E8, &type metadata for DarwinInitPolicy.Error);
    atomic_store(result, (unint64_t *)&qword_2568C8178);
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinInitPolicy()
{
  return &type metadata for DarwinInitPolicy;
}

unint64_t destroy for DarwinInitPolicy.Error(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s16CloudAttestation16DarwinInitPolicyV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for DarwinInitPolicy.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DarwinInitPolicy.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DarwinInitPolicy.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DarwinInitPolicy.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

_QWORD *sub_23807958C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinInitPolicy.Error()
{
  return &type metadata for DarwinInitPolicy.Error;
}

uint64_t sub_2380795C0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_SealedHashLedger(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (unint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v3 + *(int *)(v13 + 32), (uint64_t)v8, &qword_2568C6418);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    *v12 = sub_23800C00C(MEMORY[0x24BEE4AF8]);
    sub_2380BD5BC();
    sub_238005240((uint64_t)v8, &qword_2568C6418);
  }
  else
  {
    sub_238001DE4((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_SealedHashLedger);
  }
  v14 = *v12;
  swift_bridgeObjectRetain();
  sub_237FFD540((uint64_t)v12, type metadata accessor for Proto_SealedHashLedger);
  if (qword_2568C5040 != -1)
    swift_once();
  v15 = sub_2380BD448();
  v16 = __swift_project_value_buffer(v15, (uint64_t)qword_2568C82A8);
  v17 = sub_2380BD430();
  if (*(_QWORD *)(v14 + 16))
  {
    sub_23800DCFC(v17, v18);
    v20 = v19;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      return sub_23807A514(v16, a1 & 1, (_QWORD *)a2);
  }
  else
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = -1;
  return result;
}

uint64_t sub_2380797B8()
{
  uint64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_238075D6C(0, v2, 0);
    v3 = v12;
    v4 = (_BYTE *)(v1 + 48);
    do
    {
      v5 = *((_QWORD *)v4 - 2);
      v6 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      sub_237FFBA20(v5, v6);
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        sub_238075D6C(v8 > 1, v9 + 1, 1);
      v4 += 24;
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = v12 + 24 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v6;
      *(_BYTE *)(v10 + 48) = v7;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t static Cryptex.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  sub_237FFBA20(*(_QWORD *)a1, v3);
  sub_237FFBA20(v5, v6);
  sub_238008ED0(v2, v3);
  v9 = v8;
  sub_237FFBAB0(v5, v6);
  sub_237FFBAB0(v2, v3);
  return v9 & (v4 == v7);
}

uint64_t sub_238079940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  sub_237FFBA20(*(_QWORD *)a1, v3);
  sub_237FFBA20(v5, v6);
  sub_238008ED0(v2, v3);
  v9 = v8;
  sub_237FFBAB0(v5, v6);
  sub_237FFBAB0(v2, v3);
  return v9 & (v4 == v7);
}

uint64_t sub_2380799D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t AssociatedConformanceWitness;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89[3];
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;

  v6 = v5;
  v85 = a1;
  v86 = a2;
  v79 = a4;
  v8 = type metadata accessor for SEP.SealedHash(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v76 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v76 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v18 = *(_QWORD *)v4;
  v19 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v20 = v4[8] != 1 || a3 >> 60 == 15;
  v78 = v17;
  v83 = (uint64_t)&v76 - v16;
  if (v20)
  {
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v19)
    {
      v77 = v12;
      v81 = v8;
      v82 = v5;
      v92 = (_QWORD *)MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_238075D34(0, v19, 0);
      v22 = v18;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v80 = v22;
      v24 = (unint64_t *)(v22 + 40);
      do
      {
        v25 = *v24;
        v87 = *(v24 - 1);
        v26 = v87;
        v88 = v25;
        v90 = AssociatedTypeWitness;
        v91 = AssociatedConformanceWitness;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
        sub_237FFBA20(v26, v25);
        sub_23800915C();
        v28 = sub_2380BD82C();
        MEMORY[0x24BDAC7A8](v28);
        (*(void (**)(char *, uint64_t *, uint64_t))(v30 + 16))((char *)&v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), boxed_opaque_existential_1, AssociatedTypeWitness);
        v31 = sub_2380BD3B8();
        v33 = v32;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
        sub_237FFBAB0(v26, v25);
        v21 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_238075D34(0, v21[2] + 1, 1);
          v21 = v92;
        }
        v35 = v21[2];
        v34 = v21[3];
        if (v35 >= v34 >> 1)
        {
          sub_238075D34(v34 > 1, v35 + 1, 1);
          v21 = v92;
        }
        v24 += 3;
        v21[2] = v35 + 1;
        v36 = &v21[2 * v35];
        v36[4] = v31;
        v36[5] = v33;
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease();
      v8 = v81;
      v6 = v82;
      v12 = v77;
    }
    *v12 = 2;
    sub_2380BD9A0();
    type metadata accessor for SEP.SealedHash.Value(0);
    swift_storeEnumTagMultiPayload();
    v53 = v21[2];
    if (!v53)
    {
      sub_238008B9C();
      swift_allocError();
      *(_DWORD *)v72 = 2;
      *(_BYTE *)(v72 + 4) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_237FFD540((uint64_t)v12, type metadata accessor for SEP.SealedHash);
    }
    v15 = v12;
    swift_bridgeObjectRetain();
    v54 = v21 + 5;
    while (1)
    {
      v56 = *(v54 - 1);
      v55 = *v54;
      sub_237FFBA20(v56, *v54);
      sub_2380068C4(v56, v55);
      v58 = v57;
      v60 = v59;
      LOBYTE(v89[0]) = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v57, v59);
      if (v6)
        break;
      v54 += 2;
      sub_237FFBAB0(v58, v60);
      if (!--v53)
      {
        swift_bridgeObjectRelease_n();
        v61 = v83;
        sub_238001DE4((uint64_t)v15, v83, type metadata accessor for SEP.SealedHash);
LABEL_38:
        v75 = v78;
        sub_238001DE4(v61, v78, type metadata accessor for SEP.SealedHash);
        return sub_238001DE4(v75 + *(int *)(v8 + 20), v79, type metadata accessor for SEP.SealedHash.Value);
      }
    }
    goto LABEL_36;
  }
  v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v19)
  {
    v77 = v15;
    v81 = v8;
    v82 = v5;
    v92 = (_QWORD *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_238075D34(0, v19, 0);
    v38 = v18;
    v39 = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v80 = v38;
    v40 = (unint64_t *)(v38 + 40);
    do
    {
      v42 = *v40;
      v87 = *(v40 - 1);
      v41 = v87;
      v88 = v42;
      v90 = v39;
      v91 = AssociatedConformanceWitness;
      v43 = __swift_allocate_boxed_opaque_existential_1(v89);
      sub_237FFBA20(v41, v42);
      sub_23800915C();
      v44 = sub_2380BD82C();
      MEMORY[0x24BDAC7A8](v44);
      (*(void (**)(char *, uint64_t *, uint64_t))(v46 + 16))((char *)&v76 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0), v43, v39);
      v47 = sub_2380BD3B8();
      v49 = v48;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      sub_237FFBAB0(v41, v42);
      v37 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_238075D34(0, v37[2] + 1, 1);
        v37 = v92;
      }
      v51 = v37[2];
      v50 = v37[3];
      if (v51 >= v50 >> 1)
      {
        sub_238075D34(v50 > 1, v51 + 1, 1);
        v37 = v92;
      }
      v40 += 3;
      v37[2] = v51 + 1;
      v52 = &v37[2 * v51];
      v52[4] = v47;
      v52[5] = v49;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v8 = v81;
    v6 = v82;
    v15 = v77;
  }
  *v15 = 2;
  sub_2380BD9A0();
  type metadata accessor for SEP.SealedHash.Value(0);
  swift_storeEnumTagMultiPayload();
  v62 = v37[2];
  if (v62)
  {
    swift_bridgeObjectRetain();
    v63 = v37 + 5;
    while (1)
    {
      v65 = *(v63 - 1);
      v64 = *v63;
      sub_237FFBA20(v65, *v63);
      sub_2380068C4(v65, v64);
      v58 = v66;
      v60 = v67;
      LOBYTE(v89[0]) = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v66, v67);
      if (v6)
        break;
      v63 += 2;
      sub_237FFBAB0(v58, v60);
      if (!--v62)
      {
        swift_bridgeObjectRelease_n();
        v61 = v83;
        sub_238001DE4((uint64_t)v15, v83, type metadata accessor for SEP.SealedHash);
        if (qword_2568C4E98 != -1)
          swift_once();
        v68 = swift_bridgeObjectRetain();
        v69 = sub_23800A2B8(v68);
        v71 = v70;
        swift_bridgeObjectRelease();
        LOBYTE(v89[0]) = 6;
        SEP.SealedHash.ratchet(digest:flags:)(v69, v71);
        sub_237FFBAB0(v69, v71);
        goto LABEL_38;
      }
    }
LABEL_36:
    sub_237FFBAB0(v58, v60);
    swift_bridgeObjectRelease_n();
    return sub_237FFD540((uint64_t)v15, type metadata accessor for SEP.SealedHash);
  }
  sub_238008B9C();
  swift_allocError();
  *(_DWORD *)v74 = 2;
  *(_BYTE *)(v74 + 4) = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  return sub_237FFD540((uint64_t)v15, type metadata accessor for SEP.SealedHash);
}

uint64_t sub_23807A1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  unint64_t *v26;
  uint64_t v27;
  uint64_t v29;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66C8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_SealedHashLedger(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (unint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Proto_SealedHash(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v0 + *(int *)(v15 + 32), (uint64_t)v6, &qword_2568C6418);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    *v10 = sub_23800C00C(MEMORY[0x24BEE4AF8]);
    sub_2380BD5BC();
    sub_238005240((uint64_t)v6, &qword_2568C6418);
  }
  else
  {
    sub_238001DE4((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  }
  v16 = *v10;
  swift_bridgeObjectRetain();
  sub_237FFD540((uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  if (qword_2568C5040 != -1)
    swift_once();
  v17 = sub_2380BD448();
  __swift_project_value_buffer(v17, (uint64_t)qword_2568C82A8);
  v18 = sub_2380BD430();
  if (*(_QWORD *)(v16 + 16) && (v20 = sub_23800DCFC(v18, v19), (v21 & 1) != 0))
  {
    sub_238013570(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v12 + 72) * v20, (uint64_t)v3, type metadata accessor for Proto_SealedHash);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v3, v22, 1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v3, 1, v11) == 1)
  {
    sub_238005240((uint64_t)v3, &qword_2568C66C8);
    return 0;
  }
  sub_238001DE4((uint64_t)v3, (uint64_t)v14, type metadata accessor for Proto_SealedHash);
  v23 = *(_QWORD *)v14;
  v24 = v14[8];
  sub_237FFD540((uint64_t)v14, type metadata accessor for Proto_SealedHash);
  if (v24 != 1)
    return 0;
  if (v23)
  {
    if (v23 == 1)
    {
      v23 = sub_2380BD988();
      v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
      v26 = &qword_2568C5DA8;
      v27 = MEMORY[0x24BDC6AE8];
    }
    else
    {
      v23 = sub_2380BD9AC();
      v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20];
      v26 = &qword_2568C5898;
      v27 = MEMORY[0x24BDC6B10];
    }
    sub_238001820(v26, v25, v27);
  }
  return v23;
}

uint64_t sub_23807A514@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char v82;

  v80 = a1;
  v76 = a2;
  v75 = a3;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x24BDAC7A8](v6);
  v78 = (uint64_t *)((char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = type metadata accessor for Proto_SealedHash.Entry(0);
  v74 = *(_QWORD *)(v79 - 8);
  v8 = MEMORY[0x24BDAC7A8](v79);
  v71 = (unsigned __int8 *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v68 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8188);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v73 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v72 = (uint64_t)&v68 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66C8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Proto_SealedHashLedger(0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (unint64_t *)((char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = type metadata accessor for Proto_SealedHash(0);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v77 = (uint64_t)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC((uint64_t)v81 + *(int *)(v29 + 32), (uint64_t)v21, &qword_2568C6418);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    *v25 = sub_23800C00C(MEMORY[0x24BEE4AF8]);
    sub_2380BD5BC();
    sub_238005240((uint64_t)v21, &qword_2568C6418);
  }
  else
  {
    sub_238001DE4((uint64_t)v21, (uint64_t)v25, type metadata accessor for Proto_SealedHashLedger);
  }
  v30 = *v25;
  swift_bridgeObjectRetain();
  sub_237FFD540((uint64_t)v25, type metadata accessor for Proto_SealedHashLedger);
  v31 = sub_2380BD430();
  if (*(_QWORD *)(v30 + 16) && (v33 = sub_23800DCFC(v31, v32), (v34 & 1) != 0))
  {
    sub_238013570(*(_QWORD *)(v30 + 56) + *(_QWORD *)(v27 + 72) * v33, (uint64_t)v18, type metadata accessor for Proto_SealedHash);
    v35 = 0;
  }
  else
  {
    v35 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v18, v35, 1, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, v26) == 1)
  {
    result = sub_238005240((uint64_t)v18, &qword_2568C66C8);
    v37 = v75;
    *v75 = 0;
    *((_BYTE *)v37 + 8) = -1;
    return result;
  }
  v38 = (uint64_t)v18;
  v39 = v77;
  sub_238001DE4(v38, v77, type metadata accessor for Proto_SealedHash);
  v40 = *(_QWORD *)(v39 + 16);
  v41 = *(_QWORD *)(v40 + 16);
  if (!v41)
  {
    v81 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v62 = 1;
    v63 = v75;
    v45 = v79;
    v61 = v72;
    v60 = (uint64_t)v73;
    goto LABEL_30;
  }
  v69 = (*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  v70 = v40;
  v42 = v40 + v69;
  v43 = *(_QWORD *)(v74 + 72);
  if ((v76 & 1) != 0)
    v44 = 1;
  else
    v44 = 3;
  v76 = v44;
  swift_bridgeObjectRetain_n();
  v81 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v45 = v79;
  do
  {
    sub_238013570(v42, (uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry);
    sub_2380051FC((uint64_t)&v11[*(int *)(v45 + 24)], (uint64_t)v5, &qword_2568C56E8);
    v46 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v5, 1, v46) == 1)
    {
      sub_238005240((uint64_t)v5, &qword_2568C56E8);
LABEL_16:
      sub_237FFD540((uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry);
      goto LABEL_17;
    }
    if (swift_getEnumCaseMultiPayload())
    {
      sub_237FFD540((uint64_t)v5, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
      goto LABEL_16;
    }
    v47 = v78;
    sub_238001DE4((uint64_t)v5, (uint64_t)v78, type metadata accessor for Proto_Cryptex);
    v48 = *v47;
    v49 = v47[1];
    sub_237FFBA20(*v47, v49);
    sub_2380068C4(v48, v49);
    v51 = v50;
    v80 = v52;
    sub_237FFD540((uint64_t)v47, type metadata accessor for Proto_Cryptex);
    sub_237FFD540((uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v81 = sub_238026B28(0, v81[2] + 1, 1, v81);
    v54 = v81[2];
    v53 = v81[3];
    if (v54 >= v53 >> 1)
      v81 = sub_238026B28((_QWORD *)(v53 > 1), v54 + 1, 1, v81);
    v55 = v81;
    v81[2] = v54 + 1;
    v56 = &v55[3 * v54];
    v45 = v79;
    v57 = v80;
    v56[4] = v51;
    v56[5] = v57;
    *((_BYTE *)v56 + 48) = v76;
LABEL_17:
    v42 += v43;
    --v41;
  }
  while (v41);
  swift_bridgeObjectRelease_n();
  v58 = *(_QWORD *)(v77 + 16);
  v59 = *(_QWORD *)(v58 + 16);
  v60 = (uint64_t)v73;
  if (v59)
  {
    v61 = v72;
    sub_238013570(v58 + v69 + v43 * (v59 - 1), v72, type metadata accessor for Proto_SealedHash.Entry);
    v62 = 0;
    v63 = v75;
  }
  else
  {
    v62 = 1;
    v63 = v75;
    v61 = v72;
  }
LABEL_30:
  v64 = v74;
  v65 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v61, v62, 1, v45);
  sub_2380051FC(v61, v60, &qword_2568C8188);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v60, 1, v45) != 1)
  {
    v66 = v60;
    v67 = v71;
    sub_238001DE4(v66, (uint64_t)v71, type metadata accessor for Proto_SealedHash.Entry);
    sub_23807AC00(v67, &v82);
    sub_237FFD540((uint64_t)v67, type metadata accessor for Proto_SealedHash.Entry);
    v65 = (v82 & 1) == 0;
  }
  sub_238005240(v61, &qword_2568C8188);
  result = sub_237FFD540(v77, type metadata accessor for Proto_SealedHash);
  *v63 = v81;
  *((_BYTE *)v63 + 8) = !v65;
  return result;
}

uint64_t sub_23807AC00@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int EnumCaseMultiPayload;
  int v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_SealedHash.Entry(0);
  sub_2380051FC((uint64_t)&a1[*(int *)(v7 + 24)], (uint64_t)v6, &qword_2568C56E8);
  v8 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    result = sub_238005240((uint64_t)v6, &qword_2568C56E8);
LABEL_5:
    v11 = (*a1 >> 2) & 1;
    goto LABEL_6;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = sub_237FFD540((uint64_t)v6, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  if (EnumCaseMultiPayload != 1)
    goto LABEL_5;
  LOBYTE(v11) = 1;
LABEL_6:
  *a2 = v11;
  return result;
}

uint64_t _s16CloudAttestation9CryptexesO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    return v4 & 1;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_238001F88(v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t destroy for Image4Manifest(uint64_t a1)
{
  return sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t _s16CloudAttestation14Image4ManifestVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for Image4Manifest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_237FFBA20(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_237FFBAB0(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for Image4Manifest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image4Manifest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Image4Manifest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Cryptex()
{
  return &type metadata for Cryptex;
}

uint64_t initializeBufferWithCopyOfBuffer for Cryptexes(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Cryptexes(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Cryptexes(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Cryptexes(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Cryptexes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23807B03C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_23807B044(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Cryptexes()
{
  return &type metadata for Cryptexes;
}

CFTypeRef sub_23807B064()
{
  uint64_t v0;
  io_registry_entry_t v1;
  __CFString *v2;
  CFTypeRef CFProperty;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = (__CFString *)sub_2380BDCF4();
  CFProperty = IORegistryEntryCreateCFProperty(v1, v2, (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);

  if (CFProperty)
  {
    if (swift_dynamicCast())
      __asm { BR              X10 }
    return 0;
  }
  return CFProperty;
}

uint64_t sub_23807B270()
{
  uint64_t v0;
  io_registry_entry_t v1;
  __CFString *v2;
  CFTypeRef CFProperty;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = (__CFString *)sub_2380BDCF4();
  CFProperty = IORegistryEntryCreateCFProperty(v1, v2, (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);

  if (CFProperty)
  {
    if (swift_dynamicCast())
      __asm { BR              X10 }
    LODWORD(CFProperty) = 0;
  }
  return CFProperty | 0x100000000;
}

uint64_t EnsembleValidator.policyFor(udid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(a1, a2, 0, a3);
}

uint64_t sub_23807B494()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9F40);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9F40);
  return sub_2380BD7FC();
}

uint64_t sub_23807B514()
{
  uint64_t result;

  result = SecKeyCopySystemKey();
  qword_2568C9F58 = result;
  return result;
}

uint64_t EnsembleValidator.roots.getter()
{
  type metadata accessor for EnsembleValidator();
  return swift_bridgeObjectRetain();
}

uint64_t EnsembleValidator.roots.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for EnsembleValidator() + 48);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*EnsembleValidator.roots.modify())()
{
  type metadata accessor for EnsembleValidator();
  return nullsub_1;
}

uint64_t EnsembleValidator.clock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EnsembleValidator();
  return sub_2380051FC(v1 + *(int *)(v3 + 52), a1, &qword_2542C9C00);
}

uint64_t EnsembleValidator.clock.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for EnsembleValidator() + 52);
  return sub_23801776C(a1, v3);
}

uint64_t (*EnsembleValidator.clock.modify())()
{
  type metadata accessor for EnsembleValidator();
  return nullsub_1;
}

uint64_t EnsembleValidator.strictCertificateValidation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EnsembleValidator() + 56));
}

uint64_t EnsembleValidator.strictCertificateValidation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EnsembleValidator();
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*EnsembleValidator.strictCertificateValidation.modify())()
{
  type metadata accessor for EnsembleValidator();
  return nullsub_1;
}

uint64_t EnsembleValidator.requireProdTrustAnchors.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EnsembleValidator() + 60));
}

uint64_t EnsembleValidator.requireProdTrustAnchors.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EnsembleValidator();
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*EnsembleValidator.requireProdTrustAnchors.modify())()
{
  type metadata accessor for EnsembleValidator();
  return nullsub_1;
}

uint64_t EnsembleValidator.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = type metadata accessor for EnsembleValidator();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(v4 + 52);
  v8 = sub_2380BD418();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_23809227C((uint64_t)v6);
  result = sub_238005240(v7, &qword_2542C9C00);
  if (!v1)
    return sub_238001DE4((uint64_t)v6, a1, (uint64_t (*)(_QWORD))type metadata accessor for EnsembleValidator);
  return result;
}

void EnsembleValidator.init<A>(assetProvider:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  int *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  void *v82;
  uint64_t *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint8_t *v89;
  _QWORD v90[2];
  char v91;
  char v92;
  char v93;
  int v94;
  NSObject *v95;

  v9 = (int *)type metadata accessor for EnsembleValidator();
  v10 = a4 + v9[13];
  v11 = sub_2380BD418();
  v12 = *(uint64_t (**)(void))(*(_QWORD *)(v11 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  v95 = v9[12];
  *(Class *)((char *)&v95->isa + a4) = (Class)MEMORY[0x24BEE4AF8];
  sub_238005240(v10, &qword_2542C9C00);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  v13 = sub_23807C028((uint64_t)v90);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
LABEL_4:
    swift_bridgeObjectRelease();
    sub_238005240(v10, &qword_2542C9C00);
    return;
  }
  v88 = v12;
  v89 = (uint8_t *)v10;
  v14 = v90[1];
  v15 = v91;
  v16 = v92;
  v17 = v93;
  v18 = v94;
  v19 = a4 + v9[5];
  *(_DWORD *)v19 = v90[0];
  *(_QWORD *)(v19 + 8) = v14;
  *(_BYTE *)(v19 + 16) = v15;
  *(_BYTE *)(v19 + 17) = v16;
  *(_BYTE *)(v19 + 18) = v17;
  *(_DWORD *)(v19 + 20) = v18;
  *(_DWORD *)(a4 + v9[6]) = v13;
  v20 = type metadata accessor for Release();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Release.local<A>(assetProvider:)(a2, a3, (uint64_t)v22);
  v86 = a2;
  v87 = a1;
  v85 = v9;
  sub_238001DE4((uint64_t)v22, a4, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  sub_23807C39C(v90);
  if (LOBYTE(v90[0]))
    v24 = 2;
  else
    v24 = 1;
  v25 = v85;
  *(_BYTE *)(a4 + v85[7]) = v24;
  if (BYTE1(v90[0]))
    v26 = 2;
  else
    v26 = 1;
  *(_BYTE *)(a4 + v25[8]) = v26;
  if (BYTE2(v90[0]))
    v27 = 2;
  else
    v27 = 1;
  *(_BYTE *)(a4 + v25[9]) = v27;
  *(_BYTE *)(a4 + v25[10]) = v23 & 1;
  v28 = (*(uint64_t (**)(void))(a3 + 16))();
  v10 = (uint64_t)v89;
  v29 = v28;
  v82 = 0;
  *(_BYTE *)(a4 + v25[14]) = *(_QWORD *)(v28 + 16) != 0;
  v30 = type metadata accessor for X509Policy();
  v83 = &v70;
  v31 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v78 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  v84 = (uint64_t)&v70 - v78;
  v81 = v29;
  if (qword_2568C5090 != -1)
    swift_once();
  v76 = qword_2568C9FE0;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  v80 = &v70;
  v34 = *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64);
  MEMORY[0x24BDAC7A8](v33);
  v71 = (char *)((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = (char *)((char *)&v70 - v71);
  v72 = (char *)&v70 - v71;
  v36 = v88;
  ((void (*)(int64_t, uint64_t, uint64_t, uint64_t))v88)((char *)&v70 - v71, 1, 1, v11);
  v37 = v84;
  v77 = v84 + *(int *)(v31 + 24);
  v38 = v36();
  v79 = &v70;
  v39 = (uint64_t *)(v37 + *(int *)(v31 + 28));
  v75 = v39;
  *v39 = 0;
  v39[1] = 0;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v41 = v78;
  v73 = (uint64_t)&v70 - v78;
  v74 = &v70;
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)((char *)&v70 - v71);
  v43 = sub_2380051FC((uint64_t)v35, (char *)&v70 - v71, &qword_2542C9C00);
  v71 = (char *)&v70;
  MEMORY[0x24BDAC7A8](v43);
  v44 = (char *)&v70 - v41;
  v45 = (char *)&v70 + *(int *)(v31 + 24) - v41;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v36)(v45, 1, 1, v11);
  v46 = (uint64_t *)&v44[*(int *)(v31 + 28)];
  *v46 = 0;
  v46[1] = 0;
  *v44 = 1;
  *((_QWORD *)v44 + 1) = v76;
  swift_bridgeObjectRetain();
  sub_23801776C((uint64_t)v42, (uint64_t)v45);
  sub_23801B358(*v46);
  *v46 = 0;
  v46[1] = 0;
  v47 = v73;
  sub_238001DE4((uint64_t)v44, v73, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  sub_238005240(v72, &qword_2542C9C00);
  sub_238005240(v77, &qword_2542C9C00);
  sub_23801B358(*v75);
  v48 = v47;
  v49 = v84;
  sub_238001DE4(v48, v84, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v50 = v82;
  sub_23809839C(v81);
  v51 = v50;
  if (v50)
  {

    v51 = 0;
  }
  sub_237FFD540(v49, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  swift_bridgeObjectRelease();
  v52 = v85;
  v53 = v86;
  *(_BYTE *)(a4 + v85[15]) = v50 == 0;
  v54 = v87;
  if (MEMORY[0x24BDE8348])
    v55 = MEMORY[0x24BDE8358] == 0;
  else
    v55 = 1;
  if (v55
    || MEMORY[0x24BDE8360] == 0
    || MEMORY[0x24BDE8338] == 0
    || MEMORY[0x24BDE8350] == 0
    || MEMORY[0x24BDE8340] == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v87, v53);
    goto LABEL_37;
  }
  sub_2380BD4E4();
  v60 = sub_2380BD4CC();
  if (v51)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v54, v53);
    sub_237FFD540(a4, (uint64_t (*)(_QWORD))type metadata accessor for Release);
    goto LABEL_4;
  }
  v61 = (void *)v60;
  v62 = sub_2380BD4D8();
  switch(v62)
  {
    case 2:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v54, v53);

      v63 = v52[11];
      v64 = 1;
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v54, v53);

      v63 = v52[11];
      v64 = 2;
      break;
    case 0:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v54, v53);

      *(_BYTE *)(a4 + v52[11]) = 0;
      return;
    default:
      if (qword_2568C5030 != -1)
        swift_once();
      v65 = sub_2380BD808();
      __swift_project_value_buffer(v65, (uint64_t)qword_2568C9F40);
      v66 = v61;
      v67 = sub_2380BD7F0();
      v68 = sub_2380BDF64();
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc();
        v95 = v67;
        *(_DWORD *)v69 = 134349056;
        v89 = v69 + 4;
        sub_2380BD4D8();
        v90[0] = sub_2380BD4F0();
        v67 = v95;
        sub_2380BDF94();

        _os_log_impl(&dword_237FF6000, v67, v68, "Unknown config security policy %{public}ld, defaulting to customer", v69, 0xCu);
        MEMORY[0x23B82B830](v69, -1, -1);
      }
      else
      {

      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v87, v53);
LABEL_37:
      *(_BYTE *)(a4 + v52[11]) = 2;
      return;
  }
  *(_BYTE *)(a4 + v63) = v64;
}

uint64_t sub_23807C028(uint64_t a1)
{
  unint64_t v2;
  uint64_t inited;
  mach_port_t v4;
  __CFString *v5;
  io_registry_entry_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  CFTypeRef v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;

  v2 = 0xD000000000000014;
  type metadata accessor for IORegistryEntry();
  inited = swift_initStackObject();
  v4 = *MEMORY[0x24BDD8B18];
  v5 = (__CFString *)sub_2380BDCF4();
  v6 = IORegistryEntryCopyFromPath(v4, v5);

  *(_DWORD *)(inited + 16) = v6;
  if (!v6)
  {
    swift_setDeallocating();
    IOObjectRelease(0);
    sub_23807EEEC();
    swift_allocError();
    *v20 = 0;
    swift_willThrow();
    return v2;
  }
  v7 = sub_23807B270();
  if ((v7 & 0x100000000) != 0)
    goto LABEL_11;
  v8 = v7;
  if ((v7 & 0xFFFFFF00) == 0)
  {
    if (v7 <= 3u)
    {
      v9 = sub_23807B270();
      if ((v9 & 0x100000000) != 0)
      {
        sub_23807EEEC();
        swift_allocError();
        v19 = 2;
      }
      else
      {
        v10 = v9;
        v11 = sub_23807B270();
        if ((v11 & 0x100000000) != 0)
        {
          sub_23807EEEC();
          swift_allocError();
          v19 = 3;
        }
        else
        {
          v12 = v11;
          v13 = sub_23807B064();
          if ((v14 & 1) != 0)
          {
            sub_23807EEEC();
            swift_allocError();
            v19 = 6;
          }
          else
          {
            v2 = (unint64_t)v13;
            v15 = sub_23807B270();
            if ((v15 & 0x100000000) != 0)
            {
              sub_23807EEEC();
              swift_allocError();
              v19 = 5;
            }
            else
            {
              v16 = v15;
              v22 = v2;
              v17 = sub_23807B270();
              if ((v17 & 0x100000000) == 0)
              {
                v2 = v17;
                swift_setDeallocating();
                IOObjectRelease(v6);
                *(_DWORD *)a1 = v16;
                *(_QWORD *)(a1 + 8) = v22;
                *(_BYTE *)(a1 + 16) = v12 == 1;
                *(_BYTE *)(a1 + 17) = v10 == 1;
                *(_BYTE *)(a1 + 18) = v8;
                *(_DWORD *)(a1 + 20) = 0;
                return v2;
              }
              sub_23807EEEC();
              swift_allocError();
              v19 = 4;
            }
          }
        }
      }
LABEL_12:
      *v18 = v19;
      swift_willThrow();
      swift_setDeallocating();
      IOObjectRelease(v6);
      return v2;
    }
LABEL_11:
    sub_23807EEEC();
    swift_allocError();
    v19 = 1;
    goto LABEL_12;
  }
  result = sub_2380BE0CC();
  __break(1u);
  return result;
}

void sub_23807C39C(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __SecKey *v10;
  SecKeyRef v11;
  SecKeyRef v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t Attestation;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __SecKey *v24;
  uint64_t v25;
  __SecKey *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __SecKey *v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _WORD v55[11];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v3 = sub_2380BD448();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66F0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2568C5038 != -1)
    swift_once();
  if (!qword_2568C9F58)
  {
    sub_23807EEEC();
    swift_allocError();
    *v14 = 11;
    swift_willThrow();
    return;
  }
  v10 = (__SecKey *)(id)qword_2568C9F58;
  v11 = SecKeyCopyPublicKey(v10);
  if (!v11)
  {
    sub_23807EEEC();
    swift_allocError();
    *v15 = 11;
    swift_willThrow();
LABEL_13:

    return;
  }
  v12 = v11;
  sub_23809318C();
  if (v1)
  {

    return;
  }
  v49 = a1;
  v50 = v13;
  v56 = 0;
  Attestation = SecKeyCreateAttestation();
  if (Attestation
    && (v17 = (void *)Attestation,
        v51 = xmmword_2380BF8E0,
        sub_2380BD370(),
        v17,
        v18 = *((_QWORD *)&v51 + 1),
        *((_QWORD *)&v51 + 1) >> 60 != 15))
  {
    v23 = v51;
    sub_238009148(v51, *((unint64_t *)&v51 + 1));
    v24 = v12;
    v25 = v23;
    v26 = v24;
    SEP.Attestation.init(from:signer:)(v25, v18, v24);
    v46 = v26;
    v47 = v18;
    v48 = v25;
    v27 = v51;
    v44 = *((_QWORD *)&v52 + 1);
    v28 = v52;
    if (qword_2568C4EA8 != -1)
      swift_once();
    v29 = __swift_project_value_buffer(v3, (uint64_t)qword_2568C9B98);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v29, v3);
    v43 = (uint64_t)&v43;
    v54 = 0u;
    memset(v55, 0, sizeof(v55));
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    MEMORY[0x24BDAC7A8](v30);
    *(&v43 - 2) = (uint64_t)v6;
    *(&v43 - 1) = (uint64_t)&v51;
    v45 = v27;
    v31 = v28;
    v32 = v44;
    sub_238034118((uint64_t)sub_238036830, (uint64_t)(&v43 - 4), v27, *((uint64_t *)&v27 + 1), v31, v44);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v33 = type metadata accessor for SEP.SealedHash(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v9, 1, v33) == 1)
      sub_238005240((uint64_t)v9, &qword_2568C66F0);
    else
      sub_237FFD540((uint64_t)v9, type metadata accessor for SEP.SealedHash);
    v34 = v45;
    sub_237FFBA20(v45, *((unint64_t *)&v27 + 1));
    sub_237FFBA20(v27, v32);
    sub_2380346E0(v34, *((uint64_t *)&v27 + 1), v27, v32);
    v36 = v35;
    sub_237FFBAB0(v34, *((unint64_t *)&v27 + 1));
    sub_237FFBAB0(v27, v32);
    LODWORD(v44) = v36 & 1;
    sub_237FFBA20(v34, *((unint64_t *)&v27 + 1));
    sub_237FFBA20(v27, v32);
    sub_23803472C(v34, *((uint64_t *)&v27 + 1), v27, v32);
    v38 = v37;
    sub_237FFBAB0(v34, *((unint64_t *)&v27 + 1));
    sub_237FFBAB0(v27, v32);
    LODWORD(v43) = v38 & 1;
    sub_237FFBA20(v34, *((unint64_t *)&v27 + 1));
    sub_237FFBA20(v27, v32);
    sub_238034954(v34, *((uint64_t *)&v27 + 1), v27, v32);
    v40 = v39;
    v41 = v39;
    sub_237FFBAB0(v34, *((unint64_t *)&v27 + 1));
    sub_237FFBAB0(v27, v32);

    sub_238008CF0(v48, v47);
    sub_237FFBAB0(v34, *((unint64_t *)&v27 + 1));
    sub_237FFBAB0(v27, v32);
    v42 = v49;
    *v49 = v44;
    v42[1] = v43;
    v42[2] = (v41 == 2) | v40 & 1;
  }
  else
  {
    v19 = v56;
    if (v56)
    {
      type metadata accessor for CFError(0);
      sub_238001820((unint64_t *)&qword_2568C6378, (uint64_t (*)(uint64_t))type metadata accessor for CFError, MEMORY[0x24BDCFD90]);
      v20 = swift_allocError();
      *v21 = v19;
      sub_23807EEEC();
      swift_allocError();
      *v22 = v20;
      swift_willThrow();

      goto LABEL_13;
    }
    __break(1u);
  }
}

uint64_t EnsembleValidator.defaultPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  return _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(0, 0, 0, a1);
}

uint64_t _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  int *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[3];
  __int16 v104;
  char v105;
  _BYTE v106[4];
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  id v114;
  uint64_t (*v115)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v116;
  _QWORD v117[11];

  v5 = v4;
  v87 = a3;
  v89 = a2;
  v88 = a1;
  v94 = a4;
  v6 = type metadata accessor for SoftwareReleasePolicy();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v97 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v93 = (uint64_t)&v81 - v9;
  v90 = type metadata accessor for KeyOptionsPolicy(0);
  v10 = MEMORY[0x24BDAC7A8](v90);
  v96 = (uint64_t)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v92 = (char *)&v81 - v12;
  v13 = type metadata accessor for SecureConfigPolicy(0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v95 = (uint64_t)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v91 = (char *)&v81 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8278);
  MEMORY[0x24BDAC7A8](v17);
  v85 = (uint64_t)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8280);
  v19 = MEMORY[0x24BDAC7A8](v82);
  v83 = (uint64_t)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v84 = (uint64_t)&v81 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v81 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5E78);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v100 = (uint64_t)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v101 = (uint64_t)&v81 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for X509Policy();
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v81 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v81 - v36;
  v38 = (int *)type metadata accessor for EnsembleValidator();
  v86 = v38[14];
  v39 = *(_BYTE *)(v4 + v86);
  v40 = sub_23807D584();
  sub_2380051FC(v5 + v38[13], (uint64_t)v31, &qword_2542C9C00);
  v41 = (uint64_t)&v35[*(int *)(v32 + 24)];
  v42 = sub_2380BD418();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v43 = (uint64_t *)&v35[*(int *)(v32 + 28)];
  *v43 = 0;
  v43[1] = 0;
  *v35 = v39;
  *((_QWORD *)v35 + 1) = v40;
  sub_23801776C((uint64_t)v31, v41);
  sub_23801B358(*v43);
  *v43 = 0;
  v43[1] = 0;
  v99 = v35;
  v44 = (uint64_t)v35;
  v45 = v87;
  v98 = v37;
  sub_238001DE4(v44, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  if (v45)
  {
    swift_bridgeObjectRetain();
    sub_2380BD7FC();
    v46 = sub_23802FDA4(v45);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v24[*(int *)(v82 + 36)] = v46;
    v47 = v84;
    sub_2380051FC((uint64_t)v24, v84, &qword_2568C8280);
    v48 = v83;
    sub_2380051FC(v47, v83, &qword_2568C8280);
    v49 = v48;
    v50 = v85;
    sub_23800ED20(v49, v85, &qword_2568C8280);
    sub_238005240((uint64_t)v24, &qword_2568C8280);
    sub_238005240(v47, &qword_2568C8280);
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8288);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
    sub_23800ED20(v50, v101, &qword_2568C8278);
  }
  else
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8288);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v101, 1, 1, v52);
  }
  if ((*(_BYTE *)(v5 + v86) & 1) != 0)
  {
    v87 = 0;
  }
  else
  {
    if (qword_2568C50A8 != -1)
      swift_once();
    v53 = sub_2380BD808();
    __swift_project_value_buffer(v53, (uint64_t)qword_2568C8C58);
    v54 = sub_2380BD7F0();
    v55 = sub_2380BDF64();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_237FF6000, v54, v55, "Using Insecure SEPAttestationPolicy", v56, 2u);
      MEMORY[0x23B82B830](v56, -1, -1);
    }

    v87 = 1;
  }
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = v88;
  *(_QWORD *)(v57 + 24) = v89;
  swift_bridgeObjectRetain();
  sub_23801B358(0);
  LODWORD(v89) = *(unsigned __int8 *)(v5 + v38[10]);
  v58 = type metadata accessor for SEP.SealedHash(0);
  v59 = (uint64_t)v91;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v91, 1, 1, v58);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DD0);
  sub_2380BD49C();
  v60 = (uint64_t (*)(uint64_t))MEMORY[0x24BE07858];
  v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_2380BEAF0;
  sub_2380BD484();
  sub_2380BD478();
  v117[0] = v61;
  sub_238001820(&qword_2568C5DD8, v60, MEMORY[0x24BE07870]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DE0);
  sub_23807EF6C();
  v62 = (uint64_t)v92;
  sub_2380BE00C();
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  v63 = v62 + *(int *)(v90 + 20);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 1, 1, v64);
  v65 = v93;
  sub_238013570(v5, v93, (uint64_t (*)(_QWORD))type metadata accessor for Release);
  v66 = v38[6];
  v67 = v5 + v38[5];
  LODWORD(v84) = *(unsigned __int8 *)(v67 + 16);
  LODWORD(v85) = *(unsigned __int8 *)(v67 + 17);
  LODWORD(v86) = *(unsigned __int8 *)(v67 + 18);
  LODWORD(v88) = *(_DWORD *)v67;
  LODWORD(v90) = *(_DWORD *)(v5 + v66);
  LOBYTE(v66) = *(_BYTE *)(v5 + v38[8]);
  v68 = *(_BYTE *)(v5 + v38[9]);
  LODWORD(v83) = 0x10002u >> (8 * *(_BYTE *)(v5 + v38[7]));
  v69 = 0x10002u >> (8 * v66);
  LODWORD(v82) = 0x10002u >> (8 * v68);
  v70 = *(_BYTE *)(v5 + v38[11]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8168);
  v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_2380BEAC0;
  *(_BYTE *)(v71 + 32) = v70;
  v72 = (uint64_t)v99;
  sub_238013570((uint64_t)v98, (uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  v117[0] = v72;
  v73 = v100;
  sub_2380051FC(v101, v100, &qword_2568C5E78);
  v74 = (void *)v87;
  v114 = (id)v87;
  v115 = sub_23807EF54;
  v116 = v57;
  v117[1] = v73;
  v117[2] = &v114;
  v113 = xmmword_2380BF8E0;
  v111 = 0;
  v112 = v89;
  v117[3] = &v113;
  v117[4] = &v111;
  v75 = v59;
  v76 = v95;
  sub_238013570(v59, v95, type metadata accessor for SecureConfigPolicy);
  v117[5] = v76;
  v77 = v96;
  sub_238013570(v62, v96, type metadata accessor for KeyOptionsPolicy);
  v117[6] = v77;
  v78 = v97;
  sub_238013570(v65, v97, (uint64_t (*)(_QWORD))type metadata accessor for SoftwareReleasePolicy);
  v106[0] = v84;
  v106[1] = v85;
  v106[2] = v86;
  v107 = v88;
  v108 = v90;
  v109 = 2;
  v110 = 0;
  v117[7] = v78;
  v117[8] = v106;
  v103[0] = v83;
  v103[1] = v69;
  v103[2] = v82;
  v105 = 0;
  v104 = 2;
  v102 = v71;
  v117[9] = v103;
  v117[10] = &v102;
  sub_238019380((uint64_t)v117, v94);
  sub_23801B63C(v74);
  sub_23801B64C((uint64_t)sub_23807EF54);
  sub_237FFD540(v65, (uint64_t (*)(_QWORD))type metadata accessor for SoftwareReleasePolicy);
  sub_237FFD540(v62, type metadata accessor for KeyOptionsPolicy);
  sub_237FFD540(v75, type metadata accessor for SecureConfigPolicy);
  sub_23801B65C(v74);
  sub_23801B358((uint64_t)sub_23807EF54);
  sub_238005240(v101, &qword_2568C5E78);
  sub_237FFD540((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
  swift_bridgeObjectRelease();
  sub_237FFD540(v78, (uint64_t (*)(_QWORD))type metadata accessor for SoftwareReleasePolicy);
  sub_237FFD540(v77, type metadata accessor for KeyOptionsPolicy);
  sub_237FFD540(v76, type metadata accessor for SecureConfigPolicy);
  swift_bridgeObjectRelease();
  sub_238008CF0(v113, *((unint64_t *)&v113 + 1));
  v79 = (uint64_t)v115;
  sub_23801B65C(v114);
  sub_23801B358(v79);
  sub_238005240(v100, &qword_2568C5E78);
  return sub_237FFD540((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for X509Policy);
}

uint64_t type metadata accessor for EnsembleValidator()
{
  uint64_t result;

  result = qword_2568C8210;
  if (!qword_2568C8210)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t EnsembleValidator.policyFor(identity:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2380BEAF0;
  v6 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v5 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v5 + 64) = v6;
  v7 = MEMORY[0x24BEE4568];
  *(_DWORD *)(v5 + 32) = v3;
  v8 = MEMORY[0x24BEE45B8];
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = v8;
  *(_QWORD *)(v5 + 72) = v4;
  v9 = sub_2380BDD30();
  _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(v9, v10, 0, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23807D584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = type metadata accessor for EnsembleValidator();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 60)) == 1)
  {
    if (qword_2568C5090 != -1)
      swift_once();
    return swift_bridgeObjectRetain();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + *(int *)(v1 + 48));
    if (qword_2568C5090 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    v4 = swift_bridgeObjectRetain();
    sub_23802E770(v4);
    if (qword_2568C5088 != -1)
      swift_once();
    v5 = swift_bridgeObjectRetain();
    sub_23802E770(v5);
    return v3;
  }
}

uint64_t sub_23807D698@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  NSObject *v48;
  NSObject *log;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v4 = a4;
  v56 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = *a1;
    v6 = a1[1];
    v9 = a1[2];
    v8 = a1[3];
    v52 = 0;
    swift_bridgeObjectRetain();
    sub_237FFBA20(v7, v6);
    sub_237FFBA20(v9, v8);
    sub_238033F18(v7, v6, v9, v8);
    sub_237FFBAB0(v7, v6);
    sub_237FFBAB0(v9, v8);
    if (v55 == 2)
    {
LABEL_3:
      if (qword_2568C5030 != -1)
        swift_once();
      v10 = sub_2380BD808();
      __swift_project_value_buffer(v10, (uint64_t)qword_2568C9F40);
      sub_237FFBA20(v7, v6);
      sub_237FFBA20(v9, v8);
      swift_bridgeObjectRetain();
      sub_237FFBA20(v7, v6);
      sub_237FFBA20(v9, v8);
      v11 = sub_2380BD7F0();
      v12 = sub_2380BDF64();
      if (os_log_type_enabled(v11, v12))
      {
        v47 = v12;
        log = v11;
        v13 = swift_slowAlloc();
        v45 = swift_slowAlloc();
        v52 = v45;
        *(_DWORD *)v13 = 136446466;
        sub_237FFBA20(v7, v6);
        sub_237FFBA20(v9, v8);
        sub_238033F18(v7, v6, v9, v8);
        sub_237FFBAB0(v7, v6);
        sub_237FFBAB0(v9, v8);
        if (v55 == 2)
        {
          v14 = 0x6E776F6E6B6E753CLL;
          v15 = 0xE90000000000003ELL;
        }
        else
        {
          v32 = v53;
          v31 = v54;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
          v33 = swift_allocObject();
          *(_OWORD *)(v33 + 16) = xmmword_2380BEAF0;
          v34 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v33 + 64) = v34;
          v35 = MEMORY[0x24BEE4568];
          *(_DWORD *)(v33 + 32) = v32;
          v36 = MEMORY[0x24BEE45B8];
          *(_QWORD *)(v33 + 96) = v35;
          *(_QWORD *)(v33 + 104) = v36;
          *(_QWORD *)(v33 + 72) = v31;
          v14 = sub_2380BDD30();
          v15 = v37;
        }
        v53 = sub_238013968(v14, v15, &v52);
        sub_2380BDF94();
        swift_bridgeObjectRelease();
        sub_237FFBAB0(v7, v6);
        sub_237FFBAB0(v9, v8);
        sub_237FFBAB0(v7, v6);
        sub_237FFBAB0(v9, v8);
        *(_WORD *)(v13 + 12) = 2082;
        swift_bridgeObjectRetain();
        v53 = sub_238013968(a2, a3, &v52);
        sub_2380BDF94();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237FF6000, log, v47, "Attestation udid %{public}s does not match %{public}s", (uint8_t *)v13, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B82B830](v45, -1, -1);
        MEMORY[0x23B82B830](v13, -1, -1);

        v16 = 0;
      }
      else
      {
        sub_237FFBAB0(v7, v6);
        sub_237FFBAB0(v9, v8);
        sub_237FFBAB0(v7, v6);
        sub_237FFBAB0(v9, v8);

        swift_bridgeObjectRelease_n();
        v16 = 0;
      }
LABEL_24:
      v4 = a4;
      goto LABEL_25;
    }
    v18 = v53;
    v17 = v54;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2380BEAF0;
    v20 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v19 + 64) = v20;
    v21 = MEMORY[0x24BEE4568];
    *(_DWORD *)(v19 + 32) = v18;
    v22 = MEMORY[0x24BEE45B8];
    *(_QWORD *)(v19 + 96) = v21;
    *(_QWORD *)(v19 + 104) = v22;
    *(_QWORD *)(v19 + 72) = v17;
    if (sub_2380BDD30() == a2 && v23 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v24 = sub_2380BE1B0();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
        goto LABEL_3;
    }
    if (qword_2568C5030 != -1)
      swift_once();
    v25 = sub_2380BD808();
    __swift_project_value_buffer(v25, (uint64_t)qword_2568C9F40);
    sub_237FFBA20(v7, v6);
    sub_237FFBA20(v9, v8);
    swift_bridgeObjectRetain();
    sub_237FFBA20(v7, v6);
    sub_237FFBA20(v9, v8);
    v26 = sub_2380BD7F0();
    v27 = sub_2380BDF70();
    if (os_log_type_enabled(v26, v27))
    {
      v46 = v27;
      v48 = v26;
      v28 = swift_slowAlloc();
      v44 = swift_slowAlloc();
      v52 = v44;
      *(_DWORD *)v28 = 136446466;
      sub_237FFBA20(v7, v6);
      sub_237FFBA20(v9, v8);
      sub_238033F18(v7, v6, v9, v8);
      sub_237FFBAB0(v7, v6);
      sub_237FFBAB0(v9, v8);
      if (v55 == 2)
      {
        v29 = 0x6E776F6E6B6E753CLL;
        v30 = 0xE90000000000003ELL;
      }
      else
      {
        v38 = v28;
        v40 = v53;
        v39 = v54;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5C40);
        v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_2380BEAF0;
        *(_QWORD *)(v41 + 56) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v41 + 64) = MEMORY[0x24BEE4558];
        *(_DWORD *)(v41 + 32) = v40;
        *(_QWORD *)(v41 + 96) = MEMORY[0x24BEE4568];
        *(_QWORD *)(v41 + 104) = v22;
        *(_QWORD *)(v41 + 72) = v39;
        v28 = v38;
        v29 = sub_2380BDD30();
        v30 = v42;
      }
      v53 = sub_238013968(v29, v30, &v52);
      sub_2380BDF94();
      swift_bridgeObjectRelease();
      sub_237FFBAB0(v7, v6);
      sub_237FFBAB0(v9, v8);
      sub_237FFBAB0(v7, v6);
      sub_237FFBAB0(v9, v8);
      *(_WORD *)(v28 + 12) = 2082;
      swift_bridgeObjectRetain();
      v53 = sub_238013968(a2, a3, &v52);
      sub_2380BDF94();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237FF6000, v48, v46, "Attestation udid %{public}s matches %{public}s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B82B830](v44, -1, -1);
      MEMORY[0x23B82B830](v28, -1, -1);

      v16 = 1;
    }
    else
    {
      sub_237FFBAB0(v7, v6);
      sub_237FFBAB0(v9, v8);
      sub_237FFBAB0(v7, v6);
      sub_237FFBAB0(v9, v8);

      swift_bridgeObjectRelease_n();
      v16 = 1;
    }
    goto LABEL_24;
  }
  v16 = 2;
LABEL_25:
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8290);
  *(_QWORD *)(v4 + 24) = result;
  *(_QWORD *)(v4 + 32) = &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
  *(_BYTE *)v4 = v16;
  return result;
}

uint64_t sub_23807DF08@<X0>(uint64_t a1@<X8>)
{
  return _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(0, 0, 0, a1);
}

uint64_t sub_23807DF18()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for EnsembleValidator(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2380BDA60();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for Release();
    *(_QWORD *)((char *)a1 + *(int *)(v8 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 20));
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_DWORD *)((char *)a1 + v10) = *(_DWORD *)((char *)a2 + v10);
    v13 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
    v16 = a3[13];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_2380BD418();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v24 = a3[15];
    *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *((_BYTE *)a1 + v24) = *((_BYTE *)a2 + v24);
  }
  return a1;
}

uint64_t destroy for EnsembleValidator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 52);
  v6 = sub_2380BD418();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t initializeWithCopy for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[13];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_2380BD418();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20(v17, 1, v18))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v22 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t assignWithCopy for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  *(_BYTE *)(v9 + 18) = *(_BYTE *)(v10 + 18);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v10 + 20);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[13];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = sub_2380BD418();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t initializeWithTake for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[13];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_2380BD418();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  return a1;
}

uint64_t assignWithTake for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_2380BDA60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for Release();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  *(_BYTE *)(v10 + 18) = *(_BYTE *)(v11 + 18);
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v11 + 20);
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_bridgeObjectRelease();
  v15 = a3[13];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = sub_2380BD418();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  v24 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleValidator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23807E878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for Release();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    v10 = a1 + *(int *)(a3 + 52);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 48));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for EnsembleValidator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23807E930(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for Release();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 48)) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542C9C00);
    v12 = a1 + *(int *)(a4 + 52);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23807E9D8()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Release();
  if (v0 <= 0x3F)
  {
    sub_23801C9D0();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void **assignWithCopy for EnsembleValidator.Error(void **a1, void **a2)
{
  void *v3;
  int v4;
  unsigned int v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v10;
  id v12;
  void *v13;

  v3 = *a1;
  if ((unint64_t)v3 >= 0xFFFFFFFF)
    v4 = -1;
  else
    v4 = (int)v3;
  v5 = v4 + 1;
  v6 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  else
    v7 = *a2;
  v8 = (_DWORD)v7 + 1;
  if (v5 > 0xB)
  {
    if (v8 > 0xB || (_DWORD)v7 != -1)
      goto LABEL_17;
    goto LABEL_14;
  }
  if (v8 > 0xB)
  {
    if (!v5)
    {

      v6 = *a2;
    }
    goto LABEL_17;
  }
  if (v5)
  {
    if ((_DWORD)v7 != -1)
    {
LABEL_17:
      *a1 = v6;
      return a1;
    }
LABEL_14:
    v10 = v6;
    goto LABEL_17;
  }
  if ((_DWORD)v7 == -1)
  {
    v12 = v6;
    v13 = *a1;
    *a1 = v6;

  }
  else
  {

    *a1 = *a2;
  }
  return a1;
}

void **assignWithTake for EnsembleValidator.Error(void **a1, void **a2)
{
  void *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)v3 >= 0xFFFFFFFF)
    v5 = -1;
  else
    v5 = (int)v3;
  v6 = v5 + 1;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if (v6 > 0xB)
    goto LABEL_13;
  v8 = (_DWORD)v4 + 1;
  if (v8 > 0xB)
  {
    if (!v6)
      goto LABEL_12;
LABEL_13:
    *a1 = v7;
    return a1;
  }
  if (v6)
    goto LABEL_13;
  if (v8)
  {
LABEL_12:

    goto LABEL_13;
  }
  *a1 = v7;

  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleValidator.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF3 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483636);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 10;
  if (v4 < 0xC)
    v5 = 0;
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EnsembleValidator.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF4)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483636;
    if (a3 >= 0x7FFFFFF4)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF4)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 11;
  }
  return result;
}

uint64_t sub_23807EC8C(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 + 1;
  v3 = v1 - 10;
  if (v2 >= 0xC)
    return v3;
  else
    return 0;
}

_QWORD *sub_23807ECB0(_QWORD *result, unsigned int a2)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *result = 0;
    *(_DWORD *)result = a2 - 2147483637;
  }
  else if (a2)
  {
    *result = a2 + 10;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleValidator.Error()
{
  return &type metadata for EnsembleValidator.Error;
}

_QWORD *initializeBufferWithCopyOfBuffer for EnsembleValidator.Error.IntrospectionError(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for EnsembleValidator.Error.IntrospectionError(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for EnsembleValidator.Error.IntrospectionError(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

void **assignWithTake for EnsembleValidator.Error.IntrospectionError(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleValidator.Error.IntrospectionError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF4 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483637);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 10;
  if (v4 >= 0xC)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EnsembleValidator.Error.IntrospectionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483637;
    if (a3 >= 0x7FFFFFF5)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF5)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 10;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleValidator.Error.IntrospectionError()
{
  return &type metadata for EnsembleValidator.Error.IntrospectionError;
}

_UNKNOWN **sub_23807EEE0()
{
  return &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
}

unint64_t sub_23807EEEC()
{
  unint64_t result;

  result = qword_2568C8270;
  if (!qword_2568C8270)
  {
    result = MEMORY[0x23B82B770](&protocol conformance descriptor for EnsembleValidator.Error, &type metadata for EnsembleValidator.Error);
    atomic_store(result, (unint64_t *)&qword_2568C8270);
  }
  return result;
}

uint64_t sub_23807EF30()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23807EF54@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23807D698(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_23807EF6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568C5DE8;
  if (!qword_2568C5DE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C5DE0);
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2568C5DE8);
  }
  return result;
}

uint64_t sub_23807EFC0(uint64_t result, unint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;

  if (result < -8 || result > 8)
  {
LABEL_3:
    LOBYTE(v3) = 0;
    v4 = 0;
    if (a2 >= 8)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (result < 0)
  {
    if ((unint64_t)result <= 0xFFFFFFFFFFFFFFF8)
      goto LABEL_3;
    v4 = a3 << -(char)result;
    if (a2 >= 8)
    {
LABEL_8:
      LOBYTE(v3) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    if ((unint64_t)result >= 8)
      goto LABEL_3;
    v4 = a3 >> result;
    if (a2 >= 8)
      goto LABEL_8;
  }
LABEL_11:
  v3 = 1 << a2;
LABEL_12:
  v5 = v3 - 1;
  if ((v5 & 0xFFFFFF00) == 0)
    return v5 & v4;
  __break(1u);
  return result;
}

uint64_t SecureConfig.mimeType.getter()
{
  return sub_23807F070(0x7079745F656D696DLL, 0xE900000000000065);
}

uint64_t SecureConfig.name.getter()
{
  return sub_23807F070(1701667182, 0xE400000000000000);
}

uint64_t sub_23807F070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v4 = sub_23800DCFC(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t SecureConfig.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[4];
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  sub_237FFBA20(a1, a2);
  sub_2380BDDE4();
  v6 = sub_2380BDCC4();
  result = swift_bridgeObjectRelease();
  if ((v6 & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v17) = v6;
    MEMORY[0x24BDAC7A8](result);
    v16[2] = &v17;
    sub_237FFBA20(a1, a2);
    sub_23800FA10(2, 1, (uint64_t)sub_238082370, (uint64_t)v16, a1, a2);
    v9 = v8;
    sub_237FFBAB0(a1, a2);
    if (v9[2] == 2)
    {
      v10 = v9[4];
      v11 = v9[5];
      v12 = v9[6];
      v13 = v9[7];
      sub_237FFBA20(v10, v11);
      sub_237FFBA20(v12, v13);
      swift_bridgeObjectRelease();
      sub_2380BD190();
      swift_allocObject();
      sub_2380BD184();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568C8298);
      sub_238082388();
      sub_2380BD178();
      SecureConfig.init(entry:metadata:)(v12, v13, v17, (uint64_t)&v17);
      sub_237FFBAB0(a1, a2);
      swift_release();
      result = sub_237FFBAB0(v10, v11);
      v14 = v18;
      v15 = v19;
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v14;
      *(_OWORD *)(a3 + 24) = v15;
    }
    else
    {
      sub_237FFBAB0(a1, a2);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  return result;
}

uint64_t sub_23807F2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  void *v55;
  _QWORD v56[3];
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  id v64[5];
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C56E8);
  MEMORY[0x24BDAC7A8](v1);
  v58 = (char *)v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (uint64_t)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Proto_SealedHash.Entry(0);
  v5 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v62 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66C8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_SealedHashLedger(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (_QWORD *)((char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for Proto_SealedHash(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v57 = (uint64_t)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v0 + *(int *)(v20 + 32), (uint64_t)v12, &qword_2568C6418);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    *v16 = sub_23800C00C(MEMORY[0x24BEE4AF8]);
    sub_2380BD5BC();
    sub_238005240((uint64_t)v12, &qword_2568C6418);
  }
  else
  {
    sub_238001DE4((uint64_t)v12, (uint64_t)v16, type metadata accessor for Proto_SealedHashLedger);
  }
  v21 = *v16;
  swift_bridgeObjectRetain();
  sub_237FFD540((uint64_t)v16, type metadata accessor for Proto_SealedHashLedger);
  if (qword_2568C50E0 != -1)
    swift_once();
  v22 = sub_2380BD448();
  __swift_project_value_buffer(v22, (uint64_t)qword_2568C9120);
  v23 = sub_2380BD430();
  if (*(_QWORD *)(v21 + 16) && (v25 = sub_23800DCFC(v23, v24), (v26 & 1) != 0))
  {
    sub_238013570(*(_QWORD *)(v21 + 56) + *(_QWORD *)(v18 + 72) * v25, (uint64_t)v9, type metadata accessor for Proto_SealedHash);
    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v9, v27, 1, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v17) == 1)
  {
    sub_238005240((uint64_t)v9, &qword_2568C66C8);
    return 0;
  }
  v28 = (uint64_t)v9;
  v29 = v57;
  sub_238001DE4(v28, v57, type metadata accessor for Proto_SealedHash);
  v30 = *(_QWORD *)(v29 + 16);
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v33 = *(_QWORD *)(v5 + 72);
    v56[0] = *(_QWORD *)(v29 + 16);
    swift_bridgeObjectRetain_n();
    v63 = MEMORY[0x24BEE4AF8];
    v34 = (uint64_t)v58;
    v35 = v60;
    v36 = (uint64_t)v62;
    v59 = v33;
    do
    {
      sub_238013570(v32, v36, type metadata accessor for Proto_SealedHash.Entry);
      sub_2380051FC(v36 + *(int *)(v35 + 24), v34, &qword_2568C56E8);
      v37 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v34, 1, v37) == 1)
      {
        sub_238005240(v34, &qword_2568C56E8);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          v38 = v61;
          sub_238001DE4(v34, v61, type metadata accessor for Proto_SecureConfig);
          v39 = *(void **)v38;
          v40 = *(void **)(v38 + 8);
          v41 = (void *)objc_opt_self();
          swift_bridgeObjectRetain();
          sub_237FFBA20((uint64_t)v39, (unint64_t)v40);
          swift_bridgeObjectRetain();
          sub_237FFBA20((uint64_t)v39, (unint64_t)v40);
          v42 = (void *)sub_2380BDC40();
          swift_bridgeObjectRelease();
          v64[0] = 0;
          v43 = objc_msgSend(v41, sel_dataWithJSONObject_options_error_, v42, 2, v64);

          v44 = v64[0];
          if (v43)
          {
            v45 = sub_2380BD37C();
            v47 = v46;

            v65 = v45;
            v66 = v47;
            sub_237FFBA20(v45, v47);
            sub_238081614(10, 0xE100000000000000);
            sub_237FFBAB0(v45, v47);
            v67 = v65;
            v68 = v66;
            v64[3] = (id)MEMORY[0x24BDCDDE8];
            v64[4] = (id)MEMORY[0x24BDCDDC8];
            v64[0] = v39;
            v64[1] = v40;
            v48 = (char *)&loc_23807F844
                + dword_23807FC94[__swift_project_boxed_opaque_existential_1(v64, MEMORY[0x24BDCDDE8])[1] >> 62];
            __asm { BR              X9 }
          }
          v55 = v44;
          sub_2380BD274();

          swift_willThrow();
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0x23807FC94);
        }
        sub_237FFD540(v34, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
      }
      sub_237FFD540(v36, type metadata accessor for Proto_SealedHash.Entry);
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease_n();
    v29 = v57;
    v49 = *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16);
    v50 = v63;
  }
  else
  {
    v49 = 0;
    v50 = MEMORY[0x24BEE4AF8];
  }
  v51 = *(_QWORD *)(v50 + 16);
  v52 = v29;
  v53 = v50;
  sub_237FFD540(v52, type metadata accessor for Proto_SealedHash);
  result = v53;
  if (v51 != v49)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t SecureConfig.entry.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_237FFBA20(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t SecureConfig.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SecureConfig.serializedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_237FFBA20(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t SecureConfig.init(entry:metadata:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t result;
  __int128 v17;
  void *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  sub_237FFBA20(a1, a2);
  v9 = (void *)sub_2380BDC40();
  swift_bridgeObjectRelease();
  v19 = 0;
  v10 = objc_msgSend(v8, sel_dataWithJSONObject_options_error_, v9, 2, &v19);

  v11 = v19;
  if (v10)
  {
    v12 = sub_2380BD37C();
    v14 = v13;

    *(_QWORD *)&v20 = v12;
    *((_QWORD *)&v20 + 1) = v14;
    sub_237FFBA20(v12, v14);
    sub_238081614(10, 0xE100000000000000);
    sub_237FFBAB0(v12, v14);
    v15 = v20;
    v21 = v20;
    sub_237FFBA20(a1, a2);
    sub_237FFBA20(v15, *((unint64_t *)&v15 + 1));
    sub_2380813FC(a1, a2);
    sub_237FFBAB0(a1, a2);
    sub_237FFBAB0(v15, *((unint64_t *)&v15 + 1));
    result = sub_237FFBAB0(a1, a2);
    v17 = v21;
    *(_QWORD *)a4 = a1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_QWORD *)(a4 + 16) = a3;
    *(_OWORD *)(a4 + 24) = v17;
  }
  else
  {
    v18 = v11;
    sub_2380BD274();

    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_23807FEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  unint64_t *v26;
  uint64_t v27;
  uint64_t v29;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66C8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C6418);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_SealedHashLedger(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (unint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Proto_SealedHash(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Proto_AttestationBundle(0);
  sub_2380051FC(v0 + *(int *)(v15 + 32), (uint64_t)v6, &qword_2568C6418);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    *v10 = sub_23800C00C(MEMORY[0x24BEE4AF8]);
    sub_2380BD5BC();
    sub_238005240((uint64_t)v6, &qword_2568C6418);
  }
  else
  {
    sub_238001DE4((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  }
  v16 = *v10;
  swift_bridgeObjectRetain();
  sub_237FFD540((uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  if (qword_2568C50E0 != -1)
    swift_once();
  v17 = sub_2380BD448();
  __swift_project_value_buffer(v17, (uint64_t)qword_2568C9120);
  v18 = sub_2380BD430();
  if (*(_QWORD *)(v16 + 16) && (v20 = sub_23800DCFC(v18, v19), (v21 & 1) != 0))
  {
    sub_238013570(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v12 + 72) * v20, (uint64_t)v3, type metadata accessor for Proto_SealedHash);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v3, v22, 1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v3, 1, v11) == 1)
  {
    sub_238005240((uint64_t)v3, &qword_2568C66C8);
    return 0;
  }
  sub_238001DE4((uint64_t)v3, (uint64_t)v14, type metadata accessor for Proto_SealedHash);
  v23 = *(_QWORD *)v14;
  v24 = v14[8];
  sub_237FFD540((uint64_t)v14, type metadata accessor for Proto_SealedHash);
  if (v24 != 1)
    return 0;
  if (v23)
  {
    if (v23 == 1)
    {
      v23 = sub_2380BD988();
      v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
      v26 = &qword_2568C5DA8;
      v27 = MEMORY[0x24BDC6AE8];
    }
    else
    {
      v23 = sub_2380BD9AC();
      v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20];
      v26 = &qword_2568C5898;
      v27 = MEMORY[0x24BDC6B10];
    }
    sub_238001820(v26, v25, v27);
  }
  return v23;
}

uint64_t sub_238080220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t AssociatedTypeWitness;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t AssociatedConformanceWitness;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58[5];
  _QWORD *v59;

  v5 = v4;
  v48 = a4;
  v9 = type metadata accessor for SEP.SealedHash(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v45 = v10;
    v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v47 = v4;
    v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_238075D34(0, v13, 0);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v51 = a1;
    v52 = a2;
    v50 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v16 = (unint64_t *)(a3 + 64);
    do
    {
      v55 = v13;
      v17 = *(v16 - 4);
      v19 = *(v16 - 2);
      v20 = *(v16 - 1);
      v53 = *(v16 - 3);
      v18 = v53;
      v54 = v19;
      v21 = *v16;
      v56 = v20;
      v57 = v21;
      v22 = v50;
      v58[3] = v50;
      v58[4] = AssociatedConformanceWitness;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
      sub_237FFBA20(v17, v18);
      swift_bridgeObjectRetain();
      sub_237FFBA20(v20, v21);
      sub_23800915C();
      v24 = sub_2380BD82C();
      MEMORY[0x24BDAC7A8](v24);
      (*(void (**)(char *, uint64_t *, uint64_t))(v26 + 16))((char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), boxed_opaque_existential_1, v22);
      v27 = sub_2380BD3B8();
      v29 = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      sub_237FFBAB0(v17, v53);
      swift_bridgeObjectRelease();
      sub_237FFBAB0(v20, v21);
      v14 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_238075D34(0, v14[2] + 1, 1);
        v14 = v59;
      }
      v31 = v14[2];
      v30 = v14[3];
      v32 = v55;
      if (v31 >= v30 >> 1)
      {
        sub_238075D34(v30 > 1, v31 + 1, 1);
        v14 = v59;
      }
      v16 += 5;
      v14[2] = v31 + 1;
      v33 = &v14[2 * v31];
      v33[4] = v27;
      v33[5] = v29;
      v13 = v32 - 1;
    }
    while (v13);
    v12 = v46;
    v5 = v47;
    v10 = v45;
  }
  *v12 = 2;
  v34 = (uint64_t)&v12[*(int *)(v10 + 20)];
  sub_2380BD9A0();
  type metadata accessor for SEP.SealedHash.Value(0);
  swift_storeEnumTagMultiPayload();
  v35 = v14[2];
  if (v35)
  {
    swift_bridgeObjectRetain();
    for (i = v14 + 5; ; i += 2)
    {
      v38 = *(i - 1);
      v37 = *i;
      sub_237FFBA20(v38, *i);
      sub_2380068C4(v38, v37);
      v40 = v39;
      v42 = v41;
      LOBYTE(v58[0]) = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v39, v41);
      if (v5)
        break;
      sub_237FFBAB0(v40, v42);
      if (!--v35)
      {
        swift_bridgeObjectRelease_n();
        return sub_238001DE4(v34, v48, type metadata accessor for SEP.SealedHash.Value);
      }
    }
    sub_237FFBAB0(v40, v42);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_238008B9C();
    swift_allocError();
    *(_DWORD *)v44 = 2;
    *(_BYTE *)(v44 + 4) = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  return sub_237FFD540((uint64_t)v12, type metadata accessor for SEP.SealedHash);
}

uint64_t sub_2380805D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_2380BDDD8();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B82AC48](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void sub_23808064C()
{
  __asm { BR              X12 }
}

uint64_t sub_2380806AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

void sub_238080880()
{
  __asm { BR              X11 }
}

_QWORD *sub_2380808E0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

uint64_t sub_238080B70(uint64_t (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_2380BD2EC();
  v4 = *v1;
  v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_2380BD208();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v6 = result;
  result = sub_2380BD22C();
  v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = v5 - v4;
  v9 = sub_2380BD220();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  return a1(v6 + v7, v6 + v7 + v10);
}

char *sub_238080C18(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_2380BD208();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_2380BD22C();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_2380BD220();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_238080CC4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_2380BD208();
  if (!result || (result = sub_2380BD22C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_2380BD220();
      return sub_2380BD334();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_238080D54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_238080D64 + dword_238080E0C[a4 >> 62]))();
}

uint64_t sub_238080D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x238080E04);
  }
  return ((uint64_t (*)(void))((char *)&loc_238080DB4 + dword_238080E1C[a3]))();
}

uint64_t sub_238080E2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = sub_2380BDA60();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 24);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 48) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_2380810F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X9 }
}

uint64_t sub_238081154(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (v4 && v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v5 - 120) = v1;
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x2380813CCLL);
  }
  *a1 = v2;
  a1[1] = v7;
  a1[2] = BYTE6(v7);
  return 0;
}

void sub_2380813FC(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_238081460
     + dword_238081604[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_238081470()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_237FFBA20(v1, v0);
  sub_2380BD334();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

unint64_t sub_238081614(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t result;
  __int128 v7[2];
  uint64_t v8;
  _QWORD v9[7];

  v9[5] = *MEMORY[0x24BDAC8D0];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A18);
  if (swift_dynamicCast())
  {
    sub_23800A4E4(v7, (uint64_t)v9);
    v3 = __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    MEMORY[0x24BDAC7A8](v3);
    sub_2380BD268();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_238005240((uint64_t)v7, &qword_2568C5A20);
    result = sub_2380822E0(a1, a2);
    if ((result & 1) != 0)
    {
      if ((a2 & 0x1000000000000000) != 0)
        sub_2380BDD9C();
      __asm { BR              X12 }
    }
  }
  return result;
}

uint64_t sub_238081B14(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  __int128 v4[2];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[5] = a1;
  v9 = a2;
  v6 = a1;
  v7 = a2;
  sub_237FFBA20(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C5A18);
  if (!swift_dynamicCast())
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    sub_238005240((uint64_t)v4, &qword_2568C5A20);
    __asm { BR              X10 }
  }
  sub_23800A4E4(v4, (uint64_t)v8);
  v2 = __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  MEMORY[0x24BDAC7A8](v2);
  sub_2380BD268();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t sub_2380820E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    if (__OFSUB__(a2 - a1, a3))
    {
      __break(1u);
      JUMPOUT(0x2380822D0);
    }
    v9 = a1 + a3;
    v10 = a2;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  if (!v9)
    __asm { BR              X10 }
  sub_237FFBA20(a4, a5);
  sub_237FFBA20(a4, a5);
  sub_237FFBA20(a4, a5);
  sub_2380810F4(a6, v9, v10 - v9, a4, a5);
  *(_QWORD *)(a6 + 24) = v12;
  swift_release();
  return sub_237FFBAB0(a4, a5);
}

unint64_t sub_2380822E0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a2 & 0x1000000000000000;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
      sub_2380BE078();
    sub_2380BD334();
  }
  return v2 >> 60;
}

BOOL sub_238082370(unsigned __int8 *a1)
{
  uint64_t v1;

  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

unint64_t sub_238082388()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2568C82A0;
  if (!qword_2568C82A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568C8298);
    v2[0] = MEMORY[0x24BEE0D38];
    v2[1] = MEMORY[0x24BEE0D38];
    result = MEMORY[0x23B82B770](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2568C82A0);
  }
  return result;
}

uint64_t destroy for SecureConfig(uint64_t a1)
{
  sub_237FFBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return sub_237FFBAB0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t *initializeWithCopy for SecureConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_237FFBA20(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  v7 = a2[4];
  swift_bridgeObjectRetain();
  sub_237FFBA20(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for SecureConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_237FFBA20(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_237FFBAB0(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a2[3];
  v8 = a2[4];
  sub_237FFBA20(v9, v8);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v9;
  a1[4] = v8;
  sub_237FFBAB0(v10, v11);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for SecureConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_237FFBAB0(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = a1[3];
  v7 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_237FFBAB0(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureConfig()
{
  return &type metadata for SecureConfig;
}

uint64_t sub_238082600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2380820E0(a1, a2, *(_QWORD *)(v3 + 16), **(_QWORD **)(v3 + 32), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8), a3);
}

uint64_t sub_238082620()
{
  return sub_2380BD334();
}

uint64_t sub_238082648()
{
  uint64_t v0;

  sub_237FFBAB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_23808266C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_2380826A4(a1, a2, *(_QWORD *)(v3 + 16), **(_QWORD **)(v3 + 32), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return result;
}

uint64_t sub_2380826A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;

  if (result)
  {
    if (__OFSUB__(a2 - result, a3))
    {
      __break(1u);
      goto LABEL_9;
    }
    v7 = result + a3;
  }
  else
  {
    v7 = 0;
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  if (!v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain_n();
  result = sub_2380BE054();
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_238082778()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23808279C()
{
  return sub_238082620();
}

uint64_t CryptexPolicy.init(locked:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2380827BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_2380BD448();
  __swift_allocate_value_buffer(v0, qword_2568C82A8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2568C82A8);
  if (qword_2568C4EA8 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2568C9B98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t static CryptexPolicy.slot.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2568C5040 != -1)
    swift_once();
  v2 = sub_2380BD448();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2568C82A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_2380828BC()
{
  uint64_t v0;

  v0 = sub_2380BD808();
  __swift_allocate_value_buffer(v0, qword_2568C9F60);
  __swift_project_value_buffer(v0, (uint64_t)qword_2568C9F60);
  return sub_2380BD7FC();
}

uint64_t CryptexPolicy.init(_:locked:fallback:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t CryptexPolicy.init(_:locked:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t CryptexPolicy.init(locked:fallback:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = result;
  return result;
}

uint64_t CryptexPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  type metadata accessor for SEP.SealedHash.Value(0);
  *(_QWORD *)(v3 + 40) = swift_task_alloc();
  *(_QWORD *)(v3 + 48) = swift_task_alloc();
  v4 = type metadata accessor for SEP.SealedHash(0);
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 72) = swift_task_alloc();
  *(_QWORD *)(v3 + 80) = swift_task_alloc();
  *(_QWORD *)(v3 + 88) = __swift_instantiateConcreteTypeFromMangledName(&qword_2568C82E0);
  *(_QWORD *)(v3 + 96) = swift_task_alloc();
  v5 = sub_2380BD448();
  *(_QWORD *)(v3 + 104) = v5;
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 120) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568C66F0);
  *(_QWORD *)(v3 + 128) = swift_task_alloc();
  *(_QWORD *)(v3 + 136) = swift_task_alloc();
  *(_QWORD *)(v3 + 144) = swift_task_alloc();
  v6 = swift_task_alloc();
  v7 = *v2;
  *(_QWORD *)(v3 + 152) = v6;
  *(_QWORD *)(v3 + 160) = v7;
  *(_BYTE *)(v3 + 168) = *((_BYTE *)v2 + 8);
  return swift_task_switch();
}

uint64_t sub_238082AA8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  const char *v103;
  uint64_t v104;
  uint64_t (*v105)(void);
  uint64_t v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t, uint64_t);
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;

  v1 = *(_QWORD *)(v0 + 160);
  if (!v1)
  {
    v128 = **(_QWORD **)(v0 + 32);
    AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v124);
    v2 = v124;
    v3 = v125;
    v4 = v126;
    v5 = v127;
    v128 = v124;
    v129 = v125;
    v130 = v126;
    v131 = v127;
    v1 = sub_238084498(&v128);
    sub_23804E940(v2, v3, v4, v5);
    if (!v1)
      v1 = sub_23800BE54(MEMORY[0x24BEE4AF8]);
  }
  v6 = qword_2568C5040;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = __swift_project_value_buffer(v9, (uint64_t)qword_2568C82A8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v11(v8, v10, v9);
  if (*(_QWORD *)(v1 + 16))
  {
    v12 = sub_23800DF54(*(_QWORD *)(v0 + 120));
    v13 = *(_QWORD *)(v0 + 152);
    v15 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 64);
    if ((v16 & 1) != 0)
    {
      sub_238013570(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v14 + 72) * v12, *(_QWORD *)(v0 + 152), type metadata accessor for SEP.SealedHash);
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v17(v13, 0, 1, v15);
    }
    else
    {
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v17(*(_QWORD *)(v0 + 152), 1, 1, v15);
    }
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 56);
    v17(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 56));
  }
  v19 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  sub_23807A514(v10, 0, &v128);
  v21 = v128;
  v22 = v129;
  if (v129 != 255)
  {
    v23 = *(_QWORD *)(v0 + 152);
    v24 = *(_QWORD *)(v0 + 56);
    goto LABEL_13;
  }
  v121 = v128;
  v122 = v11;
  v120 = v10;
  if (qword_2568C5050 != -1)
    swift_once();
  v41 = *(_QWORD *)(v0 + 144);
  v40 = *(_QWORD *)(v0 + 152);
  v42 = *(_QWORD *)(v0 + 88);
  v43 = *(_QWORD *)(v0 + 96);
  v45 = *(_QWORD *)(v0 + 56);
  v44 = *(_QWORD *)(v0 + 64);
  v46 = __swift_project_value_buffer(v45, (uint64_t)qword_2568C82C0);
  sub_238013570(v46, v41, type metadata accessor for SEP.SealedHash);
  v17(v41, 0, 1, v45);
  v47 = v43 + *(int *)(v42 + 48);
  sub_2380847B8(v40, v43);
  sub_2380847B8(v41, v47);
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  if (v48(v43, 1, v45) == 1)
  {
    v49 = *(_QWORD *)(v0 + 56);
    sub_238005240(*(_QWORD *)(v0 + 144), &qword_2568C66F0);
    v10 = v120;
    v11 = v122;
    if (v48(v47, 1, v49) == 1)
    {
      sub_238005240(*(_QWORD *)(v0 + 96), &qword_2568C66F0);
      v50 = 1;
      goto LABEL_56;
    }
    goto LABEL_34;
  }
  v51 = *(_QWORD *)(v0 + 56);
  sub_2380847B8(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 136));
  if (v48(v47, 1, v51) == 1)
  {
    v52 = *(_QWORD *)(v0 + 136);
    sub_238005240(*(_QWORD *)(v0 + 144), &qword_2568C66F0);
    sub_237FFD540(v52, type metadata accessor for SEP.SealedHash);
    v10 = v120;
    v11 = v122;
LABEL_34:
    sub_238005240(*(_QWORD *)(v0 + 96), &qword_2568C82E0);
    v50 = 0;
    goto LABEL_56;
  }
  v64 = *(unsigned __int8 **)(v0 + 136);
  v65 = *(unsigned __int8 **)(v0 + 80);
  sub_238001DE4(v47, (uint64_t)v65, type metadata accessor for SEP.SealedHash);
  if (*v64 == *v65)
  {
    v66 = sub_2380062E0();
    v68 = v67;
    v69 = sub_2380062E0();
    v71 = v70;
    sub_238008ED0(v66, v68);
    v50 = v72;
    sub_237FFBAB0(v69, v71);
    sub_237FFBAB0(v66, v68);
  }
  else
  {
    v50 = 0;
  }
  v97 = *(_QWORD *)(v0 + 136);
  v96 = *(_QWORD *)(v0 + 144);
  v98 = *(_QWORD *)(v0 + 96);
  sub_237FFD540(*(_QWORD *)(v0 + 80), type metadata accessor for SEP.SealedHash);
  sub_238005240(v96, &qword_2568C66F0);
  sub_237FFD540(v97, type metadata accessor for SEP.SealedHash);
  sub_238005240(v98, &qword_2568C66F0);
  v10 = v120;
  v11 = v122;
LABEL_56:
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 56);
  if (v48(v23, 1, v24) == 1)
  {
    v21 = v121;
    if ((*(_BYTE *)(v0 + 168) & 1) == 0)
      goto LABEL_66;
    goto LABEL_60;
  }
  v21 = v121;
  if ((*(_BYTE *)(v0 + 168) & 1) != 0)
  {
LABEL_60:
    if ((v50 & 1) != 0)
    {
      if (qword_2568C5048 != -1)
        swift_once();
      v99 = sub_2380BD808();
      __swift_project_value_buffer(v99, (uint64_t)qword_2568C9F60);
      v100 = sub_2380BD7F0();
      v101 = sub_2380BDF64();
      if (!os_log_type_enabled(v100, v101))
        goto LABEL_71;
      v102 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v102 = 0;
      v103 = "Device has no cryptexes installed, and is in cryptex lockdown";
      goto LABEL_70;
    }
LABEL_13:
    v25 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 64);
    sub_2380847B8(v23, v25);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v25, 1, v24);
    v28 = *(_QWORD *)(v0 + 128);
    if (v27 == 1)
    {
      sub_238030954(v21, v22);
      sub_238005240(v28, &qword_2568C66F0);
      if (qword_2568C5048 != -1)
        swift_once();
      v29 = sub_2380BD808();
      __swift_project_value_buffer(v29, (uint64_t)qword_2568C9F60);
      v30 = sub_2380BD7F0();
      v31 = sub_2380BDF64();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_237FF6000, v30, v31, "Missing cryptex sealed hash slot from SEP Attestation", v32, 2u);
        MEMORY[0x23B82B830](v32, -1, -1);
      }
      v33 = *(_QWORD *)(v0 + 152);

      type metadata accessor for CryptexPolicy.Error();
      sub_238001820(&qword_2568C82E8, (uint64_t (*)(uint64_t))type metadata accessor for CryptexPolicy.Error, (uint64_t)&protocol conformance descriptor for CryptexPolicy.Error);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_79;
    }
    sub_238001DE4(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72), type metadata accessor for SEP.SealedHash);
    if (v22 == 255)
    {
      if (qword_2568C5048 != -1)
        swift_once();
      v123 = v11;
      v53 = sub_2380BD808();
      __swift_project_value_buffer(v53, (uint64_t)qword_2568C9F60);
      v54 = sub_2380BD7F0();
      v55 = sub_2380BDF64();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v56 = 0;
        _os_log_impl(&dword_237FF6000, v54, v55, "Missing cryptex ledger from SecureConfigDB", v56, 2u);
        MEMORY[0x23B82B830](v56, -1, -1);
      }
      v33 = *(_QWORD *)(v0 + 152);
      v57 = *(_QWORD *)(v0 + 104);
      v58 = *(_QWORD *)(v0 + 72);
      v59 = *(_QWORD *)(v0 + 56);

      type metadata accessor for CryptexPolicy.Error();
      sub_238001820(&qword_2568C82E8, (uint64_t (*)(uint64_t))type metadata accessor for CryptexPolicy.Error, (uint64_t)&protocol conformance descriptor for CryptexPolicy.Error);
      swift_allocError();
      v61 = v60;
      v62 = v60 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C82F0) + 48);
      v123(v61, v10, v57);
      sub_238013570(v58 + *(int *)(v59 + 20), v62, type metadata accessor for SEP.SealedHash.Value);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      v34 = v22 & 1;
      if (*(_BYTE *)(v0 + 168) == 1)
      {
        v35 = **(_BYTE **)(v0 + 72) & 4;
        if ((v34 != 0) != (v35 != 0))
        {
          sub_238030954(v21, v22);
          if (qword_2568C5048 != -1)
            swift_once();
          v36 = sub_2380BD808();
          __swift_project_value_buffer(v36, (uint64_t)qword_2568C9F60);
          v37 = sub_2380BD7F0();
          v38 = sub_2380BDF64();
          if (os_log_type_enabled(v37, v38))
          {
            v39 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v39 = 0;
            _os_log_impl(&dword_237FF6000, v37, v38, "Cryptex Log and SEP Attestation's Sealed Hash have inconsistent lock states", v39, 2u);
            MEMORY[0x23B82B830](v39, -1, -1);
          }
LABEL_77:
          v33 = *(_QWORD *)(v0 + 152);
          v109 = *(_QWORD *)(v0 + 72);

          type metadata accessor for CryptexPolicy.Error();
          sub_238001820(&qword_2568C82E8, (uint64_t (*)(uint64_t))type metadata accessor for CryptexPolicy.Error, (uint64_t)&protocol conformance descriptor for CryptexPolicy.Error);
          swift_allocError();
          *v110 = v34;
          v110[1] = v35 >> 2;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          v63 = v109;
          goto LABEL_78;
        }
        if ((v22 & 1) == 0 || (**(_BYTE **)(v0 + 72) & 4) == 0)
        {
          sub_238030954(v21, v22);
          if (qword_2568C5048 != -1)
            swift_once();
          v106 = sub_2380BD808();
          __swift_project_value_buffer(v106, (uint64_t)qword_2568C9F60);
          v37 = sub_2380BD7F0();
          v107 = sub_2380BDF64();
          if (os_log_type_enabled(v37, v107))
          {
            v108 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v108 = 0;
            _os_log_impl(&dword_237FF6000, v37, v107, "Cryptex slot is unexpectedly unlocked", v108, 2u);
            MEMORY[0x23B82B830](v108, -1, -1);
          }
          goto LABEL_77;
        }
      }
      v73 = sub_23807A1D8();
      if (v73)
      {
        v75 = v73;
      }
      else
      {
        v75 = sub_2380BD9AC();
        v74 = sub_238001820(&qword_2568C5898, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
      }
      v76 = *(_QWORD *)(v0 + 40);
      v128 = v21;
      LOBYTE(v129) = v34 != 0;
      sub_2380799D4(v75, v74, 0xF000000000000000, v76);
      v77 = *(_QWORD *)(v0 + 72);
      v78 = *(_QWORD *)(v0 + 48);
      v79 = *(_QWORD *)(v0 + 56);
      v80 = *(_QWORD *)(v0 + 40);
      sub_238030954(v21, v22);
      sub_238001DE4(v80, v78, type metadata accessor for SEP.SealedHash.Value);
      v81 = v77 + *(int *)(v79 + 20);
      v82 = sub_2380062E0();
      v84 = v83;
      v85 = sub_2380062E0();
      v87 = v86;
      sub_238008ED0(v82, v84);
      v89 = v88;
      sub_237FFBAB0(v85, v87);
      sub_237FFBAB0(v82, v84);
      if ((v89 & 1) != 0)
      {
        if (qword_2568C5048 != -1)
          swift_once();
        v90 = sub_2380BD808();
        __swift_project_value_buffer(v90, (uint64_t)qword_2568C9F60);
        v91 = sub_2380BD7F0();
        v92 = sub_2380BDF70();
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v93 = 0;
          _os_log_impl(&dword_237FF6000, v91, v92, "AttestationBundle passed CryptexPolicy: reported cryptexes match SEP attestation", v93, 2u);
          MEMORY[0x23B82B830](v93, -1, -1);
        }
        v94 = *(_QWORD *)(v0 + 72);
        v95 = *(_QWORD *)(v0 + 48);

        sub_237FFD540(v95, type metadata accessor for SEP.SealedHash.Value);
        sub_237FFD540(v94, type metadata accessor for SEP.SealedHash);
        goto LABEL_72;
      }
      if (qword_2568C5048 != -1)
        swift_once();
      v112 = sub_2380BD808();
      __swift_project_value_buffer(v112, (uint64_t)qword_2568C9F60);
      v113 = sub_2380BD7F0();
      v114 = sub_2380BDF64();
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v115 = 0;
        _os_log_impl(&dword_237FF6000, v113, v114, "Cryptex log from SecureConfigDB did not replay against SEP Attestation's Sealed Hash", v115, 2u);
        MEMORY[0x23B82B830](v115, -1, -1);
      }
      v33 = *(_QWORD *)(v0 + 152);
      v58 = *(_QWORD *)(v0 + 72);
      v116 = *(_QWORD *)(v0 + 48);

      type metadata accessor for CryptexPolicy.Error();
      sub_238001820(&qword_2568C82E8, (uint64_t (*)(uint64_t))type metadata accessor for CryptexPolicy.Error, (uint64_t)&protocol conformance descriptor for CryptexPolicy.Error);
      swift_allocError();
      v118 = v117;
      v119 = v117 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2568C82F8) + 48);
      sub_238013570(v116, v118, type metadata accessor for SEP.SealedHash.Value);
      sub_238013570(v81, v119, type metadata accessor for SEP.SealedHash.Value);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_237FFD540(v116, type metadata accessor for SEP.SealedHash.Value);
    }
    v63 = v58;
LABEL_78:
    sub_237FFD540(v63, type metadata accessor for SEP.SealedHash);
LABEL_79:
    sub_238005240(v33, &qword_2568C66F0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v105 = *(uint64_t (**)(void))(v0 + 8);
    return v105();
  }
  if ((v50 & 1) == 0)
    goto LABEL_13;
LABEL_66:
  if (qword_2568C5048 != -1)
    swift_once();
  v104 = sub_2380BD808();
  __swift_project_value_buffer(v104, (uint64_t)qword_2568C9F60);
  v100 = sub_2380BD7F0();
  v101 = sub_2380BDF64();
  if (!os_log_type_enabled(v100, v101))
    goto LABEL_71;
  v102 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v102 = 0;
  v103 = "Device has no cryptexes installed";
LABEL_70:
  _os_log_impl(&dword_237FF6000, v100, v101, v103, v102, 2u);
  MEMORY[0x23B82B830](v102, -1, -1);
LABEL_71:

LABEL_72:
  sub_238005240(*(_QWORD *)(v0 + 152), &qword_2568C66F0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v105 = *(uint64_t (**)(void))(v0 + 8);
  return v105();
}

